// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/streetview/publish/v1/resources.proto

#include "google/streetview/publish/v1/resources.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)
namespace google {
namespace streetview {
namespace publish {
namespace v1 {
class UploadRefDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<UploadRef>
      _instance;
} _UploadRef_default_instance_;
class PhotoIdDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PhotoId>
      _instance;
} _PhotoId_default_instance_;
class LevelDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Level>
      _instance;
} _Level_default_instance_;
class PoseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Pose>
      _instance;
} _Pose_default_instance_;
class PlaceDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Place>
      _instance;
} _Place_default_instance_;
class ConnectionDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Connection>
      _instance;
} _Connection_default_instance_;
class PhotoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Photo>
      _instance;
} _Photo_default_instance_;
}  // namespace v1
}  // namespace publish
}  // namespace streetview
}  // namespace google
namespace protobuf_google_2fstreetview_2fpublish_2fv1_2fresources_2eproto {
void InitDefaultsUploadRefImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::google::streetview::publish::v1::_UploadRef_default_instance_;
    new (ptr) ::google::streetview::publish::v1::UploadRef();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::streetview::publish::v1::UploadRef::InitAsDefaultInstance();
}

void InitDefaultsUploadRef() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsUploadRefImpl);
}

void InitDefaultsPhotoIdImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::google::streetview::publish::v1::_PhotoId_default_instance_;
    new (ptr) ::google::streetview::publish::v1::PhotoId();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::streetview::publish::v1::PhotoId::InitAsDefaultInstance();
}

void InitDefaultsPhotoId() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsPhotoIdImpl);
}

void InitDefaultsLevelImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::google::streetview::publish::v1::_Level_default_instance_;
    new (ptr) ::google::streetview::publish::v1::Level();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::streetview::publish::v1::Level::InitAsDefaultInstance();
}

void InitDefaultsLevel() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsLevelImpl);
}

void InitDefaultsPoseImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_google_2ftype_2flatlng_2eproto::InitDefaultsLatLng();
  protobuf_google_2fstreetview_2fpublish_2fv1_2fresources_2eproto::InitDefaultsLevel();
  {
    void* ptr = &::google::streetview::publish::v1::_Pose_default_instance_;
    new (ptr) ::google::streetview::publish::v1::Pose();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::streetview::publish::v1::Pose::InitAsDefaultInstance();
}

void InitDefaultsPose() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsPoseImpl);
}

void InitDefaultsPlaceImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::google::streetview::publish::v1::_Place_default_instance_;
    new (ptr) ::google::streetview::publish::v1::Place();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::streetview::publish::v1::Place::InitAsDefaultInstance();
}

void InitDefaultsPlace() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsPlaceImpl);
}

void InitDefaultsConnectionImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_google_2fstreetview_2fpublish_2fv1_2fresources_2eproto::InitDefaultsPhotoId();
  {
    void* ptr = &::google::streetview::publish::v1::_Connection_default_instance_;
    new (ptr) ::google::streetview::publish::v1::Connection();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::streetview::publish::v1::Connection::InitAsDefaultInstance();
}

void InitDefaultsConnection() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsConnectionImpl);
}

void InitDefaultsPhotoImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_google_2fstreetview_2fpublish_2fv1_2fresources_2eproto::InitDefaultsPhotoId();
  protobuf_google_2fstreetview_2fpublish_2fv1_2fresources_2eproto::InitDefaultsUploadRef();
  protobuf_google_2fstreetview_2fpublish_2fv1_2fresources_2eproto::InitDefaultsPose();
  protobuf_google_2fstreetview_2fpublish_2fv1_2fresources_2eproto::InitDefaultsConnection();
  protobuf_google_2fprotobuf_2ftimestamp_2eproto::InitDefaultsTimestamp();
  protobuf_google_2fstreetview_2fpublish_2fv1_2fresources_2eproto::InitDefaultsPlace();
  {
    void* ptr = &::google::streetview::publish::v1::_Photo_default_instance_;
    new (ptr) ::google::streetview::publish::v1::Photo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::streetview::publish::v1::Photo::InitAsDefaultInstance();
}

void InitDefaultsPhoto() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsPhotoImpl);
}

::google::protobuf::Metadata file_level_metadata[7];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::streetview::publish::v1::UploadRef, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::streetview::publish::v1::UploadRef, upload_url_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::streetview::publish::v1::PhotoId, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::streetview::publish::v1::PhotoId, id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::streetview::publish::v1::Level, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::streetview::publish::v1::Level, number_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::streetview::publish::v1::Level, name_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::streetview::publish::v1::Pose, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::streetview::publish::v1::Pose, lat_lng_pair_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::streetview::publish::v1::Pose, altitude_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::streetview::publish::v1::Pose, heading_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::streetview::publish::v1::Pose, pitch_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::streetview::publish::v1::Pose, roll_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::streetview::publish::v1::Pose, level_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::streetview::publish::v1::Place, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::streetview::publish::v1::Place, place_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::streetview::publish::v1::Connection, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::streetview::publish::v1::Connection, target_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::streetview::publish::v1::Photo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::streetview::publish::v1::Photo, photo_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::streetview::publish::v1::Photo, upload_reference_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::streetview::publish::v1::Photo, download_url_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::streetview::publish::v1::Photo, thumbnail_url_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::streetview::publish::v1::Photo, share_link_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::streetview::publish::v1::Photo, pose_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::streetview::publish::v1::Photo, connections_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::streetview::publish::v1::Photo, capture_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::streetview::publish::v1::Photo, places_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::streetview::publish::v1::Photo, view_count_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::google::streetview::publish::v1::UploadRef)},
  { 6, -1, sizeof(::google::streetview::publish::v1::PhotoId)},
  { 12, -1, sizeof(::google::streetview::publish::v1::Level)},
  { 19, -1, sizeof(::google::streetview::publish::v1::Pose)},
  { 30, -1, sizeof(::google::streetview::publish::v1::Place)},
  { 36, -1, sizeof(::google::streetview::publish::v1::Connection)},
  { 42, -1, sizeof(::google::streetview::publish::v1::Photo)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::streetview::publish::v1::_UploadRef_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::streetview::publish::v1::_PhotoId_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::streetview::publish::v1::_Level_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::streetview::publish::v1::_Pose_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::streetview::publish::v1::_Place_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::streetview::publish::v1::_Connection_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::streetview::publish::v1::_Photo_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "google/streetview/publish/v1/resources.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 7);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n,google/streetview/publish/v1/resources"
      ".proto\022\034google.streetview.publish.v1\032\034go"
      "ogle/api/annotations.proto\032\037google/proto"
      "buf/timestamp.proto\032\030google/type/latlng."
      "proto\"\037\n\tUploadRef\022\022\n\nupload_url\030\001 \001(\t\"\025"
      "\n\007PhotoId\022\n\n\002id\030\001 \001(\t\"%\n\005Level\022\016\n\006number"
      "\030\001 \001(\001\022\014\n\004name\030\002 \001(\t\"\245\001\n\004Pose\022)\n\014lat_lng"
      "_pair\030\001 \001(\0132\023.google.type.LatLng\022\020\n\010alti"
      "tude\030\002 \001(\001\022\017\n\007heading\030\003 \001(\001\022\r\n\005pitch\030\004 \001"
      "(\001\022\014\n\004roll\030\005 \001(\001\0222\n\005level\030\007 \001(\0132#.google"
      ".streetview.publish.v1.Level\"\031\n\005Place\022\020\n"
      "\010place_id\030\001 \001(\t\"C\n\nConnection\0225\n\006target\030"
      "\001 \001(\0132%.google.streetview.publish.v1.Pho"
      "toId\"\260\003\n\005Photo\0227\n\010photo_id\030\001 \001(\0132%.googl"
      "e.streetview.publish.v1.PhotoId\022A\n\020uploa"
      "d_reference\030\002 \001(\0132\'.google.streetview.pu"
      "blish.v1.UploadRef\022\024\n\014download_url\030\003 \001(\t"
      "\022\025\n\rthumbnail_url\030\t \001(\t\022\022\n\nshare_link\030\013 "
      "\001(\t\0220\n\004pose\030\004 \001(\0132\".google.streetview.pu"
      "blish.v1.Pose\022=\n\013connections\030\005 \003(\0132(.goo"
      "gle.streetview.publish.v1.Connection\0220\n\014"
      "capture_time\030\006 \001(\0132\032.google.protobuf.Tim"
      "estamp\0223\n\006places\030\007 \003(\0132#.google.streetvi"
      "ew.publish.v1.Place\022\022\n\nview_count\030\n \001(\003B"
      "\213\001\n(com.google.geo.ugc.streetview.publis"
      "h.v1B\032StreetViewPublishResourcesZCgoogle"
      ".golang.org/genproto/googleapis/streetvi"
      "ew/publish/v1;publishb\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 1109);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "google/streetview/publish/v1/resources.proto", &protobuf_RegisterTypes);
  ::protobuf_google_2fapi_2fannotations_2eproto::AddDescriptors();
  ::protobuf_google_2fprotobuf_2ftimestamp_2eproto::AddDescriptors();
  ::protobuf_google_2ftype_2flatlng_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_google_2fstreetview_2fpublish_2fv1_2fresources_2eproto
namespace google {
namespace streetview {
namespace publish {
namespace v1 {

// ===================================================================

void UploadRef::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UploadRef::kUploadUrlFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UploadRef::UploadRef()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_google_2fstreetview_2fpublish_2fv1_2fresources_2eproto::InitDefaultsUploadRef();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.streetview.publish.v1.UploadRef)
}
UploadRef::UploadRef(const UploadRef& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  upload_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.upload_url().size() > 0) {
    upload_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.upload_url_);
  }
  // @@protoc_insertion_point(copy_constructor:google.streetview.publish.v1.UploadRef)
}

void UploadRef::SharedCtor() {
  upload_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

UploadRef::~UploadRef() {
  // @@protoc_insertion_point(destructor:google.streetview.publish.v1.UploadRef)
  SharedDtor();
}

void UploadRef::SharedDtor() {
  upload_url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void UploadRef::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UploadRef::descriptor() {
  ::protobuf_google_2fstreetview_2fpublish_2fv1_2fresources_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fstreetview_2fpublish_2fv1_2fresources_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const UploadRef& UploadRef::default_instance() {
  ::protobuf_google_2fstreetview_2fpublish_2fv1_2fresources_2eproto::InitDefaultsUploadRef();
  return *internal_default_instance();
}

UploadRef* UploadRef::New(::google::protobuf::Arena* arena) const {
  UploadRef* n = new UploadRef;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UploadRef::Clear() {
// @@protoc_insertion_point(message_clear_start:google.streetview.publish.v1.UploadRef)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  upload_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool UploadRef::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.streetview.publish.v1.UploadRef)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string upload_url = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_upload_url()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->upload_url().data(), static_cast<int>(this->upload_url().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.streetview.publish.v1.UploadRef.upload_url"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.streetview.publish.v1.UploadRef)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.streetview.publish.v1.UploadRef)
  return false;
#undef DO_
}

void UploadRef::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.streetview.publish.v1.UploadRef)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string upload_url = 1;
  if (this->upload_url().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->upload_url().data(), static_cast<int>(this->upload_url().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.streetview.publish.v1.UploadRef.upload_url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->upload_url(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:google.streetview.publish.v1.UploadRef)
}

::google::protobuf::uint8* UploadRef::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.streetview.publish.v1.UploadRef)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string upload_url = 1;
  if (this->upload_url().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->upload_url().data(), static_cast<int>(this->upload_url().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.streetview.publish.v1.UploadRef.upload_url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->upload_url(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.streetview.publish.v1.UploadRef)
  return target;
}

size_t UploadRef::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.streetview.publish.v1.UploadRef)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string upload_url = 1;
  if (this->upload_url().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->upload_url());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UploadRef::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.streetview.publish.v1.UploadRef)
  GOOGLE_DCHECK_NE(&from, this);
  const UploadRef* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UploadRef>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.streetview.publish.v1.UploadRef)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.streetview.publish.v1.UploadRef)
    MergeFrom(*source);
  }
}

void UploadRef::MergeFrom(const UploadRef& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.streetview.publish.v1.UploadRef)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.upload_url().size() > 0) {

    upload_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.upload_url_);
  }
}

void UploadRef::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.streetview.publish.v1.UploadRef)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UploadRef::CopyFrom(const UploadRef& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.streetview.publish.v1.UploadRef)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UploadRef::IsInitialized() const {
  return true;
}

void UploadRef::Swap(UploadRef* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UploadRef::InternalSwap(UploadRef* other) {
  using std::swap;
  upload_url_.Swap(&other->upload_url_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UploadRef::GetMetadata() const {
  protobuf_google_2fstreetview_2fpublish_2fv1_2fresources_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fstreetview_2fpublish_2fv1_2fresources_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void PhotoId::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PhotoId::kIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PhotoId::PhotoId()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_google_2fstreetview_2fpublish_2fv1_2fresources_2eproto::InitDefaultsPhotoId();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.streetview.publish.v1.PhotoId)
}
PhotoId::PhotoId(const PhotoId& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.id().size() > 0) {
    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  // @@protoc_insertion_point(copy_constructor:google.streetview.publish.v1.PhotoId)
}

void PhotoId::SharedCtor() {
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

PhotoId::~PhotoId() {
  // @@protoc_insertion_point(destructor:google.streetview.publish.v1.PhotoId)
  SharedDtor();
}

void PhotoId::SharedDtor() {
  id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void PhotoId::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PhotoId::descriptor() {
  ::protobuf_google_2fstreetview_2fpublish_2fv1_2fresources_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fstreetview_2fpublish_2fv1_2fresources_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PhotoId& PhotoId::default_instance() {
  ::protobuf_google_2fstreetview_2fpublish_2fv1_2fresources_2eproto::InitDefaultsPhotoId();
  return *internal_default_instance();
}

PhotoId* PhotoId::New(::google::protobuf::Arena* arena) const {
  PhotoId* n = new PhotoId;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PhotoId::Clear() {
// @@protoc_insertion_point(message_clear_start:google.streetview.publish.v1.PhotoId)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool PhotoId::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.streetview.publish.v1.PhotoId)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->id().data(), static_cast<int>(this->id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.streetview.publish.v1.PhotoId.id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.streetview.publish.v1.PhotoId)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.streetview.publish.v1.PhotoId)
  return false;
#undef DO_
}

void PhotoId::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.streetview.publish.v1.PhotoId)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), static_cast<int>(this->id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.streetview.publish.v1.PhotoId.id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:google.streetview.publish.v1.PhotoId)
}

::google::protobuf::uint8* PhotoId::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.streetview.publish.v1.PhotoId)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), static_cast<int>(this->id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.streetview.publish.v1.PhotoId.id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.streetview.publish.v1.PhotoId)
  return target;
}

size_t PhotoId::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.streetview.publish.v1.PhotoId)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string id = 1;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PhotoId::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.streetview.publish.v1.PhotoId)
  GOOGLE_DCHECK_NE(&from, this);
  const PhotoId* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PhotoId>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.streetview.publish.v1.PhotoId)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.streetview.publish.v1.PhotoId)
    MergeFrom(*source);
  }
}

void PhotoId::MergeFrom(const PhotoId& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.streetview.publish.v1.PhotoId)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id().size() > 0) {

    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
}

void PhotoId::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.streetview.publish.v1.PhotoId)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PhotoId::CopyFrom(const PhotoId& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.streetview.publish.v1.PhotoId)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PhotoId::IsInitialized() const {
  return true;
}

void PhotoId::Swap(PhotoId* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PhotoId::InternalSwap(PhotoId* other) {
  using std::swap;
  id_.Swap(&other->id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PhotoId::GetMetadata() const {
  protobuf_google_2fstreetview_2fpublish_2fv1_2fresources_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fstreetview_2fpublish_2fv1_2fresources_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Level::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Level::kNumberFieldNumber;
const int Level::kNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Level::Level()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_google_2fstreetview_2fpublish_2fv1_2fresources_2eproto::InitDefaultsLevel();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.streetview.publish.v1.Level)
}
Level::Level(const Level& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  number_ = from.number_;
  // @@protoc_insertion_point(copy_constructor:google.streetview.publish.v1.Level)
}

void Level::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  number_ = 0;
  _cached_size_ = 0;
}

Level::~Level() {
  // @@protoc_insertion_point(destructor:google.streetview.publish.v1.Level)
  SharedDtor();
}

void Level::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Level::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Level::descriptor() {
  ::protobuf_google_2fstreetview_2fpublish_2fv1_2fresources_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fstreetview_2fpublish_2fv1_2fresources_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Level& Level::default_instance() {
  ::protobuf_google_2fstreetview_2fpublish_2fv1_2fresources_2eproto::InitDefaultsLevel();
  return *internal_default_instance();
}

Level* Level::New(::google::protobuf::Arena* arena) const {
  Level* n = new Level;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Level::Clear() {
// @@protoc_insertion_point(message_clear_start:google.streetview.publish.v1.Level)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  number_ = 0;
  _internal_metadata_.Clear();
}

bool Level::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.streetview.publish.v1.Level)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // double number = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &number_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.streetview.publish.v1.Level.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.streetview.publish.v1.Level)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.streetview.publish.v1.Level)
  return false;
#undef DO_
}

void Level::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.streetview.publish.v1.Level)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double number = 1;
  if (this->number() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->number(), output);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.streetview.publish.v1.Level.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:google.streetview.publish.v1.Level)
}

::google::protobuf::uint8* Level::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.streetview.publish.v1.Level)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double number = 1;
  if (this->number() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->number(), target);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.streetview.publish.v1.Level.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.streetview.publish.v1.Level)
  return target;
}

size_t Level::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.streetview.publish.v1.Level)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // double number = 1;
  if (this->number() != 0) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Level::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.streetview.publish.v1.Level)
  GOOGLE_DCHECK_NE(&from, this);
  const Level* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Level>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.streetview.publish.v1.Level)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.streetview.publish.v1.Level)
    MergeFrom(*source);
  }
}

void Level::MergeFrom(const Level& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.streetview.publish.v1.Level)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.number() != 0) {
    set_number(from.number());
  }
}

void Level::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.streetview.publish.v1.Level)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Level::CopyFrom(const Level& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.streetview.publish.v1.Level)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Level::IsInitialized() const {
  return true;
}

void Level::Swap(Level* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Level::InternalSwap(Level* other) {
  using std::swap;
  name_.Swap(&other->name_);
  swap(number_, other->number_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Level::GetMetadata() const {
  protobuf_google_2fstreetview_2fpublish_2fv1_2fresources_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fstreetview_2fpublish_2fv1_2fresources_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Pose::InitAsDefaultInstance() {
  ::google::streetview::publish::v1::_Pose_default_instance_._instance.get_mutable()->lat_lng_pair_ = const_cast< ::google::type::LatLng*>(
      ::google::type::LatLng::internal_default_instance());
  ::google::streetview::publish::v1::_Pose_default_instance_._instance.get_mutable()->level_ = const_cast< ::google::streetview::publish::v1::Level*>(
      ::google::streetview::publish::v1::Level::internal_default_instance());
}
void Pose::clear_lat_lng_pair() {
  if (GetArenaNoVirtual() == NULL && lat_lng_pair_ != NULL) {
    delete lat_lng_pair_;
  }
  lat_lng_pair_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Pose::kLatLngPairFieldNumber;
const int Pose::kAltitudeFieldNumber;
const int Pose::kHeadingFieldNumber;
const int Pose::kPitchFieldNumber;
const int Pose::kRollFieldNumber;
const int Pose::kLevelFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Pose::Pose()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_google_2fstreetview_2fpublish_2fv1_2fresources_2eproto::InitDefaultsPose();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.streetview.publish.v1.Pose)
}
Pose::Pose(const Pose& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_lat_lng_pair()) {
    lat_lng_pair_ = new ::google::type::LatLng(*from.lat_lng_pair_);
  } else {
    lat_lng_pair_ = NULL;
  }
  if (from.has_level()) {
    level_ = new ::google::streetview::publish::v1::Level(*from.level_);
  } else {
    level_ = NULL;
  }
  ::memcpy(&altitude_, &from.altitude_,
    static_cast<size_t>(reinterpret_cast<char*>(&roll_) -
    reinterpret_cast<char*>(&altitude_)) + sizeof(roll_));
  // @@protoc_insertion_point(copy_constructor:google.streetview.publish.v1.Pose)
}

void Pose::SharedCtor() {
  ::memset(&lat_lng_pair_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&roll_) -
      reinterpret_cast<char*>(&lat_lng_pair_)) + sizeof(roll_));
  _cached_size_ = 0;
}

Pose::~Pose() {
  // @@protoc_insertion_point(destructor:google.streetview.publish.v1.Pose)
  SharedDtor();
}

void Pose::SharedDtor() {
  if (this != internal_default_instance()) delete lat_lng_pair_;
  if (this != internal_default_instance()) delete level_;
}

void Pose::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Pose::descriptor() {
  ::protobuf_google_2fstreetview_2fpublish_2fv1_2fresources_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fstreetview_2fpublish_2fv1_2fresources_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Pose& Pose::default_instance() {
  ::protobuf_google_2fstreetview_2fpublish_2fv1_2fresources_2eproto::InitDefaultsPose();
  return *internal_default_instance();
}

Pose* Pose::New(::google::protobuf::Arena* arena) const {
  Pose* n = new Pose;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Pose::Clear() {
// @@protoc_insertion_point(message_clear_start:google.streetview.publish.v1.Pose)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && lat_lng_pair_ != NULL) {
    delete lat_lng_pair_;
  }
  lat_lng_pair_ = NULL;
  if (GetArenaNoVirtual() == NULL && level_ != NULL) {
    delete level_;
  }
  level_ = NULL;
  ::memset(&altitude_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&roll_) -
      reinterpret_cast<char*>(&altitude_)) + sizeof(roll_));
  _internal_metadata_.Clear();
}

bool Pose::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.streetview.publish.v1.Pose)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .google.type.LatLng lat_lng_pair = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_lat_lng_pair()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double altitude = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &altitude_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double heading = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &heading_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double pitch = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u /* 33 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &pitch_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double roll = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u /* 41 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &roll_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.streetview.publish.v1.Level level = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_level()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.streetview.publish.v1.Pose)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.streetview.publish.v1.Pose)
  return false;
#undef DO_
}

void Pose::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.streetview.publish.v1.Pose)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.type.LatLng lat_lng_pair = 1;
  if (this->has_lat_lng_pair()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->lat_lng_pair_, output);
  }

  // double altitude = 2;
  if (this->altitude() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->altitude(), output);
  }

  // double heading = 3;
  if (this->heading() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->heading(), output);
  }

  // double pitch = 4;
  if (this->pitch() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->pitch(), output);
  }

  // double roll = 5;
  if (this->roll() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->roll(), output);
  }

  // .google.streetview.publish.v1.Level level = 7;
  if (this->has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->level_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:google.streetview.publish.v1.Pose)
}

::google::protobuf::uint8* Pose::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.streetview.publish.v1.Pose)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.type.LatLng lat_lng_pair = 1;
  if (this->has_lat_lng_pair()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->lat_lng_pair_, deterministic, target);
  }

  // double altitude = 2;
  if (this->altitude() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->altitude(), target);
  }

  // double heading = 3;
  if (this->heading() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->heading(), target);
  }

  // double pitch = 4;
  if (this->pitch() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->pitch(), target);
  }

  // double roll = 5;
  if (this->roll() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->roll(), target);
  }

  // .google.streetview.publish.v1.Level level = 7;
  if (this->has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, *this->level_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.streetview.publish.v1.Pose)
  return target;
}

size_t Pose::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.streetview.publish.v1.Pose)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .google.type.LatLng lat_lng_pair = 1;
  if (this->has_lat_lng_pair()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->lat_lng_pair_);
  }

  // .google.streetview.publish.v1.Level level = 7;
  if (this->has_level()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->level_);
  }

  // double altitude = 2;
  if (this->altitude() != 0) {
    total_size += 1 + 8;
  }

  // double heading = 3;
  if (this->heading() != 0) {
    total_size += 1 + 8;
  }

  // double pitch = 4;
  if (this->pitch() != 0) {
    total_size += 1 + 8;
  }

  // double roll = 5;
  if (this->roll() != 0) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Pose::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.streetview.publish.v1.Pose)
  GOOGLE_DCHECK_NE(&from, this);
  const Pose* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Pose>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.streetview.publish.v1.Pose)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.streetview.publish.v1.Pose)
    MergeFrom(*source);
  }
}

void Pose::MergeFrom(const Pose& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.streetview.publish.v1.Pose)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_lat_lng_pair()) {
    mutable_lat_lng_pair()->::google::type::LatLng::MergeFrom(from.lat_lng_pair());
  }
  if (from.has_level()) {
    mutable_level()->::google::streetview::publish::v1::Level::MergeFrom(from.level());
  }
  if (from.altitude() != 0) {
    set_altitude(from.altitude());
  }
  if (from.heading() != 0) {
    set_heading(from.heading());
  }
  if (from.pitch() != 0) {
    set_pitch(from.pitch());
  }
  if (from.roll() != 0) {
    set_roll(from.roll());
  }
}

void Pose::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.streetview.publish.v1.Pose)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Pose::CopyFrom(const Pose& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.streetview.publish.v1.Pose)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Pose::IsInitialized() const {
  return true;
}

void Pose::Swap(Pose* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Pose::InternalSwap(Pose* other) {
  using std::swap;
  swap(lat_lng_pair_, other->lat_lng_pair_);
  swap(level_, other->level_);
  swap(altitude_, other->altitude_);
  swap(heading_, other->heading_);
  swap(pitch_, other->pitch_);
  swap(roll_, other->roll_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Pose::GetMetadata() const {
  protobuf_google_2fstreetview_2fpublish_2fv1_2fresources_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fstreetview_2fpublish_2fv1_2fresources_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Place::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Place::kPlaceIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Place::Place()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_google_2fstreetview_2fpublish_2fv1_2fresources_2eproto::InitDefaultsPlace();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.streetview.publish.v1.Place)
}
Place::Place(const Place& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  place_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.place_id().size() > 0) {
    place_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.place_id_);
  }
  // @@protoc_insertion_point(copy_constructor:google.streetview.publish.v1.Place)
}

void Place::SharedCtor() {
  place_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

Place::~Place() {
  // @@protoc_insertion_point(destructor:google.streetview.publish.v1.Place)
  SharedDtor();
}

void Place::SharedDtor() {
  place_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Place::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Place::descriptor() {
  ::protobuf_google_2fstreetview_2fpublish_2fv1_2fresources_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fstreetview_2fpublish_2fv1_2fresources_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Place& Place::default_instance() {
  ::protobuf_google_2fstreetview_2fpublish_2fv1_2fresources_2eproto::InitDefaultsPlace();
  return *internal_default_instance();
}

Place* Place::New(::google::protobuf::Arena* arena) const {
  Place* n = new Place;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Place::Clear() {
// @@protoc_insertion_point(message_clear_start:google.streetview.publish.v1.Place)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  place_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool Place::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.streetview.publish.v1.Place)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string place_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_place_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->place_id().data(), static_cast<int>(this->place_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.streetview.publish.v1.Place.place_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.streetview.publish.v1.Place)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.streetview.publish.v1.Place)
  return false;
#undef DO_
}

void Place::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.streetview.publish.v1.Place)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string place_id = 1;
  if (this->place_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->place_id().data(), static_cast<int>(this->place_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.streetview.publish.v1.Place.place_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->place_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:google.streetview.publish.v1.Place)
}

::google::protobuf::uint8* Place::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.streetview.publish.v1.Place)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string place_id = 1;
  if (this->place_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->place_id().data(), static_cast<int>(this->place_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.streetview.publish.v1.Place.place_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->place_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.streetview.publish.v1.Place)
  return target;
}

size_t Place::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.streetview.publish.v1.Place)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string place_id = 1;
  if (this->place_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->place_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Place::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.streetview.publish.v1.Place)
  GOOGLE_DCHECK_NE(&from, this);
  const Place* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Place>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.streetview.publish.v1.Place)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.streetview.publish.v1.Place)
    MergeFrom(*source);
  }
}

void Place::MergeFrom(const Place& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.streetview.publish.v1.Place)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.place_id().size() > 0) {

    place_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.place_id_);
  }
}

void Place::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.streetview.publish.v1.Place)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Place::CopyFrom(const Place& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.streetview.publish.v1.Place)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Place::IsInitialized() const {
  return true;
}

void Place::Swap(Place* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Place::InternalSwap(Place* other) {
  using std::swap;
  place_id_.Swap(&other->place_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Place::GetMetadata() const {
  protobuf_google_2fstreetview_2fpublish_2fv1_2fresources_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fstreetview_2fpublish_2fv1_2fresources_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Connection::InitAsDefaultInstance() {
  ::google::streetview::publish::v1::_Connection_default_instance_._instance.get_mutable()->target_ = const_cast< ::google::streetview::publish::v1::PhotoId*>(
      ::google::streetview::publish::v1::PhotoId::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Connection::kTargetFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Connection::Connection()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_google_2fstreetview_2fpublish_2fv1_2fresources_2eproto::InitDefaultsConnection();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.streetview.publish.v1.Connection)
}
Connection::Connection(const Connection& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_target()) {
    target_ = new ::google::streetview::publish::v1::PhotoId(*from.target_);
  } else {
    target_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:google.streetview.publish.v1.Connection)
}

void Connection::SharedCtor() {
  target_ = NULL;
  _cached_size_ = 0;
}

Connection::~Connection() {
  // @@protoc_insertion_point(destructor:google.streetview.publish.v1.Connection)
  SharedDtor();
}

void Connection::SharedDtor() {
  if (this != internal_default_instance()) delete target_;
}

void Connection::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Connection::descriptor() {
  ::protobuf_google_2fstreetview_2fpublish_2fv1_2fresources_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fstreetview_2fpublish_2fv1_2fresources_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Connection& Connection::default_instance() {
  ::protobuf_google_2fstreetview_2fpublish_2fv1_2fresources_2eproto::InitDefaultsConnection();
  return *internal_default_instance();
}

Connection* Connection::New(::google::protobuf::Arena* arena) const {
  Connection* n = new Connection;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Connection::Clear() {
// @@protoc_insertion_point(message_clear_start:google.streetview.publish.v1.Connection)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && target_ != NULL) {
    delete target_;
  }
  target_ = NULL;
  _internal_metadata_.Clear();
}

bool Connection::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.streetview.publish.v1.Connection)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .google.streetview.publish.v1.PhotoId target = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_target()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.streetview.publish.v1.Connection)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.streetview.publish.v1.Connection)
  return false;
#undef DO_
}

void Connection::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.streetview.publish.v1.Connection)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.streetview.publish.v1.PhotoId target = 1;
  if (this->has_target()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->target_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:google.streetview.publish.v1.Connection)
}

::google::protobuf::uint8* Connection::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.streetview.publish.v1.Connection)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.streetview.publish.v1.PhotoId target = 1;
  if (this->has_target()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->target_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.streetview.publish.v1.Connection)
  return target;
}

size_t Connection::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.streetview.publish.v1.Connection)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .google.streetview.publish.v1.PhotoId target = 1;
  if (this->has_target()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->target_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Connection::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.streetview.publish.v1.Connection)
  GOOGLE_DCHECK_NE(&from, this);
  const Connection* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Connection>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.streetview.publish.v1.Connection)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.streetview.publish.v1.Connection)
    MergeFrom(*source);
  }
}

void Connection::MergeFrom(const Connection& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.streetview.publish.v1.Connection)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_target()) {
    mutable_target()->::google::streetview::publish::v1::PhotoId::MergeFrom(from.target());
  }
}

void Connection::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.streetview.publish.v1.Connection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Connection::CopyFrom(const Connection& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.streetview.publish.v1.Connection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Connection::IsInitialized() const {
  return true;
}

void Connection::Swap(Connection* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Connection::InternalSwap(Connection* other) {
  using std::swap;
  swap(target_, other->target_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Connection::GetMetadata() const {
  protobuf_google_2fstreetview_2fpublish_2fv1_2fresources_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fstreetview_2fpublish_2fv1_2fresources_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Photo::InitAsDefaultInstance() {
  ::google::streetview::publish::v1::_Photo_default_instance_._instance.get_mutable()->photo_id_ = const_cast< ::google::streetview::publish::v1::PhotoId*>(
      ::google::streetview::publish::v1::PhotoId::internal_default_instance());
  ::google::streetview::publish::v1::_Photo_default_instance_._instance.get_mutable()->upload_reference_ = const_cast< ::google::streetview::publish::v1::UploadRef*>(
      ::google::streetview::publish::v1::UploadRef::internal_default_instance());
  ::google::streetview::publish::v1::_Photo_default_instance_._instance.get_mutable()->pose_ = const_cast< ::google::streetview::publish::v1::Pose*>(
      ::google::streetview::publish::v1::Pose::internal_default_instance());
  ::google::streetview::publish::v1::_Photo_default_instance_._instance.get_mutable()->capture_time_ = const_cast< ::google::protobuf::Timestamp*>(
      ::google::protobuf::Timestamp::internal_default_instance());
}
void Photo::clear_capture_time() {
  if (GetArenaNoVirtual() == NULL && capture_time_ != NULL) {
    delete capture_time_;
  }
  capture_time_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Photo::kPhotoIdFieldNumber;
const int Photo::kUploadReferenceFieldNumber;
const int Photo::kDownloadUrlFieldNumber;
const int Photo::kThumbnailUrlFieldNumber;
const int Photo::kShareLinkFieldNumber;
const int Photo::kPoseFieldNumber;
const int Photo::kConnectionsFieldNumber;
const int Photo::kCaptureTimeFieldNumber;
const int Photo::kPlacesFieldNumber;
const int Photo::kViewCountFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Photo::Photo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_google_2fstreetview_2fpublish_2fv1_2fresources_2eproto::InitDefaultsPhoto();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.streetview.publish.v1.Photo)
}
Photo::Photo(const Photo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      connections_(from.connections_),
      places_(from.places_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  download_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.download_url().size() > 0) {
    download_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.download_url_);
  }
  thumbnail_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.thumbnail_url().size() > 0) {
    thumbnail_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.thumbnail_url_);
  }
  share_link_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.share_link().size() > 0) {
    share_link_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.share_link_);
  }
  if (from.has_photo_id()) {
    photo_id_ = new ::google::streetview::publish::v1::PhotoId(*from.photo_id_);
  } else {
    photo_id_ = NULL;
  }
  if (from.has_upload_reference()) {
    upload_reference_ = new ::google::streetview::publish::v1::UploadRef(*from.upload_reference_);
  } else {
    upload_reference_ = NULL;
  }
  if (from.has_pose()) {
    pose_ = new ::google::streetview::publish::v1::Pose(*from.pose_);
  } else {
    pose_ = NULL;
  }
  if (from.has_capture_time()) {
    capture_time_ = new ::google::protobuf::Timestamp(*from.capture_time_);
  } else {
    capture_time_ = NULL;
  }
  view_count_ = from.view_count_;
  // @@protoc_insertion_point(copy_constructor:google.streetview.publish.v1.Photo)
}

void Photo::SharedCtor() {
  download_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  thumbnail_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  share_link_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&photo_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&view_count_) -
      reinterpret_cast<char*>(&photo_id_)) + sizeof(view_count_));
  _cached_size_ = 0;
}

Photo::~Photo() {
  // @@protoc_insertion_point(destructor:google.streetview.publish.v1.Photo)
  SharedDtor();
}

void Photo::SharedDtor() {
  download_url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  thumbnail_url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  share_link_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete photo_id_;
  if (this != internal_default_instance()) delete upload_reference_;
  if (this != internal_default_instance()) delete pose_;
  if (this != internal_default_instance()) delete capture_time_;
}

void Photo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Photo::descriptor() {
  ::protobuf_google_2fstreetview_2fpublish_2fv1_2fresources_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fstreetview_2fpublish_2fv1_2fresources_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Photo& Photo::default_instance() {
  ::protobuf_google_2fstreetview_2fpublish_2fv1_2fresources_2eproto::InitDefaultsPhoto();
  return *internal_default_instance();
}

Photo* Photo::New(::google::protobuf::Arena* arena) const {
  Photo* n = new Photo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Photo::Clear() {
// @@protoc_insertion_point(message_clear_start:google.streetview.publish.v1.Photo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  connections_.Clear();
  places_.Clear();
  download_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  thumbnail_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  share_link_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && photo_id_ != NULL) {
    delete photo_id_;
  }
  photo_id_ = NULL;
  if (GetArenaNoVirtual() == NULL && upload_reference_ != NULL) {
    delete upload_reference_;
  }
  upload_reference_ = NULL;
  if (GetArenaNoVirtual() == NULL && pose_ != NULL) {
    delete pose_;
  }
  pose_ = NULL;
  if (GetArenaNoVirtual() == NULL && capture_time_ != NULL) {
    delete capture_time_;
  }
  capture_time_ = NULL;
  view_count_ = GOOGLE_LONGLONG(0);
  _internal_metadata_.Clear();
}

bool Photo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.streetview.publish.v1.Photo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .google.streetview.publish.v1.PhotoId photo_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_photo_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.streetview.publish.v1.UploadRef upload_reference = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_upload_reference()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string download_url = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_download_url()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->download_url().data(), static_cast<int>(this->download_url().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.streetview.publish.v1.Photo.download_url"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.streetview.publish.v1.Pose pose = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_pose()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .google.streetview.publish.v1.Connection connections = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_connections()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Timestamp capture_time = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_capture_time()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .google.streetview.publish.v1.Place places = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_places()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string thumbnail_url = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_thumbnail_url()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->thumbnail_url().data(), static_cast<int>(this->thumbnail_url().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.streetview.publish.v1.Photo.thumbnail_url"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 view_count = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &view_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string share_link = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_share_link()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->share_link().data(), static_cast<int>(this->share_link().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.streetview.publish.v1.Photo.share_link"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.streetview.publish.v1.Photo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.streetview.publish.v1.Photo)
  return false;
#undef DO_
}

void Photo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.streetview.publish.v1.Photo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.streetview.publish.v1.PhotoId photo_id = 1;
  if (this->has_photo_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->photo_id_, output);
  }

  // .google.streetview.publish.v1.UploadRef upload_reference = 2;
  if (this->has_upload_reference()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->upload_reference_, output);
  }

  // string download_url = 3;
  if (this->download_url().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->download_url().data(), static_cast<int>(this->download_url().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.streetview.publish.v1.Photo.download_url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->download_url(), output);
  }

  // .google.streetview.publish.v1.Pose pose = 4;
  if (this->has_pose()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->pose_, output);
  }

  // repeated .google.streetview.publish.v1.Connection connections = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->connections_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->connections(static_cast<int>(i)), output);
  }

  // .google.protobuf.Timestamp capture_time = 6;
  if (this->has_capture_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->capture_time_, output);
  }

  // repeated .google.streetview.publish.v1.Place places = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->places_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->places(static_cast<int>(i)), output);
  }

  // string thumbnail_url = 9;
  if (this->thumbnail_url().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->thumbnail_url().data(), static_cast<int>(this->thumbnail_url().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.streetview.publish.v1.Photo.thumbnail_url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->thumbnail_url(), output);
  }

  // int64 view_count = 10;
  if (this->view_count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(10, this->view_count(), output);
  }

  // string share_link = 11;
  if (this->share_link().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->share_link().data(), static_cast<int>(this->share_link().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.streetview.publish.v1.Photo.share_link");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->share_link(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:google.streetview.publish.v1.Photo)
}

::google::protobuf::uint8* Photo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.streetview.publish.v1.Photo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.streetview.publish.v1.PhotoId photo_id = 1;
  if (this->has_photo_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->photo_id_, deterministic, target);
  }

  // .google.streetview.publish.v1.UploadRef upload_reference = 2;
  if (this->has_upload_reference()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, *this->upload_reference_, deterministic, target);
  }

  // string download_url = 3;
  if (this->download_url().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->download_url().data(), static_cast<int>(this->download_url().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.streetview.publish.v1.Photo.download_url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->download_url(), target);
  }

  // .google.streetview.publish.v1.Pose pose = 4;
  if (this->has_pose()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, *this->pose_, deterministic, target);
  }

  // repeated .google.streetview.publish.v1.Connection connections = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->connections_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->connections(static_cast<int>(i)), deterministic, target);
  }

  // .google.protobuf.Timestamp capture_time = 6;
  if (this->has_capture_time()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, *this->capture_time_, deterministic, target);
  }

  // repeated .google.streetview.publish.v1.Place places = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->places_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, this->places(static_cast<int>(i)), deterministic, target);
  }

  // string thumbnail_url = 9;
  if (this->thumbnail_url().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->thumbnail_url().data(), static_cast<int>(this->thumbnail_url().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.streetview.publish.v1.Photo.thumbnail_url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->thumbnail_url(), target);
  }

  // int64 view_count = 10;
  if (this->view_count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(10, this->view_count(), target);
  }

  // string share_link = 11;
  if (this->share_link().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->share_link().data(), static_cast<int>(this->share_link().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.streetview.publish.v1.Photo.share_link");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->share_link(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.streetview.publish.v1.Photo)
  return target;
}

size_t Photo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.streetview.publish.v1.Photo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .google.streetview.publish.v1.Connection connections = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->connections_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->connections(static_cast<int>(i)));
    }
  }

  // repeated .google.streetview.publish.v1.Place places = 7;
  {
    unsigned int count = static_cast<unsigned int>(this->places_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->places(static_cast<int>(i)));
    }
  }

  // string download_url = 3;
  if (this->download_url().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->download_url());
  }

  // string thumbnail_url = 9;
  if (this->thumbnail_url().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->thumbnail_url());
  }

  // string share_link = 11;
  if (this->share_link().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->share_link());
  }

  // .google.streetview.publish.v1.PhotoId photo_id = 1;
  if (this->has_photo_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->photo_id_);
  }

  // .google.streetview.publish.v1.UploadRef upload_reference = 2;
  if (this->has_upload_reference()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->upload_reference_);
  }

  // .google.streetview.publish.v1.Pose pose = 4;
  if (this->has_pose()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->pose_);
  }

  // .google.protobuf.Timestamp capture_time = 6;
  if (this->has_capture_time()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->capture_time_);
  }

  // int64 view_count = 10;
  if (this->view_count() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->view_count());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Photo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.streetview.publish.v1.Photo)
  GOOGLE_DCHECK_NE(&from, this);
  const Photo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Photo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.streetview.publish.v1.Photo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.streetview.publish.v1.Photo)
    MergeFrom(*source);
  }
}

void Photo::MergeFrom(const Photo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.streetview.publish.v1.Photo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  connections_.MergeFrom(from.connections_);
  places_.MergeFrom(from.places_);
  if (from.download_url().size() > 0) {

    download_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.download_url_);
  }
  if (from.thumbnail_url().size() > 0) {

    thumbnail_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.thumbnail_url_);
  }
  if (from.share_link().size() > 0) {

    share_link_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.share_link_);
  }
  if (from.has_photo_id()) {
    mutable_photo_id()->::google::streetview::publish::v1::PhotoId::MergeFrom(from.photo_id());
  }
  if (from.has_upload_reference()) {
    mutable_upload_reference()->::google::streetview::publish::v1::UploadRef::MergeFrom(from.upload_reference());
  }
  if (from.has_pose()) {
    mutable_pose()->::google::streetview::publish::v1::Pose::MergeFrom(from.pose());
  }
  if (from.has_capture_time()) {
    mutable_capture_time()->::google::protobuf::Timestamp::MergeFrom(from.capture_time());
  }
  if (from.view_count() != 0) {
    set_view_count(from.view_count());
  }
}

void Photo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.streetview.publish.v1.Photo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Photo::CopyFrom(const Photo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.streetview.publish.v1.Photo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Photo::IsInitialized() const {
  return true;
}

void Photo::Swap(Photo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Photo::InternalSwap(Photo* other) {
  using std::swap;
  connections_.InternalSwap(&other->connections_);
  places_.InternalSwap(&other->places_);
  download_url_.Swap(&other->download_url_);
  thumbnail_url_.Swap(&other->thumbnail_url_);
  share_link_.Swap(&other->share_link_);
  swap(photo_id_, other->photo_id_);
  swap(upload_reference_, other->upload_reference_);
  swap(pose_, other->pose_);
  swap(capture_time_, other->capture_time_);
  swap(view_count_, other->view_count_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Photo::GetMetadata() const {
  protobuf_google_2fstreetview_2fpublish_2fv1_2fresources_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fstreetview_2fpublish_2fv1_2fresources_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace publish
}  // namespace streetview
}  // namespace google

// @@protoc_insertion_point(global_scope)
