// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/genomics/v1/references.proto

#include "google/genomics/v1/references.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)
namespace google {
namespace genomics {
namespace v1 {
class ReferenceDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Reference>
      _instance;
} _Reference_default_instance_;
class ReferenceSetDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ReferenceSet>
      _instance;
} _ReferenceSet_default_instance_;
class SearchReferenceSetsRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SearchReferenceSetsRequest>
      _instance;
} _SearchReferenceSetsRequest_default_instance_;
class SearchReferenceSetsResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SearchReferenceSetsResponse>
      _instance;
} _SearchReferenceSetsResponse_default_instance_;
class GetReferenceSetRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GetReferenceSetRequest>
      _instance;
} _GetReferenceSetRequest_default_instance_;
class SearchReferencesRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SearchReferencesRequest>
      _instance;
} _SearchReferencesRequest_default_instance_;
class SearchReferencesResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SearchReferencesResponse>
      _instance;
} _SearchReferencesResponse_default_instance_;
class GetReferenceRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GetReferenceRequest>
      _instance;
} _GetReferenceRequest_default_instance_;
class ListBasesRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ListBasesRequest>
      _instance;
} _ListBasesRequest_default_instance_;
class ListBasesResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ListBasesResponse>
      _instance;
} _ListBasesResponse_default_instance_;
}  // namespace v1
}  // namespace genomics
}  // namespace google
namespace protobuf_google_2fgenomics_2fv1_2freferences_2eproto {
void InitDefaultsReferenceImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::google::genomics::v1::_Reference_default_instance_;
    new (ptr) ::google::genomics::v1::Reference();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::genomics::v1::Reference::InitAsDefaultInstance();
}

void InitDefaultsReference() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsReferenceImpl);
}

void InitDefaultsReferenceSetImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::google::genomics::v1::_ReferenceSet_default_instance_;
    new (ptr) ::google::genomics::v1::ReferenceSet();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::genomics::v1::ReferenceSet::InitAsDefaultInstance();
}

void InitDefaultsReferenceSet() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsReferenceSetImpl);
}

void InitDefaultsSearchReferenceSetsRequestImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::google::genomics::v1::_SearchReferenceSetsRequest_default_instance_;
    new (ptr) ::google::genomics::v1::SearchReferenceSetsRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::genomics::v1::SearchReferenceSetsRequest::InitAsDefaultInstance();
}

void InitDefaultsSearchReferenceSetsRequest() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsSearchReferenceSetsRequestImpl);
}

void InitDefaultsSearchReferenceSetsResponseImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_google_2fgenomics_2fv1_2freferences_2eproto::InitDefaultsReferenceSet();
  {
    void* ptr = &::google::genomics::v1::_SearchReferenceSetsResponse_default_instance_;
    new (ptr) ::google::genomics::v1::SearchReferenceSetsResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::genomics::v1::SearchReferenceSetsResponse::InitAsDefaultInstance();
}

void InitDefaultsSearchReferenceSetsResponse() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsSearchReferenceSetsResponseImpl);
}

void InitDefaultsGetReferenceSetRequestImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::google::genomics::v1::_GetReferenceSetRequest_default_instance_;
    new (ptr) ::google::genomics::v1::GetReferenceSetRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::genomics::v1::GetReferenceSetRequest::InitAsDefaultInstance();
}

void InitDefaultsGetReferenceSetRequest() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsGetReferenceSetRequestImpl);
}

void InitDefaultsSearchReferencesRequestImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::google::genomics::v1::_SearchReferencesRequest_default_instance_;
    new (ptr) ::google::genomics::v1::SearchReferencesRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::genomics::v1::SearchReferencesRequest::InitAsDefaultInstance();
}

void InitDefaultsSearchReferencesRequest() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsSearchReferencesRequestImpl);
}

void InitDefaultsSearchReferencesResponseImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_google_2fgenomics_2fv1_2freferences_2eproto::InitDefaultsReference();
  {
    void* ptr = &::google::genomics::v1::_SearchReferencesResponse_default_instance_;
    new (ptr) ::google::genomics::v1::SearchReferencesResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::genomics::v1::SearchReferencesResponse::InitAsDefaultInstance();
}

void InitDefaultsSearchReferencesResponse() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsSearchReferencesResponseImpl);
}

void InitDefaultsGetReferenceRequestImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::google::genomics::v1::_GetReferenceRequest_default_instance_;
    new (ptr) ::google::genomics::v1::GetReferenceRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::genomics::v1::GetReferenceRequest::InitAsDefaultInstance();
}

void InitDefaultsGetReferenceRequest() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsGetReferenceRequestImpl);
}

void InitDefaultsListBasesRequestImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::google::genomics::v1::_ListBasesRequest_default_instance_;
    new (ptr) ::google::genomics::v1::ListBasesRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::genomics::v1::ListBasesRequest::InitAsDefaultInstance();
}

void InitDefaultsListBasesRequest() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsListBasesRequestImpl);
}

void InitDefaultsListBasesResponseImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::google::genomics::v1::_ListBasesResponse_default_instance_;
    new (ptr) ::google::genomics::v1::ListBasesResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::genomics::v1::ListBasesResponse::InitAsDefaultInstance();
}

void InitDefaultsListBasesResponse() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsListBasesResponseImpl);
}

::google::protobuf::Metadata file_level_metadata[10];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::genomics::v1::Reference, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::genomics::v1::Reference, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::genomics::v1::Reference, length_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::genomics::v1::Reference, md5checksum_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::genomics::v1::Reference, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::genomics::v1::Reference, source_uri_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::genomics::v1::Reference, source_accessions_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::genomics::v1::Reference, ncbi_taxon_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::genomics::v1::ReferenceSet, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::genomics::v1::ReferenceSet, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::genomics::v1::ReferenceSet, reference_ids_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::genomics::v1::ReferenceSet, md5checksum_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::genomics::v1::ReferenceSet, ncbi_taxon_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::genomics::v1::ReferenceSet, description_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::genomics::v1::ReferenceSet, assembly_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::genomics::v1::ReferenceSet, source_uri_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::genomics::v1::ReferenceSet, source_accessions_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::genomics::v1::SearchReferenceSetsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::genomics::v1::SearchReferenceSetsRequest, md5checksums_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::genomics::v1::SearchReferenceSetsRequest, accessions_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::genomics::v1::SearchReferenceSetsRequest, assembly_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::genomics::v1::SearchReferenceSetsRequest, page_token_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::genomics::v1::SearchReferenceSetsRequest, page_size_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::genomics::v1::SearchReferenceSetsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::genomics::v1::SearchReferenceSetsResponse, reference_sets_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::genomics::v1::SearchReferenceSetsResponse, next_page_token_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::genomics::v1::GetReferenceSetRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::genomics::v1::GetReferenceSetRequest, reference_set_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::genomics::v1::SearchReferencesRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::genomics::v1::SearchReferencesRequest, md5checksums_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::genomics::v1::SearchReferencesRequest, accessions_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::genomics::v1::SearchReferencesRequest, reference_set_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::genomics::v1::SearchReferencesRequest, page_token_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::genomics::v1::SearchReferencesRequest, page_size_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::genomics::v1::SearchReferencesResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::genomics::v1::SearchReferencesResponse, references_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::genomics::v1::SearchReferencesResponse, next_page_token_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::genomics::v1::GetReferenceRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::genomics::v1::GetReferenceRequest, reference_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::genomics::v1::ListBasesRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::genomics::v1::ListBasesRequest, reference_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::genomics::v1::ListBasesRequest, start_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::genomics::v1::ListBasesRequest, end_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::genomics::v1::ListBasesRequest, page_token_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::genomics::v1::ListBasesRequest, page_size_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::genomics::v1::ListBasesResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::genomics::v1::ListBasesResponse, offset_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::genomics::v1::ListBasesResponse, sequence_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::genomics::v1::ListBasesResponse, next_page_token_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::google::genomics::v1::Reference)},
  { 12, -1, sizeof(::google::genomics::v1::ReferenceSet)},
  { 25, -1, sizeof(::google::genomics::v1::SearchReferenceSetsRequest)},
  { 35, -1, sizeof(::google::genomics::v1::SearchReferenceSetsResponse)},
  { 42, -1, sizeof(::google::genomics::v1::GetReferenceSetRequest)},
  { 48, -1, sizeof(::google::genomics::v1::SearchReferencesRequest)},
  { 58, -1, sizeof(::google::genomics::v1::SearchReferencesResponse)},
  { 65, -1, sizeof(::google::genomics::v1::GetReferenceRequest)},
  { 71, -1, sizeof(::google::genomics::v1::ListBasesRequest)},
  { 81, -1, sizeof(::google::genomics::v1::ListBasesResponse)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::genomics::v1::_Reference_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::genomics::v1::_ReferenceSet_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::genomics::v1::_SearchReferenceSetsRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::genomics::v1::_SearchReferenceSetsResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::genomics::v1::_GetReferenceSetRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::genomics::v1::_SearchReferencesRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::genomics::v1::_SearchReferencesResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::genomics::v1::_GetReferenceRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::genomics::v1::_ListBasesRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::genomics::v1::_ListBasesResponse_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "google/genomics/v1/references.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 10);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n#google/genomics/v1/references.proto\022\022g"
      "oogle.genomics.v1\032\034google/api/annotation"
      "s.proto\"\220\001\n\tReference\022\n\n\002id\030\001 \001(\t\022\016\n\006len"
      "gth\030\002 \001(\003\022\023\n\013md5checksum\030\003 \001(\t\022\014\n\004name\030\004"
      " \001(\t\022\022\n\nsource_uri\030\005 \001(\t\022\031\n\021source_acces"
      "sions\030\006 \003(\t\022\025\n\rncbi_taxon_id\030\007 \001(\005\"\266\001\n\014R"
      "eferenceSet\022\n\n\002id\030\001 \001(\t\022\025\n\rreference_ids"
      "\030\002 \003(\t\022\023\n\013md5checksum\030\003 \001(\t\022\025\n\rncbi_taxo"
      "n_id\030\004 \001(\005\022\023\n\013description\030\005 \001(\t\022\023\n\013assem"
      "bly_id\030\006 \001(\t\022\022\n\nsource_uri\030\007 \001(\t\022\031\n\021sour"
      "ce_accessions\030\010 \003(\t\"\202\001\n\032SearchReferenceS"
      "etsRequest\022\024\n\014md5checksums\030\001 \003(\t\022\022\n\nacce"
      "ssions\030\002 \003(\t\022\023\n\013assembly_id\030\003 \001(\t\022\022\n\npag"
      "e_token\030\004 \001(\t\022\021\n\tpage_size\030\005 \001(\005\"p\n\033Sear"
      "chReferenceSetsResponse\0228\n\016reference_set"
      "s\030\001 \003(\0132 .google.genomics.v1.ReferenceSe"
      "t\022\027\n\017next_page_token\030\002 \001(\t\"2\n\026GetReferen"
      "ceSetRequest\022\030\n\020reference_set_id\030\001 \001(\t\"\204"
      "\001\n\027SearchReferencesRequest\022\024\n\014md5checksu"
      "ms\030\001 \003(\t\022\022\n\naccessions\030\002 \003(\t\022\030\n\020referenc"
      "e_set_id\030\003 \001(\t\022\022\n\npage_token\030\004 \001(\t\022\021\n\tpa"
      "ge_size\030\005 \001(\005\"f\n\030SearchReferencesRespons"
      "e\0221\n\nreferences\030\001 \003(\0132\035.google.genomics."
      "v1.Reference\022\027\n\017next_page_token\030\002 \001(\t\"+\n"
      "\023GetReferenceRequest\022\024\n\014reference_id\030\001 \001"
      "(\t\"k\n\020ListBasesRequest\022\024\n\014reference_id\030\001"
      " \001(\t\022\r\n\005start\030\002 \001(\003\022\013\n\003end\030\003 \001(\003\022\022\n\npage"
      "_token\030\004 \001(\t\022\021\n\tpage_size\030\005 \001(\005\"N\n\021ListB"
      "asesResponse\022\016\n\006offset\030\001 \001(\003\022\020\n\010sequence"
      "\030\002 \001(\t\022\027\n\017next_page_token\030\003 \001(\t2\333\005\n\022Refe"
      "renceServiceV1\022\233\001\n\023SearchReferenceSets\022."
      ".google.genomics.v1.SearchReferenceSetsR"
      "equest\032/.google.genomics.v1.SearchRefere"
      "nceSetsResponse\"#\202\323\344\223\002\035\"\030/v1/referencese"
      "ts/search:\001*\022\215\001\n\017GetReferenceSet\022*.googl"
      "e.genomics.v1.GetReferenceSetRequest\032 .g"
      "oogle.genomics.v1.ReferenceSet\",\202\323\344\223\002&\022$"
      "/v1/referencesets/{reference_set_id}\022\217\001\n"
      "\020SearchReferences\022+.google.genomics.v1.S"
      "earchReferencesRequest\032,.google.genomics"
      ".v1.SearchReferencesResponse\" \202\323\344\223\002\032\"\025/v"
      "1/references/search:\001*\022}\n\014GetReference\022\'"
      ".google.genomics.v1.GetReferenceRequest\032"
      "\035.google.genomics.v1.Reference\"%\202\323\344\223\002\037\022\035"
      "/v1/references/{reference_id}\022\205\001\n\tListBa"
      "ses\022$.google.genomics.v1.ListBasesReques"
      "t\032%.google.genomics.v1.ListBasesResponse"
      "\"+\202\323\344\223\002%\022#/v1/references/{reference_id}/"
      "basesBj\n\026com.google.genomics.v1B\017Referen"
      "cesProtoP\001Z:google.golang.org/genproto/g"
      "oogleapis/genomics/v1;genomics\370\001\001b\006proto"
      "3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 2041);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "google/genomics/v1/references.proto", &protobuf_RegisterTypes);
  ::protobuf_google_2fapi_2fannotations_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_google_2fgenomics_2fv1_2freferences_2eproto
namespace google {
namespace genomics {
namespace v1 {

// ===================================================================

void Reference::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Reference::kIdFieldNumber;
const int Reference::kLengthFieldNumber;
const int Reference::kMd5ChecksumFieldNumber;
const int Reference::kNameFieldNumber;
const int Reference::kSourceUriFieldNumber;
const int Reference::kSourceAccessionsFieldNumber;
const int Reference::kNcbiTaxonIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Reference::Reference()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_google_2fgenomics_2fv1_2freferences_2eproto::InitDefaultsReference();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.genomics.v1.Reference)
}
Reference::Reference(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  source_accessions_(arena) {
  ::protobuf_google_2fgenomics_2fv1_2freferences_2eproto::InitDefaultsReference();
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.genomics.v1.Reference)
}
Reference::Reference(const Reference& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      source_accessions_(from.source_accessions_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.id().size() > 0) {
    id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id(),
      GetArenaNoVirtual());
  }
  md5checksum_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.md5checksum().size() > 0) {
    md5checksum_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.md5checksum(),
      GetArenaNoVirtual());
  }
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name(),
      GetArenaNoVirtual());
  }
  source_uri_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.source_uri().size() > 0) {
    source_uri_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.source_uri(),
      GetArenaNoVirtual());
  }
  ::memcpy(&length_, &from.length_,
    static_cast<size_t>(reinterpret_cast<char*>(&ncbi_taxon_id_) -
    reinterpret_cast<char*>(&length_)) + sizeof(ncbi_taxon_id_));
  // @@protoc_insertion_point(copy_constructor:google.genomics.v1.Reference)
}

void Reference::SharedCtor() {
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  md5checksum_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  source_uri_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&length_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ncbi_taxon_id_) -
      reinterpret_cast<char*>(&length_)) + sizeof(ncbi_taxon_id_));
  _cached_size_ = 0;
}

Reference::~Reference() {
  // @@protoc_insertion_point(destructor:google.genomics.v1.Reference)
  SharedDtor();
}

void Reference::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  md5checksum_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  source_uri_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Reference::ArenaDtor(void* object) {
  Reference* _this = reinterpret_cast< Reference* >(object);
  (void)_this;
}
void Reference::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void Reference::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Reference::descriptor() {
  ::protobuf_google_2fgenomics_2fv1_2freferences_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fgenomics_2fv1_2freferences_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Reference& Reference::default_instance() {
  ::protobuf_google_2fgenomics_2fv1_2freferences_2eproto::InitDefaultsReference();
  return *internal_default_instance();
}

Reference* Reference::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<Reference>(arena);
}

void Reference::Clear() {
// @@protoc_insertion_point(message_clear_start:google.genomics.v1.Reference)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  source_accessions_.Clear();
  id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  md5checksum_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  source_uri_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  ::memset(&length_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ncbi_taxon_id_) -
      reinterpret_cast<char*>(&length_)) + sizeof(ncbi_taxon_id_));
  _internal_metadata_.Clear();
}

bool Reference::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.genomics.v1.Reference)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->id().data(), static_cast<int>(this->id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.genomics.v1.Reference.id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 length = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &length_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string md5checksum = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_md5checksum()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->md5checksum().data(), static_cast<int>(this->md5checksum().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.genomics.v1.Reference.md5checksum"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string name = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.genomics.v1.Reference.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string source_uri = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_source_uri()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->source_uri().data(), static_cast<int>(this->source_uri().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.genomics.v1.Reference.source_uri"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string source_accessions = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_source_accessions()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->source_accessions(this->source_accessions_size() - 1).data(),
            static_cast<int>(this->source_accessions(this->source_accessions_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.genomics.v1.Reference.source_accessions"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 ncbi_taxon_id = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ncbi_taxon_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.genomics.v1.Reference)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.genomics.v1.Reference)
  return false;
#undef DO_
}

void Reference::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.genomics.v1.Reference)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), static_cast<int>(this->id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.Reference.id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  // int64 length = 2;
  if (this->length() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->length(), output);
  }

  // string md5checksum = 3;
  if (this->md5checksum().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->md5checksum().data(), static_cast<int>(this->md5checksum().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.Reference.md5checksum");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->md5checksum(), output);
  }

  // string name = 4;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.Reference.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->name(), output);
  }

  // string source_uri = 5;
  if (this->source_uri().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->source_uri().data(), static_cast<int>(this->source_uri().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.Reference.source_uri");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->source_uri(), output);
  }

  // repeated string source_accessions = 6;
  for (int i = 0, n = this->source_accessions_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->source_accessions(i).data(), static_cast<int>(this->source_accessions(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.Reference.source_accessions");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->source_accessions(i), output);
  }

  // int32 ncbi_taxon_id = 7;
  if (this->ncbi_taxon_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->ncbi_taxon_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:google.genomics.v1.Reference)
}

::google::protobuf::uint8* Reference::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.genomics.v1.Reference)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), static_cast<int>(this->id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.Reference.id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // int64 length = 2;
  if (this->length() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->length(), target);
  }

  // string md5checksum = 3;
  if (this->md5checksum().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->md5checksum().data(), static_cast<int>(this->md5checksum().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.Reference.md5checksum");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->md5checksum(), target);
  }

  // string name = 4;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.Reference.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->name(), target);
  }

  // string source_uri = 5;
  if (this->source_uri().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->source_uri().data(), static_cast<int>(this->source_uri().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.Reference.source_uri");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->source_uri(), target);
  }

  // repeated string source_accessions = 6;
  for (int i = 0, n = this->source_accessions_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->source_accessions(i).data(), static_cast<int>(this->source_accessions(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.Reference.source_accessions");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(6, this->source_accessions(i), target);
  }

  // int32 ncbi_taxon_id = 7;
  if (this->ncbi_taxon_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->ncbi_taxon_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.genomics.v1.Reference)
  return target;
}

size_t Reference::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.genomics.v1.Reference)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated string source_accessions = 6;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->source_accessions_size());
  for (int i = 0, n = this->source_accessions_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->source_accessions(i));
  }

  // string id = 1;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->id());
  }

  // string md5checksum = 3;
  if (this->md5checksum().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->md5checksum());
  }

  // string name = 4;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // string source_uri = 5;
  if (this->source_uri().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->source_uri());
  }

  // int64 length = 2;
  if (this->length() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->length());
  }

  // int32 ncbi_taxon_id = 7;
  if (this->ncbi_taxon_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->ncbi_taxon_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Reference::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.genomics.v1.Reference)
  GOOGLE_DCHECK_NE(&from, this);
  const Reference* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Reference>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.genomics.v1.Reference)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.genomics.v1.Reference)
    MergeFrom(*source);
  }
}

void Reference::MergeFrom(const Reference& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.genomics.v1.Reference)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  source_accessions_.MergeFrom(from.source_accessions_);
  if (from.id().size() > 0) {
    set_id(from.id());
  }
  if (from.md5checksum().size() > 0) {
    set_md5checksum(from.md5checksum());
  }
  if (from.name().size() > 0) {
    set_name(from.name());
  }
  if (from.source_uri().size() > 0) {
    set_source_uri(from.source_uri());
  }
  if (from.length() != 0) {
    set_length(from.length());
  }
  if (from.ncbi_taxon_id() != 0) {
    set_ncbi_taxon_id(from.ncbi_taxon_id());
  }
}

void Reference::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.genomics.v1.Reference)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Reference::CopyFrom(const Reference& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.genomics.v1.Reference)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Reference::IsInitialized() const {
  return true;
}

void Reference::Swap(Reference* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    Reference* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void Reference::UnsafeArenaSwap(Reference* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void Reference::InternalSwap(Reference* other) {
  using std::swap;
  source_accessions_.InternalSwap(&other->source_accessions_);
  id_.Swap(&other->id_);
  md5checksum_.Swap(&other->md5checksum_);
  name_.Swap(&other->name_);
  source_uri_.Swap(&other->source_uri_);
  swap(length_, other->length_);
  swap(ncbi_taxon_id_, other->ncbi_taxon_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Reference::GetMetadata() const {
  protobuf_google_2fgenomics_2fv1_2freferences_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fgenomics_2fv1_2freferences_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ReferenceSet::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReferenceSet::kIdFieldNumber;
const int ReferenceSet::kReferenceIdsFieldNumber;
const int ReferenceSet::kMd5ChecksumFieldNumber;
const int ReferenceSet::kNcbiTaxonIdFieldNumber;
const int ReferenceSet::kDescriptionFieldNumber;
const int ReferenceSet::kAssemblyIdFieldNumber;
const int ReferenceSet::kSourceUriFieldNumber;
const int ReferenceSet::kSourceAccessionsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReferenceSet::ReferenceSet()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_google_2fgenomics_2fv1_2freferences_2eproto::InitDefaultsReferenceSet();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.genomics.v1.ReferenceSet)
}
ReferenceSet::ReferenceSet(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  reference_ids_(arena),
  source_accessions_(arena) {
  ::protobuf_google_2fgenomics_2fv1_2freferences_2eproto::InitDefaultsReferenceSet();
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.genomics.v1.ReferenceSet)
}
ReferenceSet::ReferenceSet(const ReferenceSet& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      reference_ids_(from.reference_ids_),
      source_accessions_(from.source_accessions_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.id().size() > 0) {
    id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id(),
      GetArenaNoVirtual());
  }
  md5checksum_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.md5checksum().size() > 0) {
    md5checksum_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.md5checksum(),
      GetArenaNoVirtual());
  }
  description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.description().size() > 0) {
    description_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.description(),
      GetArenaNoVirtual());
  }
  assembly_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.assembly_id().size() > 0) {
    assembly_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.assembly_id(),
      GetArenaNoVirtual());
  }
  source_uri_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.source_uri().size() > 0) {
    source_uri_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.source_uri(),
      GetArenaNoVirtual());
  }
  ncbi_taxon_id_ = from.ncbi_taxon_id_;
  // @@protoc_insertion_point(copy_constructor:google.genomics.v1.ReferenceSet)
}

void ReferenceSet::SharedCtor() {
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  md5checksum_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  assembly_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  source_uri_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ncbi_taxon_id_ = 0;
  _cached_size_ = 0;
}

ReferenceSet::~ReferenceSet() {
  // @@protoc_insertion_point(destructor:google.genomics.v1.ReferenceSet)
  SharedDtor();
}

void ReferenceSet::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  md5checksum_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  description_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  assembly_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  source_uri_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ReferenceSet::ArenaDtor(void* object) {
  ReferenceSet* _this = reinterpret_cast< ReferenceSet* >(object);
  (void)_this;
}
void ReferenceSet::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void ReferenceSet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReferenceSet::descriptor() {
  ::protobuf_google_2fgenomics_2fv1_2freferences_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fgenomics_2fv1_2freferences_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ReferenceSet& ReferenceSet::default_instance() {
  ::protobuf_google_2fgenomics_2fv1_2freferences_2eproto::InitDefaultsReferenceSet();
  return *internal_default_instance();
}

ReferenceSet* ReferenceSet::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<ReferenceSet>(arena);
}

void ReferenceSet::Clear() {
// @@protoc_insertion_point(message_clear_start:google.genomics.v1.ReferenceSet)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  reference_ids_.Clear();
  source_accessions_.Clear();
  id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  md5checksum_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  description_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  assembly_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  source_uri_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  ncbi_taxon_id_ = 0;
  _internal_metadata_.Clear();
}

bool ReferenceSet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.genomics.v1.ReferenceSet)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->id().data(), static_cast<int>(this->id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.genomics.v1.ReferenceSet.id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string reference_ids = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_reference_ids()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->reference_ids(this->reference_ids_size() - 1).data(),
            static_cast<int>(this->reference_ids(this->reference_ids_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.genomics.v1.ReferenceSet.reference_ids"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string md5checksum = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_md5checksum()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->md5checksum().data(), static_cast<int>(this->md5checksum().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.genomics.v1.ReferenceSet.md5checksum"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 ncbi_taxon_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ncbi_taxon_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string description = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_description()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->description().data(), static_cast<int>(this->description().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.genomics.v1.ReferenceSet.description"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string assembly_id = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_assembly_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->assembly_id().data(), static_cast<int>(this->assembly_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.genomics.v1.ReferenceSet.assembly_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string source_uri = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_source_uri()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->source_uri().data(), static_cast<int>(this->source_uri().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.genomics.v1.ReferenceSet.source_uri"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string source_accessions = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_source_accessions()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->source_accessions(this->source_accessions_size() - 1).data(),
            static_cast<int>(this->source_accessions(this->source_accessions_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.genomics.v1.ReferenceSet.source_accessions"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.genomics.v1.ReferenceSet)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.genomics.v1.ReferenceSet)
  return false;
#undef DO_
}

void ReferenceSet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.genomics.v1.ReferenceSet)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), static_cast<int>(this->id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.ReferenceSet.id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  // repeated string reference_ids = 2;
  for (int i = 0, n = this->reference_ids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->reference_ids(i).data(), static_cast<int>(this->reference_ids(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.ReferenceSet.reference_ids");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->reference_ids(i), output);
  }

  // string md5checksum = 3;
  if (this->md5checksum().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->md5checksum().data(), static_cast<int>(this->md5checksum().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.ReferenceSet.md5checksum");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->md5checksum(), output);
  }

  // int32 ncbi_taxon_id = 4;
  if (this->ncbi_taxon_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->ncbi_taxon_id(), output);
  }

  // string description = 5;
  if (this->description().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->description().data(), static_cast<int>(this->description().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.ReferenceSet.description");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->description(), output);
  }

  // string assembly_id = 6;
  if (this->assembly_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->assembly_id().data(), static_cast<int>(this->assembly_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.ReferenceSet.assembly_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->assembly_id(), output);
  }

  // string source_uri = 7;
  if (this->source_uri().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->source_uri().data(), static_cast<int>(this->source_uri().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.ReferenceSet.source_uri");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->source_uri(), output);
  }

  // repeated string source_accessions = 8;
  for (int i = 0, n = this->source_accessions_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->source_accessions(i).data(), static_cast<int>(this->source_accessions(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.ReferenceSet.source_accessions");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->source_accessions(i), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:google.genomics.v1.ReferenceSet)
}

::google::protobuf::uint8* ReferenceSet::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.genomics.v1.ReferenceSet)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), static_cast<int>(this->id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.ReferenceSet.id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // repeated string reference_ids = 2;
  for (int i = 0, n = this->reference_ids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->reference_ids(i).data(), static_cast<int>(this->reference_ids(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.ReferenceSet.reference_ids");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->reference_ids(i), target);
  }

  // string md5checksum = 3;
  if (this->md5checksum().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->md5checksum().data(), static_cast<int>(this->md5checksum().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.ReferenceSet.md5checksum");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->md5checksum(), target);
  }

  // int32 ncbi_taxon_id = 4;
  if (this->ncbi_taxon_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->ncbi_taxon_id(), target);
  }

  // string description = 5;
  if (this->description().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->description().data(), static_cast<int>(this->description().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.ReferenceSet.description");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->description(), target);
  }

  // string assembly_id = 6;
  if (this->assembly_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->assembly_id().data(), static_cast<int>(this->assembly_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.ReferenceSet.assembly_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->assembly_id(), target);
  }

  // string source_uri = 7;
  if (this->source_uri().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->source_uri().data(), static_cast<int>(this->source_uri().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.ReferenceSet.source_uri");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->source_uri(), target);
  }

  // repeated string source_accessions = 8;
  for (int i = 0, n = this->source_accessions_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->source_accessions(i).data(), static_cast<int>(this->source_accessions(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.ReferenceSet.source_accessions");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(8, this->source_accessions(i), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.genomics.v1.ReferenceSet)
  return target;
}

size_t ReferenceSet::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.genomics.v1.ReferenceSet)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated string reference_ids = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->reference_ids_size());
  for (int i = 0, n = this->reference_ids_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->reference_ids(i));
  }

  // repeated string source_accessions = 8;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->source_accessions_size());
  for (int i = 0, n = this->source_accessions_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->source_accessions(i));
  }

  // string id = 1;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->id());
  }

  // string md5checksum = 3;
  if (this->md5checksum().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->md5checksum());
  }

  // string description = 5;
  if (this->description().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->description());
  }

  // string assembly_id = 6;
  if (this->assembly_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->assembly_id());
  }

  // string source_uri = 7;
  if (this->source_uri().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->source_uri());
  }

  // int32 ncbi_taxon_id = 4;
  if (this->ncbi_taxon_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->ncbi_taxon_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReferenceSet::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.genomics.v1.ReferenceSet)
  GOOGLE_DCHECK_NE(&from, this);
  const ReferenceSet* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ReferenceSet>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.genomics.v1.ReferenceSet)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.genomics.v1.ReferenceSet)
    MergeFrom(*source);
  }
}

void ReferenceSet::MergeFrom(const ReferenceSet& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.genomics.v1.ReferenceSet)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  reference_ids_.MergeFrom(from.reference_ids_);
  source_accessions_.MergeFrom(from.source_accessions_);
  if (from.id().size() > 0) {
    set_id(from.id());
  }
  if (from.md5checksum().size() > 0) {
    set_md5checksum(from.md5checksum());
  }
  if (from.description().size() > 0) {
    set_description(from.description());
  }
  if (from.assembly_id().size() > 0) {
    set_assembly_id(from.assembly_id());
  }
  if (from.source_uri().size() > 0) {
    set_source_uri(from.source_uri());
  }
  if (from.ncbi_taxon_id() != 0) {
    set_ncbi_taxon_id(from.ncbi_taxon_id());
  }
}

void ReferenceSet::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.genomics.v1.ReferenceSet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReferenceSet::CopyFrom(const ReferenceSet& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.genomics.v1.ReferenceSet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReferenceSet::IsInitialized() const {
  return true;
}

void ReferenceSet::Swap(ReferenceSet* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    ReferenceSet* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void ReferenceSet::UnsafeArenaSwap(ReferenceSet* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void ReferenceSet::InternalSwap(ReferenceSet* other) {
  using std::swap;
  reference_ids_.InternalSwap(&other->reference_ids_);
  source_accessions_.InternalSwap(&other->source_accessions_);
  id_.Swap(&other->id_);
  md5checksum_.Swap(&other->md5checksum_);
  description_.Swap(&other->description_);
  assembly_id_.Swap(&other->assembly_id_);
  source_uri_.Swap(&other->source_uri_);
  swap(ncbi_taxon_id_, other->ncbi_taxon_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ReferenceSet::GetMetadata() const {
  protobuf_google_2fgenomics_2fv1_2freferences_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fgenomics_2fv1_2freferences_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void SearchReferenceSetsRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SearchReferenceSetsRequest::kMd5ChecksumsFieldNumber;
const int SearchReferenceSetsRequest::kAccessionsFieldNumber;
const int SearchReferenceSetsRequest::kAssemblyIdFieldNumber;
const int SearchReferenceSetsRequest::kPageTokenFieldNumber;
const int SearchReferenceSetsRequest::kPageSizeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SearchReferenceSetsRequest::SearchReferenceSetsRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_google_2fgenomics_2fv1_2freferences_2eproto::InitDefaultsSearchReferenceSetsRequest();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.genomics.v1.SearchReferenceSetsRequest)
}
SearchReferenceSetsRequest::SearchReferenceSetsRequest(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  md5checksums_(arena),
  accessions_(arena) {
  ::protobuf_google_2fgenomics_2fv1_2freferences_2eproto::InitDefaultsSearchReferenceSetsRequest();
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.genomics.v1.SearchReferenceSetsRequest)
}
SearchReferenceSetsRequest::SearchReferenceSetsRequest(const SearchReferenceSetsRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      md5checksums_(from.md5checksums_),
      accessions_(from.accessions_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  assembly_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.assembly_id().size() > 0) {
    assembly_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.assembly_id(),
      GetArenaNoVirtual());
  }
  page_token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.page_token().size() > 0) {
    page_token_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.page_token(),
      GetArenaNoVirtual());
  }
  page_size_ = from.page_size_;
  // @@protoc_insertion_point(copy_constructor:google.genomics.v1.SearchReferenceSetsRequest)
}

void SearchReferenceSetsRequest::SharedCtor() {
  assembly_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  page_token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  page_size_ = 0;
  _cached_size_ = 0;
}

SearchReferenceSetsRequest::~SearchReferenceSetsRequest() {
  // @@protoc_insertion_point(destructor:google.genomics.v1.SearchReferenceSetsRequest)
  SharedDtor();
}

void SearchReferenceSetsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  assembly_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  page_token_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SearchReferenceSetsRequest::ArenaDtor(void* object) {
  SearchReferenceSetsRequest* _this = reinterpret_cast< SearchReferenceSetsRequest* >(object);
  (void)_this;
}
void SearchReferenceSetsRequest::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void SearchReferenceSetsRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SearchReferenceSetsRequest::descriptor() {
  ::protobuf_google_2fgenomics_2fv1_2freferences_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fgenomics_2fv1_2freferences_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SearchReferenceSetsRequest& SearchReferenceSetsRequest::default_instance() {
  ::protobuf_google_2fgenomics_2fv1_2freferences_2eproto::InitDefaultsSearchReferenceSetsRequest();
  return *internal_default_instance();
}

SearchReferenceSetsRequest* SearchReferenceSetsRequest::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<SearchReferenceSetsRequest>(arena);
}

void SearchReferenceSetsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.genomics.v1.SearchReferenceSetsRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  md5checksums_.Clear();
  accessions_.Clear();
  assembly_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  page_token_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  page_size_ = 0;
  _internal_metadata_.Clear();
}

bool SearchReferenceSetsRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.genomics.v1.SearchReferenceSetsRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string md5checksums = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_md5checksums()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->md5checksums(this->md5checksums_size() - 1).data(),
            static_cast<int>(this->md5checksums(this->md5checksums_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.genomics.v1.SearchReferenceSetsRequest.md5checksums"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string accessions = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_accessions()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->accessions(this->accessions_size() - 1).data(),
            static_cast<int>(this->accessions(this->accessions_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.genomics.v1.SearchReferenceSetsRequest.accessions"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string assembly_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_assembly_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->assembly_id().data(), static_cast<int>(this->assembly_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.genomics.v1.SearchReferenceSetsRequest.assembly_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string page_token = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_page_token()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->page_token().data(), static_cast<int>(this->page_token().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.genomics.v1.SearchReferenceSetsRequest.page_token"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 page_size = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &page_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.genomics.v1.SearchReferenceSetsRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.genomics.v1.SearchReferenceSetsRequest)
  return false;
#undef DO_
}

void SearchReferenceSetsRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.genomics.v1.SearchReferenceSetsRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string md5checksums = 1;
  for (int i = 0, n = this->md5checksums_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->md5checksums(i).data(), static_cast<int>(this->md5checksums(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.SearchReferenceSetsRequest.md5checksums");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->md5checksums(i), output);
  }

  // repeated string accessions = 2;
  for (int i = 0, n = this->accessions_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->accessions(i).data(), static_cast<int>(this->accessions(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.SearchReferenceSetsRequest.accessions");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->accessions(i), output);
  }

  // string assembly_id = 3;
  if (this->assembly_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->assembly_id().data(), static_cast<int>(this->assembly_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.SearchReferenceSetsRequest.assembly_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->assembly_id(), output);
  }

  // string page_token = 4;
  if (this->page_token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->page_token().data(), static_cast<int>(this->page_token().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.SearchReferenceSetsRequest.page_token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->page_token(), output);
  }

  // int32 page_size = 5;
  if (this->page_size() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->page_size(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:google.genomics.v1.SearchReferenceSetsRequest)
}

::google::protobuf::uint8* SearchReferenceSetsRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.genomics.v1.SearchReferenceSetsRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string md5checksums = 1;
  for (int i = 0, n = this->md5checksums_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->md5checksums(i).data(), static_cast<int>(this->md5checksums(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.SearchReferenceSetsRequest.md5checksums");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->md5checksums(i), target);
  }

  // repeated string accessions = 2;
  for (int i = 0, n = this->accessions_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->accessions(i).data(), static_cast<int>(this->accessions(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.SearchReferenceSetsRequest.accessions");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->accessions(i), target);
  }

  // string assembly_id = 3;
  if (this->assembly_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->assembly_id().data(), static_cast<int>(this->assembly_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.SearchReferenceSetsRequest.assembly_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->assembly_id(), target);
  }

  // string page_token = 4;
  if (this->page_token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->page_token().data(), static_cast<int>(this->page_token().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.SearchReferenceSetsRequest.page_token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->page_token(), target);
  }

  // int32 page_size = 5;
  if (this->page_size() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->page_size(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.genomics.v1.SearchReferenceSetsRequest)
  return target;
}

size_t SearchReferenceSetsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.genomics.v1.SearchReferenceSetsRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated string md5checksums = 1;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->md5checksums_size());
  for (int i = 0, n = this->md5checksums_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->md5checksums(i));
  }

  // repeated string accessions = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->accessions_size());
  for (int i = 0, n = this->accessions_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->accessions(i));
  }

  // string assembly_id = 3;
  if (this->assembly_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->assembly_id());
  }

  // string page_token = 4;
  if (this->page_token().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->page_token());
  }

  // int32 page_size = 5;
  if (this->page_size() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->page_size());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SearchReferenceSetsRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.genomics.v1.SearchReferenceSetsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SearchReferenceSetsRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SearchReferenceSetsRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.genomics.v1.SearchReferenceSetsRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.genomics.v1.SearchReferenceSetsRequest)
    MergeFrom(*source);
  }
}

void SearchReferenceSetsRequest::MergeFrom(const SearchReferenceSetsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.genomics.v1.SearchReferenceSetsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  md5checksums_.MergeFrom(from.md5checksums_);
  accessions_.MergeFrom(from.accessions_);
  if (from.assembly_id().size() > 0) {
    set_assembly_id(from.assembly_id());
  }
  if (from.page_token().size() > 0) {
    set_page_token(from.page_token());
  }
  if (from.page_size() != 0) {
    set_page_size(from.page_size());
  }
}

void SearchReferenceSetsRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.genomics.v1.SearchReferenceSetsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SearchReferenceSetsRequest::CopyFrom(const SearchReferenceSetsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.genomics.v1.SearchReferenceSetsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SearchReferenceSetsRequest::IsInitialized() const {
  return true;
}

void SearchReferenceSetsRequest::Swap(SearchReferenceSetsRequest* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    SearchReferenceSetsRequest* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void SearchReferenceSetsRequest::UnsafeArenaSwap(SearchReferenceSetsRequest* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void SearchReferenceSetsRequest::InternalSwap(SearchReferenceSetsRequest* other) {
  using std::swap;
  md5checksums_.InternalSwap(&other->md5checksums_);
  accessions_.InternalSwap(&other->accessions_);
  assembly_id_.Swap(&other->assembly_id_);
  page_token_.Swap(&other->page_token_);
  swap(page_size_, other->page_size_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SearchReferenceSetsRequest::GetMetadata() const {
  protobuf_google_2fgenomics_2fv1_2freferences_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fgenomics_2fv1_2freferences_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void SearchReferenceSetsResponse::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SearchReferenceSetsResponse::kReferenceSetsFieldNumber;
const int SearchReferenceSetsResponse::kNextPageTokenFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SearchReferenceSetsResponse::SearchReferenceSetsResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_google_2fgenomics_2fv1_2freferences_2eproto::InitDefaultsSearchReferenceSetsResponse();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.genomics.v1.SearchReferenceSetsResponse)
}
SearchReferenceSetsResponse::SearchReferenceSetsResponse(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  reference_sets_(arena) {
  ::protobuf_google_2fgenomics_2fv1_2freferences_2eproto::InitDefaultsSearchReferenceSetsResponse();
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.genomics.v1.SearchReferenceSetsResponse)
}
SearchReferenceSetsResponse::SearchReferenceSetsResponse(const SearchReferenceSetsResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      reference_sets_(from.reference_sets_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  next_page_token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.next_page_token().size() > 0) {
    next_page_token_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.next_page_token(),
      GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(copy_constructor:google.genomics.v1.SearchReferenceSetsResponse)
}

void SearchReferenceSetsResponse::SharedCtor() {
  next_page_token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

SearchReferenceSetsResponse::~SearchReferenceSetsResponse() {
  // @@protoc_insertion_point(destructor:google.genomics.v1.SearchReferenceSetsResponse)
  SharedDtor();
}

void SearchReferenceSetsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  next_page_token_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SearchReferenceSetsResponse::ArenaDtor(void* object) {
  SearchReferenceSetsResponse* _this = reinterpret_cast< SearchReferenceSetsResponse* >(object);
  (void)_this;
}
void SearchReferenceSetsResponse::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void SearchReferenceSetsResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SearchReferenceSetsResponse::descriptor() {
  ::protobuf_google_2fgenomics_2fv1_2freferences_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fgenomics_2fv1_2freferences_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SearchReferenceSetsResponse& SearchReferenceSetsResponse::default_instance() {
  ::protobuf_google_2fgenomics_2fv1_2freferences_2eproto::InitDefaultsSearchReferenceSetsResponse();
  return *internal_default_instance();
}

SearchReferenceSetsResponse* SearchReferenceSetsResponse::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<SearchReferenceSetsResponse>(arena);
}

void SearchReferenceSetsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:google.genomics.v1.SearchReferenceSetsResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  reference_sets_.Clear();
  next_page_token_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  _internal_metadata_.Clear();
}

bool SearchReferenceSetsResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.genomics.v1.SearchReferenceSetsResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .google.genomics.v1.ReferenceSet reference_sets = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_reference_sets()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string next_page_token = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_next_page_token()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->next_page_token().data(), static_cast<int>(this->next_page_token().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.genomics.v1.SearchReferenceSetsResponse.next_page_token"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.genomics.v1.SearchReferenceSetsResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.genomics.v1.SearchReferenceSetsResponse)
  return false;
#undef DO_
}

void SearchReferenceSetsResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.genomics.v1.SearchReferenceSetsResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .google.genomics.v1.ReferenceSet reference_sets = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->reference_sets_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->reference_sets(static_cast<int>(i)), output);
  }

  // string next_page_token = 2;
  if (this->next_page_token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->next_page_token().data(), static_cast<int>(this->next_page_token().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.SearchReferenceSetsResponse.next_page_token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->next_page_token(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:google.genomics.v1.SearchReferenceSetsResponse)
}

::google::protobuf::uint8* SearchReferenceSetsResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.genomics.v1.SearchReferenceSetsResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .google.genomics.v1.ReferenceSet reference_sets = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->reference_sets_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->reference_sets(static_cast<int>(i)), deterministic, target);
  }

  // string next_page_token = 2;
  if (this->next_page_token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->next_page_token().data(), static_cast<int>(this->next_page_token().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.SearchReferenceSetsResponse.next_page_token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->next_page_token(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.genomics.v1.SearchReferenceSetsResponse)
  return target;
}

size_t SearchReferenceSetsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.genomics.v1.SearchReferenceSetsResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .google.genomics.v1.ReferenceSet reference_sets = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->reference_sets_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->reference_sets(static_cast<int>(i)));
    }
  }

  // string next_page_token = 2;
  if (this->next_page_token().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->next_page_token());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SearchReferenceSetsResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.genomics.v1.SearchReferenceSetsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const SearchReferenceSetsResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SearchReferenceSetsResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.genomics.v1.SearchReferenceSetsResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.genomics.v1.SearchReferenceSetsResponse)
    MergeFrom(*source);
  }
}

void SearchReferenceSetsResponse::MergeFrom(const SearchReferenceSetsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.genomics.v1.SearchReferenceSetsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  reference_sets_.MergeFrom(from.reference_sets_);
  if (from.next_page_token().size() > 0) {
    set_next_page_token(from.next_page_token());
  }
}

void SearchReferenceSetsResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.genomics.v1.SearchReferenceSetsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SearchReferenceSetsResponse::CopyFrom(const SearchReferenceSetsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.genomics.v1.SearchReferenceSetsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SearchReferenceSetsResponse::IsInitialized() const {
  return true;
}

void SearchReferenceSetsResponse::Swap(SearchReferenceSetsResponse* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    SearchReferenceSetsResponse* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void SearchReferenceSetsResponse::UnsafeArenaSwap(SearchReferenceSetsResponse* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void SearchReferenceSetsResponse::InternalSwap(SearchReferenceSetsResponse* other) {
  using std::swap;
  reference_sets_.InternalSwap(&other->reference_sets_);
  next_page_token_.Swap(&other->next_page_token_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SearchReferenceSetsResponse::GetMetadata() const {
  protobuf_google_2fgenomics_2fv1_2freferences_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fgenomics_2fv1_2freferences_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void GetReferenceSetRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetReferenceSetRequest::kReferenceSetIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetReferenceSetRequest::GetReferenceSetRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_google_2fgenomics_2fv1_2freferences_2eproto::InitDefaultsGetReferenceSetRequest();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.genomics.v1.GetReferenceSetRequest)
}
GetReferenceSetRequest::GetReferenceSetRequest(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::protobuf_google_2fgenomics_2fv1_2freferences_2eproto::InitDefaultsGetReferenceSetRequest();
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.genomics.v1.GetReferenceSetRequest)
}
GetReferenceSetRequest::GetReferenceSetRequest(const GetReferenceSetRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  reference_set_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.reference_set_id().size() > 0) {
    reference_set_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.reference_set_id(),
      GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(copy_constructor:google.genomics.v1.GetReferenceSetRequest)
}

void GetReferenceSetRequest::SharedCtor() {
  reference_set_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

GetReferenceSetRequest::~GetReferenceSetRequest() {
  // @@protoc_insertion_point(destructor:google.genomics.v1.GetReferenceSetRequest)
  SharedDtor();
}

void GetReferenceSetRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  reference_set_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void GetReferenceSetRequest::ArenaDtor(void* object) {
  GetReferenceSetRequest* _this = reinterpret_cast< GetReferenceSetRequest* >(object);
  (void)_this;
}
void GetReferenceSetRequest::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void GetReferenceSetRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetReferenceSetRequest::descriptor() {
  ::protobuf_google_2fgenomics_2fv1_2freferences_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fgenomics_2fv1_2freferences_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GetReferenceSetRequest& GetReferenceSetRequest::default_instance() {
  ::protobuf_google_2fgenomics_2fv1_2freferences_2eproto::InitDefaultsGetReferenceSetRequest();
  return *internal_default_instance();
}

GetReferenceSetRequest* GetReferenceSetRequest::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<GetReferenceSetRequest>(arena);
}

void GetReferenceSetRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.genomics.v1.GetReferenceSetRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  reference_set_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  _internal_metadata_.Clear();
}

bool GetReferenceSetRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.genomics.v1.GetReferenceSetRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string reference_set_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_reference_set_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->reference_set_id().data(), static_cast<int>(this->reference_set_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.genomics.v1.GetReferenceSetRequest.reference_set_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.genomics.v1.GetReferenceSetRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.genomics.v1.GetReferenceSetRequest)
  return false;
#undef DO_
}

void GetReferenceSetRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.genomics.v1.GetReferenceSetRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string reference_set_id = 1;
  if (this->reference_set_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->reference_set_id().data(), static_cast<int>(this->reference_set_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.GetReferenceSetRequest.reference_set_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->reference_set_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:google.genomics.v1.GetReferenceSetRequest)
}

::google::protobuf::uint8* GetReferenceSetRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.genomics.v1.GetReferenceSetRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string reference_set_id = 1;
  if (this->reference_set_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->reference_set_id().data(), static_cast<int>(this->reference_set_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.GetReferenceSetRequest.reference_set_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->reference_set_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.genomics.v1.GetReferenceSetRequest)
  return target;
}

size_t GetReferenceSetRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.genomics.v1.GetReferenceSetRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string reference_set_id = 1;
  if (this->reference_set_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->reference_set_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetReferenceSetRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.genomics.v1.GetReferenceSetRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetReferenceSetRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetReferenceSetRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.genomics.v1.GetReferenceSetRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.genomics.v1.GetReferenceSetRequest)
    MergeFrom(*source);
  }
}

void GetReferenceSetRequest::MergeFrom(const GetReferenceSetRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.genomics.v1.GetReferenceSetRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.reference_set_id().size() > 0) {
    set_reference_set_id(from.reference_set_id());
  }
}

void GetReferenceSetRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.genomics.v1.GetReferenceSetRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetReferenceSetRequest::CopyFrom(const GetReferenceSetRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.genomics.v1.GetReferenceSetRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetReferenceSetRequest::IsInitialized() const {
  return true;
}

void GetReferenceSetRequest::Swap(GetReferenceSetRequest* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    GetReferenceSetRequest* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void GetReferenceSetRequest::UnsafeArenaSwap(GetReferenceSetRequest* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void GetReferenceSetRequest::InternalSwap(GetReferenceSetRequest* other) {
  using std::swap;
  reference_set_id_.Swap(&other->reference_set_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetReferenceSetRequest::GetMetadata() const {
  protobuf_google_2fgenomics_2fv1_2freferences_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fgenomics_2fv1_2freferences_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void SearchReferencesRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SearchReferencesRequest::kMd5ChecksumsFieldNumber;
const int SearchReferencesRequest::kAccessionsFieldNumber;
const int SearchReferencesRequest::kReferenceSetIdFieldNumber;
const int SearchReferencesRequest::kPageTokenFieldNumber;
const int SearchReferencesRequest::kPageSizeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SearchReferencesRequest::SearchReferencesRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_google_2fgenomics_2fv1_2freferences_2eproto::InitDefaultsSearchReferencesRequest();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.genomics.v1.SearchReferencesRequest)
}
SearchReferencesRequest::SearchReferencesRequest(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  md5checksums_(arena),
  accessions_(arena) {
  ::protobuf_google_2fgenomics_2fv1_2freferences_2eproto::InitDefaultsSearchReferencesRequest();
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.genomics.v1.SearchReferencesRequest)
}
SearchReferencesRequest::SearchReferencesRequest(const SearchReferencesRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      md5checksums_(from.md5checksums_),
      accessions_(from.accessions_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  reference_set_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.reference_set_id().size() > 0) {
    reference_set_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.reference_set_id(),
      GetArenaNoVirtual());
  }
  page_token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.page_token().size() > 0) {
    page_token_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.page_token(),
      GetArenaNoVirtual());
  }
  page_size_ = from.page_size_;
  // @@protoc_insertion_point(copy_constructor:google.genomics.v1.SearchReferencesRequest)
}

void SearchReferencesRequest::SharedCtor() {
  reference_set_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  page_token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  page_size_ = 0;
  _cached_size_ = 0;
}

SearchReferencesRequest::~SearchReferencesRequest() {
  // @@protoc_insertion_point(destructor:google.genomics.v1.SearchReferencesRequest)
  SharedDtor();
}

void SearchReferencesRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  reference_set_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  page_token_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SearchReferencesRequest::ArenaDtor(void* object) {
  SearchReferencesRequest* _this = reinterpret_cast< SearchReferencesRequest* >(object);
  (void)_this;
}
void SearchReferencesRequest::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void SearchReferencesRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SearchReferencesRequest::descriptor() {
  ::protobuf_google_2fgenomics_2fv1_2freferences_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fgenomics_2fv1_2freferences_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SearchReferencesRequest& SearchReferencesRequest::default_instance() {
  ::protobuf_google_2fgenomics_2fv1_2freferences_2eproto::InitDefaultsSearchReferencesRequest();
  return *internal_default_instance();
}

SearchReferencesRequest* SearchReferencesRequest::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<SearchReferencesRequest>(arena);
}

void SearchReferencesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.genomics.v1.SearchReferencesRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  md5checksums_.Clear();
  accessions_.Clear();
  reference_set_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  page_token_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  page_size_ = 0;
  _internal_metadata_.Clear();
}

bool SearchReferencesRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.genomics.v1.SearchReferencesRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string md5checksums = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_md5checksums()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->md5checksums(this->md5checksums_size() - 1).data(),
            static_cast<int>(this->md5checksums(this->md5checksums_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.genomics.v1.SearchReferencesRequest.md5checksums"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string accessions = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_accessions()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->accessions(this->accessions_size() - 1).data(),
            static_cast<int>(this->accessions(this->accessions_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.genomics.v1.SearchReferencesRequest.accessions"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string reference_set_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_reference_set_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->reference_set_id().data(), static_cast<int>(this->reference_set_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.genomics.v1.SearchReferencesRequest.reference_set_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string page_token = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_page_token()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->page_token().data(), static_cast<int>(this->page_token().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.genomics.v1.SearchReferencesRequest.page_token"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 page_size = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &page_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.genomics.v1.SearchReferencesRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.genomics.v1.SearchReferencesRequest)
  return false;
#undef DO_
}

void SearchReferencesRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.genomics.v1.SearchReferencesRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string md5checksums = 1;
  for (int i = 0, n = this->md5checksums_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->md5checksums(i).data(), static_cast<int>(this->md5checksums(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.SearchReferencesRequest.md5checksums");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->md5checksums(i), output);
  }

  // repeated string accessions = 2;
  for (int i = 0, n = this->accessions_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->accessions(i).data(), static_cast<int>(this->accessions(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.SearchReferencesRequest.accessions");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->accessions(i), output);
  }

  // string reference_set_id = 3;
  if (this->reference_set_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->reference_set_id().data(), static_cast<int>(this->reference_set_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.SearchReferencesRequest.reference_set_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->reference_set_id(), output);
  }

  // string page_token = 4;
  if (this->page_token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->page_token().data(), static_cast<int>(this->page_token().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.SearchReferencesRequest.page_token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->page_token(), output);
  }

  // int32 page_size = 5;
  if (this->page_size() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->page_size(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:google.genomics.v1.SearchReferencesRequest)
}

::google::protobuf::uint8* SearchReferencesRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.genomics.v1.SearchReferencesRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string md5checksums = 1;
  for (int i = 0, n = this->md5checksums_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->md5checksums(i).data(), static_cast<int>(this->md5checksums(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.SearchReferencesRequest.md5checksums");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->md5checksums(i), target);
  }

  // repeated string accessions = 2;
  for (int i = 0, n = this->accessions_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->accessions(i).data(), static_cast<int>(this->accessions(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.SearchReferencesRequest.accessions");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->accessions(i), target);
  }

  // string reference_set_id = 3;
  if (this->reference_set_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->reference_set_id().data(), static_cast<int>(this->reference_set_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.SearchReferencesRequest.reference_set_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->reference_set_id(), target);
  }

  // string page_token = 4;
  if (this->page_token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->page_token().data(), static_cast<int>(this->page_token().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.SearchReferencesRequest.page_token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->page_token(), target);
  }

  // int32 page_size = 5;
  if (this->page_size() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->page_size(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.genomics.v1.SearchReferencesRequest)
  return target;
}

size_t SearchReferencesRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.genomics.v1.SearchReferencesRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated string md5checksums = 1;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->md5checksums_size());
  for (int i = 0, n = this->md5checksums_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->md5checksums(i));
  }

  // repeated string accessions = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->accessions_size());
  for (int i = 0, n = this->accessions_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->accessions(i));
  }

  // string reference_set_id = 3;
  if (this->reference_set_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->reference_set_id());
  }

  // string page_token = 4;
  if (this->page_token().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->page_token());
  }

  // int32 page_size = 5;
  if (this->page_size() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->page_size());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SearchReferencesRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.genomics.v1.SearchReferencesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SearchReferencesRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SearchReferencesRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.genomics.v1.SearchReferencesRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.genomics.v1.SearchReferencesRequest)
    MergeFrom(*source);
  }
}

void SearchReferencesRequest::MergeFrom(const SearchReferencesRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.genomics.v1.SearchReferencesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  md5checksums_.MergeFrom(from.md5checksums_);
  accessions_.MergeFrom(from.accessions_);
  if (from.reference_set_id().size() > 0) {
    set_reference_set_id(from.reference_set_id());
  }
  if (from.page_token().size() > 0) {
    set_page_token(from.page_token());
  }
  if (from.page_size() != 0) {
    set_page_size(from.page_size());
  }
}

void SearchReferencesRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.genomics.v1.SearchReferencesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SearchReferencesRequest::CopyFrom(const SearchReferencesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.genomics.v1.SearchReferencesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SearchReferencesRequest::IsInitialized() const {
  return true;
}

void SearchReferencesRequest::Swap(SearchReferencesRequest* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    SearchReferencesRequest* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void SearchReferencesRequest::UnsafeArenaSwap(SearchReferencesRequest* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void SearchReferencesRequest::InternalSwap(SearchReferencesRequest* other) {
  using std::swap;
  md5checksums_.InternalSwap(&other->md5checksums_);
  accessions_.InternalSwap(&other->accessions_);
  reference_set_id_.Swap(&other->reference_set_id_);
  page_token_.Swap(&other->page_token_);
  swap(page_size_, other->page_size_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SearchReferencesRequest::GetMetadata() const {
  protobuf_google_2fgenomics_2fv1_2freferences_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fgenomics_2fv1_2freferences_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void SearchReferencesResponse::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SearchReferencesResponse::kReferencesFieldNumber;
const int SearchReferencesResponse::kNextPageTokenFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SearchReferencesResponse::SearchReferencesResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_google_2fgenomics_2fv1_2freferences_2eproto::InitDefaultsSearchReferencesResponse();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.genomics.v1.SearchReferencesResponse)
}
SearchReferencesResponse::SearchReferencesResponse(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  references_(arena) {
  ::protobuf_google_2fgenomics_2fv1_2freferences_2eproto::InitDefaultsSearchReferencesResponse();
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.genomics.v1.SearchReferencesResponse)
}
SearchReferencesResponse::SearchReferencesResponse(const SearchReferencesResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      references_(from.references_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  next_page_token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.next_page_token().size() > 0) {
    next_page_token_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.next_page_token(),
      GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(copy_constructor:google.genomics.v1.SearchReferencesResponse)
}

void SearchReferencesResponse::SharedCtor() {
  next_page_token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

SearchReferencesResponse::~SearchReferencesResponse() {
  // @@protoc_insertion_point(destructor:google.genomics.v1.SearchReferencesResponse)
  SharedDtor();
}

void SearchReferencesResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  next_page_token_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SearchReferencesResponse::ArenaDtor(void* object) {
  SearchReferencesResponse* _this = reinterpret_cast< SearchReferencesResponse* >(object);
  (void)_this;
}
void SearchReferencesResponse::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void SearchReferencesResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SearchReferencesResponse::descriptor() {
  ::protobuf_google_2fgenomics_2fv1_2freferences_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fgenomics_2fv1_2freferences_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SearchReferencesResponse& SearchReferencesResponse::default_instance() {
  ::protobuf_google_2fgenomics_2fv1_2freferences_2eproto::InitDefaultsSearchReferencesResponse();
  return *internal_default_instance();
}

SearchReferencesResponse* SearchReferencesResponse::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<SearchReferencesResponse>(arena);
}

void SearchReferencesResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:google.genomics.v1.SearchReferencesResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  references_.Clear();
  next_page_token_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  _internal_metadata_.Clear();
}

bool SearchReferencesResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.genomics.v1.SearchReferencesResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .google.genomics.v1.Reference references = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_references()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string next_page_token = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_next_page_token()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->next_page_token().data(), static_cast<int>(this->next_page_token().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.genomics.v1.SearchReferencesResponse.next_page_token"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.genomics.v1.SearchReferencesResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.genomics.v1.SearchReferencesResponse)
  return false;
#undef DO_
}

void SearchReferencesResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.genomics.v1.SearchReferencesResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .google.genomics.v1.Reference references = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->references_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->references(static_cast<int>(i)), output);
  }

  // string next_page_token = 2;
  if (this->next_page_token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->next_page_token().data(), static_cast<int>(this->next_page_token().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.SearchReferencesResponse.next_page_token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->next_page_token(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:google.genomics.v1.SearchReferencesResponse)
}

::google::protobuf::uint8* SearchReferencesResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.genomics.v1.SearchReferencesResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .google.genomics.v1.Reference references = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->references_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->references(static_cast<int>(i)), deterministic, target);
  }

  // string next_page_token = 2;
  if (this->next_page_token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->next_page_token().data(), static_cast<int>(this->next_page_token().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.SearchReferencesResponse.next_page_token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->next_page_token(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.genomics.v1.SearchReferencesResponse)
  return target;
}

size_t SearchReferencesResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.genomics.v1.SearchReferencesResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .google.genomics.v1.Reference references = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->references_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->references(static_cast<int>(i)));
    }
  }

  // string next_page_token = 2;
  if (this->next_page_token().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->next_page_token());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SearchReferencesResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.genomics.v1.SearchReferencesResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const SearchReferencesResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SearchReferencesResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.genomics.v1.SearchReferencesResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.genomics.v1.SearchReferencesResponse)
    MergeFrom(*source);
  }
}

void SearchReferencesResponse::MergeFrom(const SearchReferencesResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.genomics.v1.SearchReferencesResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  references_.MergeFrom(from.references_);
  if (from.next_page_token().size() > 0) {
    set_next_page_token(from.next_page_token());
  }
}

void SearchReferencesResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.genomics.v1.SearchReferencesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SearchReferencesResponse::CopyFrom(const SearchReferencesResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.genomics.v1.SearchReferencesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SearchReferencesResponse::IsInitialized() const {
  return true;
}

void SearchReferencesResponse::Swap(SearchReferencesResponse* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    SearchReferencesResponse* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void SearchReferencesResponse::UnsafeArenaSwap(SearchReferencesResponse* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void SearchReferencesResponse::InternalSwap(SearchReferencesResponse* other) {
  using std::swap;
  references_.InternalSwap(&other->references_);
  next_page_token_.Swap(&other->next_page_token_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SearchReferencesResponse::GetMetadata() const {
  protobuf_google_2fgenomics_2fv1_2freferences_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fgenomics_2fv1_2freferences_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void GetReferenceRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetReferenceRequest::kReferenceIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetReferenceRequest::GetReferenceRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_google_2fgenomics_2fv1_2freferences_2eproto::InitDefaultsGetReferenceRequest();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.genomics.v1.GetReferenceRequest)
}
GetReferenceRequest::GetReferenceRequest(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::protobuf_google_2fgenomics_2fv1_2freferences_2eproto::InitDefaultsGetReferenceRequest();
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.genomics.v1.GetReferenceRequest)
}
GetReferenceRequest::GetReferenceRequest(const GetReferenceRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  reference_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.reference_id().size() > 0) {
    reference_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.reference_id(),
      GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(copy_constructor:google.genomics.v1.GetReferenceRequest)
}

void GetReferenceRequest::SharedCtor() {
  reference_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

GetReferenceRequest::~GetReferenceRequest() {
  // @@protoc_insertion_point(destructor:google.genomics.v1.GetReferenceRequest)
  SharedDtor();
}

void GetReferenceRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  reference_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void GetReferenceRequest::ArenaDtor(void* object) {
  GetReferenceRequest* _this = reinterpret_cast< GetReferenceRequest* >(object);
  (void)_this;
}
void GetReferenceRequest::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void GetReferenceRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetReferenceRequest::descriptor() {
  ::protobuf_google_2fgenomics_2fv1_2freferences_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fgenomics_2fv1_2freferences_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GetReferenceRequest& GetReferenceRequest::default_instance() {
  ::protobuf_google_2fgenomics_2fv1_2freferences_2eproto::InitDefaultsGetReferenceRequest();
  return *internal_default_instance();
}

GetReferenceRequest* GetReferenceRequest::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<GetReferenceRequest>(arena);
}

void GetReferenceRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.genomics.v1.GetReferenceRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  reference_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  _internal_metadata_.Clear();
}

bool GetReferenceRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.genomics.v1.GetReferenceRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string reference_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_reference_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->reference_id().data(), static_cast<int>(this->reference_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.genomics.v1.GetReferenceRequest.reference_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.genomics.v1.GetReferenceRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.genomics.v1.GetReferenceRequest)
  return false;
#undef DO_
}

void GetReferenceRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.genomics.v1.GetReferenceRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string reference_id = 1;
  if (this->reference_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->reference_id().data(), static_cast<int>(this->reference_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.GetReferenceRequest.reference_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->reference_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:google.genomics.v1.GetReferenceRequest)
}

::google::protobuf::uint8* GetReferenceRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.genomics.v1.GetReferenceRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string reference_id = 1;
  if (this->reference_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->reference_id().data(), static_cast<int>(this->reference_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.GetReferenceRequest.reference_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->reference_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.genomics.v1.GetReferenceRequest)
  return target;
}

size_t GetReferenceRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.genomics.v1.GetReferenceRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string reference_id = 1;
  if (this->reference_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->reference_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetReferenceRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.genomics.v1.GetReferenceRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetReferenceRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetReferenceRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.genomics.v1.GetReferenceRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.genomics.v1.GetReferenceRequest)
    MergeFrom(*source);
  }
}

void GetReferenceRequest::MergeFrom(const GetReferenceRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.genomics.v1.GetReferenceRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.reference_id().size() > 0) {
    set_reference_id(from.reference_id());
  }
}

void GetReferenceRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.genomics.v1.GetReferenceRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetReferenceRequest::CopyFrom(const GetReferenceRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.genomics.v1.GetReferenceRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetReferenceRequest::IsInitialized() const {
  return true;
}

void GetReferenceRequest::Swap(GetReferenceRequest* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    GetReferenceRequest* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void GetReferenceRequest::UnsafeArenaSwap(GetReferenceRequest* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void GetReferenceRequest::InternalSwap(GetReferenceRequest* other) {
  using std::swap;
  reference_id_.Swap(&other->reference_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetReferenceRequest::GetMetadata() const {
  protobuf_google_2fgenomics_2fv1_2freferences_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fgenomics_2fv1_2freferences_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ListBasesRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ListBasesRequest::kReferenceIdFieldNumber;
const int ListBasesRequest::kStartFieldNumber;
const int ListBasesRequest::kEndFieldNumber;
const int ListBasesRequest::kPageTokenFieldNumber;
const int ListBasesRequest::kPageSizeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ListBasesRequest::ListBasesRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_google_2fgenomics_2fv1_2freferences_2eproto::InitDefaultsListBasesRequest();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.genomics.v1.ListBasesRequest)
}
ListBasesRequest::ListBasesRequest(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::protobuf_google_2fgenomics_2fv1_2freferences_2eproto::InitDefaultsListBasesRequest();
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.genomics.v1.ListBasesRequest)
}
ListBasesRequest::ListBasesRequest(const ListBasesRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  reference_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.reference_id().size() > 0) {
    reference_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.reference_id(),
      GetArenaNoVirtual());
  }
  page_token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.page_token().size() > 0) {
    page_token_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.page_token(),
      GetArenaNoVirtual());
  }
  ::memcpy(&start_, &from.start_,
    static_cast<size_t>(reinterpret_cast<char*>(&page_size_) -
    reinterpret_cast<char*>(&start_)) + sizeof(page_size_));
  // @@protoc_insertion_point(copy_constructor:google.genomics.v1.ListBasesRequest)
}

void ListBasesRequest::SharedCtor() {
  reference_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  page_token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&start_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&page_size_) -
      reinterpret_cast<char*>(&start_)) + sizeof(page_size_));
  _cached_size_ = 0;
}

ListBasesRequest::~ListBasesRequest() {
  // @@protoc_insertion_point(destructor:google.genomics.v1.ListBasesRequest)
  SharedDtor();
}

void ListBasesRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  reference_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  page_token_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ListBasesRequest::ArenaDtor(void* object) {
  ListBasesRequest* _this = reinterpret_cast< ListBasesRequest* >(object);
  (void)_this;
}
void ListBasesRequest::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void ListBasesRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ListBasesRequest::descriptor() {
  ::protobuf_google_2fgenomics_2fv1_2freferences_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fgenomics_2fv1_2freferences_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ListBasesRequest& ListBasesRequest::default_instance() {
  ::protobuf_google_2fgenomics_2fv1_2freferences_2eproto::InitDefaultsListBasesRequest();
  return *internal_default_instance();
}

ListBasesRequest* ListBasesRequest::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<ListBasesRequest>(arena);
}

void ListBasesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.genomics.v1.ListBasesRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  reference_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  page_token_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  ::memset(&start_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&page_size_) -
      reinterpret_cast<char*>(&start_)) + sizeof(page_size_));
  _internal_metadata_.Clear();
}

bool ListBasesRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.genomics.v1.ListBasesRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string reference_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_reference_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->reference_id().data(), static_cast<int>(this->reference_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.genomics.v1.ListBasesRequest.reference_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 start = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &start_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 end = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &end_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string page_token = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_page_token()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->page_token().data(), static_cast<int>(this->page_token().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.genomics.v1.ListBasesRequest.page_token"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 page_size = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &page_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.genomics.v1.ListBasesRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.genomics.v1.ListBasesRequest)
  return false;
#undef DO_
}

void ListBasesRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.genomics.v1.ListBasesRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string reference_id = 1;
  if (this->reference_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->reference_id().data(), static_cast<int>(this->reference_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.ListBasesRequest.reference_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->reference_id(), output);
  }

  // int64 start = 2;
  if (this->start() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->start(), output);
  }

  // int64 end = 3;
  if (this->end() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->end(), output);
  }

  // string page_token = 4;
  if (this->page_token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->page_token().data(), static_cast<int>(this->page_token().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.ListBasesRequest.page_token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->page_token(), output);
  }

  // int32 page_size = 5;
  if (this->page_size() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->page_size(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:google.genomics.v1.ListBasesRequest)
}

::google::protobuf::uint8* ListBasesRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.genomics.v1.ListBasesRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string reference_id = 1;
  if (this->reference_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->reference_id().data(), static_cast<int>(this->reference_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.ListBasesRequest.reference_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->reference_id(), target);
  }

  // int64 start = 2;
  if (this->start() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->start(), target);
  }

  // int64 end = 3;
  if (this->end() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->end(), target);
  }

  // string page_token = 4;
  if (this->page_token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->page_token().data(), static_cast<int>(this->page_token().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.ListBasesRequest.page_token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->page_token(), target);
  }

  // int32 page_size = 5;
  if (this->page_size() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->page_size(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.genomics.v1.ListBasesRequest)
  return target;
}

size_t ListBasesRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.genomics.v1.ListBasesRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string reference_id = 1;
  if (this->reference_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->reference_id());
  }

  // string page_token = 4;
  if (this->page_token().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->page_token());
  }

  // int64 start = 2;
  if (this->start() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->start());
  }

  // int64 end = 3;
  if (this->end() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->end());
  }

  // int32 page_size = 5;
  if (this->page_size() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->page_size());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ListBasesRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.genomics.v1.ListBasesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ListBasesRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ListBasesRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.genomics.v1.ListBasesRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.genomics.v1.ListBasesRequest)
    MergeFrom(*source);
  }
}

void ListBasesRequest::MergeFrom(const ListBasesRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.genomics.v1.ListBasesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.reference_id().size() > 0) {
    set_reference_id(from.reference_id());
  }
  if (from.page_token().size() > 0) {
    set_page_token(from.page_token());
  }
  if (from.start() != 0) {
    set_start(from.start());
  }
  if (from.end() != 0) {
    set_end(from.end());
  }
  if (from.page_size() != 0) {
    set_page_size(from.page_size());
  }
}

void ListBasesRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.genomics.v1.ListBasesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListBasesRequest::CopyFrom(const ListBasesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.genomics.v1.ListBasesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListBasesRequest::IsInitialized() const {
  return true;
}

void ListBasesRequest::Swap(ListBasesRequest* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    ListBasesRequest* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void ListBasesRequest::UnsafeArenaSwap(ListBasesRequest* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void ListBasesRequest::InternalSwap(ListBasesRequest* other) {
  using std::swap;
  reference_id_.Swap(&other->reference_id_);
  page_token_.Swap(&other->page_token_);
  swap(start_, other->start_);
  swap(end_, other->end_);
  swap(page_size_, other->page_size_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ListBasesRequest::GetMetadata() const {
  protobuf_google_2fgenomics_2fv1_2freferences_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fgenomics_2fv1_2freferences_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ListBasesResponse::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ListBasesResponse::kOffsetFieldNumber;
const int ListBasesResponse::kSequenceFieldNumber;
const int ListBasesResponse::kNextPageTokenFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ListBasesResponse::ListBasesResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_google_2fgenomics_2fv1_2freferences_2eproto::InitDefaultsListBasesResponse();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.genomics.v1.ListBasesResponse)
}
ListBasesResponse::ListBasesResponse(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::protobuf_google_2fgenomics_2fv1_2freferences_2eproto::InitDefaultsListBasesResponse();
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.genomics.v1.ListBasesResponse)
}
ListBasesResponse::ListBasesResponse(const ListBasesResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  sequence_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.sequence().size() > 0) {
    sequence_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sequence(),
      GetArenaNoVirtual());
  }
  next_page_token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.next_page_token().size() > 0) {
    next_page_token_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.next_page_token(),
      GetArenaNoVirtual());
  }
  offset_ = from.offset_;
  // @@protoc_insertion_point(copy_constructor:google.genomics.v1.ListBasesResponse)
}

void ListBasesResponse::SharedCtor() {
  sequence_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  next_page_token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  offset_ = GOOGLE_LONGLONG(0);
  _cached_size_ = 0;
}

ListBasesResponse::~ListBasesResponse() {
  // @@protoc_insertion_point(destructor:google.genomics.v1.ListBasesResponse)
  SharedDtor();
}

void ListBasesResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  sequence_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  next_page_token_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ListBasesResponse::ArenaDtor(void* object) {
  ListBasesResponse* _this = reinterpret_cast< ListBasesResponse* >(object);
  (void)_this;
}
void ListBasesResponse::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void ListBasesResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ListBasesResponse::descriptor() {
  ::protobuf_google_2fgenomics_2fv1_2freferences_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fgenomics_2fv1_2freferences_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ListBasesResponse& ListBasesResponse::default_instance() {
  ::protobuf_google_2fgenomics_2fv1_2freferences_2eproto::InitDefaultsListBasesResponse();
  return *internal_default_instance();
}

ListBasesResponse* ListBasesResponse::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<ListBasesResponse>(arena);
}

void ListBasesResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:google.genomics.v1.ListBasesResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sequence_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  next_page_token_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  offset_ = GOOGLE_LONGLONG(0);
  _internal_metadata_.Clear();
}

bool ListBasesResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.genomics.v1.ListBasesResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 offset = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &offset_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string sequence = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sequence()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->sequence().data(), static_cast<int>(this->sequence().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.genomics.v1.ListBasesResponse.sequence"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string next_page_token = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_next_page_token()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->next_page_token().data(), static_cast<int>(this->next_page_token().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.genomics.v1.ListBasesResponse.next_page_token"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.genomics.v1.ListBasesResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.genomics.v1.ListBasesResponse)
  return false;
#undef DO_
}

void ListBasesResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.genomics.v1.ListBasesResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 offset = 1;
  if (this->offset() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->offset(), output);
  }

  // string sequence = 2;
  if (this->sequence().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sequence().data(), static_cast<int>(this->sequence().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.ListBasesResponse.sequence");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->sequence(), output);
  }

  // string next_page_token = 3;
  if (this->next_page_token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->next_page_token().data(), static_cast<int>(this->next_page_token().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.ListBasesResponse.next_page_token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->next_page_token(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:google.genomics.v1.ListBasesResponse)
}

::google::protobuf::uint8* ListBasesResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.genomics.v1.ListBasesResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 offset = 1;
  if (this->offset() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->offset(), target);
  }

  // string sequence = 2;
  if (this->sequence().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sequence().data(), static_cast<int>(this->sequence().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.ListBasesResponse.sequence");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->sequence(), target);
  }

  // string next_page_token = 3;
  if (this->next_page_token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->next_page_token().data(), static_cast<int>(this->next_page_token().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.ListBasesResponse.next_page_token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->next_page_token(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.genomics.v1.ListBasesResponse)
  return target;
}

size_t ListBasesResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.genomics.v1.ListBasesResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string sequence = 2;
  if (this->sequence().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->sequence());
  }

  // string next_page_token = 3;
  if (this->next_page_token().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->next_page_token());
  }

  // int64 offset = 1;
  if (this->offset() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->offset());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ListBasesResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.genomics.v1.ListBasesResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ListBasesResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ListBasesResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.genomics.v1.ListBasesResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.genomics.v1.ListBasesResponse)
    MergeFrom(*source);
  }
}

void ListBasesResponse::MergeFrom(const ListBasesResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.genomics.v1.ListBasesResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.sequence().size() > 0) {
    set_sequence(from.sequence());
  }
  if (from.next_page_token().size() > 0) {
    set_next_page_token(from.next_page_token());
  }
  if (from.offset() != 0) {
    set_offset(from.offset());
  }
}

void ListBasesResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.genomics.v1.ListBasesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListBasesResponse::CopyFrom(const ListBasesResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.genomics.v1.ListBasesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListBasesResponse::IsInitialized() const {
  return true;
}

void ListBasesResponse::Swap(ListBasesResponse* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    ListBasesResponse* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void ListBasesResponse::UnsafeArenaSwap(ListBasesResponse* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void ListBasesResponse::InternalSwap(ListBasesResponse* other) {
  using std::swap;
  sequence_.Swap(&other->sequence_);
  next_page_token_.Swap(&other->next_page_token_);
  swap(offset_, other->offset_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ListBasesResponse::GetMetadata() const {
  protobuf_google_2fgenomics_2fv1_2freferences_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fgenomics_2fv1_2freferences_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace genomics
}  // namespace google

// @@protoc_insertion_point(global_scope)
