// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/cloud/support/v1alpha1/cloud_support.proto

#ifndef PROTOBUF_google_2fcloud_2fsupport_2fv1alpha1_2fcloud_5fsupport_2eproto__INCLUDED
#define PROTOBUF_google_2fcloud_2fsupport_2fv1alpha1_2fcloud_5fsupport_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "google/api/annotations.pb.h"
#include "google/cloud/support/common.pb.h"
#include <google/protobuf/empty.pb.h>
#include <google/protobuf/field_mask.pb.h>
// @@protoc_insertion_point(includes)

namespace protobuf_google_2fcloud_2fsupport_2fv1alpha1_2fcloud_5fsupport_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[12];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsGetSupportAccountRequestImpl();
void InitDefaultsGetSupportAccountRequest();
void InitDefaultsListSupportAccountsRequestImpl();
void InitDefaultsListSupportAccountsRequest();
void InitDefaultsListSupportAccountsResponseImpl();
void InitDefaultsListSupportAccountsResponse();
void InitDefaultsGetCaseRequestImpl();
void InitDefaultsGetCaseRequest();
void InitDefaultsListCasesRequestImpl();
void InitDefaultsListCasesRequest();
void InitDefaultsListCasesResponseImpl();
void InitDefaultsListCasesResponse();
void InitDefaultsListCommentsRequestImpl();
void InitDefaultsListCommentsRequest();
void InitDefaultsListCommentsResponseImpl();
void InitDefaultsListCommentsResponse();
void InitDefaultsCreateCaseRequestImpl();
void InitDefaultsCreateCaseRequest();
void InitDefaultsUpdateCaseRequestImpl();
void InitDefaultsUpdateCaseRequest();
void InitDefaultsCreateCommentRequestImpl();
void InitDefaultsCreateCommentRequest();
void InitDefaultsGetIssueTaxonomyRequestImpl();
void InitDefaultsGetIssueTaxonomyRequest();
inline void InitDefaults() {
  InitDefaultsGetSupportAccountRequest();
  InitDefaultsListSupportAccountsRequest();
  InitDefaultsListSupportAccountsResponse();
  InitDefaultsGetCaseRequest();
  InitDefaultsListCasesRequest();
  InitDefaultsListCasesResponse();
  InitDefaultsListCommentsRequest();
  InitDefaultsListCommentsResponse();
  InitDefaultsCreateCaseRequest();
  InitDefaultsUpdateCaseRequest();
  InitDefaultsCreateCommentRequest();
  InitDefaultsGetIssueTaxonomyRequest();
}
}  // namespace protobuf_google_2fcloud_2fsupport_2fv1alpha1_2fcloud_5fsupport_2eproto
namespace google {
namespace cloud {
namespace support {
namespace v1alpha1 {
class CreateCaseRequest;
class CreateCaseRequestDefaultTypeInternal;
extern CreateCaseRequestDefaultTypeInternal _CreateCaseRequest_default_instance_;
class CreateCommentRequest;
class CreateCommentRequestDefaultTypeInternal;
extern CreateCommentRequestDefaultTypeInternal _CreateCommentRequest_default_instance_;
class GetCaseRequest;
class GetCaseRequestDefaultTypeInternal;
extern GetCaseRequestDefaultTypeInternal _GetCaseRequest_default_instance_;
class GetIssueTaxonomyRequest;
class GetIssueTaxonomyRequestDefaultTypeInternal;
extern GetIssueTaxonomyRequestDefaultTypeInternal _GetIssueTaxonomyRequest_default_instance_;
class GetSupportAccountRequest;
class GetSupportAccountRequestDefaultTypeInternal;
extern GetSupportAccountRequestDefaultTypeInternal _GetSupportAccountRequest_default_instance_;
class ListCasesRequest;
class ListCasesRequestDefaultTypeInternal;
extern ListCasesRequestDefaultTypeInternal _ListCasesRequest_default_instance_;
class ListCasesResponse;
class ListCasesResponseDefaultTypeInternal;
extern ListCasesResponseDefaultTypeInternal _ListCasesResponse_default_instance_;
class ListCommentsRequest;
class ListCommentsRequestDefaultTypeInternal;
extern ListCommentsRequestDefaultTypeInternal _ListCommentsRequest_default_instance_;
class ListCommentsResponse;
class ListCommentsResponseDefaultTypeInternal;
extern ListCommentsResponseDefaultTypeInternal _ListCommentsResponse_default_instance_;
class ListSupportAccountsRequest;
class ListSupportAccountsRequestDefaultTypeInternal;
extern ListSupportAccountsRequestDefaultTypeInternal _ListSupportAccountsRequest_default_instance_;
class ListSupportAccountsResponse;
class ListSupportAccountsResponseDefaultTypeInternal;
extern ListSupportAccountsResponseDefaultTypeInternal _ListSupportAccountsResponse_default_instance_;
class UpdateCaseRequest;
class UpdateCaseRequestDefaultTypeInternal;
extern UpdateCaseRequestDefaultTypeInternal _UpdateCaseRequest_default_instance_;
}  // namespace v1alpha1
}  // namespace support
}  // namespace cloud
}  // namespace google
namespace google {
namespace cloud {
namespace support {
namespace v1alpha1 {

// ===================================================================

class GetSupportAccountRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.cloud.support.v1alpha1.GetSupportAccountRequest) */ {
 public:
  GetSupportAccountRequest();
  virtual ~GetSupportAccountRequest();

  GetSupportAccountRequest(const GetSupportAccountRequest& from);

  inline GetSupportAccountRequest& operator=(const GetSupportAccountRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetSupportAccountRequest(GetSupportAccountRequest&& from) noexcept
    : GetSupportAccountRequest() {
    *this = ::std::move(from);
  }

  inline GetSupportAccountRequest& operator=(GetSupportAccountRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetSupportAccountRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetSupportAccountRequest* internal_default_instance() {
    return reinterpret_cast<const GetSupportAccountRequest*>(
               &_GetSupportAccountRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(GetSupportAccountRequest* other);
  friend void swap(GetSupportAccountRequest& a, GetSupportAccountRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetSupportAccountRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  GetSupportAccountRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GetSupportAccountRequest& from);
  void MergeFrom(const GetSupportAccountRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GetSupportAccountRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:google.cloud.support.v1alpha1.GetSupportAccountRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fcloud_2fsupport_2fv1alpha1_2fcloud_5fsupport_2eproto::TableStruct;
  friend void ::protobuf_google_2fcloud_2fsupport_2fv1alpha1_2fcloud_5fsupport_2eproto::InitDefaultsGetSupportAccountRequestImpl();
};
// -------------------------------------------------------------------

class ListSupportAccountsRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.cloud.support.v1alpha1.ListSupportAccountsRequest) */ {
 public:
  ListSupportAccountsRequest();
  virtual ~ListSupportAccountsRequest();

  ListSupportAccountsRequest(const ListSupportAccountsRequest& from);

  inline ListSupportAccountsRequest& operator=(const ListSupportAccountsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ListSupportAccountsRequest(ListSupportAccountsRequest&& from) noexcept
    : ListSupportAccountsRequest() {
    *this = ::std::move(from);
  }

  inline ListSupportAccountsRequest& operator=(ListSupportAccountsRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ListSupportAccountsRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListSupportAccountsRequest* internal_default_instance() {
    return reinterpret_cast<const ListSupportAccountsRequest*>(
               &_ListSupportAccountsRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(ListSupportAccountsRequest* other);
  friend void swap(ListSupportAccountsRequest& a, ListSupportAccountsRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ListSupportAccountsRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  ListSupportAccountsRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ListSupportAccountsRequest& from);
  void MergeFrom(const ListSupportAccountsRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ListSupportAccountsRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string filter = 1;
  void clear_filter();
  static const int kFilterFieldNumber = 1;
  const ::std::string& filter() const;
  void set_filter(const ::std::string& value);
  #if LANG_CXX11
  void set_filter(::std::string&& value);
  #endif
  void set_filter(const char* value);
  void set_filter(const char* value, size_t size);
  ::std::string* mutable_filter();
  ::std::string* release_filter();
  void set_allocated_filter(::std::string* filter);

  // string page_token = 3;
  void clear_page_token();
  static const int kPageTokenFieldNumber = 3;
  const ::std::string& page_token() const;
  void set_page_token(const ::std::string& value);
  #if LANG_CXX11
  void set_page_token(::std::string&& value);
  #endif
  void set_page_token(const char* value);
  void set_page_token(const char* value, size_t size);
  ::std::string* mutable_page_token();
  ::std::string* release_page_token();
  void set_allocated_page_token(::std::string* page_token);

  // int64 page_size = 2;
  void clear_page_size();
  static const int kPageSizeFieldNumber = 2;
  ::google::protobuf::int64 page_size() const;
  void set_page_size(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:google.cloud.support.v1alpha1.ListSupportAccountsRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr filter_;
  ::google::protobuf::internal::ArenaStringPtr page_token_;
  ::google::protobuf::int64 page_size_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fcloud_2fsupport_2fv1alpha1_2fcloud_5fsupport_2eproto::TableStruct;
  friend void ::protobuf_google_2fcloud_2fsupport_2fv1alpha1_2fcloud_5fsupport_2eproto::InitDefaultsListSupportAccountsRequestImpl();
};
// -------------------------------------------------------------------

class ListSupportAccountsResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.cloud.support.v1alpha1.ListSupportAccountsResponse) */ {
 public:
  ListSupportAccountsResponse();
  virtual ~ListSupportAccountsResponse();

  ListSupportAccountsResponse(const ListSupportAccountsResponse& from);

  inline ListSupportAccountsResponse& operator=(const ListSupportAccountsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ListSupportAccountsResponse(ListSupportAccountsResponse&& from) noexcept
    : ListSupportAccountsResponse() {
    *this = ::std::move(from);
  }

  inline ListSupportAccountsResponse& operator=(ListSupportAccountsResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ListSupportAccountsResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListSupportAccountsResponse* internal_default_instance() {
    return reinterpret_cast<const ListSupportAccountsResponse*>(
               &_ListSupportAccountsResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(ListSupportAccountsResponse* other);
  friend void swap(ListSupportAccountsResponse& a, ListSupportAccountsResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ListSupportAccountsResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  ListSupportAccountsResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ListSupportAccountsResponse& from);
  void MergeFrom(const ListSupportAccountsResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ListSupportAccountsResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .google.cloud.support.common.SupportAccount accounts = 1;
  int accounts_size() const;
  void clear_accounts();
  static const int kAccountsFieldNumber = 1;
  const ::google::cloud::support::common::SupportAccount& accounts(int index) const;
  ::google::cloud::support::common::SupportAccount* mutable_accounts(int index);
  ::google::cloud::support::common::SupportAccount* add_accounts();
  ::google::protobuf::RepeatedPtrField< ::google::cloud::support::common::SupportAccount >*
      mutable_accounts();
  const ::google::protobuf::RepeatedPtrField< ::google::cloud::support::common::SupportAccount >&
      accounts() const;

  // string next_page_token = 2;
  void clear_next_page_token();
  static const int kNextPageTokenFieldNumber = 2;
  const ::std::string& next_page_token() const;
  void set_next_page_token(const ::std::string& value);
  #if LANG_CXX11
  void set_next_page_token(::std::string&& value);
  #endif
  void set_next_page_token(const char* value);
  void set_next_page_token(const char* value, size_t size);
  ::std::string* mutable_next_page_token();
  ::std::string* release_next_page_token();
  void set_allocated_next_page_token(::std::string* next_page_token);

  // @@protoc_insertion_point(class_scope:google.cloud.support.v1alpha1.ListSupportAccountsResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::google::cloud::support::common::SupportAccount > accounts_;
  ::google::protobuf::internal::ArenaStringPtr next_page_token_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fcloud_2fsupport_2fv1alpha1_2fcloud_5fsupport_2eproto::TableStruct;
  friend void ::protobuf_google_2fcloud_2fsupport_2fv1alpha1_2fcloud_5fsupport_2eproto::InitDefaultsListSupportAccountsResponseImpl();
};
// -------------------------------------------------------------------

class GetCaseRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.cloud.support.v1alpha1.GetCaseRequest) */ {
 public:
  GetCaseRequest();
  virtual ~GetCaseRequest();

  GetCaseRequest(const GetCaseRequest& from);

  inline GetCaseRequest& operator=(const GetCaseRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetCaseRequest(GetCaseRequest&& from) noexcept
    : GetCaseRequest() {
    *this = ::std::move(from);
  }

  inline GetCaseRequest& operator=(GetCaseRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetCaseRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetCaseRequest* internal_default_instance() {
    return reinterpret_cast<const GetCaseRequest*>(
               &_GetCaseRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(GetCaseRequest* other);
  friend void swap(GetCaseRequest& a, GetCaseRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetCaseRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  GetCaseRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GetCaseRequest& from);
  void MergeFrom(const GetCaseRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GetCaseRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:google.cloud.support.v1alpha1.GetCaseRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fcloud_2fsupport_2fv1alpha1_2fcloud_5fsupport_2eproto::TableStruct;
  friend void ::protobuf_google_2fcloud_2fsupport_2fv1alpha1_2fcloud_5fsupport_2eproto::InitDefaultsGetCaseRequestImpl();
};
// -------------------------------------------------------------------

class ListCasesRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.cloud.support.v1alpha1.ListCasesRequest) */ {
 public:
  ListCasesRequest();
  virtual ~ListCasesRequest();

  ListCasesRequest(const ListCasesRequest& from);

  inline ListCasesRequest& operator=(const ListCasesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ListCasesRequest(ListCasesRequest&& from) noexcept
    : ListCasesRequest() {
    *this = ::std::move(from);
  }

  inline ListCasesRequest& operator=(ListCasesRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ListCasesRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListCasesRequest* internal_default_instance() {
    return reinterpret_cast<const ListCasesRequest*>(
               &_ListCasesRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(ListCasesRequest* other);
  friend void swap(ListCasesRequest& a, ListCasesRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ListCasesRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  ListCasesRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ListCasesRequest& from);
  void MergeFrom(const ListCasesRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ListCasesRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // string filter = 2;
  void clear_filter();
  static const int kFilterFieldNumber = 2;
  const ::std::string& filter() const;
  void set_filter(const ::std::string& value);
  #if LANG_CXX11
  void set_filter(::std::string&& value);
  #endif
  void set_filter(const char* value);
  void set_filter(const char* value, size_t size);
  ::std::string* mutable_filter();
  ::std::string* release_filter();
  void set_allocated_filter(::std::string* filter);

  // string page_token = 4;
  void clear_page_token();
  static const int kPageTokenFieldNumber = 4;
  const ::std::string& page_token() const;
  void set_page_token(const ::std::string& value);
  #if LANG_CXX11
  void set_page_token(::std::string&& value);
  #endif
  void set_page_token(const char* value);
  void set_page_token(const char* value, size_t size);
  ::std::string* mutable_page_token();
  ::std::string* release_page_token();
  void set_allocated_page_token(::std::string* page_token);

  // int64 page_size = 3;
  void clear_page_size();
  static const int kPageSizeFieldNumber = 3;
  ::google::protobuf::int64 page_size() const;
  void set_page_size(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:google.cloud.support.v1alpha1.ListCasesRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr filter_;
  ::google::protobuf::internal::ArenaStringPtr page_token_;
  ::google::protobuf::int64 page_size_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fcloud_2fsupport_2fv1alpha1_2fcloud_5fsupport_2eproto::TableStruct;
  friend void ::protobuf_google_2fcloud_2fsupport_2fv1alpha1_2fcloud_5fsupport_2eproto::InitDefaultsListCasesRequestImpl();
};
// -------------------------------------------------------------------

class ListCasesResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.cloud.support.v1alpha1.ListCasesResponse) */ {
 public:
  ListCasesResponse();
  virtual ~ListCasesResponse();

  ListCasesResponse(const ListCasesResponse& from);

  inline ListCasesResponse& operator=(const ListCasesResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ListCasesResponse(ListCasesResponse&& from) noexcept
    : ListCasesResponse() {
    *this = ::std::move(from);
  }

  inline ListCasesResponse& operator=(ListCasesResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ListCasesResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListCasesResponse* internal_default_instance() {
    return reinterpret_cast<const ListCasesResponse*>(
               &_ListCasesResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    5;

  void Swap(ListCasesResponse* other);
  friend void swap(ListCasesResponse& a, ListCasesResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ListCasesResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  ListCasesResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ListCasesResponse& from);
  void MergeFrom(const ListCasesResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ListCasesResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .google.cloud.support.common.Case cases = 1;
  int cases_size() const;
  void clear_cases();
  static const int kCasesFieldNumber = 1;
  const ::google::cloud::support::common::Case& cases(int index) const;
  ::google::cloud::support::common::Case* mutable_cases(int index);
  ::google::cloud::support::common::Case* add_cases();
  ::google::protobuf::RepeatedPtrField< ::google::cloud::support::common::Case >*
      mutable_cases();
  const ::google::protobuf::RepeatedPtrField< ::google::cloud::support::common::Case >&
      cases() const;

  // string next_page_token = 2;
  void clear_next_page_token();
  static const int kNextPageTokenFieldNumber = 2;
  const ::std::string& next_page_token() const;
  void set_next_page_token(const ::std::string& value);
  #if LANG_CXX11
  void set_next_page_token(::std::string&& value);
  #endif
  void set_next_page_token(const char* value);
  void set_next_page_token(const char* value, size_t size);
  ::std::string* mutable_next_page_token();
  ::std::string* release_next_page_token();
  void set_allocated_next_page_token(::std::string* next_page_token);

  // @@protoc_insertion_point(class_scope:google.cloud.support.v1alpha1.ListCasesResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::google::cloud::support::common::Case > cases_;
  ::google::protobuf::internal::ArenaStringPtr next_page_token_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fcloud_2fsupport_2fv1alpha1_2fcloud_5fsupport_2eproto::TableStruct;
  friend void ::protobuf_google_2fcloud_2fsupport_2fv1alpha1_2fcloud_5fsupport_2eproto::InitDefaultsListCasesResponseImpl();
};
// -------------------------------------------------------------------

class ListCommentsRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.cloud.support.v1alpha1.ListCommentsRequest) */ {
 public:
  ListCommentsRequest();
  virtual ~ListCommentsRequest();

  ListCommentsRequest(const ListCommentsRequest& from);

  inline ListCommentsRequest& operator=(const ListCommentsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ListCommentsRequest(ListCommentsRequest&& from) noexcept
    : ListCommentsRequest() {
    *this = ::std::move(from);
  }

  inline ListCommentsRequest& operator=(ListCommentsRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ListCommentsRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListCommentsRequest* internal_default_instance() {
    return reinterpret_cast<const ListCommentsRequest*>(
               &_ListCommentsRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    6;

  void Swap(ListCommentsRequest* other);
  friend void swap(ListCommentsRequest& a, ListCommentsRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ListCommentsRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  ListCommentsRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ListCommentsRequest& from);
  void MergeFrom(const ListCommentsRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ListCommentsRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:google.cloud.support.v1alpha1.ListCommentsRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fcloud_2fsupport_2fv1alpha1_2fcloud_5fsupport_2eproto::TableStruct;
  friend void ::protobuf_google_2fcloud_2fsupport_2fv1alpha1_2fcloud_5fsupport_2eproto::InitDefaultsListCommentsRequestImpl();
};
// -------------------------------------------------------------------

class ListCommentsResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.cloud.support.v1alpha1.ListCommentsResponse) */ {
 public:
  ListCommentsResponse();
  virtual ~ListCommentsResponse();

  ListCommentsResponse(const ListCommentsResponse& from);

  inline ListCommentsResponse& operator=(const ListCommentsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ListCommentsResponse(ListCommentsResponse&& from) noexcept
    : ListCommentsResponse() {
    *this = ::std::move(from);
  }

  inline ListCommentsResponse& operator=(ListCommentsResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ListCommentsResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListCommentsResponse* internal_default_instance() {
    return reinterpret_cast<const ListCommentsResponse*>(
               &_ListCommentsResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    7;

  void Swap(ListCommentsResponse* other);
  friend void swap(ListCommentsResponse& a, ListCommentsResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ListCommentsResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  ListCommentsResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ListCommentsResponse& from);
  void MergeFrom(const ListCommentsResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ListCommentsResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .google.cloud.support.common.Comment comments = 1;
  int comments_size() const;
  void clear_comments();
  static const int kCommentsFieldNumber = 1;
  const ::google::cloud::support::common::Comment& comments(int index) const;
  ::google::cloud::support::common::Comment* mutable_comments(int index);
  ::google::cloud::support::common::Comment* add_comments();
  ::google::protobuf::RepeatedPtrField< ::google::cloud::support::common::Comment >*
      mutable_comments();
  const ::google::protobuf::RepeatedPtrField< ::google::cloud::support::common::Comment >&
      comments() const;

  // @@protoc_insertion_point(class_scope:google.cloud.support.v1alpha1.ListCommentsResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::google::cloud::support::common::Comment > comments_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fcloud_2fsupport_2fv1alpha1_2fcloud_5fsupport_2eproto::TableStruct;
  friend void ::protobuf_google_2fcloud_2fsupport_2fv1alpha1_2fcloud_5fsupport_2eproto::InitDefaultsListCommentsResponseImpl();
};
// -------------------------------------------------------------------

class CreateCaseRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.cloud.support.v1alpha1.CreateCaseRequest) */ {
 public:
  CreateCaseRequest();
  virtual ~CreateCaseRequest();

  CreateCaseRequest(const CreateCaseRequest& from);

  inline CreateCaseRequest& operator=(const CreateCaseRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CreateCaseRequest(CreateCaseRequest&& from) noexcept
    : CreateCaseRequest() {
    *this = ::std::move(from);
  }

  inline CreateCaseRequest& operator=(CreateCaseRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CreateCaseRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreateCaseRequest* internal_default_instance() {
    return reinterpret_cast<const CreateCaseRequest*>(
               &_CreateCaseRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    8;

  void Swap(CreateCaseRequest* other);
  friend void swap(CreateCaseRequest& a, CreateCaseRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CreateCaseRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  CreateCaseRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CreateCaseRequest& from);
  void MergeFrom(const CreateCaseRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CreateCaseRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string parent = 1;
  void clear_parent();
  static const int kParentFieldNumber = 1;
  const ::std::string& parent() const;
  void set_parent(const ::std::string& value);
  #if LANG_CXX11
  void set_parent(::std::string&& value);
  #endif
  void set_parent(const char* value);
  void set_parent(const char* value, size_t size);
  ::std::string* mutable_parent();
  ::std::string* release_parent();
  void set_allocated_parent(::std::string* parent);

  // .google.cloud.support.common.Case case = 2;
  bool has_case_() const;
  void clear_case_();
  static const int kCaseFieldNumber = 2;
  const ::google::cloud::support::common::Case& case_() const;
  ::google::cloud::support::common::Case* release_case_();
  ::google::cloud::support::common::Case* mutable_case_();
  void set_allocated_case_(::google::cloud::support::common::Case* case_);

  // @@protoc_insertion_point(class_scope:google.cloud.support.v1alpha1.CreateCaseRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr parent_;
  ::google::cloud::support::common::Case* case__;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fcloud_2fsupport_2fv1alpha1_2fcloud_5fsupport_2eproto::TableStruct;
  friend void ::protobuf_google_2fcloud_2fsupport_2fv1alpha1_2fcloud_5fsupport_2eproto::InitDefaultsCreateCaseRequestImpl();
};
// -------------------------------------------------------------------

class UpdateCaseRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.cloud.support.v1alpha1.UpdateCaseRequest) */ {
 public:
  UpdateCaseRequest();
  virtual ~UpdateCaseRequest();

  UpdateCaseRequest(const UpdateCaseRequest& from);

  inline UpdateCaseRequest& operator=(const UpdateCaseRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UpdateCaseRequest(UpdateCaseRequest&& from) noexcept
    : UpdateCaseRequest() {
    *this = ::std::move(from);
  }

  inline UpdateCaseRequest& operator=(UpdateCaseRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const UpdateCaseRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UpdateCaseRequest* internal_default_instance() {
    return reinterpret_cast<const UpdateCaseRequest*>(
               &_UpdateCaseRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    9;

  void Swap(UpdateCaseRequest* other);
  friend void swap(UpdateCaseRequest& a, UpdateCaseRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UpdateCaseRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  UpdateCaseRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const UpdateCaseRequest& from);
  void MergeFrom(const UpdateCaseRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(UpdateCaseRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.cloud.support.common.Case case = 1;
  bool has_case_() const;
  void clear_case_();
  static const int kCaseFieldNumber = 1;
  const ::google::cloud::support::common::Case& case_() const;
  ::google::cloud::support::common::Case* release_case_();
  ::google::cloud::support::common::Case* mutable_case_();
  void set_allocated_case_(::google::cloud::support::common::Case* case_);

  // .google.protobuf.FieldMask update_mask = 2;
  bool has_update_mask() const;
  void clear_update_mask();
  static const int kUpdateMaskFieldNumber = 2;
  const ::google::protobuf::FieldMask& update_mask() const;
  ::google::protobuf::FieldMask* release_update_mask();
  ::google::protobuf::FieldMask* mutable_update_mask();
  void set_allocated_update_mask(::google::protobuf::FieldMask* update_mask);

  // @@protoc_insertion_point(class_scope:google.cloud.support.v1alpha1.UpdateCaseRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::cloud::support::common::Case* case__;
  ::google::protobuf::FieldMask* update_mask_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fcloud_2fsupport_2fv1alpha1_2fcloud_5fsupport_2eproto::TableStruct;
  friend void ::protobuf_google_2fcloud_2fsupport_2fv1alpha1_2fcloud_5fsupport_2eproto::InitDefaultsUpdateCaseRequestImpl();
};
// -------------------------------------------------------------------

class CreateCommentRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.cloud.support.v1alpha1.CreateCommentRequest) */ {
 public:
  CreateCommentRequest();
  virtual ~CreateCommentRequest();

  CreateCommentRequest(const CreateCommentRequest& from);

  inline CreateCommentRequest& operator=(const CreateCommentRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CreateCommentRequest(CreateCommentRequest&& from) noexcept
    : CreateCommentRequest() {
    *this = ::std::move(from);
  }

  inline CreateCommentRequest& operator=(CreateCommentRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CreateCommentRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreateCommentRequest* internal_default_instance() {
    return reinterpret_cast<const CreateCommentRequest*>(
               &_CreateCommentRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    10;

  void Swap(CreateCommentRequest* other);
  friend void swap(CreateCommentRequest& a, CreateCommentRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CreateCommentRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  CreateCommentRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CreateCommentRequest& from);
  void MergeFrom(const CreateCommentRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CreateCommentRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // .google.cloud.support.common.Comment comment = 2;
  bool has_comment() const;
  void clear_comment();
  static const int kCommentFieldNumber = 2;
  const ::google::cloud::support::common::Comment& comment() const;
  ::google::cloud::support::common::Comment* release_comment();
  ::google::cloud::support::common::Comment* mutable_comment();
  void set_allocated_comment(::google::cloud::support::common::Comment* comment);

  // @@protoc_insertion_point(class_scope:google.cloud.support.v1alpha1.CreateCommentRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::cloud::support::common::Comment* comment_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fcloud_2fsupport_2fv1alpha1_2fcloud_5fsupport_2eproto::TableStruct;
  friend void ::protobuf_google_2fcloud_2fsupport_2fv1alpha1_2fcloud_5fsupport_2eproto::InitDefaultsCreateCommentRequestImpl();
};
// -------------------------------------------------------------------

class GetIssueTaxonomyRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.cloud.support.v1alpha1.GetIssueTaxonomyRequest) */ {
 public:
  GetIssueTaxonomyRequest();
  virtual ~GetIssueTaxonomyRequest();

  GetIssueTaxonomyRequest(const GetIssueTaxonomyRequest& from);

  inline GetIssueTaxonomyRequest& operator=(const GetIssueTaxonomyRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetIssueTaxonomyRequest(GetIssueTaxonomyRequest&& from) noexcept
    : GetIssueTaxonomyRequest() {
    *this = ::std::move(from);
  }

  inline GetIssueTaxonomyRequest& operator=(GetIssueTaxonomyRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetIssueTaxonomyRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetIssueTaxonomyRequest* internal_default_instance() {
    return reinterpret_cast<const GetIssueTaxonomyRequest*>(
               &_GetIssueTaxonomyRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    11;

  void Swap(GetIssueTaxonomyRequest* other);
  friend void swap(GetIssueTaxonomyRequest& a, GetIssueTaxonomyRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetIssueTaxonomyRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  GetIssueTaxonomyRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GetIssueTaxonomyRequest& from);
  void MergeFrom(const GetIssueTaxonomyRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GetIssueTaxonomyRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:google.cloud.support.v1alpha1.GetIssueTaxonomyRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fcloud_2fsupport_2fv1alpha1_2fcloud_5fsupport_2eproto::TableStruct;
  friend void ::protobuf_google_2fcloud_2fsupport_2fv1alpha1_2fcloud_5fsupport_2eproto::InitDefaultsGetIssueTaxonomyRequestImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// GetSupportAccountRequest

// string name = 1;
inline void GetSupportAccountRequest::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetSupportAccountRequest::name() const {
  // @@protoc_insertion_point(field_get:google.cloud.support.v1alpha1.GetSupportAccountRequest.name)
  return name_.GetNoArena();
}
inline void GetSupportAccountRequest::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.cloud.support.v1alpha1.GetSupportAccountRequest.name)
}
#if LANG_CXX11
inline void GetSupportAccountRequest::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.support.v1alpha1.GetSupportAccountRequest.name)
}
#endif
inline void GetSupportAccountRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.cloud.support.v1alpha1.GetSupportAccountRequest.name)
}
inline void GetSupportAccountRequest::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.cloud.support.v1alpha1.GetSupportAccountRequest.name)
}
inline ::std::string* GetSupportAccountRequest::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.support.v1alpha1.GetSupportAccountRequest.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetSupportAccountRequest::release_name() {
  // @@protoc_insertion_point(field_release:google.cloud.support.v1alpha1.GetSupportAccountRequest.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetSupportAccountRequest::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.support.v1alpha1.GetSupportAccountRequest.name)
}

// -------------------------------------------------------------------

// ListSupportAccountsRequest

// string filter = 1;
inline void ListSupportAccountsRequest::clear_filter() {
  filter_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ListSupportAccountsRequest::filter() const {
  // @@protoc_insertion_point(field_get:google.cloud.support.v1alpha1.ListSupportAccountsRequest.filter)
  return filter_.GetNoArena();
}
inline void ListSupportAccountsRequest::set_filter(const ::std::string& value) {
  
  filter_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.cloud.support.v1alpha1.ListSupportAccountsRequest.filter)
}
#if LANG_CXX11
inline void ListSupportAccountsRequest::set_filter(::std::string&& value) {
  
  filter_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.support.v1alpha1.ListSupportAccountsRequest.filter)
}
#endif
inline void ListSupportAccountsRequest::set_filter(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  filter_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.cloud.support.v1alpha1.ListSupportAccountsRequest.filter)
}
inline void ListSupportAccountsRequest::set_filter(const char* value, size_t size) {
  
  filter_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.cloud.support.v1alpha1.ListSupportAccountsRequest.filter)
}
inline ::std::string* ListSupportAccountsRequest::mutable_filter() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.support.v1alpha1.ListSupportAccountsRequest.filter)
  return filter_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ListSupportAccountsRequest::release_filter() {
  // @@protoc_insertion_point(field_release:google.cloud.support.v1alpha1.ListSupportAccountsRequest.filter)
  
  return filter_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ListSupportAccountsRequest::set_allocated_filter(::std::string* filter) {
  if (filter != NULL) {
    
  } else {
    
  }
  filter_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), filter);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.support.v1alpha1.ListSupportAccountsRequest.filter)
}

// int64 page_size = 2;
inline void ListSupportAccountsRequest::clear_page_size() {
  page_size_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 ListSupportAccountsRequest::page_size() const {
  // @@protoc_insertion_point(field_get:google.cloud.support.v1alpha1.ListSupportAccountsRequest.page_size)
  return page_size_;
}
inline void ListSupportAccountsRequest::set_page_size(::google::protobuf::int64 value) {
  
  page_size_ = value;
  // @@protoc_insertion_point(field_set:google.cloud.support.v1alpha1.ListSupportAccountsRequest.page_size)
}

// string page_token = 3;
inline void ListSupportAccountsRequest::clear_page_token() {
  page_token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ListSupportAccountsRequest::page_token() const {
  // @@protoc_insertion_point(field_get:google.cloud.support.v1alpha1.ListSupportAccountsRequest.page_token)
  return page_token_.GetNoArena();
}
inline void ListSupportAccountsRequest::set_page_token(const ::std::string& value) {
  
  page_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.cloud.support.v1alpha1.ListSupportAccountsRequest.page_token)
}
#if LANG_CXX11
inline void ListSupportAccountsRequest::set_page_token(::std::string&& value) {
  
  page_token_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.support.v1alpha1.ListSupportAccountsRequest.page_token)
}
#endif
inline void ListSupportAccountsRequest::set_page_token(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  page_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.cloud.support.v1alpha1.ListSupportAccountsRequest.page_token)
}
inline void ListSupportAccountsRequest::set_page_token(const char* value, size_t size) {
  
  page_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.cloud.support.v1alpha1.ListSupportAccountsRequest.page_token)
}
inline ::std::string* ListSupportAccountsRequest::mutable_page_token() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.support.v1alpha1.ListSupportAccountsRequest.page_token)
  return page_token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ListSupportAccountsRequest::release_page_token() {
  // @@protoc_insertion_point(field_release:google.cloud.support.v1alpha1.ListSupportAccountsRequest.page_token)
  
  return page_token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ListSupportAccountsRequest::set_allocated_page_token(::std::string* page_token) {
  if (page_token != NULL) {
    
  } else {
    
  }
  page_token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), page_token);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.support.v1alpha1.ListSupportAccountsRequest.page_token)
}

// -------------------------------------------------------------------

// ListSupportAccountsResponse

// repeated .google.cloud.support.common.SupportAccount accounts = 1;
inline int ListSupportAccountsResponse::accounts_size() const {
  return accounts_.size();
}
inline const ::google::cloud::support::common::SupportAccount& ListSupportAccountsResponse::accounts(int index) const {
  // @@protoc_insertion_point(field_get:google.cloud.support.v1alpha1.ListSupportAccountsResponse.accounts)
  return accounts_.Get(index);
}
inline ::google::cloud::support::common::SupportAccount* ListSupportAccountsResponse::mutable_accounts(int index) {
  // @@protoc_insertion_point(field_mutable:google.cloud.support.v1alpha1.ListSupportAccountsResponse.accounts)
  return accounts_.Mutable(index);
}
inline ::google::cloud::support::common::SupportAccount* ListSupportAccountsResponse::add_accounts() {
  // @@protoc_insertion_point(field_add:google.cloud.support.v1alpha1.ListSupportAccountsResponse.accounts)
  return accounts_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::google::cloud::support::common::SupportAccount >*
ListSupportAccountsResponse::mutable_accounts() {
  // @@protoc_insertion_point(field_mutable_list:google.cloud.support.v1alpha1.ListSupportAccountsResponse.accounts)
  return &accounts_;
}
inline const ::google::protobuf::RepeatedPtrField< ::google::cloud::support::common::SupportAccount >&
ListSupportAccountsResponse::accounts() const {
  // @@protoc_insertion_point(field_list:google.cloud.support.v1alpha1.ListSupportAccountsResponse.accounts)
  return accounts_;
}

// string next_page_token = 2;
inline void ListSupportAccountsResponse::clear_next_page_token() {
  next_page_token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ListSupportAccountsResponse::next_page_token() const {
  // @@protoc_insertion_point(field_get:google.cloud.support.v1alpha1.ListSupportAccountsResponse.next_page_token)
  return next_page_token_.GetNoArena();
}
inline void ListSupportAccountsResponse::set_next_page_token(const ::std::string& value) {
  
  next_page_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.cloud.support.v1alpha1.ListSupportAccountsResponse.next_page_token)
}
#if LANG_CXX11
inline void ListSupportAccountsResponse::set_next_page_token(::std::string&& value) {
  
  next_page_token_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.support.v1alpha1.ListSupportAccountsResponse.next_page_token)
}
#endif
inline void ListSupportAccountsResponse::set_next_page_token(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  next_page_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.cloud.support.v1alpha1.ListSupportAccountsResponse.next_page_token)
}
inline void ListSupportAccountsResponse::set_next_page_token(const char* value, size_t size) {
  
  next_page_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.cloud.support.v1alpha1.ListSupportAccountsResponse.next_page_token)
}
inline ::std::string* ListSupportAccountsResponse::mutable_next_page_token() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.support.v1alpha1.ListSupportAccountsResponse.next_page_token)
  return next_page_token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ListSupportAccountsResponse::release_next_page_token() {
  // @@protoc_insertion_point(field_release:google.cloud.support.v1alpha1.ListSupportAccountsResponse.next_page_token)
  
  return next_page_token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ListSupportAccountsResponse::set_allocated_next_page_token(::std::string* next_page_token) {
  if (next_page_token != NULL) {
    
  } else {
    
  }
  next_page_token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), next_page_token);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.support.v1alpha1.ListSupportAccountsResponse.next_page_token)
}

// -------------------------------------------------------------------

// GetCaseRequest

// string name = 1;
inline void GetCaseRequest::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetCaseRequest::name() const {
  // @@protoc_insertion_point(field_get:google.cloud.support.v1alpha1.GetCaseRequest.name)
  return name_.GetNoArena();
}
inline void GetCaseRequest::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.cloud.support.v1alpha1.GetCaseRequest.name)
}
#if LANG_CXX11
inline void GetCaseRequest::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.support.v1alpha1.GetCaseRequest.name)
}
#endif
inline void GetCaseRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.cloud.support.v1alpha1.GetCaseRequest.name)
}
inline void GetCaseRequest::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.cloud.support.v1alpha1.GetCaseRequest.name)
}
inline ::std::string* GetCaseRequest::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.support.v1alpha1.GetCaseRequest.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetCaseRequest::release_name() {
  // @@protoc_insertion_point(field_release:google.cloud.support.v1alpha1.GetCaseRequest.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetCaseRequest::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.support.v1alpha1.GetCaseRequest.name)
}

// -------------------------------------------------------------------

// ListCasesRequest

// string name = 1;
inline void ListCasesRequest::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ListCasesRequest::name() const {
  // @@protoc_insertion_point(field_get:google.cloud.support.v1alpha1.ListCasesRequest.name)
  return name_.GetNoArena();
}
inline void ListCasesRequest::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.cloud.support.v1alpha1.ListCasesRequest.name)
}
#if LANG_CXX11
inline void ListCasesRequest::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.support.v1alpha1.ListCasesRequest.name)
}
#endif
inline void ListCasesRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.cloud.support.v1alpha1.ListCasesRequest.name)
}
inline void ListCasesRequest::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.cloud.support.v1alpha1.ListCasesRequest.name)
}
inline ::std::string* ListCasesRequest::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.support.v1alpha1.ListCasesRequest.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ListCasesRequest::release_name() {
  // @@protoc_insertion_point(field_release:google.cloud.support.v1alpha1.ListCasesRequest.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ListCasesRequest::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.support.v1alpha1.ListCasesRequest.name)
}

// string filter = 2;
inline void ListCasesRequest::clear_filter() {
  filter_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ListCasesRequest::filter() const {
  // @@protoc_insertion_point(field_get:google.cloud.support.v1alpha1.ListCasesRequest.filter)
  return filter_.GetNoArena();
}
inline void ListCasesRequest::set_filter(const ::std::string& value) {
  
  filter_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.cloud.support.v1alpha1.ListCasesRequest.filter)
}
#if LANG_CXX11
inline void ListCasesRequest::set_filter(::std::string&& value) {
  
  filter_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.support.v1alpha1.ListCasesRequest.filter)
}
#endif
inline void ListCasesRequest::set_filter(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  filter_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.cloud.support.v1alpha1.ListCasesRequest.filter)
}
inline void ListCasesRequest::set_filter(const char* value, size_t size) {
  
  filter_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.cloud.support.v1alpha1.ListCasesRequest.filter)
}
inline ::std::string* ListCasesRequest::mutable_filter() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.support.v1alpha1.ListCasesRequest.filter)
  return filter_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ListCasesRequest::release_filter() {
  // @@protoc_insertion_point(field_release:google.cloud.support.v1alpha1.ListCasesRequest.filter)
  
  return filter_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ListCasesRequest::set_allocated_filter(::std::string* filter) {
  if (filter != NULL) {
    
  } else {
    
  }
  filter_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), filter);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.support.v1alpha1.ListCasesRequest.filter)
}

// int64 page_size = 3;
inline void ListCasesRequest::clear_page_size() {
  page_size_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 ListCasesRequest::page_size() const {
  // @@protoc_insertion_point(field_get:google.cloud.support.v1alpha1.ListCasesRequest.page_size)
  return page_size_;
}
inline void ListCasesRequest::set_page_size(::google::protobuf::int64 value) {
  
  page_size_ = value;
  // @@protoc_insertion_point(field_set:google.cloud.support.v1alpha1.ListCasesRequest.page_size)
}

// string page_token = 4;
inline void ListCasesRequest::clear_page_token() {
  page_token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ListCasesRequest::page_token() const {
  // @@protoc_insertion_point(field_get:google.cloud.support.v1alpha1.ListCasesRequest.page_token)
  return page_token_.GetNoArena();
}
inline void ListCasesRequest::set_page_token(const ::std::string& value) {
  
  page_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.cloud.support.v1alpha1.ListCasesRequest.page_token)
}
#if LANG_CXX11
inline void ListCasesRequest::set_page_token(::std::string&& value) {
  
  page_token_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.support.v1alpha1.ListCasesRequest.page_token)
}
#endif
inline void ListCasesRequest::set_page_token(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  page_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.cloud.support.v1alpha1.ListCasesRequest.page_token)
}
inline void ListCasesRequest::set_page_token(const char* value, size_t size) {
  
  page_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.cloud.support.v1alpha1.ListCasesRequest.page_token)
}
inline ::std::string* ListCasesRequest::mutable_page_token() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.support.v1alpha1.ListCasesRequest.page_token)
  return page_token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ListCasesRequest::release_page_token() {
  // @@protoc_insertion_point(field_release:google.cloud.support.v1alpha1.ListCasesRequest.page_token)
  
  return page_token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ListCasesRequest::set_allocated_page_token(::std::string* page_token) {
  if (page_token != NULL) {
    
  } else {
    
  }
  page_token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), page_token);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.support.v1alpha1.ListCasesRequest.page_token)
}

// -------------------------------------------------------------------

// ListCasesResponse

// repeated .google.cloud.support.common.Case cases = 1;
inline int ListCasesResponse::cases_size() const {
  return cases_.size();
}
inline const ::google::cloud::support::common::Case& ListCasesResponse::cases(int index) const {
  // @@protoc_insertion_point(field_get:google.cloud.support.v1alpha1.ListCasesResponse.cases)
  return cases_.Get(index);
}
inline ::google::cloud::support::common::Case* ListCasesResponse::mutable_cases(int index) {
  // @@protoc_insertion_point(field_mutable:google.cloud.support.v1alpha1.ListCasesResponse.cases)
  return cases_.Mutable(index);
}
inline ::google::cloud::support::common::Case* ListCasesResponse::add_cases() {
  // @@protoc_insertion_point(field_add:google.cloud.support.v1alpha1.ListCasesResponse.cases)
  return cases_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::google::cloud::support::common::Case >*
ListCasesResponse::mutable_cases() {
  // @@protoc_insertion_point(field_mutable_list:google.cloud.support.v1alpha1.ListCasesResponse.cases)
  return &cases_;
}
inline const ::google::protobuf::RepeatedPtrField< ::google::cloud::support::common::Case >&
ListCasesResponse::cases() const {
  // @@protoc_insertion_point(field_list:google.cloud.support.v1alpha1.ListCasesResponse.cases)
  return cases_;
}

// string next_page_token = 2;
inline void ListCasesResponse::clear_next_page_token() {
  next_page_token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ListCasesResponse::next_page_token() const {
  // @@protoc_insertion_point(field_get:google.cloud.support.v1alpha1.ListCasesResponse.next_page_token)
  return next_page_token_.GetNoArena();
}
inline void ListCasesResponse::set_next_page_token(const ::std::string& value) {
  
  next_page_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.cloud.support.v1alpha1.ListCasesResponse.next_page_token)
}
#if LANG_CXX11
inline void ListCasesResponse::set_next_page_token(::std::string&& value) {
  
  next_page_token_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.support.v1alpha1.ListCasesResponse.next_page_token)
}
#endif
inline void ListCasesResponse::set_next_page_token(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  next_page_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.cloud.support.v1alpha1.ListCasesResponse.next_page_token)
}
inline void ListCasesResponse::set_next_page_token(const char* value, size_t size) {
  
  next_page_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.cloud.support.v1alpha1.ListCasesResponse.next_page_token)
}
inline ::std::string* ListCasesResponse::mutable_next_page_token() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.support.v1alpha1.ListCasesResponse.next_page_token)
  return next_page_token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ListCasesResponse::release_next_page_token() {
  // @@protoc_insertion_point(field_release:google.cloud.support.v1alpha1.ListCasesResponse.next_page_token)
  
  return next_page_token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ListCasesResponse::set_allocated_next_page_token(::std::string* next_page_token) {
  if (next_page_token != NULL) {
    
  } else {
    
  }
  next_page_token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), next_page_token);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.support.v1alpha1.ListCasesResponse.next_page_token)
}

// -------------------------------------------------------------------

// ListCommentsRequest

// string name = 1;
inline void ListCommentsRequest::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ListCommentsRequest::name() const {
  // @@protoc_insertion_point(field_get:google.cloud.support.v1alpha1.ListCommentsRequest.name)
  return name_.GetNoArena();
}
inline void ListCommentsRequest::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.cloud.support.v1alpha1.ListCommentsRequest.name)
}
#if LANG_CXX11
inline void ListCommentsRequest::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.support.v1alpha1.ListCommentsRequest.name)
}
#endif
inline void ListCommentsRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.cloud.support.v1alpha1.ListCommentsRequest.name)
}
inline void ListCommentsRequest::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.cloud.support.v1alpha1.ListCommentsRequest.name)
}
inline ::std::string* ListCommentsRequest::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.support.v1alpha1.ListCommentsRequest.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ListCommentsRequest::release_name() {
  // @@protoc_insertion_point(field_release:google.cloud.support.v1alpha1.ListCommentsRequest.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ListCommentsRequest::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.support.v1alpha1.ListCommentsRequest.name)
}

// -------------------------------------------------------------------

// ListCommentsResponse

// repeated .google.cloud.support.common.Comment comments = 1;
inline int ListCommentsResponse::comments_size() const {
  return comments_.size();
}
inline const ::google::cloud::support::common::Comment& ListCommentsResponse::comments(int index) const {
  // @@protoc_insertion_point(field_get:google.cloud.support.v1alpha1.ListCommentsResponse.comments)
  return comments_.Get(index);
}
inline ::google::cloud::support::common::Comment* ListCommentsResponse::mutable_comments(int index) {
  // @@protoc_insertion_point(field_mutable:google.cloud.support.v1alpha1.ListCommentsResponse.comments)
  return comments_.Mutable(index);
}
inline ::google::cloud::support::common::Comment* ListCommentsResponse::add_comments() {
  // @@protoc_insertion_point(field_add:google.cloud.support.v1alpha1.ListCommentsResponse.comments)
  return comments_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::google::cloud::support::common::Comment >*
ListCommentsResponse::mutable_comments() {
  // @@protoc_insertion_point(field_mutable_list:google.cloud.support.v1alpha1.ListCommentsResponse.comments)
  return &comments_;
}
inline const ::google::protobuf::RepeatedPtrField< ::google::cloud::support::common::Comment >&
ListCommentsResponse::comments() const {
  // @@protoc_insertion_point(field_list:google.cloud.support.v1alpha1.ListCommentsResponse.comments)
  return comments_;
}

// -------------------------------------------------------------------

// CreateCaseRequest

// string parent = 1;
inline void CreateCaseRequest::clear_parent() {
  parent_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CreateCaseRequest::parent() const {
  // @@protoc_insertion_point(field_get:google.cloud.support.v1alpha1.CreateCaseRequest.parent)
  return parent_.GetNoArena();
}
inline void CreateCaseRequest::set_parent(const ::std::string& value) {
  
  parent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.cloud.support.v1alpha1.CreateCaseRequest.parent)
}
#if LANG_CXX11
inline void CreateCaseRequest::set_parent(::std::string&& value) {
  
  parent_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.support.v1alpha1.CreateCaseRequest.parent)
}
#endif
inline void CreateCaseRequest::set_parent(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  parent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.cloud.support.v1alpha1.CreateCaseRequest.parent)
}
inline void CreateCaseRequest::set_parent(const char* value, size_t size) {
  
  parent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.cloud.support.v1alpha1.CreateCaseRequest.parent)
}
inline ::std::string* CreateCaseRequest::mutable_parent() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.support.v1alpha1.CreateCaseRequest.parent)
  return parent_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CreateCaseRequest::release_parent() {
  // @@protoc_insertion_point(field_release:google.cloud.support.v1alpha1.CreateCaseRequest.parent)
  
  return parent_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CreateCaseRequest::set_allocated_parent(::std::string* parent) {
  if (parent != NULL) {
    
  } else {
    
  }
  parent_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), parent);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.support.v1alpha1.CreateCaseRequest.parent)
}

// .google.cloud.support.common.Case case = 2;
inline bool CreateCaseRequest::has_case_() const {
  return this != internal_default_instance() && case__ != NULL;
}
inline const ::google::cloud::support::common::Case& CreateCaseRequest::case_() const {
  const ::google::cloud::support::common::Case* p = case__;
  // @@protoc_insertion_point(field_get:google.cloud.support.v1alpha1.CreateCaseRequest.case)
  return p != NULL ? *p : *reinterpret_cast<const ::google::cloud::support::common::Case*>(
      &::google::cloud::support::common::_Case_default_instance_);
}
inline ::google::cloud::support::common::Case* CreateCaseRequest::release_case_() {
  // @@protoc_insertion_point(field_release:google.cloud.support.v1alpha1.CreateCaseRequest.case)
  
  ::google::cloud::support::common::Case* temp = case__;
  case__ = NULL;
  return temp;
}
inline ::google::cloud::support::common::Case* CreateCaseRequest::mutable_case_() {
  
  if (case__ == NULL) {
    case__ = new ::google::cloud::support::common::Case;
  }
  // @@protoc_insertion_point(field_mutable:google.cloud.support.v1alpha1.CreateCaseRequest.case)
  return case__;
}
inline void CreateCaseRequest::set_allocated_case_(::google::cloud::support::common::Case* case_) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(case__);
  }
  if (case_) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      case_ = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, case_, submessage_arena);
    }
    
  } else {
    
  }
  case__ = case_;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.support.v1alpha1.CreateCaseRequest.case)
}

// -------------------------------------------------------------------

// UpdateCaseRequest

// .google.cloud.support.common.Case case = 1;
inline bool UpdateCaseRequest::has_case_() const {
  return this != internal_default_instance() && case__ != NULL;
}
inline const ::google::cloud::support::common::Case& UpdateCaseRequest::case_() const {
  const ::google::cloud::support::common::Case* p = case__;
  // @@protoc_insertion_point(field_get:google.cloud.support.v1alpha1.UpdateCaseRequest.case)
  return p != NULL ? *p : *reinterpret_cast<const ::google::cloud::support::common::Case*>(
      &::google::cloud::support::common::_Case_default_instance_);
}
inline ::google::cloud::support::common::Case* UpdateCaseRequest::release_case_() {
  // @@protoc_insertion_point(field_release:google.cloud.support.v1alpha1.UpdateCaseRequest.case)
  
  ::google::cloud::support::common::Case* temp = case__;
  case__ = NULL;
  return temp;
}
inline ::google::cloud::support::common::Case* UpdateCaseRequest::mutable_case_() {
  
  if (case__ == NULL) {
    case__ = new ::google::cloud::support::common::Case;
  }
  // @@protoc_insertion_point(field_mutable:google.cloud.support.v1alpha1.UpdateCaseRequest.case)
  return case__;
}
inline void UpdateCaseRequest::set_allocated_case_(::google::cloud::support::common::Case* case_) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(case__);
  }
  if (case_) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      case_ = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, case_, submessage_arena);
    }
    
  } else {
    
  }
  case__ = case_;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.support.v1alpha1.UpdateCaseRequest.case)
}

// .google.protobuf.FieldMask update_mask = 2;
inline bool UpdateCaseRequest::has_update_mask() const {
  return this != internal_default_instance() && update_mask_ != NULL;
}
inline const ::google::protobuf::FieldMask& UpdateCaseRequest::update_mask() const {
  const ::google::protobuf::FieldMask* p = update_mask_;
  // @@protoc_insertion_point(field_get:google.cloud.support.v1alpha1.UpdateCaseRequest.update_mask)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::FieldMask*>(
      &::google::protobuf::_FieldMask_default_instance_);
}
inline ::google::protobuf::FieldMask* UpdateCaseRequest::release_update_mask() {
  // @@protoc_insertion_point(field_release:google.cloud.support.v1alpha1.UpdateCaseRequest.update_mask)
  
  ::google::protobuf::FieldMask* temp = update_mask_;
  update_mask_ = NULL;
  return temp;
}
inline ::google::protobuf::FieldMask* UpdateCaseRequest::mutable_update_mask() {
  
  if (update_mask_ == NULL) {
    update_mask_ = new ::google::protobuf::FieldMask;
  }
  // @@protoc_insertion_point(field_mutable:google.cloud.support.v1alpha1.UpdateCaseRequest.update_mask)
  return update_mask_;
}
inline void UpdateCaseRequest::set_allocated_update_mask(::google::protobuf::FieldMask* update_mask) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(update_mask_);
  }
  if (update_mask) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      update_mask = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, update_mask, submessage_arena);
    }
    
  } else {
    
  }
  update_mask_ = update_mask;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.support.v1alpha1.UpdateCaseRequest.update_mask)
}

// -------------------------------------------------------------------

// CreateCommentRequest

// string name = 1;
inline void CreateCommentRequest::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CreateCommentRequest::name() const {
  // @@protoc_insertion_point(field_get:google.cloud.support.v1alpha1.CreateCommentRequest.name)
  return name_.GetNoArena();
}
inline void CreateCommentRequest::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.cloud.support.v1alpha1.CreateCommentRequest.name)
}
#if LANG_CXX11
inline void CreateCommentRequest::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.support.v1alpha1.CreateCommentRequest.name)
}
#endif
inline void CreateCommentRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.cloud.support.v1alpha1.CreateCommentRequest.name)
}
inline void CreateCommentRequest::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.cloud.support.v1alpha1.CreateCommentRequest.name)
}
inline ::std::string* CreateCommentRequest::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.support.v1alpha1.CreateCommentRequest.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CreateCommentRequest::release_name() {
  // @@protoc_insertion_point(field_release:google.cloud.support.v1alpha1.CreateCommentRequest.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CreateCommentRequest::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.support.v1alpha1.CreateCommentRequest.name)
}

// .google.cloud.support.common.Comment comment = 2;
inline bool CreateCommentRequest::has_comment() const {
  return this != internal_default_instance() && comment_ != NULL;
}
inline const ::google::cloud::support::common::Comment& CreateCommentRequest::comment() const {
  const ::google::cloud::support::common::Comment* p = comment_;
  // @@protoc_insertion_point(field_get:google.cloud.support.v1alpha1.CreateCommentRequest.comment)
  return p != NULL ? *p : *reinterpret_cast<const ::google::cloud::support::common::Comment*>(
      &::google::cloud::support::common::_Comment_default_instance_);
}
inline ::google::cloud::support::common::Comment* CreateCommentRequest::release_comment() {
  // @@protoc_insertion_point(field_release:google.cloud.support.v1alpha1.CreateCommentRequest.comment)
  
  ::google::cloud::support::common::Comment* temp = comment_;
  comment_ = NULL;
  return temp;
}
inline ::google::cloud::support::common::Comment* CreateCommentRequest::mutable_comment() {
  
  if (comment_ == NULL) {
    comment_ = new ::google::cloud::support::common::Comment;
  }
  // @@protoc_insertion_point(field_mutable:google.cloud.support.v1alpha1.CreateCommentRequest.comment)
  return comment_;
}
inline void CreateCommentRequest::set_allocated_comment(::google::cloud::support::common::Comment* comment) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(comment_);
  }
  if (comment) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      comment = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, comment, submessage_arena);
    }
    
  } else {
    
  }
  comment_ = comment;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.support.v1alpha1.CreateCommentRequest.comment)
}

// -------------------------------------------------------------------

// GetIssueTaxonomyRequest

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1alpha1
}  // namespace support
}  // namespace cloud
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_google_2fcloud_2fsupport_2fv1alpha1_2fcloud_5fsupport_2eproto__INCLUDED
