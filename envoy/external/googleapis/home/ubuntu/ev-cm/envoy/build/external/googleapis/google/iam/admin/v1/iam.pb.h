// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/iam/admin/v1/iam.proto

#ifndef PROTOBUF_google_2fiam_2fadmin_2fv1_2fiam_2eproto__INCLUDED
#define PROTOBUF_google_2fiam_2fadmin_2fv1_2fiam_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "google/api/annotations.pb.h"
#include "google/iam/v1/iam_policy.pb.h"
#include "google/iam/v1/policy.pb.h"
#include <google/protobuf/empty.pb.h>
#include <google/protobuf/field_mask.pb.h>
#include <google/protobuf/timestamp.pb.h>
// @@protoc_insertion_point(includes)

namespace protobuf_google_2fiam_2fadmin_2fv1_2fiam_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[29];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsServiceAccountImpl();
void InitDefaultsServiceAccount();
void InitDefaultsCreateServiceAccountRequestImpl();
void InitDefaultsCreateServiceAccountRequest();
void InitDefaultsListServiceAccountsRequestImpl();
void InitDefaultsListServiceAccountsRequest();
void InitDefaultsListServiceAccountsResponseImpl();
void InitDefaultsListServiceAccountsResponse();
void InitDefaultsGetServiceAccountRequestImpl();
void InitDefaultsGetServiceAccountRequest();
void InitDefaultsDeleteServiceAccountRequestImpl();
void InitDefaultsDeleteServiceAccountRequest();
void InitDefaultsListServiceAccountKeysRequestImpl();
void InitDefaultsListServiceAccountKeysRequest();
void InitDefaultsListServiceAccountKeysResponseImpl();
void InitDefaultsListServiceAccountKeysResponse();
void InitDefaultsGetServiceAccountKeyRequestImpl();
void InitDefaultsGetServiceAccountKeyRequest();
void InitDefaultsServiceAccountKeyImpl();
void InitDefaultsServiceAccountKey();
void InitDefaultsCreateServiceAccountKeyRequestImpl();
void InitDefaultsCreateServiceAccountKeyRequest();
void InitDefaultsDeleteServiceAccountKeyRequestImpl();
void InitDefaultsDeleteServiceAccountKeyRequest();
void InitDefaultsSignBlobRequestImpl();
void InitDefaultsSignBlobRequest();
void InitDefaultsSignBlobResponseImpl();
void InitDefaultsSignBlobResponse();
void InitDefaultsSignJwtRequestImpl();
void InitDefaultsSignJwtRequest();
void InitDefaultsSignJwtResponseImpl();
void InitDefaultsSignJwtResponse();
void InitDefaultsRoleImpl();
void InitDefaultsRole();
void InitDefaultsQueryGrantableRolesRequestImpl();
void InitDefaultsQueryGrantableRolesRequest();
void InitDefaultsQueryGrantableRolesResponseImpl();
void InitDefaultsQueryGrantableRolesResponse();
void InitDefaultsListRolesRequestImpl();
void InitDefaultsListRolesRequest();
void InitDefaultsListRolesResponseImpl();
void InitDefaultsListRolesResponse();
void InitDefaultsGetRoleRequestImpl();
void InitDefaultsGetRoleRequest();
void InitDefaultsCreateRoleRequestImpl();
void InitDefaultsCreateRoleRequest();
void InitDefaultsUpdateRoleRequestImpl();
void InitDefaultsUpdateRoleRequest();
void InitDefaultsDeleteRoleRequestImpl();
void InitDefaultsDeleteRoleRequest();
void InitDefaultsUndeleteRoleRequestImpl();
void InitDefaultsUndeleteRoleRequest();
void InitDefaultsPermissionImpl();
void InitDefaultsPermission();
void InitDefaultsQueryTestablePermissionsRequestImpl();
void InitDefaultsQueryTestablePermissionsRequest();
void InitDefaultsQueryTestablePermissionsResponseImpl();
void InitDefaultsQueryTestablePermissionsResponse();
inline void InitDefaults() {
  InitDefaultsServiceAccount();
  InitDefaultsCreateServiceAccountRequest();
  InitDefaultsListServiceAccountsRequest();
  InitDefaultsListServiceAccountsResponse();
  InitDefaultsGetServiceAccountRequest();
  InitDefaultsDeleteServiceAccountRequest();
  InitDefaultsListServiceAccountKeysRequest();
  InitDefaultsListServiceAccountKeysResponse();
  InitDefaultsGetServiceAccountKeyRequest();
  InitDefaultsServiceAccountKey();
  InitDefaultsCreateServiceAccountKeyRequest();
  InitDefaultsDeleteServiceAccountKeyRequest();
  InitDefaultsSignBlobRequest();
  InitDefaultsSignBlobResponse();
  InitDefaultsSignJwtRequest();
  InitDefaultsSignJwtResponse();
  InitDefaultsRole();
  InitDefaultsQueryGrantableRolesRequest();
  InitDefaultsQueryGrantableRolesResponse();
  InitDefaultsListRolesRequest();
  InitDefaultsListRolesResponse();
  InitDefaultsGetRoleRequest();
  InitDefaultsCreateRoleRequest();
  InitDefaultsUpdateRoleRequest();
  InitDefaultsDeleteRoleRequest();
  InitDefaultsUndeleteRoleRequest();
  InitDefaultsPermission();
  InitDefaultsQueryTestablePermissionsRequest();
  InitDefaultsQueryTestablePermissionsResponse();
}
}  // namespace protobuf_google_2fiam_2fadmin_2fv1_2fiam_2eproto
namespace google {
namespace iam {
namespace admin {
namespace v1 {
class CreateRoleRequest;
class CreateRoleRequestDefaultTypeInternal;
extern CreateRoleRequestDefaultTypeInternal _CreateRoleRequest_default_instance_;
class CreateServiceAccountKeyRequest;
class CreateServiceAccountKeyRequestDefaultTypeInternal;
extern CreateServiceAccountKeyRequestDefaultTypeInternal _CreateServiceAccountKeyRequest_default_instance_;
class CreateServiceAccountRequest;
class CreateServiceAccountRequestDefaultTypeInternal;
extern CreateServiceAccountRequestDefaultTypeInternal _CreateServiceAccountRequest_default_instance_;
class DeleteRoleRequest;
class DeleteRoleRequestDefaultTypeInternal;
extern DeleteRoleRequestDefaultTypeInternal _DeleteRoleRequest_default_instance_;
class DeleteServiceAccountKeyRequest;
class DeleteServiceAccountKeyRequestDefaultTypeInternal;
extern DeleteServiceAccountKeyRequestDefaultTypeInternal _DeleteServiceAccountKeyRequest_default_instance_;
class DeleteServiceAccountRequest;
class DeleteServiceAccountRequestDefaultTypeInternal;
extern DeleteServiceAccountRequestDefaultTypeInternal _DeleteServiceAccountRequest_default_instance_;
class GetRoleRequest;
class GetRoleRequestDefaultTypeInternal;
extern GetRoleRequestDefaultTypeInternal _GetRoleRequest_default_instance_;
class GetServiceAccountKeyRequest;
class GetServiceAccountKeyRequestDefaultTypeInternal;
extern GetServiceAccountKeyRequestDefaultTypeInternal _GetServiceAccountKeyRequest_default_instance_;
class GetServiceAccountRequest;
class GetServiceAccountRequestDefaultTypeInternal;
extern GetServiceAccountRequestDefaultTypeInternal _GetServiceAccountRequest_default_instance_;
class ListRolesRequest;
class ListRolesRequestDefaultTypeInternal;
extern ListRolesRequestDefaultTypeInternal _ListRolesRequest_default_instance_;
class ListRolesResponse;
class ListRolesResponseDefaultTypeInternal;
extern ListRolesResponseDefaultTypeInternal _ListRolesResponse_default_instance_;
class ListServiceAccountKeysRequest;
class ListServiceAccountKeysRequestDefaultTypeInternal;
extern ListServiceAccountKeysRequestDefaultTypeInternal _ListServiceAccountKeysRequest_default_instance_;
class ListServiceAccountKeysResponse;
class ListServiceAccountKeysResponseDefaultTypeInternal;
extern ListServiceAccountKeysResponseDefaultTypeInternal _ListServiceAccountKeysResponse_default_instance_;
class ListServiceAccountsRequest;
class ListServiceAccountsRequestDefaultTypeInternal;
extern ListServiceAccountsRequestDefaultTypeInternal _ListServiceAccountsRequest_default_instance_;
class ListServiceAccountsResponse;
class ListServiceAccountsResponseDefaultTypeInternal;
extern ListServiceAccountsResponseDefaultTypeInternal _ListServiceAccountsResponse_default_instance_;
class Permission;
class PermissionDefaultTypeInternal;
extern PermissionDefaultTypeInternal _Permission_default_instance_;
class QueryGrantableRolesRequest;
class QueryGrantableRolesRequestDefaultTypeInternal;
extern QueryGrantableRolesRequestDefaultTypeInternal _QueryGrantableRolesRequest_default_instance_;
class QueryGrantableRolesResponse;
class QueryGrantableRolesResponseDefaultTypeInternal;
extern QueryGrantableRolesResponseDefaultTypeInternal _QueryGrantableRolesResponse_default_instance_;
class QueryTestablePermissionsRequest;
class QueryTestablePermissionsRequestDefaultTypeInternal;
extern QueryTestablePermissionsRequestDefaultTypeInternal _QueryTestablePermissionsRequest_default_instance_;
class QueryTestablePermissionsResponse;
class QueryTestablePermissionsResponseDefaultTypeInternal;
extern QueryTestablePermissionsResponseDefaultTypeInternal _QueryTestablePermissionsResponse_default_instance_;
class Role;
class RoleDefaultTypeInternal;
extern RoleDefaultTypeInternal _Role_default_instance_;
class ServiceAccount;
class ServiceAccountDefaultTypeInternal;
extern ServiceAccountDefaultTypeInternal _ServiceAccount_default_instance_;
class ServiceAccountKey;
class ServiceAccountKeyDefaultTypeInternal;
extern ServiceAccountKeyDefaultTypeInternal _ServiceAccountKey_default_instance_;
class SignBlobRequest;
class SignBlobRequestDefaultTypeInternal;
extern SignBlobRequestDefaultTypeInternal _SignBlobRequest_default_instance_;
class SignBlobResponse;
class SignBlobResponseDefaultTypeInternal;
extern SignBlobResponseDefaultTypeInternal _SignBlobResponse_default_instance_;
class SignJwtRequest;
class SignJwtRequestDefaultTypeInternal;
extern SignJwtRequestDefaultTypeInternal _SignJwtRequest_default_instance_;
class SignJwtResponse;
class SignJwtResponseDefaultTypeInternal;
extern SignJwtResponseDefaultTypeInternal _SignJwtResponse_default_instance_;
class UndeleteRoleRequest;
class UndeleteRoleRequestDefaultTypeInternal;
extern UndeleteRoleRequestDefaultTypeInternal _UndeleteRoleRequest_default_instance_;
class UpdateRoleRequest;
class UpdateRoleRequestDefaultTypeInternal;
extern UpdateRoleRequestDefaultTypeInternal _UpdateRoleRequest_default_instance_;
}  // namespace v1
}  // namespace admin
}  // namespace iam
}  // namespace google
namespace google {
namespace iam {
namespace admin {
namespace v1 {

enum ListServiceAccountKeysRequest_KeyType {
  ListServiceAccountKeysRequest_KeyType_KEY_TYPE_UNSPECIFIED = 0,
  ListServiceAccountKeysRequest_KeyType_USER_MANAGED = 1,
  ListServiceAccountKeysRequest_KeyType_SYSTEM_MANAGED = 2,
  ListServiceAccountKeysRequest_KeyType_ListServiceAccountKeysRequest_KeyType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  ListServiceAccountKeysRequest_KeyType_ListServiceAccountKeysRequest_KeyType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool ListServiceAccountKeysRequest_KeyType_IsValid(int value);
const ListServiceAccountKeysRequest_KeyType ListServiceAccountKeysRequest_KeyType_KeyType_MIN = ListServiceAccountKeysRequest_KeyType_KEY_TYPE_UNSPECIFIED;
const ListServiceAccountKeysRequest_KeyType ListServiceAccountKeysRequest_KeyType_KeyType_MAX = ListServiceAccountKeysRequest_KeyType_SYSTEM_MANAGED;
const int ListServiceAccountKeysRequest_KeyType_KeyType_ARRAYSIZE = ListServiceAccountKeysRequest_KeyType_KeyType_MAX + 1;

const ::google::protobuf::EnumDescriptor* ListServiceAccountKeysRequest_KeyType_descriptor();
inline const ::std::string& ListServiceAccountKeysRequest_KeyType_Name(ListServiceAccountKeysRequest_KeyType value) {
  return ::google::protobuf::internal::NameOfEnum(
    ListServiceAccountKeysRequest_KeyType_descriptor(), value);
}
inline bool ListServiceAccountKeysRequest_KeyType_Parse(
    const ::std::string& name, ListServiceAccountKeysRequest_KeyType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ListServiceAccountKeysRequest_KeyType>(
    ListServiceAccountKeysRequest_KeyType_descriptor(), name, value);
}
enum Role_RoleLaunchStage {
  Role_RoleLaunchStage_ALPHA = 0,
  Role_RoleLaunchStage_BETA = 1,
  Role_RoleLaunchStage_GA = 2,
  Role_RoleLaunchStage_DEPRECATED = 4,
  Role_RoleLaunchStage_DISABLED = 5,
  Role_RoleLaunchStage_EAP = 6,
  Role_RoleLaunchStage_Role_RoleLaunchStage_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  Role_RoleLaunchStage_Role_RoleLaunchStage_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool Role_RoleLaunchStage_IsValid(int value);
const Role_RoleLaunchStage Role_RoleLaunchStage_RoleLaunchStage_MIN = Role_RoleLaunchStage_ALPHA;
const Role_RoleLaunchStage Role_RoleLaunchStage_RoleLaunchStage_MAX = Role_RoleLaunchStage_EAP;
const int Role_RoleLaunchStage_RoleLaunchStage_ARRAYSIZE = Role_RoleLaunchStage_RoleLaunchStage_MAX + 1;

const ::google::protobuf::EnumDescriptor* Role_RoleLaunchStage_descriptor();
inline const ::std::string& Role_RoleLaunchStage_Name(Role_RoleLaunchStage value) {
  return ::google::protobuf::internal::NameOfEnum(
    Role_RoleLaunchStage_descriptor(), value);
}
inline bool Role_RoleLaunchStage_Parse(
    const ::std::string& name, Role_RoleLaunchStage* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Role_RoleLaunchStage>(
    Role_RoleLaunchStage_descriptor(), name, value);
}
enum Permission_PermissionLaunchStage {
  Permission_PermissionLaunchStage_ALPHA = 0,
  Permission_PermissionLaunchStage_BETA = 1,
  Permission_PermissionLaunchStage_GA = 2,
  Permission_PermissionLaunchStage_DEPRECATED = 3,
  Permission_PermissionLaunchStage_Permission_PermissionLaunchStage_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  Permission_PermissionLaunchStage_Permission_PermissionLaunchStage_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool Permission_PermissionLaunchStage_IsValid(int value);
const Permission_PermissionLaunchStage Permission_PermissionLaunchStage_PermissionLaunchStage_MIN = Permission_PermissionLaunchStage_ALPHA;
const Permission_PermissionLaunchStage Permission_PermissionLaunchStage_PermissionLaunchStage_MAX = Permission_PermissionLaunchStage_DEPRECATED;
const int Permission_PermissionLaunchStage_PermissionLaunchStage_ARRAYSIZE = Permission_PermissionLaunchStage_PermissionLaunchStage_MAX + 1;

const ::google::protobuf::EnumDescriptor* Permission_PermissionLaunchStage_descriptor();
inline const ::std::string& Permission_PermissionLaunchStage_Name(Permission_PermissionLaunchStage value) {
  return ::google::protobuf::internal::NameOfEnum(
    Permission_PermissionLaunchStage_descriptor(), value);
}
inline bool Permission_PermissionLaunchStage_Parse(
    const ::std::string& name, Permission_PermissionLaunchStage* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Permission_PermissionLaunchStage>(
    Permission_PermissionLaunchStage_descriptor(), name, value);
}
enum Permission_CustomRolesSupportLevel {
  Permission_CustomRolesSupportLevel_SUPPORTED = 0,
  Permission_CustomRolesSupportLevel_TESTING = 1,
  Permission_CustomRolesSupportLevel_NOT_SUPPORTED = 2,
  Permission_CustomRolesSupportLevel_Permission_CustomRolesSupportLevel_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  Permission_CustomRolesSupportLevel_Permission_CustomRolesSupportLevel_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool Permission_CustomRolesSupportLevel_IsValid(int value);
const Permission_CustomRolesSupportLevel Permission_CustomRolesSupportLevel_CustomRolesSupportLevel_MIN = Permission_CustomRolesSupportLevel_SUPPORTED;
const Permission_CustomRolesSupportLevel Permission_CustomRolesSupportLevel_CustomRolesSupportLevel_MAX = Permission_CustomRolesSupportLevel_NOT_SUPPORTED;
const int Permission_CustomRolesSupportLevel_CustomRolesSupportLevel_ARRAYSIZE = Permission_CustomRolesSupportLevel_CustomRolesSupportLevel_MAX + 1;

const ::google::protobuf::EnumDescriptor* Permission_CustomRolesSupportLevel_descriptor();
inline const ::std::string& Permission_CustomRolesSupportLevel_Name(Permission_CustomRolesSupportLevel value) {
  return ::google::protobuf::internal::NameOfEnum(
    Permission_CustomRolesSupportLevel_descriptor(), value);
}
inline bool Permission_CustomRolesSupportLevel_Parse(
    const ::std::string& name, Permission_CustomRolesSupportLevel* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Permission_CustomRolesSupportLevel>(
    Permission_CustomRolesSupportLevel_descriptor(), name, value);
}
enum ServiceAccountKeyAlgorithm {
  KEY_ALG_UNSPECIFIED = 0,
  KEY_ALG_RSA_1024 = 1,
  KEY_ALG_RSA_2048 = 2,
  ServiceAccountKeyAlgorithm_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  ServiceAccountKeyAlgorithm_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool ServiceAccountKeyAlgorithm_IsValid(int value);
const ServiceAccountKeyAlgorithm ServiceAccountKeyAlgorithm_MIN = KEY_ALG_UNSPECIFIED;
const ServiceAccountKeyAlgorithm ServiceAccountKeyAlgorithm_MAX = KEY_ALG_RSA_2048;
const int ServiceAccountKeyAlgorithm_ARRAYSIZE = ServiceAccountKeyAlgorithm_MAX + 1;

const ::google::protobuf::EnumDescriptor* ServiceAccountKeyAlgorithm_descriptor();
inline const ::std::string& ServiceAccountKeyAlgorithm_Name(ServiceAccountKeyAlgorithm value) {
  return ::google::protobuf::internal::NameOfEnum(
    ServiceAccountKeyAlgorithm_descriptor(), value);
}
inline bool ServiceAccountKeyAlgorithm_Parse(
    const ::std::string& name, ServiceAccountKeyAlgorithm* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ServiceAccountKeyAlgorithm>(
    ServiceAccountKeyAlgorithm_descriptor(), name, value);
}
enum ServiceAccountPrivateKeyType {
  TYPE_UNSPECIFIED = 0,
  TYPE_PKCS12_FILE = 1,
  TYPE_GOOGLE_CREDENTIALS_FILE = 2,
  ServiceAccountPrivateKeyType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  ServiceAccountPrivateKeyType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool ServiceAccountPrivateKeyType_IsValid(int value);
const ServiceAccountPrivateKeyType ServiceAccountPrivateKeyType_MIN = TYPE_UNSPECIFIED;
const ServiceAccountPrivateKeyType ServiceAccountPrivateKeyType_MAX = TYPE_GOOGLE_CREDENTIALS_FILE;
const int ServiceAccountPrivateKeyType_ARRAYSIZE = ServiceAccountPrivateKeyType_MAX + 1;

const ::google::protobuf::EnumDescriptor* ServiceAccountPrivateKeyType_descriptor();
inline const ::std::string& ServiceAccountPrivateKeyType_Name(ServiceAccountPrivateKeyType value) {
  return ::google::protobuf::internal::NameOfEnum(
    ServiceAccountPrivateKeyType_descriptor(), value);
}
inline bool ServiceAccountPrivateKeyType_Parse(
    const ::std::string& name, ServiceAccountPrivateKeyType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ServiceAccountPrivateKeyType>(
    ServiceAccountPrivateKeyType_descriptor(), name, value);
}
enum ServiceAccountPublicKeyType {
  TYPE_NONE = 0,
  TYPE_X509_PEM_FILE = 1,
  TYPE_RAW_PUBLIC_KEY = 2,
  ServiceAccountPublicKeyType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  ServiceAccountPublicKeyType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool ServiceAccountPublicKeyType_IsValid(int value);
const ServiceAccountPublicKeyType ServiceAccountPublicKeyType_MIN = TYPE_NONE;
const ServiceAccountPublicKeyType ServiceAccountPublicKeyType_MAX = TYPE_RAW_PUBLIC_KEY;
const int ServiceAccountPublicKeyType_ARRAYSIZE = ServiceAccountPublicKeyType_MAX + 1;

const ::google::protobuf::EnumDescriptor* ServiceAccountPublicKeyType_descriptor();
inline const ::std::string& ServiceAccountPublicKeyType_Name(ServiceAccountPublicKeyType value) {
  return ::google::protobuf::internal::NameOfEnum(
    ServiceAccountPublicKeyType_descriptor(), value);
}
inline bool ServiceAccountPublicKeyType_Parse(
    const ::std::string& name, ServiceAccountPublicKeyType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ServiceAccountPublicKeyType>(
    ServiceAccountPublicKeyType_descriptor(), name, value);
}
enum RoleView {
  BASIC = 0,
  FULL = 1,
  RoleView_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  RoleView_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool RoleView_IsValid(int value);
const RoleView RoleView_MIN = BASIC;
const RoleView RoleView_MAX = FULL;
const int RoleView_ARRAYSIZE = RoleView_MAX + 1;

const ::google::protobuf::EnumDescriptor* RoleView_descriptor();
inline const ::std::string& RoleView_Name(RoleView value) {
  return ::google::protobuf::internal::NameOfEnum(
    RoleView_descriptor(), value);
}
inline bool RoleView_Parse(
    const ::std::string& name, RoleView* value) {
  return ::google::protobuf::internal::ParseNamedEnum<RoleView>(
    RoleView_descriptor(), name, value);
}
// ===================================================================

class ServiceAccount : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.iam.admin.v1.ServiceAccount) */ {
 public:
  ServiceAccount();
  virtual ~ServiceAccount();

  ServiceAccount(const ServiceAccount& from);

  inline ServiceAccount& operator=(const ServiceAccount& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ServiceAccount(ServiceAccount&& from) noexcept
    : ServiceAccount() {
    *this = ::std::move(from);
  }

  inline ServiceAccount& operator=(ServiceAccount&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const ServiceAccount& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ServiceAccount* internal_default_instance() {
    return reinterpret_cast<const ServiceAccount*>(
               &_ServiceAccount_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void UnsafeArenaSwap(ServiceAccount* other);
  void Swap(ServiceAccount* other);
  friend void swap(ServiceAccount& a, ServiceAccount& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ServiceAccount* New() const PROTOBUF_FINAL { return New(NULL); }

  ServiceAccount* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ServiceAccount& from);
  void MergeFrom(const ServiceAccount& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ServiceAccount* other);
  protected:
  explicit ServiceAccount(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_name();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_name(
      ::std::string* name);

  // string project_id = 2;
  void clear_project_id();
  static const int kProjectIdFieldNumber = 2;
  const ::std::string& project_id() const;
  void set_project_id(const ::std::string& value);
  #if LANG_CXX11
  void set_project_id(::std::string&& value);
  #endif
  void set_project_id(const char* value);
  void set_project_id(const char* value, size_t size);
  ::std::string* mutable_project_id();
  ::std::string* release_project_id();
  void set_allocated_project_id(::std::string* project_id);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_project_id();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_project_id(
      ::std::string* project_id);

  // string unique_id = 4;
  void clear_unique_id();
  static const int kUniqueIdFieldNumber = 4;
  const ::std::string& unique_id() const;
  void set_unique_id(const ::std::string& value);
  #if LANG_CXX11
  void set_unique_id(::std::string&& value);
  #endif
  void set_unique_id(const char* value);
  void set_unique_id(const char* value, size_t size);
  ::std::string* mutable_unique_id();
  ::std::string* release_unique_id();
  void set_allocated_unique_id(::std::string* unique_id);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_unique_id();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_unique_id(
      ::std::string* unique_id);

  // string email = 5;
  void clear_email();
  static const int kEmailFieldNumber = 5;
  const ::std::string& email() const;
  void set_email(const ::std::string& value);
  #if LANG_CXX11
  void set_email(::std::string&& value);
  #endif
  void set_email(const char* value);
  void set_email(const char* value, size_t size);
  ::std::string* mutable_email();
  ::std::string* release_email();
  void set_allocated_email(::std::string* email);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_email();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_email(
      ::std::string* email);

  // string display_name = 6;
  void clear_display_name();
  static const int kDisplayNameFieldNumber = 6;
  const ::std::string& display_name() const;
  void set_display_name(const ::std::string& value);
  #if LANG_CXX11
  void set_display_name(::std::string&& value);
  #endif
  void set_display_name(const char* value);
  void set_display_name(const char* value, size_t size);
  ::std::string* mutable_display_name();
  ::std::string* release_display_name();
  void set_allocated_display_name(::std::string* display_name);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_display_name();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_display_name(
      ::std::string* display_name);

  // bytes etag = 7;
  void clear_etag();
  static const int kEtagFieldNumber = 7;
  const ::std::string& etag() const;
  void set_etag(const ::std::string& value);
  #if LANG_CXX11
  void set_etag(::std::string&& value);
  #endif
  void set_etag(const char* value);
  void set_etag(const void* value, size_t size);
  ::std::string* mutable_etag();
  ::std::string* release_etag();
  void set_allocated_etag(::std::string* etag);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_etag();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_etag(
      ::std::string* etag);

  // string oauth2_client_id = 9;
  void clear_oauth2_client_id();
  static const int kOauth2ClientIdFieldNumber = 9;
  const ::std::string& oauth2_client_id() const;
  void set_oauth2_client_id(const ::std::string& value);
  #if LANG_CXX11
  void set_oauth2_client_id(::std::string&& value);
  #endif
  void set_oauth2_client_id(const char* value);
  void set_oauth2_client_id(const char* value, size_t size);
  ::std::string* mutable_oauth2_client_id();
  ::std::string* release_oauth2_client_id();
  void set_allocated_oauth2_client_id(::std::string* oauth2_client_id);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_oauth2_client_id();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_oauth2_client_id(
      ::std::string* oauth2_client_id);

  // @@protoc_insertion_point(class_scope:google.iam.admin.v1.ServiceAccount)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr project_id_;
  ::google::protobuf::internal::ArenaStringPtr unique_id_;
  ::google::protobuf::internal::ArenaStringPtr email_;
  ::google::protobuf::internal::ArenaStringPtr display_name_;
  ::google::protobuf::internal::ArenaStringPtr etag_;
  ::google::protobuf::internal::ArenaStringPtr oauth2_client_id_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fiam_2fadmin_2fv1_2fiam_2eproto::TableStruct;
  friend void ::protobuf_google_2fiam_2fadmin_2fv1_2fiam_2eproto::InitDefaultsServiceAccountImpl();
};
// -------------------------------------------------------------------

class CreateServiceAccountRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.iam.admin.v1.CreateServiceAccountRequest) */ {
 public:
  CreateServiceAccountRequest();
  virtual ~CreateServiceAccountRequest();

  CreateServiceAccountRequest(const CreateServiceAccountRequest& from);

  inline CreateServiceAccountRequest& operator=(const CreateServiceAccountRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CreateServiceAccountRequest(CreateServiceAccountRequest&& from) noexcept
    : CreateServiceAccountRequest() {
    *this = ::std::move(from);
  }

  inline CreateServiceAccountRequest& operator=(CreateServiceAccountRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const CreateServiceAccountRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreateServiceAccountRequest* internal_default_instance() {
    return reinterpret_cast<const CreateServiceAccountRequest*>(
               &_CreateServiceAccountRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void UnsafeArenaSwap(CreateServiceAccountRequest* other);
  void Swap(CreateServiceAccountRequest* other);
  friend void swap(CreateServiceAccountRequest& a, CreateServiceAccountRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CreateServiceAccountRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  CreateServiceAccountRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CreateServiceAccountRequest& from);
  void MergeFrom(const CreateServiceAccountRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CreateServiceAccountRequest* other);
  protected:
  explicit CreateServiceAccountRequest(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_name();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_name(
      ::std::string* name);

  // string account_id = 2;
  void clear_account_id();
  static const int kAccountIdFieldNumber = 2;
  const ::std::string& account_id() const;
  void set_account_id(const ::std::string& value);
  #if LANG_CXX11
  void set_account_id(::std::string&& value);
  #endif
  void set_account_id(const char* value);
  void set_account_id(const char* value, size_t size);
  ::std::string* mutable_account_id();
  ::std::string* release_account_id();
  void set_allocated_account_id(::std::string* account_id);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_account_id();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_account_id(
      ::std::string* account_id);

  // .google.iam.admin.v1.ServiceAccount service_account = 3;
  bool has_service_account() const;
  void clear_service_account();
  static const int kServiceAccountFieldNumber = 3;
  private:
  void _slow_mutable_service_account();
  public:
  const ::google::iam::admin::v1::ServiceAccount& service_account() const;
  ::google::iam::admin::v1::ServiceAccount* release_service_account();
  ::google::iam::admin::v1::ServiceAccount* mutable_service_account();
  void set_allocated_service_account(::google::iam::admin::v1::ServiceAccount* service_account);
  void unsafe_arena_set_allocated_service_account(
      ::google::iam::admin::v1::ServiceAccount* service_account);
  ::google::iam::admin::v1::ServiceAccount* unsafe_arena_release_service_account();

  // @@protoc_insertion_point(class_scope:google.iam.admin.v1.CreateServiceAccountRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr account_id_;
  ::google::iam::admin::v1::ServiceAccount* service_account_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fiam_2fadmin_2fv1_2fiam_2eproto::TableStruct;
  friend void ::protobuf_google_2fiam_2fadmin_2fv1_2fiam_2eproto::InitDefaultsCreateServiceAccountRequestImpl();
};
// -------------------------------------------------------------------

class ListServiceAccountsRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.iam.admin.v1.ListServiceAccountsRequest) */ {
 public:
  ListServiceAccountsRequest();
  virtual ~ListServiceAccountsRequest();

  ListServiceAccountsRequest(const ListServiceAccountsRequest& from);

  inline ListServiceAccountsRequest& operator=(const ListServiceAccountsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ListServiceAccountsRequest(ListServiceAccountsRequest&& from) noexcept
    : ListServiceAccountsRequest() {
    *this = ::std::move(from);
  }

  inline ListServiceAccountsRequest& operator=(ListServiceAccountsRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const ListServiceAccountsRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListServiceAccountsRequest* internal_default_instance() {
    return reinterpret_cast<const ListServiceAccountsRequest*>(
               &_ListServiceAccountsRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void UnsafeArenaSwap(ListServiceAccountsRequest* other);
  void Swap(ListServiceAccountsRequest* other);
  friend void swap(ListServiceAccountsRequest& a, ListServiceAccountsRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ListServiceAccountsRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  ListServiceAccountsRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ListServiceAccountsRequest& from);
  void MergeFrom(const ListServiceAccountsRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ListServiceAccountsRequest* other);
  protected:
  explicit ListServiceAccountsRequest(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_name();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_name(
      ::std::string* name);

  // string page_token = 3;
  void clear_page_token();
  static const int kPageTokenFieldNumber = 3;
  const ::std::string& page_token() const;
  void set_page_token(const ::std::string& value);
  #if LANG_CXX11
  void set_page_token(::std::string&& value);
  #endif
  void set_page_token(const char* value);
  void set_page_token(const char* value, size_t size);
  ::std::string* mutable_page_token();
  ::std::string* release_page_token();
  void set_allocated_page_token(::std::string* page_token);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_page_token();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_page_token(
      ::std::string* page_token);

  // int32 page_size = 2;
  void clear_page_size();
  static const int kPageSizeFieldNumber = 2;
  ::google::protobuf::int32 page_size() const;
  void set_page_size(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:google.iam.admin.v1.ListServiceAccountsRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr page_token_;
  ::google::protobuf::int32 page_size_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fiam_2fadmin_2fv1_2fiam_2eproto::TableStruct;
  friend void ::protobuf_google_2fiam_2fadmin_2fv1_2fiam_2eproto::InitDefaultsListServiceAccountsRequestImpl();
};
// -------------------------------------------------------------------

class ListServiceAccountsResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.iam.admin.v1.ListServiceAccountsResponse) */ {
 public:
  ListServiceAccountsResponse();
  virtual ~ListServiceAccountsResponse();

  ListServiceAccountsResponse(const ListServiceAccountsResponse& from);

  inline ListServiceAccountsResponse& operator=(const ListServiceAccountsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ListServiceAccountsResponse(ListServiceAccountsResponse&& from) noexcept
    : ListServiceAccountsResponse() {
    *this = ::std::move(from);
  }

  inline ListServiceAccountsResponse& operator=(ListServiceAccountsResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const ListServiceAccountsResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListServiceAccountsResponse* internal_default_instance() {
    return reinterpret_cast<const ListServiceAccountsResponse*>(
               &_ListServiceAccountsResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void UnsafeArenaSwap(ListServiceAccountsResponse* other);
  void Swap(ListServiceAccountsResponse* other);
  friend void swap(ListServiceAccountsResponse& a, ListServiceAccountsResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ListServiceAccountsResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  ListServiceAccountsResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ListServiceAccountsResponse& from);
  void MergeFrom(const ListServiceAccountsResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ListServiceAccountsResponse* other);
  protected:
  explicit ListServiceAccountsResponse(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .google.iam.admin.v1.ServiceAccount accounts = 1;
  int accounts_size() const;
  void clear_accounts();
  static const int kAccountsFieldNumber = 1;
  const ::google::iam::admin::v1::ServiceAccount& accounts(int index) const;
  ::google::iam::admin::v1::ServiceAccount* mutable_accounts(int index);
  ::google::iam::admin::v1::ServiceAccount* add_accounts();
  ::google::protobuf::RepeatedPtrField< ::google::iam::admin::v1::ServiceAccount >*
      mutable_accounts();
  const ::google::protobuf::RepeatedPtrField< ::google::iam::admin::v1::ServiceAccount >&
      accounts() const;

  // string next_page_token = 2;
  void clear_next_page_token();
  static const int kNextPageTokenFieldNumber = 2;
  const ::std::string& next_page_token() const;
  void set_next_page_token(const ::std::string& value);
  #if LANG_CXX11
  void set_next_page_token(::std::string&& value);
  #endif
  void set_next_page_token(const char* value);
  void set_next_page_token(const char* value, size_t size);
  ::std::string* mutable_next_page_token();
  ::std::string* release_next_page_token();
  void set_allocated_next_page_token(::std::string* next_page_token);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_next_page_token();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_next_page_token(
      ::std::string* next_page_token);

  // @@protoc_insertion_point(class_scope:google.iam.admin.v1.ListServiceAccountsResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::RepeatedPtrField< ::google::iam::admin::v1::ServiceAccount > accounts_;
  ::google::protobuf::internal::ArenaStringPtr next_page_token_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fiam_2fadmin_2fv1_2fiam_2eproto::TableStruct;
  friend void ::protobuf_google_2fiam_2fadmin_2fv1_2fiam_2eproto::InitDefaultsListServiceAccountsResponseImpl();
};
// -------------------------------------------------------------------

class GetServiceAccountRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.iam.admin.v1.GetServiceAccountRequest) */ {
 public:
  GetServiceAccountRequest();
  virtual ~GetServiceAccountRequest();

  GetServiceAccountRequest(const GetServiceAccountRequest& from);

  inline GetServiceAccountRequest& operator=(const GetServiceAccountRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetServiceAccountRequest(GetServiceAccountRequest&& from) noexcept
    : GetServiceAccountRequest() {
    *this = ::std::move(from);
  }

  inline GetServiceAccountRequest& operator=(GetServiceAccountRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetServiceAccountRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetServiceAccountRequest* internal_default_instance() {
    return reinterpret_cast<const GetServiceAccountRequest*>(
               &_GetServiceAccountRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void UnsafeArenaSwap(GetServiceAccountRequest* other);
  void Swap(GetServiceAccountRequest* other);
  friend void swap(GetServiceAccountRequest& a, GetServiceAccountRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetServiceAccountRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  GetServiceAccountRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GetServiceAccountRequest& from);
  void MergeFrom(const GetServiceAccountRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GetServiceAccountRequest* other);
  protected:
  explicit GetServiceAccountRequest(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_name();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_name(
      ::std::string* name);

  // @@protoc_insertion_point(class_scope:google.iam.admin.v1.GetServiceAccountRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fiam_2fadmin_2fv1_2fiam_2eproto::TableStruct;
  friend void ::protobuf_google_2fiam_2fadmin_2fv1_2fiam_2eproto::InitDefaultsGetServiceAccountRequestImpl();
};
// -------------------------------------------------------------------

class DeleteServiceAccountRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.iam.admin.v1.DeleteServiceAccountRequest) */ {
 public:
  DeleteServiceAccountRequest();
  virtual ~DeleteServiceAccountRequest();

  DeleteServiceAccountRequest(const DeleteServiceAccountRequest& from);

  inline DeleteServiceAccountRequest& operator=(const DeleteServiceAccountRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DeleteServiceAccountRequest(DeleteServiceAccountRequest&& from) noexcept
    : DeleteServiceAccountRequest() {
    *this = ::std::move(from);
  }

  inline DeleteServiceAccountRequest& operator=(DeleteServiceAccountRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const DeleteServiceAccountRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeleteServiceAccountRequest* internal_default_instance() {
    return reinterpret_cast<const DeleteServiceAccountRequest*>(
               &_DeleteServiceAccountRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    5;

  void UnsafeArenaSwap(DeleteServiceAccountRequest* other);
  void Swap(DeleteServiceAccountRequest* other);
  friend void swap(DeleteServiceAccountRequest& a, DeleteServiceAccountRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DeleteServiceAccountRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  DeleteServiceAccountRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DeleteServiceAccountRequest& from);
  void MergeFrom(const DeleteServiceAccountRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DeleteServiceAccountRequest* other);
  protected:
  explicit DeleteServiceAccountRequest(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_name();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_name(
      ::std::string* name);

  // @@protoc_insertion_point(class_scope:google.iam.admin.v1.DeleteServiceAccountRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fiam_2fadmin_2fv1_2fiam_2eproto::TableStruct;
  friend void ::protobuf_google_2fiam_2fadmin_2fv1_2fiam_2eproto::InitDefaultsDeleteServiceAccountRequestImpl();
};
// -------------------------------------------------------------------

class ListServiceAccountKeysRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.iam.admin.v1.ListServiceAccountKeysRequest) */ {
 public:
  ListServiceAccountKeysRequest();
  virtual ~ListServiceAccountKeysRequest();

  ListServiceAccountKeysRequest(const ListServiceAccountKeysRequest& from);

  inline ListServiceAccountKeysRequest& operator=(const ListServiceAccountKeysRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ListServiceAccountKeysRequest(ListServiceAccountKeysRequest&& from) noexcept
    : ListServiceAccountKeysRequest() {
    *this = ::std::move(from);
  }

  inline ListServiceAccountKeysRequest& operator=(ListServiceAccountKeysRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const ListServiceAccountKeysRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListServiceAccountKeysRequest* internal_default_instance() {
    return reinterpret_cast<const ListServiceAccountKeysRequest*>(
               &_ListServiceAccountKeysRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    6;

  void UnsafeArenaSwap(ListServiceAccountKeysRequest* other);
  void Swap(ListServiceAccountKeysRequest* other);
  friend void swap(ListServiceAccountKeysRequest& a, ListServiceAccountKeysRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ListServiceAccountKeysRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  ListServiceAccountKeysRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ListServiceAccountKeysRequest& from);
  void MergeFrom(const ListServiceAccountKeysRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ListServiceAccountKeysRequest* other);
  protected:
  explicit ListServiceAccountKeysRequest(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef ListServiceAccountKeysRequest_KeyType KeyType;
  static const KeyType KEY_TYPE_UNSPECIFIED =
    ListServiceAccountKeysRequest_KeyType_KEY_TYPE_UNSPECIFIED;
  static const KeyType USER_MANAGED =
    ListServiceAccountKeysRequest_KeyType_USER_MANAGED;
  static const KeyType SYSTEM_MANAGED =
    ListServiceAccountKeysRequest_KeyType_SYSTEM_MANAGED;
  static inline bool KeyType_IsValid(int value) {
    return ListServiceAccountKeysRequest_KeyType_IsValid(value);
  }
  static const KeyType KeyType_MIN =
    ListServiceAccountKeysRequest_KeyType_KeyType_MIN;
  static const KeyType KeyType_MAX =
    ListServiceAccountKeysRequest_KeyType_KeyType_MAX;
  static const int KeyType_ARRAYSIZE =
    ListServiceAccountKeysRequest_KeyType_KeyType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  KeyType_descriptor() {
    return ListServiceAccountKeysRequest_KeyType_descriptor();
  }
  static inline const ::std::string& KeyType_Name(KeyType value) {
    return ListServiceAccountKeysRequest_KeyType_Name(value);
  }
  static inline bool KeyType_Parse(const ::std::string& name,
      KeyType* value) {
    return ListServiceAccountKeysRequest_KeyType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated .google.iam.admin.v1.ListServiceAccountKeysRequest.KeyType key_types = 2;
  int key_types_size() const;
  void clear_key_types();
  static const int kKeyTypesFieldNumber = 2;
  ::google::iam::admin::v1::ListServiceAccountKeysRequest_KeyType key_types(int index) const;
  void set_key_types(int index, ::google::iam::admin::v1::ListServiceAccountKeysRequest_KeyType value);
  void add_key_types(::google::iam::admin::v1::ListServiceAccountKeysRequest_KeyType value);
  const ::google::protobuf::RepeatedField<int>& key_types() const;
  ::google::protobuf::RepeatedField<int>* mutable_key_types();

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_name();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_name(
      ::std::string* name);

  // @@protoc_insertion_point(class_scope:google.iam.admin.v1.ListServiceAccountKeysRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::RepeatedField<int> key_types_;
  mutable int _key_types_cached_byte_size_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fiam_2fadmin_2fv1_2fiam_2eproto::TableStruct;
  friend void ::protobuf_google_2fiam_2fadmin_2fv1_2fiam_2eproto::InitDefaultsListServiceAccountKeysRequestImpl();
};
// -------------------------------------------------------------------

class ListServiceAccountKeysResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.iam.admin.v1.ListServiceAccountKeysResponse) */ {
 public:
  ListServiceAccountKeysResponse();
  virtual ~ListServiceAccountKeysResponse();

  ListServiceAccountKeysResponse(const ListServiceAccountKeysResponse& from);

  inline ListServiceAccountKeysResponse& operator=(const ListServiceAccountKeysResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ListServiceAccountKeysResponse(ListServiceAccountKeysResponse&& from) noexcept
    : ListServiceAccountKeysResponse() {
    *this = ::std::move(from);
  }

  inline ListServiceAccountKeysResponse& operator=(ListServiceAccountKeysResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const ListServiceAccountKeysResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListServiceAccountKeysResponse* internal_default_instance() {
    return reinterpret_cast<const ListServiceAccountKeysResponse*>(
               &_ListServiceAccountKeysResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    7;

  void UnsafeArenaSwap(ListServiceAccountKeysResponse* other);
  void Swap(ListServiceAccountKeysResponse* other);
  friend void swap(ListServiceAccountKeysResponse& a, ListServiceAccountKeysResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ListServiceAccountKeysResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  ListServiceAccountKeysResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ListServiceAccountKeysResponse& from);
  void MergeFrom(const ListServiceAccountKeysResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ListServiceAccountKeysResponse* other);
  protected:
  explicit ListServiceAccountKeysResponse(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .google.iam.admin.v1.ServiceAccountKey keys = 1;
  int keys_size() const;
  void clear_keys();
  static const int kKeysFieldNumber = 1;
  const ::google::iam::admin::v1::ServiceAccountKey& keys(int index) const;
  ::google::iam::admin::v1::ServiceAccountKey* mutable_keys(int index);
  ::google::iam::admin::v1::ServiceAccountKey* add_keys();
  ::google::protobuf::RepeatedPtrField< ::google::iam::admin::v1::ServiceAccountKey >*
      mutable_keys();
  const ::google::protobuf::RepeatedPtrField< ::google::iam::admin::v1::ServiceAccountKey >&
      keys() const;

  // @@protoc_insertion_point(class_scope:google.iam.admin.v1.ListServiceAccountKeysResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::RepeatedPtrField< ::google::iam::admin::v1::ServiceAccountKey > keys_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fiam_2fadmin_2fv1_2fiam_2eproto::TableStruct;
  friend void ::protobuf_google_2fiam_2fadmin_2fv1_2fiam_2eproto::InitDefaultsListServiceAccountKeysResponseImpl();
};
// -------------------------------------------------------------------

class GetServiceAccountKeyRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.iam.admin.v1.GetServiceAccountKeyRequest) */ {
 public:
  GetServiceAccountKeyRequest();
  virtual ~GetServiceAccountKeyRequest();

  GetServiceAccountKeyRequest(const GetServiceAccountKeyRequest& from);

  inline GetServiceAccountKeyRequest& operator=(const GetServiceAccountKeyRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetServiceAccountKeyRequest(GetServiceAccountKeyRequest&& from) noexcept
    : GetServiceAccountKeyRequest() {
    *this = ::std::move(from);
  }

  inline GetServiceAccountKeyRequest& operator=(GetServiceAccountKeyRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetServiceAccountKeyRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetServiceAccountKeyRequest* internal_default_instance() {
    return reinterpret_cast<const GetServiceAccountKeyRequest*>(
               &_GetServiceAccountKeyRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    8;

  void UnsafeArenaSwap(GetServiceAccountKeyRequest* other);
  void Swap(GetServiceAccountKeyRequest* other);
  friend void swap(GetServiceAccountKeyRequest& a, GetServiceAccountKeyRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetServiceAccountKeyRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  GetServiceAccountKeyRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GetServiceAccountKeyRequest& from);
  void MergeFrom(const GetServiceAccountKeyRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GetServiceAccountKeyRequest* other);
  protected:
  explicit GetServiceAccountKeyRequest(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_name();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_name(
      ::std::string* name);

  // .google.iam.admin.v1.ServiceAccountPublicKeyType public_key_type = 2;
  void clear_public_key_type();
  static const int kPublicKeyTypeFieldNumber = 2;
  ::google::iam::admin::v1::ServiceAccountPublicKeyType public_key_type() const;
  void set_public_key_type(::google::iam::admin::v1::ServiceAccountPublicKeyType value);

  // @@protoc_insertion_point(class_scope:google.iam.admin.v1.GetServiceAccountKeyRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  int public_key_type_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fiam_2fadmin_2fv1_2fiam_2eproto::TableStruct;
  friend void ::protobuf_google_2fiam_2fadmin_2fv1_2fiam_2eproto::InitDefaultsGetServiceAccountKeyRequestImpl();
};
// -------------------------------------------------------------------

class ServiceAccountKey : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.iam.admin.v1.ServiceAccountKey) */ {
 public:
  ServiceAccountKey();
  virtual ~ServiceAccountKey();

  ServiceAccountKey(const ServiceAccountKey& from);

  inline ServiceAccountKey& operator=(const ServiceAccountKey& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ServiceAccountKey(ServiceAccountKey&& from) noexcept
    : ServiceAccountKey() {
    *this = ::std::move(from);
  }

  inline ServiceAccountKey& operator=(ServiceAccountKey&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const ServiceAccountKey& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ServiceAccountKey* internal_default_instance() {
    return reinterpret_cast<const ServiceAccountKey*>(
               &_ServiceAccountKey_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    9;

  void UnsafeArenaSwap(ServiceAccountKey* other);
  void Swap(ServiceAccountKey* other);
  friend void swap(ServiceAccountKey& a, ServiceAccountKey& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ServiceAccountKey* New() const PROTOBUF_FINAL { return New(NULL); }

  ServiceAccountKey* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ServiceAccountKey& from);
  void MergeFrom(const ServiceAccountKey& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ServiceAccountKey* other);
  protected:
  explicit ServiceAccountKey(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_name();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_name(
      ::std::string* name);

  // bytes private_key_data = 3;
  void clear_private_key_data();
  static const int kPrivateKeyDataFieldNumber = 3;
  const ::std::string& private_key_data() const;
  void set_private_key_data(const ::std::string& value);
  #if LANG_CXX11
  void set_private_key_data(::std::string&& value);
  #endif
  void set_private_key_data(const char* value);
  void set_private_key_data(const void* value, size_t size);
  ::std::string* mutable_private_key_data();
  ::std::string* release_private_key_data();
  void set_allocated_private_key_data(::std::string* private_key_data);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_private_key_data();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_private_key_data(
      ::std::string* private_key_data);

  // bytes public_key_data = 7;
  void clear_public_key_data();
  static const int kPublicKeyDataFieldNumber = 7;
  const ::std::string& public_key_data() const;
  void set_public_key_data(const ::std::string& value);
  #if LANG_CXX11
  void set_public_key_data(::std::string&& value);
  #endif
  void set_public_key_data(const char* value);
  void set_public_key_data(const void* value, size_t size);
  ::std::string* mutable_public_key_data();
  ::std::string* release_public_key_data();
  void set_allocated_public_key_data(::std::string* public_key_data);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_public_key_data();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_public_key_data(
      ::std::string* public_key_data);

  // .google.protobuf.Timestamp valid_after_time = 4;
  bool has_valid_after_time() const;
  void clear_valid_after_time();
  static const int kValidAfterTimeFieldNumber = 4;
  private:
  void _slow_mutable_valid_after_time();
  public:
  const ::google::protobuf::Timestamp& valid_after_time() const;
  ::google::protobuf::Timestamp* release_valid_after_time();
  ::google::protobuf::Timestamp* mutable_valid_after_time();
  void set_allocated_valid_after_time(::google::protobuf::Timestamp* valid_after_time);
  void unsafe_arena_set_allocated_valid_after_time(
      ::google::protobuf::Timestamp* valid_after_time);
  ::google::protobuf::Timestamp* unsafe_arena_release_valid_after_time();

  // .google.protobuf.Timestamp valid_before_time = 5;
  bool has_valid_before_time() const;
  void clear_valid_before_time();
  static const int kValidBeforeTimeFieldNumber = 5;
  private:
  void _slow_mutable_valid_before_time();
  public:
  const ::google::protobuf::Timestamp& valid_before_time() const;
  ::google::protobuf::Timestamp* release_valid_before_time();
  ::google::protobuf::Timestamp* mutable_valid_before_time();
  void set_allocated_valid_before_time(::google::protobuf::Timestamp* valid_before_time);
  void unsafe_arena_set_allocated_valid_before_time(
      ::google::protobuf::Timestamp* valid_before_time);
  ::google::protobuf::Timestamp* unsafe_arena_release_valid_before_time();

  // .google.iam.admin.v1.ServiceAccountPrivateKeyType private_key_type = 2;
  void clear_private_key_type();
  static const int kPrivateKeyTypeFieldNumber = 2;
  ::google::iam::admin::v1::ServiceAccountPrivateKeyType private_key_type() const;
  void set_private_key_type(::google::iam::admin::v1::ServiceAccountPrivateKeyType value);

  // .google.iam.admin.v1.ServiceAccountKeyAlgorithm key_algorithm = 8;
  void clear_key_algorithm();
  static const int kKeyAlgorithmFieldNumber = 8;
  ::google::iam::admin::v1::ServiceAccountKeyAlgorithm key_algorithm() const;
  void set_key_algorithm(::google::iam::admin::v1::ServiceAccountKeyAlgorithm value);

  // @@protoc_insertion_point(class_scope:google.iam.admin.v1.ServiceAccountKey)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr private_key_data_;
  ::google::protobuf::internal::ArenaStringPtr public_key_data_;
  ::google::protobuf::Timestamp* valid_after_time_;
  ::google::protobuf::Timestamp* valid_before_time_;
  int private_key_type_;
  int key_algorithm_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fiam_2fadmin_2fv1_2fiam_2eproto::TableStruct;
  friend void ::protobuf_google_2fiam_2fadmin_2fv1_2fiam_2eproto::InitDefaultsServiceAccountKeyImpl();
};
// -------------------------------------------------------------------

class CreateServiceAccountKeyRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.iam.admin.v1.CreateServiceAccountKeyRequest) */ {
 public:
  CreateServiceAccountKeyRequest();
  virtual ~CreateServiceAccountKeyRequest();

  CreateServiceAccountKeyRequest(const CreateServiceAccountKeyRequest& from);

  inline CreateServiceAccountKeyRequest& operator=(const CreateServiceAccountKeyRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CreateServiceAccountKeyRequest(CreateServiceAccountKeyRequest&& from) noexcept
    : CreateServiceAccountKeyRequest() {
    *this = ::std::move(from);
  }

  inline CreateServiceAccountKeyRequest& operator=(CreateServiceAccountKeyRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const CreateServiceAccountKeyRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreateServiceAccountKeyRequest* internal_default_instance() {
    return reinterpret_cast<const CreateServiceAccountKeyRequest*>(
               &_CreateServiceAccountKeyRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    10;

  void UnsafeArenaSwap(CreateServiceAccountKeyRequest* other);
  void Swap(CreateServiceAccountKeyRequest* other);
  friend void swap(CreateServiceAccountKeyRequest& a, CreateServiceAccountKeyRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CreateServiceAccountKeyRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  CreateServiceAccountKeyRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CreateServiceAccountKeyRequest& from);
  void MergeFrom(const CreateServiceAccountKeyRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CreateServiceAccountKeyRequest* other);
  protected:
  explicit CreateServiceAccountKeyRequest(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_name();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_name(
      ::std::string* name);

  // .google.iam.admin.v1.ServiceAccountPrivateKeyType private_key_type = 2;
  void clear_private_key_type();
  static const int kPrivateKeyTypeFieldNumber = 2;
  ::google::iam::admin::v1::ServiceAccountPrivateKeyType private_key_type() const;
  void set_private_key_type(::google::iam::admin::v1::ServiceAccountPrivateKeyType value);

  // .google.iam.admin.v1.ServiceAccountKeyAlgorithm key_algorithm = 3;
  void clear_key_algorithm();
  static const int kKeyAlgorithmFieldNumber = 3;
  ::google::iam::admin::v1::ServiceAccountKeyAlgorithm key_algorithm() const;
  void set_key_algorithm(::google::iam::admin::v1::ServiceAccountKeyAlgorithm value);

  // @@protoc_insertion_point(class_scope:google.iam.admin.v1.CreateServiceAccountKeyRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  int private_key_type_;
  int key_algorithm_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fiam_2fadmin_2fv1_2fiam_2eproto::TableStruct;
  friend void ::protobuf_google_2fiam_2fadmin_2fv1_2fiam_2eproto::InitDefaultsCreateServiceAccountKeyRequestImpl();
};
// -------------------------------------------------------------------

class DeleteServiceAccountKeyRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.iam.admin.v1.DeleteServiceAccountKeyRequest) */ {
 public:
  DeleteServiceAccountKeyRequest();
  virtual ~DeleteServiceAccountKeyRequest();

  DeleteServiceAccountKeyRequest(const DeleteServiceAccountKeyRequest& from);

  inline DeleteServiceAccountKeyRequest& operator=(const DeleteServiceAccountKeyRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DeleteServiceAccountKeyRequest(DeleteServiceAccountKeyRequest&& from) noexcept
    : DeleteServiceAccountKeyRequest() {
    *this = ::std::move(from);
  }

  inline DeleteServiceAccountKeyRequest& operator=(DeleteServiceAccountKeyRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const DeleteServiceAccountKeyRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeleteServiceAccountKeyRequest* internal_default_instance() {
    return reinterpret_cast<const DeleteServiceAccountKeyRequest*>(
               &_DeleteServiceAccountKeyRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    11;

  void UnsafeArenaSwap(DeleteServiceAccountKeyRequest* other);
  void Swap(DeleteServiceAccountKeyRequest* other);
  friend void swap(DeleteServiceAccountKeyRequest& a, DeleteServiceAccountKeyRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DeleteServiceAccountKeyRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  DeleteServiceAccountKeyRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DeleteServiceAccountKeyRequest& from);
  void MergeFrom(const DeleteServiceAccountKeyRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DeleteServiceAccountKeyRequest* other);
  protected:
  explicit DeleteServiceAccountKeyRequest(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_name();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_name(
      ::std::string* name);

  // @@protoc_insertion_point(class_scope:google.iam.admin.v1.DeleteServiceAccountKeyRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fiam_2fadmin_2fv1_2fiam_2eproto::TableStruct;
  friend void ::protobuf_google_2fiam_2fadmin_2fv1_2fiam_2eproto::InitDefaultsDeleteServiceAccountKeyRequestImpl();
};
// -------------------------------------------------------------------

class SignBlobRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.iam.admin.v1.SignBlobRequest) */ {
 public:
  SignBlobRequest();
  virtual ~SignBlobRequest();

  SignBlobRequest(const SignBlobRequest& from);

  inline SignBlobRequest& operator=(const SignBlobRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SignBlobRequest(SignBlobRequest&& from) noexcept
    : SignBlobRequest() {
    *this = ::std::move(from);
  }

  inline SignBlobRequest& operator=(SignBlobRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const SignBlobRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SignBlobRequest* internal_default_instance() {
    return reinterpret_cast<const SignBlobRequest*>(
               &_SignBlobRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    12;

  void UnsafeArenaSwap(SignBlobRequest* other);
  void Swap(SignBlobRequest* other);
  friend void swap(SignBlobRequest& a, SignBlobRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SignBlobRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  SignBlobRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SignBlobRequest& from);
  void MergeFrom(const SignBlobRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SignBlobRequest* other);
  protected:
  explicit SignBlobRequest(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_name();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_name(
      ::std::string* name);

  // bytes bytes_to_sign = 2;
  void clear_bytes_to_sign();
  static const int kBytesToSignFieldNumber = 2;
  const ::std::string& bytes_to_sign() const;
  void set_bytes_to_sign(const ::std::string& value);
  #if LANG_CXX11
  void set_bytes_to_sign(::std::string&& value);
  #endif
  void set_bytes_to_sign(const char* value);
  void set_bytes_to_sign(const void* value, size_t size);
  ::std::string* mutable_bytes_to_sign();
  ::std::string* release_bytes_to_sign();
  void set_allocated_bytes_to_sign(::std::string* bytes_to_sign);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_bytes_to_sign();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_bytes_to_sign(
      ::std::string* bytes_to_sign);

  // @@protoc_insertion_point(class_scope:google.iam.admin.v1.SignBlobRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr bytes_to_sign_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fiam_2fadmin_2fv1_2fiam_2eproto::TableStruct;
  friend void ::protobuf_google_2fiam_2fadmin_2fv1_2fiam_2eproto::InitDefaultsSignBlobRequestImpl();
};
// -------------------------------------------------------------------

class SignBlobResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.iam.admin.v1.SignBlobResponse) */ {
 public:
  SignBlobResponse();
  virtual ~SignBlobResponse();

  SignBlobResponse(const SignBlobResponse& from);

  inline SignBlobResponse& operator=(const SignBlobResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SignBlobResponse(SignBlobResponse&& from) noexcept
    : SignBlobResponse() {
    *this = ::std::move(from);
  }

  inline SignBlobResponse& operator=(SignBlobResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const SignBlobResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SignBlobResponse* internal_default_instance() {
    return reinterpret_cast<const SignBlobResponse*>(
               &_SignBlobResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    13;

  void UnsafeArenaSwap(SignBlobResponse* other);
  void Swap(SignBlobResponse* other);
  friend void swap(SignBlobResponse& a, SignBlobResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SignBlobResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  SignBlobResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SignBlobResponse& from);
  void MergeFrom(const SignBlobResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SignBlobResponse* other);
  protected:
  explicit SignBlobResponse(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string key_id = 1;
  void clear_key_id();
  static const int kKeyIdFieldNumber = 1;
  const ::std::string& key_id() const;
  void set_key_id(const ::std::string& value);
  #if LANG_CXX11
  void set_key_id(::std::string&& value);
  #endif
  void set_key_id(const char* value);
  void set_key_id(const char* value, size_t size);
  ::std::string* mutable_key_id();
  ::std::string* release_key_id();
  void set_allocated_key_id(::std::string* key_id);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_key_id();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_key_id(
      ::std::string* key_id);

  // bytes signature = 2;
  void clear_signature();
  static const int kSignatureFieldNumber = 2;
  const ::std::string& signature() const;
  void set_signature(const ::std::string& value);
  #if LANG_CXX11
  void set_signature(::std::string&& value);
  #endif
  void set_signature(const char* value);
  void set_signature(const void* value, size_t size);
  ::std::string* mutable_signature();
  ::std::string* release_signature();
  void set_allocated_signature(::std::string* signature);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_signature();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_signature(
      ::std::string* signature);

  // @@protoc_insertion_point(class_scope:google.iam.admin.v1.SignBlobResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::ArenaStringPtr key_id_;
  ::google::protobuf::internal::ArenaStringPtr signature_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fiam_2fadmin_2fv1_2fiam_2eproto::TableStruct;
  friend void ::protobuf_google_2fiam_2fadmin_2fv1_2fiam_2eproto::InitDefaultsSignBlobResponseImpl();
};
// -------------------------------------------------------------------

class SignJwtRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.iam.admin.v1.SignJwtRequest) */ {
 public:
  SignJwtRequest();
  virtual ~SignJwtRequest();

  SignJwtRequest(const SignJwtRequest& from);

  inline SignJwtRequest& operator=(const SignJwtRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SignJwtRequest(SignJwtRequest&& from) noexcept
    : SignJwtRequest() {
    *this = ::std::move(from);
  }

  inline SignJwtRequest& operator=(SignJwtRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const SignJwtRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SignJwtRequest* internal_default_instance() {
    return reinterpret_cast<const SignJwtRequest*>(
               &_SignJwtRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    14;

  void UnsafeArenaSwap(SignJwtRequest* other);
  void Swap(SignJwtRequest* other);
  friend void swap(SignJwtRequest& a, SignJwtRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SignJwtRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  SignJwtRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SignJwtRequest& from);
  void MergeFrom(const SignJwtRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SignJwtRequest* other);
  protected:
  explicit SignJwtRequest(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_name();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_name(
      ::std::string* name);

  // string payload = 2;
  void clear_payload();
  static const int kPayloadFieldNumber = 2;
  const ::std::string& payload() const;
  void set_payload(const ::std::string& value);
  #if LANG_CXX11
  void set_payload(::std::string&& value);
  #endif
  void set_payload(const char* value);
  void set_payload(const char* value, size_t size);
  ::std::string* mutable_payload();
  ::std::string* release_payload();
  void set_allocated_payload(::std::string* payload);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_payload();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_payload(
      ::std::string* payload);

  // @@protoc_insertion_point(class_scope:google.iam.admin.v1.SignJwtRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr payload_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fiam_2fadmin_2fv1_2fiam_2eproto::TableStruct;
  friend void ::protobuf_google_2fiam_2fadmin_2fv1_2fiam_2eproto::InitDefaultsSignJwtRequestImpl();
};
// -------------------------------------------------------------------

class SignJwtResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.iam.admin.v1.SignJwtResponse) */ {
 public:
  SignJwtResponse();
  virtual ~SignJwtResponse();

  SignJwtResponse(const SignJwtResponse& from);

  inline SignJwtResponse& operator=(const SignJwtResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SignJwtResponse(SignJwtResponse&& from) noexcept
    : SignJwtResponse() {
    *this = ::std::move(from);
  }

  inline SignJwtResponse& operator=(SignJwtResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const SignJwtResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SignJwtResponse* internal_default_instance() {
    return reinterpret_cast<const SignJwtResponse*>(
               &_SignJwtResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    15;

  void UnsafeArenaSwap(SignJwtResponse* other);
  void Swap(SignJwtResponse* other);
  friend void swap(SignJwtResponse& a, SignJwtResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SignJwtResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  SignJwtResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SignJwtResponse& from);
  void MergeFrom(const SignJwtResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SignJwtResponse* other);
  protected:
  explicit SignJwtResponse(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string key_id = 1;
  void clear_key_id();
  static const int kKeyIdFieldNumber = 1;
  const ::std::string& key_id() const;
  void set_key_id(const ::std::string& value);
  #if LANG_CXX11
  void set_key_id(::std::string&& value);
  #endif
  void set_key_id(const char* value);
  void set_key_id(const char* value, size_t size);
  ::std::string* mutable_key_id();
  ::std::string* release_key_id();
  void set_allocated_key_id(::std::string* key_id);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_key_id();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_key_id(
      ::std::string* key_id);

  // string signed_jwt = 2;
  void clear_signed_jwt();
  static const int kSignedJwtFieldNumber = 2;
  const ::std::string& signed_jwt() const;
  void set_signed_jwt(const ::std::string& value);
  #if LANG_CXX11
  void set_signed_jwt(::std::string&& value);
  #endif
  void set_signed_jwt(const char* value);
  void set_signed_jwt(const char* value, size_t size);
  ::std::string* mutable_signed_jwt();
  ::std::string* release_signed_jwt();
  void set_allocated_signed_jwt(::std::string* signed_jwt);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_signed_jwt();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_signed_jwt(
      ::std::string* signed_jwt);

  // @@protoc_insertion_point(class_scope:google.iam.admin.v1.SignJwtResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::ArenaStringPtr key_id_;
  ::google::protobuf::internal::ArenaStringPtr signed_jwt_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fiam_2fadmin_2fv1_2fiam_2eproto::TableStruct;
  friend void ::protobuf_google_2fiam_2fadmin_2fv1_2fiam_2eproto::InitDefaultsSignJwtResponseImpl();
};
// -------------------------------------------------------------------

class Role : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.iam.admin.v1.Role) */ {
 public:
  Role();
  virtual ~Role();

  Role(const Role& from);

  inline Role& operator=(const Role& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Role(Role&& from) noexcept
    : Role() {
    *this = ::std::move(from);
  }

  inline Role& operator=(Role&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const Role& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Role* internal_default_instance() {
    return reinterpret_cast<const Role*>(
               &_Role_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    16;

  void UnsafeArenaSwap(Role* other);
  void Swap(Role* other);
  friend void swap(Role& a, Role& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Role* New() const PROTOBUF_FINAL { return New(NULL); }

  Role* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Role& from);
  void MergeFrom(const Role& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Role* other);
  protected:
  explicit Role(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef Role_RoleLaunchStage RoleLaunchStage;
  static const RoleLaunchStage ALPHA =
    Role_RoleLaunchStage_ALPHA;
  static const RoleLaunchStage BETA =
    Role_RoleLaunchStage_BETA;
  static const RoleLaunchStage GA =
    Role_RoleLaunchStage_GA;
  static const RoleLaunchStage DEPRECATED =
    Role_RoleLaunchStage_DEPRECATED;
  static const RoleLaunchStage DISABLED =
    Role_RoleLaunchStage_DISABLED;
  static const RoleLaunchStage EAP =
    Role_RoleLaunchStage_EAP;
  static inline bool RoleLaunchStage_IsValid(int value) {
    return Role_RoleLaunchStage_IsValid(value);
  }
  static const RoleLaunchStage RoleLaunchStage_MIN =
    Role_RoleLaunchStage_RoleLaunchStage_MIN;
  static const RoleLaunchStage RoleLaunchStage_MAX =
    Role_RoleLaunchStage_RoleLaunchStage_MAX;
  static const int RoleLaunchStage_ARRAYSIZE =
    Role_RoleLaunchStage_RoleLaunchStage_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  RoleLaunchStage_descriptor() {
    return Role_RoleLaunchStage_descriptor();
  }
  static inline const ::std::string& RoleLaunchStage_Name(RoleLaunchStage value) {
    return Role_RoleLaunchStage_Name(value);
  }
  static inline bool RoleLaunchStage_Parse(const ::std::string& name,
      RoleLaunchStage* value) {
    return Role_RoleLaunchStage_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated string included_permissions = 7;
  int included_permissions_size() const;
  void clear_included_permissions();
  static const int kIncludedPermissionsFieldNumber = 7;
  const ::std::string& included_permissions(int index) const;
  ::std::string* mutable_included_permissions(int index);
  void set_included_permissions(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_included_permissions(int index, ::std::string&& value);
  #endif
  void set_included_permissions(int index, const char* value);
  void set_included_permissions(int index, const char* value, size_t size);
  ::std::string* add_included_permissions();
  void add_included_permissions(const ::std::string& value);
  #if LANG_CXX11
  void add_included_permissions(::std::string&& value);
  #endif
  void add_included_permissions(const char* value);
  void add_included_permissions(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& included_permissions() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_included_permissions();

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_name();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_name(
      ::std::string* name);

  // string title = 2;
  void clear_title();
  static const int kTitleFieldNumber = 2;
  const ::std::string& title() const;
  void set_title(const ::std::string& value);
  #if LANG_CXX11
  void set_title(::std::string&& value);
  #endif
  void set_title(const char* value);
  void set_title(const char* value, size_t size);
  ::std::string* mutable_title();
  ::std::string* release_title();
  void set_allocated_title(::std::string* title);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_title();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_title(
      ::std::string* title);

  // string description = 3;
  void clear_description();
  static const int kDescriptionFieldNumber = 3;
  const ::std::string& description() const;
  void set_description(const ::std::string& value);
  #if LANG_CXX11
  void set_description(::std::string&& value);
  #endif
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  ::std::string* mutable_description();
  ::std::string* release_description();
  void set_allocated_description(::std::string* description);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_description();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_description(
      ::std::string* description);

  // bytes etag = 9;
  void clear_etag();
  static const int kEtagFieldNumber = 9;
  const ::std::string& etag() const;
  void set_etag(const ::std::string& value);
  #if LANG_CXX11
  void set_etag(::std::string&& value);
  #endif
  void set_etag(const char* value);
  void set_etag(const void* value, size_t size);
  ::std::string* mutable_etag();
  ::std::string* release_etag();
  void set_allocated_etag(::std::string* etag);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_etag();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_etag(
      ::std::string* etag);

  // .google.iam.admin.v1.Role.RoleLaunchStage stage = 8;
  void clear_stage();
  static const int kStageFieldNumber = 8;
  ::google::iam::admin::v1::Role_RoleLaunchStage stage() const;
  void set_stage(::google::iam::admin::v1::Role_RoleLaunchStage value);

  // bool deleted = 11;
  void clear_deleted();
  static const int kDeletedFieldNumber = 11;
  bool deleted() const;
  void set_deleted(bool value);

  // @@protoc_insertion_point(class_scope:google.iam.admin.v1.Role)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::RepeatedPtrField< ::std::string> included_permissions_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr title_;
  ::google::protobuf::internal::ArenaStringPtr description_;
  ::google::protobuf::internal::ArenaStringPtr etag_;
  int stage_;
  bool deleted_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fiam_2fadmin_2fv1_2fiam_2eproto::TableStruct;
  friend void ::protobuf_google_2fiam_2fadmin_2fv1_2fiam_2eproto::InitDefaultsRoleImpl();
};
// -------------------------------------------------------------------

class QueryGrantableRolesRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.iam.admin.v1.QueryGrantableRolesRequest) */ {
 public:
  QueryGrantableRolesRequest();
  virtual ~QueryGrantableRolesRequest();

  QueryGrantableRolesRequest(const QueryGrantableRolesRequest& from);

  inline QueryGrantableRolesRequest& operator=(const QueryGrantableRolesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  QueryGrantableRolesRequest(QueryGrantableRolesRequest&& from) noexcept
    : QueryGrantableRolesRequest() {
    *this = ::std::move(from);
  }

  inline QueryGrantableRolesRequest& operator=(QueryGrantableRolesRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const QueryGrantableRolesRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const QueryGrantableRolesRequest* internal_default_instance() {
    return reinterpret_cast<const QueryGrantableRolesRequest*>(
               &_QueryGrantableRolesRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    17;

  void UnsafeArenaSwap(QueryGrantableRolesRequest* other);
  void Swap(QueryGrantableRolesRequest* other);
  friend void swap(QueryGrantableRolesRequest& a, QueryGrantableRolesRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline QueryGrantableRolesRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  QueryGrantableRolesRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const QueryGrantableRolesRequest& from);
  void MergeFrom(const QueryGrantableRolesRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(QueryGrantableRolesRequest* other);
  protected:
  explicit QueryGrantableRolesRequest(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string full_resource_name = 1;
  void clear_full_resource_name();
  static const int kFullResourceNameFieldNumber = 1;
  const ::std::string& full_resource_name() const;
  void set_full_resource_name(const ::std::string& value);
  #if LANG_CXX11
  void set_full_resource_name(::std::string&& value);
  #endif
  void set_full_resource_name(const char* value);
  void set_full_resource_name(const char* value, size_t size);
  ::std::string* mutable_full_resource_name();
  ::std::string* release_full_resource_name();
  void set_allocated_full_resource_name(::std::string* full_resource_name);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_full_resource_name();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_full_resource_name(
      ::std::string* full_resource_name);

  // string page_token = 4;
  void clear_page_token();
  static const int kPageTokenFieldNumber = 4;
  const ::std::string& page_token() const;
  void set_page_token(const ::std::string& value);
  #if LANG_CXX11
  void set_page_token(::std::string&& value);
  #endif
  void set_page_token(const char* value);
  void set_page_token(const char* value, size_t size);
  ::std::string* mutable_page_token();
  ::std::string* release_page_token();
  void set_allocated_page_token(::std::string* page_token);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_page_token();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_page_token(
      ::std::string* page_token);

  // .google.iam.admin.v1.RoleView view = 2;
  void clear_view();
  static const int kViewFieldNumber = 2;
  ::google::iam::admin::v1::RoleView view() const;
  void set_view(::google::iam::admin::v1::RoleView value);

  // int32 page_size = 3;
  void clear_page_size();
  static const int kPageSizeFieldNumber = 3;
  ::google::protobuf::int32 page_size() const;
  void set_page_size(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:google.iam.admin.v1.QueryGrantableRolesRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::ArenaStringPtr full_resource_name_;
  ::google::protobuf::internal::ArenaStringPtr page_token_;
  int view_;
  ::google::protobuf::int32 page_size_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fiam_2fadmin_2fv1_2fiam_2eproto::TableStruct;
  friend void ::protobuf_google_2fiam_2fadmin_2fv1_2fiam_2eproto::InitDefaultsQueryGrantableRolesRequestImpl();
};
// -------------------------------------------------------------------

class QueryGrantableRolesResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.iam.admin.v1.QueryGrantableRolesResponse) */ {
 public:
  QueryGrantableRolesResponse();
  virtual ~QueryGrantableRolesResponse();

  QueryGrantableRolesResponse(const QueryGrantableRolesResponse& from);

  inline QueryGrantableRolesResponse& operator=(const QueryGrantableRolesResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  QueryGrantableRolesResponse(QueryGrantableRolesResponse&& from) noexcept
    : QueryGrantableRolesResponse() {
    *this = ::std::move(from);
  }

  inline QueryGrantableRolesResponse& operator=(QueryGrantableRolesResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const QueryGrantableRolesResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const QueryGrantableRolesResponse* internal_default_instance() {
    return reinterpret_cast<const QueryGrantableRolesResponse*>(
               &_QueryGrantableRolesResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    18;

  void UnsafeArenaSwap(QueryGrantableRolesResponse* other);
  void Swap(QueryGrantableRolesResponse* other);
  friend void swap(QueryGrantableRolesResponse& a, QueryGrantableRolesResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline QueryGrantableRolesResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  QueryGrantableRolesResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const QueryGrantableRolesResponse& from);
  void MergeFrom(const QueryGrantableRolesResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(QueryGrantableRolesResponse* other);
  protected:
  explicit QueryGrantableRolesResponse(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .google.iam.admin.v1.Role roles = 1;
  int roles_size() const;
  void clear_roles();
  static const int kRolesFieldNumber = 1;
  const ::google::iam::admin::v1::Role& roles(int index) const;
  ::google::iam::admin::v1::Role* mutable_roles(int index);
  ::google::iam::admin::v1::Role* add_roles();
  ::google::protobuf::RepeatedPtrField< ::google::iam::admin::v1::Role >*
      mutable_roles();
  const ::google::protobuf::RepeatedPtrField< ::google::iam::admin::v1::Role >&
      roles() const;

  // string next_page_token = 2;
  void clear_next_page_token();
  static const int kNextPageTokenFieldNumber = 2;
  const ::std::string& next_page_token() const;
  void set_next_page_token(const ::std::string& value);
  #if LANG_CXX11
  void set_next_page_token(::std::string&& value);
  #endif
  void set_next_page_token(const char* value);
  void set_next_page_token(const char* value, size_t size);
  ::std::string* mutable_next_page_token();
  ::std::string* release_next_page_token();
  void set_allocated_next_page_token(::std::string* next_page_token);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_next_page_token();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_next_page_token(
      ::std::string* next_page_token);

  // @@protoc_insertion_point(class_scope:google.iam.admin.v1.QueryGrantableRolesResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::RepeatedPtrField< ::google::iam::admin::v1::Role > roles_;
  ::google::protobuf::internal::ArenaStringPtr next_page_token_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fiam_2fadmin_2fv1_2fiam_2eproto::TableStruct;
  friend void ::protobuf_google_2fiam_2fadmin_2fv1_2fiam_2eproto::InitDefaultsQueryGrantableRolesResponseImpl();
};
// -------------------------------------------------------------------

class ListRolesRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.iam.admin.v1.ListRolesRequest) */ {
 public:
  ListRolesRequest();
  virtual ~ListRolesRequest();

  ListRolesRequest(const ListRolesRequest& from);

  inline ListRolesRequest& operator=(const ListRolesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ListRolesRequest(ListRolesRequest&& from) noexcept
    : ListRolesRequest() {
    *this = ::std::move(from);
  }

  inline ListRolesRequest& operator=(ListRolesRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const ListRolesRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListRolesRequest* internal_default_instance() {
    return reinterpret_cast<const ListRolesRequest*>(
               &_ListRolesRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    19;

  void UnsafeArenaSwap(ListRolesRequest* other);
  void Swap(ListRolesRequest* other);
  friend void swap(ListRolesRequest& a, ListRolesRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ListRolesRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  ListRolesRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ListRolesRequest& from);
  void MergeFrom(const ListRolesRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ListRolesRequest* other);
  protected:
  explicit ListRolesRequest(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string parent = 1;
  void clear_parent();
  static const int kParentFieldNumber = 1;
  const ::std::string& parent() const;
  void set_parent(const ::std::string& value);
  #if LANG_CXX11
  void set_parent(::std::string&& value);
  #endif
  void set_parent(const char* value);
  void set_parent(const char* value, size_t size);
  ::std::string* mutable_parent();
  ::std::string* release_parent();
  void set_allocated_parent(::std::string* parent);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_parent();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_parent(
      ::std::string* parent);

  // string page_token = 3;
  void clear_page_token();
  static const int kPageTokenFieldNumber = 3;
  const ::std::string& page_token() const;
  void set_page_token(const ::std::string& value);
  #if LANG_CXX11
  void set_page_token(::std::string&& value);
  #endif
  void set_page_token(const char* value);
  void set_page_token(const char* value, size_t size);
  ::std::string* mutable_page_token();
  ::std::string* release_page_token();
  void set_allocated_page_token(::std::string* page_token);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_page_token();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_page_token(
      ::std::string* page_token);

  // int32 page_size = 2;
  void clear_page_size();
  static const int kPageSizeFieldNumber = 2;
  ::google::protobuf::int32 page_size() const;
  void set_page_size(::google::protobuf::int32 value);

  // .google.iam.admin.v1.RoleView view = 4;
  void clear_view();
  static const int kViewFieldNumber = 4;
  ::google::iam::admin::v1::RoleView view() const;
  void set_view(::google::iam::admin::v1::RoleView value);

  // bool show_deleted = 6;
  void clear_show_deleted();
  static const int kShowDeletedFieldNumber = 6;
  bool show_deleted() const;
  void set_show_deleted(bool value);

  // @@protoc_insertion_point(class_scope:google.iam.admin.v1.ListRolesRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::ArenaStringPtr parent_;
  ::google::protobuf::internal::ArenaStringPtr page_token_;
  ::google::protobuf::int32 page_size_;
  int view_;
  bool show_deleted_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fiam_2fadmin_2fv1_2fiam_2eproto::TableStruct;
  friend void ::protobuf_google_2fiam_2fadmin_2fv1_2fiam_2eproto::InitDefaultsListRolesRequestImpl();
};
// -------------------------------------------------------------------

class ListRolesResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.iam.admin.v1.ListRolesResponse) */ {
 public:
  ListRolesResponse();
  virtual ~ListRolesResponse();

  ListRolesResponse(const ListRolesResponse& from);

  inline ListRolesResponse& operator=(const ListRolesResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ListRolesResponse(ListRolesResponse&& from) noexcept
    : ListRolesResponse() {
    *this = ::std::move(from);
  }

  inline ListRolesResponse& operator=(ListRolesResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const ListRolesResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListRolesResponse* internal_default_instance() {
    return reinterpret_cast<const ListRolesResponse*>(
               &_ListRolesResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    20;

  void UnsafeArenaSwap(ListRolesResponse* other);
  void Swap(ListRolesResponse* other);
  friend void swap(ListRolesResponse& a, ListRolesResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ListRolesResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  ListRolesResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ListRolesResponse& from);
  void MergeFrom(const ListRolesResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ListRolesResponse* other);
  protected:
  explicit ListRolesResponse(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .google.iam.admin.v1.Role roles = 1;
  int roles_size() const;
  void clear_roles();
  static const int kRolesFieldNumber = 1;
  const ::google::iam::admin::v1::Role& roles(int index) const;
  ::google::iam::admin::v1::Role* mutable_roles(int index);
  ::google::iam::admin::v1::Role* add_roles();
  ::google::protobuf::RepeatedPtrField< ::google::iam::admin::v1::Role >*
      mutable_roles();
  const ::google::protobuf::RepeatedPtrField< ::google::iam::admin::v1::Role >&
      roles() const;

  // string next_page_token = 2;
  void clear_next_page_token();
  static const int kNextPageTokenFieldNumber = 2;
  const ::std::string& next_page_token() const;
  void set_next_page_token(const ::std::string& value);
  #if LANG_CXX11
  void set_next_page_token(::std::string&& value);
  #endif
  void set_next_page_token(const char* value);
  void set_next_page_token(const char* value, size_t size);
  ::std::string* mutable_next_page_token();
  ::std::string* release_next_page_token();
  void set_allocated_next_page_token(::std::string* next_page_token);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_next_page_token();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_next_page_token(
      ::std::string* next_page_token);

  // @@protoc_insertion_point(class_scope:google.iam.admin.v1.ListRolesResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::RepeatedPtrField< ::google::iam::admin::v1::Role > roles_;
  ::google::protobuf::internal::ArenaStringPtr next_page_token_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fiam_2fadmin_2fv1_2fiam_2eproto::TableStruct;
  friend void ::protobuf_google_2fiam_2fadmin_2fv1_2fiam_2eproto::InitDefaultsListRolesResponseImpl();
};
// -------------------------------------------------------------------

class GetRoleRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.iam.admin.v1.GetRoleRequest) */ {
 public:
  GetRoleRequest();
  virtual ~GetRoleRequest();

  GetRoleRequest(const GetRoleRequest& from);

  inline GetRoleRequest& operator=(const GetRoleRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetRoleRequest(GetRoleRequest&& from) noexcept
    : GetRoleRequest() {
    *this = ::std::move(from);
  }

  inline GetRoleRequest& operator=(GetRoleRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetRoleRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetRoleRequest* internal_default_instance() {
    return reinterpret_cast<const GetRoleRequest*>(
               &_GetRoleRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    21;

  void UnsafeArenaSwap(GetRoleRequest* other);
  void Swap(GetRoleRequest* other);
  friend void swap(GetRoleRequest& a, GetRoleRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetRoleRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  GetRoleRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GetRoleRequest& from);
  void MergeFrom(const GetRoleRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GetRoleRequest* other);
  protected:
  explicit GetRoleRequest(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_name();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_name(
      ::std::string* name);

  // @@protoc_insertion_point(class_scope:google.iam.admin.v1.GetRoleRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fiam_2fadmin_2fv1_2fiam_2eproto::TableStruct;
  friend void ::protobuf_google_2fiam_2fadmin_2fv1_2fiam_2eproto::InitDefaultsGetRoleRequestImpl();
};
// -------------------------------------------------------------------

class CreateRoleRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.iam.admin.v1.CreateRoleRequest) */ {
 public:
  CreateRoleRequest();
  virtual ~CreateRoleRequest();

  CreateRoleRequest(const CreateRoleRequest& from);

  inline CreateRoleRequest& operator=(const CreateRoleRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CreateRoleRequest(CreateRoleRequest&& from) noexcept
    : CreateRoleRequest() {
    *this = ::std::move(from);
  }

  inline CreateRoleRequest& operator=(CreateRoleRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const CreateRoleRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreateRoleRequest* internal_default_instance() {
    return reinterpret_cast<const CreateRoleRequest*>(
               &_CreateRoleRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    22;

  void UnsafeArenaSwap(CreateRoleRequest* other);
  void Swap(CreateRoleRequest* other);
  friend void swap(CreateRoleRequest& a, CreateRoleRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CreateRoleRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  CreateRoleRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CreateRoleRequest& from);
  void MergeFrom(const CreateRoleRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CreateRoleRequest* other);
  protected:
  explicit CreateRoleRequest(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string parent = 1;
  void clear_parent();
  static const int kParentFieldNumber = 1;
  const ::std::string& parent() const;
  void set_parent(const ::std::string& value);
  #if LANG_CXX11
  void set_parent(::std::string&& value);
  #endif
  void set_parent(const char* value);
  void set_parent(const char* value, size_t size);
  ::std::string* mutable_parent();
  ::std::string* release_parent();
  void set_allocated_parent(::std::string* parent);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_parent();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_parent(
      ::std::string* parent);

  // string role_id = 2;
  void clear_role_id();
  static const int kRoleIdFieldNumber = 2;
  const ::std::string& role_id() const;
  void set_role_id(const ::std::string& value);
  #if LANG_CXX11
  void set_role_id(::std::string&& value);
  #endif
  void set_role_id(const char* value);
  void set_role_id(const char* value, size_t size);
  ::std::string* mutable_role_id();
  ::std::string* release_role_id();
  void set_allocated_role_id(::std::string* role_id);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_role_id();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_role_id(
      ::std::string* role_id);

  // .google.iam.admin.v1.Role role = 3;
  bool has_role() const;
  void clear_role();
  static const int kRoleFieldNumber = 3;
  private:
  void _slow_mutable_role();
  public:
  const ::google::iam::admin::v1::Role& role() const;
  ::google::iam::admin::v1::Role* release_role();
  ::google::iam::admin::v1::Role* mutable_role();
  void set_allocated_role(::google::iam::admin::v1::Role* role);
  void unsafe_arena_set_allocated_role(
      ::google::iam::admin::v1::Role* role);
  ::google::iam::admin::v1::Role* unsafe_arena_release_role();

  // @@protoc_insertion_point(class_scope:google.iam.admin.v1.CreateRoleRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::ArenaStringPtr parent_;
  ::google::protobuf::internal::ArenaStringPtr role_id_;
  ::google::iam::admin::v1::Role* role_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fiam_2fadmin_2fv1_2fiam_2eproto::TableStruct;
  friend void ::protobuf_google_2fiam_2fadmin_2fv1_2fiam_2eproto::InitDefaultsCreateRoleRequestImpl();
};
// -------------------------------------------------------------------

class UpdateRoleRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.iam.admin.v1.UpdateRoleRequest) */ {
 public:
  UpdateRoleRequest();
  virtual ~UpdateRoleRequest();

  UpdateRoleRequest(const UpdateRoleRequest& from);

  inline UpdateRoleRequest& operator=(const UpdateRoleRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UpdateRoleRequest(UpdateRoleRequest&& from) noexcept
    : UpdateRoleRequest() {
    *this = ::std::move(from);
  }

  inline UpdateRoleRequest& operator=(UpdateRoleRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const UpdateRoleRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UpdateRoleRequest* internal_default_instance() {
    return reinterpret_cast<const UpdateRoleRequest*>(
               &_UpdateRoleRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    23;

  void UnsafeArenaSwap(UpdateRoleRequest* other);
  void Swap(UpdateRoleRequest* other);
  friend void swap(UpdateRoleRequest& a, UpdateRoleRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UpdateRoleRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  UpdateRoleRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const UpdateRoleRequest& from);
  void MergeFrom(const UpdateRoleRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(UpdateRoleRequest* other);
  protected:
  explicit UpdateRoleRequest(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_name();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_name(
      ::std::string* name);

  // .google.iam.admin.v1.Role role = 2;
  bool has_role() const;
  void clear_role();
  static const int kRoleFieldNumber = 2;
  private:
  void _slow_mutable_role();
  public:
  const ::google::iam::admin::v1::Role& role() const;
  ::google::iam::admin::v1::Role* release_role();
  ::google::iam::admin::v1::Role* mutable_role();
  void set_allocated_role(::google::iam::admin::v1::Role* role);
  void unsafe_arena_set_allocated_role(
      ::google::iam::admin::v1::Role* role);
  ::google::iam::admin::v1::Role* unsafe_arena_release_role();

  // .google.protobuf.FieldMask update_mask = 3;
  bool has_update_mask() const;
  void clear_update_mask();
  static const int kUpdateMaskFieldNumber = 3;
  private:
  void _slow_mutable_update_mask();
  public:
  const ::google::protobuf::FieldMask& update_mask() const;
  ::google::protobuf::FieldMask* release_update_mask();
  ::google::protobuf::FieldMask* mutable_update_mask();
  void set_allocated_update_mask(::google::protobuf::FieldMask* update_mask);
  void unsafe_arena_set_allocated_update_mask(
      ::google::protobuf::FieldMask* update_mask);
  ::google::protobuf::FieldMask* unsafe_arena_release_update_mask();

  // @@protoc_insertion_point(class_scope:google.iam.admin.v1.UpdateRoleRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::iam::admin::v1::Role* role_;
  ::google::protobuf::FieldMask* update_mask_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fiam_2fadmin_2fv1_2fiam_2eproto::TableStruct;
  friend void ::protobuf_google_2fiam_2fadmin_2fv1_2fiam_2eproto::InitDefaultsUpdateRoleRequestImpl();
};
// -------------------------------------------------------------------

class DeleteRoleRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.iam.admin.v1.DeleteRoleRequest) */ {
 public:
  DeleteRoleRequest();
  virtual ~DeleteRoleRequest();

  DeleteRoleRequest(const DeleteRoleRequest& from);

  inline DeleteRoleRequest& operator=(const DeleteRoleRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DeleteRoleRequest(DeleteRoleRequest&& from) noexcept
    : DeleteRoleRequest() {
    *this = ::std::move(from);
  }

  inline DeleteRoleRequest& operator=(DeleteRoleRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const DeleteRoleRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeleteRoleRequest* internal_default_instance() {
    return reinterpret_cast<const DeleteRoleRequest*>(
               &_DeleteRoleRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    24;

  void UnsafeArenaSwap(DeleteRoleRequest* other);
  void Swap(DeleteRoleRequest* other);
  friend void swap(DeleteRoleRequest& a, DeleteRoleRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DeleteRoleRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  DeleteRoleRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DeleteRoleRequest& from);
  void MergeFrom(const DeleteRoleRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DeleteRoleRequest* other);
  protected:
  explicit DeleteRoleRequest(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_name();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_name(
      ::std::string* name);

  // bytes etag = 2;
  void clear_etag();
  static const int kEtagFieldNumber = 2;
  const ::std::string& etag() const;
  void set_etag(const ::std::string& value);
  #if LANG_CXX11
  void set_etag(::std::string&& value);
  #endif
  void set_etag(const char* value);
  void set_etag(const void* value, size_t size);
  ::std::string* mutable_etag();
  ::std::string* release_etag();
  void set_allocated_etag(::std::string* etag);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_etag();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_etag(
      ::std::string* etag);

  // @@protoc_insertion_point(class_scope:google.iam.admin.v1.DeleteRoleRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr etag_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fiam_2fadmin_2fv1_2fiam_2eproto::TableStruct;
  friend void ::protobuf_google_2fiam_2fadmin_2fv1_2fiam_2eproto::InitDefaultsDeleteRoleRequestImpl();
};
// -------------------------------------------------------------------

class UndeleteRoleRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.iam.admin.v1.UndeleteRoleRequest) */ {
 public:
  UndeleteRoleRequest();
  virtual ~UndeleteRoleRequest();

  UndeleteRoleRequest(const UndeleteRoleRequest& from);

  inline UndeleteRoleRequest& operator=(const UndeleteRoleRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UndeleteRoleRequest(UndeleteRoleRequest&& from) noexcept
    : UndeleteRoleRequest() {
    *this = ::std::move(from);
  }

  inline UndeleteRoleRequest& operator=(UndeleteRoleRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const UndeleteRoleRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UndeleteRoleRequest* internal_default_instance() {
    return reinterpret_cast<const UndeleteRoleRequest*>(
               &_UndeleteRoleRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    25;

  void UnsafeArenaSwap(UndeleteRoleRequest* other);
  void Swap(UndeleteRoleRequest* other);
  friend void swap(UndeleteRoleRequest& a, UndeleteRoleRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UndeleteRoleRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  UndeleteRoleRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const UndeleteRoleRequest& from);
  void MergeFrom(const UndeleteRoleRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(UndeleteRoleRequest* other);
  protected:
  explicit UndeleteRoleRequest(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_name();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_name(
      ::std::string* name);

  // bytes etag = 2;
  void clear_etag();
  static const int kEtagFieldNumber = 2;
  const ::std::string& etag() const;
  void set_etag(const ::std::string& value);
  #if LANG_CXX11
  void set_etag(::std::string&& value);
  #endif
  void set_etag(const char* value);
  void set_etag(const void* value, size_t size);
  ::std::string* mutable_etag();
  ::std::string* release_etag();
  void set_allocated_etag(::std::string* etag);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_etag();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_etag(
      ::std::string* etag);

  // @@protoc_insertion_point(class_scope:google.iam.admin.v1.UndeleteRoleRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr etag_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fiam_2fadmin_2fv1_2fiam_2eproto::TableStruct;
  friend void ::protobuf_google_2fiam_2fadmin_2fv1_2fiam_2eproto::InitDefaultsUndeleteRoleRequestImpl();
};
// -------------------------------------------------------------------

class Permission : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.iam.admin.v1.Permission) */ {
 public:
  Permission();
  virtual ~Permission();

  Permission(const Permission& from);

  inline Permission& operator=(const Permission& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Permission(Permission&& from) noexcept
    : Permission() {
    *this = ::std::move(from);
  }

  inline Permission& operator=(Permission&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const Permission& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Permission* internal_default_instance() {
    return reinterpret_cast<const Permission*>(
               &_Permission_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    26;

  void UnsafeArenaSwap(Permission* other);
  void Swap(Permission* other);
  friend void swap(Permission& a, Permission& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Permission* New() const PROTOBUF_FINAL { return New(NULL); }

  Permission* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Permission& from);
  void MergeFrom(const Permission& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Permission* other);
  protected:
  explicit Permission(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef Permission_PermissionLaunchStage PermissionLaunchStage;
  static const PermissionLaunchStage ALPHA =
    Permission_PermissionLaunchStage_ALPHA;
  static const PermissionLaunchStage BETA =
    Permission_PermissionLaunchStage_BETA;
  static const PermissionLaunchStage GA =
    Permission_PermissionLaunchStage_GA;
  static const PermissionLaunchStage DEPRECATED =
    Permission_PermissionLaunchStage_DEPRECATED;
  static inline bool PermissionLaunchStage_IsValid(int value) {
    return Permission_PermissionLaunchStage_IsValid(value);
  }
  static const PermissionLaunchStage PermissionLaunchStage_MIN =
    Permission_PermissionLaunchStage_PermissionLaunchStage_MIN;
  static const PermissionLaunchStage PermissionLaunchStage_MAX =
    Permission_PermissionLaunchStage_PermissionLaunchStage_MAX;
  static const int PermissionLaunchStage_ARRAYSIZE =
    Permission_PermissionLaunchStage_PermissionLaunchStage_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  PermissionLaunchStage_descriptor() {
    return Permission_PermissionLaunchStage_descriptor();
  }
  static inline const ::std::string& PermissionLaunchStage_Name(PermissionLaunchStage value) {
    return Permission_PermissionLaunchStage_Name(value);
  }
  static inline bool PermissionLaunchStage_Parse(const ::std::string& name,
      PermissionLaunchStage* value) {
    return Permission_PermissionLaunchStage_Parse(name, value);
  }

  typedef Permission_CustomRolesSupportLevel CustomRolesSupportLevel;
  static const CustomRolesSupportLevel SUPPORTED =
    Permission_CustomRolesSupportLevel_SUPPORTED;
  static const CustomRolesSupportLevel TESTING =
    Permission_CustomRolesSupportLevel_TESTING;
  static const CustomRolesSupportLevel NOT_SUPPORTED =
    Permission_CustomRolesSupportLevel_NOT_SUPPORTED;
  static inline bool CustomRolesSupportLevel_IsValid(int value) {
    return Permission_CustomRolesSupportLevel_IsValid(value);
  }
  static const CustomRolesSupportLevel CustomRolesSupportLevel_MIN =
    Permission_CustomRolesSupportLevel_CustomRolesSupportLevel_MIN;
  static const CustomRolesSupportLevel CustomRolesSupportLevel_MAX =
    Permission_CustomRolesSupportLevel_CustomRolesSupportLevel_MAX;
  static const int CustomRolesSupportLevel_ARRAYSIZE =
    Permission_CustomRolesSupportLevel_CustomRolesSupportLevel_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  CustomRolesSupportLevel_descriptor() {
    return Permission_CustomRolesSupportLevel_descriptor();
  }
  static inline const ::std::string& CustomRolesSupportLevel_Name(CustomRolesSupportLevel value) {
    return Permission_CustomRolesSupportLevel_Name(value);
  }
  static inline bool CustomRolesSupportLevel_Parse(const ::std::string& name,
      CustomRolesSupportLevel* value) {
    return Permission_CustomRolesSupportLevel_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_name();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_name(
      ::std::string* name);

  // string title = 2;
  void clear_title();
  static const int kTitleFieldNumber = 2;
  const ::std::string& title() const;
  void set_title(const ::std::string& value);
  #if LANG_CXX11
  void set_title(::std::string&& value);
  #endif
  void set_title(const char* value);
  void set_title(const char* value, size_t size);
  ::std::string* mutable_title();
  ::std::string* release_title();
  void set_allocated_title(::std::string* title);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_title();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_title(
      ::std::string* title);

  // string description = 3;
  void clear_description();
  static const int kDescriptionFieldNumber = 3;
  const ::std::string& description() const;
  void set_description(const ::std::string& value);
  #if LANG_CXX11
  void set_description(::std::string&& value);
  #endif
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  ::std::string* mutable_description();
  ::std::string* release_description();
  void set_allocated_description(::std::string* description);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_description();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_description(
      ::std::string* description);

  // bool only_in_predefined_roles = 4;
  void clear_only_in_predefined_roles();
  static const int kOnlyInPredefinedRolesFieldNumber = 4;
  bool only_in_predefined_roles() const;
  void set_only_in_predefined_roles(bool value);

  // .google.iam.admin.v1.Permission.PermissionLaunchStage stage = 5;
  void clear_stage();
  static const int kStageFieldNumber = 5;
  ::google::iam::admin::v1::Permission_PermissionLaunchStage stage() const;
  void set_stage(::google::iam::admin::v1::Permission_PermissionLaunchStage value);

  // .google.iam.admin.v1.Permission.CustomRolesSupportLevel custom_roles_support_level = 6;
  void clear_custom_roles_support_level();
  static const int kCustomRolesSupportLevelFieldNumber = 6;
  ::google::iam::admin::v1::Permission_CustomRolesSupportLevel custom_roles_support_level() const;
  void set_custom_roles_support_level(::google::iam::admin::v1::Permission_CustomRolesSupportLevel value);

  // @@protoc_insertion_point(class_scope:google.iam.admin.v1.Permission)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr title_;
  ::google::protobuf::internal::ArenaStringPtr description_;
  bool only_in_predefined_roles_;
  int stage_;
  int custom_roles_support_level_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fiam_2fadmin_2fv1_2fiam_2eproto::TableStruct;
  friend void ::protobuf_google_2fiam_2fadmin_2fv1_2fiam_2eproto::InitDefaultsPermissionImpl();
};
// -------------------------------------------------------------------

class QueryTestablePermissionsRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.iam.admin.v1.QueryTestablePermissionsRequest) */ {
 public:
  QueryTestablePermissionsRequest();
  virtual ~QueryTestablePermissionsRequest();

  QueryTestablePermissionsRequest(const QueryTestablePermissionsRequest& from);

  inline QueryTestablePermissionsRequest& operator=(const QueryTestablePermissionsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  QueryTestablePermissionsRequest(QueryTestablePermissionsRequest&& from) noexcept
    : QueryTestablePermissionsRequest() {
    *this = ::std::move(from);
  }

  inline QueryTestablePermissionsRequest& operator=(QueryTestablePermissionsRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const QueryTestablePermissionsRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const QueryTestablePermissionsRequest* internal_default_instance() {
    return reinterpret_cast<const QueryTestablePermissionsRequest*>(
               &_QueryTestablePermissionsRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    27;

  void UnsafeArenaSwap(QueryTestablePermissionsRequest* other);
  void Swap(QueryTestablePermissionsRequest* other);
  friend void swap(QueryTestablePermissionsRequest& a, QueryTestablePermissionsRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline QueryTestablePermissionsRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  QueryTestablePermissionsRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const QueryTestablePermissionsRequest& from);
  void MergeFrom(const QueryTestablePermissionsRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(QueryTestablePermissionsRequest* other);
  protected:
  explicit QueryTestablePermissionsRequest(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string full_resource_name = 1;
  void clear_full_resource_name();
  static const int kFullResourceNameFieldNumber = 1;
  const ::std::string& full_resource_name() const;
  void set_full_resource_name(const ::std::string& value);
  #if LANG_CXX11
  void set_full_resource_name(::std::string&& value);
  #endif
  void set_full_resource_name(const char* value);
  void set_full_resource_name(const char* value, size_t size);
  ::std::string* mutable_full_resource_name();
  ::std::string* release_full_resource_name();
  void set_allocated_full_resource_name(::std::string* full_resource_name);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_full_resource_name();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_full_resource_name(
      ::std::string* full_resource_name);

  // string page_token = 3;
  void clear_page_token();
  static const int kPageTokenFieldNumber = 3;
  const ::std::string& page_token() const;
  void set_page_token(const ::std::string& value);
  #if LANG_CXX11
  void set_page_token(::std::string&& value);
  #endif
  void set_page_token(const char* value);
  void set_page_token(const char* value, size_t size);
  ::std::string* mutable_page_token();
  ::std::string* release_page_token();
  void set_allocated_page_token(::std::string* page_token);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_page_token();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_page_token(
      ::std::string* page_token);

  // int32 page_size = 2;
  void clear_page_size();
  static const int kPageSizeFieldNumber = 2;
  ::google::protobuf::int32 page_size() const;
  void set_page_size(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:google.iam.admin.v1.QueryTestablePermissionsRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::ArenaStringPtr full_resource_name_;
  ::google::protobuf::internal::ArenaStringPtr page_token_;
  ::google::protobuf::int32 page_size_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fiam_2fadmin_2fv1_2fiam_2eproto::TableStruct;
  friend void ::protobuf_google_2fiam_2fadmin_2fv1_2fiam_2eproto::InitDefaultsQueryTestablePermissionsRequestImpl();
};
// -------------------------------------------------------------------

class QueryTestablePermissionsResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.iam.admin.v1.QueryTestablePermissionsResponse) */ {
 public:
  QueryTestablePermissionsResponse();
  virtual ~QueryTestablePermissionsResponse();

  QueryTestablePermissionsResponse(const QueryTestablePermissionsResponse& from);

  inline QueryTestablePermissionsResponse& operator=(const QueryTestablePermissionsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  QueryTestablePermissionsResponse(QueryTestablePermissionsResponse&& from) noexcept
    : QueryTestablePermissionsResponse() {
    *this = ::std::move(from);
  }

  inline QueryTestablePermissionsResponse& operator=(QueryTestablePermissionsResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const QueryTestablePermissionsResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const QueryTestablePermissionsResponse* internal_default_instance() {
    return reinterpret_cast<const QueryTestablePermissionsResponse*>(
               &_QueryTestablePermissionsResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    28;

  void UnsafeArenaSwap(QueryTestablePermissionsResponse* other);
  void Swap(QueryTestablePermissionsResponse* other);
  friend void swap(QueryTestablePermissionsResponse& a, QueryTestablePermissionsResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline QueryTestablePermissionsResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  QueryTestablePermissionsResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const QueryTestablePermissionsResponse& from);
  void MergeFrom(const QueryTestablePermissionsResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(QueryTestablePermissionsResponse* other);
  protected:
  explicit QueryTestablePermissionsResponse(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .google.iam.admin.v1.Permission permissions = 1;
  int permissions_size() const;
  void clear_permissions();
  static const int kPermissionsFieldNumber = 1;
  const ::google::iam::admin::v1::Permission& permissions(int index) const;
  ::google::iam::admin::v1::Permission* mutable_permissions(int index);
  ::google::iam::admin::v1::Permission* add_permissions();
  ::google::protobuf::RepeatedPtrField< ::google::iam::admin::v1::Permission >*
      mutable_permissions();
  const ::google::protobuf::RepeatedPtrField< ::google::iam::admin::v1::Permission >&
      permissions() const;

  // string next_page_token = 2;
  void clear_next_page_token();
  static const int kNextPageTokenFieldNumber = 2;
  const ::std::string& next_page_token() const;
  void set_next_page_token(const ::std::string& value);
  #if LANG_CXX11
  void set_next_page_token(::std::string&& value);
  #endif
  void set_next_page_token(const char* value);
  void set_next_page_token(const char* value, size_t size);
  ::std::string* mutable_next_page_token();
  ::std::string* release_next_page_token();
  void set_allocated_next_page_token(::std::string* next_page_token);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_next_page_token();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_next_page_token(
      ::std::string* next_page_token);

  // @@protoc_insertion_point(class_scope:google.iam.admin.v1.QueryTestablePermissionsResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::RepeatedPtrField< ::google::iam::admin::v1::Permission > permissions_;
  ::google::protobuf::internal::ArenaStringPtr next_page_token_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fiam_2fadmin_2fv1_2fiam_2eproto::TableStruct;
  friend void ::protobuf_google_2fiam_2fadmin_2fv1_2fiam_2eproto::InitDefaultsQueryTestablePermissionsResponseImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ServiceAccount

// string name = 1;
inline void ServiceAccount::clear_name() {
  name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& ServiceAccount::name() const {
  // @@protoc_insertion_point(field_get:google.iam.admin.v1.ServiceAccount.name)
  return name_.Get();
}
inline void ServiceAccount::set_name(const ::std::string& value) {
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.iam.admin.v1.ServiceAccount.name)
}
#if LANG_CXX11
inline void ServiceAccount::set_name(::std::string&& value) {
  
  name_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:google.iam.admin.v1.ServiceAccount.name)
}
#endif
inline void ServiceAccount::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.iam.admin.v1.ServiceAccount.name)
}
inline void ServiceAccount::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.iam.admin.v1.ServiceAccount.name)
}
inline ::std::string* ServiceAccount::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:google.iam.admin.v1.ServiceAccount.name)
  return name_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ServiceAccount::release_name() {
  // @@protoc_insertion_point(field_release:google.iam.admin.v1.ServiceAccount.name)
  
  return name_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ServiceAccount::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.iam.admin.v1.ServiceAccount.name)
}
inline ::std::string* ServiceAccount::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.iam.admin.v1.ServiceAccount.name)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return name_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ServiceAccount::unsafe_arena_set_allocated_name(
    ::std::string* name) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (name != NULL) {
    
  } else {
    
  }
  name_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      name, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.iam.admin.v1.ServiceAccount.name)
}

// string project_id = 2;
inline void ServiceAccount::clear_project_id() {
  project_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& ServiceAccount::project_id() const {
  // @@protoc_insertion_point(field_get:google.iam.admin.v1.ServiceAccount.project_id)
  return project_id_.Get();
}
inline void ServiceAccount::set_project_id(const ::std::string& value) {
  
  project_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.iam.admin.v1.ServiceAccount.project_id)
}
#if LANG_CXX11
inline void ServiceAccount::set_project_id(::std::string&& value) {
  
  project_id_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:google.iam.admin.v1.ServiceAccount.project_id)
}
#endif
inline void ServiceAccount::set_project_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  project_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.iam.admin.v1.ServiceAccount.project_id)
}
inline void ServiceAccount::set_project_id(const char* value,
    size_t size) {
  
  project_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.iam.admin.v1.ServiceAccount.project_id)
}
inline ::std::string* ServiceAccount::mutable_project_id() {
  
  // @@protoc_insertion_point(field_mutable:google.iam.admin.v1.ServiceAccount.project_id)
  return project_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ServiceAccount::release_project_id() {
  // @@protoc_insertion_point(field_release:google.iam.admin.v1.ServiceAccount.project_id)
  
  return project_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ServiceAccount::set_allocated_project_id(::std::string* project_id) {
  if (project_id != NULL) {
    
  } else {
    
  }
  project_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), project_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.iam.admin.v1.ServiceAccount.project_id)
}
inline ::std::string* ServiceAccount::unsafe_arena_release_project_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.iam.admin.v1.ServiceAccount.project_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return project_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ServiceAccount::unsafe_arena_set_allocated_project_id(
    ::std::string* project_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (project_id != NULL) {
    
  } else {
    
  }
  project_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      project_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.iam.admin.v1.ServiceAccount.project_id)
}

// string unique_id = 4;
inline void ServiceAccount::clear_unique_id() {
  unique_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& ServiceAccount::unique_id() const {
  // @@protoc_insertion_point(field_get:google.iam.admin.v1.ServiceAccount.unique_id)
  return unique_id_.Get();
}
inline void ServiceAccount::set_unique_id(const ::std::string& value) {
  
  unique_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.iam.admin.v1.ServiceAccount.unique_id)
}
#if LANG_CXX11
inline void ServiceAccount::set_unique_id(::std::string&& value) {
  
  unique_id_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:google.iam.admin.v1.ServiceAccount.unique_id)
}
#endif
inline void ServiceAccount::set_unique_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  unique_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.iam.admin.v1.ServiceAccount.unique_id)
}
inline void ServiceAccount::set_unique_id(const char* value,
    size_t size) {
  
  unique_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.iam.admin.v1.ServiceAccount.unique_id)
}
inline ::std::string* ServiceAccount::mutable_unique_id() {
  
  // @@protoc_insertion_point(field_mutable:google.iam.admin.v1.ServiceAccount.unique_id)
  return unique_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ServiceAccount::release_unique_id() {
  // @@protoc_insertion_point(field_release:google.iam.admin.v1.ServiceAccount.unique_id)
  
  return unique_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ServiceAccount::set_allocated_unique_id(::std::string* unique_id) {
  if (unique_id != NULL) {
    
  } else {
    
  }
  unique_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), unique_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.iam.admin.v1.ServiceAccount.unique_id)
}
inline ::std::string* ServiceAccount::unsafe_arena_release_unique_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.iam.admin.v1.ServiceAccount.unique_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return unique_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ServiceAccount::unsafe_arena_set_allocated_unique_id(
    ::std::string* unique_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (unique_id != NULL) {
    
  } else {
    
  }
  unique_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      unique_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.iam.admin.v1.ServiceAccount.unique_id)
}

// string email = 5;
inline void ServiceAccount::clear_email() {
  email_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& ServiceAccount::email() const {
  // @@protoc_insertion_point(field_get:google.iam.admin.v1.ServiceAccount.email)
  return email_.Get();
}
inline void ServiceAccount::set_email(const ::std::string& value) {
  
  email_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.iam.admin.v1.ServiceAccount.email)
}
#if LANG_CXX11
inline void ServiceAccount::set_email(::std::string&& value) {
  
  email_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:google.iam.admin.v1.ServiceAccount.email)
}
#endif
inline void ServiceAccount::set_email(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  email_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.iam.admin.v1.ServiceAccount.email)
}
inline void ServiceAccount::set_email(const char* value,
    size_t size) {
  
  email_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.iam.admin.v1.ServiceAccount.email)
}
inline ::std::string* ServiceAccount::mutable_email() {
  
  // @@protoc_insertion_point(field_mutable:google.iam.admin.v1.ServiceAccount.email)
  return email_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ServiceAccount::release_email() {
  // @@protoc_insertion_point(field_release:google.iam.admin.v1.ServiceAccount.email)
  
  return email_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ServiceAccount::set_allocated_email(::std::string* email) {
  if (email != NULL) {
    
  } else {
    
  }
  email_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), email,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.iam.admin.v1.ServiceAccount.email)
}
inline ::std::string* ServiceAccount::unsafe_arena_release_email() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.iam.admin.v1.ServiceAccount.email)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return email_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ServiceAccount::unsafe_arena_set_allocated_email(
    ::std::string* email) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (email != NULL) {
    
  } else {
    
  }
  email_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      email, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.iam.admin.v1.ServiceAccount.email)
}

// string display_name = 6;
inline void ServiceAccount::clear_display_name() {
  display_name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& ServiceAccount::display_name() const {
  // @@protoc_insertion_point(field_get:google.iam.admin.v1.ServiceAccount.display_name)
  return display_name_.Get();
}
inline void ServiceAccount::set_display_name(const ::std::string& value) {
  
  display_name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.iam.admin.v1.ServiceAccount.display_name)
}
#if LANG_CXX11
inline void ServiceAccount::set_display_name(::std::string&& value) {
  
  display_name_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:google.iam.admin.v1.ServiceAccount.display_name)
}
#endif
inline void ServiceAccount::set_display_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  display_name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.iam.admin.v1.ServiceAccount.display_name)
}
inline void ServiceAccount::set_display_name(const char* value,
    size_t size) {
  
  display_name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.iam.admin.v1.ServiceAccount.display_name)
}
inline ::std::string* ServiceAccount::mutable_display_name() {
  
  // @@protoc_insertion_point(field_mutable:google.iam.admin.v1.ServiceAccount.display_name)
  return display_name_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ServiceAccount::release_display_name() {
  // @@protoc_insertion_point(field_release:google.iam.admin.v1.ServiceAccount.display_name)
  
  return display_name_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ServiceAccount::set_allocated_display_name(::std::string* display_name) {
  if (display_name != NULL) {
    
  } else {
    
  }
  display_name_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), display_name,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.iam.admin.v1.ServiceAccount.display_name)
}
inline ::std::string* ServiceAccount::unsafe_arena_release_display_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.iam.admin.v1.ServiceAccount.display_name)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return display_name_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ServiceAccount::unsafe_arena_set_allocated_display_name(
    ::std::string* display_name) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (display_name != NULL) {
    
  } else {
    
  }
  display_name_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      display_name, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.iam.admin.v1.ServiceAccount.display_name)
}

// bytes etag = 7;
inline void ServiceAccount::clear_etag() {
  etag_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& ServiceAccount::etag() const {
  // @@protoc_insertion_point(field_get:google.iam.admin.v1.ServiceAccount.etag)
  return etag_.Get();
}
inline void ServiceAccount::set_etag(const ::std::string& value) {
  
  etag_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.iam.admin.v1.ServiceAccount.etag)
}
#if LANG_CXX11
inline void ServiceAccount::set_etag(::std::string&& value) {
  
  etag_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:google.iam.admin.v1.ServiceAccount.etag)
}
#endif
inline void ServiceAccount::set_etag(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  etag_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.iam.admin.v1.ServiceAccount.etag)
}
inline void ServiceAccount::set_etag(const void* value,
    size_t size) {
  
  etag_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.iam.admin.v1.ServiceAccount.etag)
}
inline ::std::string* ServiceAccount::mutable_etag() {
  
  // @@protoc_insertion_point(field_mutable:google.iam.admin.v1.ServiceAccount.etag)
  return etag_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ServiceAccount::release_etag() {
  // @@protoc_insertion_point(field_release:google.iam.admin.v1.ServiceAccount.etag)
  
  return etag_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ServiceAccount::set_allocated_etag(::std::string* etag) {
  if (etag != NULL) {
    
  } else {
    
  }
  etag_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), etag,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.iam.admin.v1.ServiceAccount.etag)
}
inline ::std::string* ServiceAccount::unsafe_arena_release_etag() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.iam.admin.v1.ServiceAccount.etag)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return etag_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ServiceAccount::unsafe_arena_set_allocated_etag(
    ::std::string* etag) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (etag != NULL) {
    
  } else {
    
  }
  etag_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      etag, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.iam.admin.v1.ServiceAccount.etag)
}

// string oauth2_client_id = 9;
inline void ServiceAccount::clear_oauth2_client_id() {
  oauth2_client_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& ServiceAccount::oauth2_client_id() const {
  // @@protoc_insertion_point(field_get:google.iam.admin.v1.ServiceAccount.oauth2_client_id)
  return oauth2_client_id_.Get();
}
inline void ServiceAccount::set_oauth2_client_id(const ::std::string& value) {
  
  oauth2_client_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.iam.admin.v1.ServiceAccount.oauth2_client_id)
}
#if LANG_CXX11
inline void ServiceAccount::set_oauth2_client_id(::std::string&& value) {
  
  oauth2_client_id_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:google.iam.admin.v1.ServiceAccount.oauth2_client_id)
}
#endif
inline void ServiceAccount::set_oauth2_client_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  oauth2_client_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.iam.admin.v1.ServiceAccount.oauth2_client_id)
}
inline void ServiceAccount::set_oauth2_client_id(const char* value,
    size_t size) {
  
  oauth2_client_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.iam.admin.v1.ServiceAccount.oauth2_client_id)
}
inline ::std::string* ServiceAccount::mutable_oauth2_client_id() {
  
  // @@protoc_insertion_point(field_mutable:google.iam.admin.v1.ServiceAccount.oauth2_client_id)
  return oauth2_client_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ServiceAccount::release_oauth2_client_id() {
  // @@protoc_insertion_point(field_release:google.iam.admin.v1.ServiceAccount.oauth2_client_id)
  
  return oauth2_client_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ServiceAccount::set_allocated_oauth2_client_id(::std::string* oauth2_client_id) {
  if (oauth2_client_id != NULL) {
    
  } else {
    
  }
  oauth2_client_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), oauth2_client_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.iam.admin.v1.ServiceAccount.oauth2_client_id)
}
inline ::std::string* ServiceAccount::unsafe_arena_release_oauth2_client_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.iam.admin.v1.ServiceAccount.oauth2_client_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return oauth2_client_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ServiceAccount::unsafe_arena_set_allocated_oauth2_client_id(
    ::std::string* oauth2_client_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (oauth2_client_id != NULL) {
    
  } else {
    
  }
  oauth2_client_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      oauth2_client_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.iam.admin.v1.ServiceAccount.oauth2_client_id)
}

// -------------------------------------------------------------------

// CreateServiceAccountRequest

// string name = 1;
inline void CreateServiceAccountRequest::clear_name() {
  name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& CreateServiceAccountRequest::name() const {
  // @@protoc_insertion_point(field_get:google.iam.admin.v1.CreateServiceAccountRequest.name)
  return name_.Get();
}
inline void CreateServiceAccountRequest::set_name(const ::std::string& value) {
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.iam.admin.v1.CreateServiceAccountRequest.name)
}
#if LANG_CXX11
inline void CreateServiceAccountRequest::set_name(::std::string&& value) {
  
  name_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:google.iam.admin.v1.CreateServiceAccountRequest.name)
}
#endif
inline void CreateServiceAccountRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.iam.admin.v1.CreateServiceAccountRequest.name)
}
inline void CreateServiceAccountRequest::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.iam.admin.v1.CreateServiceAccountRequest.name)
}
inline ::std::string* CreateServiceAccountRequest::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:google.iam.admin.v1.CreateServiceAccountRequest.name)
  return name_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* CreateServiceAccountRequest::release_name() {
  // @@protoc_insertion_point(field_release:google.iam.admin.v1.CreateServiceAccountRequest.name)
  
  return name_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void CreateServiceAccountRequest::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.iam.admin.v1.CreateServiceAccountRequest.name)
}
inline ::std::string* CreateServiceAccountRequest::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.iam.admin.v1.CreateServiceAccountRequest.name)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return name_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void CreateServiceAccountRequest::unsafe_arena_set_allocated_name(
    ::std::string* name) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (name != NULL) {
    
  } else {
    
  }
  name_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      name, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.iam.admin.v1.CreateServiceAccountRequest.name)
}

// string account_id = 2;
inline void CreateServiceAccountRequest::clear_account_id() {
  account_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& CreateServiceAccountRequest::account_id() const {
  // @@protoc_insertion_point(field_get:google.iam.admin.v1.CreateServiceAccountRequest.account_id)
  return account_id_.Get();
}
inline void CreateServiceAccountRequest::set_account_id(const ::std::string& value) {
  
  account_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.iam.admin.v1.CreateServiceAccountRequest.account_id)
}
#if LANG_CXX11
inline void CreateServiceAccountRequest::set_account_id(::std::string&& value) {
  
  account_id_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:google.iam.admin.v1.CreateServiceAccountRequest.account_id)
}
#endif
inline void CreateServiceAccountRequest::set_account_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  account_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.iam.admin.v1.CreateServiceAccountRequest.account_id)
}
inline void CreateServiceAccountRequest::set_account_id(const char* value,
    size_t size) {
  
  account_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.iam.admin.v1.CreateServiceAccountRequest.account_id)
}
inline ::std::string* CreateServiceAccountRequest::mutable_account_id() {
  
  // @@protoc_insertion_point(field_mutable:google.iam.admin.v1.CreateServiceAccountRequest.account_id)
  return account_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* CreateServiceAccountRequest::release_account_id() {
  // @@protoc_insertion_point(field_release:google.iam.admin.v1.CreateServiceAccountRequest.account_id)
  
  return account_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void CreateServiceAccountRequest::set_allocated_account_id(::std::string* account_id) {
  if (account_id != NULL) {
    
  } else {
    
  }
  account_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), account_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.iam.admin.v1.CreateServiceAccountRequest.account_id)
}
inline ::std::string* CreateServiceAccountRequest::unsafe_arena_release_account_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.iam.admin.v1.CreateServiceAccountRequest.account_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return account_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void CreateServiceAccountRequest::unsafe_arena_set_allocated_account_id(
    ::std::string* account_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (account_id != NULL) {
    
  } else {
    
  }
  account_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      account_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.iam.admin.v1.CreateServiceAccountRequest.account_id)
}

// .google.iam.admin.v1.ServiceAccount service_account = 3;
inline bool CreateServiceAccountRequest::has_service_account() const {
  return this != internal_default_instance() && service_account_ != NULL;
}
inline void CreateServiceAccountRequest::clear_service_account() {
  if (GetArenaNoVirtual() == NULL && service_account_ != NULL) {
    delete service_account_;
  }
  service_account_ = NULL;
}
inline const ::google::iam::admin::v1::ServiceAccount& CreateServiceAccountRequest::service_account() const {
  const ::google::iam::admin::v1::ServiceAccount* p = service_account_;
  // @@protoc_insertion_point(field_get:google.iam.admin.v1.CreateServiceAccountRequest.service_account)
  return p != NULL ? *p : *reinterpret_cast<const ::google::iam::admin::v1::ServiceAccount*>(
      &::google::iam::admin::v1::_ServiceAccount_default_instance_);
}
inline ::google::iam::admin::v1::ServiceAccount* CreateServiceAccountRequest::release_service_account() {
  // @@protoc_insertion_point(field_release:google.iam.admin.v1.CreateServiceAccountRequest.service_account)
  
  ::google::iam::admin::v1::ServiceAccount* temp = service_account_;
  if (GetArenaNoVirtual() != NULL) {
    temp = ::google::protobuf::internal::DuplicateIfNonNull(temp, NULL);
  }
  service_account_ = NULL;
  return temp;
}
inline ::google::iam::admin::v1::ServiceAccount* CreateServiceAccountRequest::unsafe_arena_release_service_account() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.iam.admin.v1.CreateServiceAccountRequest.service_account)
  
  ::google::iam::admin::v1::ServiceAccount* temp = service_account_;
  service_account_ = NULL;
  return temp;
}
inline ::google::iam::admin::v1::ServiceAccount* CreateServiceAccountRequest::mutable_service_account() {
  
  if (service_account_ == NULL) {
    _slow_mutable_service_account();
  }
  // @@protoc_insertion_point(field_mutable:google.iam.admin.v1.CreateServiceAccountRequest.service_account)
  return service_account_;
}
inline void CreateServiceAccountRequest::set_allocated_service_account(::google::iam::admin::v1::ServiceAccount* service_account) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete service_account_;
  }
  if (service_account) {
    ::google::protobuf::Arena* submessage_arena =
      ::google::protobuf::Arena::GetArena(service_account);
    if (message_arena != submessage_arena) {
      service_account = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, service_account, submessage_arena);
    }
    
  } else {
    
  }
  service_account_ = service_account;
  // @@protoc_insertion_point(field_set_allocated:google.iam.admin.v1.CreateServiceAccountRequest.service_account)
}

// -------------------------------------------------------------------

// ListServiceAccountsRequest

// string name = 1;
inline void ListServiceAccountsRequest::clear_name() {
  name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& ListServiceAccountsRequest::name() const {
  // @@protoc_insertion_point(field_get:google.iam.admin.v1.ListServiceAccountsRequest.name)
  return name_.Get();
}
inline void ListServiceAccountsRequest::set_name(const ::std::string& value) {
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.iam.admin.v1.ListServiceAccountsRequest.name)
}
#if LANG_CXX11
inline void ListServiceAccountsRequest::set_name(::std::string&& value) {
  
  name_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:google.iam.admin.v1.ListServiceAccountsRequest.name)
}
#endif
inline void ListServiceAccountsRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.iam.admin.v1.ListServiceAccountsRequest.name)
}
inline void ListServiceAccountsRequest::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.iam.admin.v1.ListServiceAccountsRequest.name)
}
inline ::std::string* ListServiceAccountsRequest::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:google.iam.admin.v1.ListServiceAccountsRequest.name)
  return name_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ListServiceAccountsRequest::release_name() {
  // @@protoc_insertion_point(field_release:google.iam.admin.v1.ListServiceAccountsRequest.name)
  
  return name_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ListServiceAccountsRequest::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.iam.admin.v1.ListServiceAccountsRequest.name)
}
inline ::std::string* ListServiceAccountsRequest::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.iam.admin.v1.ListServiceAccountsRequest.name)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return name_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ListServiceAccountsRequest::unsafe_arena_set_allocated_name(
    ::std::string* name) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (name != NULL) {
    
  } else {
    
  }
  name_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      name, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.iam.admin.v1.ListServiceAccountsRequest.name)
}

// int32 page_size = 2;
inline void ListServiceAccountsRequest::clear_page_size() {
  page_size_ = 0;
}
inline ::google::protobuf::int32 ListServiceAccountsRequest::page_size() const {
  // @@protoc_insertion_point(field_get:google.iam.admin.v1.ListServiceAccountsRequest.page_size)
  return page_size_;
}
inline void ListServiceAccountsRequest::set_page_size(::google::protobuf::int32 value) {
  
  page_size_ = value;
  // @@protoc_insertion_point(field_set:google.iam.admin.v1.ListServiceAccountsRequest.page_size)
}

// string page_token = 3;
inline void ListServiceAccountsRequest::clear_page_token() {
  page_token_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& ListServiceAccountsRequest::page_token() const {
  // @@protoc_insertion_point(field_get:google.iam.admin.v1.ListServiceAccountsRequest.page_token)
  return page_token_.Get();
}
inline void ListServiceAccountsRequest::set_page_token(const ::std::string& value) {
  
  page_token_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.iam.admin.v1.ListServiceAccountsRequest.page_token)
}
#if LANG_CXX11
inline void ListServiceAccountsRequest::set_page_token(::std::string&& value) {
  
  page_token_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:google.iam.admin.v1.ListServiceAccountsRequest.page_token)
}
#endif
inline void ListServiceAccountsRequest::set_page_token(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  page_token_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.iam.admin.v1.ListServiceAccountsRequest.page_token)
}
inline void ListServiceAccountsRequest::set_page_token(const char* value,
    size_t size) {
  
  page_token_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.iam.admin.v1.ListServiceAccountsRequest.page_token)
}
inline ::std::string* ListServiceAccountsRequest::mutable_page_token() {
  
  // @@protoc_insertion_point(field_mutable:google.iam.admin.v1.ListServiceAccountsRequest.page_token)
  return page_token_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ListServiceAccountsRequest::release_page_token() {
  // @@protoc_insertion_point(field_release:google.iam.admin.v1.ListServiceAccountsRequest.page_token)
  
  return page_token_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ListServiceAccountsRequest::set_allocated_page_token(::std::string* page_token) {
  if (page_token != NULL) {
    
  } else {
    
  }
  page_token_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), page_token,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.iam.admin.v1.ListServiceAccountsRequest.page_token)
}
inline ::std::string* ListServiceAccountsRequest::unsafe_arena_release_page_token() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.iam.admin.v1.ListServiceAccountsRequest.page_token)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return page_token_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ListServiceAccountsRequest::unsafe_arena_set_allocated_page_token(
    ::std::string* page_token) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (page_token != NULL) {
    
  } else {
    
  }
  page_token_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      page_token, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.iam.admin.v1.ListServiceAccountsRequest.page_token)
}

// -------------------------------------------------------------------

// ListServiceAccountsResponse

// repeated .google.iam.admin.v1.ServiceAccount accounts = 1;
inline int ListServiceAccountsResponse::accounts_size() const {
  return accounts_.size();
}
inline void ListServiceAccountsResponse::clear_accounts() {
  accounts_.Clear();
}
inline const ::google::iam::admin::v1::ServiceAccount& ListServiceAccountsResponse::accounts(int index) const {
  // @@protoc_insertion_point(field_get:google.iam.admin.v1.ListServiceAccountsResponse.accounts)
  return accounts_.Get(index);
}
inline ::google::iam::admin::v1::ServiceAccount* ListServiceAccountsResponse::mutable_accounts(int index) {
  // @@protoc_insertion_point(field_mutable:google.iam.admin.v1.ListServiceAccountsResponse.accounts)
  return accounts_.Mutable(index);
}
inline ::google::iam::admin::v1::ServiceAccount* ListServiceAccountsResponse::add_accounts() {
  // @@protoc_insertion_point(field_add:google.iam.admin.v1.ListServiceAccountsResponse.accounts)
  return accounts_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::google::iam::admin::v1::ServiceAccount >*
ListServiceAccountsResponse::mutable_accounts() {
  // @@protoc_insertion_point(field_mutable_list:google.iam.admin.v1.ListServiceAccountsResponse.accounts)
  return &accounts_;
}
inline const ::google::protobuf::RepeatedPtrField< ::google::iam::admin::v1::ServiceAccount >&
ListServiceAccountsResponse::accounts() const {
  // @@protoc_insertion_point(field_list:google.iam.admin.v1.ListServiceAccountsResponse.accounts)
  return accounts_;
}

// string next_page_token = 2;
inline void ListServiceAccountsResponse::clear_next_page_token() {
  next_page_token_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& ListServiceAccountsResponse::next_page_token() const {
  // @@protoc_insertion_point(field_get:google.iam.admin.v1.ListServiceAccountsResponse.next_page_token)
  return next_page_token_.Get();
}
inline void ListServiceAccountsResponse::set_next_page_token(const ::std::string& value) {
  
  next_page_token_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.iam.admin.v1.ListServiceAccountsResponse.next_page_token)
}
#if LANG_CXX11
inline void ListServiceAccountsResponse::set_next_page_token(::std::string&& value) {
  
  next_page_token_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:google.iam.admin.v1.ListServiceAccountsResponse.next_page_token)
}
#endif
inline void ListServiceAccountsResponse::set_next_page_token(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  next_page_token_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.iam.admin.v1.ListServiceAccountsResponse.next_page_token)
}
inline void ListServiceAccountsResponse::set_next_page_token(const char* value,
    size_t size) {
  
  next_page_token_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.iam.admin.v1.ListServiceAccountsResponse.next_page_token)
}
inline ::std::string* ListServiceAccountsResponse::mutable_next_page_token() {
  
  // @@protoc_insertion_point(field_mutable:google.iam.admin.v1.ListServiceAccountsResponse.next_page_token)
  return next_page_token_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ListServiceAccountsResponse::release_next_page_token() {
  // @@protoc_insertion_point(field_release:google.iam.admin.v1.ListServiceAccountsResponse.next_page_token)
  
  return next_page_token_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ListServiceAccountsResponse::set_allocated_next_page_token(::std::string* next_page_token) {
  if (next_page_token != NULL) {
    
  } else {
    
  }
  next_page_token_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), next_page_token,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.iam.admin.v1.ListServiceAccountsResponse.next_page_token)
}
inline ::std::string* ListServiceAccountsResponse::unsafe_arena_release_next_page_token() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.iam.admin.v1.ListServiceAccountsResponse.next_page_token)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return next_page_token_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ListServiceAccountsResponse::unsafe_arena_set_allocated_next_page_token(
    ::std::string* next_page_token) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (next_page_token != NULL) {
    
  } else {
    
  }
  next_page_token_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      next_page_token, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.iam.admin.v1.ListServiceAccountsResponse.next_page_token)
}

// -------------------------------------------------------------------

// GetServiceAccountRequest

// string name = 1;
inline void GetServiceAccountRequest::clear_name() {
  name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& GetServiceAccountRequest::name() const {
  // @@protoc_insertion_point(field_get:google.iam.admin.v1.GetServiceAccountRequest.name)
  return name_.Get();
}
inline void GetServiceAccountRequest::set_name(const ::std::string& value) {
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.iam.admin.v1.GetServiceAccountRequest.name)
}
#if LANG_CXX11
inline void GetServiceAccountRequest::set_name(::std::string&& value) {
  
  name_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:google.iam.admin.v1.GetServiceAccountRequest.name)
}
#endif
inline void GetServiceAccountRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.iam.admin.v1.GetServiceAccountRequest.name)
}
inline void GetServiceAccountRequest::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.iam.admin.v1.GetServiceAccountRequest.name)
}
inline ::std::string* GetServiceAccountRequest::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:google.iam.admin.v1.GetServiceAccountRequest.name)
  return name_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* GetServiceAccountRequest::release_name() {
  // @@protoc_insertion_point(field_release:google.iam.admin.v1.GetServiceAccountRequest.name)
  
  return name_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void GetServiceAccountRequest::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.iam.admin.v1.GetServiceAccountRequest.name)
}
inline ::std::string* GetServiceAccountRequest::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.iam.admin.v1.GetServiceAccountRequest.name)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return name_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void GetServiceAccountRequest::unsafe_arena_set_allocated_name(
    ::std::string* name) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (name != NULL) {
    
  } else {
    
  }
  name_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      name, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.iam.admin.v1.GetServiceAccountRequest.name)
}

// -------------------------------------------------------------------

// DeleteServiceAccountRequest

// string name = 1;
inline void DeleteServiceAccountRequest::clear_name() {
  name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& DeleteServiceAccountRequest::name() const {
  // @@protoc_insertion_point(field_get:google.iam.admin.v1.DeleteServiceAccountRequest.name)
  return name_.Get();
}
inline void DeleteServiceAccountRequest::set_name(const ::std::string& value) {
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.iam.admin.v1.DeleteServiceAccountRequest.name)
}
#if LANG_CXX11
inline void DeleteServiceAccountRequest::set_name(::std::string&& value) {
  
  name_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:google.iam.admin.v1.DeleteServiceAccountRequest.name)
}
#endif
inline void DeleteServiceAccountRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.iam.admin.v1.DeleteServiceAccountRequest.name)
}
inline void DeleteServiceAccountRequest::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.iam.admin.v1.DeleteServiceAccountRequest.name)
}
inline ::std::string* DeleteServiceAccountRequest::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:google.iam.admin.v1.DeleteServiceAccountRequest.name)
  return name_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* DeleteServiceAccountRequest::release_name() {
  // @@protoc_insertion_point(field_release:google.iam.admin.v1.DeleteServiceAccountRequest.name)
  
  return name_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void DeleteServiceAccountRequest::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.iam.admin.v1.DeleteServiceAccountRequest.name)
}
inline ::std::string* DeleteServiceAccountRequest::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.iam.admin.v1.DeleteServiceAccountRequest.name)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return name_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void DeleteServiceAccountRequest::unsafe_arena_set_allocated_name(
    ::std::string* name) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (name != NULL) {
    
  } else {
    
  }
  name_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      name, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.iam.admin.v1.DeleteServiceAccountRequest.name)
}

// -------------------------------------------------------------------

// ListServiceAccountKeysRequest

// string name = 1;
inline void ListServiceAccountKeysRequest::clear_name() {
  name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& ListServiceAccountKeysRequest::name() const {
  // @@protoc_insertion_point(field_get:google.iam.admin.v1.ListServiceAccountKeysRequest.name)
  return name_.Get();
}
inline void ListServiceAccountKeysRequest::set_name(const ::std::string& value) {
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.iam.admin.v1.ListServiceAccountKeysRequest.name)
}
#if LANG_CXX11
inline void ListServiceAccountKeysRequest::set_name(::std::string&& value) {
  
  name_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:google.iam.admin.v1.ListServiceAccountKeysRequest.name)
}
#endif
inline void ListServiceAccountKeysRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.iam.admin.v1.ListServiceAccountKeysRequest.name)
}
inline void ListServiceAccountKeysRequest::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.iam.admin.v1.ListServiceAccountKeysRequest.name)
}
inline ::std::string* ListServiceAccountKeysRequest::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:google.iam.admin.v1.ListServiceAccountKeysRequest.name)
  return name_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ListServiceAccountKeysRequest::release_name() {
  // @@protoc_insertion_point(field_release:google.iam.admin.v1.ListServiceAccountKeysRequest.name)
  
  return name_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ListServiceAccountKeysRequest::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.iam.admin.v1.ListServiceAccountKeysRequest.name)
}
inline ::std::string* ListServiceAccountKeysRequest::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.iam.admin.v1.ListServiceAccountKeysRequest.name)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return name_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ListServiceAccountKeysRequest::unsafe_arena_set_allocated_name(
    ::std::string* name) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (name != NULL) {
    
  } else {
    
  }
  name_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      name, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.iam.admin.v1.ListServiceAccountKeysRequest.name)
}

// repeated .google.iam.admin.v1.ListServiceAccountKeysRequest.KeyType key_types = 2;
inline int ListServiceAccountKeysRequest::key_types_size() const {
  return key_types_.size();
}
inline void ListServiceAccountKeysRequest::clear_key_types() {
  key_types_.Clear();
}
inline ::google::iam::admin::v1::ListServiceAccountKeysRequest_KeyType ListServiceAccountKeysRequest::key_types(int index) const {
  // @@protoc_insertion_point(field_get:google.iam.admin.v1.ListServiceAccountKeysRequest.key_types)
  return static_cast< ::google::iam::admin::v1::ListServiceAccountKeysRequest_KeyType >(key_types_.Get(index));
}
inline void ListServiceAccountKeysRequest::set_key_types(int index, ::google::iam::admin::v1::ListServiceAccountKeysRequest_KeyType value) {
  key_types_.Set(index, value);
  // @@protoc_insertion_point(field_set:google.iam.admin.v1.ListServiceAccountKeysRequest.key_types)
}
inline void ListServiceAccountKeysRequest::add_key_types(::google::iam::admin::v1::ListServiceAccountKeysRequest_KeyType value) {
  key_types_.Add(value);
  // @@protoc_insertion_point(field_add:google.iam.admin.v1.ListServiceAccountKeysRequest.key_types)
}
inline const ::google::protobuf::RepeatedField<int>&
ListServiceAccountKeysRequest::key_types() const {
  // @@protoc_insertion_point(field_list:google.iam.admin.v1.ListServiceAccountKeysRequest.key_types)
  return key_types_;
}
inline ::google::protobuf::RepeatedField<int>*
ListServiceAccountKeysRequest::mutable_key_types() {
  // @@protoc_insertion_point(field_mutable_list:google.iam.admin.v1.ListServiceAccountKeysRequest.key_types)
  return &key_types_;
}

// -------------------------------------------------------------------

// ListServiceAccountKeysResponse

// repeated .google.iam.admin.v1.ServiceAccountKey keys = 1;
inline int ListServiceAccountKeysResponse::keys_size() const {
  return keys_.size();
}
inline void ListServiceAccountKeysResponse::clear_keys() {
  keys_.Clear();
}
inline const ::google::iam::admin::v1::ServiceAccountKey& ListServiceAccountKeysResponse::keys(int index) const {
  // @@protoc_insertion_point(field_get:google.iam.admin.v1.ListServiceAccountKeysResponse.keys)
  return keys_.Get(index);
}
inline ::google::iam::admin::v1::ServiceAccountKey* ListServiceAccountKeysResponse::mutable_keys(int index) {
  // @@protoc_insertion_point(field_mutable:google.iam.admin.v1.ListServiceAccountKeysResponse.keys)
  return keys_.Mutable(index);
}
inline ::google::iam::admin::v1::ServiceAccountKey* ListServiceAccountKeysResponse::add_keys() {
  // @@protoc_insertion_point(field_add:google.iam.admin.v1.ListServiceAccountKeysResponse.keys)
  return keys_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::google::iam::admin::v1::ServiceAccountKey >*
ListServiceAccountKeysResponse::mutable_keys() {
  // @@protoc_insertion_point(field_mutable_list:google.iam.admin.v1.ListServiceAccountKeysResponse.keys)
  return &keys_;
}
inline const ::google::protobuf::RepeatedPtrField< ::google::iam::admin::v1::ServiceAccountKey >&
ListServiceAccountKeysResponse::keys() const {
  // @@protoc_insertion_point(field_list:google.iam.admin.v1.ListServiceAccountKeysResponse.keys)
  return keys_;
}

// -------------------------------------------------------------------

// GetServiceAccountKeyRequest

// string name = 1;
inline void GetServiceAccountKeyRequest::clear_name() {
  name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& GetServiceAccountKeyRequest::name() const {
  // @@protoc_insertion_point(field_get:google.iam.admin.v1.GetServiceAccountKeyRequest.name)
  return name_.Get();
}
inline void GetServiceAccountKeyRequest::set_name(const ::std::string& value) {
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.iam.admin.v1.GetServiceAccountKeyRequest.name)
}
#if LANG_CXX11
inline void GetServiceAccountKeyRequest::set_name(::std::string&& value) {
  
  name_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:google.iam.admin.v1.GetServiceAccountKeyRequest.name)
}
#endif
inline void GetServiceAccountKeyRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.iam.admin.v1.GetServiceAccountKeyRequest.name)
}
inline void GetServiceAccountKeyRequest::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.iam.admin.v1.GetServiceAccountKeyRequest.name)
}
inline ::std::string* GetServiceAccountKeyRequest::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:google.iam.admin.v1.GetServiceAccountKeyRequest.name)
  return name_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* GetServiceAccountKeyRequest::release_name() {
  // @@protoc_insertion_point(field_release:google.iam.admin.v1.GetServiceAccountKeyRequest.name)
  
  return name_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void GetServiceAccountKeyRequest::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.iam.admin.v1.GetServiceAccountKeyRequest.name)
}
inline ::std::string* GetServiceAccountKeyRequest::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.iam.admin.v1.GetServiceAccountKeyRequest.name)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return name_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void GetServiceAccountKeyRequest::unsafe_arena_set_allocated_name(
    ::std::string* name) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (name != NULL) {
    
  } else {
    
  }
  name_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      name, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.iam.admin.v1.GetServiceAccountKeyRequest.name)
}

// .google.iam.admin.v1.ServiceAccountPublicKeyType public_key_type = 2;
inline void GetServiceAccountKeyRequest::clear_public_key_type() {
  public_key_type_ = 0;
}
inline ::google::iam::admin::v1::ServiceAccountPublicKeyType GetServiceAccountKeyRequest::public_key_type() const {
  // @@protoc_insertion_point(field_get:google.iam.admin.v1.GetServiceAccountKeyRequest.public_key_type)
  return static_cast< ::google::iam::admin::v1::ServiceAccountPublicKeyType >(public_key_type_);
}
inline void GetServiceAccountKeyRequest::set_public_key_type(::google::iam::admin::v1::ServiceAccountPublicKeyType value) {
  
  public_key_type_ = value;
  // @@protoc_insertion_point(field_set:google.iam.admin.v1.GetServiceAccountKeyRequest.public_key_type)
}

// -------------------------------------------------------------------

// ServiceAccountKey

// string name = 1;
inline void ServiceAccountKey::clear_name() {
  name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& ServiceAccountKey::name() const {
  // @@protoc_insertion_point(field_get:google.iam.admin.v1.ServiceAccountKey.name)
  return name_.Get();
}
inline void ServiceAccountKey::set_name(const ::std::string& value) {
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.iam.admin.v1.ServiceAccountKey.name)
}
#if LANG_CXX11
inline void ServiceAccountKey::set_name(::std::string&& value) {
  
  name_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:google.iam.admin.v1.ServiceAccountKey.name)
}
#endif
inline void ServiceAccountKey::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.iam.admin.v1.ServiceAccountKey.name)
}
inline void ServiceAccountKey::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.iam.admin.v1.ServiceAccountKey.name)
}
inline ::std::string* ServiceAccountKey::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:google.iam.admin.v1.ServiceAccountKey.name)
  return name_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ServiceAccountKey::release_name() {
  // @@protoc_insertion_point(field_release:google.iam.admin.v1.ServiceAccountKey.name)
  
  return name_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ServiceAccountKey::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.iam.admin.v1.ServiceAccountKey.name)
}
inline ::std::string* ServiceAccountKey::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.iam.admin.v1.ServiceAccountKey.name)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return name_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ServiceAccountKey::unsafe_arena_set_allocated_name(
    ::std::string* name) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (name != NULL) {
    
  } else {
    
  }
  name_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      name, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.iam.admin.v1.ServiceAccountKey.name)
}

// .google.iam.admin.v1.ServiceAccountPrivateKeyType private_key_type = 2;
inline void ServiceAccountKey::clear_private_key_type() {
  private_key_type_ = 0;
}
inline ::google::iam::admin::v1::ServiceAccountPrivateKeyType ServiceAccountKey::private_key_type() const {
  // @@protoc_insertion_point(field_get:google.iam.admin.v1.ServiceAccountKey.private_key_type)
  return static_cast< ::google::iam::admin::v1::ServiceAccountPrivateKeyType >(private_key_type_);
}
inline void ServiceAccountKey::set_private_key_type(::google::iam::admin::v1::ServiceAccountPrivateKeyType value) {
  
  private_key_type_ = value;
  // @@protoc_insertion_point(field_set:google.iam.admin.v1.ServiceAccountKey.private_key_type)
}

// .google.iam.admin.v1.ServiceAccountKeyAlgorithm key_algorithm = 8;
inline void ServiceAccountKey::clear_key_algorithm() {
  key_algorithm_ = 0;
}
inline ::google::iam::admin::v1::ServiceAccountKeyAlgorithm ServiceAccountKey::key_algorithm() const {
  // @@protoc_insertion_point(field_get:google.iam.admin.v1.ServiceAccountKey.key_algorithm)
  return static_cast< ::google::iam::admin::v1::ServiceAccountKeyAlgorithm >(key_algorithm_);
}
inline void ServiceAccountKey::set_key_algorithm(::google::iam::admin::v1::ServiceAccountKeyAlgorithm value) {
  
  key_algorithm_ = value;
  // @@protoc_insertion_point(field_set:google.iam.admin.v1.ServiceAccountKey.key_algorithm)
}

// bytes private_key_data = 3;
inline void ServiceAccountKey::clear_private_key_data() {
  private_key_data_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& ServiceAccountKey::private_key_data() const {
  // @@protoc_insertion_point(field_get:google.iam.admin.v1.ServiceAccountKey.private_key_data)
  return private_key_data_.Get();
}
inline void ServiceAccountKey::set_private_key_data(const ::std::string& value) {
  
  private_key_data_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.iam.admin.v1.ServiceAccountKey.private_key_data)
}
#if LANG_CXX11
inline void ServiceAccountKey::set_private_key_data(::std::string&& value) {
  
  private_key_data_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:google.iam.admin.v1.ServiceAccountKey.private_key_data)
}
#endif
inline void ServiceAccountKey::set_private_key_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  private_key_data_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.iam.admin.v1.ServiceAccountKey.private_key_data)
}
inline void ServiceAccountKey::set_private_key_data(const void* value,
    size_t size) {
  
  private_key_data_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.iam.admin.v1.ServiceAccountKey.private_key_data)
}
inline ::std::string* ServiceAccountKey::mutable_private_key_data() {
  
  // @@protoc_insertion_point(field_mutable:google.iam.admin.v1.ServiceAccountKey.private_key_data)
  return private_key_data_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ServiceAccountKey::release_private_key_data() {
  // @@protoc_insertion_point(field_release:google.iam.admin.v1.ServiceAccountKey.private_key_data)
  
  return private_key_data_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ServiceAccountKey::set_allocated_private_key_data(::std::string* private_key_data) {
  if (private_key_data != NULL) {
    
  } else {
    
  }
  private_key_data_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), private_key_data,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.iam.admin.v1.ServiceAccountKey.private_key_data)
}
inline ::std::string* ServiceAccountKey::unsafe_arena_release_private_key_data() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.iam.admin.v1.ServiceAccountKey.private_key_data)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return private_key_data_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ServiceAccountKey::unsafe_arena_set_allocated_private_key_data(
    ::std::string* private_key_data) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (private_key_data != NULL) {
    
  } else {
    
  }
  private_key_data_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      private_key_data, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.iam.admin.v1.ServiceAccountKey.private_key_data)
}

// bytes public_key_data = 7;
inline void ServiceAccountKey::clear_public_key_data() {
  public_key_data_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& ServiceAccountKey::public_key_data() const {
  // @@protoc_insertion_point(field_get:google.iam.admin.v1.ServiceAccountKey.public_key_data)
  return public_key_data_.Get();
}
inline void ServiceAccountKey::set_public_key_data(const ::std::string& value) {
  
  public_key_data_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.iam.admin.v1.ServiceAccountKey.public_key_data)
}
#if LANG_CXX11
inline void ServiceAccountKey::set_public_key_data(::std::string&& value) {
  
  public_key_data_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:google.iam.admin.v1.ServiceAccountKey.public_key_data)
}
#endif
inline void ServiceAccountKey::set_public_key_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  public_key_data_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.iam.admin.v1.ServiceAccountKey.public_key_data)
}
inline void ServiceAccountKey::set_public_key_data(const void* value,
    size_t size) {
  
  public_key_data_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.iam.admin.v1.ServiceAccountKey.public_key_data)
}
inline ::std::string* ServiceAccountKey::mutable_public_key_data() {
  
  // @@protoc_insertion_point(field_mutable:google.iam.admin.v1.ServiceAccountKey.public_key_data)
  return public_key_data_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ServiceAccountKey::release_public_key_data() {
  // @@protoc_insertion_point(field_release:google.iam.admin.v1.ServiceAccountKey.public_key_data)
  
  return public_key_data_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ServiceAccountKey::set_allocated_public_key_data(::std::string* public_key_data) {
  if (public_key_data != NULL) {
    
  } else {
    
  }
  public_key_data_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), public_key_data,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.iam.admin.v1.ServiceAccountKey.public_key_data)
}
inline ::std::string* ServiceAccountKey::unsafe_arena_release_public_key_data() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.iam.admin.v1.ServiceAccountKey.public_key_data)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return public_key_data_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ServiceAccountKey::unsafe_arena_set_allocated_public_key_data(
    ::std::string* public_key_data) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (public_key_data != NULL) {
    
  } else {
    
  }
  public_key_data_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      public_key_data, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.iam.admin.v1.ServiceAccountKey.public_key_data)
}

// .google.protobuf.Timestamp valid_after_time = 4;
inline bool ServiceAccountKey::has_valid_after_time() const {
  return this != internal_default_instance() && valid_after_time_ != NULL;
}
inline const ::google::protobuf::Timestamp& ServiceAccountKey::valid_after_time() const {
  const ::google::protobuf::Timestamp* p = valid_after_time_;
  // @@protoc_insertion_point(field_get:google.iam.admin.v1.ServiceAccountKey.valid_after_time)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::Timestamp*>(
      &::google::protobuf::_Timestamp_default_instance_);
}
inline ::google::protobuf::Timestamp* ServiceAccountKey::release_valid_after_time() {
  // @@protoc_insertion_point(field_release:google.iam.admin.v1.ServiceAccountKey.valid_after_time)
  
  ::google::protobuf::Timestamp* temp = valid_after_time_;
  if (GetArenaNoVirtual() != NULL) {
    temp = ::google::protobuf::internal::DuplicateIfNonNull(temp, NULL);
  }
  valid_after_time_ = NULL;
  return temp;
}
inline ::google::protobuf::Timestamp* ServiceAccountKey::unsafe_arena_release_valid_after_time() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.iam.admin.v1.ServiceAccountKey.valid_after_time)
  
  ::google::protobuf::Timestamp* temp = valid_after_time_;
  valid_after_time_ = NULL;
  return temp;
}
inline ::google::protobuf::Timestamp* ServiceAccountKey::mutable_valid_after_time() {
  
  if (valid_after_time_ == NULL) {
    _slow_mutable_valid_after_time();
  }
  // @@protoc_insertion_point(field_mutable:google.iam.admin.v1.ServiceAccountKey.valid_after_time)
  return valid_after_time_;
}
inline void ServiceAccountKey::set_allocated_valid_after_time(::google::protobuf::Timestamp* valid_after_time) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(valid_after_time_);
  }
  if (valid_after_time) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast< ::google::protobuf::MessageLite*>(valid_after_time)->GetArena();
    if (message_arena != submessage_arena) {
      valid_after_time = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, valid_after_time, submessage_arena);
    }
    
  } else {
    
  }
  valid_after_time_ = valid_after_time;
  // @@protoc_insertion_point(field_set_allocated:google.iam.admin.v1.ServiceAccountKey.valid_after_time)
}

// .google.protobuf.Timestamp valid_before_time = 5;
inline bool ServiceAccountKey::has_valid_before_time() const {
  return this != internal_default_instance() && valid_before_time_ != NULL;
}
inline const ::google::protobuf::Timestamp& ServiceAccountKey::valid_before_time() const {
  const ::google::protobuf::Timestamp* p = valid_before_time_;
  // @@protoc_insertion_point(field_get:google.iam.admin.v1.ServiceAccountKey.valid_before_time)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::Timestamp*>(
      &::google::protobuf::_Timestamp_default_instance_);
}
inline ::google::protobuf::Timestamp* ServiceAccountKey::release_valid_before_time() {
  // @@protoc_insertion_point(field_release:google.iam.admin.v1.ServiceAccountKey.valid_before_time)
  
  ::google::protobuf::Timestamp* temp = valid_before_time_;
  if (GetArenaNoVirtual() != NULL) {
    temp = ::google::protobuf::internal::DuplicateIfNonNull(temp, NULL);
  }
  valid_before_time_ = NULL;
  return temp;
}
inline ::google::protobuf::Timestamp* ServiceAccountKey::unsafe_arena_release_valid_before_time() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.iam.admin.v1.ServiceAccountKey.valid_before_time)
  
  ::google::protobuf::Timestamp* temp = valid_before_time_;
  valid_before_time_ = NULL;
  return temp;
}
inline ::google::protobuf::Timestamp* ServiceAccountKey::mutable_valid_before_time() {
  
  if (valid_before_time_ == NULL) {
    _slow_mutable_valid_before_time();
  }
  // @@protoc_insertion_point(field_mutable:google.iam.admin.v1.ServiceAccountKey.valid_before_time)
  return valid_before_time_;
}
inline void ServiceAccountKey::set_allocated_valid_before_time(::google::protobuf::Timestamp* valid_before_time) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(valid_before_time_);
  }
  if (valid_before_time) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast< ::google::protobuf::MessageLite*>(valid_before_time)->GetArena();
    if (message_arena != submessage_arena) {
      valid_before_time = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, valid_before_time, submessage_arena);
    }
    
  } else {
    
  }
  valid_before_time_ = valid_before_time;
  // @@protoc_insertion_point(field_set_allocated:google.iam.admin.v1.ServiceAccountKey.valid_before_time)
}

// -------------------------------------------------------------------

// CreateServiceAccountKeyRequest

// string name = 1;
inline void CreateServiceAccountKeyRequest::clear_name() {
  name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& CreateServiceAccountKeyRequest::name() const {
  // @@protoc_insertion_point(field_get:google.iam.admin.v1.CreateServiceAccountKeyRequest.name)
  return name_.Get();
}
inline void CreateServiceAccountKeyRequest::set_name(const ::std::string& value) {
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.iam.admin.v1.CreateServiceAccountKeyRequest.name)
}
#if LANG_CXX11
inline void CreateServiceAccountKeyRequest::set_name(::std::string&& value) {
  
  name_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:google.iam.admin.v1.CreateServiceAccountKeyRequest.name)
}
#endif
inline void CreateServiceAccountKeyRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.iam.admin.v1.CreateServiceAccountKeyRequest.name)
}
inline void CreateServiceAccountKeyRequest::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.iam.admin.v1.CreateServiceAccountKeyRequest.name)
}
inline ::std::string* CreateServiceAccountKeyRequest::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:google.iam.admin.v1.CreateServiceAccountKeyRequest.name)
  return name_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* CreateServiceAccountKeyRequest::release_name() {
  // @@protoc_insertion_point(field_release:google.iam.admin.v1.CreateServiceAccountKeyRequest.name)
  
  return name_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void CreateServiceAccountKeyRequest::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.iam.admin.v1.CreateServiceAccountKeyRequest.name)
}
inline ::std::string* CreateServiceAccountKeyRequest::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.iam.admin.v1.CreateServiceAccountKeyRequest.name)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return name_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void CreateServiceAccountKeyRequest::unsafe_arena_set_allocated_name(
    ::std::string* name) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (name != NULL) {
    
  } else {
    
  }
  name_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      name, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.iam.admin.v1.CreateServiceAccountKeyRequest.name)
}

// .google.iam.admin.v1.ServiceAccountPrivateKeyType private_key_type = 2;
inline void CreateServiceAccountKeyRequest::clear_private_key_type() {
  private_key_type_ = 0;
}
inline ::google::iam::admin::v1::ServiceAccountPrivateKeyType CreateServiceAccountKeyRequest::private_key_type() const {
  // @@protoc_insertion_point(field_get:google.iam.admin.v1.CreateServiceAccountKeyRequest.private_key_type)
  return static_cast< ::google::iam::admin::v1::ServiceAccountPrivateKeyType >(private_key_type_);
}
inline void CreateServiceAccountKeyRequest::set_private_key_type(::google::iam::admin::v1::ServiceAccountPrivateKeyType value) {
  
  private_key_type_ = value;
  // @@protoc_insertion_point(field_set:google.iam.admin.v1.CreateServiceAccountKeyRequest.private_key_type)
}

// .google.iam.admin.v1.ServiceAccountKeyAlgorithm key_algorithm = 3;
inline void CreateServiceAccountKeyRequest::clear_key_algorithm() {
  key_algorithm_ = 0;
}
inline ::google::iam::admin::v1::ServiceAccountKeyAlgorithm CreateServiceAccountKeyRequest::key_algorithm() const {
  // @@protoc_insertion_point(field_get:google.iam.admin.v1.CreateServiceAccountKeyRequest.key_algorithm)
  return static_cast< ::google::iam::admin::v1::ServiceAccountKeyAlgorithm >(key_algorithm_);
}
inline void CreateServiceAccountKeyRequest::set_key_algorithm(::google::iam::admin::v1::ServiceAccountKeyAlgorithm value) {
  
  key_algorithm_ = value;
  // @@protoc_insertion_point(field_set:google.iam.admin.v1.CreateServiceAccountKeyRequest.key_algorithm)
}

// -------------------------------------------------------------------

// DeleteServiceAccountKeyRequest

// string name = 1;
inline void DeleteServiceAccountKeyRequest::clear_name() {
  name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& DeleteServiceAccountKeyRequest::name() const {
  // @@protoc_insertion_point(field_get:google.iam.admin.v1.DeleteServiceAccountKeyRequest.name)
  return name_.Get();
}
inline void DeleteServiceAccountKeyRequest::set_name(const ::std::string& value) {
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.iam.admin.v1.DeleteServiceAccountKeyRequest.name)
}
#if LANG_CXX11
inline void DeleteServiceAccountKeyRequest::set_name(::std::string&& value) {
  
  name_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:google.iam.admin.v1.DeleteServiceAccountKeyRequest.name)
}
#endif
inline void DeleteServiceAccountKeyRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.iam.admin.v1.DeleteServiceAccountKeyRequest.name)
}
inline void DeleteServiceAccountKeyRequest::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.iam.admin.v1.DeleteServiceAccountKeyRequest.name)
}
inline ::std::string* DeleteServiceAccountKeyRequest::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:google.iam.admin.v1.DeleteServiceAccountKeyRequest.name)
  return name_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* DeleteServiceAccountKeyRequest::release_name() {
  // @@protoc_insertion_point(field_release:google.iam.admin.v1.DeleteServiceAccountKeyRequest.name)
  
  return name_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void DeleteServiceAccountKeyRequest::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.iam.admin.v1.DeleteServiceAccountKeyRequest.name)
}
inline ::std::string* DeleteServiceAccountKeyRequest::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.iam.admin.v1.DeleteServiceAccountKeyRequest.name)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return name_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void DeleteServiceAccountKeyRequest::unsafe_arena_set_allocated_name(
    ::std::string* name) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (name != NULL) {
    
  } else {
    
  }
  name_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      name, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.iam.admin.v1.DeleteServiceAccountKeyRequest.name)
}

// -------------------------------------------------------------------

// SignBlobRequest

// string name = 1;
inline void SignBlobRequest::clear_name() {
  name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& SignBlobRequest::name() const {
  // @@protoc_insertion_point(field_get:google.iam.admin.v1.SignBlobRequest.name)
  return name_.Get();
}
inline void SignBlobRequest::set_name(const ::std::string& value) {
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.iam.admin.v1.SignBlobRequest.name)
}
#if LANG_CXX11
inline void SignBlobRequest::set_name(::std::string&& value) {
  
  name_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:google.iam.admin.v1.SignBlobRequest.name)
}
#endif
inline void SignBlobRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.iam.admin.v1.SignBlobRequest.name)
}
inline void SignBlobRequest::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.iam.admin.v1.SignBlobRequest.name)
}
inline ::std::string* SignBlobRequest::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:google.iam.admin.v1.SignBlobRequest.name)
  return name_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* SignBlobRequest::release_name() {
  // @@protoc_insertion_point(field_release:google.iam.admin.v1.SignBlobRequest.name)
  
  return name_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void SignBlobRequest::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.iam.admin.v1.SignBlobRequest.name)
}
inline ::std::string* SignBlobRequest::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.iam.admin.v1.SignBlobRequest.name)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return name_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void SignBlobRequest::unsafe_arena_set_allocated_name(
    ::std::string* name) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (name != NULL) {
    
  } else {
    
  }
  name_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      name, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.iam.admin.v1.SignBlobRequest.name)
}

// bytes bytes_to_sign = 2;
inline void SignBlobRequest::clear_bytes_to_sign() {
  bytes_to_sign_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& SignBlobRequest::bytes_to_sign() const {
  // @@protoc_insertion_point(field_get:google.iam.admin.v1.SignBlobRequest.bytes_to_sign)
  return bytes_to_sign_.Get();
}
inline void SignBlobRequest::set_bytes_to_sign(const ::std::string& value) {
  
  bytes_to_sign_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.iam.admin.v1.SignBlobRequest.bytes_to_sign)
}
#if LANG_CXX11
inline void SignBlobRequest::set_bytes_to_sign(::std::string&& value) {
  
  bytes_to_sign_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:google.iam.admin.v1.SignBlobRequest.bytes_to_sign)
}
#endif
inline void SignBlobRequest::set_bytes_to_sign(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  bytes_to_sign_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.iam.admin.v1.SignBlobRequest.bytes_to_sign)
}
inline void SignBlobRequest::set_bytes_to_sign(const void* value,
    size_t size) {
  
  bytes_to_sign_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.iam.admin.v1.SignBlobRequest.bytes_to_sign)
}
inline ::std::string* SignBlobRequest::mutable_bytes_to_sign() {
  
  // @@protoc_insertion_point(field_mutable:google.iam.admin.v1.SignBlobRequest.bytes_to_sign)
  return bytes_to_sign_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* SignBlobRequest::release_bytes_to_sign() {
  // @@protoc_insertion_point(field_release:google.iam.admin.v1.SignBlobRequest.bytes_to_sign)
  
  return bytes_to_sign_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void SignBlobRequest::set_allocated_bytes_to_sign(::std::string* bytes_to_sign) {
  if (bytes_to_sign != NULL) {
    
  } else {
    
  }
  bytes_to_sign_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), bytes_to_sign,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.iam.admin.v1.SignBlobRequest.bytes_to_sign)
}
inline ::std::string* SignBlobRequest::unsafe_arena_release_bytes_to_sign() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.iam.admin.v1.SignBlobRequest.bytes_to_sign)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return bytes_to_sign_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void SignBlobRequest::unsafe_arena_set_allocated_bytes_to_sign(
    ::std::string* bytes_to_sign) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (bytes_to_sign != NULL) {
    
  } else {
    
  }
  bytes_to_sign_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      bytes_to_sign, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.iam.admin.v1.SignBlobRequest.bytes_to_sign)
}

// -------------------------------------------------------------------

// SignBlobResponse

// string key_id = 1;
inline void SignBlobResponse::clear_key_id() {
  key_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& SignBlobResponse::key_id() const {
  // @@protoc_insertion_point(field_get:google.iam.admin.v1.SignBlobResponse.key_id)
  return key_id_.Get();
}
inline void SignBlobResponse::set_key_id(const ::std::string& value) {
  
  key_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.iam.admin.v1.SignBlobResponse.key_id)
}
#if LANG_CXX11
inline void SignBlobResponse::set_key_id(::std::string&& value) {
  
  key_id_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:google.iam.admin.v1.SignBlobResponse.key_id)
}
#endif
inline void SignBlobResponse::set_key_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  key_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.iam.admin.v1.SignBlobResponse.key_id)
}
inline void SignBlobResponse::set_key_id(const char* value,
    size_t size) {
  
  key_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.iam.admin.v1.SignBlobResponse.key_id)
}
inline ::std::string* SignBlobResponse::mutable_key_id() {
  
  // @@protoc_insertion_point(field_mutable:google.iam.admin.v1.SignBlobResponse.key_id)
  return key_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* SignBlobResponse::release_key_id() {
  // @@protoc_insertion_point(field_release:google.iam.admin.v1.SignBlobResponse.key_id)
  
  return key_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void SignBlobResponse::set_allocated_key_id(::std::string* key_id) {
  if (key_id != NULL) {
    
  } else {
    
  }
  key_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.iam.admin.v1.SignBlobResponse.key_id)
}
inline ::std::string* SignBlobResponse::unsafe_arena_release_key_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.iam.admin.v1.SignBlobResponse.key_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return key_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void SignBlobResponse::unsafe_arena_set_allocated_key_id(
    ::std::string* key_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (key_id != NULL) {
    
  } else {
    
  }
  key_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      key_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.iam.admin.v1.SignBlobResponse.key_id)
}

// bytes signature = 2;
inline void SignBlobResponse::clear_signature() {
  signature_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& SignBlobResponse::signature() const {
  // @@protoc_insertion_point(field_get:google.iam.admin.v1.SignBlobResponse.signature)
  return signature_.Get();
}
inline void SignBlobResponse::set_signature(const ::std::string& value) {
  
  signature_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.iam.admin.v1.SignBlobResponse.signature)
}
#if LANG_CXX11
inline void SignBlobResponse::set_signature(::std::string&& value) {
  
  signature_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:google.iam.admin.v1.SignBlobResponse.signature)
}
#endif
inline void SignBlobResponse::set_signature(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  signature_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.iam.admin.v1.SignBlobResponse.signature)
}
inline void SignBlobResponse::set_signature(const void* value,
    size_t size) {
  
  signature_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.iam.admin.v1.SignBlobResponse.signature)
}
inline ::std::string* SignBlobResponse::mutable_signature() {
  
  // @@protoc_insertion_point(field_mutable:google.iam.admin.v1.SignBlobResponse.signature)
  return signature_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* SignBlobResponse::release_signature() {
  // @@protoc_insertion_point(field_release:google.iam.admin.v1.SignBlobResponse.signature)
  
  return signature_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void SignBlobResponse::set_allocated_signature(::std::string* signature) {
  if (signature != NULL) {
    
  } else {
    
  }
  signature_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), signature,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.iam.admin.v1.SignBlobResponse.signature)
}
inline ::std::string* SignBlobResponse::unsafe_arena_release_signature() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.iam.admin.v1.SignBlobResponse.signature)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return signature_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void SignBlobResponse::unsafe_arena_set_allocated_signature(
    ::std::string* signature) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (signature != NULL) {
    
  } else {
    
  }
  signature_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      signature, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.iam.admin.v1.SignBlobResponse.signature)
}

// -------------------------------------------------------------------

// SignJwtRequest

// string name = 1;
inline void SignJwtRequest::clear_name() {
  name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& SignJwtRequest::name() const {
  // @@protoc_insertion_point(field_get:google.iam.admin.v1.SignJwtRequest.name)
  return name_.Get();
}
inline void SignJwtRequest::set_name(const ::std::string& value) {
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.iam.admin.v1.SignJwtRequest.name)
}
#if LANG_CXX11
inline void SignJwtRequest::set_name(::std::string&& value) {
  
  name_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:google.iam.admin.v1.SignJwtRequest.name)
}
#endif
inline void SignJwtRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.iam.admin.v1.SignJwtRequest.name)
}
inline void SignJwtRequest::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.iam.admin.v1.SignJwtRequest.name)
}
inline ::std::string* SignJwtRequest::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:google.iam.admin.v1.SignJwtRequest.name)
  return name_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* SignJwtRequest::release_name() {
  // @@protoc_insertion_point(field_release:google.iam.admin.v1.SignJwtRequest.name)
  
  return name_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void SignJwtRequest::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.iam.admin.v1.SignJwtRequest.name)
}
inline ::std::string* SignJwtRequest::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.iam.admin.v1.SignJwtRequest.name)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return name_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void SignJwtRequest::unsafe_arena_set_allocated_name(
    ::std::string* name) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (name != NULL) {
    
  } else {
    
  }
  name_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      name, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.iam.admin.v1.SignJwtRequest.name)
}

// string payload = 2;
inline void SignJwtRequest::clear_payload() {
  payload_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& SignJwtRequest::payload() const {
  // @@protoc_insertion_point(field_get:google.iam.admin.v1.SignJwtRequest.payload)
  return payload_.Get();
}
inline void SignJwtRequest::set_payload(const ::std::string& value) {
  
  payload_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.iam.admin.v1.SignJwtRequest.payload)
}
#if LANG_CXX11
inline void SignJwtRequest::set_payload(::std::string&& value) {
  
  payload_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:google.iam.admin.v1.SignJwtRequest.payload)
}
#endif
inline void SignJwtRequest::set_payload(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  payload_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.iam.admin.v1.SignJwtRequest.payload)
}
inline void SignJwtRequest::set_payload(const char* value,
    size_t size) {
  
  payload_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.iam.admin.v1.SignJwtRequest.payload)
}
inline ::std::string* SignJwtRequest::mutable_payload() {
  
  // @@protoc_insertion_point(field_mutable:google.iam.admin.v1.SignJwtRequest.payload)
  return payload_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* SignJwtRequest::release_payload() {
  // @@protoc_insertion_point(field_release:google.iam.admin.v1.SignJwtRequest.payload)
  
  return payload_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void SignJwtRequest::set_allocated_payload(::std::string* payload) {
  if (payload != NULL) {
    
  } else {
    
  }
  payload_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), payload,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.iam.admin.v1.SignJwtRequest.payload)
}
inline ::std::string* SignJwtRequest::unsafe_arena_release_payload() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.iam.admin.v1.SignJwtRequest.payload)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return payload_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void SignJwtRequest::unsafe_arena_set_allocated_payload(
    ::std::string* payload) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (payload != NULL) {
    
  } else {
    
  }
  payload_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      payload, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.iam.admin.v1.SignJwtRequest.payload)
}

// -------------------------------------------------------------------

// SignJwtResponse

// string key_id = 1;
inline void SignJwtResponse::clear_key_id() {
  key_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& SignJwtResponse::key_id() const {
  // @@protoc_insertion_point(field_get:google.iam.admin.v1.SignJwtResponse.key_id)
  return key_id_.Get();
}
inline void SignJwtResponse::set_key_id(const ::std::string& value) {
  
  key_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.iam.admin.v1.SignJwtResponse.key_id)
}
#if LANG_CXX11
inline void SignJwtResponse::set_key_id(::std::string&& value) {
  
  key_id_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:google.iam.admin.v1.SignJwtResponse.key_id)
}
#endif
inline void SignJwtResponse::set_key_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  key_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.iam.admin.v1.SignJwtResponse.key_id)
}
inline void SignJwtResponse::set_key_id(const char* value,
    size_t size) {
  
  key_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.iam.admin.v1.SignJwtResponse.key_id)
}
inline ::std::string* SignJwtResponse::mutable_key_id() {
  
  // @@protoc_insertion_point(field_mutable:google.iam.admin.v1.SignJwtResponse.key_id)
  return key_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* SignJwtResponse::release_key_id() {
  // @@protoc_insertion_point(field_release:google.iam.admin.v1.SignJwtResponse.key_id)
  
  return key_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void SignJwtResponse::set_allocated_key_id(::std::string* key_id) {
  if (key_id != NULL) {
    
  } else {
    
  }
  key_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.iam.admin.v1.SignJwtResponse.key_id)
}
inline ::std::string* SignJwtResponse::unsafe_arena_release_key_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.iam.admin.v1.SignJwtResponse.key_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return key_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void SignJwtResponse::unsafe_arena_set_allocated_key_id(
    ::std::string* key_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (key_id != NULL) {
    
  } else {
    
  }
  key_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      key_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.iam.admin.v1.SignJwtResponse.key_id)
}

// string signed_jwt = 2;
inline void SignJwtResponse::clear_signed_jwt() {
  signed_jwt_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& SignJwtResponse::signed_jwt() const {
  // @@protoc_insertion_point(field_get:google.iam.admin.v1.SignJwtResponse.signed_jwt)
  return signed_jwt_.Get();
}
inline void SignJwtResponse::set_signed_jwt(const ::std::string& value) {
  
  signed_jwt_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.iam.admin.v1.SignJwtResponse.signed_jwt)
}
#if LANG_CXX11
inline void SignJwtResponse::set_signed_jwt(::std::string&& value) {
  
  signed_jwt_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:google.iam.admin.v1.SignJwtResponse.signed_jwt)
}
#endif
inline void SignJwtResponse::set_signed_jwt(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  signed_jwt_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.iam.admin.v1.SignJwtResponse.signed_jwt)
}
inline void SignJwtResponse::set_signed_jwt(const char* value,
    size_t size) {
  
  signed_jwt_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.iam.admin.v1.SignJwtResponse.signed_jwt)
}
inline ::std::string* SignJwtResponse::mutable_signed_jwt() {
  
  // @@protoc_insertion_point(field_mutable:google.iam.admin.v1.SignJwtResponse.signed_jwt)
  return signed_jwt_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* SignJwtResponse::release_signed_jwt() {
  // @@protoc_insertion_point(field_release:google.iam.admin.v1.SignJwtResponse.signed_jwt)
  
  return signed_jwt_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void SignJwtResponse::set_allocated_signed_jwt(::std::string* signed_jwt) {
  if (signed_jwt != NULL) {
    
  } else {
    
  }
  signed_jwt_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), signed_jwt,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.iam.admin.v1.SignJwtResponse.signed_jwt)
}
inline ::std::string* SignJwtResponse::unsafe_arena_release_signed_jwt() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.iam.admin.v1.SignJwtResponse.signed_jwt)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return signed_jwt_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void SignJwtResponse::unsafe_arena_set_allocated_signed_jwt(
    ::std::string* signed_jwt) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (signed_jwt != NULL) {
    
  } else {
    
  }
  signed_jwt_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      signed_jwt, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.iam.admin.v1.SignJwtResponse.signed_jwt)
}

// -------------------------------------------------------------------

// Role

// string name = 1;
inline void Role::clear_name() {
  name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& Role::name() const {
  // @@protoc_insertion_point(field_get:google.iam.admin.v1.Role.name)
  return name_.Get();
}
inline void Role::set_name(const ::std::string& value) {
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.iam.admin.v1.Role.name)
}
#if LANG_CXX11
inline void Role::set_name(::std::string&& value) {
  
  name_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:google.iam.admin.v1.Role.name)
}
#endif
inline void Role::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.iam.admin.v1.Role.name)
}
inline void Role::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.iam.admin.v1.Role.name)
}
inline ::std::string* Role::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:google.iam.admin.v1.Role.name)
  return name_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* Role::release_name() {
  // @@protoc_insertion_point(field_release:google.iam.admin.v1.Role.name)
  
  return name_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void Role::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.iam.admin.v1.Role.name)
}
inline ::std::string* Role::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.iam.admin.v1.Role.name)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return name_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void Role::unsafe_arena_set_allocated_name(
    ::std::string* name) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (name != NULL) {
    
  } else {
    
  }
  name_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      name, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.iam.admin.v1.Role.name)
}

// string title = 2;
inline void Role::clear_title() {
  title_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& Role::title() const {
  // @@protoc_insertion_point(field_get:google.iam.admin.v1.Role.title)
  return title_.Get();
}
inline void Role::set_title(const ::std::string& value) {
  
  title_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.iam.admin.v1.Role.title)
}
#if LANG_CXX11
inline void Role::set_title(::std::string&& value) {
  
  title_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:google.iam.admin.v1.Role.title)
}
#endif
inline void Role::set_title(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  title_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.iam.admin.v1.Role.title)
}
inline void Role::set_title(const char* value,
    size_t size) {
  
  title_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.iam.admin.v1.Role.title)
}
inline ::std::string* Role::mutable_title() {
  
  // @@protoc_insertion_point(field_mutable:google.iam.admin.v1.Role.title)
  return title_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* Role::release_title() {
  // @@protoc_insertion_point(field_release:google.iam.admin.v1.Role.title)
  
  return title_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void Role::set_allocated_title(::std::string* title) {
  if (title != NULL) {
    
  } else {
    
  }
  title_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), title,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.iam.admin.v1.Role.title)
}
inline ::std::string* Role::unsafe_arena_release_title() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.iam.admin.v1.Role.title)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return title_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void Role::unsafe_arena_set_allocated_title(
    ::std::string* title) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (title != NULL) {
    
  } else {
    
  }
  title_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      title, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.iam.admin.v1.Role.title)
}

// string description = 3;
inline void Role::clear_description() {
  description_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& Role::description() const {
  // @@protoc_insertion_point(field_get:google.iam.admin.v1.Role.description)
  return description_.Get();
}
inline void Role::set_description(const ::std::string& value) {
  
  description_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.iam.admin.v1.Role.description)
}
#if LANG_CXX11
inline void Role::set_description(::std::string&& value) {
  
  description_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:google.iam.admin.v1.Role.description)
}
#endif
inline void Role::set_description(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  description_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.iam.admin.v1.Role.description)
}
inline void Role::set_description(const char* value,
    size_t size) {
  
  description_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.iam.admin.v1.Role.description)
}
inline ::std::string* Role::mutable_description() {
  
  // @@protoc_insertion_point(field_mutable:google.iam.admin.v1.Role.description)
  return description_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* Role::release_description() {
  // @@protoc_insertion_point(field_release:google.iam.admin.v1.Role.description)
  
  return description_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void Role::set_allocated_description(::std::string* description) {
  if (description != NULL) {
    
  } else {
    
  }
  description_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), description,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.iam.admin.v1.Role.description)
}
inline ::std::string* Role::unsafe_arena_release_description() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.iam.admin.v1.Role.description)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return description_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void Role::unsafe_arena_set_allocated_description(
    ::std::string* description) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (description != NULL) {
    
  } else {
    
  }
  description_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      description, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.iam.admin.v1.Role.description)
}

// repeated string included_permissions = 7;
inline int Role::included_permissions_size() const {
  return included_permissions_.size();
}
inline void Role::clear_included_permissions() {
  included_permissions_.Clear();
}
inline const ::std::string& Role::included_permissions(int index) const {
  // @@protoc_insertion_point(field_get:google.iam.admin.v1.Role.included_permissions)
  return included_permissions_.Get(index);
}
inline ::std::string* Role::mutable_included_permissions(int index) {
  // @@protoc_insertion_point(field_mutable:google.iam.admin.v1.Role.included_permissions)
  return included_permissions_.Mutable(index);
}
inline void Role::set_included_permissions(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:google.iam.admin.v1.Role.included_permissions)
  included_permissions_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void Role::set_included_permissions(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:google.iam.admin.v1.Role.included_permissions)
  included_permissions_.Mutable(index)->assign(std::move(value));
}
#endif
inline void Role::set_included_permissions(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  included_permissions_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:google.iam.admin.v1.Role.included_permissions)
}
inline void Role::set_included_permissions(int index, const char* value, size_t size) {
  included_permissions_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:google.iam.admin.v1.Role.included_permissions)
}
inline ::std::string* Role::add_included_permissions() {
  // @@protoc_insertion_point(field_add_mutable:google.iam.admin.v1.Role.included_permissions)
  return included_permissions_.Add();
}
inline void Role::add_included_permissions(const ::std::string& value) {
  included_permissions_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:google.iam.admin.v1.Role.included_permissions)
}
#if LANG_CXX11
inline void Role::add_included_permissions(::std::string&& value) {
  included_permissions_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:google.iam.admin.v1.Role.included_permissions)
}
#endif
inline void Role::add_included_permissions(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  included_permissions_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:google.iam.admin.v1.Role.included_permissions)
}
inline void Role::add_included_permissions(const char* value, size_t size) {
  included_permissions_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:google.iam.admin.v1.Role.included_permissions)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Role::included_permissions() const {
  // @@protoc_insertion_point(field_list:google.iam.admin.v1.Role.included_permissions)
  return included_permissions_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Role::mutable_included_permissions() {
  // @@protoc_insertion_point(field_mutable_list:google.iam.admin.v1.Role.included_permissions)
  return &included_permissions_;
}

// .google.iam.admin.v1.Role.RoleLaunchStage stage = 8;
inline void Role::clear_stage() {
  stage_ = 0;
}
inline ::google::iam::admin::v1::Role_RoleLaunchStage Role::stage() const {
  // @@protoc_insertion_point(field_get:google.iam.admin.v1.Role.stage)
  return static_cast< ::google::iam::admin::v1::Role_RoleLaunchStage >(stage_);
}
inline void Role::set_stage(::google::iam::admin::v1::Role_RoleLaunchStage value) {
  
  stage_ = value;
  // @@protoc_insertion_point(field_set:google.iam.admin.v1.Role.stage)
}

// bytes etag = 9;
inline void Role::clear_etag() {
  etag_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& Role::etag() const {
  // @@protoc_insertion_point(field_get:google.iam.admin.v1.Role.etag)
  return etag_.Get();
}
inline void Role::set_etag(const ::std::string& value) {
  
  etag_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.iam.admin.v1.Role.etag)
}
#if LANG_CXX11
inline void Role::set_etag(::std::string&& value) {
  
  etag_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:google.iam.admin.v1.Role.etag)
}
#endif
inline void Role::set_etag(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  etag_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.iam.admin.v1.Role.etag)
}
inline void Role::set_etag(const void* value,
    size_t size) {
  
  etag_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.iam.admin.v1.Role.etag)
}
inline ::std::string* Role::mutable_etag() {
  
  // @@protoc_insertion_point(field_mutable:google.iam.admin.v1.Role.etag)
  return etag_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* Role::release_etag() {
  // @@protoc_insertion_point(field_release:google.iam.admin.v1.Role.etag)
  
  return etag_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void Role::set_allocated_etag(::std::string* etag) {
  if (etag != NULL) {
    
  } else {
    
  }
  etag_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), etag,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.iam.admin.v1.Role.etag)
}
inline ::std::string* Role::unsafe_arena_release_etag() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.iam.admin.v1.Role.etag)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return etag_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void Role::unsafe_arena_set_allocated_etag(
    ::std::string* etag) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (etag != NULL) {
    
  } else {
    
  }
  etag_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      etag, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.iam.admin.v1.Role.etag)
}

// bool deleted = 11;
inline void Role::clear_deleted() {
  deleted_ = false;
}
inline bool Role::deleted() const {
  // @@protoc_insertion_point(field_get:google.iam.admin.v1.Role.deleted)
  return deleted_;
}
inline void Role::set_deleted(bool value) {
  
  deleted_ = value;
  // @@protoc_insertion_point(field_set:google.iam.admin.v1.Role.deleted)
}

// -------------------------------------------------------------------

// QueryGrantableRolesRequest

// string full_resource_name = 1;
inline void QueryGrantableRolesRequest::clear_full_resource_name() {
  full_resource_name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& QueryGrantableRolesRequest::full_resource_name() const {
  // @@protoc_insertion_point(field_get:google.iam.admin.v1.QueryGrantableRolesRequest.full_resource_name)
  return full_resource_name_.Get();
}
inline void QueryGrantableRolesRequest::set_full_resource_name(const ::std::string& value) {
  
  full_resource_name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.iam.admin.v1.QueryGrantableRolesRequest.full_resource_name)
}
#if LANG_CXX11
inline void QueryGrantableRolesRequest::set_full_resource_name(::std::string&& value) {
  
  full_resource_name_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:google.iam.admin.v1.QueryGrantableRolesRequest.full_resource_name)
}
#endif
inline void QueryGrantableRolesRequest::set_full_resource_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  full_resource_name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.iam.admin.v1.QueryGrantableRolesRequest.full_resource_name)
}
inline void QueryGrantableRolesRequest::set_full_resource_name(const char* value,
    size_t size) {
  
  full_resource_name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.iam.admin.v1.QueryGrantableRolesRequest.full_resource_name)
}
inline ::std::string* QueryGrantableRolesRequest::mutable_full_resource_name() {
  
  // @@protoc_insertion_point(field_mutable:google.iam.admin.v1.QueryGrantableRolesRequest.full_resource_name)
  return full_resource_name_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* QueryGrantableRolesRequest::release_full_resource_name() {
  // @@protoc_insertion_point(field_release:google.iam.admin.v1.QueryGrantableRolesRequest.full_resource_name)
  
  return full_resource_name_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void QueryGrantableRolesRequest::set_allocated_full_resource_name(::std::string* full_resource_name) {
  if (full_resource_name != NULL) {
    
  } else {
    
  }
  full_resource_name_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), full_resource_name,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.iam.admin.v1.QueryGrantableRolesRequest.full_resource_name)
}
inline ::std::string* QueryGrantableRolesRequest::unsafe_arena_release_full_resource_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.iam.admin.v1.QueryGrantableRolesRequest.full_resource_name)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return full_resource_name_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void QueryGrantableRolesRequest::unsafe_arena_set_allocated_full_resource_name(
    ::std::string* full_resource_name) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (full_resource_name != NULL) {
    
  } else {
    
  }
  full_resource_name_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      full_resource_name, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.iam.admin.v1.QueryGrantableRolesRequest.full_resource_name)
}

// .google.iam.admin.v1.RoleView view = 2;
inline void QueryGrantableRolesRequest::clear_view() {
  view_ = 0;
}
inline ::google::iam::admin::v1::RoleView QueryGrantableRolesRequest::view() const {
  // @@protoc_insertion_point(field_get:google.iam.admin.v1.QueryGrantableRolesRequest.view)
  return static_cast< ::google::iam::admin::v1::RoleView >(view_);
}
inline void QueryGrantableRolesRequest::set_view(::google::iam::admin::v1::RoleView value) {
  
  view_ = value;
  // @@protoc_insertion_point(field_set:google.iam.admin.v1.QueryGrantableRolesRequest.view)
}

// int32 page_size = 3;
inline void QueryGrantableRolesRequest::clear_page_size() {
  page_size_ = 0;
}
inline ::google::protobuf::int32 QueryGrantableRolesRequest::page_size() const {
  // @@protoc_insertion_point(field_get:google.iam.admin.v1.QueryGrantableRolesRequest.page_size)
  return page_size_;
}
inline void QueryGrantableRolesRequest::set_page_size(::google::protobuf::int32 value) {
  
  page_size_ = value;
  // @@protoc_insertion_point(field_set:google.iam.admin.v1.QueryGrantableRolesRequest.page_size)
}

// string page_token = 4;
inline void QueryGrantableRolesRequest::clear_page_token() {
  page_token_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& QueryGrantableRolesRequest::page_token() const {
  // @@protoc_insertion_point(field_get:google.iam.admin.v1.QueryGrantableRolesRequest.page_token)
  return page_token_.Get();
}
inline void QueryGrantableRolesRequest::set_page_token(const ::std::string& value) {
  
  page_token_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.iam.admin.v1.QueryGrantableRolesRequest.page_token)
}
#if LANG_CXX11
inline void QueryGrantableRolesRequest::set_page_token(::std::string&& value) {
  
  page_token_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:google.iam.admin.v1.QueryGrantableRolesRequest.page_token)
}
#endif
inline void QueryGrantableRolesRequest::set_page_token(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  page_token_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.iam.admin.v1.QueryGrantableRolesRequest.page_token)
}
inline void QueryGrantableRolesRequest::set_page_token(const char* value,
    size_t size) {
  
  page_token_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.iam.admin.v1.QueryGrantableRolesRequest.page_token)
}
inline ::std::string* QueryGrantableRolesRequest::mutable_page_token() {
  
  // @@protoc_insertion_point(field_mutable:google.iam.admin.v1.QueryGrantableRolesRequest.page_token)
  return page_token_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* QueryGrantableRolesRequest::release_page_token() {
  // @@protoc_insertion_point(field_release:google.iam.admin.v1.QueryGrantableRolesRequest.page_token)
  
  return page_token_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void QueryGrantableRolesRequest::set_allocated_page_token(::std::string* page_token) {
  if (page_token != NULL) {
    
  } else {
    
  }
  page_token_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), page_token,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.iam.admin.v1.QueryGrantableRolesRequest.page_token)
}
inline ::std::string* QueryGrantableRolesRequest::unsafe_arena_release_page_token() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.iam.admin.v1.QueryGrantableRolesRequest.page_token)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return page_token_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void QueryGrantableRolesRequest::unsafe_arena_set_allocated_page_token(
    ::std::string* page_token) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (page_token != NULL) {
    
  } else {
    
  }
  page_token_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      page_token, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.iam.admin.v1.QueryGrantableRolesRequest.page_token)
}

// -------------------------------------------------------------------

// QueryGrantableRolesResponse

// repeated .google.iam.admin.v1.Role roles = 1;
inline int QueryGrantableRolesResponse::roles_size() const {
  return roles_.size();
}
inline void QueryGrantableRolesResponse::clear_roles() {
  roles_.Clear();
}
inline const ::google::iam::admin::v1::Role& QueryGrantableRolesResponse::roles(int index) const {
  // @@protoc_insertion_point(field_get:google.iam.admin.v1.QueryGrantableRolesResponse.roles)
  return roles_.Get(index);
}
inline ::google::iam::admin::v1::Role* QueryGrantableRolesResponse::mutable_roles(int index) {
  // @@protoc_insertion_point(field_mutable:google.iam.admin.v1.QueryGrantableRolesResponse.roles)
  return roles_.Mutable(index);
}
inline ::google::iam::admin::v1::Role* QueryGrantableRolesResponse::add_roles() {
  // @@protoc_insertion_point(field_add:google.iam.admin.v1.QueryGrantableRolesResponse.roles)
  return roles_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::google::iam::admin::v1::Role >*
QueryGrantableRolesResponse::mutable_roles() {
  // @@protoc_insertion_point(field_mutable_list:google.iam.admin.v1.QueryGrantableRolesResponse.roles)
  return &roles_;
}
inline const ::google::protobuf::RepeatedPtrField< ::google::iam::admin::v1::Role >&
QueryGrantableRolesResponse::roles() const {
  // @@protoc_insertion_point(field_list:google.iam.admin.v1.QueryGrantableRolesResponse.roles)
  return roles_;
}

// string next_page_token = 2;
inline void QueryGrantableRolesResponse::clear_next_page_token() {
  next_page_token_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& QueryGrantableRolesResponse::next_page_token() const {
  // @@protoc_insertion_point(field_get:google.iam.admin.v1.QueryGrantableRolesResponse.next_page_token)
  return next_page_token_.Get();
}
inline void QueryGrantableRolesResponse::set_next_page_token(const ::std::string& value) {
  
  next_page_token_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.iam.admin.v1.QueryGrantableRolesResponse.next_page_token)
}
#if LANG_CXX11
inline void QueryGrantableRolesResponse::set_next_page_token(::std::string&& value) {
  
  next_page_token_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:google.iam.admin.v1.QueryGrantableRolesResponse.next_page_token)
}
#endif
inline void QueryGrantableRolesResponse::set_next_page_token(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  next_page_token_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.iam.admin.v1.QueryGrantableRolesResponse.next_page_token)
}
inline void QueryGrantableRolesResponse::set_next_page_token(const char* value,
    size_t size) {
  
  next_page_token_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.iam.admin.v1.QueryGrantableRolesResponse.next_page_token)
}
inline ::std::string* QueryGrantableRolesResponse::mutable_next_page_token() {
  
  // @@protoc_insertion_point(field_mutable:google.iam.admin.v1.QueryGrantableRolesResponse.next_page_token)
  return next_page_token_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* QueryGrantableRolesResponse::release_next_page_token() {
  // @@protoc_insertion_point(field_release:google.iam.admin.v1.QueryGrantableRolesResponse.next_page_token)
  
  return next_page_token_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void QueryGrantableRolesResponse::set_allocated_next_page_token(::std::string* next_page_token) {
  if (next_page_token != NULL) {
    
  } else {
    
  }
  next_page_token_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), next_page_token,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.iam.admin.v1.QueryGrantableRolesResponse.next_page_token)
}
inline ::std::string* QueryGrantableRolesResponse::unsafe_arena_release_next_page_token() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.iam.admin.v1.QueryGrantableRolesResponse.next_page_token)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return next_page_token_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void QueryGrantableRolesResponse::unsafe_arena_set_allocated_next_page_token(
    ::std::string* next_page_token) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (next_page_token != NULL) {
    
  } else {
    
  }
  next_page_token_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      next_page_token, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.iam.admin.v1.QueryGrantableRolesResponse.next_page_token)
}

// -------------------------------------------------------------------

// ListRolesRequest

// string parent = 1;
inline void ListRolesRequest::clear_parent() {
  parent_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& ListRolesRequest::parent() const {
  // @@protoc_insertion_point(field_get:google.iam.admin.v1.ListRolesRequest.parent)
  return parent_.Get();
}
inline void ListRolesRequest::set_parent(const ::std::string& value) {
  
  parent_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.iam.admin.v1.ListRolesRequest.parent)
}
#if LANG_CXX11
inline void ListRolesRequest::set_parent(::std::string&& value) {
  
  parent_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:google.iam.admin.v1.ListRolesRequest.parent)
}
#endif
inline void ListRolesRequest::set_parent(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  parent_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.iam.admin.v1.ListRolesRequest.parent)
}
inline void ListRolesRequest::set_parent(const char* value,
    size_t size) {
  
  parent_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.iam.admin.v1.ListRolesRequest.parent)
}
inline ::std::string* ListRolesRequest::mutable_parent() {
  
  // @@protoc_insertion_point(field_mutable:google.iam.admin.v1.ListRolesRequest.parent)
  return parent_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ListRolesRequest::release_parent() {
  // @@protoc_insertion_point(field_release:google.iam.admin.v1.ListRolesRequest.parent)
  
  return parent_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ListRolesRequest::set_allocated_parent(::std::string* parent) {
  if (parent != NULL) {
    
  } else {
    
  }
  parent_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), parent,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.iam.admin.v1.ListRolesRequest.parent)
}
inline ::std::string* ListRolesRequest::unsafe_arena_release_parent() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.iam.admin.v1.ListRolesRequest.parent)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return parent_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ListRolesRequest::unsafe_arena_set_allocated_parent(
    ::std::string* parent) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (parent != NULL) {
    
  } else {
    
  }
  parent_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      parent, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.iam.admin.v1.ListRolesRequest.parent)
}

// int32 page_size = 2;
inline void ListRolesRequest::clear_page_size() {
  page_size_ = 0;
}
inline ::google::protobuf::int32 ListRolesRequest::page_size() const {
  // @@protoc_insertion_point(field_get:google.iam.admin.v1.ListRolesRequest.page_size)
  return page_size_;
}
inline void ListRolesRequest::set_page_size(::google::protobuf::int32 value) {
  
  page_size_ = value;
  // @@protoc_insertion_point(field_set:google.iam.admin.v1.ListRolesRequest.page_size)
}

// string page_token = 3;
inline void ListRolesRequest::clear_page_token() {
  page_token_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& ListRolesRequest::page_token() const {
  // @@protoc_insertion_point(field_get:google.iam.admin.v1.ListRolesRequest.page_token)
  return page_token_.Get();
}
inline void ListRolesRequest::set_page_token(const ::std::string& value) {
  
  page_token_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.iam.admin.v1.ListRolesRequest.page_token)
}
#if LANG_CXX11
inline void ListRolesRequest::set_page_token(::std::string&& value) {
  
  page_token_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:google.iam.admin.v1.ListRolesRequest.page_token)
}
#endif
inline void ListRolesRequest::set_page_token(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  page_token_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.iam.admin.v1.ListRolesRequest.page_token)
}
inline void ListRolesRequest::set_page_token(const char* value,
    size_t size) {
  
  page_token_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.iam.admin.v1.ListRolesRequest.page_token)
}
inline ::std::string* ListRolesRequest::mutable_page_token() {
  
  // @@protoc_insertion_point(field_mutable:google.iam.admin.v1.ListRolesRequest.page_token)
  return page_token_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ListRolesRequest::release_page_token() {
  // @@protoc_insertion_point(field_release:google.iam.admin.v1.ListRolesRequest.page_token)
  
  return page_token_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ListRolesRequest::set_allocated_page_token(::std::string* page_token) {
  if (page_token != NULL) {
    
  } else {
    
  }
  page_token_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), page_token,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.iam.admin.v1.ListRolesRequest.page_token)
}
inline ::std::string* ListRolesRequest::unsafe_arena_release_page_token() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.iam.admin.v1.ListRolesRequest.page_token)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return page_token_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ListRolesRequest::unsafe_arena_set_allocated_page_token(
    ::std::string* page_token) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (page_token != NULL) {
    
  } else {
    
  }
  page_token_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      page_token, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.iam.admin.v1.ListRolesRequest.page_token)
}

// .google.iam.admin.v1.RoleView view = 4;
inline void ListRolesRequest::clear_view() {
  view_ = 0;
}
inline ::google::iam::admin::v1::RoleView ListRolesRequest::view() const {
  // @@protoc_insertion_point(field_get:google.iam.admin.v1.ListRolesRequest.view)
  return static_cast< ::google::iam::admin::v1::RoleView >(view_);
}
inline void ListRolesRequest::set_view(::google::iam::admin::v1::RoleView value) {
  
  view_ = value;
  // @@protoc_insertion_point(field_set:google.iam.admin.v1.ListRolesRequest.view)
}

// bool show_deleted = 6;
inline void ListRolesRequest::clear_show_deleted() {
  show_deleted_ = false;
}
inline bool ListRolesRequest::show_deleted() const {
  // @@protoc_insertion_point(field_get:google.iam.admin.v1.ListRolesRequest.show_deleted)
  return show_deleted_;
}
inline void ListRolesRequest::set_show_deleted(bool value) {
  
  show_deleted_ = value;
  // @@protoc_insertion_point(field_set:google.iam.admin.v1.ListRolesRequest.show_deleted)
}

// -------------------------------------------------------------------

// ListRolesResponse

// repeated .google.iam.admin.v1.Role roles = 1;
inline int ListRolesResponse::roles_size() const {
  return roles_.size();
}
inline void ListRolesResponse::clear_roles() {
  roles_.Clear();
}
inline const ::google::iam::admin::v1::Role& ListRolesResponse::roles(int index) const {
  // @@protoc_insertion_point(field_get:google.iam.admin.v1.ListRolesResponse.roles)
  return roles_.Get(index);
}
inline ::google::iam::admin::v1::Role* ListRolesResponse::mutable_roles(int index) {
  // @@protoc_insertion_point(field_mutable:google.iam.admin.v1.ListRolesResponse.roles)
  return roles_.Mutable(index);
}
inline ::google::iam::admin::v1::Role* ListRolesResponse::add_roles() {
  // @@protoc_insertion_point(field_add:google.iam.admin.v1.ListRolesResponse.roles)
  return roles_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::google::iam::admin::v1::Role >*
ListRolesResponse::mutable_roles() {
  // @@protoc_insertion_point(field_mutable_list:google.iam.admin.v1.ListRolesResponse.roles)
  return &roles_;
}
inline const ::google::protobuf::RepeatedPtrField< ::google::iam::admin::v1::Role >&
ListRolesResponse::roles() const {
  // @@protoc_insertion_point(field_list:google.iam.admin.v1.ListRolesResponse.roles)
  return roles_;
}

// string next_page_token = 2;
inline void ListRolesResponse::clear_next_page_token() {
  next_page_token_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& ListRolesResponse::next_page_token() const {
  // @@protoc_insertion_point(field_get:google.iam.admin.v1.ListRolesResponse.next_page_token)
  return next_page_token_.Get();
}
inline void ListRolesResponse::set_next_page_token(const ::std::string& value) {
  
  next_page_token_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.iam.admin.v1.ListRolesResponse.next_page_token)
}
#if LANG_CXX11
inline void ListRolesResponse::set_next_page_token(::std::string&& value) {
  
  next_page_token_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:google.iam.admin.v1.ListRolesResponse.next_page_token)
}
#endif
inline void ListRolesResponse::set_next_page_token(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  next_page_token_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.iam.admin.v1.ListRolesResponse.next_page_token)
}
inline void ListRolesResponse::set_next_page_token(const char* value,
    size_t size) {
  
  next_page_token_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.iam.admin.v1.ListRolesResponse.next_page_token)
}
inline ::std::string* ListRolesResponse::mutable_next_page_token() {
  
  // @@protoc_insertion_point(field_mutable:google.iam.admin.v1.ListRolesResponse.next_page_token)
  return next_page_token_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ListRolesResponse::release_next_page_token() {
  // @@protoc_insertion_point(field_release:google.iam.admin.v1.ListRolesResponse.next_page_token)
  
  return next_page_token_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ListRolesResponse::set_allocated_next_page_token(::std::string* next_page_token) {
  if (next_page_token != NULL) {
    
  } else {
    
  }
  next_page_token_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), next_page_token,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.iam.admin.v1.ListRolesResponse.next_page_token)
}
inline ::std::string* ListRolesResponse::unsafe_arena_release_next_page_token() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.iam.admin.v1.ListRolesResponse.next_page_token)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return next_page_token_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ListRolesResponse::unsafe_arena_set_allocated_next_page_token(
    ::std::string* next_page_token) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (next_page_token != NULL) {
    
  } else {
    
  }
  next_page_token_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      next_page_token, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.iam.admin.v1.ListRolesResponse.next_page_token)
}

// -------------------------------------------------------------------

// GetRoleRequest

// string name = 1;
inline void GetRoleRequest::clear_name() {
  name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& GetRoleRequest::name() const {
  // @@protoc_insertion_point(field_get:google.iam.admin.v1.GetRoleRequest.name)
  return name_.Get();
}
inline void GetRoleRequest::set_name(const ::std::string& value) {
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.iam.admin.v1.GetRoleRequest.name)
}
#if LANG_CXX11
inline void GetRoleRequest::set_name(::std::string&& value) {
  
  name_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:google.iam.admin.v1.GetRoleRequest.name)
}
#endif
inline void GetRoleRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.iam.admin.v1.GetRoleRequest.name)
}
inline void GetRoleRequest::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.iam.admin.v1.GetRoleRequest.name)
}
inline ::std::string* GetRoleRequest::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:google.iam.admin.v1.GetRoleRequest.name)
  return name_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* GetRoleRequest::release_name() {
  // @@protoc_insertion_point(field_release:google.iam.admin.v1.GetRoleRequest.name)
  
  return name_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void GetRoleRequest::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.iam.admin.v1.GetRoleRequest.name)
}
inline ::std::string* GetRoleRequest::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.iam.admin.v1.GetRoleRequest.name)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return name_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void GetRoleRequest::unsafe_arena_set_allocated_name(
    ::std::string* name) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (name != NULL) {
    
  } else {
    
  }
  name_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      name, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.iam.admin.v1.GetRoleRequest.name)
}

// -------------------------------------------------------------------

// CreateRoleRequest

// string parent = 1;
inline void CreateRoleRequest::clear_parent() {
  parent_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& CreateRoleRequest::parent() const {
  // @@protoc_insertion_point(field_get:google.iam.admin.v1.CreateRoleRequest.parent)
  return parent_.Get();
}
inline void CreateRoleRequest::set_parent(const ::std::string& value) {
  
  parent_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.iam.admin.v1.CreateRoleRequest.parent)
}
#if LANG_CXX11
inline void CreateRoleRequest::set_parent(::std::string&& value) {
  
  parent_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:google.iam.admin.v1.CreateRoleRequest.parent)
}
#endif
inline void CreateRoleRequest::set_parent(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  parent_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.iam.admin.v1.CreateRoleRequest.parent)
}
inline void CreateRoleRequest::set_parent(const char* value,
    size_t size) {
  
  parent_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.iam.admin.v1.CreateRoleRequest.parent)
}
inline ::std::string* CreateRoleRequest::mutable_parent() {
  
  // @@protoc_insertion_point(field_mutable:google.iam.admin.v1.CreateRoleRequest.parent)
  return parent_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* CreateRoleRequest::release_parent() {
  // @@protoc_insertion_point(field_release:google.iam.admin.v1.CreateRoleRequest.parent)
  
  return parent_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void CreateRoleRequest::set_allocated_parent(::std::string* parent) {
  if (parent != NULL) {
    
  } else {
    
  }
  parent_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), parent,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.iam.admin.v1.CreateRoleRequest.parent)
}
inline ::std::string* CreateRoleRequest::unsafe_arena_release_parent() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.iam.admin.v1.CreateRoleRequest.parent)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return parent_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void CreateRoleRequest::unsafe_arena_set_allocated_parent(
    ::std::string* parent) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (parent != NULL) {
    
  } else {
    
  }
  parent_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      parent, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.iam.admin.v1.CreateRoleRequest.parent)
}

// string role_id = 2;
inline void CreateRoleRequest::clear_role_id() {
  role_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& CreateRoleRequest::role_id() const {
  // @@protoc_insertion_point(field_get:google.iam.admin.v1.CreateRoleRequest.role_id)
  return role_id_.Get();
}
inline void CreateRoleRequest::set_role_id(const ::std::string& value) {
  
  role_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.iam.admin.v1.CreateRoleRequest.role_id)
}
#if LANG_CXX11
inline void CreateRoleRequest::set_role_id(::std::string&& value) {
  
  role_id_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:google.iam.admin.v1.CreateRoleRequest.role_id)
}
#endif
inline void CreateRoleRequest::set_role_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  role_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.iam.admin.v1.CreateRoleRequest.role_id)
}
inline void CreateRoleRequest::set_role_id(const char* value,
    size_t size) {
  
  role_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.iam.admin.v1.CreateRoleRequest.role_id)
}
inline ::std::string* CreateRoleRequest::mutable_role_id() {
  
  // @@protoc_insertion_point(field_mutable:google.iam.admin.v1.CreateRoleRequest.role_id)
  return role_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* CreateRoleRequest::release_role_id() {
  // @@protoc_insertion_point(field_release:google.iam.admin.v1.CreateRoleRequest.role_id)
  
  return role_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void CreateRoleRequest::set_allocated_role_id(::std::string* role_id) {
  if (role_id != NULL) {
    
  } else {
    
  }
  role_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), role_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.iam.admin.v1.CreateRoleRequest.role_id)
}
inline ::std::string* CreateRoleRequest::unsafe_arena_release_role_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.iam.admin.v1.CreateRoleRequest.role_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return role_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void CreateRoleRequest::unsafe_arena_set_allocated_role_id(
    ::std::string* role_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (role_id != NULL) {
    
  } else {
    
  }
  role_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      role_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.iam.admin.v1.CreateRoleRequest.role_id)
}

// .google.iam.admin.v1.Role role = 3;
inline bool CreateRoleRequest::has_role() const {
  return this != internal_default_instance() && role_ != NULL;
}
inline void CreateRoleRequest::clear_role() {
  if (GetArenaNoVirtual() == NULL && role_ != NULL) {
    delete role_;
  }
  role_ = NULL;
}
inline const ::google::iam::admin::v1::Role& CreateRoleRequest::role() const {
  const ::google::iam::admin::v1::Role* p = role_;
  // @@protoc_insertion_point(field_get:google.iam.admin.v1.CreateRoleRequest.role)
  return p != NULL ? *p : *reinterpret_cast<const ::google::iam::admin::v1::Role*>(
      &::google::iam::admin::v1::_Role_default_instance_);
}
inline ::google::iam::admin::v1::Role* CreateRoleRequest::release_role() {
  // @@protoc_insertion_point(field_release:google.iam.admin.v1.CreateRoleRequest.role)
  
  ::google::iam::admin::v1::Role* temp = role_;
  if (GetArenaNoVirtual() != NULL) {
    temp = ::google::protobuf::internal::DuplicateIfNonNull(temp, NULL);
  }
  role_ = NULL;
  return temp;
}
inline ::google::iam::admin::v1::Role* CreateRoleRequest::unsafe_arena_release_role() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.iam.admin.v1.CreateRoleRequest.role)
  
  ::google::iam::admin::v1::Role* temp = role_;
  role_ = NULL;
  return temp;
}
inline ::google::iam::admin::v1::Role* CreateRoleRequest::mutable_role() {
  
  if (role_ == NULL) {
    _slow_mutable_role();
  }
  // @@protoc_insertion_point(field_mutable:google.iam.admin.v1.CreateRoleRequest.role)
  return role_;
}
inline void CreateRoleRequest::set_allocated_role(::google::iam::admin::v1::Role* role) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete role_;
  }
  if (role) {
    ::google::protobuf::Arena* submessage_arena =
      ::google::protobuf::Arena::GetArena(role);
    if (message_arena != submessage_arena) {
      role = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, role, submessage_arena);
    }
    
  } else {
    
  }
  role_ = role;
  // @@protoc_insertion_point(field_set_allocated:google.iam.admin.v1.CreateRoleRequest.role)
}

// -------------------------------------------------------------------

// UpdateRoleRequest

// string name = 1;
inline void UpdateRoleRequest::clear_name() {
  name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& UpdateRoleRequest::name() const {
  // @@protoc_insertion_point(field_get:google.iam.admin.v1.UpdateRoleRequest.name)
  return name_.Get();
}
inline void UpdateRoleRequest::set_name(const ::std::string& value) {
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.iam.admin.v1.UpdateRoleRequest.name)
}
#if LANG_CXX11
inline void UpdateRoleRequest::set_name(::std::string&& value) {
  
  name_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:google.iam.admin.v1.UpdateRoleRequest.name)
}
#endif
inline void UpdateRoleRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.iam.admin.v1.UpdateRoleRequest.name)
}
inline void UpdateRoleRequest::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.iam.admin.v1.UpdateRoleRequest.name)
}
inline ::std::string* UpdateRoleRequest::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:google.iam.admin.v1.UpdateRoleRequest.name)
  return name_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* UpdateRoleRequest::release_name() {
  // @@protoc_insertion_point(field_release:google.iam.admin.v1.UpdateRoleRequest.name)
  
  return name_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void UpdateRoleRequest::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.iam.admin.v1.UpdateRoleRequest.name)
}
inline ::std::string* UpdateRoleRequest::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.iam.admin.v1.UpdateRoleRequest.name)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return name_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void UpdateRoleRequest::unsafe_arena_set_allocated_name(
    ::std::string* name) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (name != NULL) {
    
  } else {
    
  }
  name_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      name, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.iam.admin.v1.UpdateRoleRequest.name)
}

// .google.iam.admin.v1.Role role = 2;
inline bool UpdateRoleRequest::has_role() const {
  return this != internal_default_instance() && role_ != NULL;
}
inline void UpdateRoleRequest::clear_role() {
  if (GetArenaNoVirtual() == NULL && role_ != NULL) {
    delete role_;
  }
  role_ = NULL;
}
inline const ::google::iam::admin::v1::Role& UpdateRoleRequest::role() const {
  const ::google::iam::admin::v1::Role* p = role_;
  // @@protoc_insertion_point(field_get:google.iam.admin.v1.UpdateRoleRequest.role)
  return p != NULL ? *p : *reinterpret_cast<const ::google::iam::admin::v1::Role*>(
      &::google::iam::admin::v1::_Role_default_instance_);
}
inline ::google::iam::admin::v1::Role* UpdateRoleRequest::release_role() {
  // @@protoc_insertion_point(field_release:google.iam.admin.v1.UpdateRoleRequest.role)
  
  ::google::iam::admin::v1::Role* temp = role_;
  if (GetArenaNoVirtual() != NULL) {
    temp = ::google::protobuf::internal::DuplicateIfNonNull(temp, NULL);
  }
  role_ = NULL;
  return temp;
}
inline ::google::iam::admin::v1::Role* UpdateRoleRequest::unsafe_arena_release_role() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.iam.admin.v1.UpdateRoleRequest.role)
  
  ::google::iam::admin::v1::Role* temp = role_;
  role_ = NULL;
  return temp;
}
inline ::google::iam::admin::v1::Role* UpdateRoleRequest::mutable_role() {
  
  if (role_ == NULL) {
    _slow_mutable_role();
  }
  // @@protoc_insertion_point(field_mutable:google.iam.admin.v1.UpdateRoleRequest.role)
  return role_;
}
inline void UpdateRoleRequest::set_allocated_role(::google::iam::admin::v1::Role* role) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete role_;
  }
  if (role) {
    ::google::protobuf::Arena* submessage_arena =
      ::google::protobuf::Arena::GetArena(role);
    if (message_arena != submessage_arena) {
      role = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, role, submessage_arena);
    }
    
  } else {
    
  }
  role_ = role;
  // @@protoc_insertion_point(field_set_allocated:google.iam.admin.v1.UpdateRoleRequest.role)
}

// .google.protobuf.FieldMask update_mask = 3;
inline bool UpdateRoleRequest::has_update_mask() const {
  return this != internal_default_instance() && update_mask_ != NULL;
}
inline const ::google::protobuf::FieldMask& UpdateRoleRequest::update_mask() const {
  const ::google::protobuf::FieldMask* p = update_mask_;
  // @@protoc_insertion_point(field_get:google.iam.admin.v1.UpdateRoleRequest.update_mask)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::FieldMask*>(
      &::google::protobuf::_FieldMask_default_instance_);
}
inline ::google::protobuf::FieldMask* UpdateRoleRequest::release_update_mask() {
  // @@protoc_insertion_point(field_release:google.iam.admin.v1.UpdateRoleRequest.update_mask)
  
  ::google::protobuf::FieldMask* temp = update_mask_;
  if (GetArenaNoVirtual() != NULL) {
    temp = ::google::protobuf::internal::DuplicateIfNonNull(temp, NULL);
  }
  update_mask_ = NULL;
  return temp;
}
inline ::google::protobuf::FieldMask* UpdateRoleRequest::unsafe_arena_release_update_mask() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.iam.admin.v1.UpdateRoleRequest.update_mask)
  
  ::google::protobuf::FieldMask* temp = update_mask_;
  update_mask_ = NULL;
  return temp;
}
inline ::google::protobuf::FieldMask* UpdateRoleRequest::mutable_update_mask() {
  
  if (update_mask_ == NULL) {
    _slow_mutable_update_mask();
  }
  // @@protoc_insertion_point(field_mutable:google.iam.admin.v1.UpdateRoleRequest.update_mask)
  return update_mask_;
}
inline void UpdateRoleRequest::set_allocated_update_mask(::google::protobuf::FieldMask* update_mask) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(update_mask_);
  }
  if (update_mask) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      update_mask = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, update_mask, submessage_arena);
    }
    
  } else {
    
  }
  update_mask_ = update_mask;
  // @@protoc_insertion_point(field_set_allocated:google.iam.admin.v1.UpdateRoleRequest.update_mask)
}

// -------------------------------------------------------------------

// DeleteRoleRequest

// string name = 1;
inline void DeleteRoleRequest::clear_name() {
  name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& DeleteRoleRequest::name() const {
  // @@protoc_insertion_point(field_get:google.iam.admin.v1.DeleteRoleRequest.name)
  return name_.Get();
}
inline void DeleteRoleRequest::set_name(const ::std::string& value) {
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.iam.admin.v1.DeleteRoleRequest.name)
}
#if LANG_CXX11
inline void DeleteRoleRequest::set_name(::std::string&& value) {
  
  name_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:google.iam.admin.v1.DeleteRoleRequest.name)
}
#endif
inline void DeleteRoleRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.iam.admin.v1.DeleteRoleRequest.name)
}
inline void DeleteRoleRequest::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.iam.admin.v1.DeleteRoleRequest.name)
}
inline ::std::string* DeleteRoleRequest::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:google.iam.admin.v1.DeleteRoleRequest.name)
  return name_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* DeleteRoleRequest::release_name() {
  // @@protoc_insertion_point(field_release:google.iam.admin.v1.DeleteRoleRequest.name)
  
  return name_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void DeleteRoleRequest::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.iam.admin.v1.DeleteRoleRequest.name)
}
inline ::std::string* DeleteRoleRequest::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.iam.admin.v1.DeleteRoleRequest.name)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return name_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void DeleteRoleRequest::unsafe_arena_set_allocated_name(
    ::std::string* name) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (name != NULL) {
    
  } else {
    
  }
  name_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      name, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.iam.admin.v1.DeleteRoleRequest.name)
}

// bytes etag = 2;
inline void DeleteRoleRequest::clear_etag() {
  etag_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& DeleteRoleRequest::etag() const {
  // @@protoc_insertion_point(field_get:google.iam.admin.v1.DeleteRoleRequest.etag)
  return etag_.Get();
}
inline void DeleteRoleRequest::set_etag(const ::std::string& value) {
  
  etag_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.iam.admin.v1.DeleteRoleRequest.etag)
}
#if LANG_CXX11
inline void DeleteRoleRequest::set_etag(::std::string&& value) {
  
  etag_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:google.iam.admin.v1.DeleteRoleRequest.etag)
}
#endif
inline void DeleteRoleRequest::set_etag(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  etag_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.iam.admin.v1.DeleteRoleRequest.etag)
}
inline void DeleteRoleRequest::set_etag(const void* value,
    size_t size) {
  
  etag_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.iam.admin.v1.DeleteRoleRequest.etag)
}
inline ::std::string* DeleteRoleRequest::mutable_etag() {
  
  // @@protoc_insertion_point(field_mutable:google.iam.admin.v1.DeleteRoleRequest.etag)
  return etag_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* DeleteRoleRequest::release_etag() {
  // @@protoc_insertion_point(field_release:google.iam.admin.v1.DeleteRoleRequest.etag)
  
  return etag_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void DeleteRoleRequest::set_allocated_etag(::std::string* etag) {
  if (etag != NULL) {
    
  } else {
    
  }
  etag_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), etag,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.iam.admin.v1.DeleteRoleRequest.etag)
}
inline ::std::string* DeleteRoleRequest::unsafe_arena_release_etag() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.iam.admin.v1.DeleteRoleRequest.etag)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return etag_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void DeleteRoleRequest::unsafe_arena_set_allocated_etag(
    ::std::string* etag) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (etag != NULL) {
    
  } else {
    
  }
  etag_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      etag, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.iam.admin.v1.DeleteRoleRequest.etag)
}

// -------------------------------------------------------------------

// UndeleteRoleRequest

// string name = 1;
inline void UndeleteRoleRequest::clear_name() {
  name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& UndeleteRoleRequest::name() const {
  // @@protoc_insertion_point(field_get:google.iam.admin.v1.UndeleteRoleRequest.name)
  return name_.Get();
}
inline void UndeleteRoleRequest::set_name(const ::std::string& value) {
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.iam.admin.v1.UndeleteRoleRequest.name)
}
#if LANG_CXX11
inline void UndeleteRoleRequest::set_name(::std::string&& value) {
  
  name_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:google.iam.admin.v1.UndeleteRoleRequest.name)
}
#endif
inline void UndeleteRoleRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.iam.admin.v1.UndeleteRoleRequest.name)
}
inline void UndeleteRoleRequest::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.iam.admin.v1.UndeleteRoleRequest.name)
}
inline ::std::string* UndeleteRoleRequest::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:google.iam.admin.v1.UndeleteRoleRequest.name)
  return name_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* UndeleteRoleRequest::release_name() {
  // @@protoc_insertion_point(field_release:google.iam.admin.v1.UndeleteRoleRequest.name)
  
  return name_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void UndeleteRoleRequest::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.iam.admin.v1.UndeleteRoleRequest.name)
}
inline ::std::string* UndeleteRoleRequest::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.iam.admin.v1.UndeleteRoleRequest.name)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return name_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void UndeleteRoleRequest::unsafe_arena_set_allocated_name(
    ::std::string* name) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (name != NULL) {
    
  } else {
    
  }
  name_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      name, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.iam.admin.v1.UndeleteRoleRequest.name)
}

// bytes etag = 2;
inline void UndeleteRoleRequest::clear_etag() {
  etag_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& UndeleteRoleRequest::etag() const {
  // @@protoc_insertion_point(field_get:google.iam.admin.v1.UndeleteRoleRequest.etag)
  return etag_.Get();
}
inline void UndeleteRoleRequest::set_etag(const ::std::string& value) {
  
  etag_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.iam.admin.v1.UndeleteRoleRequest.etag)
}
#if LANG_CXX11
inline void UndeleteRoleRequest::set_etag(::std::string&& value) {
  
  etag_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:google.iam.admin.v1.UndeleteRoleRequest.etag)
}
#endif
inline void UndeleteRoleRequest::set_etag(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  etag_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.iam.admin.v1.UndeleteRoleRequest.etag)
}
inline void UndeleteRoleRequest::set_etag(const void* value,
    size_t size) {
  
  etag_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.iam.admin.v1.UndeleteRoleRequest.etag)
}
inline ::std::string* UndeleteRoleRequest::mutable_etag() {
  
  // @@protoc_insertion_point(field_mutable:google.iam.admin.v1.UndeleteRoleRequest.etag)
  return etag_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* UndeleteRoleRequest::release_etag() {
  // @@protoc_insertion_point(field_release:google.iam.admin.v1.UndeleteRoleRequest.etag)
  
  return etag_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void UndeleteRoleRequest::set_allocated_etag(::std::string* etag) {
  if (etag != NULL) {
    
  } else {
    
  }
  etag_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), etag,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.iam.admin.v1.UndeleteRoleRequest.etag)
}
inline ::std::string* UndeleteRoleRequest::unsafe_arena_release_etag() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.iam.admin.v1.UndeleteRoleRequest.etag)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return etag_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void UndeleteRoleRequest::unsafe_arena_set_allocated_etag(
    ::std::string* etag) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (etag != NULL) {
    
  } else {
    
  }
  etag_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      etag, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.iam.admin.v1.UndeleteRoleRequest.etag)
}

// -------------------------------------------------------------------

// Permission

// string name = 1;
inline void Permission::clear_name() {
  name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& Permission::name() const {
  // @@protoc_insertion_point(field_get:google.iam.admin.v1.Permission.name)
  return name_.Get();
}
inline void Permission::set_name(const ::std::string& value) {
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.iam.admin.v1.Permission.name)
}
#if LANG_CXX11
inline void Permission::set_name(::std::string&& value) {
  
  name_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:google.iam.admin.v1.Permission.name)
}
#endif
inline void Permission::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.iam.admin.v1.Permission.name)
}
inline void Permission::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.iam.admin.v1.Permission.name)
}
inline ::std::string* Permission::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:google.iam.admin.v1.Permission.name)
  return name_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* Permission::release_name() {
  // @@protoc_insertion_point(field_release:google.iam.admin.v1.Permission.name)
  
  return name_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void Permission::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.iam.admin.v1.Permission.name)
}
inline ::std::string* Permission::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.iam.admin.v1.Permission.name)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return name_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void Permission::unsafe_arena_set_allocated_name(
    ::std::string* name) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (name != NULL) {
    
  } else {
    
  }
  name_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      name, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.iam.admin.v1.Permission.name)
}

// string title = 2;
inline void Permission::clear_title() {
  title_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& Permission::title() const {
  // @@protoc_insertion_point(field_get:google.iam.admin.v1.Permission.title)
  return title_.Get();
}
inline void Permission::set_title(const ::std::string& value) {
  
  title_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.iam.admin.v1.Permission.title)
}
#if LANG_CXX11
inline void Permission::set_title(::std::string&& value) {
  
  title_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:google.iam.admin.v1.Permission.title)
}
#endif
inline void Permission::set_title(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  title_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.iam.admin.v1.Permission.title)
}
inline void Permission::set_title(const char* value,
    size_t size) {
  
  title_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.iam.admin.v1.Permission.title)
}
inline ::std::string* Permission::mutable_title() {
  
  // @@protoc_insertion_point(field_mutable:google.iam.admin.v1.Permission.title)
  return title_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* Permission::release_title() {
  // @@protoc_insertion_point(field_release:google.iam.admin.v1.Permission.title)
  
  return title_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void Permission::set_allocated_title(::std::string* title) {
  if (title != NULL) {
    
  } else {
    
  }
  title_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), title,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.iam.admin.v1.Permission.title)
}
inline ::std::string* Permission::unsafe_arena_release_title() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.iam.admin.v1.Permission.title)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return title_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void Permission::unsafe_arena_set_allocated_title(
    ::std::string* title) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (title != NULL) {
    
  } else {
    
  }
  title_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      title, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.iam.admin.v1.Permission.title)
}

// string description = 3;
inline void Permission::clear_description() {
  description_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& Permission::description() const {
  // @@protoc_insertion_point(field_get:google.iam.admin.v1.Permission.description)
  return description_.Get();
}
inline void Permission::set_description(const ::std::string& value) {
  
  description_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.iam.admin.v1.Permission.description)
}
#if LANG_CXX11
inline void Permission::set_description(::std::string&& value) {
  
  description_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:google.iam.admin.v1.Permission.description)
}
#endif
inline void Permission::set_description(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  description_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.iam.admin.v1.Permission.description)
}
inline void Permission::set_description(const char* value,
    size_t size) {
  
  description_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.iam.admin.v1.Permission.description)
}
inline ::std::string* Permission::mutable_description() {
  
  // @@protoc_insertion_point(field_mutable:google.iam.admin.v1.Permission.description)
  return description_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* Permission::release_description() {
  // @@protoc_insertion_point(field_release:google.iam.admin.v1.Permission.description)
  
  return description_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void Permission::set_allocated_description(::std::string* description) {
  if (description != NULL) {
    
  } else {
    
  }
  description_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), description,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.iam.admin.v1.Permission.description)
}
inline ::std::string* Permission::unsafe_arena_release_description() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.iam.admin.v1.Permission.description)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return description_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void Permission::unsafe_arena_set_allocated_description(
    ::std::string* description) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (description != NULL) {
    
  } else {
    
  }
  description_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      description, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.iam.admin.v1.Permission.description)
}

// bool only_in_predefined_roles = 4;
inline void Permission::clear_only_in_predefined_roles() {
  only_in_predefined_roles_ = false;
}
inline bool Permission::only_in_predefined_roles() const {
  // @@protoc_insertion_point(field_get:google.iam.admin.v1.Permission.only_in_predefined_roles)
  return only_in_predefined_roles_;
}
inline void Permission::set_only_in_predefined_roles(bool value) {
  
  only_in_predefined_roles_ = value;
  // @@protoc_insertion_point(field_set:google.iam.admin.v1.Permission.only_in_predefined_roles)
}

// .google.iam.admin.v1.Permission.PermissionLaunchStage stage = 5;
inline void Permission::clear_stage() {
  stage_ = 0;
}
inline ::google::iam::admin::v1::Permission_PermissionLaunchStage Permission::stage() const {
  // @@protoc_insertion_point(field_get:google.iam.admin.v1.Permission.stage)
  return static_cast< ::google::iam::admin::v1::Permission_PermissionLaunchStage >(stage_);
}
inline void Permission::set_stage(::google::iam::admin::v1::Permission_PermissionLaunchStage value) {
  
  stage_ = value;
  // @@protoc_insertion_point(field_set:google.iam.admin.v1.Permission.stage)
}

// .google.iam.admin.v1.Permission.CustomRolesSupportLevel custom_roles_support_level = 6;
inline void Permission::clear_custom_roles_support_level() {
  custom_roles_support_level_ = 0;
}
inline ::google::iam::admin::v1::Permission_CustomRolesSupportLevel Permission::custom_roles_support_level() const {
  // @@protoc_insertion_point(field_get:google.iam.admin.v1.Permission.custom_roles_support_level)
  return static_cast< ::google::iam::admin::v1::Permission_CustomRolesSupportLevel >(custom_roles_support_level_);
}
inline void Permission::set_custom_roles_support_level(::google::iam::admin::v1::Permission_CustomRolesSupportLevel value) {
  
  custom_roles_support_level_ = value;
  // @@protoc_insertion_point(field_set:google.iam.admin.v1.Permission.custom_roles_support_level)
}

// -------------------------------------------------------------------

// QueryTestablePermissionsRequest

// string full_resource_name = 1;
inline void QueryTestablePermissionsRequest::clear_full_resource_name() {
  full_resource_name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& QueryTestablePermissionsRequest::full_resource_name() const {
  // @@protoc_insertion_point(field_get:google.iam.admin.v1.QueryTestablePermissionsRequest.full_resource_name)
  return full_resource_name_.Get();
}
inline void QueryTestablePermissionsRequest::set_full_resource_name(const ::std::string& value) {
  
  full_resource_name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.iam.admin.v1.QueryTestablePermissionsRequest.full_resource_name)
}
#if LANG_CXX11
inline void QueryTestablePermissionsRequest::set_full_resource_name(::std::string&& value) {
  
  full_resource_name_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:google.iam.admin.v1.QueryTestablePermissionsRequest.full_resource_name)
}
#endif
inline void QueryTestablePermissionsRequest::set_full_resource_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  full_resource_name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.iam.admin.v1.QueryTestablePermissionsRequest.full_resource_name)
}
inline void QueryTestablePermissionsRequest::set_full_resource_name(const char* value,
    size_t size) {
  
  full_resource_name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.iam.admin.v1.QueryTestablePermissionsRequest.full_resource_name)
}
inline ::std::string* QueryTestablePermissionsRequest::mutable_full_resource_name() {
  
  // @@protoc_insertion_point(field_mutable:google.iam.admin.v1.QueryTestablePermissionsRequest.full_resource_name)
  return full_resource_name_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* QueryTestablePermissionsRequest::release_full_resource_name() {
  // @@protoc_insertion_point(field_release:google.iam.admin.v1.QueryTestablePermissionsRequest.full_resource_name)
  
  return full_resource_name_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void QueryTestablePermissionsRequest::set_allocated_full_resource_name(::std::string* full_resource_name) {
  if (full_resource_name != NULL) {
    
  } else {
    
  }
  full_resource_name_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), full_resource_name,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.iam.admin.v1.QueryTestablePermissionsRequest.full_resource_name)
}
inline ::std::string* QueryTestablePermissionsRequest::unsafe_arena_release_full_resource_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.iam.admin.v1.QueryTestablePermissionsRequest.full_resource_name)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return full_resource_name_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void QueryTestablePermissionsRequest::unsafe_arena_set_allocated_full_resource_name(
    ::std::string* full_resource_name) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (full_resource_name != NULL) {
    
  } else {
    
  }
  full_resource_name_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      full_resource_name, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.iam.admin.v1.QueryTestablePermissionsRequest.full_resource_name)
}

// int32 page_size = 2;
inline void QueryTestablePermissionsRequest::clear_page_size() {
  page_size_ = 0;
}
inline ::google::protobuf::int32 QueryTestablePermissionsRequest::page_size() const {
  // @@protoc_insertion_point(field_get:google.iam.admin.v1.QueryTestablePermissionsRequest.page_size)
  return page_size_;
}
inline void QueryTestablePermissionsRequest::set_page_size(::google::protobuf::int32 value) {
  
  page_size_ = value;
  // @@protoc_insertion_point(field_set:google.iam.admin.v1.QueryTestablePermissionsRequest.page_size)
}

// string page_token = 3;
inline void QueryTestablePermissionsRequest::clear_page_token() {
  page_token_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& QueryTestablePermissionsRequest::page_token() const {
  // @@protoc_insertion_point(field_get:google.iam.admin.v1.QueryTestablePermissionsRequest.page_token)
  return page_token_.Get();
}
inline void QueryTestablePermissionsRequest::set_page_token(const ::std::string& value) {
  
  page_token_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.iam.admin.v1.QueryTestablePermissionsRequest.page_token)
}
#if LANG_CXX11
inline void QueryTestablePermissionsRequest::set_page_token(::std::string&& value) {
  
  page_token_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:google.iam.admin.v1.QueryTestablePermissionsRequest.page_token)
}
#endif
inline void QueryTestablePermissionsRequest::set_page_token(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  page_token_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.iam.admin.v1.QueryTestablePermissionsRequest.page_token)
}
inline void QueryTestablePermissionsRequest::set_page_token(const char* value,
    size_t size) {
  
  page_token_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.iam.admin.v1.QueryTestablePermissionsRequest.page_token)
}
inline ::std::string* QueryTestablePermissionsRequest::mutable_page_token() {
  
  // @@protoc_insertion_point(field_mutable:google.iam.admin.v1.QueryTestablePermissionsRequest.page_token)
  return page_token_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* QueryTestablePermissionsRequest::release_page_token() {
  // @@protoc_insertion_point(field_release:google.iam.admin.v1.QueryTestablePermissionsRequest.page_token)
  
  return page_token_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void QueryTestablePermissionsRequest::set_allocated_page_token(::std::string* page_token) {
  if (page_token != NULL) {
    
  } else {
    
  }
  page_token_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), page_token,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.iam.admin.v1.QueryTestablePermissionsRequest.page_token)
}
inline ::std::string* QueryTestablePermissionsRequest::unsafe_arena_release_page_token() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.iam.admin.v1.QueryTestablePermissionsRequest.page_token)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return page_token_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void QueryTestablePermissionsRequest::unsafe_arena_set_allocated_page_token(
    ::std::string* page_token) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (page_token != NULL) {
    
  } else {
    
  }
  page_token_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      page_token, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.iam.admin.v1.QueryTestablePermissionsRequest.page_token)
}

// -------------------------------------------------------------------

// QueryTestablePermissionsResponse

// repeated .google.iam.admin.v1.Permission permissions = 1;
inline int QueryTestablePermissionsResponse::permissions_size() const {
  return permissions_.size();
}
inline void QueryTestablePermissionsResponse::clear_permissions() {
  permissions_.Clear();
}
inline const ::google::iam::admin::v1::Permission& QueryTestablePermissionsResponse::permissions(int index) const {
  // @@protoc_insertion_point(field_get:google.iam.admin.v1.QueryTestablePermissionsResponse.permissions)
  return permissions_.Get(index);
}
inline ::google::iam::admin::v1::Permission* QueryTestablePermissionsResponse::mutable_permissions(int index) {
  // @@protoc_insertion_point(field_mutable:google.iam.admin.v1.QueryTestablePermissionsResponse.permissions)
  return permissions_.Mutable(index);
}
inline ::google::iam::admin::v1::Permission* QueryTestablePermissionsResponse::add_permissions() {
  // @@protoc_insertion_point(field_add:google.iam.admin.v1.QueryTestablePermissionsResponse.permissions)
  return permissions_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::google::iam::admin::v1::Permission >*
QueryTestablePermissionsResponse::mutable_permissions() {
  // @@protoc_insertion_point(field_mutable_list:google.iam.admin.v1.QueryTestablePermissionsResponse.permissions)
  return &permissions_;
}
inline const ::google::protobuf::RepeatedPtrField< ::google::iam::admin::v1::Permission >&
QueryTestablePermissionsResponse::permissions() const {
  // @@protoc_insertion_point(field_list:google.iam.admin.v1.QueryTestablePermissionsResponse.permissions)
  return permissions_;
}

// string next_page_token = 2;
inline void QueryTestablePermissionsResponse::clear_next_page_token() {
  next_page_token_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& QueryTestablePermissionsResponse::next_page_token() const {
  // @@protoc_insertion_point(field_get:google.iam.admin.v1.QueryTestablePermissionsResponse.next_page_token)
  return next_page_token_.Get();
}
inline void QueryTestablePermissionsResponse::set_next_page_token(const ::std::string& value) {
  
  next_page_token_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.iam.admin.v1.QueryTestablePermissionsResponse.next_page_token)
}
#if LANG_CXX11
inline void QueryTestablePermissionsResponse::set_next_page_token(::std::string&& value) {
  
  next_page_token_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:google.iam.admin.v1.QueryTestablePermissionsResponse.next_page_token)
}
#endif
inline void QueryTestablePermissionsResponse::set_next_page_token(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  next_page_token_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.iam.admin.v1.QueryTestablePermissionsResponse.next_page_token)
}
inline void QueryTestablePermissionsResponse::set_next_page_token(const char* value,
    size_t size) {
  
  next_page_token_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.iam.admin.v1.QueryTestablePermissionsResponse.next_page_token)
}
inline ::std::string* QueryTestablePermissionsResponse::mutable_next_page_token() {
  
  // @@protoc_insertion_point(field_mutable:google.iam.admin.v1.QueryTestablePermissionsResponse.next_page_token)
  return next_page_token_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* QueryTestablePermissionsResponse::release_next_page_token() {
  // @@protoc_insertion_point(field_release:google.iam.admin.v1.QueryTestablePermissionsResponse.next_page_token)
  
  return next_page_token_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void QueryTestablePermissionsResponse::set_allocated_next_page_token(::std::string* next_page_token) {
  if (next_page_token != NULL) {
    
  } else {
    
  }
  next_page_token_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), next_page_token,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.iam.admin.v1.QueryTestablePermissionsResponse.next_page_token)
}
inline ::std::string* QueryTestablePermissionsResponse::unsafe_arena_release_next_page_token() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.iam.admin.v1.QueryTestablePermissionsResponse.next_page_token)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return next_page_token_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void QueryTestablePermissionsResponse::unsafe_arena_set_allocated_next_page_token(
    ::std::string* next_page_token) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (next_page_token != NULL) {
    
  } else {
    
  }
  next_page_token_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      next_page_token, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.iam.admin.v1.QueryTestablePermissionsResponse.next_page_token)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace admin
}  // namespace iam
}  // namespace google

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::google::iam::admin::v1::ListServiceAccountKeysRequest_KeyType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::google::iam::admin::v1::ListServiceAccountKeysRequest_KeyType>() {
  return ::google::iam::admin::v1::ListServiceAccountKeysRequest_KeyType_descriptor();
}
template <> struct is_proto_enum< ::google::iam::admin::v1::Role_RoleLaunchStage> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::google::iam::admin::v1::Role_RoleLaunchStage>() {
  return ::google::iam::admin::v1::Role_RoleLaunchStage_descriptor();
}
template <> struct is_proto_enum< ::google::iam::admin::v1::Permission_PermissionLaunchStage> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::google::iam::admin::v1::Permission_PermissionLaunchStage>() {
  return ::google::iam::admin::v1::Permission_PermissionLaunchStage_descriptor();
}
template <> struct is_proto_enum< ::google::iam::admin::v1::Permission_CustomRolesSupportLevel> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::google::iam::admin::v1::Permission_CustomRolesSupportLevel>() {
  return ::google::iam::admin::v1::Permission_CustomRolesSupportLevel_descriptor();
}
template <> struct is_proto_enum< ::google::iam::admin::v1::ServiceAccountKeyAlgorithm> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::google::iam::admin::v1::ServiceAccountKeyAlgorithm>() {
  return ::google::iam::admin::v1::ServiceAccountKeyAlgorithm_descriptor();
}
template <> struct is_proto_enum< ::google::iam::admin::v1::ServiceAccountPrivateKeyType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::google::iam::admin::v1::ServiceAccountPrivateKeyType>() {
  return ::google::iam::admin::v1::ServiceAccountPrivateKeyType_descriptor();
}
template <> struct is_proto_enum< ::google::iam::admin::v1::ServiceAccountPublicKeyType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::google::iam::admin::v1::ServiceAccountPublicKeyType>() {
  return ::google::iam::admin::v1::ServiceAccountPublicKeyType_descriptor();
}
template <> struct is_proto_enum< ::google::iam::admin::v1::RoleView> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::google::iam::admin::v1::RoleView>() {
  return ::google::iam::admin::v1::RoleView_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_google_2fiam_2fadmin_2fv1_2fiam_2eproto__INCLUDED
