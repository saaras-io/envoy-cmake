// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/devtools/clouddebugger/v2/controller.proto

#ifndef PROTOBUF_google_2fdevtools_2fclouddebugger_2fv2_2fcontroller_2eproto__INCLUDED
#define PROTOBUF_google_2fdevtools_2fclouddebugger_2fv2_2fcontroller_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "google/api/annotations.pb.h"
#include "google/devtools/clouddebugger/v2/data.pb.h"
#include <google/protobuf/empty.pb.h>
// @@protoc_insertion_point(includes)

namespace protobuf_google_2fdevtools_2fclouddebugger_2fv2_2fcontroller_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[6];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsRegisterDebuggeeRequestImpl();
void InitDefaultsRegisterDebuggeeRequest();
void InitDefaultsRegisterDebuggeeResponseImpl();
void InitDefaultsRegisterDebuggeeResponse();
void InitDefaultsListActiveBreakpointsRequestImpl();
void InitDefaultsListActiveBreakpointsRequest();
void InitDefaultsListActiveBreakpointsResponseImpl();
void InitDefaultsListActiveBreakpointsResponse();
void InitDefaultsUpdateActiveBreakpointRequestImpl();
void InitDefaultsUpdateActiveBreakpointRequest();
void InitDefaultsUpdateActiveBreakpointResponseImpl();
void InitDefaultsUpdateActiveBreakpointResponse();
inline void InitDefaults() {
  InitDefaultsRegisterDebuggeeRequest();
  InitDefaultsRegisterDebuggeeResponse();
  InitDefaultsListActiveBreakpointsRequest();
  InitDefaultsListActiveBreakpointsResponse();
  InitDefaultsUpdateActiveBreakpointRequest();
  InitDefaultsUpdateActiveBreakpointResponse();
}
}  // namespace protobuf_google_2fdevtools_2fclouddebugger_2fv2_2fcontroller_2eproto
namespace google {
namespace devtools {
namespace clouddebugger {
namespace v2 {
class ListActiveBreakpointsRequest;
class ListActiveBreakpointsRequestDefaultTypeInternal;
extern ListActiveBreakpointsRequestDefaultTypeInternal _ListActiveBreakpointsRequest_default_instance_;
class ListActiveBreakpointsResponse;
class ListActiveBreakpointsResponseDefaultTypeInternal;
extern ListActiveBreakpointsResponseDefaultTypeInternal _ListActiveBreakpointsResponse_default_instance_;
class RegisterDebuggeeRequest;
class RegisterDebuggeeRequestDefaultTypeInternal;
extern RegisterDebuggeeRequestDefaultTypeInternal _RegisterDebuggeeRequest_default_instance_;
class RegisterDebuggeeResponse;
class RegisterDebuggeeResponseDefaultTypeInternal;
extern RegisterDebuggeeResponseDefaultTypeInternal _RegisterDebuggeeResponse_default_instance_;
class UpdateActiveBreakpointRequest;
class UpdateActiveBreakpointRequestDefaultTypeInternal;
extern UpdateActiveBreakpointRequestDefaultTypeInternal _UpdateActiveBreakpointRequest_default_instance_;
class UpdateActiveBreakpointResponse;
class UpdateActiveBreakpointResponseDefaultTypeInternal;
extern UpdateActiveBreakpointResponseDefaultTypeInternal _UpdateActiveBreakpointResponse_default_instance_;
}  // namespace v2
}  // namespace clouddebugger
}  // namespace devtools
}  // namespace google
namespace google {
namespace devtools {
namespace clouddebugger {
namespace v2 {

// ===================================================================

class RegisterDebuggeeRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.devtools.clouddebugger.v2.RegisterDebuggeeRequest) */ {
 public:
  RegisterDebuggeeRequest();
  virtual ~RegisterDebuggeeRequest();

  RegisterDebuggeeRequest(const RegisterDebuggeeRequest& from);

  inline RegisterDebuggeeRequest& operator=(const RegisterDebuggeeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RegisterDebuggeeRequest(RegisterDebuggeeRequest&& from) noexcept
    : RegisterDebuggeeRequest() {
    *this = ::std::move(from);
  }

  inline RegisterDebuggeeRequest& operator=(RegisterDebuggeeRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RegisterDebuggeeRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RegisterDebuggeeRequest* internal_default_instance() {
    return reinterpret_cast<const RegisterDebuggeeRequest*>(
               &_RegisterDebuggeeRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(RegisterDebuggeeRequest* other);
  friend void swap(RegisterDebuggeeRequest& a, RegisterDebuggeeRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RegisterDebuggeeRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  RegisterDebuggeeRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const RegisterDebuggeeRequest& from);
  void MergeFrom(const RegisterDebuggeeRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(RegisterDebuggeeRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.devtools.clouddebugger.v2.Debuggee debuggee = 1;
  bool has_debuggee() const;
  void clear_debuggee();
  static const int kDebuggeeFieldNumber = 1;
  const ::google::devtools::clouddebugger::v2::Debuggee& debuggee() const;
  ::google::devtools::clouddebugger::v2::Debuggee* release_debuggee();
  ::google::devtools::clouddebugger::v2::Debuggee* mutable_debuggee();
  void set_allocated_debuggee(::google::devtools::clouddebugger::v2::Debuggee* debuggee);

  // @@protoc_insertion_point(class_scope:google.devtools.clouddebugger.v2.RegisterDebuggeeRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::devtools::clouddebugger::v2::Debuggee* debuggee_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fdevtools_2fclouddebugger_2fv2_2fcontroller_2eproto::TableStruct;
  friend void ::protobuf_google_2fdevtools_2fclouddebugger_2fv2_2fcontroller_2eproto::InitDefaultsRegisterDebuggeeRequestImpl();
};
// -------------------------------------------------------------------

class RegisterDebuggeeResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.devtools.clouddebugger.v2.RegisterDebuggeeResponse) */ {
 public:
  RegisterDebuggeeResponse();
  virtual ~RegisterDebuggeeResponse();

  RegisterDebuggeeResponse(const RegisterDebuggeeResponse& from);

  inline RegisterDebuggeeResponse& operator=(const RegisterDebuggeeResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RegisterDebuggeeResponse(RegisterDebuggeeResponse&& from) noexcept
    : RegisterDebuggeeResponse() {
    *this = ::std::move(from);
  }

  inline RegisterDebuggeeResponse& operator=(RegisterDebuggeeResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RegisterDebuggeeResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RegisterDebuggeeResponse* internal_default_instance() {
    return reinterpret_cast<const RegisterDebuggeeResponse*>(
               &_RegisterDebuggeeResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(RegisterDebuggeeResponse* other);
  friend void swap(RegisterDebuggeeResponse& a, RegisterDebuggeeResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RegisterDebuggeeResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  RegisterDebuggeeResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const RegisterDebuggeeResponse& from);
  void MergeFrom(const RegisterDebuggeeResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(RegisterDebuggeeResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.devtools.clouddebugger.v2.Debuggee debuggee = 1;
  bool has_debuggee() const;
  void clear_debuggee();
  static const int kDebuggeeFieldNumber = 1;
  const ::google::devtools::clouddebugger::v2::Debuggee& debuggee() const;
  ::google::devtools::clouddebugger::v2::Debuggee* release_debuggee();
  ::google::devtools::clouddebugger::v2::Debuggee* mutable_debuggee();
  void set_allocated_debuggee(::google::devtools::clouddebugger::v2::Debuggee* debuggee);

  // @@protoc_insertion_point(class_scope:google.devtools.clouddebugger.v2.RegisterDebuggeeResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::devtools::clouddebugger::v2::Debuggee* debuggee_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fdevtools_2fclouddebugger_2fv2_2fcontroller_2eproto::TableStruct;
  friend void ::protobuf_google_2fdevtools_2fclouddebugger_2fv2_2fcontroller_2eproto::InitDefaultsRegisterDebuggeeResponseImpl();
};
// -------------------------------------------------------------------

class ListActiveBreakpointsRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.devtools.clouddebugger.v2.ListActiveBreakpointsRequest) */ {
 public:
  ListActiveBreakpointsRequest();
  virtual ~ListActiveBreakpointsRequest();

  ListActiveBreakpointsRequest(const ListActiveBreakpointsRequest& from);

  inline ListActiveBreakpointsRequest& operator=(const ListActiveBreakpointsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ListActiveBreakpointsRequest(ListActiveBreakpointsRequest&& from) noexcept
    : ListActiveBreakpointsRequest() {
    *this = ::std::move(from);
  }

  inline ListActiveBreakpointsRequest& operator=(ListActiveBreakpointsRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ListActiveBreakpointsRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListActiveBreakpointsRequest* internal_default_instance() {
    return reinterpret_cast<const ListActiveBreakpointsRequest*>(
               &_ListActiveBreakpointsRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(ListActiveBreakpointsRequest* other);
  friend void swap(ListActiveBreakpointsRequest& a, ListActiveBreakpointsRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ListActiveBreakpointsRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  ListActiveBreakpointsRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ListActiveBreakpointsRequest& from);
  void MergeFrom(const ListActiveBreakpointsRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ListActiveBreakpointsRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string debuggee_id = 1;
  void clear_debuggee_id();
  static const int kDebuggeeIdFieldNumber = 1;
  const ::std::string& debuggee_id() const;
  void set_debuggee_id(const ::std::string& value);
  #if LANG_CXX11
  void set_debuggee_id(::std::string&& value);
  #endif
  void set_debuggee_id(const char* value);
  void set_debuggee_id(const char* value, size_t size);
  ::std::string* mutable_debuggee_id();
  ::std::string* release_debuggee_id();
  void set_allocated_debuggee_id(::std::string* debuggee_id);

  // string wait_token = 2;
  void clear_wait_token();
  static const int kWaitTokenFieldNumber = 2;
  const ::std::string& wait_token() const;
  void set_wait_token(const ::std::string& value);
  #if LANG_CXX11
  void set_wait_token(::std::string&& value);
  #endif
  void set_wait_token(const char* value);
  void set_wait_token(const char* value, size_t size);
  ::std::string* mutable_wait_token();
  ::std::string* release_wait_token();
  void set_allocated_wait_token(::std::string* wait_token);

  // bool success_on_timeout = 3;
  void clear_success_on_timeout();
  static const int kSuccessOnTimeoutFieldNumber = 3;
  bool success_on_timeout() const;
  void set_success_on_timeout(bool value);

  // @@protoc_insertion_point(class_scope:google.devtools.clouddebugger.v2.ListActiveBreakpointsRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr debuggee_id_;
  ::google::protobuf::internal::ArenaStringPtr wait_token_;
  bool success_on_timeout_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fdevtools_2fclouddebugger_2fv2_2fcontroller_2eproto::TableStruct;
  friend void ::protobuf_google_2fdevtools_2fclouddebugger_2fv2_2fcontroller_2eproto::InitDefaultsListActiveBreakpointsRequestImpl();
};
// -------------------------------------------------------------------

class ListActiveBreakpointsResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.devtools.clouddebugger.v2.ListActiveBreakpointsResponse) */ {
 public:
  ListActiveBreakpointsResponse();
  virtual ~ListActiveBreakpointsResponse();

  ListActiveBreakpointsResponse(const ListActiveBreakpointsResponse& from);

  inline ListActiveBreakpointsResponse& operator=(const ListActiveBreakpointsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ListActiveBreakpointsResponse(ListActiveBreakpointsResponse&& from) noexcept
    : ListActiveBreakpointsResponse() {
    *this = ::std::move(from);
  }

  inline ListActiveBreakpointsResponse& operator=(ListActiveBreakpointsResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ListActiveBreakpointsResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListActiveBreakpointsResponse* internal_default_instance() {
    return reinterpret_cast<const ListActiveBreakpointsResponse*>(
               &_ListActiveBreakpointsResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(ListActiveBreakpointsResponse* other);
  friend void swap(ListActiveBreakpointsResponse& a, ListActiveBreakpointsResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ListActiveBreakpointsResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  ListActiveBreakpointsResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ListActiveBreakpointsResponse& from);
  void MergeFrom(const ListActiveBreakpointsResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ListActiveBreakpointsResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .google.devtools.clouddebugger.v2.Breakpoint breakpoints = 1;
  int breakpoints_size() const;
  void clear_breakpoints();
  static const int kBreakpointsFieldNumber = 1;
  const ::google::devtools::clouddebugger::v2::Breakpoint& breakpoints(int index) const;
  ::google::devtools::clouddebugger::v2::Breakpoint* mutable_breakpoints(int index);
  ::google::devtools::clouddebugger::v2::Breakpoint* add_breakpoints();
  ::google::protobuf::RepeatedPtrField< ::google::devtools::clouddebugger::v2::Breakpoint >*
      mutable_breakpoints();
  const ::google::protobuf::RepeatedPtrField< ::google::devtools::clouddebugger::v2::Breakpoint >&
      breakpoints() const;

  // string next_wait_token = 2;
  void clear_next_wait_token();
  static const int kNextWaitTokenFieldNumber = 2;
  const ::std::string& next_wait_token() const;
  void set_next_wait_token(const ::std::string& value);
  #if LANG_CXX11
  void set_next_wait_token(::std::string&& value);
  #endif
  void set_next_wait_token(const char* value);
  void set_next_wait_token(const char* value, size_t size);
  ::std::string* mutable_next_wait_token();
  ::std::string* release_next_wait_token();
  void set_allocated_next_wait_token(::std::string* next_wait_token);

  // bool wait_expired = 3;
  void clear_wait_expired();
  static const int kWaitExpiredFieldNumber = 3;
  bool wait_expired() const;
  void set_wait_expired(bool value);

  // @@protoc_insertion_point(class_scope:google.devtools.clouddebugger.v2.ListActiveBreakpointsResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::google::devtools::clouddebugger::v2::Breakpoint > breakpoints_;
  ::google::protobuf::internal::ArenaStringPtr next_wait_token_;
  bool wait_expired_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fdevtools_2fclouddebugger_2fv2_2fcontroller_2eproto::TableStruct;
  friend void ::protobuf_google_2fdevtools_2fclouddebugger_2fv2_2fcontroller_2eproto::InitDefaultsListActiveBreakpointsResponseImpl();
};
// -------------------------------------------------------------------

class UpdateActiveBreakpointRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.devtools.clouddebugger.v2.UpdateActiveBreakpointRequest) */ {
 public:
  UpdateActiveBreakpointRequest();
  virtual ~UpdateActiveBreakpointRequest();

  UpdateActiveBreakpointRequest(const UpdateActiveBreakpointRequest& from);

  inline UpdateActiveBreakpointRequest& operator=(const UpdateActiveBreakpointRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UpdateActiveBreakpointRequest(UpdateActiveBreakpointRequest&& from) noexcept
    : UpdateActiveBreakpointRequest() {
    *this = ::std::move(from);
  }

  inline UpdateActiveBreakpointRequest& operator=(UpdateActiveBreakpointRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const UpdateActiveBreakpointRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UpdateActiveBreakpointRequest* internal_default_instance() {
    return reinterpret_cast<const UpdateActiveBreakpointRequest*>(
               &_UpdateActiveBreakpointRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(UpdateActiveBreakpointRequest* other);
  friend void swap(UpdateActiveBreakpointRequest& a, UpdateActiveBreakpointRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UpdateActiveBreakpointRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  UpdateActiveBreakpointRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const UpdateActiveBreakpointRequest& from);
  void MergeFrom(const UpdateActiveBreakpointRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(UpdateActiveBreakpointRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string debuggee_id = 1;
  void clear_debuggee_id();
  static const int kDebuggeeIdFieldNumber = 1;
  const ::std::string& debuggee_id() const;
  void set_debuggee_id(const ::std::string& value);
  #if LANG_CXX11
  void set_debuggee_id(::std::string&& value);
  #endif
  void set_debuggee_id(const char* value);
  void set_debuggee_id(const char* value, size_t size);
  ::std::string* mutable_debuggee_id();
  ::std::string* release_debuggee_id();
  void set_allocated_debuggee_id(::std::string* debuggee_id);

  // .google.devtools.clouddebugger.v2.Breakpoint breakpoint = 2;
  bool has_breakpoint() const;
  void clear_breakpoint();
  static const int kBreakpointFieldNumber = 2;
  const ::google::devtools::clouddebugger::v2::Breakpoint& breakpoint() const;
  ::google::devtools::clouddebugger::v2::Breakpoint* release_breakpoint();
  ::google::devtools::clouddebugger::v2::Breakpoint* mutable_breakpoint();
  void set_allocated_breakpoint(::google::devtools::clouddebugger::v2::Breakpoint* breakpoint);

  // @@protoc_insertion_point(class_scope:google.devtools.clouddebugger.v2.UpdateActiveBreakpointRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr debuggee_id_;
  ::google::devtools::clouddebugger::v2::Breakpoint* breakpoint_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fdevtools_2fclouddebugger_2fv2_2fcontroller_2eproto::TableStruct;
  friend void ::protobuf_google_2fdevtools_2fclouddebugger_2fv2_2fcontroller_2eproto::InitDefaultsUpdateActiveBreakpointRequestImpl();
};
// -------------------------------------------------------------------

class UpdateActiveBreakpointResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.devtools.clouddebugger.v2.UpdateActiveBreakpointResponse) */ {
 public:
  UpdateActiveBreakpointResponse();
  virtual ~UpdateActiveBreakpointResponse();

  UpdateActiveBreakpointResponse(const UpdateActiveBreakpointResponse& from);

  inline UpdateActiveBreakpointResponse& operator=(const UpdateActiveBreakpointResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UpdateActiveBreakpointResponse(UpdateActiveBreakpointResponse&& from) noexcept
    : UpdateActiveBreakpointResponse() {
    *this = ::std::move(from);
  }

  inline UpdateActiveBreakpointResponse& operator=(UpdateActiveBreakpointResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const UpdateActiveBreakpointResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UpdateActiveBreakpointResponse* internal_default_instance() {
    return reinterpret_cast<const UpdateActiveBreakpointResponse*>(
               &_UpdateActiveBreakpointResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    5;

  void Swap(UpdateActiveBreakpointResponse* other);
  friend void swap(UpdateActiveBreakpointResponse& a, UpdateActiveBreakpointResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UpdateActiveBreakpointResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  UpdateActiveBreakpointResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const UpdateActiveBreakpointResponse& from);
  void MergeFrom(const UpdateActiveBreakpointResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(UpdateActiveBreakpointResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:google.devtools.clouddebugger.v2.UpdateActiveBreakpointResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fdevtools_2fclouddebugger_2fv2_2fcontroller_2eproto::TableStruct;
  friend void ::protobuf_google_2fdevtools_2fclouddebugger_2fv2_2fcontroller_2eproto::InitDefaultsUpdateActiveBreakpointResponseImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// RegisterDebuggeeRequest

// .google.devtools.clouddebugger.v2.Debuggee debuggee = 1;
inline bool RegisterDebuggeeRequest::has_debuggee() const {
  return this != internal_default_instance() && debuggee_ != NULL;
}
inline const ::google::devtools::clouddebugger::v2::Debuggee& RegisterDebuggeeRequest::debuggee() const {
  const ::google::devtools::clouddebugger::v2::Debuggee* p = debuggee_;
  // @@protoc_insertion_point(field_get:google.devtools.clouddebugger.v2.RegisterDebuggeeRequest.debuggee)
  return p != NULL ? *p : *reinterpret_cast<const ::google::devtools::clouddebugger::v2::Debuggee*>(
      &::google::devtools::clouddebugger::v2::_Debuggee_default_instance_);
}
inline ::google::devtools::clouddebugger::v2::Debuggee* RegisterDebuggeeRequest::release_debuggee() {
  // @@protoc_insertion_point(field_release:google.devtools.clouddebugger.v2.RegisterDebuggeeRequest.debuggee)
  
  ::google::devtools::clouddebugger::v2::Debuggee* temp = debuggee_;
  debuggee_ = NULL;
  return temp;
}
inline ::google::devtools::clouddebugger::v2::Debuggee* RegisterDebuggeeRequest::mutable_debuggee() {
  
  if (debuggee_ == NULL) {
    debuggee_ = new ::google::devtools::clouddebugger::v2::Debuggee;
  }
  // @@protoc_insertion_point(field_mutable:google.devtools.clouddebugger.v2.RegisterDebuggeeRequest.debuggee)
  return debuggee_;
}
inline void RegisterDebuggeeRequest::set_allocated_debuggee(::google::devtools::clouddebugger::v2::Debuggee* debuggee) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(debuggee_);
  }
  if (debuggee) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      debuggee = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, debuggee, submessage_arena);
    }
    
  } else {
    
  }
  debuggee_ = debuggee;
  // @@protoc_insertion_point(field_set_allocated:google.devtools.clouddebugger.v2.RegisterDebuggeeRequest.debuggee)
}

// -------------------------------------------------------------------

// RegisterDebuggeeResponse

// .google.devtools.clouddebugger.v2.Debuggee debuggee = 1;
inline bool RegisterDebuggeeResponse::has_debuggee() const {
  return this != internal_default_instance() && debuggee_ != NULL;
}
inline const ::google::devtools::clouddebugger::v2::Debuggee& RegisterDebuggeeResponse::debuggee() const {
  const ::google::devtools::clouddebugger::v2::Debuggee* p = debuggee_;
  // @@protoc_insertion_point(field_get:google.devtools.clouddebugger.v2.RegisterDebuggeeResponse.debuggee)
  return p != NULL ? *p : *reinterpret_cast<const ::google::devtools::clouddebugger::v2::Debuggee*>(
      &::google::devtools::clouddebugger::v2::_Debuggee_default_instance_);
}
inline ::google::devtools::clouddebugger::v2::Debuggee* RegisterDebuggeeResponse::release_debuggee() {
  // @@protoc_insertion_point(field_release:google.devtools.clouddebugger.v2.RegisterDebuggeeResponse.debuggee)
  
  ::google::devtools::clouddebugger::v2::Debuggee* temp = debuggee_;
  debuggee_ = NULL;
  return temp;
}
inline ::google::devtools::clouddebugger::v2::Debuggee* RegisterDebuggeeResponse::mutable_debuggee() {
  
  if (debuggee_ == NULL) {
    debuggee_ = new ::google::devtools::clouddebugger::v2::Debuggee;
  }
  // @@protoc_insertion_point(field_mutable:google.devtools.clouddebugger.v2.RegisterDebuggeeResponse.debuggee)
  return debuggee_;
}
inline void RegisterDebuggeeResponse::set_allocated_debuggee(::google::devtools::clouddebugger::v2::Debuggee* debuggee) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(debuggee_);
  }
  if (debuggee) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      debuggee = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, debuggee, submessage_arena);
    }
    
  } else {
    
  }
  debuggee_ = debuggee;
  // @@protoc_insertion_point(field_set_allocated:google.devtools.clouddebugger.v2.RegisterDebuggeeResponse.debuggee)
}

// -------------------------------------------------------------------

// ListActiveBreakpointsRequest

// string debuggee_id = 1;
inline void ListActiveBreakpointsRequest::clear_debuggee_id() {
  debuggee_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ListActiveBreakpointsRequest::debuggee_id() const {
  // @@protoc_insertion_point(field_get:google.devtools.clouddebugger.v2.ListActiveBreakpointsRequest.debuggee_id)
  return debuggee_id_.GetNoArena();
}
inline void ListActiveBreakpointsRequest::set_debuggee_id(const ::std::string& value) {
  
  debuggee_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.devtools.clouddebugger.v2.ListActiveBreakpointsRequest.debuggee_id)
}
#if LANG_CXX11
inline void ListActiveBreakpointsRequest::set_debuggee_id(::std::string&& value) {
  
  debuggee_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.devtools.clouddebugger.v2.ListActiveBreakpointsRequest.debuggee_id)
}
#endif
inline void ListActiveBreakpointsRequest::set_debuggee_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  debuggee_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.devtools.clouddebugger.v2.ListActiveBreakpointsRequest.debuggee_id)
}
inline void ListActiveBreakpointsRequest::set_debuggee_id(const char* value, size_t size) {
  
  debuggee_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.devtools.clouddebugger.v2.ListActiveBreakpointsRequest.debuggee_id)
}
inline ::std::string* ListActiveBreakpointsRequest::mutable_debuggee_id() {
  
  // @@protoc_insertion_point(field_mutable:google.devtools.clouddebugger.v2.ListActiveBreakpointsRequest.debuggee_id)
  return debuggee_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ListActiveBreakpointsRequest::release_debuggee_id() {
  // @@protoc_insertion_point(field_release:google.devtools.clouddebugger.v2.ListActiveBreakpointsRequest.debuggee_id)
  
  return debuggee_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ListActiveBreakpointsRequest::set_allocated_debuggee_id(::std::string* debuggee_id) {
  if (debuggee_id != NULL) {
    
  } else {
    
  }
  debuggee_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), debuggee_id);
  // @@protoc_insertion_point(field_set_allocated:google.devtools.clouddebugger.v2.ListActiveBreakpointsRequest.debuggee_id)
}

// string wait_token = 2;
inline void ListActiveBreakpointsRequest::clear_wait_token() {
  wait_token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ListActiveBreakpointsRequest::wait_token() const {
  // @@protoc_insertion_point(field_get:google.devtools.clouddebugger.v2.ListActiveBreakpointsRequest.wait_token)
  return wait_token_.GetNoArena();
}
inline void ListActiveBreakpointsRequest::set_wait_token(const ::std::string& value) {
  
  wait_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.devtools.clouddebugger.v2.ListActiveBreakpointsRequest.wait_token)
}
#if LANG_CXX11
inline void ListActiveBreakpointsRequest::set_wait_token(::std::string&& value) {
  
  wait_token_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.devtools.clouddebugger.v2.ListActiveBreakpointsRequest.wait_token)
}
#endif
inline void ListActiveBreakpointsRequest::set_wait_token(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  wait_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.devtools.clouddebugger.v2.ListActiveBreakpointsRequest.wait_token)
}
inline void ListActiveBreakpointsRequest::set_wait_token(const char* value, size_t size) {
  
  wait_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.devtools.clouddebugger.v2.ListActiveBreakpointsRequest.wait_token)
}
inline ::std::string* ListActiveBreakpointsRequest::mutable_wait_token() {
  
  // @@protoc_insertion_point(field_mutable:google.devtools.clouddebugger.v2.ListActiveBreakpointsRequest.wait_token)
  return wait_token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ListActiveBreakpointsRequest::release_wait_token() {
  // @@protoc_insertion_point(field_release:google.devtools.clouddebugger.v2.ListActiveBreakpointsRequest.wait_token)
  
  return wait_token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ListActiveBreakpointsRequest::set_allocated_wait_token(::std::string* wait_token) {
  if (wait_token != NULL) {
    
  } else {
    
  }
  wait_token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), wait_token);
  // @@protoc_insertion_point(field_set_allocated:google.devtools.clouddebugger.v2.ListActiveBreakpointsRequest.wait_token)
}

// bool success_on_timeout = 3;
inline void ListActiveBreakpointsRequest::clear_success_on_timeout() {
  success_on_timeout_ = false;
}
inline bool ListActiveBreakpointsRequest::success_on_timeout() const {
  // @@protoc_insertion_point(field_get:google.devtools.clouddebugger.v2.ListActiveBreakpointsRequest.success_on_timeout)
  return success_on_timeout_;
}
inline void ListActiveBreakpointsRequest::set_success_on_timeout(bool value) {
  
  success_on_timeout_ = value;
  // @@protoc_insertion_point(field_set:google.devtools.clouddebugger.v2.ListActiveBreakpointsRequest.success_on_timeout)
}

// -------------------------------------------------------------------

// ListActiveBreakpointsResponse

// repeated .google.devtools.clouddebugger.v2.Breakpoint breakpoints = 1;
inline int ListActiveBreakpointsResponse::breakpoints_size() const {
  return breakpoints_.size();
}
inline const ::google::devtools::clouddebugger::v2::Breakpoint& ListActiveBreakpointsResponse::breakpoints(int index) const {
  // @@protoc_insertion_point(field_get:google.devtools.clouddebugger.v2.ListActiveBreakpointsResponse.breakpoints)
  return breakpoints_.Get(index);
}
inline ::google::devtools::clouddebugger::v2::Breakpoint* ListActiveBreakpointsResponse::mutable_breakpoints(int index) {
  // @@protoc_insertion_point(field_mutable:google.devtools.clouddebugger.v2.ListActiveBreakpointsResponse.breakpoints)
  return breakpoints_.Mutable(index);
}
inline ::google::devtools::clouddebugger::v2::Breakpoint* ListActiveBreakpointsResponse::add_breakpoints() {
  // @@protoc_insertion_point(field_add:google.devtools.clouddebugger.v2.ListActiveBreakpointsResponse.breakpoints)
  return breakpoints_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::google::devtools::clouddebugger::v2::Breakpoint >*
ListActiveBreakpointsResponse::mutable_breakpoints() {
  // @@protoc_insertion_point(field_mutable_list:google.devtools.clouddebugger.v2.ListActiveBreakpointsResponse.breakpoints)
  return &breakpoints_;
}
inline const ::google::protobuf::RepeatedPtrField< ::google::devtools::clouddebugger::v2::Breakpoint >&
ListActiveBreakpointsResponse::breakpoints() const {
  // @@protoc_insertion_point(field_list:google.devtools.clouddebugger.v2.ListActiveBreakpointsResponse.breakpoints)
  return breakpoints_;
}

// string next_wait_token = 2;
inline void ListActiveBreakpointsResponse::clear_next_wait_token() {
  next_wait_token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ListActiveBreakpointsResponse::next_wait_token() const {
  // @@protoc_insertion_point(field_get:google.devtools.clouddebugger.v2.ListActiveBreakpointsResponse.next_wait_token)
  return next_wait_token_.GetNoArena();
}
inline void ListActiveBreakpointsResponse::set_next_wait_token(const ::std::string& value) {
  
  next_wait_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.devtools.clouddebugger.v2.ListActiveBreakpointsResponse.next_wait_token)
}
#if LANG_CXX11
inline void ListActiveBreakpointsResponse::set_next_wait_token(::std::string&& value) {
  
  next_wait_token_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.devtools.clouddebugger.v2.ListActiveBreakpointsResponse.next_wait_token)
}
#endif
inline void ListActiveBreakpointsResponse::set_next_wait_token(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  next_wait_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.devtools.clouddebugger.v2.ListActiveBreakpointsResponse.next_wait_token)
}
inline void ListActiveBreakpointsResponse::set_next_wait_token(const char* value, size_t size) {
  
  next_wait_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.devtools.clouddebugger.v2.ListActiveBreakpointsResponse.next_wait_token)
}
inline ::std::string* ListActiveBreakpointsResponse::mutable_next_wait_token() {
  
  // @@protoc_insertion_point(field_mutable:google.devtools.clouddebugger.v2.ListActiveBreakpointsResponse.next_wait_token)
  return next_wait_token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ListActiveBreakpointsResponse::release_next_wait_token() {
  // @@protoc_insertion_point(field_release:google.devtools.clouddebugger.v2.ListActiveBreakpointsResponse.next_wait_token)
  
  return next_wait_token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ListActiveBreakpointsResponse::set_allocated_next_wait_token(::std::string* next_wait_token) {
  if (next_wait_token != NULL) {
    
  } else {
    
  }
  next_wait_token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), next_wait_token);
  // @@protoc_insertion_point(field_set_allocated:google.devtools.clouddebugger.v2.ListActiveBreakpointsResponse.next_wait_token)
}

// bool wait_expired = 3;
inline void ListActiveBreakpointsResponse::clear_wait_expired() {
  wait_expired_ = false;
}
inline bool ListActiveBreakpointsResponse::wait_expired() const {
  // @@protoc_insertion_point(field_get:google.devtools.clouddebugger.v2.ListActiveBreakpointsResponse.wait_expired)
  return wait_expired_;
}
inline void ListActiveBreakpointsResponse::set_wait_expired(bool value) {
  
  wait_expired_ = value;
  // @@protoc_insertion_point(field_set:google.devtools.clouddebugger.v2.ListActiveBreakpointsResponse.wait_expired)
}

// -------------------------------------------------------------------

// UpdateActiveBreakpointRequest

// string debuggee_id = 1;
inline void UpdateActiveBreakpointRequest::clear_debuggee_id() {
  debuggee_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UpdateActiveBreakpointRequest::debuggee_id() const {
  // @@protoc_insertion_point(field_get:google.devtools.clouddebugger.v2.UpdateActiveBreakpointRequest.debuggee_id)
  return debuggee_id_.GetNoArena();
}
inline void UpdateActiveBreakpointRequest::set_debuggee_id(const ::std::string& value) {
  
  debuggee_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.devtools.clouddebugger.v2.UpdateActiveBreakpointRequest.debuggee_id)
}
#if LANG_CXX11
inline void UpdateActiveBreakpointRequest::set_debuggee_id(::std::string&& value) {
  
  debuggee_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.devtools.clouddebugger.v2.UpdateActiveBreakpointRequest.debuggee_id)
}
#endif
inline void UpdateActiveBreakpointRequest::set_debuggee_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  debuggee_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.devtools.clouddebugger.v2.UpdateActiveBreakpointRequest.debuggee_id)
}
inline void UpdateActiveBreakpointRequest::set_debuggee_id(const char* value, size_t size) {
  
  debuggee_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.devtools.clouddebugger.v2.UpdateActiveBreakpointRequest.debuggee_id)
}
inline ::std::string* UpdateActiveBreakpointRequest::mutable_debuggee_id() {
  
  // @@protoc_insertion_point(field_mutable:google.devtools.clouddebugger.v2.UpdateActiveBreakpointRequest.debuggee_id)
  return debuggee_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UpdateActiveBreakpointRequest::release_debuggee_id() {
  // @@protoc_insertion_point(field_release:google.devtools.clouddebugger.v2.UpdateActiveBreakpointRequest.debuggee_id)
  
  return debuggee_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UpdateActiveBreakpointRequest::set_allocated_debuggee_id(::std::string* debuggee_id) {
  if (debuggee_id != NULL) {
    
  } else {
    
  }
  debuggee_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), debuggee_id);
  // @@protoc_insertion_point(field_set_allocated:google.devtools.clouddebugger.v2.UpdateActiveBreakpointRequest.debuggee_id)
}

// .google.devtools.clouddebugger.v2.Breakpoint breakpoint = 2;
inline bool UpdateActiveBreakpointRequest::has_breakpoint() const {
  return this != internal_default_instance() && breakpoint_ != NULL;
}
inline const ::google::devtools::clouddebugger::v2::Breakpoint& UpdateActiveBreakpointRequest::breakpoint() const {
  const ::google::devtools::clouddebugger::v2::Breakpoint* p = breakpoint_;
  // @@protoc_insertion_point(field_get:google.devtools.clouddebugger.v2.UpdateActiveBreakpointRequest.breakpoint)
  return p != NULL ? *p : *reinterpret_cast<const ::google::devtools::clouddebugger::v2::Breakpoint*>(
      &::google::devtools::clouddebugger::v2::_Breakpoint_default_instance_);
}
inline ::google::devtools::clouddebugger::v2::Breakpoint* UpdateActiveBreakpointRequest::release_breakpoint() {
  // @@protoc_insertion_point(field_release:google.devtools.clouddebugger.v2.UpdateActiveBreakpointRequest.breakpoint)
  
  ::google::devtools::clouddebugger::v2::Breakpoint* temp = breakpoint_;
  breakpoint_ = NULL;
  return temp;
}
inline ::google::devtools::clouddebugger::v2::Breakpoint* UpdateActiveBreakpointRequest::mutable_breakpoint() {
  
  if (breakpoint_ == NULL) {
    breakpoint_ = new ::google::devtools::clouddebugger::v2::Breakpoint;
  }
  // @@protoc_insertion_point(field_mutable:google.devtools.clouddebugger.v2.UpdateActiveBreakpointRequest.breakpoint)
  return breakpoint_;
}
inline void UpdateActiveBreakpointRequest::set_allocated_breakpoint(::google::devtools::clouddebugger::v2::Breakpoint* breakpoint) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(breakpoint_);
  }
  if (breakpoint) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      breakpoint = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, breakpoint, submessage_arena);
    }
    
  } else {
    
  }
  breakpoint_ = breakpoint;
  // @@protoc_insertion_point(field_set_allocated:google.devtools.clouddebugger.v2.UpdateActiveBreakpointRequest.breakpoint)
}

// -------------------------------------------------------------------

// UpdateActiveBreakpointResponse

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v2
}  // namespace clouddebugger
}  // namespace devtools
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_google_2fdevtools_2fclouddebugger_2fv2_2fcontroller_2eproto__INCLUDED
