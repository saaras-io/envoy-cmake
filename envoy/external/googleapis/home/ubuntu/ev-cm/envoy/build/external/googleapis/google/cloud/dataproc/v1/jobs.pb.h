// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/cloud/dataproc/v1/jobs.proto

#ifndef PROTOBUF_google_2fcloud_2fdataproc_2fv1_2fjobs_2eproto__INCLUDED
#define PROTOBUF_google_2fcloud_2fdataproc_2fv1_2fjobs_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "google/api/annotations.pb.h"
#include <google/protobuf/empty.pb.h>
#include <google/protobuf/timestamp.pb.h>
// @@protoc_insertion_point(includes)

namespace protobuf_google_2fcloud_2fdataproc_2fv1_2fjobs_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[28];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsLoggingConfig_DriverLogLevelsEntry_DoNotUseImpl();
void InitDefaultsLoggingConfig_DriverLogLevelsEntry_DoNotUse();
void InitDefaultsLoggingConfigImpl();
void InitDefaultsLoggingConfig();
void InitDefaultsHadoopJob_PropertiesEntry_DoNotUseImpl();
void InitDefaultsHadoopJob_PropertiesEntry_DoNotUse();
void InitDefaultsHadoopJobImpl();
void InitDefaultsHadoopJob();
void InitDefaultsSparkJob_PropertiesEntry_DoNotUseImpl();
void InitDefaultsSparkJob_PropertiesEntry_DoNotUse();
void InitDefaultsSparkJobImpl();
void InitDefaultsSparkJob();
void InitDefaultsPySparkJob_PropertiesEntry_DoNotUseImpl();
void InitDefaultsPySparkJob_PropertiesEntry_DoNotUse();
void InitDefaultsPySparkJobImpl();
void InitDefaultsPySparkJob();
void InitDefaultsQueryListImpl();
void InitDefaultsQueryList();
void InitDefaultsHiveJob_ScriptVariablesEntry_DoNotUseImpl();
void InitDefaultsHiveJob_ScriptVariablesEntry_DoNotUse();
void InitDefaultsHiveJob_PropertiesEntry_DoNotUseImpl();
void InitDefaultsHiveJob_PropertiesEntry_DoNotUse();
void InitDefaultsHiveJobImpl();
void InitDefaultsHiveJob();
void InitDefaultsSparkSqlJob_ScriptVariablesEntry_DoNotUseImpl();
void InitDefaultsSparkSqlJob_ScriptVariablesEntry_DoNotUse();
void InitDefaultsSparkSqlJob_PropertiesEntry_DoNotUseImpl();
void InitDefaultsSparkSqlJob_PropertiesEntry_DoNotUse();
void InitDefaultsSparkSqlJobImpl();
void InitDefaultsSparkSqlJob();
void InitDefaultsPigJob_ScriptVariablesEntry_DoNotUseImpl();
void InitDefaultsPigJob_ScriptVariablesEntry_DoNotUse();
void InitDefaultsPigJob_PropertiesEntry_DoNotUseImpl();
void InitDefaultsPigJob_PropertiesEntry_DoNotUse();
void InitDefaultsPigJobImpl();
void InitDefaultsPigJob();
void InitDefaultsJobPlacementImpl();
void InitDefaultsJobPlacement();
void InitDefaultsJobStatusImpl();
void InitDefaultsJobStatus();
void InitDefaultsJobReferenceImpl();
void InitDefaultsJobReference();
void InitDefaultsJobImpl();
void InitDefaultsJob();
void InitDefaultsSubmitJobRequestImpl();
void InitDefaultsSubmitJobRequest();
void InitDefaultsGetJobRequestImpl();
void InitDefaultsGetJobRequest();
void InitDefaultsListJobsRequestImpl();
void InitDefaultsListJobsRequest();
void InitDefaultsListJobsResponseImpl();
void InitDefaultsListJobsResponse();
void InitDefaultsCancelJobRequestImpl();
void InitDefaultsCancelJobRequest();
void InitDefaultsDeleteJobRequestImpl();
void InitDefaultsDeleteJobRequest();
inline void InitDefaults() {
  InitDefaultsLoggingConfig_DriverLogLevelsEntry_DoNotUse();
  InitDefaultsLoggingConfig();
  InitDefaultsHadoopJob_PropertiesEntry_DoNotUse();
  InitDefaultsHadoopJob();
  InitDefaultsSparkJob_PropertiesEntry_DoNotUse();
  InitDefaultsSparkJob();
  InitDefaultsPySparkJob_PropertiesEntry_DoNotUse();
  InitDefaultsPySparkJob();
  InitDefaultsQueryList();
  InitDefaultsHiveJob_ScriptVariablesEntry_DoNotUse();
  InitDefaultsHiveJob_PropertiesEntry_DoNotUse();
  InitDefaultsHiveJob();
  InitDefaultsSparkSqlJob_ScriptVariablesEntry_DoNotUse();
  InitDefaultsSparkSqlJob_PropertiesEntry_DoNotUse();
  InitDefaultsSparkSqlJob();
  InitDefaultsPigJob_ScriptVariablesEntry_DoNotUse();
  InitDefaultsPigJob_PropertiesEntry_DoNotUse();
  InitDefaultsPigJob();
  InitDefaultsJobPlacement();
  InitDefaultsJobStatus();
  InitDefaultsJobReference();
  InitDefaultsJob();
  InitDefaultsSubmitJobRequest();
  InitDefaultsGetJobRequest();
  InitDefaultsListJobsRequest();
  InitDefaultsListJobsResponse();
  InitDefaultsCancelJobRequest();
  InitDefaultsDeleteJobRequest();
}
}  // namespace protobuf_google_2fcloud_2fdataproc_2fv1_2fjobs_2eproto
namespace google {
namespace cloud {
namespace dataproc {
namespace v1 {
class CancelJobRequest;
class CancelJobRequestDefaultTypeInternal;
extern CancelJobRequestDefaultTypeInternal _CancelJobRequest_default_instance_;
class DeleteJobRequest;
class DeleteJobRequestDefaultTypeInternal;
extern DeleteJobRequestDefaultTypeInternal _DeleteJobRequest_default_instance_;
class GetJobRequest;
class GetJobRequestDefaultTypeInternal;
extern GetJobRequestDefaultTypeInternal _GetJobRequest_default_instance_;
class HadoopJob;
class HadoopJobDefaultTypeInternal;
extern HadoopJobDefaultTypeInternal _HadoopJob_default_instance_;
class HadoopJob_PropertiesEntry_DoNotUse;
class HadoopJob_PropertiesEntry_DoNotUseDefaultTypeInternal;
extern HadoopJob_PropertiesEntry_DoNotUseDefaultTypeInternal _HadoopJob_PropertiesEntry_DoNotUse_default_instance_;
class HiveJob;
class HiveJobDefaultTypeInternal;
extern HiveJobDefaultTypeInternal _HiveJob_default_instance_;
class HiveJob_PropertiesEntry_DoNotUse;
class HiveJob_PropertiesEntry_DoNotUseDefaultTypeInternal;
extern HiveJob_PropertiesEntry_DoNotUseDefaultTypeInternal _HiveJob_PropertiesEntry_DoNotUse_default_instance_;
class HiveJob_ScriptVariablesEntry_DoNotUse;
class HiveJob_ScriptVariablesEntry_DoNotUseDefaultTypeInternal;
extern HiveJob_ScriptVariablesEntry_DoNotUseDefaultTypeInternal _HiveJob_ScriptVariablesEntry_DoNotUse_default_instance_;
class Job;
class JobDefaultTypeInternal;
extern JobDefaultTypeInternal _Job_default_instance_;
class JobPlacement;
class JobPlacementDefaultTypeInternal;
extern JobPlacementDefaultTypeInternal _JobPlacement_default_instance_;
class JobReference;
class JobReferenceDefaultTypeInternal;
extern JobReferenceDefaultTypeInternal _JobReference_default_instance_;
class JobStatus;
class JobStatusDefaultTypeInternal;
extern JobStatusDefaultTypeInternal _JobStatus_default_instance_;
class ListJobsRequest;
class ListJobsRequestDefaultTypeInternal;
extern ListJobsRequestDefaultTypeInternal _ListJobsRequest_default_instance_;
class ListJobsResponse;
class ListJobsResponseDefaultTypeInternal;
extern ListJobsResponseDefaultTypeInternal _ListJobsResponse_default_instance_;
class LoggingConfig;
class LoggingConfigDefaultTypeInternal;
extern LoggingConfigDefaultTypeInternal _LoggingConfig_default_instance_;
class LoggingConfig_DriverLogLevelsEntry_DoNotUse;
class LoggingConfig_DriverLogLevelsEntry_DoNotUseDefaultTypeInternal;
extern LoggingConfig_DriverLogLevelsEntry_DoNotUseDefaultTypeInternal _LoggingConfig_DriverLogLevelsEntry_DoNotUse_default_instance_;
class PigJob;
class PigJobDefaultTypeInternal;
extern PigJobDefaultTypeInternal _PigJob_default_instance_;
class PigJob_PropertiesEntry_DoNotUse;
class PigJob_PropertiesEntry_DoNotUseDefaultTypeInternal;
extern PigJob_PropertiesEntry_DoNotUseDefaultTypeInternal _PigJob_PropertiesEntry_DoNotUse_default_instance_;
class PigJob_ScriptVariablesEntry_DoNotUse;
class PigJob_ScriptVariablesEntry_DoNotUseDefaultTypeInternal;
extern PigJob_ScriptVariablesEntry_DoNotUseDefaultTypeInternal _PigJob_ScriptVariablesEntry_DoNotUse_default_instance_;
class PySparkJob;
class PySparkJobDefaultTypeInternal;
extern PySparkJobDefaultTypeInternal _PySparkJob_default_instance_;
class PySparkJob_PropertiesEntry_DoNotUse;
class PySparkJob_PropertiesEntry_DoNotUseDefaultTypeInternal;
extern PySparkJob_PropertiesEntry_DoNotUseDefaultTypeInternal _PySparkJob_PropertiesEntry_DoNotUse_default_instance_;
class QueryList;
class QueryListDefaultTypeInternal;
extern QueryListDefaultTypeInternal _QueryList_default_instance_;
class SparkJob;
class SparkJobDefaultTypeInternal;
extern SparkJobDefaultTypeInternal _SparkJob_default_instance_;
class SparkJob_PropertiesEntry_DoNotUse;
class SparkJob_PropertiesEntry_DoNotUseDefaultTypeInternal;
extern SparkJob_PropertiesEntry_DoNotUseDefaultTypeInternal _SparkJob_PropertiesEntry_DoNotUse_default_instance_;
class SparkSqlJob;
class SparkSqlJobDefaultTypeInternal;
extern SparkSqlJobDefaultTypeInternal _SparkSqlJob_default_instance_;
class SparkSqlJob_PropertiesEntry_DoNotUse;
class SparkSqlJob_PropertiesEntry_DoNotUseDefaultTypeInternal;
extern SparkSqlJob_PropertiesEntry_DoNotUseDefaultTypeInternal _SparkSqlJob_PropertiesEntry_DoNotUse_default_instance_;
class SparkSqlJob_ScriptVariablesEntry_DoNotUse;
class SparkSqlJob_ScriptVariablesEntry_DoNotUseDefaultTypeInternal;
extern SparkSqlJob_ScriptVariablesEntry_DoNotUseDefaultTypeInternal _SparkSqlJob_ScriptVariablesEntry_DoNotUse_default_instance_;
class SubmitJobRequest;
class SubmitJobRequestDefaultTypeInternal;
extern SubmitJobRequestDefaultTypeInternal _SubmitJobRequest_default_instance_;
}  // namespace v1
}  // namespace dataproc
}  // namespace cloud
}  // namespace google
namespace google {
namespace cloud {
namespace dataproc {
namespace v1 {

enum LoggingConfig_Level {
  LoggingConfig_Level_LEVEL_UNSPECIFIED = 0,
  LoggingConfig_Level_ALL = 1,
  LoggingConfig_Level_TRACE = 2,
  LoggingConfig_Level_DEBUG = 3,
  LoggingConfig_Level_INFO = 4,
  LoggingConfig_Level_WARN = 5,
  LoggingConfig_Level_ERROR = 6,
  LoggingConfig_Level_FATAL = 7,
  LoggingConfig_Level_OFF = 8,
  LoggingConfig_Level_LoggingConfig_Level_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  LoggingConfig_Level_LoggingConfig_Level_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool LoggingConfig_Level_IsValid(int value);
const LoggingConfig_Level LoggingConfig_Level_Level_MIN = LoggingConfig_Level_LEVEL_UNSPECIFIED;
const LoggingConfig_Level LoggingConfig_Level_Level_MAX = LoggingConfig_Level_OFF;
const int LoggingConfig_Level_Level_ARRAYSIZE = LoggingConfig_Level_Level_MAX + 1;

const ::google::protobuf::EnumDescriptor* LoggingConfig_Level_descriptor();
inline const ::std::string& LoggingConfig_Level_Name(LoggingConfig_Level value) {
  return ::google::protobuf::internal::NameOfEnum(
    LoggingConfig_Level_descriptor(), value);
}
inline bool LoggingConfig_Level_Parse(
    const ::std::string& name, LoggingConfig_Level* value) {
  return ::google::protobuf::internal::ParseNamedEnum<LoggingConfig_Level>(
    LoggingConfig_Level_descriptor(), name, value);
}
enum JobStatus_State {
  JobStatus_State_STATE_UNSPECIFIED = 0,
  JobStatus_State_PENDING = 1,
  JobStatus_State_SETUP_DONE = 8,
  JobStatus_State_RUNNING = 2,
  JobStatus_State_CANCEL_PENDING = 3,
  JobStatus_State_CANCEL_STARTED = 7,
  JobStatus_State_CANCELLED = 4,
  JobStatus_State_DONE = 5,
  JobStatus_State_ERROR = 6,
  JobStatus_State_JobStatus_State_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  JobStatus_State_JobStatus_State_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool JobStatus_State_IsValid(int value);
const JobStatus_State JobStatus_State_State_MIN = JobStatus_State_STATE_UNSPECIFIED;
const JobStatus_State JobStatus_State_State_MAX = JobStatus_State_SETUP_DONE;
const int JobStatus_State_State_ARRAYSIZE = JobStatus_State_State_MAX + 1;

const ::google::protobuf::EnumDescriptor* JobStatus_State_descriptor();
inline const ::std::string& JobStatus_State_Name(JobStatus_State value) {
  return ::google::protobuf::internal::NameOfEnum(
    JobStatus_State_descriptor(), value);
}
inline bool JobStatus_State_Parse(
    const ::std::string& name, JobStatus_State* value) {
  return ::google::protobuf::internal::ParseNamedEnum<JobStatus_State>(
    JobStatus_State_descriptor(), name, value);
}
enum ListJobsRequest_JobStateMatcher {
  ListJobsRequest_JobStateMatcher_ALL = 0,
  ListJobsRequest_JobStateMatcher_ACTIVE = 1,
  ListJobsRequest_JobStateMatcher_NON_ACTIVE = 2,
  ListJobsRequest_JobStateMatcher_ListJobsRequest_JobStateMatcher_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  ListJobsRequest_JobStateMatcher_ListJobsRequest_JobStateMatcher_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool ListJobsRequest_JobStateMatcher_IsValid(int value);
const ListJobsRequest_JobStateMatcher ListJobsRequest_JobStateMatcher_JobStateMatcher_MIN = ListJobsRequest_JobStateMatcher_ALL;
const ListJobsRequest_JobStateMatcher ListJobsRequest_JobStateMatcher_JobStateMatcher_MAX = ListJobsRequest_JobStateMatcher_NON_ACTIVE;
const int ListJobsRequest_JobStateMatcher_JobStateMatcher_ARRAYSIZE = ListJobsRequest_JobStateMatcher_JobStateMatcher_MAX + 1;

const ::google::protobuf::EnumDescriptor* ListJobsRequest_JobStateMatcher_descriptor();
inline const ::std::string& ListJobsRequest_JobStateMatcher_Name(ListJobsRequest_JobStateMatcher value) {
  return ::google::protobuf::internal::NameOfEnum(
    ListJobsRequest_JobStateMatcher_descriptor(), value);
}
inline bool ListJobsRequest_JobStateMatcher_Parse(
    const ::std::string& name, ListJobsRequest_JobStateMatcher* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ListJobsRequest_JobStateMatcher>(
    ListJobsRequest_JobStateMatcher_descriptor(), name, value);
}
// ===================================================================

class LoggingConfig_DriverLogLevelsEntry_DoNotUse : public ::google::protobuf::internal::MapEntry<LoggingConfig_DriverLogLevelsEntry_DoNotUse, 
    ::std::string, ::google::cloud::dataproc::v1::LoggingConfig_Level,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_ENUM,
    0 > {
public:
  typedef ::google::protobuf::internal::MapEntry<LoggingConfig_DriverLogLevelsEntry_DoNotUse, 
    ::std::string, ::google::cloud::dataproc::v1::LoggingConfig_Level,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_ENUM,
    0 > SuperType;
  LoggingConfig_DriverLogLevelsEntry_DoNotUse();
  LoggingConfig_DriverLogLevelsEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const LoggingConfig_DriverLogLevelsEntry_DoNotUse& other);
  static const LoggingConfig_DriverLogLevelsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const LoggingConfig_DriverLogLevelsEntry_DoNotUse*>(&_LoggingConfig_DriverLogLevelsEntry_DoNotUse_default_instance_); }
  void MergeFrom(const ::google::protobuf::Message& other) PROTOBUF_FINAL;
  ::google::protobuf::Metadata GetMetadata() const;
};

// -------------------------------------------------------------------

class LoggingConfig : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.cloud.dataproc.v1.LoggingConfig) */ {
 public:
  LoggingConfig();
  virtual ~LoggingConfig();

  LoggingConfig(const LoggingConfig& from);

  inline LoggingConfig& operator=(const LoggingConfig& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LoggingConfig(LoggingConfig&& from) noexcept
    : LoggingConfig() {
    *this = ::std::move(from);
  }

  inline LoggingConfig& operator=(LoggingConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const LoggingConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LoggingConfig* internal_default_instance() {
    return reinterpret_cast<const LoggingConfig*>(
               &_LoggingConfig_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(LoggingConfig* other);
  friend void swap(LoggingConfig& a, LoggingConfig& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LoggingConfig* New() const PROTOBUF_FINAL { return New(NULL); }

  LoggingConfig* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const LoggingConfig& from);
  void MergeFrom(const LoggingConfig& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(LoggingConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------


  typedef LoggingConfig_Level Level;
  static const Level LEVEL_UNSPECIFIED =
    LoggingConfig_Level_LEVEL_UNSPECIFIED;
  static const Level ALL =
    LoggingConfig_Level_ALL;
  static const Level TRACE =
    LoggingConfig_Level_TRACE;
  static const Level DEBUG =
    LoggingConfig_Level_DEBUG;
  static const Level INFO =
    LoggingConfig_Level_INFO;
  static const Level WARN =
    LoggingConfig_Level_WARN;
  static const Level ERROR =
    LoggingConfig_Level_ERROR;
  static const Level FATAL =
    LoggingConfig_Level_FATAL;
  static const Level OFF =
    LoggingConfig_Level_OFF;
  static inline bool Level_IsValid(int value) {
    return LoggingConfig_Level_IsValid(value);
  }
  static const Level Level_MIN =
    LoggingConfig_Level_Level_MIN;
  static const Level Level_MAX =
    LoggingConfig_Level_Level_MAX;
  static const int Level_ARRAYSIZE =
    LoggingConfig_Level_Level_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Level_descriptor() {
    return LoggingConfig_Level_descriptor();
  }
  static inline const ::std::string& Level_Name(Level value) {
    return LoggingConfig_Level_Name(value);
  }
  static inline bool Level_Parse(const ::std::string& name,
      Level* value) {
    return LoggingConfig_Level_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // map<string, .google.cloud.dataproc.v1.LoggingConfig.Level> driver_log_levels = 2;
  int driver_log_levels_size() const;
  void clear_driver_log_levels();
  static const int kDriverLogLevelsFieldNumber = 2;
  const ::google::protobuf::Map< ::std::string, ::google::cloud::dataproc::v1::LoggingConfig_Level >&
      driver_log_levels() const;
  ::google::protobuf::Map< ::std::string, ::google::cloud::dataproc::v1::LoggingConfig_Level >*
      mutable_driver_log_levels();

  // @@protoc_insertion_point(class_scope:google.cloud.dataproc.v1.LoggingConfig)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::MapField<
      LoggingConfig_DriverLogLevelsEntry_DoNotUse,
      ::std::string, ::google::cloud::dataproc::v1::LoggingConfig_Level,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_ENUM,
      0 > driver_log_levels_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fcloud_2fdataproc_2fv1_2fjobs_2eproto::TableStruct;
  friend void ::protobuf_google_2fcloud_2fdataproc_2fv1_2fjobs_2eproto::InitDefaultsLoggingConfigImpl();
};
// -------------------------------------------------------------------

class HadoopJob_PropertiesEntry_DoNotUse : public ::google::protobuf::internal::MapEntry<HadoopJob_PropertiesEntry_DoNotUse, 
    ::std::string, ::std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    0 > {
public:
  typedef ::google::protobuf::internal::MapEntry<HadoopJob_PropertiesEntry_DoNotUse, 
    ::std::string, ::std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    0 > SuperType;
  HadoopJob_PropertiesEntry_DoNotUse();
  HadoopJob_PropertiesEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const HadoopJob_PropertiesEntry_DoNotUse& other);
  static const HadoopJob_PropertiesEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const HadoopJob_PropertiesEntry_DoNotUse*>(&_HadoopJob_PropertiesEntry_DoNotUse_default_instance_); }
  void MergeFrom(const ::google::protobuf::Message& other) PROTOBUF_FINAL;
  ::google::protobuf::Metadata GetMetadata() const;
};

// -------------------------------------------------------------------

class HadoopJob : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.cloud.dataproc.v1.HadoopJob) */ {
 public:
  HadoopJob();
  virtual ~HadoopJob();

  HadoopJob(const HadoopJob& from);

  inline HadoopJob& operator=(const HadoopJob& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  HadoopJob(HadoopJob&& from) noexcept
    : HadoopJob() {
    *this = ::std::move(from);
  }

  inline HadoopJob& operator=(HadoopJob&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const HadoopJob& default_instance();

  enum DriverCase {
    kMainJarFileUri = 1,
    kMainClass = 2,
    DRIVER_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const HadoopJob* internal_default_instance() {
    return reinterpret_cast<const HadoopJob*>(
               &_HadoopJob_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(HadoopJob* other);
  friend void swap(HadoopJob& a, HadoopJob& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline HadoopJob* New() const PROTOBUF_FINAL { return New(NULL); }

  HadoopJob* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const HadoopJob& from);
  void MergeFrom(const HadoopJob& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(HadoopJob* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // repeated string args = 3;
  int args_size() const;
  void clear_args();
  static const int kArgsFieldNumber = 3;
  const ::std::string& args(int index) const;
  ::std::string* mutable_args(int index);
  void set_args(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_args(int index, ::std::string&& value);
  #endif
  void set_args(int index, const char* value);
  void set_args(int index, const char* value, size_t size);
  ::std::string* add_args();
  void add_args(const ::std::string& value);
  #if LANG_CXX11
  void add_args(::std::string&& value);
  #endif
  void add_args(const char* value);
  void add_args(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& args() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_args();

  // repeated string jar_file_uris = 4;
  int jar_file_uris_size() const;
  void clear_jar_file_uris();
  static const int kJarFileUrisFieldNumber = 4;
  const ::std::string& jar_file_uris(int index) const;
  ::std::string* mutable_jar_file_uris(int index);
  void set_jar_file_uris(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_jar_file_uris(int index, ::std::string&& value);
  #endif
  void set_jar_file_uris(int index, const char* value);
  void set_jar_file_uris(int index, const char* value, size_t size);
  ::std::string* add_jar_file_uris();
  void add_jar_file_uris(const ::std::string& value);
  #if LANG_CXX11
  void add_jar_file_uris(::std::string&& value);
  #endif
  void add_jar_file_uris(const char* value);
  void add_jar_file_uris(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& jar_file_uris() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_jar_file_uris();

  // repeated string file_uris = 5;
  int file_uris_size() const;
  void clear_file_uris();
  static const int kFileUrisFieldNumber = 5;
  const ::std::string& file_uris(int index) const;
  ::std::string* mutable_file_uris(int index);
  void set_file_uris(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_file_uris(int index, ::std::string&& value);
  #endif
  void set_file_uris(int index, const char* value);
  void set_file_uris(int index, const char* value, size_t size);
  ::std::string* add_file_uris();
  void add_file_uris(const ::std::string& value);
  #if LANG_CXX11
  void add_file_uris(::std::string&& value);
  #endif
  void add_file_uris(const char* value);
  void add_file_uris(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& file_uris() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_file_uris();

  // repeated string archive_uris = 6;
  int archive_uris_size() const;
  void clear_archive_uris();
  static const int kArchiveUrisFieldNumber = 6;
  const ::std::string& archive_uris(int index) const;
  ::std::string* mutable_archive_uris(int index);
  void set_archive_uris(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_archive_uris(int index, ::std::string&& value);
  #endif
  void set_archive_uris(int index, const char* value);
  void set_archive_uris(int index, const char* value, size_t size);
  ::std::string* add_archive_uris();
  void add_archive_uris(const ::std::string& value);
  #if LANG_CXX11
  void add_archive_uris(::std::string&& value);
  #endif
  void add_archive_uris(const char* value);
  void add_archive_uris(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& archive_uris() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_archive_uris();

  // map<string, string> properties = 7;
  int properties_size() const;
  void clear_properties();
  static const int kPropertiesFieldNumber = 7;
  const ::google::protobuf::Map< ::std::string, ::std::string >&
      properties() const;
  ::google::protobuf::Map< ::std::string, ::std::string >*
      mutable_properties();

  // .google.cloud.dataproc.v1.LoggingConfig logging_config = 8;
  bool has_logging_config() const;
  void clear_logging_config();
  static const int kLoggingConfigFieldNumber = 8;
  const ::google::cloud::dataproc::v1::LoggingConfig& logging_config() const;
  ::google::cloud::dataproc::v1::LoggingConfig* release_logging_config();
  ::google::cloud::dataproc::v1::LoggingConfig* mutable_logging_config();
  void set_allocated_logging_config(::google::cloud::dataproc::v1::LoggingConfig* logging_config);

  // string main_jar_file_uri = 1;
  private:
  bool has_main_jar_file_uri() const;
  public:
  void clear_main_jar_file_uri();
  static const int kMainJarFileUriFieldNumber = 1;
  const ::std::string& main_jar_file_uri() const;
  void set_main_jar_file_uri(const ::std::string& value);
  #if LANG_CXX11
  void set_main_jar_file_uri(::std::string&& value);
  #endif
  void set_main_jar_file_uri(const char* value);
  void set_main_jar_file_uri(const char* value, size_t size);
  ::std::string* mutable_main_jar_file_uri();
  ::std::string* release_main_jar_file_uri();
  void set_allocated_main_jar_file_uri(::std::string* main_jar_file_uri);

  // string main_class = 2;
  private:
  bool has_main_class() const;
  public:
  void clear_main_class();
  static const int kMainClassFieldNumber = 2;
  const ::std::string& main_class() const;
  void set_main_class(const ::std::string& value);
  #if LANG_CXX11
  void set_main_class(::std::string&& value);
  #endif
  void set_main_class(const char* value);
  void set_main_class(const char* value, size_t size);
  ::std::string* mutable_main_class();
  ::std::string* release_main_class();
  void set_allocated_main_class(::std::string* main_class);

  DriverCase driver_case() const;
  // @@protoc_insertion_point(class_scope:google.cloud.dataproc.v1.HadoopJob)
 private:
  void set_has_main_jar_file_uri();
  void set_has_main_class();

  inline bool has_driver() const;
  void clear_driver();
  inline void clear_has_driver();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> args_;
  ::google::protobuf::RepeatedPtrField< ::std::string> jar_file_uris_;
  ::google::protobuf::RepeatedPtrField< ::std::string> file_uris_;
  ::google::protobuf::RepeatedPtrField< ::std::string> archive_uris_;
  ::google::protobuf::internal::MapField<
      HadoopJob_PropertiesEntry_DoNotUse,
      ::std::string, ::std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      0 > properties_;
  ::google::cloud::dataproc::v1::LoggingConfig* logging_config_;
  union DriverUnion {
    DriverUnion() {}
    ::google::protobuf::internal::ArenaStringPtr main_jar_file_uri_;
    ::google::protobuf::internal::ArenaStringPtr main_class_;
  } driver_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::protobuf_google_2fcloud_2fdataproc_2fv1_2fjobs_2eproto::TableStruct;
  friend void ::protobuf_google_2fcloud_2fdataproc_2fv1_2fjobs_2eproto::InitDefaultsHadoopJobImpl();
};
// -------------------------------------------------------------------

class SparkJob_PropertiesEntry_DoNotUse : public ::google::protobuf::internal::MapEntry<SparkJob_PropertiesEntry_DoNotUse, 
    ::std::string, ::std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    0 > {
public:
  typedef ::google::protobuf::internal::MapEntry<SparkJob_PropertiesEntry_DoNotUse, 
    ::std::string, ::std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    0 > SuperType;
  SparkJob_PropertiesEntry_DoNotUse();
  SparkJob_PropertiesEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const SparkJob_PropertiesEntry_DoNotUse& other);
  static const SparkJob_PropertiesEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const SparkJob_PropertiesEntry_DoNotUse*>(&_SparkJob_PropertiesEntry_DoNotUse_default_instance_); }
  void MergeFrom(const ::google::protobuf::Message& other) PROTOBUF_FINAL;
  ::google::protobuf::Metadata GetMetadata() const;
};

// -------------------------------------------------------------------

class SparkJob : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.cloud.dataproc.v1.SparkJob) */ {
 public:
  SparkJob();
  virtual ~SparkJob();

  SparkJob(const SparkJob& from);

  inline SparkJob& operator=(const SparkJob& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SparkJob(SparkJob&& from) noexcept
    : SparkJob() {
    *this = ::std::move(from);
  }

  inline SparkJob& operator=(SparkJob&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SparkJob& default_instance();

  enum DriverCase {
    kMainJarFileUri = 1,
    kMainClass = 2,
    DRIVER_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SparkJob* internal_default_instance() {
    return reinterpret_cast<const SparkJob*>(
               &_SparkJob_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    5;

  void Swap(SparkJob* other);
  friend void swap(SparkJob& a, SparkJob& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SparkJob* New() const PROTOBUF_FINAL { return New(NULL); }

  SparkJob* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SparkJob& from);
  void MergeFrom(const SparkJob& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SparkJob* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // repeated string args = 3;
  int args_size() const;
  void clear_args();
  static const int kArgsFieldNumber = 3;
  const ::std::string& args(int index) const;
  ::std::string* mutable_args(int index);
  void set_args(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_args(int index, ::std::string&& value);
  #endif
  void set_args(int index, const char* value);
  void set_args(int index, const char* value, size_t size);
  ::std::string* add_args();
  void add_args(const ::std::string& value);
  #if LANG_CXX11
  void add_args(::std::string&& value);
  #endif
  void add_args(const char* value);
  void add_args(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& args() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_args();

  // repeated string jar_file_uris = 4;
  int jar_file_uris_size() const;
  void clear_jar_file_uris();
  static const int kJarFileUrisFieldNumber = 4;
  const ::std::string& jar_file_uris(int index) const;
  ::std::string* mutable_jar_file_uris(int index);
  void set_jar_file_uris(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_jar_file_uris(int index, ::std::string&& value);
  #endif
  void set_jar_file_uris(int index, const char* value);
  void set_jar_file_uris(int index, const char* value, size_t size);
  ::std::string* add_jar_file_uris();
  void add_jar_file_uris(const ::std::string& value);
  #if LANG_CXX11
  void add_jar_file_uris(::std::string&& value);
  #endif
  void add_jar_file_uris(const char* value);
  void add_jar_file_uris(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& jar_file_uris() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_jar_file_uris();

  // repeated string file_uris = 5;
  int file_uris_size() const;
  void clear_file_uris();
  static const int kFileUrisFieldNumber = 5;
  const ::std::string& file_uris(int index) const;
  ::std::string* mutable_file_uris(int index);
  void set_file_uris(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_file_uris(int index, ::std::string&& value);
  #endif
  void set_file_uris(int index, const char* value);
  void set_file_uris(int index, const char* value, size_t size);
  ::std::string* add_file_uris();
  void add_file_uris(const ::std::string& value);
  #if LANG_CXX11
  void add_file_uris(::std::string&& value);
  #endif
  void add_file_uris(const char* value);
  void add_file_uris(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& file_uris() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_file_uris();

  // repeated string archive_uris = 6;
  int archive_uris_size() const;
  void clear_archive_uris();
  static const int kArchiveUrisFieldNumber = 6;
  const ::std::string& archive_uris(int index) const;
  ::std::string* mutable_archive_uris(int index);
  void set_archive_uris(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_archive_uris(int index, ::std::string&& value);
  #endif
  void set_archive_uris(int index, const char* value);
  void set_archive_uris(int index, const char* value, size_t size);
  ::std::string* add_archive_uris();
  void add_archive_uris(const ::std::string& value);
  #if LANG_CXX11
  void add_archive_uris(::std::string&& value);
  #endif
  void add_archive_uris(const char* value);
  void add_archive_uris(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& archive_uris() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_archive_uris();

  // map<string, string> properties = 7;
  int properties_size() const;
  void clear_properties();
  static const int kPropertiesFieldNumber = 7;
  const ::google::protobuf::Map< ::std::string, ::std::string >&
      properties() const;
  ::google::protobuf::Map< ::std::string, ::std::string >*
      mutable_properties();

  // .google.cloud.dataproc.v1.LoggingConfig logging_config = 8;
  bool has_logging_config() const;
  void clear_logging_config();
  static const int kLoggingConfigFieldNumber = 8;
  const ::google::cloud::dataproc::v1::LoggingConfig& logging_config() const;
  ::google::cloud::dataproc::v1::LoggingConfig* release_logging_config();
  ::google::cloud::dataproc::v1::LoggingConfig* mutable_logging_config();
  void set_allocated_logging_config(::google::cloud::dataproc::v1::LoggingConfig* logging_config);

  // string main_jar_file_uri = 1;
  private:
  bool has_main_jar_file_uri() const;
  public:
  void clear_main_jar_file_uri();
  static const int kMainJarFileUriFieldNumber = 1;
  const ::std::string& main_jar_file_uri() const;
  void set_main_jar_file_uri(const ::std::string& value);
  #if LANG_CXX11
  void set_main_jar_file_uri(::std::string&& value);
  #endif
  void set_main_jar_file_uri(const char* value);
  void set_main_jar_file_uri(const char* value, size_t size);
  ::std::string* mutable_main_jar_file_uri();
  ::std::string* release_main_jar_file_uri();
  void set_allocated_main_jar_file_uri(::std::string* main_jar_file_uri);

  // string main_class = 2;
  private:
  bool has_main_class() const;
  public:
  void clear_main_class();
  static const int kMainClassFieldNumber = 2;
  const ::std::string& main_class() const;
  void set_main_class(const ::std::string& value);
  #if LANG_CXX11
  void set_main_class(::std::string&& value);
  #endif
  void set_main_class(const char* value);
  void set_main_class(const char* value, size_t size);
  ::std::string* mutable_main_class();
  ::std::string* release_main_class();
  void set_allocated_main_class(::std::string* main_class);

  DriverCase driver_case() const;
  // @@protoc_insertion_point(class_scope:google.cloud.dataproc.v1.SparkJob)
 private:
  void set_has_main_jar_file_uri();
  void set_has_main_class();

  inline bool has_driver() const;
  void clear_driver();
  inline void clear_has_driver();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> args_;
  ::google::protobuf::RepeatedPtrField< ::std::string> jar_file_uris_;
  ::google::protobuf::RepeatedPtrField< ::std::string> file_uris_;
  ::google::protobuf::RepeatedPtrField< ::std::string> archive_uris_;
  ::google::protobuf::internal::MapField<
      SparkJob_PropertiesEntry_DoNotUse,
      ::std::string, ::std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      0 > properties_;
  ::google::cloud::dataproc::v1::LoggingConfig* logging_config_;
  union DriverUnion {
    DriverUnion() {}
    ::google::protobuf::internal::ArenaStringPtr main_jar_file_uri_;
    ::google::protobuf::internal::ArenaStringPtr main_class_;
  } driver_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::protobuf_google_2fcloud_2fdataproc_2fv1_2fjobs_2eproto::TableStruct;
  friend void ::protobuf_google_2fcloud_2fdataproc_2fv1_2fjobs_2eproto::InitDefaultsSparkJobImpl();
};
// -------------------------------------------------------------------

class PySparkJob_PropertiesEntry_DoNotUse : public ::google::protobuf::internal::MapEntry<PySparkJob_PropertiesEntry_DoNotUse, 
    ::std::string, ::std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    0 > {
public:
  typedef ::google::protobuf::internal::MapEntry<PySparkJob_PropertiesEntry_DoNotUse, 
    ::std::string, ::std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    0 > SuperType;
  PySparkJob_PropertiesEntry_DoNotUse();
  PySparkJob_PropertiesEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const PySparkJob_PropertiesEntry_DoNotUse& other);
  static const PySparkJob_PropertiesEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const PySparkJob_PropertiesEntry_DoNotUse*>(&_PySparkJob_PropertiesEntry_DoNotUse_default_instance_); }
  void MergeFrom(const ::google::protobuf::Message& other) PROTOBUF_FINAL;
  ::google::protobuf::Metadata GetMetadata() const;
};

// -------------------------------------------------------------------

class PySparkJob : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.cloud.dataproc.v1.PySparkJob) */ {
 public:
  PySparkJob();
  virtual ~PySparkJob();

  PySparkJob(const PySparkJob& from);

  inline PySparkJob& operator=(const PySparkJob& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PySparkJob(PySparkJob&& from) noexcept
    : PySparkJob() {
    *this = ::std::move(from);
  }

  inline PySparkJob& operator=(PySparkJob&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PySparkJob& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PySparkJob* internal_default_instance() {
    return reinterpret_cast<const PySparkJob*>(
               &_PySparkJob_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    7;

  void Swap(PySparkJob* other);
  friend void swap(PySparkJob& a, PySparkJob& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PySparkJob* New() const PROTOBUF_FINAL { return New(NULL); }

  PySparkJob* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const PySparkJob& from);
  void MergeFrom(const PySparkJob& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(PySparkJob* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // repeated string args = 2;
  int args_size() const;
  void clear_args();
  static const int kArgsFieldNumber = 2;
  const ::std::string& args(int index) const;
  ::std::string* mutable_args(int index);
  void set_args(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_args(int index, ::std::string&& value);
  #endif
  void set_args(int index, const char* value);
  void set_args(int index, const char* value, size_t size);
  ::std::string* add_args();
  void add_args(const ::std::string& value);
  #if LANG_CXX11
  void add_args(::std::string&& value);
  #endif
  void add_args(const char* value);
  void add_args(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& args() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_args();

  // repeated string python_file_uris = 3;
  int python_file_uris_size() const;
  void clear_python_file_uris();
  static const int kPythonFileUrisFieldNumber = 3;
  const ::std::string& python_file_uris(int index) const;
  ::std::string* mutable_python_file_uris(int index);
  void set_python_file_uris(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_python_file_uris(int index, ::std::string&& value);
  #endif
  void set_python_file_uris(int index, const char* value);
  void set_python_file_uris(int index, const char* value, size_t size);
  ::std::string* add_python_file_uris();
  void add_python_file_uris(const ::std::string& value);
  #if LANG_CXX11
  void add_python_file_uris(::std::string&& value);
  #endif
  void add_python_file_uris(const char* value);
  void add_python_file_uris(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& python_file_uris() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_python_file_uris();

  // repeated string jar_file_uris = 4;
  int jar_file_uris_size() const;
  void clear_jar_file_uris();
  static const int kJarFileUrisFieldNumber = 4;
  const ::std::string& jar_file_uris(int index) const;
  ::std::string* mutable_jar_file_uris(int index);
  void set_jar_file_uris(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_jar_file_uris(int index, ::std::string&& value);
  #endif
  void set_jar_file_uris(int index, const char* value);
  void set_jar_file_uris(int index, const char* value, size_t size);
  ::std::string* add_jar_file_uris();
  void add_jar_file_uris(const ::std::string& value);
  #if LANG_CXX11
  void add_jar_file_uris(::std::string&& value);
  #endif
  void add_jar_file_uris(const char* value);
  void add_jar_file_uris(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& jar_file_uris() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_jar_file_uris();

  // repeated string file_uris = 5;
  int file_uris_size() const;
  void clear_file_uris();
  static const int kFileUrisFieldNumber = 5;
  const ::std::string& file_uris(int index) const;
  ::std::string* mutable_file_uris(int index);
  void set_file_uris(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_file_uris(int index, ::std::string&& value);
  #endif
  void set_file_uris(int index, const char* value);
  void set_file_uris(int index, const char* value, size_t size);
  ::std::string* add_file_uris();
  void add_file_uris(const ::std::string& value);
  #if LANG_CXX11
  void add_file_uris(::std::string&& value);
  #endif
  void add_file_uris(const char* value);
  void add_file_uris(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& file_uris() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_file_uris();

  // repeated string archive_uris = 6;
  int archive_uris_size() const;
  void clear_archive_uris();
  static const int kArchiveUrisFieldNumber = 6;
  const ::std::string& archive_uris(int index) const;
  ::std::string* mutable_archive_uris(int index);
  void set_archive_uris(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_archive_uris(int index, ::std::string&& value);
  #endif
  void set_archive_uris(int index, const char* value);
  void set_archive_uris(int index, const char* value, size_t size);
  ::std::string* add_archive_uris();
  void add_archive_uris(const ::std::string& value);
  #if LANG_CXX11
  void add_archive_uris(::std::string&& value);
  #endif
  void add_archive_uris(const char* value);
  void add_archive_uris(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& archive_uris() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_archive_uris();

  // map<string, string> properties = 7;
  int properties_size() const;
  void clear_properties();
  static const int kPropertiesFieldNumber = 7;
  const ::google::protobuf::Map< ::std::string, ::std::string >&
      properties() const;
  ::google::protobuf::Map< ::std::string, ::std::string >*
      mutable_properties();

  // string main_python_file_uri = 1;
  void clear_main_python_file_uri();
  static const int kMainPythonFileUriFieldNumber = 1;
  const ::std::string& main_python_file_uri() const;
  void set_main_python_file_uri(const ::std::string& value);
  #if LANG_CXX11
  void set_main_python_file_uri(::std::string&& value);
  #endif
  void set_main_python_file_uri(const char* value);
  void set_main_python_file_uri(const char* value, size_t size);
  ::std::string* mutable_main_python_file_uri();
  ::std::string* release_main_python_file_uri();
  void set_allocated_main_python_file_uri(::std::string* main_python_file_uri);

  // .google.cloud.dataproc.v1.LoggingConfig logging_config = 8;
  bool has_logging_config() const;
  void clear_logging_config();
  static const int kLoggingConfigFieldNumber = 8;
  const ::google::cloud::dataproc::v1::LoggingConfig& logging_config() const;
  ::google::cloud::dataproc::v1::LoggingConfig* release_logging_config();
  ::google::cloud::dataproc::v1::LoggingConfig* mutable_logging_config();
  void set_allocated_logging_config(::google::cloud::dataproc::v1::LoggingConfig* logging_config);

  // @@protoc_insertion_point(class_scope:google.cloud.dataproc.v1.PySparkJob)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> args_;
  ::google::protobuf::RepeatedPtrField< ::std::string> python_file_uris_;
  ::google::protobuf::RepeatedPtrField< ::std::string> jar_file_uris_;
  ::google::protobuf::RepeatedPtrField< ::std::string> file_uris_;
  ::google::protobuf::RepeatedPtrField< ::std::string> archive_uris_;
  ::google::protobuf::internal::MapField<
      PySparkJob_PropertiesEntry_DoNotUse,
      ::std::string, ::std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      0 > properties_;
  ::google::protobuf::internal::ArenaStringPtr main_python_file_uri_;
  ::google::cloud::dataproc::v1::LoggingConfig* logging_config_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fcloud_2fdataproc_2fv1_2fjobs_2eproto::TableStruct;
  friend void ::protobuf_google_2fcloud_2fdataproc_2fv1_2fjobs_2eproto::InitDefaultsPySparkJobImpl();
};
// -------------------------------------------------------------------

class QueryList : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.cloud.dataproc.v1.QueryList) */ {
 public:
  QueryList();
  virtual ~QueryList();

  QueryList(const QueryList& from);

  inline QueryList& operator=(const QueryList& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  QueryList(QueryList&& from) noexcept
    : QueryList() {
    *this = ::std::move(from);
  }

  inline QueryList& operator=(QueryList&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const QueryList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const QueryList* internal_default_instance() {
    return reinterpret_cast<const QueryList*>(
               &_QueryList_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    8;

  void Swap(QueryList* other);
  friend void swap(QueryList& a, QueryList& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline QueryList* New() const PROTOBUF_FINAL { return New(NULL); }

  QueryList* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const QueryList& from);
  void MergeFrom(const QueryList& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(QueryList* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string queries = 1;
  int queries_size() const;
  void clear_queries();
  static const int kQueriesFieldNumber = 1;
  const ::std::string& queries(int index) const;
  ::std::string* mutable_queries(int index);
  void set_queries(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_queries(int index, ::std::string&& value);
  #endif
  void set_queries(int index, const char* value);
  void set_queries(int index, const char* value, size_t size);
  ::std::string* add_queries();
  void add_queries(const ::std::string& value);
  #if LANG_CXX11
  void add_queries(::std::string&& value);
  #endif
  void add_queries(const char* value);
  void add_queries(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& queries() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_queries();

  // @@protoc_insertion_point(class_scope:google.cloud.dataproc.v1.QueryList)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> queries_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fcloud_2fdataproc_2fv1_2fjobs_2eproto::TableStruct;
  friend void ::protobuf_google_2fcloud_2fdataproc_2fv1_2fjobs_2eproto::InitDefaultsQueryListImpl();
};
// -------------------------------------------------------------------

class HiveJob_ScriptVariablesEntry_DoNotUse : public ::google::protobuf::internal::MapEntry<HiveJob_ScriptVariablesEntry_DoNotUse, 
    ::std::string, ::std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    0 > {
public:
  typedef ::google::protobuf::internal::MapEntry<HiveJob_ScriptVariablesEntry_DoNotUse, 
    ::std::string, ::std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    0 > SuperType;
  HiveJob_ScriptVariablesEntry_DoNotUse();
  HiveJob_ScriptVariablesEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const HiveJob_ScriptVariablesEntry_DoNotUse& other);
  static const HiveJob_ScriptVariablesEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const HiveJob_ScriptVariablesEntry_DoNotUse*>(&_HiveJob_ScriptVariablesEntry_DoNotUse_default_instance_); }
  void MergeFrom(const ::google::protobuf::Message& other) PROTOBUF_FINAL;
  ::google::protobuf::Metadata GetMetadata() const;
};

// -------------------------------------------------------------------

class HiveJob_PropertiesEntry_DoNotUse : public ::google::protobuf::internal::MapEntry<HiveJob_PropertiesEntry_DoNotUse, 
    ::std::string, ::std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    0 > {
public:
  typedef ::google::protobuf::internal::MapEntry<HiveJob_PropertiesEntry_DoNotUse, 
    ::std::string, ::std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    0 > SuperType;
  HiveJob_PropertiesEntry_DoNotUse();
  HiveJob_PropertiesEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const HiveJob_PropertiesEntry_DoNotUse& other);
  static const HiveJob_PropertiesEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const HiveJob_PropertiesEntry_DoNotUse*>(&_HiveJob_PropertiesEntry_DoNotUse_default_instance_); }
  void MergeFrom(const ::google::protobuf::Message& other) PROTOBUF_FINAL;
  ::google::protobuf::Metadata GetMetadata() const;
};

// -------------------------------------------------------------------

class HiveJob : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.cloud.dataproc.v1.HiveJob) */ {
 public:
  HiveJob();
  virtual ~HiveJob();

  HiveJob(const HiveJob& from);

  inline HiveJob& operator=(const HiveJob& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  HiveJob(HiveJob&& from) noexcept
    : HiveJob() {
    *this = ::std::move(from);
  }

  inline HiveJob& operator=(HiveJob&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const HiveJob& default_instance();

  enum QueriesCase {
    kQueryFileUri = 1,
    kQueryList = 2,
    QUERIES_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const HiveJob* internal_default_instance() {
    return reinterpret_cast<const HiveJob*>(
               &_HiveJob_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    11;

  void Swap(HiveJob* other);
  friend void swap(HiveJob& a, HiveJob& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline HiveJob* New() const PROTOBUF_FINAL { return New(NULL); }

  HiveJob* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const HiveJob& from);
  void MergeFrom(const HiveJob& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(HiveJob* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // map<string, string> script_variables = 4;
  int script_variables_size() const;
  void clear_script_variables();
  static const int kScriptVariablesFieldNumber = 4;
  const ::google::protobuf::Map< ::std::string, ::std::string >&
      script_variables() const;
  ::google::protobuf::Map< ::std::string, ::std::string >*
      mutable_script_variables();

  // map<string, string> properties = 5;
  int properties_size() const;
  void clear_properties();
  static const int kPropertiesFieldNumber = 5;
  const ::google::protobuf::Map< ::std::string, ::std::string >&
      properties() const;
  ::google::protobuf::Map< ::std::string, ::std::string >*
      mutable_properties();

  // repeated string jar_file_uris = 6;
  int jar_file_uris_size() const;
  void clear_jar_file_uris();
  static const int kJarFileUrisFieldNumber = 6;
  const ::std::string& jar_file_uris(int index) const;
  ::std::string* mutable_jar_file_uris(int index);
  void set_jar_file_uris(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_jar_file_uris(int index, ::std::string&& value);
  #endif
  void set_jar_file_uris(int index, const char* value);
  void set_jar_file_uris(int index, const char* value, size_t size);
  ::std::string* add_jar_file_uris();
  void add_jar_file_uris(const ::std::string& value);
  #if LANG_CXX11
  void add_jar_file_uris(::std::string&& value);
  #endif
  void add_jar_file_uris(const char* value);
  void add_jar_file_uris(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& jar_file_uris() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_jar_file_uris();

  // bool continue_on_failure = 3;
  void clear_continue_on_failure();
  static const int kContinueOnFailureFieldNumber = 3;
  bool continue_on_failure() const;
  void set_continue_on_failure(bool value);

  // string query_file_uri = 1;
  private:
  bool has_query_file_uri() const;
  public:
  void clear_query_file_uri();
  static const int kQueryFileUriFieldNumber = 1;
  const ::std::string& query_file_uri() const;
  void set_query_file_uri(const ::std::string& value);
  #if LANG_CXX11
  void set_query_file_uri(::std::string&& value);
  #endif
  void set_query_file_uri(const char* value);
  void set_query_file_uri(const char* value, size_t size);
  ::std::string* mutable_query_file_uri();
  ::std::string* release_query_file_uri();
  void set_allocated_query_file_uri(::std::string* query_file_uri);

  // .google.cloud.dataproc.v1.QueryList query_list = 2;
  bool has_query_list() const;
  void clear_query_list();
  static const int kQueryListFieldNumber = 2;
  const ::google::cloud::dataproc::v1::QueryList& query_list() const;
  ::google::cloud::dataproc::v1::QueryList* release_query_list();
  ::google::cloud::dataproc::v1::QueryList* mutable_query_list();
  void set_allocated_query_list(::google::cloud::dataproc::v1::QueryList* query_list);

  QueriesCase queries_case() const;
  // @@protoc_insertion_point(class_scope:google.cloud.dataproc.v1.HiveJob)
 private:
  void set_has_query_file_uri();
  void set_has_query_list();

  inline bool has_queries() const;
  void clear_queries();
  inline void clear_has_queries();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::MapField<
      HiveJob_ScriptVariablesEntry_DoNotUse,
      ::std::string, ::std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      0 > script_variables_;
  ::google::protobuf::internal::MapField<
      HiveJob_PropertiesEntry_DoNotUse,
      ::std::string, ::std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      0 > properties_;
  ::google::protobuf::RepeatedPtrField< ::std::string> jar_file_uris_;
  bool continue_on_failure_;
  union QueriesUnion {
    QueriesUnion() {}
    ::google::protobuf::internal::ArenaStringPtr query_file_uri_;
    ::google::cloud::dataproc::v1::QueryList* query_list_;
  } queries_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::protobuf_google_2fcloud_2fdataproc_2fv1_2fjobs_2eproto::TableStruct;
  friend void ::protobuf_google_2fcloud_2fdataproc_2fv1_2fjobs_2eproto::InitDefaultsHiveJobImpl();
};
// -------------------------------------------------------------------

class SparkSqlJob_ScriptVariablesEntry_DoNotUse : public ::google::protobuf::internal::MapEntry<SparkSqlJob_ScriptVariablesEntry_DoNotUse, 
    ::std::string, ::std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    0 > {
public:
  typedef ::google::protobuf::internal::MapEntry<SparkSqlJob_ScriptVariablesEntry_DoNotUse, 
    ::std::string, ::std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    0 > SuperType;
  SparkSqlJob_ScriptVariablesEntry_DoNotUse();
  SparkSqlJob_ScriptVariablesEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const SparkSqlJob_ScriptVariablesEntry_DoNotUse& other);
  static const SparkSqlJob_ScriptVariablesEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const SparkSqlJob_ScriptVariablesEntry_DoNotUse*>(&_SparkSqlJob_ScriptVariablesEntry_DoNotUse_default_instance_); }
  void MergeFrom(const ::google::protobuf::Message& other) PROTOBUF_FINAL;
  ::google::protobuf::Metadata GetMetadata() const;
};

// -------------------------------------------------------------------

class SparkSqlJob_PropertiesEntry_DoNotUse : public ::google::protobuf::internal::MapEntry<SparkSqlJob_PropertiesEntry_DoNotUse, 
    ::std::string, ::std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    0 > {
public:
  typedef ::google::protobuf::internal::MapEntry<SparkSqlJob_PropertiesEntry_DoNotUse, 
    ::std::string, ::std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    0 > SuperType;
  SparkSqlJob_PropertiesEntry_DoNotUse();
  SparkSqlJob_PropertiesEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const SparkSqlJob_PropertiesEntry_DoNotUse& other);
  static const SparkSqlJob_PropertiesEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const SparkSqlJob_PropertiesEntry_DoNotUse*>(&_SparkSqlJob_PropertiesEntry_DoNotUse_default_instance_); }
  void MergeFrom(const ::google::protobuf::Message& other) PROTOBUF_FINAL;
  ::google::protobuf::Metadata GetMetadata() const;
};

// -------------------------------------------------------------------

class SparkSqlJob : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.cloud.dataproc.v1.SparkSqlJob) */ {
 public:
  SparkSqlJob();
  virtual ~SparkSqlJob();

  SparkSqlJob(const SparkSqlJob& from);

  inline SparkSqlJob& operator=(const SparkSqlJob& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SparkSqlJob(SparkSqlJob&& from) noexcept
    : SparkSqlJob() {
    *this = ::std::move(from);
  }

  inline SparkSqlJob& operator=(SparkSqlJob&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SparkSqlJob& default_instance();

  enum QueriesCase {
    kQueryFileUri = 1,
    kQueryList = 2,
    QUERIES_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SparkSqlJob* internal_default_instance() {
    return reinterpret_cast<const SparkSqlJob*>(
               &_SparkSqlJob_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    14;

  void Swap(SparkSqlJob* other);
  friend void swap(SparkSqlJob& a, SparkSqlJob& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SparkSqlJob* New() const PROTOBUF_FINAL { return New(NULL); }

  SparkSqlJob* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SparkSqlJob& from);
  void MergeFrom(const SparkSqlJob& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SparkSqlJob* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // map<string, string> script_variables = 3;
  int script_variables_size() const;
  void clear_script_variables();
  static const int kScriptVariablesFieldNumber = 3;
  const ::google::protobuf::Map< ::std::string, ::std::string >&
      script_variables() const;
  ::google::protobuf::Map< ::std::string, ::std::string >*
      mutable_script_variables();

  // map<string, string> properties = 4;
  int properties_size() const;
  void clear_properties();
  static const int kPropertiesFieldNumber = 4;
  const ::google::protobuf::Map< ::std::string, ::std::string >&
      properties() const;
  ::google::protobuf::Map< ::std::string, ::std::string >*
      mutable_properties();

  // repeated string jar_file_uris = 56;
  int jar_file_uris_size() const;
  void clear_jar_file_uris();
  static const int kJarFileUrisFieldNumber = 56;
  const ::std::string& jar_file_uris(int index) const;
  ::std::string* mutable_jar_file_uris(int index);
  void set_jar_file_uris(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_jar_file_uris(int index, ::std::string&& value);
  #endif
  void set_jar_file_uris(int index, const char* value);
  void set_jar_file_uris(int index, const char* value, size_t size);
  ::std::string* add_jar_file_uris();
  void add_jar_file_uris(const ::std::string& value);
  #if LANG_CXX11
  void add_jar_file_uris(::std::string&& value);
  #endif
  void add_jar_file_uris(const char* value);
  void add_jar_file_uris(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& jar_file_uris() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_jar_file_uris();

  // .google.cloud.dataproc.v1.LoggingConfig logging_config = 6;
  bool has_logging_config() const;
  void clear_logging_config();
  static const int kLoggingConfigFieldNumber = 6;
  const ::google::cloud::dataproc::v1::LoggingConfig& logging_config() const;
  ::google::cloud::dataproc::v1::LoggingConfig* release_logging_config();
  ::google::cloud::dataproc::v1::LoggingConfig* mutable_logging_config();
  void set_allocated_logging_config(::google::cloud::dataproc::v1::LoggingConfig* logging_config);

  // string query_file_uri = 1;
  private:
  bool has_query_file_uri() const;
  public:
  void clear_query_file_uri();
  static const int kQueryFileUriFieldNumber = 1;
  const ::std::string& query_file_uri() const;
  void set_query_file_uri(const ::std::string& value);
  #if LANG_CXX11
  void set_query_file_uri(::std::string&& value);
  #endif
  void set_query_file_uri(const char* value);
  void set_query_file_uri(const char* value, size_t size);
  ::std::string* mutable_query_file_uri();
  ::std::string* release_query_file_uri();
  void set_allocated_query_file_uri(::std::string* query_file_uri);

  // .google.cloud.dataproc.v1.QueryList query_list = 2;
  bool has_query_list() const;
  void clear_query_list();
  static const int kQueryListFieldNumber = 2;
  const ::google::cloud::dataproc::v1::QueryList& query_list() const;
  ::google::cloud::dataproc::v1::QueryList* release_query_list();
  ::google::cloud::dataproc::v1::QueryList* mutable_query_list();
  void set_allocated_query_list(::google::cloud::dataproc::v1::QueryList* query_list);

  QueriesCase queries_case() const;
  // @@protoc_insertion_point(class_scope:google.cloud.dataproc.v1.SparkSqlJob)
 private:
  void set_has_query_file_uri();
  void set_has_query_list();

  inline bool has_queries() const;
  void clear_queries();
  inline void clear_has_queries();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::MapField<
      SparkSqlJob_ScriptVariablesEntry_DoNotUse,
      ::std::string, ::std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      0 > script_variables_;
  ::google::protobuf::internal::MapField<
      SparkSqlJob_PropertiesEntry_DoNotUse,
      ::std::string, ::std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      0 > properties_;
  ::google::protobuf::RepeatedPtrField< ::std::string> jar_file_uris_;
  ::google::cloud::dataproc::v1::LoggingConfig* logging_config_;
  union QueriesUnion {
    QueriesUnion() {}
    ::google::protobuf::internal::ArenaStringPtr query_file_uri_;
    ::google::cloud::dataproc::v1::QueryList* query_list_;
  } queries_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::protobuf_google_2fcloud_2fdataproc_2fv1_2fjobs_2eproto::TableStruct;
  friend void ::protobuf_google_2fcloud_2fdataproc_2fv1_2fjobs_2eproto::InitDefaultsSparkSqlJobImpl();
};
// -------------------------------------------------------------------

class PigJob_ScriptVariablesEntry_DoNotUse : public ::google::protobuf::internal::MapEntry<PigJob_ScriptVariablesEntry_DoNotUse, 
    ::std::string, ::std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    0 > {
public:
  typedef ::google::protobuf::internal::MapEntry<PigJob_ScriptVariablesEntry_DoNotUse, 
    ::std::string, ::std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    0 > SuperType;
  PigJob_ScriptVariablesEntry_DoNotUse();
  PigJob_ScriptVariablesEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const PigJob_ScriptVariablesEntry_DoNotUse& other);
  static const PigJob_ScriptVariablesEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const PigJob_ScriptVariablesEntry_DoNotUse*>(&_PigJob_ScriptVariablesEntry_DoNotUse_default_instance_); }
  void MergeFrom(const ::google::protobuf::Message& other) PROTOBUF_FINAL;
  ::google::protobuf::Metadata GetMetadata() const;
};

// -------------------------------------------------------------------

class PigJob_PropertiesEntry_DoNotUse : public ::google::protobuf::internal::MapEntry<PigJob_PropertiesEntry_DoNotUse, 
    ::std::string, ::std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    0 > {
public:
  typedef ::google::protobuf::internal::MapEntry<PigJob_PropertiesEntry_DoNotUse, 
    ::std::string, ::std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    0 > SuperType;
  PigJob_PropertiesEntry_DoNotUse();
  PigJob_PropertiesEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const PigJob_PropertiesEntry_DoNotUse& other);
  static const PigJob_PropertiesEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const PigJob_PropertiesEntry_DoNotUse*>(&_PigJob_PropertiesEntry_DoNotUse_default_instance_); }
  void MergeFrom(const ::google::protobuf::Message& other) PROTOBUF_FINAL;
  ::google::protobuf::Metadata GetMetadata() const;
};

// -------------------------------------------------------------------

class PigJob : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.cloud.dataproc.v1.PigJob) */ {
 public:
  PigJob();
  virtual ~PigJob();

  PigJob(const PigJob& from);

  inline PigJob& operator=(const PigJob& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PigJob(PigJob&& from) noexcept
    : PigJob() {
    *this = ::std::move(from);
  }

  inline PigJob& operator=(PigJob&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PigJob& default_instance();

  enum QueriesCase {
    kQueryFileUri = 1,
    kQueryList = 2,
    QUERIES_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PigJob* internal_default_instance() {
    return reinterpret_cast<const PigJob*>(
               &_PigJob_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    17;

  void Swap(PigJob* other);
  friend void swap(PigJob& a, PigJob& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PigJob* New() const PROTOBUF_FINAL { return New(NULL); }

  PigJob* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const PigJob& from);
  void MergeFrom(const PigJob& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(PigJob* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // map<string, string> script_variables = 4;
  int script_variables_size() const;
  void clear_script_variables();
  static const int kScriptVariablesFieldNumber = 4;
  const ::google::protobuf::Map< ::std::string, ::std::string >&
      script_variables() const;
  ::google::protobuf::Map< ::std::string, ::std::string >*
      mutable_script_variables();

  // map<string, string> properties = 5;
  int properties_size() const;
  void clear_properties();
  static const int kPropertiesFieldNumber = 5;
  const ::google::protobuf::Map< ::std::string, ::std::string >&
      properties() const;
  ::google::protobuf::Map< ::std::string, ::std::string >*
      mutable_properties();

  // repeated string jar_file_uris = 6;
  int jar_file_uris_size() const;
  void clear_jar_file_uris();
  static const int kJarFileUrisFieldNumber = 6;
  const ::std::string& jar_file_uris(int index) const;
  ::std::string* mutable_jar_file_uris(int index);
  void set_jar_file_uris(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_jar_file_uris(int index, ::std::string&& value);
  #endif
  void set_jar_file_uris(int index, const char* value);
  void set_jar_file_uris(int index, const char* value, size_t size);
  ::std::string* add_jar_file_uris();
  void add_jar_file_uris(const ::std::string& value);
  #if LANG_CXX11
  void add_jar_file_uris(::std::string&& value);
  #endif
  void add_jar_file_uris(const char* value);
  void add_jar_file_uris(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& jar_file_uris() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_jar_file_uris();

  // .google.cloud.dataproc.v1.LoggingConfig logging_config = 7;
  bool has_logging_config() const;
  void clear_logging_config();
  static const int kLoggingConfigFieldNumber = 7;
  const ::google::cloud::dataproc::v1::LoggingConfig& logging_config() const;
  ::google::cloud::dataproc::v1::LoggingConfig* release_logging_config();
  ::google::cloud::dataproc::v1::LoggingConfig* mutable_logging_config();
  void set_allocated_logging_config(::google::cloud::dataproc::v1::LoggingConfig* logging_config);

  // bool continue_on_failure = 3;
  void clear_continue_on_failure();
  static const int kContinueOnFailureFieldNumber = 3;
  bool continue_on_failure() const;
  void set_continue_on_failure(bool value);

  // string query_file_uri = 1;
  private:
  bool has_query_file_uri() const;
  public:
  void clear_query_file_uri();
  static const int kQueryFileUriFieldNumber = 1;
  const ::std::string& query_file_uri() const;
  void set_query_file_uri(const ::std::string& value);
  #if LANG_CXX11
  void set_query_file_uri(::std::string&& value);
  #endif
  void set_query_file_uri(const char* value);
  void set_query_file_uri(const char* value, size_t size);
  ::std::string* mutable_query_file_uri();
  ::std::string* release_query_file_uri();
  void set_allocated_query_file_uri(::std::string* query_file_uri);

  // .google.cloud.dataproc.v1.QueryList query_list = 2;
  bool has_query_list() const;
  void clear_query_list();
  static const int kQueryListFieldNumber = 2;
  const ::google::cloud::dataproc::v1::QueryList& query_list() const;
  ::google::cloud::dataproc::v1::QueryList* release_query_list();
  ::google::cloud::dataproc::v1::QueryList* mutable_query_list();
  void set_allocated_query_list(::google::cloud::dataproc::v1::QueryList* query_list);

  QueriesCase queries_case() const;
  // @@protoc_insertion_point(class_scope:google.cloud.dataproc.v1.PigJob)
 private:
  void set_has_query_file_uri();
  void set_has_query_list();

  inline bool has_queries() const;
  void clear_queries();
  inline void clear_has_queries();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::MapField<
      PigJob_ScriptVariablesEntry_DoNotUse,
      ::std::string, ::std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      0 > script_variables_;
  ::google::protobuf::internal::MapField<
      PigJob_PropertiesEntry_DoNotUse,
      ::std::string, ::std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      0 > properties_;
  ::google::protobuf::RepeatedPtrField< ::std::string> jar_file_uris_;
  ::google::cloud::dataproc::v1::LoggingConfig* logging_config_;
  bool continue_on_failure_;
  union QueriesUnion {
    QueriesUnion() {}
    ::google::protobuf::internal::ArenaStringPtr query_file_uri_;
    ::google::cloud::dataproc::v1::QueryList* query_list_;
  } queries_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::protobuf_google_2fcloud_2fdataproc_2fv1_2fjobs_2eproto::TableStruct;
  friend void ::protobuf_google_2fcloud_2fdataproc_2fv1_2fjobs_2eproto::InitDefaultsPigJobImpl();
};
// -------------------------------------------------------------------

class JobPlacement : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.cloud.dataproc.v1.JobPlacement) */ {
 public:
  JobPlacement();
  virtual ~JobPlacement();

  JobPlacement(const JobPlacement& from);

  inline JobPlacement& operator=(const JobPlacement& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  JobPlacement(JobPlacement&& from) noexcept
    : JobPlacement() {
    *this = ::std::move(from);
  }

  inline JobPlacement& operator=(JobPlacement&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const JobPlacement& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const JobPlacement* internal_default_instance() {
    return reinterpret_cast<const JobPlacement*>(
               &_JobPlacement_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    18;

  void Swap(JobPlacement* other);
  friend void swap(JobPlacement& a, JobPlacement& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline JobPlacement* New() const PROTOBUF_FINAL { return New(NULL); }

  JobPlacement* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const JobPlacement& from);
  void MergeFrom(const JobPlacement& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(JobPlacement* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string cluster_name = 1;
  void clear_cluster_name();
  static const int kClusterNameFieldNumber = 1;
  const ::std::string& cluster_name() const;
  void set_cluster_name(const ::std::string& value);
  #if LANG_CXX11
  void set_cluster_name(::std::string&& value);
  #endif
  void set_cluster_name(const char* value);
  void set_cluster_name(const char* value, size_t size);
  ::std::string* mutable_cluster_name();
  ::std::string* release_cluster_name();
  void set_allocated_cluster_name(::std::string* cluster_name);

  // string cluster_uuid = 2;
  void clear_cluster_uuid();
  static const int kClusterUuidFieldNumber = 2;
  const ::std::string& cluster_uuid() const;
  void set_cluster_uuid(const ::std::string& value);
  #if LANG_CXX11
  void set_cluster_uuid(::std::string&& value);
  #endif
  void set_cluster_uuid(const char* value);
  void set_cluster_uuid(const char* value, size_t size);
  ::std::string* mutable_cluster_uuid();
  ::std::string* release_cluster_uuid();
  void set_allocated_cluster_uuid(::std::string* cluster_uuid);

  // @@protoc_insertion_point(class_scope:google.cloud.dataproc.v1.JobPlacement)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr cluster_name_;
  ::google::protobuf::internal::ArenaStringPtr cluster_uuid_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fcloud_2fdataproc_2fv1_2fjobs_2eproto::TableStruct;
  friend void ::protobuf_google_2fcloud_2fdataproc_2fv1_2fjobs_2eproto::InitDefaultsJobPlacementImpl();
};
// -------------------------------------------------------------------

class JobStatus : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.cloud.dataproc.v1.JobStatus) */ {
 public:
  JobStatus();
  virtual ~JobStatus();

  JobStatus(const JobStatus& from);

  inline JobStatus& operator=(const JobStatus& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  JobStatus(JobStatus&& from) noexcept
    : JobStatus() {
    *this = ::std::move(from);
  }

  inline JobStatus& operator=(JobStatus&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const JobStatus& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const JobStatus* internal_default_instance() {
    return reinterpret_cast<const JobStatus*>(
               &_JobStatus_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    19;

  void Swap(JobStatus* other);
  friend void swap(JobStatus& a, JobStatus& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline JobStatus* New() const PROTOBUF_FINAL { return New(NULL); }

  JobStatus* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const JobStatus& from);
  void MergeFrom(const JobStatus& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(JobStatus* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef JobStatus_State State;
  static const State STATE_UNSPECIFIED =
    JobStatus_State_STATE_UNSPECIFIED;
  static const State PENDING =
    JobStatus_State_PENDING;
  static const State SETUP_DONE =
    JobStatus_State_SETUP_DONE;
  static const State RUNNING =
    JobStatus_State_RUNNING;
  static const State CANCEL_PENDING =
    JobStatus_State_CANCEL_PENDING;
  static const State CANCEL_STARTED =
    JobStatus_State_CANCEL_STARTED;
  static const State CANCELLED =
    JobStatus_State_CANCELLED;
  static const State DONE =
    JobStatus_State_DONE;
  static const State ERROR =
    JobStatus_State_ERROR;
  static inline bool State_IsValid(int value) {
    return JobStatus_State_IsValid(value);
  }
  static const State State_MIN =
    JobStatus_State_State_MIN;
  static const State State_MAX =
    JobStatus_State_State_MAX;
  static const int State_ARRAYSIZE =
    JobStatus_State_State_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  State_descriptor() {
    return JobStatus_State_descriptor();
  }
  static inline const ::std::string& State_Name(State value) {
    return JobStatus_State_Name(value);
  }
  static inline bool State_Parse(const ::std::string& name,
      State* value) {
    return JobStatus_State_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // string details = 2;
  void clear_details();
  static const int kDetailsFieldNumber = 2;
  const ::std::string& details() const;
  void set_details(const ::std::string& value);
  #if LANG_CXX11
  void set_details(::std::string&& value);
  #endif
  void set_details(const char* value);
  void set_details(const char* value, size_t size);
  ::std::string* mutable_details();
  ::std::string* release_details();
  void set_allocated_details(::std::string* details);

  // .google.protobuf.Timestamp state_start_time = 6;
  bool has_state_start_time() const;
  void clear_state_start_time();
  static const int kStateStartTimeFieldNumber = 6;
  const ::google::protobuf::Timestamp& state_start_time() const;
  ::google::protobuf::Timestamp* release_state_start_time();
  ::google::protobuf::Timestamp* mutable_state_start_time();
  void set_allocated_state_start_time(::google::protobuf::Timestamp* state_start_time);

  // .google.cloud.dataproc.v1.JobStatus.State state = 1;
  void clear_state();
  static const int kStateFieldNumber = 1;
  ::google::cloud::dataproc::v1::JobStatus_State state() const;
  void set_state(::google::cloud::dataproc::v1::JobStatus_State value);

  // @@protoc_insertion_point(class_scope:google.cloud.dataproc.v1.JobStatus)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr details_;
  ::google::protobuf::Timestamp* state_start_time_;
  int state_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fcloud_2fdataproc_2fv1_2fjobs_2eproto::TableStruct;
  friend void ::protobuf_google_2fcloud_2fdataproc_2fv1_2fjobs_2eproto::InitDefaultsJobStatusImpl();
};
// -------------------------------------------------------------------

class JobReference : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.cloud.dataproc.v1.JobReference) */ {
 public:
  JobReference();
  virtual ~JobReference();

  JobReference(const JobReference& from);

  inline JobReference& operator=(const JobReference& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  JobReference(JobReference&& from) noexcept
    : JobReference() {
    *this = ::std::move(from);
  }

  inline JobReference& operator=(JobReference&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const JobReference& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const JobReference* internal_default_instance() {
    return reinterpret_cast<const JobReference*>(
               &_JobReference_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    20;

  void Swap(JobReference* other);
  friend void swap(JobReference& a, JobReference& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline JobReference* New() const PROTOBUF_FINAL { return New(NULL); }

  JobReference* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const JobReference& from);
  void MergeFrom(const JobReference& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(JobReference* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string project_id = 1;
  void clear_project_id();
  static const int kProjectIdFieldNumber = 1;
  const ::std::string& project_id() const;
  void set_project_id(const ::std::string& value);
  #if LANG_CXX11
  void set_project_id(::std::string&& value);
  #endif
  void set_project_id(const char* value);
  void set_project_id(const char* value, size_t size);
  ::std::string* mutable_project_id();
  ::std::string* release_project_id();
  void set_allocated_project_id(::std::string* project_id);

  // string job_id = 2;
  void clear_job_id();
  static const int kJobIdFieldNumber = 2;
  const ::std::string& job_id() const;
  void set_job_id(const ::std::string& value);
  #if LANG_CXX11
  void set_job_id(::std::string&& value);
  #endif
  void set_job_id(const char* value);
  void set_job_id(const char* value, size_t size);
  ::std::string* mutable_job_id();
  ::std::string* release_job_id();
  void set_allocated_job_id(::std::string* job_id);

  // @@protoc_insertion_point(class_scope:google.cloud.dataproc.v1.JobReference)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr project_id_;
  ::google::protobuf::internal::ArenaStringPtr job_id_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fcloud_2fdataproc_2fv1_2fjobs_2eproto::TableStruct;
  friend void ::protobuf_google_2fcloud_2fdataproc_2fv1_2fjobs_2eproto::InitDefaultsJobReferenceImpl();
};
// -------------------------------------------------------------------

class Job : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.cloud.dataproc.v1.Job) */ {
 public:
  Job();
  virtual ~Job();

  Job(const Job& from);

  inline Job& operator=(const Job& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Job(Job&& from) noexcept
    : Job() {
    *this = ::std::move(from);
  }

  inline Job& operator=(Job&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Job& default_instance();

  enum TypeJobCase {
    kHadoopJob = 3,
    kSparkJob = 4,
    kPysparkJob = 5,
    kHiveJob = 6,
    kPigJob = 7,
    kSparkSqlJob = 12,
    TYPE_JOB_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Job* internal_default_instance() {
    return reinterpret_cast<const Job*>(
               &_Job_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    21;

  void Swap(Job* other);
  friend void swap(Job& a, Job& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Job* New() const PROTOBUF_FINAL { return New(NULL); }

  Job* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Job& from);
  void MergeFrom(const Job& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Job* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .google.cloud.dataproc.v1.JobStatus status_history = 13;
  int status_history_size() const;
  void clear_status_history();
  static const int kStatusHistoryFieldNumber = 13;
  const ::google::cloud::dataproc::v1::JobStatus& status_history(int index) const;
  ::google::cloud::dataproc::v1::JobStatus* mutable_status_history(int index);
  ::google::cloud::dataproc::v1::JobStatus* add_status_history();
  ::google::protobuf::RepeatedPtrField< ::google::cloud::dataproc::v1::JobStatus >*
      mutable_status_history();
  const ::google::protobuf::RepeatedPtrField< ::google::cloud::dataproc::v1::JobStatus >&
      status_history() const;

  // string driver_control_files_uri = 15;
  void clear_driver_control_files_uri();
  static const int kDriverControlFilesUriFieldNumber = 15;
  const ::std::string& driver_control_files_uri() const;
  void set_driver_control_files_uri(const ::std::string& value);
  #if LANG_CXX11
  void set_driver_control_files_uri(::std::string&& value);
  #endif
  void set_driver_control_files_uri(const char* value);
  void set_driver_control_files_uri(const char* value, size_t size);
  ::std::string* mutable_driver_control_files_uri();
  ::std::string* release_driver_control_files_uri();
  void set_allocated_driver_control_files_uri(::std::string* driver_control_files_uri);

  // string driver_output_resource_uri = 17;
  void clear_driver_output_resource_uri();
  static const int kDriverOutputResourceUriFieldNumber = 17;
  const ::std::string& driver_output_resource_uri() const;
  void set_driver_output_resource_uri(const ::std::string& value);
  #if LANG_CXX11
  void set_driver_output_resource_uri(::std::string&& value);
  #endif
  void set_driver_output_resource_uri(const char* value);
  void set_driver_output_resource_uri(const char* value, size_t size);
  ::std::string* mutable_driver_output_resource_uri();
  ::std::string* release_driver_output_resource_uri();
  void set_allocated_driver_output_resource_uri(::std::string* driver_output_resource_uri);

  // .google.cloud.dataproc.v1.JobReference reference = 1;
  bool has_reference() const;
  void clear_reference();
  static const int kReferenceFieldNumber = 1;
  const ::google::cloud::dataproc::v1::JobReference& reference() const;
  ::google::cloud::dataproc::v1::JobReference* release_reference();
  ::google::cloud::dataproc::v1::JobReference* mutable_reference();
  void set_allocated_reference(::google::cloud::dataproc::v1::JobReference* reference);

  // .google.cloud.dataproc.v1.JobPlacement placement = 2;
  bool has_placement() const;
  void clear_placement();
  static const int kPlacementFieldNumber = 2;
  const ::google::cloud::dataproc::v1::JobPlacement& placement() const;
  ::google::cloud::dataproc::v1::JobPlacement* release_placement();
  ::google::cloud::dataproc::v1::JobPlacement* mutable_placement();
  void set_allocated_placement(::google::cloud::dataproc::v1::JobPlacement* placement);

  // .google.cloud.dataproc.v1.JobStatus status = 8;
  bool has_status() const;
  void clear_status();
  static const int kStatusFieldNumber = 8;
  const ::google::cloud::dataproc::v1::JobStatus& status() const;
  ::google::cloud::dataproc::v1::JobStatus* release_status();
  ::google::cloud::dataproc::v1::JobStatus* mutable_status();
  void set_allocated_status(::google::cloud::dataproc::v1::JobStatus* status);

  // .google.cloud.dataproc.v1.HadoopJob hadoop_job = 3;
  bool has_hadoop_job() const;
  void clear_hadoop_job();
  static const int kHadoopJobFieldNumber = 3;
  const ::google::cloud::dataproc::v1::HadoopJob& hadoop_job() const;
  ::google::cloud::dataproc::v1::HadoopJob* release_hadoop_job();
  ::google::cloud::dataproc::v1::HadoopJob* mutable_hadoop_job();
  void set_allocated_hadoop_job(::google::cloud::dataproc::v1::HadoopJob* hadoop_job);

  // .google.cloud.dataproc.v1.SparkJob spark_job = 4;
  bool has_spark_job() const;
  void clear_spark_job();
  static const int kSparkJobFieldNumber = 4;
  const ::google::cloud::dataproc::v1::SparkJob& spark_job() const;
  ::google::cloud::dataproc::v1::SparkJob* release_spark_job();
  ::google::cloud::dataproc::v1::SparkJob* mutable_spark_job();
  void set_allocated_spark_job(::google::cloud::dataproc::v1::SparkJob* spark_job);

  // .google.cloud.dataproc.v1.PySparkJob pyspark_job = 5;
  bool has_pyspark_job() const;
  void clear_pyspark_job();
  static const int kPysparkJobFieldNumber = 5;
  const ::google::cloud::dataproc::v1::PySparkJob& pyspark_job() const;
  ::google::cloud::dataproc::v1::PySparkJob* release_pyspark_job();
  ::google::cloud::dataproc::v1::PySparkJob* mutable_pyspark_job();
  void set_allocated_pyspark_job(::google::cloud::dataproc::v1::PySparkJob* pyspark_job);

  // .google.cloud.dataproc.v1.HiveJob hive_job = 6;
  bool has_hive_job() const;
  void clear_hive_job();
  static const int kHiveJobFieldNumber = 6;
  const ::google::cloud::dataproc::v1::HiveJob& hive_job() const;
  ::google::cloud::dataproc::v1::HiveJob* release_hive_job();
  ::google::cloud::dataproc::v1::HiveJob* mutable_hive_job();
  void set_allocated_hive_job(::google::cloud::dataproc::v1::HiveJob* hive_job);

  // .google.cloud.dataproc.v1.PigJob pig_job = 7;
  bool has_pig_job() const;
  void clear_pig_job();
  static const int kPigJobFieldNumber = 7;
  const ::google::cloud::dataproc::v1::PigJob& pig_job() const;
  ::google::cloud::dataproc::v1::PigJob* release_pig_job();
  ::google::cloud::dataproc::v1::PigJob* mutable_pig_job();
  void set_allocated_pig_job(::google::cloud::dataproc::v1::PigJob* pig_job);

  // .google.cloud.dataproc.v1.SparkSqlJob spark_sql_job = 12;
  bool has_spark_sql_job() const;
  void clear_spark_sql_job();
  static const int kSparkSqlJobFieldNumber = 12;
  const ::google::cloud::dataproc::v1::SparkSqlJob& spark_sql_job() const;
  ::google::cloud::dataproc::v1::SparkSqlJob* release_spark_sql_job();
  ::google::cloud::dataproc::v1::SparkSqlJob* mutable_spark_sql_job();
  void set_allocated_spark_sql_job(::google::cloud::dataproc::v1::SparkSqlJob* spark_sql_job);

  TypeJobCase type_job_case() const;
  // @@protoc_insertion_point(class_scope:google.cloud.dataproc.v1.Job)
 private:
  void set_has_hadoop_job();
  void set_has_spark_job();
  void set_has_pyspark_job();
  void set_has_hive_job();
  void set_has_pig_job();
  void set_has_spark_sql_job();

  inline bool has_type_job() const;
  void clear_type_job();
  inline void clear_has_type_job();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::google::cloud::dataproc::v1::JobStatus > status_history_;
  ::google::protobuf::internal::ArenaStringPtr driver_control_files_uri_;
  ::google::protobuf::internal::ArenaStringPtr driver_output_resource_uri_;
  ::google::cloud::dataproc::v1::JobReference* reference_;
  ::google::cloud::dataproc::v1::JobPlacement* placement_;
  ::google::cloud::dataproc::v1::JobStatus* status_;
  union TypeJobUnion {
    TypeJobUnion() {}
    ::google::cloud::dataproc::v1::HadoopJob* hadoop_job_;
    ::google::cloud::dataproc::v1::SparkJob* spark_job_;
    ::google::cloud::dataproc::v1::PySparkJob* pyspark_job_;
    ::google::cloud::dataproc::v1::HiveJob* hive_job_;
    ::google::cloud::dataproc::v1::PigJob* pig_job_;
    ::google::cloud::dataproc::v1::SparkSqlJob* spark_sql_job_;
  } type_job_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::protobuf_google_2fcloud_2fdataproc_2fv1_2fjobs_2eproto::TableStruct;
  friend void ::protobuf_google_2fcloud_2fdataproc_2fv1_2fjobs_2eproto::InitDefaultsJobImpl();
};
// -------------------------------------------------------------------

class SubmitJobRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.cloud.dataproc.v1.SubmitJobRequest) */ {
 public:
  SubmitJobRequest();
  virtual ~SubmitJobRequest();

  SubmitJobRequest(const SubmitJobRequest& from);

  inline SubmitJobRequest& operator=(const SubmitJobRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SubmitJobRequest(SubmitJobRequest&& from) noexcept
    : SubmitJobRequest() {
    *this = ::std::move(from);
  }

  inline SubmitJobRequest& operator=(SubmitJobRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SubmitJobRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SubmitJobRequest* internal_default_instance() {
    return reinterpret_cast<const SubmitJobRequest*>(
               &_SubmitJobRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    22;

  void Swap(SubmitJobRequest* other);
  friend void swap(SubmitJobRequest& a, SubmitJobRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SubmitJobRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  SubmitJobRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SubmitJobRequest& from);
  void MergeFrom(const SubmitJobRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SubmitJobRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string project_id = 1;
  void clear_project_id();
  static const int kProjectIdFieldNumber = 1;
  const ::std::string& project_id() const;
  void set_project_id(const ::std::string& value);
  #if LANG_CXX11
  void set_project_id(::std::string&& value);
  #endif
  void set_project_id(const char* value);
  void set_project_id(const char* value, size_t size);
  ::std::string* mutable_project_id();
  ::std::string* release_project_id();
  void set_allocated_project_id(::std::string* project_id);

  // string region = 3;
  void clear_region();
  static const int kRegionFieldNumber = 3;
  const ::std::string& region() const;
  void set_region(const ::std::string& value);
  #if LANG_CXX11
  void set_region(::std::string&& value);
  #endif
  void set_region(const char* value);
  void set_region(const char* value, size_t size);
  ::std::string* mutable_region();
  ::std::string* release_region();
  void set_allocated_region(::std::string* region);

  // .google.cloud.dataproc.v1.Job job = 2;
  bool has_job() const;
  void clear_job();
  static const int kJobFieldNumber = 2;
  const ::google::cloud::dataproc::v1::Job& job() const;
  ::google::cloud::dataproc::v1::Job* release_job();
  ::google::cloud::dataproc::v1::Job* mutable_job();
  void set_allocated_job(::google::cloud::dataproc::v1::Job* job);

  // @@protoc_insertion_point(class_scope:google.cloud.dataproc.v1.SubmitJobRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr project_id_;
  ::google::protobuf::internal::ArenaStringPtr region_;
  ::google::cloud::dataproc::v1::Job* job_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fcloud_2fdataproc_2fv1_2fjobs_2eproto::TableStruct;
  friend void ::protobuf_google_2fcloud_2fdataproc_2fv1_2fjobs_2eproto::InitDefaultsSubmitJobRequestImpl();
};
// -------------------------------------------------------------------

class GetJobRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.cloud.dataproc.v1.GetJobRequest) */ {
 public:
  GetJobRequest();
  virtual ~GetJobRequest();

  GetJobRequest(const GetJobRequest& from);

  inline GetJobRequest& operator=(const GetJobRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetJobRequest(GetJobRequest&& from) noexcept
    : GetJobRequest() {
    *this = ::std::move(from);
  }

  inline GetJobRequest& operator=(GetJobRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetJobRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetJobRequest* internal_default_instance() {
    return reinterpret_cast<const GetJobRequest*>(
               &_GetJobRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    23;

  void Swap(GetJobRequest* other);
  friend void swap(GetJobRequest& a, GetJobRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetJobRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  GetJobRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GetJobRequest& from);
  void MergeFrom(const GetJobRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GetJobRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string project_id = 1;
  void clear_project_id();
  static const int kProjectIdFieldNumber = 1;
  const ::std::string& project_id() const;
  void set_project_id(const ::std::string& value);
  #if LANG_CXX11
  void set_project_id(::std::string&& value);
  #endif
  void set_project_id(const char* value);
  void set_project_id(const char* value, size_t size);
  ::std::string* mutable_project_id();
  ::std::string* release_project_id();
  void set_allocated_project_id(::std::string* project_id);

  // string job_id = 2;
  void clear_job_id();
  static const int kJobIdFieldNumber = 2;
  const ::std::string& job_id() const;
  void set_job_id(const ::std::string& value);
  #if LANG_CXX11
  void set_job_id(::std::string&& value);
  #endif
  void set_job_id(const char* value);
  void set_job_id(const char* value, size_t size);
  ::std::string* mutable_job_id();
  ::std::string* release_job_id();
  void set_allocated_job_id(::std::string* job_id);

  // string region = 3;
  void clear_region();
  static const int kRegionFieldNumber = 3;
  const ::std::string& region() const;
  void set_region(const ::std::string& value);
  #if LANG_CXX11
  void set_region(::std::string&& value);
  #endif
  void set_region(const char* value);
  void set_region(const char* value, size_t size);
  ::std::string* mutable_region();
  ::std::string* release_region();
  void set_allocated_region(::std::string* region);

  // @@protoc_insertion_point(class_scope:google.cloud.dataproc.v1.GetJobRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr project_id_;
  ::google::protobuf::internal::ArenaStringPtr job_id_;
  ::google::protobuf::internal::ArenaStringPtr region_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fcloud_2fdataproc_2fv1_2fjobs_2eproto::TableStruct;
  friend void ::protobuf_google_2fcloud_2fdataproc_2fv1_2fjobs_2eproto::InitDefaultsGetJobRequestImpl();
};
// -------------------------------------------------------------------

class ListJobsRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.cloud.dataproc.v1.ListJobsRequest) */ {
 public:
  ListJobsRequest();
  virtual ~ListJobsRequest();

  ListJobsRequest(const ListJobsRequest& from);

  inline ListJobsRequest& operator=(const ListJobsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ListJobsRequest(ListJobsRequest&& from) noexcept
    : ListJobsRequest() {
    *this = ::std::move(from);
  }

  inline ListJobsRequest& operator=(ListJobsRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ListJobsRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListJobsRequest* internal_default_instance() {
    return reinterpret_cast<const ListJobsRequest*>(
               &_ListJobsRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    24;

  void Swap(ListJobsRequest* other);
  friend void swap(ListJobsRequest& a, ListJobsRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ListJobsRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  ListJobsRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ListJobsRequest& from);
  void MergeFrom(const ListJobsRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ListJobsRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef ListJobsRequest_JobStateMatcher JobStateMatcher;
  static const JobStateMatcher ALL =
    ListJobsRequest_JobStateMatcher_ALL;
  static const JobStateMatcher ACTIVE =
    ListJobsRequest_JobStateMatcher_ACTIVE;
  static const JobStateMatcher NON_ACTIVE =
    ListJobsRequest_JobStateMatcher_NON_ACTIVE;
  static inline bool JobStateMatcher_IsValid(int value) {
    return ListJobsRequest_JobStateMatcher_IsValid(value);
  }
  static const JobStateMatcher JobStateMatcher_MIN =
    ListJobsRequest_JobStateMatcher_JobStateMatcher_MIN;
  static const JobStateMatcher JobStateMatcher_MAX =
    ListJobsRequest_JobStateMatcher_JobStateMatcher_MAX;
  static const int JobStateMatcher_ARRAYSIZE =
    ListJobsRequest_JobStateMatcher_JobStateMatcher_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  JobStateMatcher_descriptor() {
    return ListJobsRequest_JobStateMatcher_descriptor();
  }
  static inline const ::std::string& JobStateMatcher_Name(JobStateMatcher value) {
    return ListJobsRequest_JobStateMatcher_Name(value);
  }
  static inline bool JobStateMatcher_Parse(const ::std::string& name,
      JobStateMatcher* value) {
    return ListJobsRequest_JobStateMatcher_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // string project_id = 1;
  void clear_project_id();
  static const int kProjectIdFieldNumber = 1;
  const ::std::string& project_id() const;
  void set_project_id(const ::std::string& value);
  #if LANG_CXX11
  void set_project_id(::std::string&& value);
  #endif
  void set_project_id(const char* value);
  void set_project_id(const char* value, size_t size);
  ::std::string* mutable_project_id();
  ::std::string* release_project_id();
  void set_allocated_project_id(::std::string* project_id);

  // string page_token = 3;
  void clear_page_token();
  static const int kPageTokenFieldNumber = 3;
  const ::std::string& page_token() const;
  void set_page_token(const ::std::string& value);
  #if LANG_CXX11
  void set_page_token(::std::string&& value);
  #endif
  void set_page_token(const char* value);
  void set_page_token(const char* value, size_t size);
  ::std::string* mutable_page_token();
  ::std::string* release_page_token();
  void set_allocated_page_token(::std::string* page_token);

  // string cluster_name = 4;
  void clear_cluster_name();
  static const int kClusterNameFieldNumber = 4;
  const ::std::string& cluster_name() const;
  void set_cluster_name(const ::std::string& value);
  #if LANG_CXX11
  void set_cluster_name(::std::string&& value);
  #endif
  void set_cluster_name(const char* value);
  void set_cluster_name(const char* value, size_t size);
  ::std::string* mutable_cluster_name();
  ::std::string* release_cluster_name();
  void set_allocated_cluster_name(::std::string* cluster_name);

  // string region = 6;
  void clear_region();
  static const int kRegionFieldNumber = 6;
  const ::std::string& region() const;
  void set_region(const ::std::string& value);
  #if LANG_CXX11
  void set_region(::std::string&& value);
  #endif
  void set_region(const char* value);
  void set_region(const char* value, size_t size);
  ::std::string* mutable_region();
  ::std::string* release_region();
  void set_allocated_region(::std::string* region);

  // int32 page_size = 2;
  void clear_page_size();
  static const int kPageSizeFieldNumber = 2;
  ::google::protobuf::int32 page_size() const;
  void set_page_size(::google::protobuf::int32 value);

  // .google.cloud.dataproc.v1.ListJobsRequest.JobStateMatcher job_state_matcher = 5;
  void clear_job_state_matcher();
  static const int kJobStateMatcherFieldNumber = 5;
  ::google::cloud::dataproc::v1::ListJobsRequest_JobStateMatcher job_state_matcher() const;
  void set_job_state_matcher(::google::cloud::dataproc::v1::ListJobsRequest_JobStateMatcher value);

  // @@protoc_insertion_point(class_scope:google.cloud.dataproc.v1.ListJobsRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr project_id_;
  ::google::protobuf::internal::ArenaStringPtr page_token_;
  ::google::protobuf::internal::ArenaStringPtr cluster_name_;
  ::google::protobuf::internal::ArenaStringPtr region_;
  ::google::protobuf::int32 page_size_;
  int job_state_matcher_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fcloud_2fdataproc_2fv1_2fjobs_2eproto::TableStruct;
  friend void ::protobuf_google_2fcloud_2fdataproc_2fv1_2fjobs_2eproto::InitDefaultsListJobsRequestImpl();
};
// -------------------------------------------------------------------

class ListJobsResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.cloud.dataproc.v1.ListJobsResponse) */ {
 public:
  ListJobsResponse();
  virtual ~ListJobsResponse();

  ListJobsResponse(const ListJobsResponse& from);

  inline ListJobsResponse& operator=(const ListJobsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ListJobsResponse(ListJobsResponse&& from) noexcept
    : ListJobsResponse() {
    *this = ::std::move(from);
  }

  inline ListJobsResponse& operator=(ListJobsResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ListJobsResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListJobsResponse* internal_default_instance() {
    return reinterpret_cast<const ListJobsResponse*>(
               &_ListJobsResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    25;

  void Swap(ListJobsResponse* other);
  friend void swap(ListJobsResponse& a, ListJobsResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ListJobsResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  ListJobsResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ListJobsResponse& from);
  void MergeFrom(const ListJobsResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ListJobsResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .google.cloud.dataproc.v1.Job jobs = 1;
  int jobs_size() const;
  void clear_jobs();
  static const int kJobsFieldNumber = 1;
  const ::google::cloud::dataproc::v1::Job& jobs(int index) const;
  ::google::cloud::dataproc::v1::Job* mutable_jobs(int index);
  ::google::cloud::dataproc::v1::Job* add_jobs();
  ::google::protobuf::RepeatedPtrField< ::google::cloud::dataproc::v1::Job >*
      mutable_jobs();
  const ::google::protobuf::RepeatedPtrField< ::google::cloud::dataproc::v1::Job >&
      jobs() const;

  // string next_page_token = 2;
  void clear_next_page_token();
  static const int kNextPageTokenFieldNumber = 2;
  const ::std::string& next_page_token() const;
  void set_next_page_token(const ::std::string& value);
  #if LANG_CXX11
  void set_next_page_token(::std::string&& value);
  #endif
  void set_next_page_token(const char* value);
  void set_next_page_token(const char* value, size_t size);
  ::std::string* mutable_next_page_token();
  ::std::string* release_next_page_token();
  void set_allocated_next_page_token(::std::string* next_page_token);

  // @@protoc_insertion_point(class_scope:google.cloud.dataproc.v1.ListJobsResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::google::cloud::dataproc::v1::Job > jobs_;
  ::google::protobuf::internal::ArenaStringPtr next_page_token_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fcloud_2fdataproc_2fv1_2fjobs_2eproto::TableStruct;
  friend void ::protobuf_google_2fcloud_2fdataproc_2fv1_2fjobs_2eproto::InitDefaultsListJobsResponseImpl();
};
// -------------------------------------------------------------------

class CancelJobRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.cloud.dataproc.v1.CancelJobRequest) */ {
 public:
  CancelJobRequest();
  virtual ~CancelJobRequest();

  CancelJobRequest(const CancelJobRequest& from);

  inline CancelJobRequest& operator=(const CancelJobRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CancelJobRequest(CancelJobRequest&& from) noexcept
    : CancelJobRequest() {
    *this = ::std::move(from);
  }

  inline CancelJobRequest& operator=(CancelJobRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CancelJobRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CancelJobRequest* internal_default_instance() {
    return reinterpret_cast<const CancelJobRequest*>(
               &_CancelJobRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    26;

  void Swap(CancelJobRequest* other);
  friend void swap(CancelJobRequest& a, CancelJobRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CancelJobRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  CancelJobRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CancelJobRequest& from);
  void MergeFrom(const CancelJobRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CancelJobRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string project_id = 1;
  void clear_project_id();
  static const int kProjectIdFieldNumber = 1;
  const ::std::string& project_id() const;
  void set_project_id(const ::std::string& value);
  #if LANG_CXX11
  void set_project_id(::std::string&& value);
  #endif
  void set_project_id(const char* value);
  void set_project_id(const char* value, size_t size);
  ::std::string* mutable_project_id();
  ::std::string* release_project_id();
  void set_allocated_project_id(::std::string* project_id);

  // string job_id = 2;
  void clear_job_id();
  static const int kJobIdFieldNumber = 2;
  const ::std::string& job_id() const;
  void set_job_id(const ::std::string& value);
  #if LANG_CXX11
  void set_job_id(::std::string&& value);
  #endif
  void set_job_id(const char* value);
  void set_job_id(const char* value, size_t size);
  ::std::string* mutable_job_id();
  ::std::string* release_job_id();
  void set_allocated_job_id(::std::string* job_id);

  // string region = 3;
  void clear_region();
  static const int kRegionFieldNumber = 3;
  const ::std::string& region() const;
  void set_region(const ::std::string& value);
  #if LANG_CXX11
  void set_region(::std::string&& value);
  #endif
  void set_region(const char* value);
  void set_region(const char* value, size_t size);
  ::std::string* mutable_region();
  ::std::string* release_region();
  void set_allocated_region(::std::string* region);

  // @@protoc_insertion_point(class_scope:google.cloud.dataproc.v1.CancelJobRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr project_id_;
  ::google::protobuf::internal::ArenaStringPtr job_id_;
  ::google::protobuf::internal::ArenaStringPtr region_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fcloud_2fdataproc_2fv1_2fjobs_2eproto::TableStruct;
  friend void ::protobuf_google_2fcloud_2fdataproc_2fv1_2fjobs_2eproto::InitDefaultsCancelJobRequestImpl();
};
// -------------------------------------------------------------------

class DeleteJobRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.cloud.dataproc.v1.DeleteJobRequest) */ {
 public:
  DeleteJobRequest();
  virtual ~DeleteJobRequest();

  DeleteJobRequest(const DeleteJobRequest& from);

  inline DeleteJobRequest& operator=(const DeleteJobRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DeleteJobRequest(DeleteJobRequest&& from) noexcept
    : DeleteJobRequest() {
    *this = ::std::move(from);
  }

  inline DeleteJobRequest& operator=(DeleteJobRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DeleteJobRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeleteJobRequest* internal_default_instance() {
    return reinterpret_cast<const DeleteJobRequest*>(
               &_DeleteJobRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    27;

  void Swap(DeleteJobRequest* other);
  friend void swap(DeleteJobRequest& a, DeleteJobRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DeleteJobRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  DeleteJobRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DeleteJobRequest& from);
  void MergeFrom(const DeleteJobRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DeleteJobRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string project_id = 1;
  void clear_project_id();
  static const int kProjectIdFieldNumber = 1;
  const ::std::string& project_id() const;
  void set_project_id(const ::std::string& value);
  #if LANG_CXX11
  void set_project_id(::std::string&& value);
  #endif
  void set_project_id(const char* value);
  void set_project_id(const char* value, size_t size);
  ::std::string* mutable_project_id();
  ::std::string* release_project_id();
  void set_allocated_project_id(::std::string* project_id);

  // string job_id = 2;
  void clear_job_id();
  static const int kJobIdFieldNumber = 2;
  const ::std::string& job_id() const;
  void set_job_id(const ::std::string& value);
  #if LANG_CXX11
  void set_job_id(::std::string&& value);
  #endif
  void set_job_id(const char* value);
  void set_job_id(const char* value, size_t size);
  ::std::string* mutable_job_id();
  ::std::string* release_job_id();
  void set_allocated_job_id(::std::string* job_id);

  // string region = 3;
  void clear_region();
  static const int kRegionFieldNumber = 3;
  const ::std::string& region() const;
  void set_region(const ::std::string& value);
  #if LANG_CXX11
  void set_region(::std::string&& value);
  #endif
  void set_region(const char* value);
  void set_region(const char* value, size_t size);
  ::std::string* mutable_region();
  ::std::string* release_region();
  void set_allocated_region(::std::string* region);

  // @@protoc_insertion_point(class_scope:google.cloud.dataproc.v1.DeleteJobRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr project_id_;
  ::google::protobuf::internal::ArenaStringPtr job_id_;
  ::google::protobuf::internal::ArenaStringPtr region_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fcloud_2fdataproc_2fv1_2fjobs_2eproto::TableStruct;
  friend void ::protobuf_google_2fcloud_2fdataproc_2fv1_2fjobs_2eproto::InitDefaultsDeleteJobRequestImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// LoggingConfig

// map<string, .google.cloud.dataproc.v1.LoggingConfig.Level> driver_log_levels = 2;
inline int LoggingConfig::driver_log_levels_size() const {
  return driver_log_levels_.size();
}
inline void LoggingConfig::clear_driver_log_levels() {
  driver_log_levels_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::google::cloud::dataproc::v1::LoggingConfig_Level >&
LoggingConfig::driver_log_levels() const {
  // @@protoc_insertion_point(field_map:google.cloud.dataproc.v1.LoggingConfig.driver_log_levels)
  return driver_log_levels_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::google::cloud::dataproc::v1::LoggingConfig_Level >*
LoggingConfig::mutable_driver_log_levels() {
  // @@protoc_insertion_point(field_mutable_map:google.cloud.dataproc.v1.LoggingConfig.driver_log_levels)
  return driver_log_levels_.MutableMap();
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// HadoopJob

// string main_jar_file_uri = 1;
inline bool HadoopJob::has_main_jar_file_uri() const {
  return driver_case() == kMainJarFileUri;
}
inline void HadoopJob::set_has_main_jar_file_uri() {
  _oneof_case_[0] = kMainJarFileUri;
}
inline void HadoopJob::clear_main_jar_file_uri() {
  if (has_main_jar_file_uri()) {
    driver_.main_jar_file_uri_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_driver();
  }
}
inline const ::std::string& HadoopJob::main_jar_file_uri() const {
  // @@protoc_insertion_point(field_get:google.cloud.dataproc.v1.HadoopJob.main_jar_file_uri)
  if (has_main_jar_file_uri()) {
    return driver_.main_jar_file_uri_.GetNoArena();
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
inline void HadoopJob::set_main_jar_file_uri(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:google.cloud.dataproc.v1.HadoopJob.main_jar_file_uri)
  if (!has_main_jar_file_uri()) {
    clear_driver();
    set_has_main_jar_file_uri();
    driver_.main_jar_file_uri_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  driver_.main_jar_file_uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.cloud.dataproc.v1.HadoopJob.main_jar_file_uri)
}
#if LANG_CXX11
inline void HadoopJob::set_main_jar_file_uri(::std::string&& value) {
  // @@protoc_insertion_point(field_set:google.cloud.dataproc.v1.HadoopJob.main_jar_file_uri)
  if (!has_main_jar_file_uri()) {
    clear_driver();
    set_has_main_jar_file_uri();
    driver_.main_jar_file_uri_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  driver_.main_jar_file_uri_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.dataproc.v1.HadoopJob.main_jar_file_uri)
}
#endif
inline void HadoopJob::set_main_jar_file_uri(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  if (!has_main_jar_file_uri()) {
    clear_driver();
    set_has_main_jar_file_uri();
    driver_.main_jar_file_uri_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  driver_.main_jar_file_uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.cloud.dataproc.v1.HadoopJob.main_jar_file_uri)
}
inline void HadoopJob::set_main_jar_file_uri(const char* value, size_t size) {
  if (!has_main_jar_file_uri()) {
    clear_driver();
    set_has_main_jar_file_uri();
    driver_.main_jar_file_uri_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  driver_.main_jar_file_uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.cloud.dataproc.v1.HadoopJob.main_jar_file_uri)
}
inline ::std::string* HadoopJob::mutable_main_jar_file_uri() {
  if (!has_main_jar_file_uri()) {
    clear_driver();
    set_has_main_jar_file_uri();
    driver_.main_jar_file_uri_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:google.cloud.dataproc.v1.HadoopJob.main_jar_file_uri)
  return driver_.main_jar_file_uri_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* HadoopJob::release_main_jar_file_uri() {
  // @@protoc_insertion_point(field_release:google.cloud.dataproc.v1.HadoopJob.main_jar_file_uri)
  if (has_main_jar_file_uri()) {
    clear_has_driver();
    return driver_.main_jar_file_uri_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
inline void HadoopJob::set_allocated_main_jar_file_uri(::std::string* main_jar_file_uri) {
  if (!has_main_jar_file_uri()) {
    driver_.main_jar_file_uri_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_driver();
  if (main_jar_file_uri != NULL) {
    set_has_main_jar_file_uri();
    driver_.main_jar_file_uri_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        main_jar_file_uri);
  }
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dataproc.v1.HadoopJob.main_jar_file_uri)
}

// string main_class = 2;
inline bool HadoopJob::has_main_class() const {
  return driver_case() == kMainClass;
}
inline void HadoopJob::set_has_main_class() {
  _oneof_case_[0] = kMainClass;
}
inline void HadoopJob::clear_main_class() {
  if (has_main_class()) {
    driver_.main_class_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_driver();
  }
}
inline const ::std::string& HadoopJob::main_class() const {
  // @@protoc_insertion_point(field_get:google.cloud.dataproc.v1.HadoopJob.main_class)
  if (has_main_class()) {
    return driver_.main_class_.GetNoArena();
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
inline void HadoopJob::set_main_class(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:google.cloud.dataproc.v1.HadoopJob.main_class)
  if (!has_main_class()) {
    clear_driver();
    set_has_main_class();
    driver_.main_class_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  driver_.main_class_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.cloud.dataproc.v1.HadoopJob.main_class)
}
#if LANG_CXX11
inline void HadoopJob::set_main_class(::std::string&& value) {
  // @@protoc_insertion_point(field_set:google.cloud.dataproc.v1.HadoopJob.main_class)
  if (!has_main_class()) {
    clear_driver();
    set_has_main_class();
    driver_.main_class_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  driver_.main_class_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.dataproc.v1.HadoopJob.main_class)
}
#endif
inline void HadoopJob::set_main_class(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  if (!has_main_class()) {
    clear_driver();
    set_has_main_class();
    driver_.main_class_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  driver_.main_class_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.cloud.dataproc.v1.HadoopJob.main_class)
}
inline void HadoopJob::set_main_class(const char* value, size_t size) {
  if (!has_main_class()) {
    clear_driver();
    set_has_main_class();
    driver_.main_class_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  driver_.main_class_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.cloud.dataproc.v1.HadoopJob.main_class)
}
inline ::std::string* HadoopJob::mutable_main_class() {
  if (!has_main_class()) {
    clear_driver();
    set_has_main_class();
    driver_.main_class_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:google.cloud.dataproc.v1.HadoopJob.main_class)
  return driver_.main_class_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* HadoopJob::release_main_class() {
  // @@protoc_insertion_point(field_release:google.cloud.dataproc.v1.HadoopJob.main_class)
  if (has_main_class()) {
    clear_has_driver();
    return driver_.main_class_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
inline void HadoopJob::set_allocated_main_class(::std::string* main_class) {
  if (!has_main_class()) {
    driver_.main_class_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_driver();
  if (main_class != NULL) {
    set_has_main_class();
    driver_.main_class_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        main_class);
  }
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dataproc.v1.HadoopJob.main_class)
}

// repeated string args = 3;
inline int HadoopJob::args_size() const {
  return args_.size();
}
inline void HadoopJob::clear_args() {
  args_.Clear();
}
inline const ::std::string& HadoopJob::args(int index) const {
  // @@protoc_insertion_point(field_get:google.cloud.dataproc.v1.HadoopJob.args)
  return args_.Get(index);
}
inline ::std::string* HadoopJob::mutable_args(int index) {
  // @@protoc_insertion_point(field_mutable:google.cloud.dataproc.v1.HadoopJob.args)
  return args_.Mutable(index);
}
inline void HadoopJob::set_args(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:google.cloud.dataproc.v1.HadoopJob.args)
  args_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void HadoopJob::set_args(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:google.cloud.dataproc.v1.HadoopJob.args)
  args_.Mutable(index)->assign(std::move(value));
}
#endif
inline void HadoopJob::set_args(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  args_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:google.cloud.dataproc.v1.HadoopJob.args)
}
inline void HadoopJob::set_args(int index, const char* value, size_t size) {
  args_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:google.cloud.dataproc.v1.HadoopJob.args)
}
inline ::std::string* HadoopJob::add_args() {
  // @@protoc_insertion_point(field_add_mutable:google.cloud.dataproc.v1.HadoopJob.args)
  return args_.Add();
}
inline void HadoopJob::add_args(const ::std::string& value) {
  args_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:google.cloud.dataproc.v1.HadoopJob.args)
}
#if LANG_CXX11
inline void HadoopJob::add_args(::std::string&& value) {
  args_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:google.cloud.dataproc.v1.HadoopJob.args)
}
#endif
inline void HadoopJob::add_args(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  args_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:google.cloud.dataproc.v1.HadoopJob.args)
}
inline void HadoopJob::add_args(const char* value, size_t size) {
  args_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:google.cloud.dataproc.v1.HadoopJob.args)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
HadoopJob::args() const {
  // @@protoc_insertion_point(field_list:google.cloud.dataproc.v1.HadoopJob.args)
  return args_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
HadoopJob::mutable_args() {
  // @@protoc_insertion_point(field_mutable_list:google.cloud.dataproc.v1.HadoopJob.args)
  return &args_;
}

// repeated string jar_file_uris = 4;
inline int HadoopJob::jar_file_uris_size() const {
  return jar_file_uris_.size();
}
inline void HadoopJob::clear_jar_file_uris() {
  jar_file_uris_.Clear();
}
inline const ::std::string& HadoopJob::jar_file_uris(int index) const {
  // @@protoc_insertion_point(field_get:google.cloud.dataproc.v1.HadoopJob.jar_file_uris)
  return jar_file_uris_.Get(index);
}
inline ::std::string* HadoopJob::mutable_jar_file_uris(int index) {
  // @@protoc_insertion_point(field_mutable:google.cloud.dataproc.v1.HadoopJob.jar_file_uris)
  return jar_file_uris_.Mutable(index);
}
inline void HadoopJob::set_jar_file_uris(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:google.cloud.dataproc.v1.HadoopJob.jar_file_uris)
  jar_file_uris_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void HadoopJob::set_jar_file_uris(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:google.cloud.dataproc.v1.HadoopJob.jar_file_uris)
  jar_file_uris_.Mutable(index)->assign(std::move(value));
}
#endif
inline void HadoopJob::set_jar_file_uris(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  jar_file_uris_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:google.cloud.dataproc.v1.HadoopJob.jar_file_uris)
}
inline void HadoopJob::set_jar_file_uris(int index, const char* value, size_t size) {
  jar_file_uris_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:google.cloud.dataproc.v1.HadoopJob.jar_file_uris)
}
inline ::std::string* HadoopJob::add_jar_file_uris() {
  // @@protoc_insertion_point(field_add_mutable:google.cloud.dataproc.v1.HadoopJob.jar_file_uris)
  return jar_file_uris_.Add();
}
inline void HadoopJob::add_jar_file_uris(const ::std::string& value) {
  jar_file_uris_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:google.cloud.dataproc.v1.HadoopJob.jar_file_uris)
}
#if LANG_CXX11
inline void HadoopJob::add_jar_file_uris(::std::string&& value) {
  jar_file_uris_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:google.cloud.dataproc.v1.HadoopJob.jar_file_uris)
}
#endif
inline void HadoopJob::add_jar_file_uris(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  jar_file_uris_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:google.cloud.dataproc.v1.HadoopJob.jar_file_uris)
}
inline void HadoopJob::add_jar_file_uris(const char* value, size_t size) {
  jar_file_uris_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:google.cloud.dataproc.v1.HadoopJob.jar_file_uris)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
HadoopJob::jar_file_uris() const {
  // @@protoc_insertion_point(field_list:google.cloud.dataproc.v1.HadoopJob.jar_file_uris)
  return jar_file_uris_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
HadoopJob::mutable_jar_file_uris() {
  // @@protoc_insertion_point(field_mutable_list:google.cloud.dataproc.v1.HadoopJob.jar_file_uris)
  return &jar_file_uris_;
}

// repeated string file_uris = 5;
inline int HadoopJob::file_uris_size() const {
  return file_uris_.size();
}
inline void HadoopJob::clear_file_uris() {
  file_uris_.Clear();
}
inline const ::std::string& HadoopJob::file_uris(int index) const {
  // @@protoc_insertion_point(field_get:google.cloud.dataproc.v1.HadoopJob.file_uris)
  return file_uris_.Get(index);
}
inline ::std::string* HadoopJob::mutable_file_uris(int index) {
  // @@protoc_insertion_point(field_mutable:google.cloud.dataproc.v1.HadoopJob.file_uris)
  return file_uris_.Mutable(index);
}
inline void HadoopJob::set_file_uris(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:google.cloud.dataproc.v1.HadoopJob.file_uris)
  file_uris_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void HadoopJob::set_file_uris(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:google.cloud.dataproc.v1.HadoopJob.file_uris)
  file_uris_.Mutable(index)->assign(std::move(value));
}
#endif
inline void HadoopJob::set_file_uris(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  file_uris_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:google.cloud.dataproc.v1.HadoopJob.file_uris)
}
inline void HadoopJob::set_file_uris(int index, const char* value, size_t size) {
  file_uris_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:google.cloud.dataproc.v1.HadoopJob.file_uris)
}
inline ::std::string* HadoopJob::add_file_uris() {
  // @@protoc_insertion_point(field_add_mutable:google.cloud.dataproc.v1.HadoopJob.file_uris)
  return file_uris_.Add();
}
inline void HadoopJob::add_file_uris(const ::std::string& value) {
  file_uris_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:google.cloud.dataproc.v1.HadoopJob.file_uris)
}
#if LANG_CXX11
inline void HadoopJob::add_file_uris(::std::string&& value) {
  file_uris_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:google.cloud.dataproc.v1.HadoopJob.file_uris)
}
#endif
inline void HadoopJob::add_file_uris(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  file_uris_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:google.cloud.dataproc.v1.HadoopJob.file_uris)
}
inline void HadoopJob::add_file_uris(const char* value, size_t size) {
  file_uris_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:google.cloud.dataproc.v1.HadoopJob.file_uris)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
HadoopJob::file_uris() const {
  // @@protoc_insertion_point(field_list:google.cloud.dataproc.v1.HadoopJob.file_uris)
  return file_uris_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
HadoopJob::mutable_file_uris() {
  // @@protoc_insertion_point(field_mutable_list:google.cloud.dataproc.v1.HadoopJob.file_uris)
  return &file_uris_;
}

// repeated string archive_uris = 6;
inline int HadoopJob::archive_uris_size() const {
  return archive_uris_.size();
}
inline void HadoopJob::clear_archive_uris() {
  archive_uris_.Clear();
}
inline const ::std::string& HadoopJob::archive_uris(int index) const {
  // @@protoc_insertion_point(field_get:google.cloud.dataproc.v1.HadoopJob.archive_uris)
  return archive_uris_.Get(index);
}
inline ::std::string* HadoopJob::mutable_archive_uris(int index) {
  // @@protoc_insertion_point(field_mutable:google.cloud.dataproc.v1.HadoopJob.archive_uris)
  return archive_uris_.Mutable(index);
}
inline void HadoopJob::set_archive_uris(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:google.cloud.dataproc.v1.HadoopJob.archive_uris)
  archive_uris_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void HadoopJob::set_archive_uris(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:google.cloud.dataproc.v1.HadoopJob.archive_uris)
  archive_uris_.Mutable(index)->assign(std::move(value));
}
#endif
inline void HadoopJob::set_archive_uris(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  archive_uris_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:google.cloud.dataproc.v1.HadoopJob.archive_uris)
}
inline void HadoopJob::set_archive_uris(int index, const char* value, size_t size) {
  archive_uris_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:google.cloud.dataproc.v1.HadoopJob.archive_uris)
}
inline ::std::string* HadoopJob::add_archive_uris() {
  // @@protoc_insertion_point(field_add_mutable:google.cloud.dataproc.v1.HadoopJob.archive_uris)
  return archive_uris_.Add();
}
inline void HadoopJob::add_archive_uris(const ::std::string& value) {
  archive_uris_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:google.cloud.dataproc.v1.HadoopJob.archive_uris)
}
#if LANG_CXX11
inline void HadoopJob::add_archive_uris(::std::string&& value) {
  archive_uris_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:google.cloud.dataproc.v1.HadoopJob.archive_uris)
}
#endif
inline void HadoopJob::add_archive_uris(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  archive_uris_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:google.cloud.dataproc.v1.HadoopJob.archive_uris)
}
inline void HadoopJob::add_archive_uris(const char* value, size_t size) {
  archive_uris_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:google.cloud.dataproc.v1.HadoopJob.archive_uris)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
HadoopJob::archive_uris() const {
  // @@protoc_insertion_point(field_list:google.cloud.dataproc.v1.HadoopJob.archive_uris)
  return archive_uris_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
HadoopJob::mutable_archive_uris() {
  // @@protoc_insertion_point(field_mutable_list:google.cloud.dataproc.v1.HadoopJob.archive_uris)
  return &archive_uris_;
}

// map<string, string> properties = 7;
inline int HadoopJob::properties_size() const {
  return properties_.size();
}
inline void HadoopJob::clear_properties() {
  properties_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::std::string >&
HadoopJob::properties() const {
  // @@protoc_insertion_point(field_map:google.cloud.dataproc.v1.HadoopJob.properties)
  return properties_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::std::string >*
HadoopJob::mutable_properties() {
  // @@protoc_insertion_point(field_mutable_map:google.cloud.dataproc.v1.HadoopJob.properties)
  return properties_.MutableMap();
}

// .google.cloud.dataproc.v1.LoggingConfig logging_config = 8;
inline bool HadoopJob::has_logging_config() const {
  return this != internal_default_instance() && logging_config_ != NULL;
}
inline void HadoopJob::clear_logging_config() {
  if (GetArenaNoVirtual() == NULL && logging_config_ != NULL) {
    delete logging_config_;
  }
  logging_config_ = NULL;
}
inline const ::google::cloud::dataproc::v1::LoggingConfig& HadoopJob::logging_config() const {
  const ::google::cloud::dataproc::v1::LoggingConfig* p = logging_config_;
  // @@protoc_insertion_point(field_get:google.cloud.dataproc.v1.HadoopJob.logging_config)
  return p != NULL ? *p : *reinterpret_cast<const ::google::cloud::dataproc::v1::LoggingConfig*>(
      &::google::cloud::dataproc::v1::_LoggingConfig_default_instance_);
}
inline ::google::cloud::dataproc::v1::LoggingConfig* HadoopJob::release_logging_config() {
  // @@protoc_insertion_point(field_release:google.cloud.dataproc.v1.HadoopJob.logging_config)
  
  ::google::cloud::dataproc::v1::LoggingConfig* temp = logging_config_;
  logging_config_ = NULL;
  return temp;
}
inline ::google::cloud::dataproc::v1::LoggingConfig* HadoopJob::mutable_logging_config() {
  
  if (logging_config_ == NULL) {
    logging_config_ = new ::google::cloud::dataproc::v1::LoggingConfig;
  }
  // @@protoc_insertion_point(field_mutable:google.cloud.dataproc.v1.HadoopJob.logging_config)
  return logging_config_;
}
inline void HadoopJob::set_allocated_logging_config(::google::cloud::dataproc::v1::LoggingConfig* logging_config) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete logging_config_;
  }
  if (logging_config) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      logging_config = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, logging_config, submessage_arena);
    }
    
  } else {
    
  }
  logging_config_ = logging_config;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dataproc.v1.HadoopJob.logging_config)
}

inline bool HadoopJob::has_driver() const {
  return driver_case() != DRIVER_NOT_SET;
}
inline void HadoopJob::clear_has_driver() {
  _oneof_case_[0] = DRIVER_NOT_SET;
}
inline HadoopJob::DriverCase HadoopJob::driver_case() const {
  return HadoopJob::DriverCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// SparkJob

// string main_jar_file_uri = 1;
inline bool SparkJob::has_main_jar_file_uri() const {
  return driver_case() == kMainJarFileUri;
}
inline void SparkJob::set_has_main_jar_file_uri() {
  _oneof_case_[0] = kMainJarFileUri;
}
inline void SparkJob::clear_main_jar_file_uri() {
  if (has_main_jar_file_uri()) {
    driver_.main_jar_file_uri_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_driver();
  }
}
inline const ::std::string& SparkJob::main_jar_file_uri() const {
  // @@protoc_insertion_point(field_get:google.cloud.dataproc.v1.SparkJob.main_jar_file_uri)
  if (has_main_jar_file_uri()) {
    return driver_.main_jar_file_uri_.GetNoArena();
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
inline void SparkJob::set_main_jar_file_uri(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:google.cloud.dataproc.v1.SparkJob.main_jar_file_uri)
  if (!has_main_jar_file_uri()) {
    clear_driver();
    set_has_main_jar_file_uri();
    driver_.main_jar_file_uri_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  driver_.main_jar_file_uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.cloud.dataproc.v1.SparkJob.main_jar_file_uri)
}
#if LANG_CXX11
inline void SparkJob::set_main_jar_file_uri(::std::string&& value) {
  // @@protoc_insertion_point(field_set:google.cloud.dataproc.v1.SparkJob.main_jar_file_uri)
  if (!has_main_jar_file_uri()) {
    clear_driver();
    set_has_main_jar_file_uri();
    driver_.main_jar_file_uri_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  driver_.main_jar_file_uri_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.dataproc.v1.SparkJob.main_jar_file_uri)
}
#endif
inline void SparkJob::set_main_jar_file_uri(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  if (!has_main_jar_file_uri()) {
    clear_driver();
    set_has_main_jar_file_uri();
    driver_.main_jar_file_uri_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  driver_.main_jar_file_uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.cloud.dataproc.v1.SparkJob.main_jar_file_uri)
}
inline void SparkJob::set_main_jar_file_uri(const char* value, size_t size) {
  if (!has_main_jar_file_uri()) {
    clear_driver();
    set_has_main_jar_file_uri();
    driver_.main_jar_file_uri_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  driver_.main_jar_file_uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.cloud.dataproc.v1.SparkJob.main_jar_file_uri)
}
inline ::std::string* SparkJob::mutable_main_jar_file_uri() {
  if (!has_main_jar_file_uri()) {
    clear_driver();
    set_has_main_jar_file_uri();
    driver_.main_jar_file_uri_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:google.cloud.dataproc.v1.SparkJob.main_jar_file_uri)
  return driver_.main_jar_file_uri_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SparkJob::release_main_jar_file_uri() {
  // @@protoc_insertion_point(field_release:google.cloud.dataproc.v1.SparkJob.main_jar_file_uri)
  if (has_main_jar_file_uri()) {
    clear_has_driver();
    return driver_.main_jar_file_uri_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
inline void SparkJob::set_allocated_main_jar_file_uri(::std::string* main_jar_file_uri) {
  if (!has_main_jar_file_uri()) {
    driver_.main_jar_file_uri_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_driver();
  if (main_jar_file_uri != NULL) {
    set_has_main_jar_file_uri();
    driver_.main_jar_file_uri_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        main_jar_file_uri);
  }
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dataproc.v1.SparkJob.main_jar_file_uri)
}

// string main_class = 2;
inline bool SparkJob::has_main_class() const {
  return driver_case() == kMainClass;
}
inline void SparkJob::set_has_main_class() {
  _oneof_case_[0] = kMainClass;
}
inline void SparkJob::clear_main_class() {
  if (has_main_class()) {
    driver_.main_class_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_driver();
  }
}
inline const ::std::string& SparkJob::main_class() const {
  // @@protoc_insertion_point(field_get:google.cloud.dataproc.v1.SparkJob.main_class)
  if (has_main_class()) {
    return driver_.main_class_.GetNoArena();
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
inline void SparkJob::set_main_class(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:google.cloud.dataproc.v1.SparkJob.main_class)
  if (!has_main_class()) {
    clear_driver();
    set_has_main_class();
    driver_.main_class_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  driver_.main_class_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.cloud.dataproc.v1.SparkJob.main_class)
}
#if LANG_CXX11
inline void SparkJob::set_main_class(::std::string&& value) {
  // @@protoc_insertion_point(field_set:google.cloud.dataproc.v1.SparkJob.main_class)
  if (!has_main_class()) {
    clear_driver();
    set_has_main_class();
    driver_.main_class_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  driver_.main_class_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.dataproc.v1.SparkJob.main_class)
}
#endif
inline void SparkJob::set_main_class(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  if (!has_main_class()) {
    clear_driver();
    set_has_main_class();
    driver_.main_class_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  driver_.main_class_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.cloud.dataproc.v1.SparkJob.main_class)
}
inline void SparkJob::set_main_class(const char* value, size_t size) {
  if (!has_main_class()) {
    clear_driver();
    set_has_main_class();
    driver_.main_class_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  driver_.main_class_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.cloud.dataproc.v1.SparkJob.main_class)
}
inline ::std::string* SparkJob::mutable_main_class() {
  if (!has_main_class()) {
    clear_driver();
    set_has_main_class();
    driver_.main_class_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:google.cloud.dataproc.v1.SparkJob.main_class)
  return driver_.main_class_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SparkJob::release_main_class() {
  // @@protoc_insertion_point(field_release:google.cloud.dataproc.v1.SparkJob.main_class)
  if (has_main_class()) {
    clear_has_driver();
    return driver_.main_class_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
inline void SparkJob::set_allocated_main_class(::std::string* main_class) {
  if (!has_main_class()) {
    driver_.main_class_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_driver();
  if (main_class != NULL) {
    set_has_main_class();
    driver_.main_class_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        main_class);
  }
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dataproc.v1.SparkJob.main_class)
}

// repeated string args = 3;
inline int SparkJob::args_size() const {
  return args_.size();
}
inline void SparkJob::clear_args() {
  args_.Clear();
}
inline const ::std::string& SparkJob::args(int index) const {
  // @@protoc_insertion_point(field_get:google.cloud.dataproc.v1.SparkJob.args)
  return args_.Get(index);
}
inline ::std::string* SparkJob::mutable_args(int index) {
  // @@protoc_insertion_point(field_mutable:google.cloud.dataproc.v1.SparkJob.args)
  return args_.Mutable(index);
}
inline void SparkJob::set_args(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:google.cloud.dataproc.v1.SparkJob.args)
  args_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void SparkJob::set_args(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:google.cloud.dataproc.v1.SparkJob.args)
  args_.Mutable(index)->assign(std::move(value));
}
#endif
inline void SparkJob::set_args(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  args_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:google.cloud.dataproc.v1.SparkJob.args)
}
inline void SparkJob::set_args(int index, const char* value, size_t size) {
  args_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:google.cloud.dataproc.v1.SparkJob.args)
}
inline ::std::string* SparkJob::add_args() {
  // @@protoc_insertion_point(field_add_mutable:google.cloud.dataproc.v1.SparkJob.args)
  return args_.Add();
}
inline void SparkJob::add_args(const ::std::string& value) {
  args_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:google.cloud.dataproc.v1.SparkJob.args)
}
#if LANG_CXX11
inline void SparkJob::add_args(::std::string&& value) {
  args_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:google.cloud.dataproc.v1.SparkJob.args)
}
#endif
inline void SparkJob::add_args(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  args_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:google.cloud.dataproc.v1.SparkJob.args)
}
inline void SparkJob::add_args(const char* value, size_t size) {
  args_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:google.cloud.dataproc.v1.SparkJob.args)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
SparkJob::args() const {
  // @@protoc_insertion_point(field_list:google.cloud.dataproc.v1.SparkJob.args)
  return args_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
SparkJob::mutable_args() {
  // @@protoc_insertion_point(field_mutable_list:google.cloud.dataproc.v1.SparkJob.args)
  return &args_;
}

// repeated string jar_file_uris = 4;
inline int SparkJob::jar_file_uris_size() const {
  return jar_file_uris_.size();
}
inline void SparkJob::clear_jar_file_uris() {
  jar_file_uris_.Clear();
}
inline const ::std::string& SparkJob::jar_file_uris(int index) const {
  // @@protoc_insertion_point(field_get:google.cloud.dataproc.v1.SparkJob.jar_file_uris)
  return jar_file_uris_.Get(index);
}
inline ::std::string* SparkJob::mutable_jar_file_uris(int index) {
  // @@protoc_insertion_point(field_mutable:google.cloud.dataproc.v1.SparkJob.jar_file_uris)
  return jar_file_uris_.Mutable(index);
}
inline void SparkJob::set_jar_file_uris(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:google.cloud.dataproc.v1.SparkJob.jar_file_uris)
  jar_file_uris_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void SparkJob::set_jar_file_uris(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:google.cloud.dataproc.v1.SparkJob.jar_file_uris)
  jar_file_uris_.Mutable(index)->assign(std::move(value));
}
#endif
inline void SparkJob::set_jar_file_uris(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  jar_file_uris_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:google.cloud.dataproc.v1.SparkJob.jar_file_uris)
}
inline void SparkJob::set_jar_file_uris(int index, const char* value, size_t size) {
  jar_file_uris_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:google.cloud.dataproc.v1.SparkJob.jar_file_uris)
}
inline ::std::string* SparkJob::add_jar_file_uris() {
  // @@protoc_insertion_point(field_add_mutable:google.cloud.dataproc.v1.SparkJob.jar_file_uris)
  return jar_file_uris_.Add();
}
inline void SparkJob::add_jar_file_uris(const ::std::string& value) {
  jar_file_uris_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:google.cloud.dataproc.v1.SparkJob.jar_file_uris)
}
#if LANG_CXX11
inline void SparkJob::add_jar_file_uris(::std::string&& value) {
  jar_file_uris_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:google.cloud.dataproc.v1.SparkJob.jar_file_uris)
}
#endif
inline void SparkJob::add_jar_file_uris(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  jar_file_uris_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:google.cloud.dataproc.v1.SparkJob.jar_file_uris)
}
inline void SparkJob::add_jar_file_uris(const char* value, size_t size) {
  jar_file_uris_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:google.cloud.dataproc.v1.SparkJob.jar_file_uris)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
SparkJob::jar_file_uris() const {
  // @@protoc_insertion_point(field_list:google.cloud.dataproc.v1.SparkJob.jar_file_uris)
  return jar_file_uris_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
SparkJob::mutable_jar_file_uris() {
  // @@protoc_insertion_point(field_mutable_list:google.cloud.dataproc.v1.SparkJob.jar_file_uris)
  return &jar_file_uris_;
}

// repeated string file_uris = 5;
inline int SparkJob::file_uris_size() const {
  return file_uris_.size();
}
inline void SparkJob::clear_file_uris() {
  file_uris_.Clear();
}
inline const ::std::string& SparkJob::file_uris(int index) const {
  // @@protoc_insertion_point(field_get:google.cloud.dataproc.v1.SparkJob.file_uris)
  return file_uris_.Get(index);
}
inline ::std::string* SparkJob::mutable_file_uris(int index) {
  // @@protoc_insertion_point(field_mutable:google.cloud.dataproc.v1.SparkJob.file_uris)
  return file_uris_.Mutable(index);
}
inline void SparkJob::set_file_uris(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:google.cloud.dataproc.v1.SparkJob.file_uris)
  file_uris_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void SparkJob::set_file_uris(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:google.cloud.dataproc.v1.SparkJob.file_uris)
  file_uris_.Mutable(index)->assign(std::move(value));
}
#endif
inline void SparkJob::set_file_uris(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  file_uris_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:google.cloud.dataproc.v1.SparkJob.file_uris)
}
inline void SparkJob::set_file_uris(int index, const char* value, size_t size) {
  file_uris_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:google.cloud.dataproc.v1.SparkJob.file_uris)
}
inline ::std::string* SparkJob::add_file_uris() {
  // @@protoc_insertion_point(field_add_mutable:google.cloud.dataproc.v1.SparkJob.file_uris)
  return file_uris_.Add();
}
inline void SparkJob::add_file_uris(const ::std::string& value) {
  file_uris_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:google.cloud.dataproc.v1.SparkJob.file_uris)
}
#if LANG_CXX11
inline void SparkJob::add_file_uris(::std::string&& value) {
  file_uris_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:google.cloud.dataproc.v1.SparkJob.file_uris)
}
#endif
inline void SparkJob::add_file_uris(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  file_uris_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:google.cloud.dataproc.v1.SparkJob.file_uris)
}
inline void SparkJob::add_file_uris(const char* value, size_t size) {
  file_uris_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:google.cloud.dataproc.v1.SparkJob.file_uris)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
SparkJob::file_uris() const {
  // @@protoc_insertion_point(field_list:google.cloud.dataproc.v1.SparkJob.file_uris)
  return file_uris_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
SparkJob::mutable_file_uris() {
  // @@protoc_insertion_point(field_mutable_list:google.cloud.dataproc.v1.SparkJob.file_uris)
  return &file_uris_;
}

// repeated string archive_uris = 6;
inline int SparkJob::archive_uris_size() const {
  return archive_uris_.size();
}
inline void SparkJob::clear_archive_uris() {
  archive_uris_.Clear();
}
inline const ::std::string& SparkJob::archive_uris(int index) const {
  // @@protoc_insertion_point(field_get:google.cloud.dataproc.v1.SparkJob.archive_uris)
  return archive_uris_.Get(index);
}
inline ::std::string* SparkJob::mutable_archive_uris(int index) {
  // @@protoc_insertion_point(field_mutable:google.cloud.dataproc.v1.SparkJob.archive_uris)
  return archive_uris_.Mutable(index);
}
inline void SparkJob::set_archive_uris(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:google.cloud.dataproc.v1.SparkJob.archive_uris)
  archive_uris_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void SparkJob::set_archive_uris(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:google.cloud.dataproc.v1.SparkJob.archive_uris)
  archive_uris_.Mutable(index)->assign(std::move(value));
}
#endif
inline void SparkJob::set_archive_uris(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  archive_uris_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:google.cloud.dataproc.v1.SparkJob.archive_uris)
}
inline void SparkJob::set_archive_uris(int index, const char* value, size_t size) {
  archive_uris_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:google.cloud.dataproc.v1.SparkJob.archive_uris)
}
inline ::std::string* SparkJob::add_archive_uris() {
  // @@protoc_insertion_point(field_add_mutable:google.cloud.dataproc.v1.SparkJob.archive_uris)
  return archive_uris_.Add();
}
inline void SparkJob::add_archive_uris(const ::std::string& value) {
  archive_uris_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:google.cloud.dataproc.v1.SparkJob.archive_uris)
}
#if LANG_CXX11
inline void SparkJob::add_archive_uris(::std::string&& value) {
  archive_uris_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:google.cloud.dataproc.v1.SparkJob.archive_uris)
}
#endif
inline void SparkJob::add_archive_uris(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  archive_uris_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:google.cloud.dataproc.v1.SparkJob.archive_uris)
}
inline void SparkJob::add_archive_uris(const char* value, size_t size) {
  archive_uris_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:google.cloud.dataproc.v1.SparkJob.archive_uris)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
SparkJob::archive_uris() const {
  // @@protoc_insertion_point(field_list:google.cloud.dataproc.v1.SparkJob.archive_uris)
  return archive_uris_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
SparkJob::mutable_archive_uris() {
  // @@protoc_insertion_point(field_mutable_list:google.cloud.dataproc.v1.SparkJob.archive_uris)
  return &archive_uris_;
}

// map<string, string> properties = 7;
inline int SparkJob::properties_size() const {
  return properties_.size();
}
inline void SparkJob::clear_properties() {
  properties_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::std::string >&
SparkJob::properties() const {
  // @@protoc_insertion_point(field_map:google.cloud.dataproc.v1.SparkJob.properties)
  return properties_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::std::string >*
SparkJob::mutable_properties() {
  // @@protoc_insertion_point(field_mutable_map:google.cloud.dataproc.v1.SparkJob.properties)
  return properties_.MutableMap();
}

// .google.cloud.dataproc.v1.LoggingConfig logging_config = 8;
inline bool SparkJob::has_logging_config() const {
  return this != internal_default_instance() && logging_config_ != NULL;
}
inline void SparkJob::clear_logging_config() {
  if (GetArenaNoVirtual() == NULL && logging_config_ != NULL) {
    delete logging_config_;
  }
  logging_config_ = NULL;
}
inline const ::google::cloud::dataproc::v1::LoggingConfig& SparkJob::logging_config() const {
  const ::google::cloud::dataproc::v1::LoggingConfig* p = logging_config_;
  // @@protoc_insertion_point(field_get:google.cloud.dataproc.v1.SparkJob.logging_config)
  return p != NULL ? *p : *reinterpret_cast<const ::google::cloud::dataproc::v1::LoggingConfig*>(
      &::google::cloud::dataproc::v1::_LoggingConfig_default_instance_);
}
inline ::google::cloud::dataproc::v1::LoggingConfig* SparkJob::release_logging_config() {
  // @@protoc_insertion_point(field_release:google.cloud.dataproc.v1.SparkJob.logging_config)
  
  ::google::cloud::dataproc::v1::LoggingConfig* temp = logging_config_;
  logging_config_ = NULL;
  return temp;
}
inline ::google::cloud::dataproc::v1::LoggingConfig* SparkJob::mutable_logging_config() {
  
  if (logging_config_ == NULL) {
    logging_config_ = new ::google::cloud::dataproc::v1::LoggingConfig;
  }
  // @@protoc_insertion_point(field_mutable:google.cloud.dataproc.v1.SparkJob.logging_config)
  return logging_config_;
}
inline void SparkJob::set_allocated_logging_config(::google::cloud::dataproc::v1::LoggingConfig* logging_config) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete logging_config_;
  }
  if (logging_config) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      logging_config = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, logging_config, submessage_arena);
    }
    
  } else {
    
  }
  logging_config_ = logging_config;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dataproc.v1.SparkJob.logging_config)
}

inline bool SparkJob::has_driver() const {
  return driver_case() != DRIVER_NOT_SET;
}
inline void SparkJob::clear_has_driver() {
  _oneof_case_[0] = DRIVER_NOT_SET;
}
inline SparkJob::DriverCase SparkJob::driver_case() const {
  return SparkJob::DriverCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// PySparkJob

// string main_python_file_uri = 1;
inline void PySparkJob::clear_main_python_file_uri() {
  main_python_file_uri_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PySparkJob::main_python_file_uri() const {
  // @@protoc_insertion_point(field_get:google.cloud.dataproc.v1.PySparkJob.main_python_file_uri)
  return main_python_file_uri_.GetNoArena();
}
inline void PySparkJob::set_main_python_file_uri(const ::std::string& value) {
  
  main_python_file_uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.cloud.dataproc.v1.PySparkJob.main_python_file_uri)
}
#if LANG_CXX11
inline void PySparkJob::set_main_python_file_uri(::std::string&& value) {
  
  main_python_file_uri_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.dataproc.v1.PySparkJob.main_python_file_uri)
}
#endif
inline void PySparkJob::set_main_python_file_uri(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  main_python_file_uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.cloud.dataproc.v1.PySparkJob.main_python_file_uri)
}
inline void PySparkJob::set_main_python_file_uri(const char* value, size_t size) {
  
  main_python_file_uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.cloud.dataproc.v1.PySparkJob.main_python_file_uri)
}
inline ::std::string* PySparkJob::mutable_main_python_file_uri() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.dataproc.v1.PySparkJob.main_python_file_uri)
  return main_python_file_uri_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PySparkJob::release_main_python_file_uri() {
  // @@protoc_insertion_point(field_release:google.cloud.dataproc.v1.PySparkJob.main_python_file_uri)
  
  return main_python_file_uri_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PySparkJob::set_allocated_main_python_file_uri(::std::string* main_python_file_uri) {
  if (main_python_file_uri != NULL) {
    
  } else {
    
  }
  main_python_file_uri_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), main_python_file_uri);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dataproc.v1.PySparkJob.main_python_file_uri)
}

// repeated string args = 2;
inline int PySparkJob::args_size() const {
  return args_.size();
}
inline void PySparkJob::clear_args() {
  args_.Clear();
}
inline const ::std::string& PySparkJob::args(int index) const {
  // @@protoc_insertion_point(field_get:google.cloud.dataproc.v1.PySparkJob.args)
  return args_.Get(index);
}
inline ::std::string* PySparkJob::mutable_args(int index) {
  // @@protoc_insertion_point(field_mutable:google.cloud.dataproc.v1.PySparkJob.args)
  return args_.Mutable(index);
}
inline void PySparkJob::set_args(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:google.cloud.dataproc.v1.PySparkJob.args)
  args_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void PySparkJob::set_args(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:google.cloud.dataproc.v1.PySparkJob.args)
  args_.Mutable(index)->assign(std::move(value));
}
#endif
inline void PySparkJob::set_args(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  args_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:google.cloud.dataproc.v1.PySparkJob.args)
}
inline void PySparkJob::set_args(int index, const char* value, size_t size) {
  args_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:google.cloud.dataproc.v1.PySparkJob.args)
}
inline ::std::string* PySparkJob::add_args() {
  // @@protoc_insertion_point(field_add_mutable:google.cloud.dataproc.v1.PySparkJob.args)
  return args_.Add();
}
inline void PySparkJob::add_args(const ::std::string& value) {
  args_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:google.cloud.dataproc.v1.PySparkJob.args)
}
#if LANG_CXX11
inline void PySparkJob::add_args(::std::string&& value) {
  args_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:google.cloud.dataproc.v1.PySparkJob.args)
}
#endif
inline void PySparkJob::add_args(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  args_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:google.cloud.dataproc.v1.PySparkJob.args)
}
inline void PySparkJob::add_args(const char* value, size_t size) {
  args_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:google.cloud.dataproc.v1.PySparkJob.args)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
PySparkJob::args() const {
  // @@protoc_insertion_point(field_list:google.cloud.dataproc.v1.PySparkJob.args)
  return args_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
PySparkJob::mutable_args() {
  // @@protoc_insertion_point(field_mutable_list:google.cloud.dataproc.v1.PySparkJob.args)
  return &args_;
}

// repeated string python_file_uris = 3;
inline int PySparkJob::python_file_uris_size() const {
  return python_file_uris_.size();
}
inline void PySparkJob::clear_python_file_uris() {
  python_file_uris_.Clear();
}
inline const ::std::string& PySparkJob::python_file_uris(int index) const {
  // @@protoc_insertion_point(field_get:google.cloud.dataproc.v1.PySparkJob.python_file_uris)
  return python_file_uris_.Get(index);
}
inline ::std::string* PySparkJob::mutable_python_file_uris(int index) {
  // @@protoc_insertion_point(field_mutable:google.cloud.dataproc.v1.PySparkJob.python_file_uris)
  return python_file_uris_.Mutable(index);
}
inline void PySparkJob::set_python_file_uris(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:google.cloud.dataproc.v1.PySparkJob.python_file_uris)
  python_file_uris_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void PySparkJob::set_python_file_uris(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:google.cloud.dataproc.v1.PySparkJob.python_file_uris)
  python_file_uris_.Mutable(index)->assign(std::move(value));
}
#endif
inline void PySparkJob::set_python_file_uris(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  python_file_uris_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:google.cloud.dataproc.v1.PySparkJob.python_file_uris)
}
inline void PySparkJob::set_python_file_uris(int index, const char* value, size_t size) {
  python_file_uris_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:google.cloud.dataproc.v1.PySparkJob.python_file_uris)
}
inline ::std::string* PySparkJob::add_python_file_uris() {
  // @@protoc_insertion_point(field_add_mutable:google.cloud.dataproc.v1.PySparkJob.python_file_uris)
  return python_file_uris_.Add();
}
inline void PySparkJob::add_python_file_uris(const ::std::string& value) {
  python_file_uris_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:google.cloud.dataproc.v1.PySparkJob.python_file_uris)
}
#if LANG_CXX11
inline void PySparkJob::add_python_file_uris(::std::string&& value) {
  python_file_uris_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:google.cloud.dataproc.v1.PySparkJob.python_file_uris)
}
#endif
inline void PySparkJob::add_python_file_uris(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  python_file_uris_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:google.cloud.dataproc.v1.PySparkJob.python_file_uris)
}
inline void PySparkJob::add_python_file_uris(const char* value, size_t size) {
  python_file_uris_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:google.cloud.dataproc.v1.PySparkJob.python_file_uris)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
PySparkJob::python_file_uris() const {
  // @@protoc_insertion_point(field_list:google.cloud.dataproc.v1.PySparkJob.python_file_uris)
  return python_file_uris_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
PySparkJob::mutable_python_file_uris() {
  // @@protoc_insertion_point(field_mutable_list:google.cloud.dataproc.v1.PySparkJob.python_file_uris)
  return &python_file_uris_;
}

// repeated string jar_file_uris = 4;
inline int PySparkJob::jar_file_uris_size() const {
  return jar_file_uris_.size();
}
inline void PySparkJob::clear_jar_file_uris() {
  jar_file_uris_.Clear();
}
inline const ::std::string& PySparkJob::jar_file_uris(int index) const {
  // @@protoc_insertion_point(field_get:google.cloud.dataproc.v1.PySparkJob.jar_file_uris)
  return jar_file_uris_.Get(index);
}
inline ::std::string* PySparkJob::mutable_jar_file_uris(int index) {
  // @@protoc_insertion_point(field_mutable:google.cloud.dataproc.v1.PySparkJob.jar_file_uris)
  return jar_file_uris_.Mutable(index);
}
inline void PySparkJob::set_jar_file_uris(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:google.cloud.dataproc.v1.PySparkJob.jar_file_uris)
  jar_file_uris_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void PySparkJob::set_jar_file_uris(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:google.cloud.dataproc.v1.PySparkJob.jar_file_uris)
  jar_file_uris_.Mutable(index)->assign(std::move(value));
}
#endif
inline void PySparkJob::set_jar_file_uris(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  jar_file_uris_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:google.cloud.dataproc.v1.PySparkJob.jar_file_uris)
}
inline void PySparkJob::set_jar_file_uris(int index, const char* value, size_t size) {
  jar_file_uris_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:google.cloud.dataproc.v1.PySparkJob.jar_file_uris)
}
inline ::std::string* PySparkJob::add_jar_file_uris() {
  // @@protoc_insertion_point(field_add_mutable:google.cloud.dataproc.v1.PySparkJob.jar_file_uris)
  return jar_file_uris_.Add();
}
inline void PySparkJob::add_jar_file_uris(const ::std::string& value) {
  jar_file_uris_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:google.cloud.dataproc.v1.PySparkJob.jar_file_uris)
}
#if LANG_CXX11
inline void PySparkJob::add_jar_file_uris(::std::string&& value) {
  jar_file_uris_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:google.cloud.dataproc.v1.PySparkJob.jar_file_uris)
}
#endif
inline void PySparkJob::add_jar_file_uris(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  jar_file_uris_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:google.cloud.dataproc.v1.PySparkJob.jar_file_uris)
}
inline void PySparkJob::add_jar_file_uris(const char* value, size_t size) {
  jar_file_uris_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:google.cloud.dataproc.v1.PySparkJob.jar_file_uris)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
PySparkJob::jar_file_uris() const {
  // @@protoc_insertion_point(field_list:google.cloud.dataproc.v1.PySparkJob.jar_file_uris)
  return jar_file_uris_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
PySparkJob::mutable_jar_file_uris() {
  // @@protoc_insertion_point(field_mutable_list:google.cloud.dataproc.v1.PySparkJob.jar_file_uris)
  return &jar_file_uris_;
}

// repeated string file_uris = 5;
inline int PySparkJob::file_uris_size() const {
  return file_uris_.size();
}
inline void PySparkJob::clear_file_uris() {
  file_uris_.Clear();
}
inline const ::std::string& PySparkJob::file_uris(int index) const {
  // @@protoc_insertion_point(field_get:google.cloud.dataproc.v1.PySparkJob.file_uris)
  return file_uris_.Get(index);
}
inline ::std::string* PySparkJob::mutable_file_uris(int index) {
  // @@protoc_insertion_point(field_mutable:google.cloud.dataproc.v1.PySparkJob.file_uris)
  return file_uris_.Mutable(index);
}
inline void PySparkJob::set_file_uris(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:google.cloud.dataproc.v1.PySparkJob.file_uris)
  file_uris_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void PySparkJob::set_file_uris(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:google.cloud.dataproc.v1.PySparkJob.file_uris)
  file_uris_.Mutable(index)->assign(std::move(value));
}
#endif
inline void PySparkJob::set_file_uris(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  file_uris_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:google.cloud.dataproc.v1.PySparkJob.file_uris)
}
inline void PySparkJob::set_file_uris(int index, const char* value, size_t size) {
  file_uris_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:google.cloud.dataproc.v1.PySparkJob.file_uris)
}
inline ::std::string* PySparkJob::add_file_uris() {
  // @@protoc_insertion_point(field_add_mutable:google.cloud.dataproc.v1.PySparkJob.file_uris)
  return file_uris_.Add();
}
inline void PySparkJob::add_file_uris(const ::std::string& value) {
  file_uris_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:google.cloud.dataproc.v1.PySparkJob.file_uris)
}
#if LANG_CXX11
inline void PySparkJob::add_file_uris(::std::string&& value) {
  file_uris_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:google.cloud.dataproc.v1.PySparkJob.file_uris)
}
#endif
inline void PySparkJob::add_file_uris(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  file_uris_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:google.cloud.dataproc.v1.PySparkJob.file_uris)
}
inline void PySparkJob::add_file_uris(const char* value, size_t size) {
  file_uris_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:google.cloud.dataproc.v1.PySparkJob.file_uris)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
PySparkJob::file_uris() const {
  // @@protoc_insertion_point(field_list:google.cloud.dataproc.v1.PySparkJob.file_uris)
  return file_uris_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
PySparkJob::mutable_file_uris() {
  // @@protoc_insertion_point(field_mutable_list:google.cloud.dataproc.v1.PySparkJob.file_uris)
  return &file_uris_;
}

// repeated string archive_uris = 6;
inline int PySparkJob::archive_uris_size() const {
  return archive_uris_.size();
}
inline void PySparkJob::clear_archive_uris() {
  archive_uris_.Clear();
}
inline const ::std::string& PySparkJob::archive_uris(int index) const {
  // @@protoc_insertion_point(field_get:google.cloud.dataproc.v1.PySparkJob.archive_uris)
  return archive_uris_.Get(index);
}
inline ::std::string* PySparkJob::mutable_archive_uris(int index) {
  // @@protoc_insertion_point(field_mutable:google.cloud.dataproc.v1.PySparkJob.archive_uris)
  return archive_uris_.Mutable(index);
}
inline void PySparkJob::set_archive_uris(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:google.cloud.dataproc.v1.PySparkJob.archive_uris)
  archive_uris_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void PySparkJob::set_archive_uris(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:google.cloud.dataproc.v1.PySparkJob.archive_uris)
  archive_uris_.Mutable(index)->assign(std::move(value));
}
#endif
inline void PySparkJob::set_archive_uris(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  archive_uris_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:google.cloud.dataproc.v1.PySparkJob.archive_uris)
}
inline void PySparkJob::set_archive_uris(int index, const char* value, size_t size) {
  archive_uris_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:google.cloud.dataproc.v1.PySparkJob.archive_uris)
}
inline ::std::string* PySparkJob::add_archive_uris() {
  // @@protoc_insertion_point(field_add_mutable:google.cloud.dataproc.v1.PySparkJob.archive_uris)
  return archive_uris_.Add();
}
inline void PySparkJob::add_archive_uris(const ::std::string& value) {
  archive_uris_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:google.cloud.dataproc.v1.PySparkJob.archive_uris)
}
#if LANG_CXX11
inline void PySparkJob::add_archive_uris(::std::string&& value) {
  archive_uris_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:google.cloud.dataproc.v1.PySparkJob.archive_uris)
}
#endif
inline void PySparkJob::add_archive_uris(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  archive_uris_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:google.cloud.dataproc.v1.PySparkJob.archive_uris)
}
inline void PySparkJob::add_archive_uris(const char* value, size_t size) {
  archive_uris_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:google.cloud.dataproc.v1.PySparkJob.archive_uris)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
PySparkJob::archive_uris() const {
  // @@protoc_insertion_point(field_list:google.cloud.dataproc.v1.PySparkJob.archive_uris)
  return archive_uris_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
PySparkJob::mutable_archive_uris() {
  // @@protoc_insertion_point(field_mutable_list:google.cloud.dataproc.v1.PySparkJob.archive_uris)
  return &archive_uris_;
}

// map<string, string> properties = 7;
inline int PySparkJob::properties_size() const {
  return properties_.size();
}
inline void PySparkJob::clear_properties() {
  properties_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::std::string >&
PySparkJob::properties() const {
  // @@protoc_insertion_point(field_map:google.cloud.dataproc.v1.PySparkJob.properties)
  return properties_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::std::string >*
PySparkJob::mutable_properties() {
  // @@protoc_insertion_point(field_mutable_map:google.cloud.dataproc.v1.PySparkJob.properties)
  return properties_.MutableMap();
}

// .google.cloud.dataproc.v1.LoggingConfig logging_config = 8;
inline bool PySparkJob::has_logging_config() const {
  return this != internal_default_instance() && logging_config_ != NULL;
}
inline void PySparkJob::clear_logging_config() {
  if (GetArenaNoVirtual() == NULL && logging_config_ != NULL) {
    delete logging_config_;
  }
  logging_config_ = NULL;
}
inline const ::google::cloud::dataproc::v1::LoggingConfig& PySparkJob::logging_config() const {
  const ::google::cloud::dataproc::v1::LoggingConfig* p = logging_config_;
  // @@protoc_insertion_point(field_get:google.cloud.dataproc.v1.PySparkJob.logging_config)
  return p != NULL ? *p : *reinterpret_cast<const ::google::cloud::dataproc::v1::LoggingConfig*>(
      &::google::cloud::dataproc::v1::_LoggingConfig_default_instance_);
}
inline ::google::cloud::dataproc::v1::LoggingConfig* PySparkJob::release_logging_config() {
  // @@protoc_insertion_point(field_release:google.cloud.dataproc.v1.PySparkJob.logging_config)
  
  ::google::cloud::dataproc::v1::LoggingConfig* temp = logging_config_;
  logging_config_ = NULL;
  return temp;
}
inline ::google::cloud::dataproc::v1::LoggingConfig* PySparkJob::mutable_logging_config() {
  
  if (logging_config_ == NULL) {
    logging_config_ = new ::google::cloud::dataproc::v1::LoggingConfig;
  }
  // @@protoc_insertion_point(field_mutable:google.cloud.dataproc.v1.PySparkJob.logging_config)
  return logging_config_;
}
inline void PySparkJob::set_allocated_logging_config(::google::cloud::dataproc::v1::LoggingConfig* logging_config) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete logging_config_;
  }
  if (logging_config) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      logging_config = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, logging_config, submessage_arena);
    }
    
  } else {
    
  }
  logging_config_ = logging_config;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dataproc.v1.PySparkJob.logging_config)
}

// -------------------------------------------------------------------

// QueryList

// repeated string queries = 1;
inline int QueryList::queries_size() const {
  return queries_.size();
}
inline void QueryList::clear_queries() {
  queries_.Clear();
}
inline const ::std::string& QueryList::queries(int index) const {
  // @@protoc_insertion_point(field_get:google.cloud.dataproc.v1.QueryList.queries)
  return queries_.Get(index);
}
inline ::std::string* QueryList::mutable_queries(int index) {
  // @@protoc_insertion_point(field_mutable:google.cloud.dataproc.v1.QueryList.queries)
  return queries_.Mutable(index);
}
inline void QueryList::set_queries(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:google.cloud.dataproc.v1.QueryList.queries)
  queries_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void QueryList::set_queries(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:google.cloud.dataproc.v1.QueryList.queries)
  queries_.Mutable(index)->assign(std::move(value));
}
#endif
inline void QueryList::set_queries(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  queries_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:google.cloud.dataproc.v1.QueryList.queries)
}
inline void QueryList::set_queries(int index, const char* value, size_t size) {
  queries_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:google.cloud.dataproc.v1.QueryList.queries)
}
inline ::std::string* QueryList::add_queries() {
  // @@protoc_insertion_point(field_add_mutable:google.cloud.dataproc.v1.QueryList.queries)
  return queries_.Add();
}
inline void QueryList::add_queries(const ::std::string& value) {
  queries_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:google.cloud.dataproc.v1.QueryList.queries)
}
#if LANG_CXX11
inline void QueryList::add_queries(::std::string&& value) {
  queries_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:google.cloud.dataproc.v1.QueryList.queries)
}
#endif
inline void QueryList::add_queries(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  queries_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:google.cloud.dataproc.v1.QueryList.queries)
}
inline void QueryList::add_queries(const char* value, size_t size) {
  queries_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:google.cloud.dataproc.v1.QueryList.queries)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
QueryList::queries() const {
  // @@protoc_insertion_point(field_list:google.cloud.dataproc.v1.QueryList.queries)
  return queries_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
QueryList::mutable_queries() {
  // @@protoc_insertion_point(field_mutable_list:google.cloud.dataproc.v1.QueryList.queries)
  return &queries_;
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// HiveJob

// string query_file_uri = 1;
inline bool HiveJob::has_query_file_uri() const {
  return queries_case() == kQueryFileUri;
}
inline void HiveJob::set_has_query_file_uri() {
  _oneof_case_[0] = kQueryFileUri;
}
inline void HiveJob::clear_query_file_uri() {
  if (has_query_file_uri()) {
    queries_.query_file_uri_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_queries();
  }
}
inline const ::std::string& HiveJob::query_file_uri() const {
  // @@protoc_insertion_point(field_get:google.cloud.dataproc.v1.HiveJob.query_file_uri)
  if (has_query_file_uri()) {
    return queries_.query_file_uri_.GetNoArena();
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
inline void HiveJob::set_query_file_uri(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:google.cloud.dataproc.v1.HiveJob.query_file_uri)
  if (!has_query_file_uri()) {
    clear_queries();
    set_has_query_file_uri();
    queries_.query_file_uri_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  queries_.query_file_uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.cloud.dataproc.v1.HiveJob.query_file_uri)
}
#if LANG_CXX11
inline void HiveJob::set_query_file_uri(::std::string&& value) {
  // @@protoc_insertion_point(field_set:google.cloud.dataproc.v1.HiveJob.query_file_uri)
  if (!has_query_file_uri()) {
    clear_queries();
    set_has_query_file_uri();
    queries_.query_file_uri_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  queries_.query_file_uri_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.dataproc.v1.HiveJob.query_file_uri)
}
#endif
inline void HiveJob::set_query_file_uri(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  if (!has_query_file_uri()) {
    clear_queries();
    set_has_query_file_uri();
    queries_.query_file_uri_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  queries_.query_file_uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.cloud.dataproc.v1.HiveJob.query_file_uri)
}
inline void HiveJob::set_query_file_uri(const char* value, size_t size) {
  if (!has_query_file_uri()) {
    clear_queries();
    set_has_query_file_uri();
    queries_.query_file_uri_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  queries_.query_file_uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.cloud.dataproc.v1.HiveJob.query_file_uri)
}
inline ::std::string* HiveJob::mutable_query_file_uri() {
  if (!has_query_file_uri()) {
    clear_queries();
    set_has_query_file_uri();
    queries_.query_file_uri_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:google.cloud.dataproc.v1.HiveJob.query_file_uri)
  return queries_.query_file_uri_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* HiveJob::release_query_file_uri() {
  // @@protoc_insertion_point(field_release:google.cloud.dataproc.v1.HiveJob.query_file_uri)
  if (has_query_file_uri()) {
    clear_has_queries();
    return queries_.query_file_uri_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
inline void HiveJob::set_allocated_query_file_uri(::std::string* query_file_uri) {
  if (!has_query_file_uri()) {
    queries_.query_file_uri_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_queries();
  if (query_file_uri != NULL) {
    set_has_query_file_uri();
    queries_.query_file_uri_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        query_file_uri);
  }
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dataproc.v1.HiveJob.query_file_uri)
}

// .google.cloud.dataproc.v1.QueryList query_list = 2;
inline bool HiveJob::has_query_list() const {
  return queries_case() == kQueryList;
}
inline void HiveJob::set_has_query_list() {
  _oneof_case_[0] = kQueryList;
}
inline void HiveJob::clear_query_list() {
  if (has_query_list()) {
    delete queries_.query_list_;
    clear_has_queries();
  }
}
inline ::google::cloud::dataproc::v1::QueryList* HiveJob::release_query_list() {
  // @@protoc_insertion_point(field_release:google.cloud.dataproc.v1.HiveJob.query_list)
  if (has_query_list()) {
    clear_has_queries();
      ::google::cloud::dataproc::v1::QueryList* temp = queries_.query_list_;
    queries_.query_list_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::cloud::dataproc::v1::QueryList& HiveJob::query_list() const {
  // @@protoc_insertion_point(field_get:google.cloud.dataproc.v1.HiveJob.query_list)
  return has_query_list()
      ? *queries_.query_list_
      : *reinterpret_cast< ::google::cloud::dataproc::v1::QueryList*>(&::google::cloud::dataproc::v1::_QueryList_default_instance_);
}
inline ::google::cloud::dataproc::v1::QueryList* HiveJob::mutable_query_list() {
  if (!has_query_list()) {
    clear_queries();
    set_has_query_list();
    queries_.query_list_ = new ::google::cloud::dataproc::v1::QueryList;
  }
  // @@protoc_insertion_point(field_mutable:google.cloud.dataproc.v1.HiveJob.query_list)
  return queries_.query_list_;
}

// bool continue_on_failure = 3;
inline void HiveJob::clear_continue_on_failure() {
  continue_on_failure_ = false;
}
inline bool HiveJob::continue_on_failure() const {
  // @@protoc_insertion_point(field_get:google.cloud.dataproc.v1.HiveJob.continue_on_failure)
  return continue_on_failure_;
}
inline void HiveJob::set_continue_on_failure(bool value) {
  
  continue_on_failure_ = value;
  // @@protoc_insertion_point(field_set:google.cloud.dataproc.v1.HiveJob.continue_on_failure)
}

// map<string, string> script_variables = 4;
inline int HiveJob::script_variables_size() const {
  return script_variables_.size();
}
inline void HiveJob::clear_script_variables() {
  script_variables_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::std::string >&
HiveJob::script_variables() const {
  // @@protoc_insertion_point(field_map:google.cloud.dataproc.v1.HiveJob.script_variables)
  return script_variables_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::std::string >*
HiveJob::mutable_script_variables() {
  // @@protoc_insertion_point(field_mutable_map:google.cloud.dataproc.v1.HiveJob.script_variables)
  return script_variables_.MutableMap();
}

// map<string, string> properties = 5;
inline int HiveJob::properties_size() const {
  return properties_.size();
}
inline void HiveJob::clear_properties() {
  properties_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::std::string >&
HiveJob::properties() const {
  // @@protoc_insertion_point(field_map:google.cloud.dataproc.v1.HiveJob.properties)
  return properties_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::std::string >*
HiveJob::mutable_properties() {
  // @@protoc_insertion_point(field_mutable_map:google.cloud.dataproc.v1.HiveJob.properties)
  return properties_.MutableMap();
}

// repeated string jar_file_uris = 6;
inline int HiveJob::jar_file_uris_size() const {
  return jar_file_uris_.size();
}
inline void HiveJob::clear_jar_file_uris() {
  jar_file_uris_.Clear();
}
inline const ::std::string& HiveJob::jar_file_uris(int index) const {
  // @@protoc_insertion_point(field_get:google.cloud.dataproc.v1.HiveJob.jar_file_uris)
  return jar_file_uris_.Get(index);
}
inline ::std::string* HiveJob::mutable_jar_file_uris(int index) {
  // @@protoc_insertion_point(field_mutable:google.cloud.dataproc.v1.HiveJob.jar_file_uris)
  return jar_file_uris_.Mutable(index);
}
inline void HiveJob::set_jar_file_uris(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:google.cloud.dataproc.v1.HiveJob.jar_file_uris)
  jar_file_uris_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void HiveJob::set_jar_file_uris(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:google.cloud.dataproc.v1.HiveJob.jar_file_uris)
  jar_file_uris_.Mutable(index)->assign(std::move(value));
}
#endif
inline void HiveJob::set_jar_file_uris(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  jar_file_uris_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:google.cloud.dataproc.v1.HiveJob.jar_file_uris)
}
inline void HiveJob::set_jar_file_uris(int index, const char* value, size_t size) {
  jar_file_uris_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:google.cloud.dataproc.v1.HiveJob.jar_file_uris)
}
inline ::std::string* HiveJob::add_jar_file_uris() {
  // @@protoc_insertion_point(field_add_mutable:google.cloud.dataproc.v1.HiveJob.jar_file_uris)
  return jar_file_uris_.Add();
}
inline void HiveJob::add_jar_file_uris(const ::std::string& value) {
  jar_file_uris_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:google.cloud.dataproc.v1.HiveJob.jar_file_uris)
}
#if LANG_CXX11
inline void HiveJob::add_jar_file_uris(::std::string&& value) {
  jar_file_uris_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:google.cloud.dataproc.v1.HiveJob.jar_file_uris)
}
#endif
inline void HiveJob::add_jar_file_uris(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  jar_file_uris_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:google.cloud.dataproc.v1.HiveJob.jar_file_uris)
}
inline void HiveJob::add_jar_file_uris(const char* value, size_t size) {
  jar_file_uris_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:google.cloud.dataproc.v1.HiveJob.jar_file_uris)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
HiveJob::jar_file_uris() const {
  // @@protoc_insertion_point(field_list:google.cloud.dataproc.v1.HiveJob.jar_file_uris)
  return jar_file_uris_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
HiveJob::mutable_jar_file_uris() {
  // @@protoc_insertion_point(field_mutable_list:google.cloud.dataproc.v1.HiveJob.jar_file_uris)
  return &jar_file_uris_;
}

inline bool HiveJob::has_queries() const {
  return queries_case() != QUERIES_NOT_SET;
}
inline void HiveJob::clear_has_queries() {
  _oneof_case_[0] = QUERIES_NOT_SET;
}
inline HiveJob::QueriesCase HiveJob::queries_case() const {
  return HiveJob::QueriesCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// SparkSqlJob

// string query_file_uri = 1;
inline bool SparkSqlJob::has_query_file_uri() const {
  return queries_case() == kQueryFileUri;
}
inline void SparkSqlJob::set_has_query_file_uri() {
  _oneof_case_[0] = kQueryFileUri;
}
inline void SparkSqlJob::clear_query_file_uri() {
  if (has_query_file_uri()) {
    queries_.query_file_uri_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_queries();
  }
}
inline const ::std::string& SparkSqlJob::query_file_uri() const {
  // @@protoc_insertion_point(field_get:google.cloud.dataproc.v1.SparkSqlJob.query_file_uri)
  if (has_query_file_uri()) {
    return queries_.query_file_uri_.GetNoArena();
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
inline void SparkSqlJob::set_query_file_uri(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:google.cloud.dataproc.v1.SparkSqlJob.query_file_uri)
  if (!has_query_file_uri()) {
    clear_queries();
    set_has_query_file_uri();
    queries_.query_file_uri_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  queries_.query_file_uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.cloud.dataproc.v1.SparkSqlJob.query_file_uri)
}
#if LANG_CXX11
inline void SparkSqlJob::set_query_file_uri(::std::string&& value) {
  // @@protoc_insertion_point(field_set:google.cloud.dataproc.v1.SparkSqlJob.query_file_uri)
  if (!has_query_file_uri()) {
    clear_queries();
    set_has_query_file_uri();
    queries_.query_file_uri_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  queries_.query_file_uri_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.dataproc.v1.SparkSqlJob.query_file_uri)
}
#endif
inline void SparkSqlJob::set_query_file_uri(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  if (!has_query_file_uri()) {
    clear_queries();
    set_has_query_file_uri();
    queries_.query_file_uri_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  queries_.query_file_uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.cloud.dataproc.v1.SparkSqlJob.query_file_uri)
}
inline void SparkSqlJob::set_query_file_uri(const char* value, size_t size) {
  if (!has_query_file_uri()) {
    clear_queries();
    set_has_query_file_uri();
    queries_.query_file_uri_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  queries_.query_file_uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.cloud.dataproc.v1.SparkSqlJob.query_file_uri)
}
inline ::std::string* SparkSqlJob::mutable_query_file_uri() {
  if (!has_query_file_uri()) {
    clear_queries();
    set_has_query_file_uri();
    queries_.query_file_uri_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:google.cloud.dataproc.v1.SparkSqlJob.query_file_uri)
  return queries_.query_file_uri_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SparkSqlJob::release_query_file_uri() {
  // @@protoc_insertion_point(field_release:google.cloud.dataproc.v1.SparkSqlJob.query_file_uri)
  if (has_query_file_uri()) {
    clear_has_queries();
    return queries_.query_file_uri_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
inline void SparkSqlJob::set_allocated_query_file_uri(::std::string* query_file_uri) {
  if (!has_query_file_uri()) {
    queries_.query_file_uri_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_queries();
  if (query_file_uri != NULL) {
    set_has_query_file_uri();
    queries_.query_file_uri_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        query_file_uri);
  }
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dataproc.v1.SparkSqlJob.query_file_uri)
}

// .google.cloud.dataproc.v1.QueryList query_list = 2;
inline bool SparkSqlJob::has_query_list() const {
  return queries_case() == kQueryList;
}
inline void SparkSqlJob::set_has_query_list() {
  _oneof_case_[0] = kQueryList;
}
inline void SparkSqlJob::clear_query_list() {
  if (has_query_list()) {
    delete queries_.query_list_;
    clear_has_queries();
  }
}
inline ::google::cloud::dataproc::v1::QueryList* SparkSqlJob::release_query_list() {
  // @@protoc_insertion_point(field_release:google.cloud.dataproc.v1.SparkSqlJob.query_list)
  if (has_query_list()) {
    clear_has_queries();
      ::google::cloud::dataproc::v1::QueryList* temp = queries_.query_list_;
    queries_.query_list_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::cloud::dataproc::v1::QueryList& SparkSqlJob::query_list() const {
  // @@protoc_insertion_point(field_get:google.cloud.dataproc.v1.SparkSqlJob.query_list)
  return has_query_list()
      ? *queries_.query_list_
      : *reinterpret_cast< ::google::cloud::dataproc::v1::QueryList*>(&::google::cloud::dataproc::v1::_QueryList_default_instance_);
}
inline ::google::cloud::dataproc::v1::QueryList* SparkSqlJob::mutable_query_list() {
  if (!has_query_list()) {
    clear_queries();
    set_has_query_list();
    queries_.query_list_ = new ::google::cloud::dataproc::v1::QueryList;
  }
  // @@protoc_insertion_point(field_mutable:google.cloud.dataproc.v1.SparkSqlJob.query_list)
  return queries_.query_list_;
}

// map<string, string> script_variables = 3;
inline int SparkSqlJob::script_variables_size() const {
  return script_variables_.size();
}
inline void SparkSqlJob::clear_script_variables() {
  script_variables_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::std::string >&
SparkSqlJob::script_variables() const {
  // @@protoc_insertion_point(field_map:google.cloud.dataproc.v1.SparkSqlJob.script_variables)
  return script_variables_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::std::string >*
SparkSqlJob::mutable_script_variables() {
  // @@protoc_insertion_point(field_mutable_map:google.cloud.dataproc.v1.SparkSqlJob.script_variables)
  return script_variables_.MutableMap();
}

// map<string, string> properties = 4;
inline int SparkSqlJob::properties_size() const {
  return properties_.size();
}
inline void SparkSqlJob::clear_properties() {
  properties_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::std::string >&
SparkSqlJob::properties() const {
  // @@protoc_insertion_point(field_map:google.cloud.dataproc.v1.SparkSqlJob.properties)
  return properties_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::std::string >*
SparkSqlJob::mutable_properties() {
  // @@protoc_insertion_point(field_mutable_map:google.cloud.dataproc.v1.SparkSqlJob.properties)
  return properties_.MutableMap();
}

// repeated string jar_file_uris = 56;
inline int SparkSqlJob::jar_file_uris_size() const {
  return jar_file_uris_.size();
}
inline void SparkSqlJob::clear_jar_file_uris() {
  jar_file_uris_.Clear();
}
inline const ::std::string& SparkSqlJob::jar_file_uris(int index) const {
  // @@protoc_insertion_point(field_get:google.cloud.dataproc.v1.SparkSqlJob.jar_file_uris)
  return jar_file_uris_.Get(index);
}
inline ::std::string* SparkSqlJob::mutable_jar_file_uris(int index) {
  // @@protoc_insertion_point(field_mutable:google.cloud.dataproc.v1.SparkSqlJob.jar_file_uris)
  return jar_file_uris_.Mutable(index);
}
inline void SparkSqlJob::set_jar_file_uris(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:google.cloud.dataproc.v1.SparkSqlJob.jar_file_uris)
  jar_file_uris_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void SparkSqlJob::set_jar_file_uris(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:google.cloud.dataproc.v1.SparkSqlJob.jar_file_uris)
  jar_file_uris_.Mutable(index)->assign(std::move(value));
}
#endif
inline void SparkSqlJob::set_jar_file_uris(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  jar_file_uris_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:google.cloud.dataproc.v1.SparkSqlJob.jar_file_uris)
}
inline void SparkSqlJob::set_jar_file_uris(int index, const char* value, size_t size) {
  jar_file_uris_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:google.cloud.dataproc.v1.SparkSqlJob.jar_file_uris)
}
inline ::std::string* SparkSqlJob::add_jar_file_uris() {
  // @@protoc_insertion_point(field_add_mutable:google.cloud.dataproc.v1.SparkSqlJob.jar_file_uris)
  return jar_file_uris_.Add();
}
inline void SparkSqlJob::add_jar_file_uris(const ::std::string& value) {
  jar_file_uris_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:google.cloud.dataproc.v1.SparkSqlJob.jar_file_uris)
}
#if LANG_CXX11
inline void SparkSqlJob::add_jar_file_uris(::std::string&& value) {
  jar_file_uris_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:google.cloud.dataproc.v1.SparkSqlJob.jar_file_uris)
}
#endif
inline void SparkSqlJob::add_jar_file_uris(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  jar_file_uris_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:google.cloud.dataproc.v1.SparkSqlJob.jar_file_uris)
}
inline void SparkSqlJob::add_jar_file_uris(const char* value, size_t size) {
  jar_file_uris_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:google.cloud.dataproc.v1.SparkSqlJob.jar_file_uris)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
SparkSqlJob::jar_file_uris() const {
  // @@protoc_insertion_point(field_list:google.cloud.dataproc.v1.SparkSqlJob.jar_file_uris)
  return jar_file_uris_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
SparkSqlJob::mutable_jar_file_uris() {
  // @@protoc_insertion_point(field_mutable_list:google.cloud.dataproc.v1.SparkSqlJob.jar_file_uris)
  return &jar_file_uris_;
}

// .google.cloud.dataproc.v1.LoggingConfig logging_config = 6;
inline bool SparkSqlJob::has_logging_config() const {
  return this != internal_default_instance() && logging_config_ != NULL;
}
inline void SparkSqlJob::clear_logging_config() {
  if (GetArenaNoVirtual() == NULL && logging_config_ != NULL) {
    delete logging_config_;
  }
  logging_config_ = NULL;
}
inline const ::google::cloud::dataproc::v1::LoggingConfig& SparkSqlJob::logging_config() const {
  const ::google::cloud::dataproc::v1::LoggingConfig* p = logging_config_;
  // @@protoc_insertion_point(field_get:google.cloud.dataproc.v1.SparkSqlJob.logging_config)
  return p != NULL ? *p : *reinterpret_cast<const ::google::cloud::dataproc::v1::LoggingConfig*>(
      &::google::cloud::dataproc::v1::_LoggingConfig_default_instance_);
}
inline ::google::cloud::dataproc::v1::LoggingConfig* SparkSqlJob::release_logging_config() {
  // @@protoc_insertion_point(field_release:google.cloud.dataproc.v1.SparkSqlJob.logging_config)
  
  ::google::cloud::dataproc::v1::LoggingConfig* temp = logging_config_;
  logging_config_ = NULL;
  return temp;
}
inline ::google::cloud::dataproc::v1::LoggingConfig* SparkSqlJob::mutable_logging_config() {
  
  if (logging_config_ == NULL) {
    logging_config_ = new ::google::cloud::dataproc::v1::LoggingConfig;
  }
  // @@protoc_insertion_point(field_mutable:google.cloud.dataproc.v1.SparkSqlJob.logging_config)
  return logging_config_;
}
inline void SparkSqlJob::set_allocated_logging_config(::google::cloud::dataproc::v1::LoggingConfig* logging_config) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete logging_config_;
  }
  if (logging_config) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      logging_config = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, logging_config, submessage_arena);
    }
    
  } else {
    
  }
  logging_config_ = logging_config;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dataproc.v1.SparkSqlJob.logging_config)
}

inline bool SparkSqlJob::has_queries() const {
  return queries_case() != QUERIES_NOT_SET;
}
inline void SparkSqlJob::clear_has_queries() {
  _oneof_case_[0] = QUERIES_NOT_SET;
}
inline SparkSqlJob::QueriesCase SparkSqlJob::queries_case() const {
  return SparkSqlJob::QueriesCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// PigJob

// string query_file_uri = 1;
inline bool PigJob::has_query_file_uri() const {
  return queries_case() == kQueryFileUri;
}
inline void PigJob::set_has_query_file_uri() {
  _oneof_case_[0] = kQueryFileUri;
}
inline void PigJob::clear_query_file_uri() {
  if (has_query_file_uri()) {
    queries_.query_file_uri_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_queries();
  }
}
inline const ::std::string& PigJob::query_file_uri() const {
  // @@protoc_insertion_point(field_get:google.cloud.dataproc.v1.PigJob.query_file_uri)
  if (has_query_file_uri()) {
    return queries_.query_file_uri_.GetNoArena();
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
inline void PigJob::set_query_file_uri(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:google.cloud.dataproc.v1.PigJob.query_file_uri)
  if (!has_query_file_uri()) {
    clear_queries();
    set_has_query_file_uri();
    queries_.query_file_uri_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  queries_.query_file_uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.cloud.dataproc.v1.PigJob.query_file_uri)
}
#if LANG_CXX11
inline void PigJob::set_query_file_uri(::std::string&& value) {
  // @@protoc_insertion_point(field_set:google.cloud.dataproc.v1.PigJob.query_file_uri)
  if (!has_query_file_uri()) {
    clear_queries();
    set_has_query_file_uri();
    queries_.query_file_uri_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  queries_.query_file_uri_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.dataproc.v1.PigJob.query_file_uri)
}
#endif
inline void PigJob::set_query_file_uri(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  if (!has_query_file_uri()) {
    clear_queries();
    set_has_query_file_uri();
    queries_.query_file_uri_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  queries_.query_file_uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.cloud.dataproc.v1.PigJob.query_file_uri)
}
inline void PigJob::set_query_file_uri(const char* value, size_t size) {
  if (!has_query_file_uri()) {
    clear_queries();
    set_has_query_file_uri();
    queries_.query_file_uri_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  queries_.query_file_uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.cloud.dataproc.v1.PigJob.query_file_uri)
}
inline ::std::string* PigJob::mutable_query_file_uri() {
  if (!has_query_file_uri()) {
    clear_queries();
    set_has_query_file_uri();
    queries_.query_file_uri_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:google.cloud.dataproc.v1.PigJob.query_file_uri)
  return queries_.query_file_uri_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PigJob::release_query_file_uri() {
  // @@protoc_insertion_point(field_release:google.cloud.dataproc.v1.PigJob.query_file_uri)
  if (has_query_file_uri()) {
    clear_has_queries();
    return queries_.query_file_uri_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
inline void PigJob::set_allocated_query_file_uri(::std::string* query_file_uri) {
  if (!has_query_file_uri()) {
    queries_.query_file_uri_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_queries();
  if (query_file_uri != NULL) {
    set_has_query_file_uri();
    queries_.query_file_uri_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        query_file_uri);
  }
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dataproc.v1.PigJob.query_file_uri)
}

// .google.cloud.dataproc.v1.QueryList query_list = 2;
inline bool PigJob::has_query_list() const {
  return queries_case() == kQueryList;
}
inline void PigJob::set_has_query_list() {
  _oneof_case_[0] = kQueryList;
}
inline void PigJob::clear_query_list() {
  if (has_query_list()) {
    delete queries_.query_list_;
    clear_has_queries();
  }
}
inline ::google::cloud::dataproc::v1::QueryList* PigJob::release_query_list() {
  // @@protoc_insertion_point(field_release:google.cloud.dataproc.v1.PigJob.query_list)
  if (has_query_list()) {
    clear_has_queries();
      ::google::cloud::dataproc::v1::QueryList* temp = queries_.query_list_;
    queries_.query_list_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::cloud::dataproc::v1::QueryList& PigJob::query_list() const {
  // @@protoc_insertion_point(field_get:google.cloud.dataproc.v1.PigJob.query_list)
  return has_query_list()
      ? *queries_.query_list_
      : *reinterpret_cast< ::google::cloud::dataproc::v1::QueryList*>(&::google::cloud::dataproc::v1::_QueryList_default_instance_);
}
inline ::google::cloud::dataproc::v1::QueryList* PigJob::mutable_query_list() {
  if (!has_query_list()) {
    clear_queries();
    set_has_query_list();
    queries_.query_list_ = new ::google::cloud::dataproc::v1::QueryList;
  }
  // @@protoc_insertion_point(field_mutable:google.cloud.dataproc.v1.PigJob.query_list)
  return queries_.query_list_;
}

// bool continue_on_failure = 3;
inline void PigJob::clear_continue_on_failure() {
  continue_on_failure_ = false;
}
inline bool PigJob::continue_on_failure() const {
  // @@protoc_insertion_point(field_get:google.cloud.dataproc.v1.PigJob.continue_on_failure)
  return continue_on_failure_;
}
inline void PigJob::set_continue_on_failure(bool value) {
  
  continue_on_failure_ = value;
  // @@protoc_insertion_point(field_set:google.cloud.dataproc.v1.PigJob.continue_on_failure)
}

// map<string, string> script_variables = 4;
inline int PigJob::script_variables_size() const {
  return script_variables_.size();
}
inline void PigJob::clear_script_variables() {
  script_variables_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::std::string >&
PigJob::script_variables() const {
  // @@protoc_insertion_point(field_map:google.cloud.dataproc.v1.PigJob.script_variables)
  return script_variables_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::std::string >*
PigJob::mutable_script_variables() {
  // @@protoc_insertion_point(field_mutable_map:google.cloud.dataproc.v1.PigJob.script_variables)
  return script_variables_.MutableMap();
}

// map<string, string> properties = 5;
inline int PigJob::properties_size() const {
  return properties_.size();
}
inline void PigJob::clear_properties() {
  properties_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::std::string >&
PigJob::properties() const {
  // @@protoc_insertion_point(field_map:google.cloud.dataproc.v1.PigJob.properties)
  return properties_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::std::string >*
PigJob::mutable_properties() {
  // @@protoc_insertion_point(field_mutable_map:google.cloud.dataproc.v1.PigJob.properties)
  return properties_.MutableMap();
}

// repeated string jar_file_uris = 6;
inline int PigJob::jar_file_uris_size() const {
  return jar_file_uris_.size();
}
inline void PigJob::clear_jar_file_uris() {
  jar_file_uris_.Clear();
}
inline const ::std::string& PigJob::jar_file_uris(int index) const {
  // @@protoc_insertion_point(field_get:google.cloud.dataproc.v1.PigJob.jar_file_uris)
  return jar_file_uris_.Get(index);
}
inline ::std::string* PigJob::mutable_jar_file_uris(int index) {
  // @@protoc_insertion_point(field_mutable:google.cloud.dataproc.v1.PigJob.jar_file_uris)
  return jar_file_uris_.Mutable(index);
}
inline void PigJob::set_jar_file_uris(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:google.cloud.dataproc.v1.PigJob.jar_file_uris)
  jar_file_uris_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void PigJob::set_jar_file_uris(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:google.cloud.dataproc.v1.PigJob.jar_file_uris)
  jar_file_uris_.Mutable(index)->assign(std::move(value));
}
#endif
inline void PigJob::set_jar_file_uris(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  jar_file_uris_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:google.cloud.dataproc.v1.PigJob.jar_file_uris)
}
inline void PigJob::set_jar_file_uris(int index, const char* value, size_t size) {
  jar_file_uris_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:google.cloud.dataproc.v1.PigJob.jar_file_uris)
}
inline ::std::string* PigJob::add_jar_file_uris() {
  // @@protoc_insertion_point(field_add_mutable:google.cloud.dataproc.v1.PigJob.jar_file_uris)
  return jar_file_uris_.Add();
}
inline void PigJob::add_jar_file_uris(const ::std::string& value) {
  jar_file_uris_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:google.cloud.dataproc.v1.PigJob.jar_file_uris)
}
#if LANG_CXX11
inline void PigJob::add_jar_file_uris(::std::string&& value) {
  jar_file_uris_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:google.cloud.dataproc.v1.PigJob.jar_file_uris)
}
#endif
inline void PigJob::add_jar_file_uris(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  jar_file_uris_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:google.cloud.dataproc.v1.PigJob.jar_file_uris)
}
inline void PigJob::add_jar_file_uris(const char* value, size_t size) {
  jar_file_uris_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:google.cloud.dataproc.v1.PigJob.jar_file_uris)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
PigJob::jar_file_uris() const {
  // @@protoc_insertion_point(field_list:google.cloud.dataproc.v1.PigJob.jar_file_uris)
  return jar_file_uris_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
PigJob::mutable_jar_file_uris() {
  // @@protoc_insertion_point(field_mutable_list:google.cloud.dataproc.v1.PigJob.jar_file_uris)
  return &jar_file_uris_;
}

// .google.cloud.dataproc.v1.LoggingConfig logging_config = 7;
inline bool PigJob::has_logging_config() const {
  return this != internal_default_instance() && logging_config_ != NULL;
}
inline void PigJob::clear_logging_config() {
  if (GetArenaNoVirtual() == NULL && logging_config_ != NULL) {
    delete logging_config_;
  }
  logging_config_ = NULL;
}
inline const ::google::cloud::dataproc::v1::LoggingConfig& PigJob::logging_config() const {
  const ::google::cloud::dataproc::v1::LoggingConfig* p = logging_config_;
  // @@protoc_insertion_point(field_get:google.cloud.dataproc.v1.PigJob.logging_config)
  return p != NULL ? *p : *reinterpret_cast<const ::google::cloud::dataproc::v1::LoggingConfig*>(
      &::google::cloud::dataproc::v1::_LoggingConfig_default_instance_);
}
inline ::google::cloud::dataproc::v1::LoggingConfig* PigJob::release_logging_config() {
  // @@protoc_insertion_point(field_release:google.cloud.dataproc.v1.PigJob.logging_config)
  
  ::google::cloud::dataproc::v1::LoggingConfig* temp = logging_config_;
  logging_config_ = NULL;
  return temp;
}
inline ::google::cloud::dataproc::v1::LoggingConfig* PigJob::mutable_logging_config() {
  
  if (logging_config_ == NULL) {
    logging_config_ = new ::google::cloud::dataproc::v1::LoggingConfig;
  }
  // @@protoc_insertion_point(field_mutable:google.cloud.dataproc.v1.PigJob.logging_config)
  return logging_config_;
}
inline void PigJob::set_allocated_logging_config(::google::cloud::dataproc::v1::LoggingConfig* logging_config) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete logging_config_;
  }
  if (logging_config) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      logging_config = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, logging_config, submessage_arena);
    }
    
  } else {
    
  }
  logging_config_ = logging_config;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dataproc.v1.PigJob.logging_config)
}

inline bool PigJob::has_queries() const {
  return queries_case() != QUERIES_NOT_SET;
}
inline void PigJob::clear_has_queries() {
  _oneof_case_[0] = QUERIES_NOT_SET;
}
inline PigJob::QueriesCase PigJob::queries_case() const {
  return PigJob::QueriesCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// JobPlacement

// string cluster_name = 1;
inline void JobPlacement::clear_cluster_name() {
  cluster_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& JobPlacement::cluster_name() const {
  // @@protoc_insertion_point(field_get:google.cloud.dataproc.v1.JobPlacement.cluster_name)
  return cluster_name_.GetNoArena();
}
inline void JobPlacement::set_cluster_name(const ::std::string& value) {
  
  cluster_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.cloud.dataproc.v1.JobPlacement.cluster_name)
}
#if LANG_CXX11
inline void JobPlacement::set_cluster_name(::std::string&& value) {
  
  cluster_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.dataproc.v1.JobPlacement.cluster_name)
}
#endif
inline void JobPlacement::set_cluster_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  cluster_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.cloud.dataproc.v1.JobPlacement.cluster_name)
}
inline void JobPlacement::set_cluster_name(const char* value, size_t size) {
  
  cluster_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.cloud.dataproc.v1.JobPlacement.cluster_name)
}
inline ::std::string* JobPlacement::mutable_cluster_name() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.dataproc.v1.JobPlacement.cluster_name)
  return cluster_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* JobPlacement::release_cluster_name() {
  // @@protoc_insertion_point(field_release:google.cloud.dataproc.v1.JobPlacement.cluster_name)
  
  return cluster_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void JobPlacement::set_allocated_cluster_name(::std::string* cluster_name) {
  if (cluster_name != NULL) {
    
  } else {
    
  }
  cluster_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cluster_name);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dataproc.v1.JobPlacement.cluster_name)
}

// string cluster_uuid = 2;
inline void JobPlacement::clear_cluster_uuid() {
  cluster_uuid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& JobPlacement::cluster_uuid() const {
  // @@protoc_insertion_point(field_get:google.cloud.dataproc.v1.JobPlacement.cluster_uuid)
  return cluster_uuid_.GetNoArena();
}
inline void JobPlacement::set_cluster_uuid(const ::std::string& value) {
  
  cluster_uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.cloud.dataproc.v1.JobPlacement.cluster_uuid)
}
#if LANG_CXX11
inline void JobPlacement::set_cluster_uuid(::std::string&& value) {
  
  cluster_uuid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.dataproc.v1.JobPlacement.cluster_uuid)
}
#endif
inline void JobPlacement::set_cluster_uuid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  cluster_uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.cloud.dataproc.v1.JobPlacement.cluster_uuid)
}
inline void JobPlacement::set_cluster_uuid(const char* value, size_t size) {
  
  cluster_uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.cloud.dataproc.v1.JobPlacement.cluster_uuid)
}
inline ::std::string* JobPlacement::mutable_cluster_uuid() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.dataproc.v1.JobPlacement.cluster_uuid)
  return cluster_uuid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* JobPlacement::release_cluster_uuid() {
  // @@protoc_insertion_point(field_release:google.cloud.dataproc.v1.JobPlacement.cluster_uuid)
  
  return cluster_uuid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void JobPlacement::set_allocated_cluster_uuid(::std::string* cluster_uuid) {
  if (cluster_uuid != NULL) {
    
  } else {
    
  }
  cluster_uuid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cluster_uuid);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dataproc.v1.JobPlacement.cluster_uuid)
}

// -------------------------------------------------------------------

// JobStatus

// .google.cloud.dataproc.v1.JobStatus.State state = 1;
inline void JobStatus::clear_state() {
  state_ = 0;
}
inline ::google::cloud::dataproc::v1::JobStatus_State JobStatus::state() const {
  // @@protoc_insertion_point(field_get:google.cloud.dataproc.v1.JobStatus.state)
  return static_cast< ::google::cloud::dataproc::v1::JobStatus_State >(state_);
}
inline void JobStatus::set_state(::google::cloud::dataproc::v1::JobStatus_State value) {
  
  state_ = value;
  // @@protoc_insertion_point(field_set:google.cloud.dataproc.v1.JobStatus.state)
}

// string details = 2;
inline void JobStatus::clear_details() {
  details_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& JobStatus::details() const {
  // @@protoc_insertion_point(field_get:google.cloud.dataproc.v1.JobStatus.details)
  return details_.GetNoArena();
}
inline void JobStatus::set_details(const ::std::string& value) {
  
  details_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.cloud.dataproc.v1.JobStatus.details)
}
#if LANG_CXX11
inline void JobStatus::set_details(::std::string&& value) {
  
  details_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.dataproc.v1.JobStatus.details)
}
#endif
inline void JobStatus::set_details(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  details_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.cloud.dataproc.v1.JobStatus.details)
}
inline void JobStatus::set_details(const char* value, size_t size) {
  
  details_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.cloud.dataproc.v1.JobStatus.details)
}
inline ::std::string* JobStatus::mutable_details() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.dataproc.v1.JobStatus.details)
  return details_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* JobStatus::release_details() {
  // @@protoc_insertion_point(field_release:google.cloud.dataproc.v1.JobStatus.details)
  
  return details_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void JobStatus::set_allocated_details(::std::string* details) {
  if (details != NULL) {
    
  } else {
    
  }
  details_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), details);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dataproc.v1.JobStatus.details)
}

// .google.protobuf.Timestamp state_start_time = 6;
inline bool JobStatus::has_state_start_time() const {
  return this != internal_default_instance() && state_start_time_ != NULL;
}
inline const ::google::protobuf::Timestamp& JobStatus::state_start_time() const {
  const ::google::protobuf::Timestamp* p = state_start_time_;
  // @@protoc_insertion_point(field_get:google.cloud.dataproc.v1.JobStatus.state_start_time)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::Timestamp*>(
      &::google::protobuf::_Timestamp_default_instance_);
}
inline ::google::protobuf::Timestamp* JobStatus::release_state_start_time() {
  // @@protoc_insertion_point(field_release:google.cloud.dataproc.v1.JobStatus.state_start_time)
  
  ::google::protobuf::Timestamp* temp = state_start_time_;
  state_start_time_ = NULL;
  return temp;
}
inline ::google::protobuf::Timestamp* JobStatus::mutable_state_start_time() {
  
  if (state_start_time_ == NULL) {
    state_start_time_ = new ::google::protobuf::Timestamp;
  }
  // @@protoc_insertion_point(field_mutable:google.cloud.dataproc.v1.JobStatus.state_start_time)
  return state_start_time_;
}
inline void JobStatus::set_allocated_state_start_time(::google::protobuf::Timestamp* state_start_time) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(state_start_time_);
  }
  if (state_start_time) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast< ::google::protobuf::MessageLite*>(state_start_time)->GetArena();
    if (message_arena != submessage_arena) {
      state_start_time = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, state_start_time, submessage_arena);
    }
    
  } else {
    
  }
  state_start_time_ = state_start_time;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dataproc.v1.JobStatus.state_start_time)
}

// -------------------------------------------------------------------

// JobReference

// string project_id = 1;
inline void JobReference::clear_project_id() {
  project_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& JobReference::project_id() const {
  // @@protoc_insertion_point(field_get:google.cloud.dataproc.v1.JobReference.project_id)
  return project_id_.GetNoArena();
}
inline void JobReference::set_project_id(const ::std::string& value) {
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.cloud.dataproc.v1.JobReference.project_id)
}
#if LANG_CXX11
inline void JobReference::set_project_id(::std::string&& value) {
  
  project_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.dataproc.v1.JobReference.project_id)
}
#endif
inline void JobReference::set_project_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.cloud.dataproc.v1.JobReference.project_id)
}
inline void JobReference::set_project_id(const char* value, size_t size) {
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.cloud.dataproc.v1.JobReference.project_id)
}
inline ::std::string* JobReference::mutable_project_id() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.dataproc.v1.JobReference.project_id)
  return project_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* JobReference::release_project_id() {
  // @@protoc_insertion_point(field_release:google.cloud.dataproc.v1.JobReference.project_id)
  
  return project_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void JobReference::set_allocated_project_id(::std::string* project_id) {
  if (project_id != NULL) {
    
  } else {
    
  }
  project_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), project_id);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dataproc.v1.JobReference.project_id)
}

// string job_id = 2;
inline void JobReference::clear_job_id() {
  job_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& JobReference::job_id() const {
  // @@protoc_insertion_point(field_get:google.cloud.dataproc.v1.JobReference.job_id)
  return job_id_.GetNoArena();
}
inline void JobReference::set_job_id(const ::std::string& value) {
  
  job_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.cloud.dataproc.v1.JobReference.job_id)
}
#if LANG_CXX11
inline void JobReference::set_job_id(::std::string&& value) {
  
  job_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.dataproc.v1.JobReference.job_id)
}
#endif
inline void JobReference::set_job_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  job_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.cloud.dataproc.v1.JobReference.job_id)
}
inline void JobReference::set_job_id(const char* value, size_t size) {
  
  job_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.cloud.dataproc.v1.JobReference.job_id)
}
inline ::std::string* JobReference::mutable_job_id() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.dataproc.v1.JobReference.job_id)
  return job_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* JobReference::release_job_id() {
  // @@protoc_insertion_point(field_release:google.cloud.dataproc.v1.JobReference.job_id)
  
  return job_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void JobReference::set_allocated_job_id(::std::string* job_id) {
  if (job_id != NULL) {
    
  } else {
    
  }
  job_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), job_id);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dataproc.v1.JobReference.job_id)
}

// -------------------------------------------------------------------

// Job

// .google.cloud.dataproc.v1.JobReference reference = 1;
inline bool Job::has_reference() const {
  return this != internal_default_instance() && reference_ != NULL;
}
inline void Job::clear_reference() {
  if (GetArenaNoVirtual() == NULL && reference_ != NULL) {
    delete reference_;
  }
  reference_ = NULL;
}
inline const ::google::cloud::dataproc::v1::JobReference& Job::reference() const {
  const ::google::cloud::dataproc::v1::JobReference* p = reference_;
  // @@protoc_insertion_point(field_get:google.cloud.dataproc.v1.Job.reference)
  return p != NULL ? *p : *reinterpret_cast<const ::google::cloud::dataproc::v1::JobReference*>(
      &::google::cloud::dataproc::v1::_JobReference_default_instance_);
}
inline ::google::cloud::dataproc::v1::JobReference* Job::release_reference() {
  // @@protoc_insertion_point(field_release:google.cloud.dataproc.v1.Job.reference)
  
  ::google::cloud::dataproc::v1::JobReference* temp = reference_;
  reference_ = NULL;
  return temp;
}
inline ::google::cloud::dataproc::v1::JobReference* Job::mutable_reference() {
  
  if (reference_ == NULL) {
    reference_ = new ::google::cloud::dataproc::v1::JobReference;
  }
  // @@protoc_insertion_point(field_mutable:google.cloud.dataproc.v1.Job.reference)
  return reference_;
}
inline void Job::set_allocated_reference(::google::cloud::dataproc::v1::JobReference* reference) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reference_;
  }
  if (reference) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      reference = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, reference, submessage_arena);
    }
    
  } else {
    
  }
  reference_ = reference;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dataproc.v1.Job.reference)
}

// .google.cloud.dataproc.v1.JobPlacement placement = 2;
inline bool Job::has_placement() const {
  return this != internal_default_instance() && placement_ != NULL;
}
inline void Job::clear_placement() {
  if (GetArenaNoVirtual() == NULL && placement_ != NULL) {
    delete placement_;
  }
  placement_ = NULL;
}
inline const ::google::cloud::dataproc::v1::JobPlacement& Job::placement() const {
  const ::google::cloud::dataproc::v1::JobPlacement* p = placement_;
  // @@protoc_insertion_point(field_get:google.cloud.dataproc.v1.Job.placement)
  return p != NULL ? *p : *reinterpret_cast<const ::google::cloud::dataproc::v1::JobPlacement*>(
      &::google::cloud::dataproc::v1::_JobPlacement_default_instance_);
}
inline ::google::cloud::dataproc::v1::JobPlacement* Job::release_placement() {
  // @@protoc_insertion_point(field_release:google.cloud.dataproc.v1.Job.placement)
  
  ::google::cloud::dataproc::v1::JobPlacement* temp = placement_;
  placement_ = NULL;
  return temp;
}
inline ::google::cloud::dataproc::v1::JobPlacement* Job::mutable_placement() {
  
  if (placement_ == NULL) {
    placement_ = new ::google::cloud::dataproc::v1::JobPlacement;
  }
  // @@protoc_insertion_point(field_mutable:google.cloud.dataproc.v1.Job.placement)
  return placement_;
}
inline void Job::set_allocated_placement(::google::cloud::dataproc::v1::JobPlacement* placement) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete placement_;
  }
  if (placement) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      placement = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, placement, submessage_arena);
    }
    
  } else {
    
  }
  placement_ = placement;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dataproc.v1.Job.placement)
}

// .google.cloud.dataproc.v1.HadoopJob hadoop_job = 3;
inline bool Job::has_hadoop_job() const {
  return type_job_case() == kHadoopJob;
}
inline void Job::set_has_hadoop_job() {
  _oneof_case_[0] = kHadoopJob;
}
inline void Job::clear_hadoop_job() {
  if (has_hadoop_job()) {
    delete type_job_.hadoop_job_;
    clear_has_type_job();
  }
}
inline ::google::cloud::dataproc::v1::HadoopJob* Job::release_hadoop_job() {
  // @@protoc_insertion_point(field_release:google.cloud.dataproc.v1.Job.hadoop_job)
  if (has_hadoop_job()) {
    clear_has_type_job();
      ::google::cloud::dataproc::v1::HadoopJob* temp = type_job_.hadoop_job_;
    type_job_.hadoop_job_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::cloud::dataproc::v1::HadoopJob& Job::hadoop_job() const {
  // @@protoc_insertion_point(field_get:google.cloud.dataproc.v1.Job.hadoop_job)
  return has_hadoop_job()
      ? *type_job_.hadoop_job_
      : *reinterpret_cast< ::google::cloud::dataproc::v1::HadoopJob*>(&::google::cloud::dataproc::v1::_HadoopJob_default_instance_);
}
inline ::google::cloud::dataproc::v1::HadoopJob* Job::mutable_hadoop_job() {
  if (!has_hadoop_job()) {
    clear_type_job();
    set_has_hadoop_job();
    type_job_.hadoop_job_ = new ::google::cloud::dataproc::v1::HadoopJob;
  }
  // @@protoc_insertion_point(field_mutable:google.cloud.dataproc.v1.Job.hadoop_job)
  return type_job_.hadoop_job_;
}

// .google.cloud.dataproc.v1.SparkJob spark_job = 4;
inline bool Job::has_spark_job() const {
  return type_job_case() == kSparkJob;
}
inline void Job::set_has_spark_job() {
  _oneof_case_[0] = kSparkJob;
}
inline void Job::clear_spark_job() {
  if (has_spark_job()) {
    delete type_job_.spark_job_;
    clear_has_type_job();
  }
}
inline ::google::cloud::dataproc::v1::SparkJob* Job::release_spark_job() {
  // @@protoc_insertion_point(field_release:google.cloud.dataproc.v1.Job.spark_job)
  if (has_spark_job()) {
    clear_has_type_job();
      ::google::cloud::dataproc::v1::SparkJob* temp = type_job_.spark_job_;
    type_job_.spark_job_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::cloud::dataproc::v1::SparkJob& Job::spark_job() const {
  // @@protoc_insertion_point(field_get:google.cloud.dataproc.v1.Job.spark_job)
  return has_spark_job()
      ? *type_job_.spark_job_
      : *reinterpret_cast< ::google::cloud::dataproc::v1::SparkJob*>(&::google::cloud::dataproc::v1::_SparkJob_default_instance_);
}
inline ::google::cloud::dataproc::v1::SparkJob* Job::mutable_spark_job() {
  if (!has_spark_job()) {
    clear_type_job();
    set_has_spark_job();
    type_job_.spark_job_ = new ::google::cloud::dataproc::v1::SparkJob;
  }
  // @@protoc_insertion_point(field_mutable:google.cloud.dataproc.v1.Job.spark_job)
  return type_job_.spark_job_;
}

// .google.cloud.dataproc.v1.PySparkJob pyspark_job = 5;
inline bool Job::has_pyspark_job() const {
  return type_job_case() == kPysparkJob;
}
inline void Job::set_has_pyspark_job() {
  _oneof_case_[0] = kPysparkJob;
}
inline void Job::clear_pyspark_job() {
  if (has_pyspark_job()) {
    delete type_job_.pyspark_job_;
    clear_has_type_job();
  }
}
inline ::google::cloud::dataproc::v1::PySparkJob* Job::release_pyspark_job() {
  // @@protoc_insertion_point(field_release:google.cloud.dataproc.v1.Job.pyspark_job)
  if (has_pyspark_job()) {
    clear_has_type_job();
      ::google::cloud::dataproc::v1::PySparkJob* temp = type_job_.pyspark_job_;
    type_job_.pyspark_job_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::cloud::dataproc::v1::PySparkJob& Job::pyspark_job() const {
  // @@protoc_insertion_point(field_get:google.cloud.dataproc.v1.Job.pyspark_job)
  return has_pyspark_job()
      ? *type_job_.pyspark_job_
      : *reinterpret_cast< ::google::cloud::dataproc::v1::PySparkJob*>(&::google::cloud::dataproc::v1::_PySparkJob_default_instance_);
}
inline ::google::cloud::dataproc::v1::PySparkJob* Job::mutable_pyspark_job() {
  if (!has_pyspark_job()) {
    clear_type_job();
    set_has_pyspark_job();
    type_job_.pyspark_job_ = new ::google::cloud::dataproc::v1::PySparkJob;
  }
  // @@protoc_insertion_point(field_mutable:google.cloud.dataproc.v1.Job.pyspark_job)
  return type_job_.pyspark_job_;
}

// .google.cloud.dataproc.v1.HiveJob hive_job = 6;
inline bool Job::has_hive_job() const {
  return type_job_case() == kHiveJob;
}
inline void Job::set_has_hive_job() {
  _oneof_case_[0] = kHiveJob;
}
inline void Job::clear_hive_job() {
  if (has_hive_job()) {
    delete type_job_.hive_job_;
    clear_has_type_job();
  }
}
inline ::google::cloud::dataproc::v1::HiveJob* Job::release_hive_job() {
  // @@protoc_insertion_point(field_release:google.cloud.dataproc.v1.Job.hive_job)
  if (has_hive_job()) {
    clear_has_type_job();
      ::google::cloud::dataproc::v1::HiveJob* temp = type_job_.hive_job_;
    type_job_.hive_job_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::cloud::dataproc::v1::HiveJob& Job::hive_job() const {
  // @@protoc_insertion_point(field_get:google.cloud.dataproc.v1.Job.hive_job)
  return has_hive_job()
      ? *type_job_.hive_job_
      : *reinterpret_cast< ::google::cloud::dataproc::v1::HiveJob*>(&::google::cloud::dataproc::v1::_HiveJob_default_instance_);
}
inline ::google::cloud::dataproc::v1::HiveJob* Job::mutable_hive_job() {
  if (!has_hive_job()) {
    clear_type_job();
    set_has_hive_job();
    type_job_.hive_job_ = new ::google::cloud::dataproc::v1::HiveJob;
  }
  // @@protoc_insertion_point(field_mutable:google.cloud.dataproc.v1.Job.hive_job)
  return type_job_.hive_job_;
}

// .google.cloud.dataproc.v1.PigJob pig_job = 7;
inline bool Job::has_pig_job() const {
  return type_job_case() == kPigJob;
}
inline void Job::set_has_pig_job() {
  _oneof_case_[0] = kPigJob;
}
inline void Job::clear_pig_job() {
  if (has_pig_job()) {
    delete type_job_.pig_job_;
    clear_has_type_job();
  }
}
inline ::google::cloud::dataproc::v1::PigJob* Job::release_pig_job() {
  // @@protoc_insertion_point(field_release:google.cloud.dataproc.v1.Job.pig_job)
  if (has_pig_job()) {
    clear_has_type_job();
      ::google::cloud::dataproc::v1::PigJob* temp = type_job_.pig_job_;
    type_job_.pig_job_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::cloud::dataproc::v1::PigJob& Job::pig_job() const {
  // @@protoc_insertion_point(field_get:google.cloud.dataproc.v1.Job.pig_job)
  return has_pig_job()
      ? *type_job_.pig_job_
      : *reinterpret_cast< ::google::cloud::dataproc::v1::PigJob*>(&::google::cloud::dataproc::v1::_PigJob_default_instance_);
}
inline ::google::cloud::dataproc::v1::PigJob* Job::mutable_pig_job() {
  if (!has_pig_job()) {
    clear_type_job();
    set_has_pig_job();
    type_job_.pig_job_ = new ::google::cloud::dataproc::v1::PigJob;
  }
  // @@protoc_insertion_point(field_mutable:google.cloud.dataproc.v1.Job.pig_job)
  return type_job_.pig_job_;
}

// .google.cloud.dataproc.v1.SparkSqlJob spark_sql_job = 12;
inline bool Job::has_spark_sql_job() const {
  return type_job_case() == kSparkSqlJob;
}
inline void Job::set_has_spark_sql_job() {
  _oneof_case_[0] = kSparkSqlJob;
}
inline void Job::clear_spark_sql_job() {
  if (has_spark_sql_job()) {
    delete type_job_.spark_sql_job_;
    clear_has_type_job();
  }
}
inline ::google::cloud::dataproc::v1::SparkSqlJob* Job::release_spark_sql_job() {
  // @@protoc_insertion_point(field_release:google.cloud.dataproc.v1.Job.spark_sql_job)
  if (has_spark_sql_job()) {
    clear_has_type_job();
      ::google::cloud::dataproc::v1::SparkSqlJob* temp = type_job_.spark_sql_job_;
    type_job_.spark_sql_job_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::cloud::dataproc::v1::SparkSqlJob& Job::spark_sql_job() const {
  // @@protoc_insertion_point(field_get:google.cloud.dataproc.v1.Job.spark_sql_job)
  return has_spark_sql_job()
      ? *type_job_.spark_sql_job_
      : *reinterpret_cast< ::google::cloud::dataproc::v1::SparkSqlJob*>(&::google::cloud::dataproc::v1::_SparkSqlJob_default_instance_);
}
inline ::google::cloud::dataproc::v1::SparkSqlJob* Job::mutable_spark_sql_job() {
  if (!has_spark_sql_job()) {
    clear_type_job();
    set_has_spark_sql_job();
    type_job_.spark_sql_job_ = new ::google::cloud::dataproc::v1::SparkSqlJob;
  }
  // @@protoc_insertion_point(field_mutable:google.cloud.dataproc.v1.Job.spark_sql_job)
  return type_job_.spark_sql_job_;
}

// .google.cloud.dataproc.v1.JobStatus status = 8;
inline bool Job::has_status() const {
  return this != internal_default_instance() && status_ != NULL;
}
inline void Job::clear_status() {
  if (GetArenaNoVirtual() == NULL && status_ != NULL) {
    delete status_;
  }
  status_ = NULL;
}
inline const ::google::cloud::dataproc::v1::JobStatus& Job::status() const {
  const ::google::cloud::dataproc::v1::JobStatus* p = status_;
  // @@protoc_insertion_point(field_get:google.cloud.dataproc.v1.Job.status)
  return p != NULL ? *p : *reinterpret_cast<const ::google::cloud::dataproc::v1::JobStatus*>(
      &::google::cloud::dataproc::v1::_JobStatus_default_instance_);
}
inline ::google::cloud::dataproc::v1::JobStatus* Job::release_status() {
  // @@protoc_insertion_point(field_release:google.cloud.dataproc.v1.Job.status)
  
  ::google::cloud::dataproc::v1::JobStatus* temp = status_;
  status_ = NULL;
  return temp;
}
inline ::google::cloud::dataproc::v1::JobStatus* Job::mutable_status() {
  
  if (status_ == NULL) {
    status_ = new ::google::cloud::dataproc::v1::JobStatus;
  }
  // @@protoc_insertion_point(field_mutable:google.cloud.dataproc.v1.Job.status)
  return status_;
}
inline void Job::set_allocated_status(::google::cloud::dataproc::v1::JobStatus* status) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete status_;
  }
  if (status) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      status = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dataproc.v1.Job.status)
}

// repeated .google.cloud.dataproc.v1.JobStatus status_history = 13;
inline int Job::status_history_size() const {
  return status_history_.size();
}
inline void Job::clear_status_history() {
  status_history_.Clear();
}
inline const ::google::cloud::dataproc::v1::JobStatus& Job::status_history(int index) const {
  // @@protoc_insertion_point(field_get:google.cloud.dataproc.v1.Job.status_history)
  return status_history_.Get(index);
}
inline ::google::cloud::dataproc::v1::JobStatus* Job::mutable_status_history(int index) {
  // @@protoc_insertion_point(field_mutable:google.cloud.dataproc.v1.Job.status_history)
  return status_history_.Mutable(index);
}
inline ::google::cloud::dataproc::v1::JobStatus* Job::add_status_history() {
  // @@protoc_insertion_point(field_add:google.cloud.dataproc.v1.Job.status_history)
  return status_history_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::google::cloud::dataproc::v1::JobStatus >*
Job::mutable_status_history() {
  // @@protoc_insertion_point(field_mutable_list:google.cloud.dataproc.v1.Job.status_history)
  return &status_history_;
}
inline const ::google::protobuf::RepeatedPtrField< ::google::cloud::dataproc::v1::JobStatus >&
Job::status_history() const {
  // @@protoc_insertion_point(field_list:google.cloud.dataproc.v1.Job.status_history)
  return status_history_;
}

// string driver_output_resource_uri = 17;
inline void Job::clear_driver_output_resource_uri() {
  driver_output_resource_uri_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Job::driver_output_resource_uri() const {
  // @@protoc_insertion_point(field_get:google.cloud.dataproc.v1.Job.driver_output_resource_uri)
  return driver_output_resource_uri_.GetNoArena();
}
inline void Job::set_driver_output_resource_uri(const ::std::string& value) {
  
  driver_output_resource_uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.cloud.dataproc.v1.Job.driver_output_resource_uri)
}
#if LANG_CXX11
inline void Job::set_driver_output_resource_uri(::std::string&& value) {
  
  driver_output_resource_uri_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.dataproc.v1.Job.driver_output_resource_uri)
}
#endif
inline void Job::set_driver_output_resource_uri(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  driver_output_resource_uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.cloud.dataproc.v1.Job.driver_output_resource_uri)
}
inline void Job::set_driver_output_resource_uri(const char* value, size_t size) {
  
  driver_output_resource_uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.cloud.dataproc.v1.Job.driver_output_resource_uri)
}
inline ::std::string* Job::mutable_driver_output_resource_uri() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.dataproc.v1.Job.driver_output_resource_uri)
  return driver_output_resource_uri_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Job::release_driver_output_resource_uri() {
  // @@protoc_insertion_point(field_release:google.cloud.dataproc.v1.Job.driver_output_resource_uri)
  
  return driver_output_resource_uri_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Job::set_allocated_driver_output_resource_uri(::std::string* driver_output_resource_uri) {
  if (driver_output_resource_uri != NULL) {
    
  } else {
    
  }
  driver_output_resource_uri_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), driver_output_resource_uri);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dataproc.v1.Job.driver_output_resource_uri)
}

// string driver_control_files_uri = 15;
inline void Job::clear_driver_control_files_uri() {
  driver_control_files_uri_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Job::driver_control_files_uri() const {
  // @@protoc_insertion_point(field_get:google.cloud.dataproc.v1.Job.driver_control_files_uri)
  return driver_control_files_uri_.GetNoArena();
}
inline void Job::set_driver_control_files_uri(const ::std::string& value) {
  
  driver_control_files_uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.cloud.dataproc.v1.Job.driver_control_files_uri)
}
#if LANG_CXX11
inline void Job::set_driver_control_files_uri(::std::string&& value) {
  
  driver_control_files_uri_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.dataproc.v1.Job.driver_control_files_uri)
}
#endif
inline void Job::set_driver_control_files_uri(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  driver_control_files_uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.cloud.dataproc.v1.Job.driver_control_files_uri)
}
inline void Job::set_driver_control_files_uri(const char* value, size_t size) {
  
  driver_control_files_uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.cloud.dataproc.v1.Job.driver_control_files_uri)
}
inline ::std::string* Job::mutable_driver_control_files_uri() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.dataproc.v1.Job.driver_control_files_uri)
  return driver_control_files_uri_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Job::release_driver_control_files_uri() {
  // @@protoc_insertion_point(field_release:google.cloud.dataproc.v1.Job.driver_control_files_uri)
  
  return driver_control_files_uri_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Job::set_allocated_driver_control_files_uri(::std::string* driver_control_files_uri) {
  if (driver_control_files_uri != NULL) {
    
  } else {
    
  }
  driver_control_files_uri_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), driver_control_files_uri);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dataproc.v1.Job.driver_control_files_uri)
}

inline bool Job::has_type_job() const {
  return type_job_case() != TYPE_JOB_NOT_SET;
}
inline void Job::clear_has_type_job() {
  _oneof_case_[0] = TYPE_JOB_NOT_SET;
}
inline Job::TypeJobCase Job::type_job_case() const {
  return Job::TypeJobCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// SubmitJobRequest

// string project_id = 1;
inline void SubmitJobRequest::clear_project_id() {
  project_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SubmitJobRequest::project_id() const {
  // @@protoc_insertion_point(field_get:google.cloud.dataproc.v1.SubmitJobRequest.project_id)
  return project_id_.GetNoArena();
}
inline void SubmitJobRequest::set_project_id(const ::std::string& value) {
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.cloud.dataproc.v1.SubmitJobRequest.project_id)
}
#if LANG_CXX11
inline void SubmitJobRequest::set_project_id(::std::string&& value) {
  
  project_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.dataproc.v1.SubmitJobRequest.project_id)
}
#endif
inline void SubmitJobRequest::set_project_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.cloud.dataproc.v1.SubmitJobRequest.project_id)
}
inline void SubmitJobRequest::set_project_id(const char* value, size_t size) {
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.cloud.dataproc.v1.SubmitJobRequest.project_id)
}
inline ::std::string* SubmitJobRequest::mutable_project_id() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.dataproc.v1.SubmitJobRequest.project_id)
  return project_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SubmitJobRequest::release_project_id() {
  // @@protoc_insertion_point(field_release:google.cloud.dataproc.v1.SubmitJobRequest.project_id)
  
  return project_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SubmitJobRequest::set_allocated_project_id(::std::string* project_id) {
  if (project_id != NULL) {
    
  } else {
    
  }
  project_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), project_id);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dataproc.v1.SubmitJobRequest.project_id)
}

// string region = 3;
inline void SubmitJobRequest::clear_region() {
  region_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SubmitJobRequest::region() const {
  // @@protoc_insertion_point(field_get:google.cloud.dataproc.v1.SubmitJobRequest.region)
  return region_.GetNoArena();
}
inline void SubmitJobRequest::set_region(const ::std::string& value) {
  
  region_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.cloud.dataproc.v1.SubmitJobRequest.region)
}
#if LANG_CXX11
inline void SubmitJobRequest::set_region(::std::string&& value) {
  
  region_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.dataproc.v1.SubmitJobRequest.region)
}
#endif
inline void SubmitJobRequest::set_region(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  region_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.cloud.dataproc.v1.SubmitJobRequest.region)
}
inline void SubmitJobRequest::set_region(const char* value, size_t size) {
  
  region_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.cloud.dataproc.v1.SubmitJobRequest.region)
}
inline ::std::string* SubmitJobRequest::mutable_region() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.dataproc.v1.SubmitJobRequest.region)
  return region_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SubmitJobRequest::release_region() {
  // @@protoc_insertion_point(field_release:google.cloud.dataproc.v1.SubmitJobRequest.region)
  
  return region_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SubmitJobRequest::set_allocated_region(::std::string* region) {
  if (region != NULL) {
    
  } else {
    
  }
  region_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), region);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dataproc.v1.SubmitJobRequest.region)
}

// .google.cloud.dataproc.v1.Job job = 2;
inline bool SubmitJobRequest::has_job() const {
  return this != internal_default_instance() && job_ != NULL;
}
inline void SubmitJobRequest::clear_job() {
  if (GetArenaNoVirtual() == NULL && job_ != NULL) {
    delete job_;
  }
  job_ = NULL;
}
inline const ::google::cloud::dataproc::v1::Job& SubmitJobRequest::job() const {
  const ::google::cloud::dataproc::v1::Job* p = job_;
  // @@protoc_insertion_point(field_get:google.cloud.dataproc.v1.SubmitJobRequest.job)
  return p != NULL ? *p : *reinterpret_cast<const ::google::cloud::dataproc::v1::Job*>(
      &::google::cloud::dataproc::v1::_Job_default_instance_);
}
inline ::google::cloud::dataproc::v1::Job* SubmitJobRequest::release_job() {
  // @@protoc_insertion_point(field_release:google.cloud.dataproc.v1.SubmitJobRequest.job)
  
  ::google::cloud::dataproc::v1::Job* temp = job_;
  job_ = NULL;
  return temp;
}
inline ::google::cloud::dataproc::v1::Job* SubmitJobRequest::mutable_job() {
  
  if (job_ == NULL) {
    job_ = new ::google::cloud::dataproc::v1::Job;
  }
  // @@protoc_insertion_point(field_mutable:google.cloud.dataproc.v1.SubmitJobRequest.job)
  return job_;
}
inline void SubmitJobRequest::set_allocated_job(::google::cloud::dataproc::v1::Job* job) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete job_;
  }
  if (job) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      job = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, job, submessage_arena);
    }
    
  } else {
    
  }
  job_ = job;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dataproc.v1.SubmitJobRequest.job)
}

// -------------------------------------------------------------------

// GetJobRequest

// string project_id = 1;
inline void GetJobRequest::clear_project_id() {
  project_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetJobRequest::project_id() const {
  // @@protoc_insertion_point(field_get:google.cloud.dataproc.v1.GetJobRequest.project_id)
  return project_id_.GetNoArena();
}
inline void GetJobRequest::set_project_id(const ::std::string& value) {
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.cloud.dataproc.v1.GetJobRequest.project_id)
}
#if LANG_CXX11
inline void GetJobRequest::set_project_id(::std::string&& value) {
  
  project_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.dataproc.v1.GetJobRequest.project_id)
}
#endif
inline void GetJobRequest::set_project_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.cloud.dataproc.v1.GetJobRequest.project_id)
}
inline void GetJobRequest::set_project_id(const char* value, size_t size) {
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.cloud.dataproc.v1.GetJobRequest.project_id)
}
inline ::std::string* GetJobRequest::mutable_project_id() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.dataproc.v1.GetJobRequest.project_id)
  return project_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetJobRequest::release_project_id() {
  // @@protoc_insertion_point(field_release:google.cloud.dataproc.v1.GetJobRequest.project_id)
  
  return project_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetJobRequest::set_allocated_project_id(::std::string* project_id) {
  if (project_id != NULL) {
    
  } else {
    
  }
  project_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), project_id);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dataproc.v1.GetJobRequest.project_id)
}

// string region = 3;
inline void GetJobRequest::clear_region() {
  region_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetJobRequest::region() const {
  // @@protoc_insertion_point(field_get:google.cloud.dataproc.v1.GetJobRequest.region)
  return region_.GetNoArena();
}
inline void GetJobRequest::set_region(const ::std::string& value) {
  
  region_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.cloud.dataproc.v1.GetJobRequest.region)
}
#if LANG_CXX11
inline void GetJobRequest::set_region(::std::string&& value) {
  
  region_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.dataproc.v1.GetJobRequest.region)
}
#endif
inline void GetJobRequest::set_region(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  region_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.cloud.dataproc.v1.GetJobRequest.region)
}
inline void GetJobRequest::set_region(const char* value, size_t size) {
  
  region_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.cloud.dataproc.v1.GetJobRequest.region)
}
inline ::std::string* GetJobRequest::mutable_region() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.dataproc.v1.GetJobRequest.region)
  return region_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetJobRequest::release_region() {
  // @@protoc_insertion_point(field_release:google.cloud.dataproc.v1.GetJobRequest.region)
  
  return region_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetJobRequest::set_allocated_region(::std::string* region) {
  if (region != NULL) {
    
  } else {
    
  }
  region_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), region);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dataproc.v1.GetJobRequest.region)
}

// string job_id = 2;
inline void GetJobRequest::clear_job_id() {
  job_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetJobRequest::job_id() const {
  // @@protoc_insertion_point(field_get:google.cloud.dataproc.v1.GetJobRequest.job_id)
  return job_id_.GetNoArena();
}
inline void GetJobRequest::set_job_id(const ::std::string& value) {
  
  job_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.cloud.dataproc.v1.GetJobRequest.job_id)
}
#if LANG_CXX11
inline void GetJobRequest::set_job_id(::std::string&& value) {
  
  job_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.dataproc.v1.GetJobRequest.job_id)
}
#endif
inline void GetJobRequest::set_job_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  job_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.cloud.dataproc.v1.GetJobRequest.job_id)
}
inline void GetJobRequest::set_job_id(const char* value, size_t size) {
  
  job_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.cloud.dataproc.v1.GetJobRequest.job_id)
}
inline ::std::string* GetJobRequest::mutable_job_id() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.dataproc.v1.GetJobRequest.job_id)
  return job_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetJobRequest::release_job_id() {
  // @@protoc_insertion_point(field_release:google.cloud.dataproc.v1.GetJobRequest.job_id)
  
  return job_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetJobRequest::set_allocated_job_id(::std::string* job_id) {
  if (job_id != NULL) {
    
  } else {
    
  }
  job_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), job_id);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dataproc.v1.GetJobRequest.job_id)
}

// -------------------------------------------------------------------

// ListJobsRequest

// string project_id = 1;
inline void ListJobsRequest::clear_project_id() {
  project_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ListJobsRequest::project_id() const {
  // @@protoc_insertion_point(field_get:google.cloud.dataproc.v1.ListJobsRequest.project_id)
  return project_id_.GetNoArena();
}
inline void ListJobsRequest::set_project_id(const ::std::string& value) {
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.cloud.dataproc.v1.ListJobsRequest.project_id)
}
#if LANG_CXX11
inline void ListJobsRequest::set_project_id(::std::string&& value) {
  
  project_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.dataproc.v1.ListJobsRequest.project_id)
}
#endif
inline void ListJobsRequest::set_project_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.cloud.dataproc.v1.ListJobsRequest.project_id)
}
inline void ListJobsRequest::set_project_id(const char* value, size_t size) {
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.cloud.dataproc.v1.ListJobsRequest.project_id)
}
inline ::std::string* ListJobsRequest::mutable_project_id() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.dataproc.v1.ListJobsRequest.project_id)
  return project_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ListJobsRequest::release_project_id() {
  // @@protoc_insertion_point(field_release:google.cloud.dataproc.v1.ListJobsRequest.project_id)
  
  return project_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ListJobsRequest::set_allocated_project_id(::std::string* project_id) {
  if (project_id != NULL) {
    
  } else {
    
  }
  project_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), project_id);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dataproc.v1.ListJobsRequest.project_id)
}

// string region = 6;
inline void ListJobsRequest::clear_region() {
  region_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ListJobsRequest::region() const {
  // @@protoc_insertion_point(field_get:google.cloud.dataproc.v1.ListJobsRequest.region)
  return region_.GetNoArena();
}
inline void ListJobsRequest::set_region(const ::std::string& value) {
  
  region_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.cloud.dataproc.v1.ListJobsRequest.region)
}
#if LANG_CXX11
inline void ListJobsRequest::set_region(::std::string&& value) {
  
  region_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.dataproc.v1.ListJobsRequest.region)
}
#endif
inline void ListJobsRequest::set_region(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  region_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.cloud.dataproc.v1.ListJobsRequest.region)
}
inline void ListJobsRequest::set_region(const char* value, size_t size) {
  
  region_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.cloud.dataproc.v1.ListJobsRequest.region)
}
inline ::std::string* ListJobsRequest::mutable_region() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.dataproc.v1.ListJobsRequest.region)
  return region_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ListJobsRequest::release_region() {
  // @@protoc_insertion_point(field_release:google.cloud.dataproc.v1.ListJobsRequest.region)
  
  return region_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ListJobsRequest::set_allocated_region(::std::string* region) {
  if (region != NULL) {
    
  } else {
    
  }
  region_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), region);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dataproc.v1.ListJobsRequest.region)
}

// int32 page_size = 2;
inline void ListJobsRequest::clear_page_size() {
  page_size_ = 0;
}
inline ::google::protobuf::int32 ListJobsRequest::page_size() const {
  // @@protoc_insertion_point(field_get:google.cloud.dataproc.v1.ListJobsRequest.page_size)
  return page_size_;
}
inline void ListJobsRequest::set_page_size(::google::protobuf::int32 value) {
  
  page_size_ = value;
  // @@protoc_insertion_point(field_set:google.cloud.dataproc.v1.ListJobsRequest.page_size)
}

// string page_token = 3;
inline void ListJobsRequest::clear_page_token() {
  page_token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ListJobsRequest::page_token() const {
  // @@protoc_insertion_point(field_get:google.cloud.dataproc.v1.ListJobsRequest.page_token)
  return page_token_.GetNoArena();
}
inline void ListJobsRequest::set_page_token(const ::std::string& value) {
  
  page_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.cloud.dataproc.v1.ListJobsRequest.page_token)
}
#if LANG_CXX11
inline void ListJobsRequest::set_page_token(::std::string&& value) {
  
  page_token_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.dataproc.v1.ListJobsRequest.page_token)
}
#endif
inline void ListJobsRequest::set_page_token(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  page_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.cloud.dataproc.v1.ListJobsRequest.page_token)
}
inline void ListJobsRequest::set_page_token(const char* value, size_t size) {
  
  page_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.cloud.dataproc.v1.ListJobsRequest.page_token)
}
inline ::std::string* ListJobsRequest::mutable_page_token() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.dataproc.v1.ListJobsRequest.page_token)
  return page_token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ListJobsRequest::release_page_token() {
  // @@protoc_insertion_point(field_release:google.cloud.dataproc.v1.ListJobsRequest.page_token)
  
  return page_token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ListJobsRequest::set_allocated_page_token(::std::string* page_token) {
  if (page_token != NULL) {
    
  } else {
    
  }
  page_token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), page_token);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dataproc.v1.ListJobsRequest.page_token)
}

// string cluster_name = 4;
inline void ListJobsRequest::clear_cluster_name() {
  cluster_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ListJobsRequest::cluster_name() const {
  // @@protoc_insertion_point(field_get:google.cloud.dataproc.v1.ListJobsRequest.cluster_name)
  return cluster_name_.GetNoArena();
}
inline void ListJobsRequest::set_cluster_name(const ::std::string& value) {
  
  cluster_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.cloud.dataproc.v1.ListJobsRequest.cluster_name)
}
#if LANG_CXX11
inline void ListJobsRequest::set_cluster_name(::std::string&& value) {
  
  cluster_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.dataproc.v1.ListJobsRequest.cluster_name)
}
#endif
inline void ListJobsRequest::set_cluster_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  cluster_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.cloud.dataproc.v1.ListJobsRequest.cluster_name)
}
inline void ListJobsRequest::set_cluster_name(const char* value, size_t size) {
  
  cluster_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.cloud.dataproc.v1.ListJobsRequest.cluster_name)
}
inline ::std::string* ListJobsRequest::mutable_cluster_name() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.dataproc.v1.ListJobsRequest.cluster_name)
  return cluster_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ListJobsRequest::release_cluster_name() {
  // @@protoc_insertion_point(field_release:google.cloud.dataproc.v1.ListJobsRequest.cluster_name)
  
  return cluster_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ListJobsRequest::set_allocated_cluster_name(::std::string* cluster_name) {
  if (cluster_name != NULL) {
    
  } else {
    
  }
  cluster_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cluster_name);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dataproc.v1.ListJobsRequest.cluster_name)
}

// .google.cloud.dataproc.v1.ListJobsRequest.JobStateMatcher job_state_matcher = 5;
inline void ListJobsRequest::clear_job_state_matcher() {
  job_state_matcher_ = 0;
}
inline ::google::cloud::dataproc::v1::ListJobsRequest_JobStateMatcher ListJobsRequest::job_state_matcher() const {
  // @@protoc_insertion_point(field_get:google.cloud.dataproc.v1.ListJobsRequest.job_state_matcher)
  return static_cast< ::google::cloud::dataproc::v1::ListJobsRequest_JobStateMatcher >(job_state_matcher_);
}
inline void ListJobsRequest::set_job_state_matcher(::google::cloud::dataproc::v1::ListJobsRequest_JobStateMatcher value) {
  
  job_state_matcher_ = value;
  // @@protoc_insertion_point(field_set:google.cloud.dataproc.v1.ListJobsRequest.job_state_matcher)
}

// -------------------------------------------------------------------

// ListJobsResponse

// repeated .google.cloud.dataproc.v1.Job jobs = 1;
inline int ListJobsResponse::jobs_size() const {
  return jobs_.size();
}
inline void ListJobsResponse::clear_jobs() {
  jobs_.Clear();
}
inline const ::google::cloud::dataproc::v1::Job& ListJobsResponse::jobs(int index) const {
  // @@protoc_insertion_point(field_get:google.cloud.dataproc.v1.ListJobsResponse.jobs)
  return jobs_.Get(index);
}
inline ::google::cloud::dataproc::v1::Job* ListJobsResponse::mutable_jobs(int index) {
  // @@protoc_insertion_point(field_mutable:google.cloud.dataproc.v1.ListJobsResponse.jobs)
  return jobs_.Mutable(index);
}
inline ::google::cloud::dataproc::v1::Job* ListJobsResponse::add_jobs() {
  // @@protoc_insertion_point(field_add:google.cloud.dataproc.v1.ListJobsResponse.jobs)
  return jobs_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::google::cloud::dataproc::v1::Job >*
ListJobsResponse::mutable_jobs() {
  // @@protoc_insertion_point(field_mutable_list:google.cloud.dataproc.v1.ListJobsResponse.jobs)
  return &jobs_;
}
inline const ::google::protobuf::RepeatedPtrField< ::google::cloud::dataproc::v1::Job >&
ListJobsResponse::jobs() const {
  // @@protoc_insertion_point(field_list:google.cloud.dataproc.v1.ListJobsResponse.jobs)
  return jobs_;
}

// string next_page_token = 2;
inline void ListJobsResponse::clear_next_page_token() {
  next_page_token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ListJobsResponse::next_page_token() const {
  // @@protoc_insertion_point(field_get:google.cloud.dataproc.v1.ListJobsResponse.next_page_token)
  return next_page_token_.GetNoArena();
}
inline void ListJobsResponse::set_next_page_token(const ::std::string& value) {
  
  next_page_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.cloud.dataproc.v1.ListJobsResponse.next_page_token)
}
#if LANG_CXX11
inline void ListJobsResponse::set_next_page_token(::std::string&& value) {
  
  next_page_token_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.dataproc.v1.ListJobsResponse.next_page_token)
}
#endif
inline void ListJobsResponse::set_next_page_token(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  next_page_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.cloud.dataproc.v1.ListJobsResponse.next_page_token)
}
inline void ListJobsResponse::set_next_page_token(const char* value, size_t size) {
  
  next_page_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.cloud.dataproc.v1.ListJobsResponse.next_page_token)
}
inline ::std::string* ListJobsResponse::mutable_next_page_token() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.dataproc.v1.ListJobsResponse.next_page_token)
  return next_page_token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ListJobsResponse::release_next_page_token() {
  // @@protoc_insertion_point(field_release:google.cloud.dataproc.v1.ListJobsResponse.next_page_token)
  
  return next_page_token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ListJobsResponse::set_allocated_next_page_token(::std::string* next_page_token) {
  if (next_page_token != NULL) {
    
  } else {
    
  }
  next_page_token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), next_page_token);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dataproc.v1.ListJobsResponse.next_page_token)
}

// -------------------------------------------------------------------

// CancelJobRequest

// string project_id = 1;
inline void CancelJobRequest::clear_project_id() {
  project_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CancelJobRequest::project_id() const {
  // @@protoc_insertion_point(field_get:google.cloud.dataproc.v1.CancelJobRequest.project_id)
  return project_id_.GetNoArena();
}
inline void CancelJobRequest::set_project_id(const ::std::string& value) {
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.cloud.dataproc.v1.CancelJobRequest.project_id)
}
#if LANG_CXX11
inline void CancelJobRequest::set_project_id(::std::string&& value) {
  
  project_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.dataproc.v1.CancelJobRequest.project_id)
}
#endif
inline void CancelJobRequest::set_project_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.cloud.dataproc.v1.CancelJobRequest.project_id)
}
inline void CancelJobRequest::set_project_id(const char* value, size_t size) {
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.cloud.dataproc.v1.CancelJobRequest.project_id)
}
inline ::std::string* CancelJobRequest::mutable_project_id() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.dataproc.v1.CancelJobRequest.project_id)
  return project_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CancelJobRequest::release_project_id() {
  // @@protoc_insertion_point(field_release:google.cloud.dataproc.v1.CancelJobRequest.project_id)
  
  return project_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CancelJobRequest::set_allocated_project_id(::std::string* project_id) {
  if (project_id != NULL) {
    
  } else {
    
  }
  project_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), project_id);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dataproc.v1.CancelJobRequest.project_id)
}

// string region = 3;
inline void CancelJobRequest::clear_region() {
  region_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CancelJobRequest::region() const {
  // @@protoc_insertion_point(field_get:google.cloud.dataproc.v1.CancelJobRequest.region)
  return region_.GetNoArena();
}
inline void CancelJobRequest::set_region(const ::std::string& value) {
  
  region_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.cloud.dataproc.v1.CancelJobRequest.region)
}
#if LANG_CXX11
inline void CancelJobRequest::set_region(::std::string&& value) {
  
  region_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.dataproc.v1.CancelJobRequest.region)
}
#endif
inline void CancelJobRequest::set_region(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  region_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.cloud.dataproc.v1.CancelJobRequest.region)
}
inline void CancelJobRequest::set_region(const char* value, size_t size) {
  
  region_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.cloud.dataproc.v1.CancelJobRequest.region)
}
inline ::std::string* CancelJobRequest::mutable_region() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.dataproc.v1.CancelJobRequest.region)
  return region_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CancelJobRequest::release_region() {
  // @@protoc_insertion_point(field_release:google.cloud.dataproc.v1.CancelJobRequest.region)
  
  return region_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CancelJobRequest::set_allocated_region(::std::string* region) {
  if (region != NULL) {
    
  } else {
    
  }
  region_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), region);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dataproc.v1.CancelJobRequest.region)
}

// string job_id = 2;
inline void CancelJobRequest::clear_job_id() {
  job_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CancelJobRequest::job_id() const {
  // @@protoc_insertion_point(field_get:google.cloud.dataproc.v1.CancelJobRequest.job_id)
  return job_id_.GetNoArena();
}
inline void CancelJobRequest::set_job_id(const ::std::string& value) {
  
  job_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.cloud.dataproc.v1.CancelJobRequest.job_id)
}
#if LANG_CXX11
inline void CancelJobRequest::set_job_id(::std::string&& value) {
  
  job_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.dataproc.v1.CancelJobRequest.job_id)
}
#endif
inline void CancelJobRequest::set_job_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  job_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.cloud.dataproc.v1.CancelJobRequest.job_id)
}
inline void CancelJobRequest::set_job_id(const char* value, size_t size) {
  
  job_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.cloud.dataproc.v1.CancelJobRequest.job_id)
}
inline ::std::string* CancelJobRequest::mutable_job_id() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.dataproc.v1.CancelJobRequest.job_id)
  return job_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CancelJobRequest::release_job_id() {
  // @@protoc_insertion_point(field_release:google.cloud.dataproc.v1.CancelJobRequest.job_id)
  
  return job_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CancelJobRequest::set_allocated_job_id(::std::string* job_id) {
  if (job_id != NULL) {
    
  } else {
    
  }
  job_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), job_id);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dataproc.v1.CancelJobRequest.job_id)
}

// -------------------------------------------------------------------

// DeleteJobRequest

// string project_id = 1;
inline void DeleteJobRequest::clear_project_id() {
  project_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DeleteJobRequest::project_id() const {
  // @@protoc_insertion_point(field_get:google.cloud.dataproc.v1.DeleteJobRequest.project_id)
  return project_id_.GetNoArena();
}
inline void DeleteJobRequest::set_project_id(const ::std::string& value) {
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.cloud.dataproc.v1.DeleteJobRequest.project_id)
}
#if LANG_CXX11
inline void DeleteJobRequest::set_project_id(::std::string&& value) {
  
  project_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.dataproc.v1.DeleteJobRequest.project_id)
}
#endif
inline void DeleteJobRequest::set_project_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.cloud.dataproc.v1.DeleteJobRequest.project_id)
}
inline void DeleteJobRequest::set_project_id(const char* value, size_t size) {
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.cloud.dataproc.v1.DeleteJobRequest.project_id)
}
inline ::std::string* DeleteJobRequest::mutable_project_id() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.dataproc.v1.DeleteJobRequest.project_id)
  return project_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DeleteJobRequest::release_project_id() {
  // @@protoc_insertion_point(field_release:google.cloud.dataproc.v1.DeleteJobRequest.project_id)
  
  return project_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DeleteJobRequest::set_allocated_project_id(::std::string* project_id) {
  if (project_id != NULL) {
    
  } else {
    
  }
  project_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), project_id);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dataproc.v1.DeleteJobRequest.project_id)
}

// string region = 3;
inline void DeleteJobRequest::clear_region() {
  region_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DeleteJobRequest::region() const {
  // @@protoc_insertion_point(field_get:google.cloud.dataproc.v1.DeleteJobRequest.region)
  return region_.GetNoArena();
}
inline void DeleteJobRequest::set_region(const ::std::string& value) {
  
  region_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.cloud.dataproc.v1.DeleteJobRequest.region)
}
#if LANG_CXX11
inline void DeleteJobRequest::set_region(::std::string&& value) {
  
  region_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.dataproc.v1.DeleteJobRequest.region)
}
#endif
inline void DeleteJobRequest::set_region(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  region_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.cloud.dataproc.v1.DeleteJobRequest.region)
}
inline void DeleteJobRequest::set_region(const char* value, size_t size) {
  
  region_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.cloud.dataproc.v1.DeleteJobRequest.region)
}
inline ::std::string* DeleteJobRequest::mutable_region() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.dataproc.v1.DeleteJobRequest.region)
  return region_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DeleteJobRequest::release_region() {
  // @@protoc_insertion_point(field_release:google.cloud.dataproc.v1.DeleteJobRequest.region)
  
  return region_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DeleteJobRequest::set_allocated_region(::std::string* region) {
  if (region != NULL) {
    
  } else {
    
  }
  region_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), region);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dataproc.v1.DeleteJobRequest.region)
}

// string job_id = 2;
inline void DeleteJobRequest::clear_job_id() {
  job_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DeleteJobRequest::job_id() const {
  // @@protoc_insertion_point(field_get:google.cloud.dataproc.v1.DeleteJobRequest.job_id)
  return job_id_.GetNoArena();
}
inline void DeleteJobRequest::set_job_id(const ::std::string& value) {
  
  job_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.cloud.dataproc.v1.DeleteJobRequest.job_id)
}
#if LANG_CXX11
inline void DeleteJobRequest::set_job_id(::std::string&& value) {
  
  job_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.dataproc.v1.DeleteJobRequest.job_id)
}
#endif
inline void DeleteJobRequest::set_job_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  job_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.cloud.dataproc.v1.DeleteJobRequest.job_id)
}
inline void DeleteJobRequest::set_job_id(const char* value, size_t size) {
  
  job_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.cloud.dataproc.v1.DeleteJobRequest.job_id)
}
inline ::std::string* DeleteJobRequest::mutable_job_id() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.dataproc.v1.DeleteJobRequest.job_id)
  return job_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DeleteJobRequest::release_job_id() {
  // @@protoc_insertion_point(field_release:google.cloud.dataproc.v1.DeleteJobRequest.job_id)
  
  return job_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DeleteJobRequest::set_allocated_job_id(::std::string* job_id) {
  if (job_id != NULL) {
    
  } else {
    
  }
  job_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), job_id);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dataproc.v1.DeleteJobRequest.job_id)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace dataproc
}  // namespace cloud
}  // namespace google

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::google::cloud::dataproc::v1::LoggingConfig_Level> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::google::cloud::dataproc::v1::LoggingConfig_Level>() {
  return ::google::cloud::dataproc::v1::LoggingConfig_Level_descriptor();
}
template <> struct is_proto_enum< ::google::cloud::dataproc::v1::JobStatus_State> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::google::cloud::dataproc::v1::JobStatus_State>() {
  return ::google::cloud::dataproc::v1::JobStatus_State_descriptor();
}
template <> struct is_proto_enum< ::google::cloud::dataproc::v1::ListJobsRequest_JobStateMatcher> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::google::cloud::dataproc::v1::ListJobsRequest_JobStateMatcher>() {
  return ::google::cloud::dataproc::v1::ListJobsRequest_JobStateMatcher_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_google_2fcloud_2fdataproc_2fv1_2fjobs_2eproto__INCLUDED
