// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/datastore/v1/query.proto

#ifndef PROTOBUF_google_2fdatastore_2fv1_2fquery_2eproto__INCLUDED
#define PROTOBUF_google_2fdatastore_2fv1_2fquery_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "google/api/annotations.pb.h"
#include "google/datastore/v1/entity.pb.h"
#include <google/protobuf/wrappers.pb.h>
#include "google/type/latlng.pb.h"
// @@protoc_insertion_point(includes)

namespace protobuf_google_2fdatastore_2fv1_2fquery_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[13];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsEntityResultImpl();
void InitDefaultsEntityResult();
void InitDefaultsQueryImpl();
void InitDefaultsQuery();
void InitDefaultsKindExpressionImpl();
void InitDefaultsKindExpression();
void InitDefaultsPropertyReferenceImpl();
void InitDefaultsPropertyReference();
void InitDefaultsProjectionImpl();
void InitDefaultsProjection();
void InitDefaultsPropertyOrderImpl();
void InitDefaultsPropertyOrder();
void InitDefaultsCompositeFilterImpl();
void InitDefaultsCompositeFilter();
void InitDefaultsPropertyFilterImpl();
void InitDefaultsPropertyFilter();
void InitDefaultsGqlQuery_NamedBindingsEntry_DoNotUseImpl();
void InitDefaultsGqlQuery_NamedBindingsEntry_DoNotUse();
void InitDefaultsGqlQueryImpl();
void InitDefaultsGqlQuery();
void InitDefaultsGqlQueryParameterImpl();
void InitDefaultsGqlQueryParameter();
void InitDefaultsQueryResultBatchImpl();
void InitDefaultsQueryResultBatch();
inline void InitDefaults() {
  InitDefaultsEntityResult();
  InitDefaultsQuery();
  InitDefaultsKindExpression();
  InitDefaultsPropertyReference();
  InitDefaultsProjection();
  InitDefaultsPropertyOrder();
  InitDefaultsCompositeFilter();
  InitDefaultsPropertyFilter();
  InitDefaultsGqlQuery_NamedBindingsEntry_DoNotUse();
  InitDefaultsGqlQuery();
  InitDefaultsGqlQueryParameter();
  InitDefaultsQueryResultBatch();
}
}  // namespace protobuf_google_2fdatastore_2fv1_2fquery_2eproto
namespace google {
namespace datastore {
namespace v1 {
class CompositeFilter;
class CompositeFilterDefaultTypeInternal;
extern CompositeFilterDefaultTypeInternal _CompositeFilter_default_instance_;
class EntityResult;
class EntityResultDefaultTypeInternal;
extern EntityResultDefaultTypeInternal _EntityResult_default_instance_;
class Filter;
class FilterDefaultTypeInternal;
extern FilterDefaultTypeInternal _Filter_default_instance_;
class GqlQuery;
class GqlQueryDefaultTypeInternal;
extern GqlQueryDefaultTypeInternal _GqlQuery_default_instance_;
class GqlQueryParameter;
class GqlQueryParameterDefaultTypeInternal;
extern GqlQueryParameterDefaultTypeInternal _GqlQueryParameter_default_instance_;
class GqlQuery_NamedBindingsEntry_DoNotUse;
class GqlQuery_NamedBindingsEntry_DoNotUseDefaultTypeInternal;
extern GqlQuery_NamedBindingsEntry_DoNotUseDefaultTypeInternal _GqlQuery_NamedBindingsEntry_DoNotUse_default_instance_;
class KindExpression;
class KindExpressionDefaultTypeInternal;
extern KindExpressionDefaultTypeInternal _KindExpression_default_instance_;
class Projection;
class ProjectionDefaultTypeInternal;
extern ProjectionDefaultTypeInternal _Projection_default_instance_;
class PropertyFilter;
class PropertyFilterDefaultTypeInternal;
extern PropertyFilterDefaultTypeInternal _PropertyFilter_default_instance_;
class PropertyOrder;
class PropertyOrderDefaultTypeInternal;
extern PropertyOrderDefaultTypeInternal _PropertyOrder_default_instance_;
class PropertyReference;
class PropertyReferenceDefaultTypeInternal;
extern PropertyReferenceDefaultTypeInternal _PropertyReference_default_instance_;
class Query;
class QueryDefaultTypeInternal;
extern QueryDefaultTypeInternal _Query_default_instance_;
class QueryResultBatch;
class QueryResultBatchDefaultTypeInternal;
extern QueryResultBatchDefaultTypeInternal _QueryResultBatch_default_instance_;
}  // namespace v1
}  // namespace datastore
}  // namespace google
namespace google {
namespace datastore {
namespace v1 {

enum EntityResult_ResultType {
  EntityResult_ResultType_RESULT_TYPE_UNSPECIFIED = 0,
  EntityResult_ResultType_FULL = 1,
  EntityResult_ResultType_PROJECTION = 2,
  EntityResult_ResultType_KEY_ONLY = 3,
  EntityResult_ResultType_EntityResult_ResultType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  EntityResult_ResultType_EntityResult_ResultType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool EntityResult_ResultType_IsValid(int value);
const EntityResult_ResultType EntityResult_ResultType_ResultType_MIN = EntityResult_ResultType_RESULT_TYPE_UNSPECIFIED;
const EntityResult_ResultType EntityResult_ResultType_ResultType_MAX = EntityResult_ResultType_KEY_ONLY;
const int EntityResult_ResultType_ResultType_ARRAYSIZE = EntityResult_ResultType_ResultType_MAX + 1;

const ::google::protobuf::EnumDescriptor* EntityResult_ResultType_descriptor();
inline const ::std::string& EntityResult_ResultType_Name(EntityResult_ResultType value) {
  return ::google::protobuf::internal::NameOfEnum(
    EntityResult_ResultType_descriptor(), value);
}
inline bool EntityResult_ResultType_Parse(
    const ::std::string& name, EntityResult_ResultType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EntityResult_ResultType>(
    EntityResult_ResultType_descriptor(), name, value);
}
enum PropertyOrder_Direction {
  PropertyOrder_Direction_DIRECTION_UNSPECIFIED = 0,
  PropertyOrder_Direction_ASCENDING = 1,
  PropertyOrder_Direction_DESCENDING = 2,
  PropertyOrder_Direction_PropertyOrder_Direction_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  PropertyOrder_Direction_PropertyOrder_Direction_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool PropertyOrder_Direction_IsValid(int value);
const PropertyOrder_Direction PropertyOrder_Direction_Direction_MIN = PropertyOrder_Direction_DIRECTION_UNSPECIFIED;
const PropertyOrder_Direction PropertyOrder_Direction_Direction_MAX = PropertyOrder_Direction_DESCENDING;
const int PropertyOrder_Direction_Direction_ARRAYSIZE = PropertyOrder_Direction_Direction_MAX + 1;

const ::google::protobuf::EnumDescriptor* PropertyOrder_Direction_descriptor();
inline const ::std::string& PropertyOrder_Direction_Name(PropertyOrder_Direction value) {
  return ::google::protobuf::internal::NameOfEnum(
    PropertyOrder_Direction_descriptor(), value);
}
inline bool PropertyOrder_Direction_Parse(
    const ::std::string& name, PropertyOrder_Direction* value) {
  return ::google::protobuf::internal::ParseNamedEnum<PropertyOrder_Direction>(
    PropertyOrder_Direction_descriptor(), name, value);
}
enum CompositeFilter_Operator {
  CompositeFilter_Operator_OPERATOR_UNSPECIFIED = 0,
  CompositeFilter_Operator_AND = 1,
  CompositeFilter_Operator_CompositeFilter_Operator_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  CompositeFilter_Operator_CompositeFilter_Operator_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool CompositeFilter_Operator_IsValid(int value);
const CompositeFilter_Operator CompositeFilter_Operator_Operator_MIN = CompositeFilter_Operator_OPERATOR_UNSPECIFIED;
const CompositeFilter_Operator CompositeFilter_Operator_Operator_MAX = CompositeFilter_Operator_AND;
const int CompositeFilter_Operator_Operator_ARRAYSIZE = CompositeFilter_Operator_Operator_MAX + 1;

const ::google::protobuf::EnumDescriptor* CompositeFilter_Operator_descriptor();
inline const ::std::string& CompositeFilter_Operator_Name(CompositeFilter_Operator value) {
  return ::google::protobuf::internal::NameOfEnum(
    CompositeFilter_Operator_descriptor(), value);
}
inline bool CompositeFilter_Operator_Parse(
    const ::std::string& name, CompositeFilter_Operator* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CompositeFilter_Operator>(
    CompositeFilter_Operator_descriptor(), name, value);
}
enum PropertyFilter_Operator {
  PropertyFilter_Operator_OPERATOR_UNSPECIFIED = 0,
  PropertyFilter_Operator_LESS_THAN = 1,
  PropertyFilter_Operator_LESS_THAN_OR_EQUAL = 2,
  PropertyFilter_Operator_GREATER_THAN = 3,
  PropertyFilter_Operator_GREATER_THAN_OR_EQUAL = 4,
  PropertyFilter_Operator_EQUAL = 5,
  PropertyFilter_Operator_HAS_ANCESTOR = 11,
  PropertyFilter_Operator_PropertyFilter_Operator_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  PropertyFilter_Operator_PropertyFilter_Operator_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool PropertyFilter_Operator_IsValid(int value);
const PropertyFilter_Operator PropertyFilter_Operator_Operator_MIN = PropertyFilter_Operator_OPERATOR_UNSPECIFIED;
const PropertyFilter_Operator PropertyFilter_Operator_Operator_MAX = PropertyFilter_Operator_HAS_ANCESTOR;
const int PropertyFilter_Operator_Operator_ARRAYSIZE = PropertyFilter_Operator_Operator_MAX + 1;

const ::google::protobuf::EnumDescriptor* PropertyFilter_Operator_descriptor();
inline const ::std::string& PropertyFilter_Operator_Name(PropertyFilter_Operator value) {
  return ::google::protobuf::internal::NameOfEnum(
    PropertyFilter_Operator_descriptor(), value);
}
inline bool PropertyFilter_Operator_Parse(
    const ::std::string& name, PropertyFilter_Operator* value) {
  return ::google::protobuf::internal::ParseNamedEnum<PropertyFilter_Operator>(
    PropertyFilter_Operator_descriptor(), name, value);
}
enum QueryResultBatch_MoreResultsType {
  QueryResultBatch_MoreResultsType_MORE_RESULTS_TYPE_UNSPECIFIED = 0,
  QueryResultBatch_MoreResultsType_NOT_FINISHED = 1,
  QueryResultBatch_MoreResultsType_MORE_RESULTS_AFTER_LIMIT = 2,
  QueryResultBatch_MoreResultsType_MORE_RESULTS_AFTER_CURSOR = 4,
  QueryResultBatch_MoreResultsType_NO_MORE_RESULTS = 3,
  QueryResultBatch_MoreResultsType_QueryResultBatch_MoreResultsType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  QueryResultBatch_MoreResultsType_QueryResultBatch_MoreResultsType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool QueryResultBatch_MoreResultsType_IsValid(int value);
const QueryResultBatch_MoreResultsType QueryResultBatch_MoreResultsType_MoreResultsType_MIN = QueryResultBatch_MoreResultsType_MORE_RESULTS_TYPE_UNSPECIFIED;
const QueryResultBatch_MoreResultsType QueryResultBatch_MoreResultsType_MoreResultsType_MAX = QueryResultBatch_MoreResultsType_MORE_RESULTS_AFTER_CURSOR;
const int QueryResultBatch_MoreResultsType_MoreResultsType_ARRAYSIZE = QueryResultBatch_MoreResultsType_MoreResultsType_MAX + 1;

const ::google::protobuf::EnumDescriptor* QueryResultBatch_MoreResultsType_descriptor();
inline const ::std::string& QueryResultBatch_MoreResultsType_Name(QueryResultBatch_MoreResultsType value) {
  return ::google::protobuf::internal::NameOfEnum(
    QueryResultBatch_MoreResultsType_descriptor(), value);
}
inline bool QueryResultBatch_MoreResultsType_Parse(
    const ::std::string& name, QueryResultBatch_MoreResultsType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<QueryResultBatch_MoreResultsType>(
    QueryResultBatch_MoreResultsType_descriptor(), name, value);
}
// ===================================================================

class EntityResult : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.datastore.v1.EntityResult) */ {
 public:
  EntityResult();
  virtual ~EntityResult();

  EntityResult(const EntityResult& from);

  inline EntityResult& operator=(const EntityResult& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  EntityResult(EntityResult&& from) noexcept
    : EntityResult() {
    *this = ::std::move(from);
  }

  inline EntityResult& operator=(EntityResult&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const EntityResult& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EntityResult* internal_default_instance() {
    return reinterpret_cast<const EntityResult*>(
               &_EntityResult_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(EntityResult* other);
  friend void swap(EntityResult& a, EntityResult& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline EntityResult* New() const PROTOBUF_FINAL { return New(NULL); }

  EntityResult* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const EntityResult& from);
  void MergeFrom(const EntityResult& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(EntityResult* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef EntityResult_ResultType ResultType;
  static const ResultType RESULT_TYPE_UNSPECIFIED =
    EntityResult_ResultType_RESULT_TYPE_UNSPECIFIED;
  static const ResultType FULL =
    EntityResult_ResultType_FULL;
  static const ResultType PROJECTION =
    EntityResult_ResultType_PROJECTION;
  static const ResultType KEY_ONLY =
    EntityResult_ResultType_KEY_ONLY;
  static inline bool ResultType_IsValid(int value) {
    return EntityResult_ResultType_IsValid(value);
  }
  static const ResultType ResultType_MIN =
    EntityResult_ResultType_ResultType_MIN;
  static const ResultType ResultType_MAX =
    EntityResult_ResultType_ResultType_MAX;
  static const int ResultType_ARRAYSIZE =
    EntityResult_ResultType_ResultType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ResultType_descriptor() {
    return EntityResult_ResultType_descriptor();
  }
  static inline const ::std::string& ResultType_Name(ResultType value) {
    return EntityResult_ResultType_Name(value);
  }
  static inline bool ResultType_Parse(const ::std::string& name,
      ResultType* value) {
    return EntityResult_ResultType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // bytes cursor = 3;
  void clear_cursor();
  static const int kCursorFieldNumber = 3;
  const ::std::string& cursor() const;
  void set_cursor(const ::std::string& value);
  #if LANG_CXX11
  void set_cursor(::std::string&& value);
  #endif
  void set_cursor(const char* value);
  void set_cursor(const void* value, size_t size);
  ::std::string* mutable_cursor();
  ::std::string* release_cursor();
  void set_allocated_cursor(::std::string* cursor);

  // .google.datastore.v1.Entity entity = 1;
  bool has_entity() const;
  void clear_entity();
  static const int kEntityFieldNumber = 1;
  const ::google::datastore::v1::Entity& entity() const;
  ::google::datastore::v1::Entity* release_entity();
  ::google::datastore::v1::Entity* mutable_entity();
  void set_allocated_entity(::google::datastore::v1::Entity* entity);

  // int64 version = 4;
  void clear_version();
  static const int kVersionFieldNumber = 4;
  ::google::protobuf::int64 version() const;
  void set_version(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:google.datastore.v1.EntityResult)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr cursor_;
  ::google::datastore::v1::Entity* entity_;
  ::google::protobuf::int64 version_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fdatastore_2fv1_2fquery_2eproto::TableStruct;
  friend void ::protobuf_google_2fdatastore_2fv1_2fquery_2eproto::InitDefaultsEntityResultImpl();
};
// -------------------------------------------------------------------

class Query : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.datastore.v1.Query) */ {
 public:
  Query();
  virtual ~Query();

  Query(const Query& from);

  inline Query& operator=(const Query& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Query(Query&& from) noexcept
    : Query() {
    *this = ::std::move(from);
  }

  inline Query& operator=(Query&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Query& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Query* internal_default_instance() {
    return reinterpret_cast<const Query*>(
               &_Query_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(Query* other);
  friend void swap(Query& a, Query& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Query* New() const PROTOBUF_FINAL { return New(NULL); }

  Query* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Query& from);
  void MergeFrom(const Query& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Query* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .google.datastore.v1.Projection projection = 2;
  int projection_size() const;
  void clear_projection();
  static const int kProjectionFieldNumber = 2;
  const ::google::datastore::v1::Projection& projection(int index) const;
  ::google::datastore::v1::Projection* mutable_projection(int index);
  ::google::datastore::v1::Projection* add_projection();
  ::google::protobuf::RepeatedPtrField< ::google::datastore::v1::Projection >*
      mutable_projection();
  const ::google::protobuf::RepeatedPtrField< ::google::datastore::v1::Projection >&
      projection() const;

  // repeated .google.datastore.v1.KindExpression kind = 3;
  int kind_size() const;
  void clear_kind();
  static const int kKindFieldNumber = 3;
  const ::google::datastore::v1::KindExpression& kind(int index) const;
  ::google::datastore::v1::KindExpression* mutable_kind(int index);
  ::google::datastore::v1::KindExpression* add_kind();
  ::google::protobuf::RepeatedPtrField< ::google::datastore::v1::KindExpression >*
      mutable_kind();
  const ::google::protobuf::RepeatedPtrField< ::google::datastore::v1::KindExpression >&
      kind() const;

  // repeated .google.datastore.v1.PropertyOrder order = 5;
  int order_size() const;
  void clear_order();
  static const int kOrderFieldNumber = 5;
  const ::google::datastore::v1::PropertyOrder& order(int index) const;
  ::google::datastore::v1::PropertyOrder* mutable_order(int index);
  ::google::datastore::v1::PropertyOrder* add_order();
  ::google::protobuf::RepeatedPtrField< ::google::datastore::v1::PropertyOrder >*
      mutable_order();
  const ::google::protobuf::RepeatedPtrField< ::google::datastore::v1::PropertyOrder >&
      order() const;

  // repeated .google.datastore.v1.PropertyReference distinct_on = 6;
  int distinct_on_size() const;
  void clear_distinct_on();
  static const int kDistinctOnFieldNumber = 6;
  const ::google::datastore::v1::PropertyReference& distinct_on(int index) const;
  ::google::datastore::v1::PropertyReference* mutable_distinct_on(int index);
  ::google::datastore::v1::PropertyReference* add_distinct_on();
  ::google::protobuf::RepeatedPtrField< ::google::datastore::v1::PropertyReference >*
      mutable_distinct_on();
  const ::google::protobuf::RepeatedPtrField< ::google::datastore::v1::PropertyReference >&
      distinct_on() const;

  // bytes start_cursor = 7;
  void clear_start_cursor();
  static const int kStartCursorFieldNumber = 7;
  const ::std::string& start_cursor() const;
  void set_start_cursor(const ::std::string& value);
  #if LANG_CXX11
  void set_start_cursor(::std::string&& value);
  #endif
  void set_start_cursor(const char* value);
  void set_start_cursor(const void* value, size_t size);
  ::std::string* mutable_start_cursor();
  ::std::string* release_start_cursor();
  void set_allocated_start_cursor(::std::string* start_cursor);

  // bytes end_cursor = 8;
  void clear_end_cursor();
  static const int kEndCursorFieldNumber = 8;
  const ::std::string& end_cursor() const;
  void set_end_cursor(const ::std::string& value);
  #if LANG_CXX11
  void set_end_cursor(::std::string&& value);
  #endif
  void set_end_cursor(const char* value);
  void set_end_cursor(const void* value, size_t size);
  ::std::string* mutable_end_cursor();
  ::std::string* release_end_cursor();
  void set_allocated_end_cursor(::std::string* end_cursor);

  // .google.datastore.v1.Filter filter = 4;
  bool has_filter() const;
  void clear_filter();
  static const int kFilterFieldNumber = 4;
  const ::google::datastore::v1::Filter& filter() const;
  ::google::datastore::v1::Filter* release_filter();
  ::google::datastore::v1::Filter* mutable_filter();
  void set_allocated_filter(::google::datastore::v1::Filter* filter);

  // .google.protobuf.Int32Value limit = 12;
  bool has_limit() const;
  void clear_limit();
  static const int kLimitFieldNumber = 12;
  const ::google::protobuf::Int32Value& limit() const;
  ::google::protobuf::Int32Value* release_limit();
  ::google::protobuf::Int32Value* mutable_limit();
  void set_allocated_limit(::google::protobuf::Int32Value* limit);

  // int32 offset = 10;
  void clear_offset();
  static const int kOffsetFieldNumber = 10;
  ::google::protobuf::int32 offset() const;
  void set_offset(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:google.datastore.v1.Query)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::google::datastore::v1::Projection > projection_;
  ::google::protobuf::RepeatedPtrField< ::google::datastore::v1::KindExpression > kind_;
  ::google::protobuf::RepeatedPtrField< ::google::datastore::v1::PropertyOrder > order_;
  ::google::protobuf::RepeatedPtrField< ::google::datastore::v1::PropertyReference > distinct_on_;
  ::google::protobuf::internal::ArenaStringPtr start_cursor_;
  ::google::protobuf::internal::ArenaStringPtr end_cursor_;
  ::google::datastore::v1::Filter* filter_;
  ::google::protobuf::Int32Value* limit_;
  ::google::protobuf::int32 offset_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fdatastore_2fv1_2fquery_2eproto::TableStruct;
  friend void ::protobuf_google_2fdatastore_2fv1_2fquery_2eproto::InitDefaultsQueryImpl();
};
// -------------------------------------------------------------------

class KindExpression : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.datastore.v1.KindExpression) */ {
 public:
  KindExpression();
  virtual ~KindExpression();

  KindExpression(const KindExpression& from);

  inline KindExpression& operator=(const KindExpression& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  KindExpression(KindExpression&& from) noexcept
    : KindExpression() {
    *this = ::std::move(from);
  }

  inline KindExpression& operator=(KindExpression&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const KindExpression& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const KindExpression* internal_default_instance() {
    return reinterpret_cast<const KindExpression*>(
               &_KindExpression_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(KindExpression* other);
  friend void swap(KindExpression& a, KindExpression& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline KindExpression* New() const PROTOBUF_FINAL { return New(NULL); }

  KindExpression* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const KindExpression& from);
  void MergeFrom(const KindExpression& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(KindExpression* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:google.datastore.v1.KindExpression)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fdatastore_2fv1_2fquery_2eproto::TableStruct;
  friend void ::protobuf_google_2fdatastore_2fv1_2fquery_2eproto::InitDefaultsKindExpressionImpl();
};
// -------------------------------------------------------------------

class PropertyReference : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.datastore.v1.PropertyReference) */ {
 public:
  PropertyReference();
  virtual ~PropertyReference();

  PropertyReference(const PropertyReference& from);

  inline PropertyReference& operator=(const PropertyReference& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PropertyReference(PropertyReference&& from) noexcept
    : PropertyReference() {
    *this = ::std::move(from);
  }

  inline PropertyReference& operator=(PropertyReference&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PropertyReference& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PropertyReference* internal_default_instance() {
    return reinterpret_cast<const PropertyReference*>(
               &_PropertyReference_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(PropertyReference* other);
  friend void swap(PropertyReference& a, PropertyReference& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PropertyReference* New() const PROTOBUF_FINAL { return New(NULL); }

  PropertyReference* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const PropertyReference& from);
  void MergeFrom(const PropertyReference& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(PropertyReference* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 2;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:google.datastore.v1.PropertyReference)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fdatastore_2fv1_2fquery_2eproto::TableStruct;
  friend void ::protobuf_google_2fdatastore_2fv1_2fquery_2eproto::InitDefaultsPropertyReferenceImpl();
};
// -------------------------------------------------------------------

class Projection : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.datastore.v1.Projection) */ {
 public:
  Projection();
  virtual ~Projection();

  Projection(const Projection& from);

  inline Projection& operator=(const Projection& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Projection(Projection&& from) noexcept
    : Projection() {
    *this = ::std::move(from);
  }

  inline Projection& operator=(Projection&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Projection& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Projection* internal_default_instance() {
    return reinterpret_cast<const Projection*>(
               &_Projection_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(Projection* other);
  friend void swap(Projection& a, Projection& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Projection* New() const PROTOBUF_FINAL { return New(NULL); }

  Projection* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Projection& from);
  void MergeFrom(const Projection& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Projection* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.datastore.v1.PropertyReference property = 1;
  bool has_property() const;
  void clear_property();
  static const int kPropertyFieldNumber = 1;
  const ::google::datastore::v1::PropertyReference& property() const;
  ::google::datastore::v1::PropertyReference* release_property();
  ::google::datastore::v1::PropertyReference* mutable_property();
  void set_allocated_property(::google::datastore::v1::PropertyReference* property);

  // @@protoc_insertion_point(class_scope:google.datastore.v1.Projection)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::datastore::v1::PropertyReference* property_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fdatastore_2fv1_2fquery_2eproto::TableStruct;
  friend void ::protobuf_google_2fdatastore_2fv1_2fquery_2eproto::InitDefaultsProjectionImpl();
};
// -------------------------------------------------------------------

class PropertyOrder : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.datastore.v1.PropertyOrder) */ {
 public:
  PropertyOrder();
  virtual ~PropertyOrder();

  PropertyOrder(const PropertyOrder& from);

  inline PropertyOrder& operator=(const PropertyOrder& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PropertyOrder(PropertyOrder&& from) noexcept
    : PropertyOrder() {
    *this = ::std::move(from);
  }

  inline PropertyOrder& operator=(PropertyOrder&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PropertyOrder& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PropertyOrder* internal_default_instance() {
    return reinterpret_cast<const PropertyOrder*>(
               &_PropertyOrder_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    5;

  void Swap(PropertyOrder* other);
  friend void swap(PropertyOrder& a, PropertyOrder& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PropertyOrder* New() const PROTOBUF_FINAL { return New(NULL); }

  PropertyOrder* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const PropertyOrder& from);
  void MergeFrom(const PropertyOrder& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(PropertyOrder* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef PropertyOrder_Direction Direction;
  static const Direction DIRECTION_UNSPECIFIED =
    PropertyOrder_Direction_DIRECTION_UNSPECIFIED;
  static const Direction ASCENDING =
    PropertyOrder_Direction_ASCENDING;
  static const Direction DESCENDING =
    PropertyOrder_Direction_DESCENDING;
  static inline bool Direction_IsValid(int value) {
    return PropertyOrder_Direction_IsValid(value);
  }
  static const Direction Direction_MIN =
    PropertyOrder_Direction_Direction_MIN;
  static const Direction Direction_MAX =
    PropertyOrder_Direction_Direction_MAX;
  static const int Direction_ARRAYSIZE =
    PropertyOrder_Direction_Direction_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Direction_descriptor() {
    return PropertyOrder_Direction_descriptor();
  }
  static inline const ::std::string& Direction_Name(Direction value) {
    return PropertyOrder_Direction_Name(value);
  }
  static inline bool Direction_Parse(const ::std::string& name,
      Direction* value) {
    return PropertyOrder_Direction_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // .google.datastore.v1.PropertyReference property = 1;
  bool has_property() const;
  void clear_property();
  static const int kPropertyFieldNumber = 1;
  const ::google::datastore::v1::PropertyReference& property() const;
  ::google::datastore::v1::PropertyReference* release_property();
  ::google::datastore::v1::PropertyReference* mutable_property();
  void set_allocated_property(::google::datastore::v1::PropertyReference* property);

  // .google.datastore.v1.PropertyOrder.Direction direction = 2;
  void clear_direction();
  static const int kDirectionFieldNumber = 2;
  ::google::datastore::v1::PropertyOrder_Direction direction() const;
  void set_direction(::google::datastore::v1::PropertyOrder_Direction value);

  // @@protoc_insertion_point(class_scope:google.datastore.v1.PropertyOrder)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::datastore::v1::PropertyReference* property_;
  int direction_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fdatastore_2fv1_2fquery_2eproto::TableStruct;
  friend void ::protobuf_google_2fdatastore_2fv1_2fquery_2eproto::InitDefaultsPropertyOrderImpl();
};
// -------------------------------------------------------------------

class Filter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.datastore.v1.Filter) */ {
 public:
  Filter();
  virtual ~Filter();

  Filter(const Filter& from);

  inline Filter& operator=(const Filter& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Filter(Filter&& from) noexcept
    : Filter() {
    *this = ::std::move(from);
  }

  inline Filter& operator=(Filter&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Filter& default_instance();

  enum FilterTypeCase {
    kCompositeFilter = 1,
    kPropertyFilter = 2,
    FILTER_TYPE_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Filter* internal_default_instance() {
    return reinterpret_cast<const Filter*>(
               &_Filter_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    6;

  void Swap(Filter* other);
  friend void swap(Filter& a, Filter& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Filter* New() const PROTOBUF_FINAL { return New(NULL); }

  Filter* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Filter& from);
  void MergeFrom(const Filter& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Filter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.datastore.v1.CompositeFilter composite_filter = 1;
  bool has_composite_filter() const;
  void clear_composite_filter();
  static const int kCompositeFilterFieldNumber = 1;
  const ::google::datastore::v1::CompositeFilter& composite_filter() const;
  ::google::datastore::v1::CompositeFilter* release_composite_filter();
  ::google::datastore::v1::CompositeFilter* mutable_composite_filter();
  void set_allocated_composite_filter(::google::datastore::v1::CompositeFilter* composite_filter);

  // .google.datastore.v1.PropertyFilter property_filter = 2;
  bool has_property_filter() const;
  void clear_property_filter();
  static const int kPropertyFilterFieldNumber = 2;
  const ::google::datastore::v1::PropertyFilter& property_filter() const;
  ::google::datastore::v1::PropertyFilter* release_property_filter();
  ::google::datastore::v1::PropertyFilter* mutable_property_filter();
  void set_allocated_property_filter(::google::datastore::v1::PropertyFilter* property_filter);

  FilterTypeCase filter_type_case() const;
  // @@protoc_insertion_point(class_scope:google.datastore.v1.Filter)
 private:
  void set_has_composite_filter();
  void set_has_property_filter();

  inline bool has_filter_type() const;
  void clear_filter_type();
  inline void clear_has_filter_type();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  union FilterTypeUnion {
    FilterTypeUnion() {}
    ::google::datastore::v1::CompositeFilter* composite_filter_;
    ::google::datastore::v1::PropertyFilter* property_filter_;
  } filter_type_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::protobuf_google_2fdatastore_2fv1_2fquery_2eproto::TableStruct;
  friend void ::protobuf_google_2fdatastore_2fv1_2fquery_2eproto::InitDefaultsCompositeFilterImpl();
};
// -------------------------------------------------------------------

class CompositeFilter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.datastore.v1.CompositeFilter) */ {
 public:
  CompositeFilter();
  virtual ~CompositeFilter();

  CompositeFilter(const CompositeFilter& from);

  inline CompositeFilter& operator=(const CompositeFilter& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CompositeFilter(CompositeFilter&& from) noexcept
    : CompositeFilter() {
    *this = ::std::move(from);
  }

  inline CompositeFilter& operator=(CompositeFilter&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CompositeFilter& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CompositeFilter* internal_default_instance() {
    return reinterpret_cast<const CompositeFilter*>(
               &_CompositeFilter_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    7;

  void Swap(CompositeFilter* other);
  friend void swap(CompositeFilter& a, CompositeFilter& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CompositeFilter* New() const PROTOBUF_FINAL { return New(NULL); }

  CompositeFilter* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CompositeFilter& from);
  void MergeFrom(const CompositeFilter& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CompositeFilter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef CompositeFilter_Operator Operator;
  static const Operator OPERATOR_UNSPECIFIED =
    CompositeFilter_Operator_OPERATOR_UNSPECIFIED;
  static const Operator AND =
    CompositeFilter_Operator_AND;
  static inline bool Operator_IsValid(int value) {
    return CompositeFilter_Operator_IsValid(value);
  }
  static const Operator Operator_MIN =
    CompositeFilter_Operator_Operator_MIN;
  static const Operator Operator_MAX =
    CompositeFilter_Operator_Operator_MAX;
  static const int Operator_ARRAYSIZE =
    CompositeFilter_Operator_Operator_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Operator_descriptor() {
    return CompositeFilter_Operator_descriptor();
  }
  static inline const ::std::string& Operator_Name(Operator value) {
    return CompositeFilter_Operator_Name(value);
  }
  static inline bool Operator_Parse(const ::std::string& name,
      Operator* value) {
    return CompositeFilter_Operator_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated .google.datastore.v1.Filter filters = 2;
  int filters_size() const;
  void clear_filters();
  static const int kFiltersFieldNumber = 2;
  const ::google::datastore::v1::Filter& filters(int index) const;
  ::google::datastore::v1::Filter* mutable_filters(int index);
  ::google::datastore::v1::Filter* add_filters();
  ::google::protobuf::RepeatedPtrField< ::google::datastore::v1::Filter >*
      mutable_filters();
  const ::google::protobuf::RepeatedPtrField< ::google::datastore::v1::Filter >&
      filters() const;

  // .google.datastore.v1.CompositeFilter.Operator op = 1;
  void clear_op();
  static const int kOpFieldNumber = 1;
  ::google::datastore::v1::CompositeFilter_Operator op() const;
  void set_op(::google::datastore::v1::CompositeFilter_Operator value);

  // @@protoc_insertion_point(class_scope:google.datastore.v1.CompositeFilter)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::google::datastore::v1::Filter > filters_;
  int op_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fdatastore_2fv1_2fquery_2eproto::TableStruct;
  friend void ::protobuf_google_2fdatastore_2fv1_2fquery_2eproto::InitDefaultsCompositeFilterImpl();
};
// -------------------------------------------------------------------

class PropertyFilter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.datastore.v1.PropertyFilter) */ {
 public:
  PropertyFilter();
  virtual ~PropertyFilter();

  PropertyFilter(const PropertyFilter& from);

  inline PropertyFilter& operator=(const PropertyFilter& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PropertyFilter(PropertyFilter&& from) noexcept
    : PropertyFilter() {
    *this = ::std::move(from);
  }

  inline PropertyFilter& operator=(PropertyFilter&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PropertyFilter& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PropertyFilter* internal_default_instance() {
    return reinterpret_cast<const PropertyFilter*>(
               &_PropertyFilter_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    8;

  void Swap(PropertyFilter* other);
  friend void swap(PropertyFilter& a, PropertyFilter& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PropertyFilter* New() const PROTOBUF_FINAL { return New(NULL); }

  PropertyFilter* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const PropertyFilter& from);
  void MergeFrom(const PropertyFilter& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(PropertyFilter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef PropertyFilter_Operator Operator;
  static const Operator OPERATOR_UNSPECIFIED =
    PropertyFilter_Operator_OPERATOR_UNSPECIFIED;
  static const Operator LESS_THAN =
    PropertyFilter_Operator_LESS_THAN;
  static const Operator LESS_THAN_OR_EQUAL =
    PropertyFilter_Operator_LESS_THAN_OR_EQUAL;
  static const Operator GREATER_THAN =
    PropertyFilter_Operator_GREATER_THAN;
  static const Operator GREATER_THAN_OR_EQUAL =
    PropertyFilter_Operator_GREATER_THAN_OR_EQUAL;
  static const Operator EQUAL =
    PropertyFilter_Operator_EQUAL;
  static const Operator HAS_ANCESTOR =
    PropertyFilter_Operator_HAS_ANCESTOR;
  static inline bool Operator_IsValid(int value) {
    return PropertyFilter_Operator_IsValid(value);
  }
  static const Operator Operator_MIN =
    PropertyFilter_Operator_Operator_MIN;
  static const Operator Operator_MAX =
    PropertyFilter_Operator_Operator_MAX;
  static const int Operator_ARRAYSIZE =
    PropertyFilter_Operator_Operator_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Operator_descriptor() {
    return PropertyFilter_Operator_descriptor();
  }
  static inline const ::std::string& Operator_Name(Operator value) {
    return PropertyFilter_Operator_Name(value);
  }
  static inline bool Operator_Parse(const ::std::string& name,
      Operator* value) {
    return PropertyFilter_Operator_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // .google.datastore.v1.PropertyReference property = 1;
  bool has_property() const;
  void clear_property();
  static const int kPropertyFieldNumber = 1;
  const ::google::datastore::v1::PropertyReference& property() const;
  ::google::datastore::v1::PropertyReference* release_property();
  ::google::datastore::v1::PropertyReference* mutable_property();
  void set_allocated_property(::google::datastore::v1::PropertyReference* property);

  // .google.datastore.v1.Value value = 3;
  bool has_value() const;
  void clear_value();
  static const int kValueFieldNumber = 3;
  const ::google::datastore::v1::Value& value() const;
  ::google::datastore::v1::Value* release_value();
  ::google::datastore::v1::Value* mutable_value();
  void set_allocated_value(::google::datastore::v1::Value* value);

  // .google.datastore.v1.PropertyFilter.Operator op = 2;
  void clear_op();
  static const int kOpFieldNumber = 2;
  ::google::datastore::v1::PropertyFilter_Operator op() const;
  void set_op(::google::datastore::v1::PropertyFilter_Operator value);

  // @@protoc_insertion_point(class_scope:google.datastore.v1.PropertyFilter)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::datastore::v1::PropertyReference* property_;
  ::google::datastore::v1::Value* value_;
  int op_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fdatastore_2fv1_2fquery_2eproto::TableStruct;
  friend void ::protobuf_google_2fdatastore_2fv1_2fquery_2eproto::InitDefaultsPropertyFilterImpl();
};
// -------------------------------------------------------------------

class GqlQuery_NamedBindingsEntry_DoNotUse : public ::google::protobuf::internal::MapEntry<GqlQuery_NamedBindingsEntry_DoNotUse, 
    ::std::string, ::google::datastore::v1::GqlQueryParameter,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
    0 > {
public:
  typedef ::google::protobuf::internal::MapEntry<GqlQuery_NamedBindingsEntry_DoNotUse, 
    ::std::string, ::google::datastore::v1::GqlQueryParameter,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
    0 > SuperType;
  GqlQuery_NamedBindingsEntry_DoNotUse();
  GqlQuery_NamedBindingsEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const GqlQuery_NamedBindingsEntry_DoNotUse& other);
  static const GqlQuery_NamedBindingsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const GqlQuery_NamedBindingsEntry_DoNotUse*>(&_GqlQuery_NamedBindingsEntry_DoNotUse_default_instance_); }
  void MergeFrom(const ::google::protobuf::Message& other) PROTOBUF_FINAL;
  ::google::protobuf::Metadata GetMetadata() const;
};

// -------------------------------------------------------------------

class GqlQuery : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.datastore.v1.GqlQuery) */ {
 public:
  GqlQuery();
  virtual ~GqlQuery();

  GqlQuery(const GqlQuery& from);

  inline GqlQuery& operator=(const GqlQuery& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GqlQuery(GqlQuery&& from) noexcept
    : GqlQuery() {
    *this = ::std::move(from);
  }

  inline GqlQuery& operator=(GqlQuery&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GqlQuery& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GqlQuery* internal_default_instance() {
    return reinterpret_cast<const GqlQuery*>(
               &_GqlQuery_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    10;

  void Swap(GqlQuery* other);
  friend void swap(GqlQuery& a, GqlQuery& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GqlQuery* New() const PROTOBUF_FINAL { return New(NULL); }

  GqlQuery* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GqlQuery& from);
  void MergeFrom(const GqlQuery& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GqlQuery* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // repeated .google.datastore.v1.GqlQueryParameter positional_bindings = 4;
  int positional_bindings_size() const;
  void clear_positional_bindings();
  static const int kPositionalBindingsFieldNumber = 4;
  const ::google::datastore::v1::GqlQueryParameter& positional_bindings(int index) const;
  ::google::datastore::v1::GqlQueryParameter* mutable_positional_bindings(int index);
  ::google::datastore::v1::GqlQueryParameter* add_positional_bindings();
  ::google::protobuf::RepeatedPtrField< ::google::datastore::v1::GqlQueryParameter >*
      mutable_positional_bindings();
  const ::google::protobuf::RepeatedPtrField< ::google::datastore::v1::GqlQueryParameter >&
      positional_bindings() const;

  // map<string, .google.datastore.v1.GqlQueryParameter> named_bindings = 5;
  int named_bindings_size() const;
  void clear_named_bindings();
  static const int kNamedBindingsFieldNumber = 5;
  const ::google::protobuf::Map< ::std::string, ::google::datastore::v1::GqlQueryParameter >&
      named_bindings() const;
  ::google::protobuf::Map< ::std::string, ::google::datastore::v1::GqlQueryParameter >*
      mutable_named_bindings();

  // string query_string = 1;
  void clear_query_string();
  static const int kQueryStringFieldNumber = 1;
  const ::std::string& query_string() const;
  void set_query_string(const ::std::string& value);
  #if LANG_CXX11
  void set_query_string(::std::string&& value);
  #endif
  void set_query_string(const char* value);
  void set_query_string(const char* value, size_t size);
  ::std::string* mutable_query_string();
  ::std::string* release_query_string();
  void set_allocated_query_string(::std::string* query_string);

  // bool allow_literals = 2;
  void clear_allow_literals();
  static const int kAllowLiteralsFieldNumber = 2;
  bool allow_literals() const;
  void set_allow_literals(bool value);

  // @@protoc_insertion_point(class_scope:google.datastore.v1.GqlQuery)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::google::datastore::v1::GqlQueryParameter > positional_bindings_;
  ::google::protobuf::internal::MapField<
      GqlQuery_NamedBindingsEntry_DoNotUse,
      ::std::string, ::google::datastore::v1::GqlQueryParameter,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 > named_bindings_;
  ::google::protobuf::internal::ArenaStringPtr query_string_;
  bool allow_literals_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fdatastore_2fv1_2fquery_2eproto::TableStruct;
  friend void ::protobuf_google_2fdatastore_2fv1_2fquery_2eproto::InitDefaultsGqlQueryImpl();
};
// -------------------------------------------------------------------

class GqlQueryParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.datastore.v1.GqlQueryParameter) */ {
 public:
  GqlQueryParameter();
  virtual ~GqlQueryParameter();

  GqlQueryParameter(const GqlQueryParameter& from);

  inline GqlQueryParameter& operator=(const GqlQueryParameter& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GqlQueryParameter(GqlQueryParameter&& from) noexcept
    : GqlQueryParameter() {
    *this = ::std::move(from);
  }

  inline GqlQueryParameter& operator=(GqlQueryParameter&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GqlQueryParameter& default_instance();

  enum ParameterTypeCase {
    kValue = 2,
    kCursor = 3,
    PARAMETER_TYPE_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GqlQueryParameter* internal_default_instance() {
    return reinterpret_cast<const GqlQueryParameter*>(
               &_GqlQueryParameter_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    11;

  void Swap(GqlQueryParameter* other);
  friend void swap(GqlQueryParameter& a, GqlQueryParameter& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GqlQueryParameter* New() const PROTOBUF_FINAL { return New(NULL); }

  GqlQueryParameter* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GqlQueryParameter& from);
  void MergeFrom(const GqlQueryParameter& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GqlQueryParameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.datastore.v1.Value value = 2;
  bool has_value() const;
  void clear_value();
  static const int kValueFieldNumber = 2;
  const ::google::datastore::v1::Value& value() const;
  ::google::datastore::v1::Value* release_value();
  ::google::datastore::v1::Value* mutable_value();
  void set_allocated_value(::google::datastore::v1::Value* value);

  // bytes cursor = 3;
  private:
  bool has_cursor() const;
  public:
  void clear_cursor();
  static const int kCursorFieldNumber = 3;
  const ::std::string& cursor() const;
  void set_cursor(const ::std::string& value);
  #if LANG_CXX11
  void set_cursor(::std::string&& value);
  #endif
  void set_cursor(const char* value);
  void set_cursor(const void* value, size_t size);
  ::std::string* mutable_cursor();
  ::std::string* release_cursor();
  void set_allocated_cursor(::std::string* cursor);

  ParameterTypeCase parameter_type_case() const;
  // @@protoc_insertion_point(class_scope:google.datastore.v1.GqlQueryParameter)
 private:
  void set_has_value();
  void set_has_cursor();

  inline bool has_parameter_type() const;
  void clear_parameter_type();
  inline void clear_has_parameter_type();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  union ParameterTypeUnion {
    ParameterTypeUnion() {}
    ::google::datastore::v1::Value* value_;
    ::google::protobuf::internal::ArenaStringPtr cursor_;
  } parameter_type_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::protobuf_google_2fdatastore_2fv1_2fquery_2eproto::TableStruct;
  friend void ::protobuf_google_2fdatastore_2fv1_2fquery_2eproto::InitDefaultsGqlQueryParameterImpl();
};
// -------------------------------------------------------------------

class QueryResultBatch : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.datastore.v1.QueryResultBatch) */ {
 public:
  QueryResultBatch();
  virtual ~QueryResultBatch();

  QueryResultBatch(const QueryResultBatch& from);

  inline QueryResultBatch& operator=(const QueryResultBatch& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  QueryResultBatch(QueryResultBatch&& from) noexcept
    : QueryResultBatch() {
    *this = ::std::move(from);
  }

  inline QueryResultBatch& operator=(QueryResultBatch&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const QueryResultBatch& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const QueryResultBatch* internal_default_instance() {
    return reinterpret_cast<const QueryResultBatch*>(
               &_QueryResultBatch_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    12;

  void Swap(QueryResultBatch* other);
  friend void swap(QueryResultBatch& a, QueryResultBatch& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline QueryResultBatch* New() const PROTOBUF_FINAL { return New(NULL); }

  QueryResultBatch* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const QueryResultBatch& from);
  void MergeFrom(const QueryResultBatch& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(QueryResultBatch* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef QueryResultBatch_MoreResultsType MoreResultsType;
  static const MoreResultsType MORE_RESULTS_TYPE_UNSPECIFIED =
    QueryResultBatch_MoreResultsType_MORE_RESULTS_TYPE_UNSPECIFIED;
  static const MoreResultsType NOT_FINISHED =
    QueryResultBatch_MoreResultsType_NOT_FINISHED;
  static const MoreResultsType MORE_RESULTS_AFTER_LIMIT =
    QueryResultBatch_MoreResultsType_MORE_RESULTS_AFTER_LIMIT;
  static const MoreResultsType MORE_RESULTS_AFTER_CURSOR =
    QueryResultBatch_MoreResultsType_MORE_RESULTS_AFTER_CURSOR;
  static const MoreResultsType NO_MORE_RESULTS =
    QueryResultBatch_MoreResultsType_NO_MORE_RESULTS;
  static inline bool MoreResultsType_IsValid(int value) {
    return QueryResultBatch_MoreResultsType_IsValid(value);
  }
  static const MoreResultsType MoreResultsType_MIN =
    QueryResultBatch_MoreResultsType_MoreResultsType_MIN;
  static const MoreResultsType MoreResultsType_MAX =
    QueryResultBatch_MoreResultsType_MoreResultsType_MAX;
  static const int MoreResultsType_ARRAYSIZE =
    QueryResultBatch_MoreResultsType_MoreResultsType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  MoreResultsType_descriptor() {
    return QueryResultBatch_MoreResultsType_descriptor();
  }
  static inline const ::std::string& MoreResultsType_Name(MoreResultsType value) {
    return QueryResultBatch_MoreResultsType_Name(value);
  }
  static inline bool MoreResultsType_Parse(const ::std::string& name,
      MoreResultsType* value) {
    return QueryResultBatch_MoreResultsType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated .google.datastore.v1.EntityResult entity_results = 2;
  int entity_results_size() const;
  void clear_entity_results();
  static const int kEntityResultsFieldNumber = 2;
  const ::google::datastore::v1::EntityResult& entity_results(int index) const;
  ::google::datastore::v1::EntityResult* mutable_entity_results(int index);
  ::google::datastore::v1::EntityResult* add_entity_results();
  ::google::protobuf::RepeatedPtrField< ::google::datastore::v1::EntityResult >*
      mutable_entity_results();
  const ::google::protobuf::RepeatedPtrField< ::google::datastore::v1::EntityResult >&
      entity_results() const;

  // bytes skipped_cursor = 3;
  void clear_skipped_cursor();
  static const int kSkippedCursorFieldNumber = 3;
  const ::std::string& skipped_cursor() const;
  void set_skipped_cursor(const ::std::string& value);
  #if LANG_CXX11
  void set_skipped_cursor(::std::string&& value);
  #endif
  void set_skipped_cursor(const char* value);
  void set_skipped_cursor(const void* value, size_t size);
  ::std::string* mutable_skipped_cursor();
  ::std::string* release_skipped_cursor();
  void set_allocated_skipped_cursor(::std::string* skipped_cursor);

  // bytes end_cursor = 4;
  void clear_end_cursor();
  static const int kEndCursorFieldNumber = 4;
  const ::std::string& end_cursor() const;
  void set_end_cursor(const ::std::string& value);
  #if LANG_CXX11
  void set_end_cursor(::std::string&& value);
  #endif
  void set_end_cursor(const char* value);
  void set_end_cursor(const void* value, size_t size);
  ::std::string* mutable_end_cursor();
  ::std::string* release_end_cursor();
  void set_allocated_end_cursor(::std::string* end_cursor);

  // .google.datastore.v1.EntityResult.ResultType entity_result_type = 1;
  void clear_entity_result_type();
  static const int kEntityResultTypeFieldNumber = 1;
  ::google::datastore::v1::EntityResult_ResultType entity_result_type() const;
  void set_entity_result_type(::google::datastore::v1::EntityResult_ResultType value);

  // .google.datastore.v1.QueryResultBatch.MoreResultsType more_results = 5;
  void clear_more_results();
  static const int kMoreResultsFieldNumber = 5;
  ::google::datastore::v1::QueryResultBatch_MoreResultsType more_results() const;
  void set_more_results(::google::datastore::v1::QueryResultBatch_MoreResultsType value);

  // int64 snapshot_version = 7;
  void clear_snapshot_version();
  static const int kSnapshotVersionFieldNumber = 7;
  ::google::protobuf::int64 snapshot_version() const;
  void set_snapshot_version(::google::protobuf::int64 value);

  // int32 skipped_results = 6;
  void clear_skipped_results();
  static const int kSkippedResultsFieldNumber = 6;
  ::google::protobuf::int32 skipped_results() const;
  void set_skipped_results(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:google.datastore.v1.QueryResultBatch)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::google::datastore::v1::EntityResult > entity_results_;
  ::google::protobuf::internal::ArenaStringPtr skipped_cursor_;
  ::google::protobuf::internal::ArenaStringPtr end_cursor_;
  int entity_result_type_;
  int more_results_;
  ::google::protobuf::int64 snapshot_version_;
  ::google::protobuf::int32 skipped_results_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fdatastore_2fv1_2fquery_2eproto::TableStruct;
  friend void ::protobuf_google_2fdatastore_2fv1_2fquery_2eproto::InitDefaultsQueryResultBatchImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// EntityResult

// .google.datastore.v1.Entity entity = 1;
inline bool EntityResult::has_entity() const {
  return this != internal_default_instance() && entity_ != NULL;
}
inline const ::google::datastore::v1::Entity& EntityResult::entity() const {
  const ::google::datastore::v1::Entity* p = entity_;
  // @@protoc_insertion_point(field_get:google.datastore.v1.EntityResult.entity)
  return p != NULL ? *p : *reinterpret_cast<const ::google::datastore::v1::Entity*>(
      &::google::datastore::v1::_Entity_default_instance_);
}
inline ::google::datastore::v1::Entity* EntityResult::release_entity() {
  // @@protoc_insertion_point(field_release:google.datastore.v1.EntityResult.entity)
  
  ::google::datastore::v1::Entity* temp = entity_;
  entity_ = NULL;
  return temp;
}
inline ::google::datastore::v1::Entity* EntityResult::mutable_entity() {
  
  if (entity_ == NULL) {
    entity_ = new ::google::datastore::v1::Entity;
  }
  // @@protoc_insertion_point(field_mutable:google.datastore.v1.EntityResult.entity)
  return entity_;
}
inline void EntityResult::set_allocated_entity(::google::datastore::v1::Entity* entity) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(entity_);
  }
  if (entity) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      entity = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, entity, submessage_arena);
    }
    
  } else {
    
  }
  entity_ = entity;
  // @@protoc_insertion_point(field_set_allocated:google.datastore.v1.EntityResult.entity)
}

// int64 version = 4;
inline void EntityResult::clear_version() {
  version_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 EntityResult::version() const {
  // @@protoc_insertion_point(field_get:google.datastore.v1.EntityResult.version)
  return version_;
}
inline void EntityResult::set_version(::google::protobuf::int64 value) {
  
  version_ = value;
  // @@protoc_insertion_point(field_set:google.datastore.v1.EntityResult.version)
}

// bytes cursor = 3;
inline void EntityResult::clear_cursor() {
  cursor_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& EntityResult::cursor() const {
  // @@protoc_insertion_point(field_get:google.datastore.v1.EntityResult.cursor)
  return cursor_.GetNoArena();
}
inline void EntityResult::set_cursor(const ::std::string& value) {
  
  cursor_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.datastore.v1.EntityResult.cursor)
}
#if LANG_CXX11
inline void EntityResult::set_cursor(::std::string&& value) {
  
  cursor_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.datastore.v1.EntityResult.cursor)
}
#endif
inline void EntityResult::set_cursor(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  cursor_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.datastore.v1.EntityResult.cursor)
}
inline void EntityResult::set_cursor(const void* value, size_t size) {
  
  cursor_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.datastore.v1.EntityResult.cursor)
}
inline ::std::string* EntityResult::mutable_cursor() {
  
  // @@protoc_insertion_point(field_mutable:google.datastore.v1.EntityResult.cursor)
  return cursor_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* EntityResult::release_cursor() {
  // @@protoc_insertion_point(field_release:google.datastore.v1.EntityResult.cursor)
  
  return cursor_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EntityResult::set_allocated_cursor(::std::string* cursor) {
  if (cursor != NULL) {
    
  } else {
    
  }
  cursor_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cursor);
  // @@protoc_insertion_point(field_set_allocated:google.datastore.v1.EntityResult.cursor)
}

// -------------------------------------------------------------------

// Query

// repeated .google.datastore.v1.Projection projection = 2;
inline int Query::projection_size() const {
  return projection_.size();
}
inline void Query::clear_projection() {
  projection_.Clear();
}
inline const ::google::datastore::v1::Projection& Query::projection(int index) const {
  // @@protoc_insertion_point(field_get:google.datastore.v1.Query.projection)
  return projection_.Get(index);
}
inline ::google::datastore::v1::Projection* Query::mutable_projection(int index) {
  // @@protoc_insertion_point(field_mutable:google.datastore.v1.Query.projection)
  return projection_.Mutable(index);
}
inline ::google::datastore::v1::Projection* Query::add_projection() {
  // @@protoc_insertion_point(field_add:google.datastore.v1.Query.projection)
  return projection_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::google::datastore::v1::Projection >*
Query::mutable_projection() {
  // @@protoc_insertion_point(field_mutable_list:google.datastore.v1.Query.projection)
  return &projection_;
}
inline const ::google::protobuf::RepeatedPtrField< ::google::datastore::v1::Projection >&
Query::projection() const {
  // @@protoc_insertion_point(field_list:google.datastore.v1.Query.projection)
  return projection_;
}

// repeated .google.datastore.v1.KindExpression kind = 3;
inline int Query::kind_size() const {
  return kind_.size();
}
inline void Query::clear_kind() {
  kind_.Clear();
}
inline const ::google::datastore::v1::KindExpression& Query::kind(int index) const {
  // @@protoc_insertion_point(field_get:google.datastore.v1.Query.kind)
  return kind_.Get(index);
}
inline ::google::datastore::v1::KindExpression* Query::mutable_kind(int index) {
  // @@protoc_insertion_point(field_mutable:google.datastore.v1.Query.kind)
  return kind_.Mutable(index);
}
inline ::google::datastore::v1::KindExpression* Query::add_kind() {
  // @@protoc_insertion_point(field_add:google.datastore.v1.Query.kind)
  return kind_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::google::datastore::v1::KindExpression >*
Query::mutable_kind() {
  // @@protoc_insertion_point(field_mutable_list:google.datastore.v1.Query.kind)
  return &kind_;
}
inline const ::google::protobuf::RepeatedPtrField< ::google::datastore::v1::KindExpression >&
Query::kind() const {
  // @@protoc_insertion_point(field_list:google.datastore.v1.Query.kind)
  return kind_;
}

// .google.datastore.v1.Filter filter = 4;
inline bool Query::has_filter() const {
  return this != internal_default_instance() && filter_ != NULL;
}
inline void Query::clear_filter() {
  if (GetArenaNoVirtual() == NULL && filter_ != NULL) {
    delete filter_;
  }
  filter_ = NULL;
}
inline const ::google::datastore::v1::Filter& Query::filter() const {
  const ::google::datastore::v1::Filter* p = filter_;
  // @@protoc_insertion_point(field_get:google.datastore.v1.Query.filter)
  return p != NULL ? *p : *reinterpret_cast<const ::google::datastore::v1::Filter*>(
      &::google::datastore::v1::_Filter_default_instance_);
}
inline ::google::datastore::v1::Filter* Query::release_filter() {
  // @@protoc_insertion_point(field_release:google.datastore.v1.Query.filter)
  
  ::google::datastore::v1::Filter* temp = filter_;
  filter_ = NULL;
  return temp;
}
inline ::google::datastore::v1::Filter* Query::mutable_filter() {
  
  if (filter_ == NULL) {
    filter_ = new ::google::datastore::v1::Filter;
  }
  // @@protoc_insertion_point(field_mutable:google.datastore.v1.Query.filter)
  return filter_;
}
inline void Query::set_allocated_filter(::google::datastore::v1::Filter* filter) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete filter_;
  }
  if (filter) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      filter = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, filter, submessage_arena);
    }
    
  } else {
    
  }
  filter_ = filter;
  // @@protoc_insertion_point(field_set_allocated:google.datastore.v1.Query.filter)
}

// repeated .google.datastore.v1.PropertyOrder order = 5;
inline int Query::order_size() const {
  return order_.size();
}
inline void Query::clear_order() {
  order_.Clear();
}
inline const ::google::datastore::v1::PropertyOrder& Query::order(int index) const {
  // @@protoc_insertion_point(field_get:google.datastore.v1.Query.order)
  return order_.Get(index);
}
inline ::google::datastore::v1::PropertyOrder* Query::mutable_order(int index) {
  // @@protoc_insertion_point(field_mutable:google.datastore.v1.Query.order)
  return order_.Mutable(index);
}
inline ::google::datastore::v1::PropertyOrder* Query::add_order() {
  // @@protoc_insertion_point(field_add:google.datastore.v1.Query.order)
  return order_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::google::datastore::v1::PropertyOrder >*
Query::mutable_order() {
  // @@protoc_insertion_point(field_mutable_list:google.datastore.v1.Query.order)
  return &order_;
}
inline const ::google::protobuf::RepeatedPtrField< ::google::datastore::v1::PropertyOrder >&
Query::order() const {
  // @@protoc_insertion_point(field_list:google.datastore.v1.Query.order)
  return order_;
}

// repeated .google.datastore.v1.PropertyReference distinct_on = 6;
inline int Query::distinct_on_size() const {
  return distinct_on_.size();
}
inline void Query::clear_distinct_on() {
  distinct_on_.Clear();
}
inline const ::google::datastore::v1::PropertyReference& Query::distinct_on(int index) const {
  // @@protoc_insertion_point(field_get:google.datastore.v1.Query.distinct_on)
  return distinct_on_.Get(index);
}
inline ::google::datastore::v1::PropertyReference* Query::mutable_distinct_on(int index) {
  // @@protoc_insertion_point(field_mutable:google.datastore.v1.Query.distinct_on)
  return distinct_on_.Mutable(index);
}
inline ::google::datastore::v1::PropertyReference* Query::add_distinct_on() {
  // @@protoc_insertion_point(field_add:google.datastore.v1.Query.distinct_on)
  return distinct_on_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::google::datastore::v1::PropertyReference >*
Query::mutable_distinct_on() {
  // @@protoc_insertion_point(field_mutable_list:google.datastore.v1.Query.distinct_on)
  return &distinct_on_;
}
inline const ::google::protobuf::RepeatedPtrField< ::google::datastore::v1::PropertyReference >&
Query::distinct_on() const {
  // @@protoc_insertion_point(field_list:google.datastore.v1.Query.distinct_on)
  return distinct_on_;
}

// bytes start_cursor = 7;
inline void Query::clear_start_cursor() {
  start_cursor_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Query::start_cursor() const {
  // @@protoc_insertion_point(field_get:google.datastore.v1.Query.start_cursor)
  return start_cursor_.GetNoArena();
}
inline void Query::set_start_cursor(const ::std::string& value) {
  
  start_cursor_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.datastore.v1.Query.start_cursor)
}
#if LANG_CXX11
inline void Query::set_start_cursor(::std::string&& value) {
  
  start_cursor_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.datastore.v1.Query.start_cursor)
}
#endif
inline void Query::set_start_cursor(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  start_cursor_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.datastore.v1.Query.start_cursor)
}
inline void Query::set_start_cursor(const void* value, size_t size) {
  
  start_cursor_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.datastore.v1.Query.start_cursor)
}
inline ::std::string* Query::mutable_start_cursor() {
  
  // @@protoc_insertion_point(field_mutable:google.datastore.v1.Query.start_cursor)
  return start_cursor_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Query::release_start_cursor() {
  // @@protoc_insertion_point(field_release:google.datastore.v1.Query.start_cursor)
  
  return start_cursor_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Query::set_allocated_start_cursor(::std::string* start_cursor) {
  if (start_cursor != NULL) {
    
  } else {
    
  }
  start_cursor_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), start_cursor);
  // @@protoc_insertion_point(field_set_allocated:google.datastore.v1.Query.start_cursor)
}

// bytes end_cursor = 8;
inline void Query::clear_end_cursor() {
  end_cursor_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Query::end_cursor() const {
  // @@protoc_insertion_point(field_get:google.datastore.v1.Query.end_cursor)
  return end_cursor_.GetNoArena();
}
inline void Query::set_end_cursor(const ::std::string& value) {
  
  end_cursor_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.datastore.v1.Query.end_cursor)
}
#if LANG_CXX11
inline void Query::set_end_cursor(::std::string&& value) {
  
  end_cursor_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.datastore.v1.Query.end_cursor)
}
#endif
inline void Query::set_end_cursor(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  end_cursor_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.datastore.v1.Query.end_cursor)
}
inline void Query::set_end_cursor(const void* value, size_t size) {
  
  end_cursor_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.datastore.v1.Query.end_cursor)
}
inline ::std::string* Query::mutable_end_cursor() {
  
  // @@protoc_insertion_point(field_mutable:google.datastore.v1.Query.end_cursor)
  return end_cursor_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Query::release_end_cursor() {
  // @@protoc_insertion_point(field_release:google.datastore.v1.Query.end_cursor)
  
  return end_cursor_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Query::set_allocated_end_cursor(::std::string* end_cursor) {
  if (end_cursor != NULL) {
    
  } else {
    
  }
  end_cursor_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), end_cursor);
  // @@protoc_insertion_point(field_set_allocated:google.datastore.v1.Query.end_cursor)
}

// int32 offset = 10;
inline void Query::clear_offset() {
  offset_ = 0;
}
inline ::google::protobuf::int32 Query::offset() const {
  // @@protoc_insertion_point(field_get:google.datastore.v1.Query.offset)
  return offset_;
}
inline void Query::set_offset(::google::protobuf::int32 value) {
  
  offset_ = value;
  // @@protoc_insertion_point(field_set:google.datastore.v1.Query.offset)
}

// .google.protobuf.Int32Value limit = 12;
inline bool Query::has_limit() const {
  return this != internal_default_instance() && limit_ != NULL;
}
inline const ::google::protobuf::Int32Value& Query::limit() const {
  const ::google::protobuf::Int32Value* p = limit_;
  // @@protoc_insertion_point(field_get:google.datastore.v1.Query.limit)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::Int32Value*>(
      &::google::protobuf::_Int32Value_default_instance_);
}
inline ::google::protobuf::Int32Value* Query::release_limit() {
  // @@protoc_insertion_point(field_release:google.datastore.v1.Query.limit)
  
  ::google::protobuf::Int32Value* temp = limit_;
  limit_ = NULL;
  return temp;
}
inline ::google::protobuf::Int32Value* Query::mutable_limit() {
  
  if (limit_ == NULL) {
    limit_ = new ::google::protobuf::Int32Value;
  }
  // @@protoc_insertion_point(field_mutable:google.datastore.v1.Query.limit)
  return limit_;
}
inline void Query::set_allocated_limit(::google::protobuf::Int32Value* limit) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(limit_);
  }
  if (limit) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast< ::google::protobuf::MessageLite*>(limit)->GetArena();
    if (message_arena != submessage_arena) {
      limit = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, limit, submessage_arena);
    }
    
  } else {
    
  }
  limit_ = limit;
  // @@protoc_insertion_point(field_set_allocated:google.datastore.v1.Query.limit)
}

// -------------------------------------------------------------------

// KindExpression

// string name = 1;
inline void KindExpression::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& KindExpression::name() const {
  // @@protoc_insertion_point(field_get:google.datastore.v1.KindExpression.name)
  return name_.GetNoArena();
}
inline void KindExpression::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.datastore.v1.KindExpression.name)
}
#if LANG_CXX11
inline void KindExpression::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.datastore.v1.KindExpression.name)
}
#endif
inline void KindExpression::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.datastore.v1.KindExpression.name)
}
inline void KindExpression::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.datastore.v1.KindExpression.name)
}
inline ::std::string* KindExpression::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:google.datastore.v1.KindExpression.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* KindExpression::release_name() {
  // @@protoc_insertion_point(field_release:google.datastore.v1.KindExpression.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void KindExpression::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:google.datastore.v1.KindExpression.name)
}

// -------------------------------------------------------------------

// PropertyReference

// string name = 2;
inline void PropertyReference::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PropertyReference::name() const {
  // @@protoc_insertion_point(field_get:google.datastore.v1.PropertyReference.name)
  return name_.GetNoArena();
}
inline void PropertyReference::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.datastore.v1.PropertyReference.name)
}
#if LANG_CXX11
inline void PropertyReference::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.datastore.v1.PropertyReference.name)
}
#endif
inline void PropertyReference::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.datastore.v1.PropertyReference.name)
}
inline void PropertyReference::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.datastore.v1.PropertyReference.name)
}
inline ::std::string* PropertyReference::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:google.datastore.v1.PropertyReference.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PropertyReference::release_name() {
  // @@protoc_insertion_point(field_release:google.datastore.v1.PropertyReference.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PropertyReference::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:google.datastore.v1.PropertyReference.name)
}

// -------------------------------------------------------------------

// Projection

// .google.datastore.v1.PropertyReference property = 1;
inline bool Projection::has_property() const {
  return this != internal_default_instance() && property_ != NULL;
}
inline void Projection::clear_property() {
  if (GetArenaNoVirtual() == NULL && property_ != NULL) {
    delete property_;
  }
  property_ = NULL;
}
inline const ::google::datastore::v1::PropertyReference& Projection::property() const {
  const ::google::datastore::v1::PropertyReference* p = property_;
  // @@protoc_insertion_point(field_get:google.datastore.v1.Projection.property)
  return p != NULL ? *p : *reinterpret_cast<const ::google::datastore::v1::PropertyReference*>(
      &::google::datastore::v1::_PropertyReference_default_instance_);
}
inline ::google::datastore::v1::PropertyReference* Projection::release_property() {
  // @@protoc_insertion_point(field_release:google.datastore.v1.Projection.property)
  
  ::google::datastore::v1::PropertyReference* temp = property_;
  property_ = NULL;
  return temp;
}
inline ::google::datastore::v1::PropertyReference* Projection::mutable_property() {
  
  if (property_ == NULL) {
    property_ = new ::google::datastore::v1::PropertyReference;
  }
  // @@protoc_insertion_point(field_mutable:google.datastore.v1.Projection.property)
  return property_;
}
inline void Projection::set_allocated_property(::google::datastore::v1::PropertyReference* property) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete property_;
  }
  if (property) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      property = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, property, submessage_arena);
    }
    
  } else {
    
  }
  property_ = property;
  // @@protoc_insertion_point(field_set_allocated:google.datastore.v1.Projection.property)
}

// -------------------------------------------------------------------

// PropertyOrder

// .google.datastore.v1.PropertyReference property = 1;
inline bool PropertyOrder::has_property() const {
  return this != internal_default_instance() && property_ != NULL;
}
inline void PropertyOrder::clear_property() {
  if (GetArenaNoVirtual() == NULL && property_ != NULL) {
    delete property_;
  }
  property_ = NULL;
}
inline const ::google::datastore::v1::PropertyReference& PropertyOrder::property() const {
  const ::google::datastore::v1::PropertyReference* p = property_;
  // @@protoc_insertion_point(field_get:google.datastore.v1.PropertyOrder.property)
  return p != NULL ? *p : *reinterpret_cast<const ::google::datastore::v1::PropertyReference*>(
      &::google::datastore::v1::_PropertyReference_default_instance_);
}
inline ::google::datastore::v1::PropertyReference* PropertyOrder::release_property() {
  // @@protoc_insertion_point(field_release:google.datastore.v1.PropertyOrder.property)
  
  ::google::datastore::v1::PropertyReference* temp = property_;
  property_ = NULL;
  return temp;
}
inline ::google::datastore::v1::PropertyReference* PropertyOrder::mutable_property() {
  
  if (property_ == NULL) {
    property_ = new ::google::datastore::v1::PropertyReference;
  }
  // @@protoc_insertion_point(field_mutable:google.datastore.v1.PropertyOrder.property)
  return property_;
}
inline void PropertyOrder::set_allocated_property(::google::datastore::v1::PropertyReference* property) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete property_;
  }
  if (property) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      property = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, property, submessage_arena);
    }
    
  } else {
    
  }
  property_ = property;
  // @@protoc_insertion_point(field_set_allocated:google.datastore.v1.PropertyOrder.property)
}

// .google.datastore.v1.PropertyOrder.Direction direction = 2;
inline void PropertyOrder::clear_direction() {
  direction_ = 0;
}
inline ::google::datastore::v1::PropertyOrder_Direction PropertyOrder::direction() const {
  // @@protoc_insertion_point(field_get:google.datastore.v1.PropertyOrder.direction)
  return static_cast< ::google::datastore::v1::PropertyOrder_Direction >(direction_);
}
inline void PropertyOrder::set_direction(::google::datastore::v1::PropertyOrder_Direction value) {
  
  direction_ = value;
  // @@protoc_insertion_point(field_set:google.datastore.v1.PropertyOrder.direction)
}

// -------------------------------------------------------------------

// Filter

// .google.datastore.v1.CompositeFilter composite_filter = 1;
inline bool Filter::has_composite_filter() const {
  return filter_type_case() == kCompositeFilter;
}
inline void Filter::set_has_composite_filter() {
  _oneof_case_[0] = kCompositeFilter;
}
inline void Filter::clear_composite_filter() {
  if (has_composite_filter()) {
    delete filter_type_.composite_filter_;
    clear_has_filter_type();
  }
}
inline ::google::datastore::v1::CompositeFilter* Filter::release_composite_filter() {
  // @@protoc_insertion_point(field_release:google.datastore.v1.Filter.composite_filter)
  if (has_composite_filter()) {
    clear_has_filter_type();
      ::google::datastore::v1::CompositeFilter* temp = filter_type_.composite_filter_;
    filter_type_.composite_filter_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::datastore::v1::CompositeFilter& Filter::composite_filter() const {
  // @@protoc_insertion_point(field_get:google.datastore.v1.Filter.composite_filter)
  return has_composite_filter()
      ? *filter_type_.composite_filter_
      : *reinterpret_cast< ::google::datastore::v1::CompositeFilter*>(&::google::datastore::v1::_CompositeFilter_default_instance_);
}
inline ::google::datastore::v1::CompositeFilter* Filter::mutable_composite_filter() {
  if (!has_composite_filter()) {
    clear_filter_type();
    set_has_composite_filter();
    filter_type_.composite_filter_ = new ::google::datastore::v1::CompositeFilter;
  }
  // @@protoc_insertion_point(field_mutable:google.datastore.v1.Filter.composite_filter)
  return filter_type_.composite_filter_;
}

// .google.datastore.v1.PropertyFilter property_filter = 2;
inline bool Filter::has_property_filter() const {
  return filter_type_case() == kPropertyFilter;
}
inline void Filter::set_has_property_filter() {
  _oneof_case_[0] = kPropertyFilter;
}
inline void Filter::clear_property_filter() {
  if (has_property_filter()) {
    delete filter_type_.property_filter_;
    clear_has_filter_type();
  }
}
inline ::google::datastore::v1::PropertyFilter* Filter::release_property_filter() {
  // @@protoc_insertion_point(field_release:google.datastore.v1.Filter.property_filter)
  if (has_property_filter()) {
    clear_has_filter_type();
      ::google::datastore::v1::PropertyFilter* temp = filter_type_.property_filter_;
    filter_type_.property_filter_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::datastore::v1::PropertyFilter& Filter::property_filter() const {
  // @@protoc_insertion_point(field_get:google.datastore.v1.Filter.property_filter)
  return has_property_filter()
      ? *filter_type_.property_filter_
      : *reinterpret_cast< ::google::datastore::v1::PropertyFilter*>(&::google::datastore::v1::_PropertyFilter_default_instance_);
}
inline ::google::datastore::v1::PropertyFilter* Filter::mutable_property_filter() {
  if (!has_property_filter()) {
    clear_filter_type();
    set_has_property_filter();
    filter_type_.property_filter_ = new ::google::datastore::v1::PropertyFilter;
  }
  // @@protoc_insertion_point(field_mutable:google.datastore.v1.Filter.property_filter)
  return filter_type_.property_filter_;
}

inline bool Filter::has_filter_type() const {
  return filter_type_case() != FILTER_TYPE_NOT_SET;
}
inline void Filter::clear_has_filter_type() {
  _oneof_case_[0] = FILTER_TYPE_NOT_SET;
}
inline Filter::FilterTypeCase Filter::filter_type_case() const {
  return Filter::FilterTypeCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// CompositeFilter

// .google.datastore.v1.CompositeFilter.Operator op = 1;
inline void CompositeFilter::clear_op() {
  op_ = 0;
}
inline ::google::datastore::v1::CompositeFilter_Operator CompositeFilter::op() const {
  // @@protoc_insertion_point(field_get:google.datastore.v1.CompositeFilter.op)
  return static_cast< ::google::datastore::v1::CompositeFilter_Operator >(op_);
}
inline void CompositeFilter::set_op(::google::datastore::v1::CompositeFilter_Operator value) {
  
  op_ = value;
  // @@protoc_insertion_point(field_set:google.datastore.v1.CompositeFilter.op)
}

// repeated .google.datastore.v1.Filter filters = 2;
inline int CompositeFilter::filters_size() const {
  return filters_.size();
}
inline void CompositeFilter::clear_filters() {
  filters_.Clear();
}
inline const ::google::datastore::v1::Filter& CompositeFilter::filters(int index) const {
  // @@protoc_insertion_point(field_get:google.datastore.v1.CompositeFilter.filters)
  return filters_.Get(index);
}
inline ::google::datastore::v1::Filter* CompositeFilter::mutable_filters(int index) {
  // @@protoc_insertion_point(field_mutable:google.datastore.v1.CompositeFilter.filters)
  return filters_.Mutable(index);
}
inline ::google::datastore::v1::Filter* CompositeFilter::add_filters() {
  // @@protoc_insertion_point(field_add:google.datastore.v1.CompositeFilter.filters)
  return filters_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::google::datastore::v1::Filter >*
CompositeFilter::mutable_filters() {
  // @@protoc_insertion_point(field_mutable_list:google.datastore.v1.CompositeFilter.filters)
  return &filters_;
}
inline const ::google::protobuf::RepeatedPtrField< ::google::datastore::v1::Filter >&
CompositeFilter::filters() const {
  // @@protoc_insertion_point(field_list:google.datastore.v1.CompositeFilter.filters)
  return filters_;
}

// -------------------------------------------------------------------

// PropertyFilter

// .google.datastore.v1.PropertyReference property = 1;
inline bool PropertyFilter::has_property() const {
  return this != internal_default_instance() && property_ != NULL;
}
inline void PropertyFilter::clear_property() {
  if (GetArenaNoVirtual() == NULL && property_ != NULL) {
    delete property_;
  }
  property_ = NULL;
}
inline const ::google::datastore::v1::PropertyReference& PropertyFilter::property() const {
  const ::google::datastore::v1::PropertyReference* p = property_;
  // @@protoc_insertion_point(field_get:google.datastore.v1.PropertyFilter.property)
  return p != NULL ? *p : *reinterpret_cast<const ::google::datastore::v1::PropertyReference*>(
      &::google::datastore::v1::_PropertyReference_default_instance_);
}
inline ::google::datastore::v1::PropertyReference* PropertyFilter::release_property() {
  // @@protoc_insertion_point(field_release:google.datastore.v1.PropertyFilter.property)
  
  ::google::datastore::v1::PropertyReference* temp = property_;
  property_ = NULL;
  return temp;
}
inline ::google::datastore::v1::PropertyReference* PropertyFilter::mutable_property() {
  
  if (property_ == NULL) {
    property_ = new ::google::datastore::v1::PropertyReference;
  }
  // @@protoc_insertion_point(field_mutable:google.datastore.v1.PropertyFilter.property)
  return property_;
}
inline void PropertyFilter::set_allocated_property(::google::datastore::v1::PropertyReference* property) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete property_;
  }
  if (property) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      property = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, property, submessage_arena);
    }
    
  } else {
    
  }
  property_ = property;
  // @@protoc_insertion_point(field_set_allocated:google.datastore.v1.PropertyFilter.property)
}

// .google.datastore.v1.PropertyFilter.Operator op = 2;
inline void PropertyFilter::clear_op() {
  op_ = 0;
}
inline ::google::datastore::v1::PropertyFilter_Operator PropertyFilter::op() const {
  // @@protoc_insertion_point(field_get:google.datastore.v1.PropertyFilter.op)
  return static_cast< ::google::datastore::v1::PropertyFilter_Operator >(op_);
}
inline void PropertyFilter::set_op(::google::datastore::v1::PropertyFilter_Operator value) {
  
  op_ = value;
  // @@protoc_insertion_point(field_set:google.datastore.v1.PropertyFilter.op)
}

// .google.datastore.v1.Value value = 3;
inline bool PropertyFilter::has_value() const {
  return this != internal_default_instance() && value_ != NULL;
}
inline const ::google::datastore::v1::Value& PropertyFilter::value() const {
  const ::google::datastore::v1::Value* p = value_;
  // @@protoc_insertion_point(field_get:google.datastore.v1.PropertyFilter.value)
  return p != NULL ? *p : *reinterpret_cast<const ::google::datastore::v1::Value*>(
      &::google::datastore::v1::_Value_default_instance_);
}
inline ::google::datastore::v1::Value* PropertyFilter::release_value() {
  // @@protoc_insertion_point(field_release:google.datastore.v1.PropertyFilter.value)
  
  ::google::datastore::v1::Value* temp = value_;
  value_ = NULL;
  return temp;
}
inline ::google::datastore::v1::Value* PropertyFilter::mutable_value() {
  
  if (value_ == NULL) {
    value_ = new ::google::datastore::v1::Value;
  }
  // @@protoc_insertion_point(field_mutable:google.datastore.v1.PropertyFilter.value)
  return value_;
}
inline void PropertyFilter::set_allocated_value(::google::datastore::v1::Value* value) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(value_);
  }
  if (value) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, value, submessage_arena);
    }
    
  } else {
    
  }
  value_ = value;
  // @@protoc_insertion_point(field_set_allocated:google.datastore.v1.PropertyFilter.value)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// GqlQuery

// string query_string = 1;
inline void GqlQuery::clear_query_string() {
  query_string_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GqlQuery::query_string() const {
  // @@protoc_insertion_point(field_get:google.datastore.v1.GqlQuery.query_string)
  return query_string_.GetNoArena();
}
inline void GqlQuery::set_query_string(const ::std::string& value) {
  
  query_string_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.datastore.v1.GqlQuery.query_string)
}
#if LANG_CXX11
inline void GqlQuery::set_query_string(::std::string&& value) {
  
  query_string_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.datastore.v1.GqlQuery.query_string)
}
#endif
inline void GqlQuery::set_query_string(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  query_string_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.datastore.v1.GqlQuery.query_string)
}
inline void GqlQuery::set_query_string(const char* value, size_t size) {
  
  query_string_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.datastore.v1.GqlQuery.query_string)
}
inline ::std::string* GqlQuery::mutable_query_string() {
  
  // @@protoc_insertion_point(field_mutable:google.datastore.v1.GqlQuery.query_string)
  return query_string_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GqlQuery::release_query_string() {
  // @@protoc_insertion_point(field_release:google.datastore.v1.GqlQuery.query_string)
  
  return query_string_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GqlQuery::set_allocated_query_string(::std::string* query_string) {
  if (query_string != NULL) {
    
  } else {
    
  }
  query_string_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), query_string);
  // @@protoc_insertion_point(field_set_allocated:google.datastore.v1.GqlQuery.query_string)
}

// bool allow_literals = 2;
inline void GqlQuery::clear_allow_literals() {
  allow_literals_ = false;
}
inline bool GqlQuery::allow_literals() const {
  // @@protoc_insertion_point(field_get:google.datastore.v1.GqlQuery.allow_literals)
  return allow_literals_;
}
inline void GqlQuery::set_allow_literals(bool value) {
  
  allow_literals_ = value;
  // @@protoc_insertion_point(field_set:google.datastore.v1.GqlQuery.allow_literals)
}

// map<string, .google.datastore.v1.GqlQueryParameter> named_bindings = 5;
inline int GqlQuery::named_bindings_size() const {
  return named_bindings_.size();
}
inline void GqlQuery::clear_named_bindings() {
  named_bindings_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::google::datastore::v1::GqlQueryParameter >&
GqlQuery::named_bindings() const {
  // @@protoc_insertion_point(field_map:google.datastore.v1.GqlQuery.named_bindings)
  return named_bindings_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::google::datastore::v1::GqlQueryParameter >*
GqlQuery::mutable_named_bindings() {
  // @@protoc_insertion_point(field_mutable_map:google.datastore.v1.GqlQuery.named_bindings)
  return named_bindings_.MutableMap();
}

// repeated .google.datastore.v1.GqlQueryParameter positional_bindings = 4;
inline int GqlQuery::positional_bindings_size() const {
  return positional_bindings_.size();
}
inline void GqlQuery::clear_positional_bindings() {
  positional_bindings_.Clear();
}
inline const ::google::datastore::v1::GqlQueryParameter& GqlQuery::positional_bindings(int index) const {
  // @@protoc_insertion_point(field_get:google.datastore.v1.GqlQuery.positional_bindings)
  return positional_bindings_.Get(index);
}
inline ::google::datastore::v1::GqlQueryParameter* GqlQuery::mutable_positional_bindings(int index) {
  // @@protoc_insertion_point(field_mutable:google.datastore.v1.GqlQuery.positional_bindings)
  return positional_bindings_.Mutable(index);
}
inline ::google::datastore::v1::GqlQueryParameter* GqlQuery::add_positional_bindings() {
  // @@protoc_insertion_point(field_add:google.datastore.v1.GqlQuery.positional_bindings)
  return positional_bindings_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::google::datastore::v1::GqlQueryParameter >*
GqlQuery::mutable_positional_bindings() {
  // @@protoc_insertion_point(field_mutable_list:google.datastore.v1.GqlQuery.positional_bindings)
  return &positional_bindings_;
}
inline const ::google::protobuf::RepeatedPtrField< ::google::datastore::v1::GqlQueryParameter >&
GqlQuery::positional_bindings() const {
  // @@protoc_insertion_point(field_list:google.datastore.v1.GqlQuery.positional_bindings)
  return positional_bindings_;
}

// -------------------------------------------------------------------

// GqlQueryParameter

// .google.datastore.v1.Value value = 2;
inline bool GqlQueryParameter::has_value() const {
  return parameter_type_case() == kValue;
}
inline void GqlQueryParameter::set_has_value() {
  _oneof_case_[0] = kValue;
}
inline ::google::datastore::v1::Value* GqlQueryParameter::release_value() {
  // @@protoc_insertion_point(field_release:google.datastore.v1.GqlQueryParameter.value)
  if (has_value()) {
    clear_has_parameter_type();
      ::google::datastore::v1::Value* temp = parameter_type_.value_;
    parameter_type_.value_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::datastore::v1::Value& GqlQueryParameter::value() const {
  // @@protoc_insertion_point(field_get:google.datastore.v1.GqlQueryParameter.value)
  return has_value()
      ? *parameter_type_.value_
      : *reinterpret_cast< ::google::datastore::v1::Value*>(&::google::datastore::v1::_Value_default_instance_);
}
inline ::google::datastore::v1::Value* GqlQueryParameter::mutable_value() {
  if (!has_value()) {
    clear_parameter_type();
    set_has_value();
    parameter_type_.value_ = new ::google::datastore::v1::Value;
  }
  // @@protoc_insertion_point(field_mutable:google.datastore.v1.GqlQueryParameter.value)
  return parameter_type_.value_;
}

// bytes cursor = 3;
inline bool GqlQueryParameter::has_cursor() const {
  return parameter_type_case() == kCursor;
}
inline void GqlQueryParameter::set_has_cursor() {
  _oneof_case_[0] = kCursor;
}
inline void GqlQueryParameter::clear_cursor() {
  if (has_cursor()) {
    parameter_type_.cursor_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_parameter_type();
  }
}
inline const ::std::string& GqlQueryParameter::cursor() const {
  // @@protoc_insertion_point(field_get:google.datastore.v1.GqlQueryParameter.cursor)
  if (has_cursor()) {
    return parameter_type_.cursor_.GetNoArena();
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
inline void GqlQueryParameter::set_cursor(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:google.datastore.v1.GqlQueryParameter.cursor)
  if (!has_cursor()) {
    clear_parameter_type();
    set_has_cursor();
    parameter_type_.cursor_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  parameter_type_.cursor_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.datastore.v1.GqlQueryParameter.cursor)
}
#if LANG_CXX11
inline void GqlQueryParameter::set_cursor(::std::string&& value) {
  // @@protoc_insertion_point(field_set:google.datastore.v1.GqlQueryParameter.cursor)
  if (!has_cursor()) {
    clear_parameter_type();
    set_has_cursor();
    parameter_type_.cursor_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  parameter_type_.cursor_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.datastore.v1.GqlQueryParameter.cursor)
}
#endif
inline void GqlQueryParameter::set_cursor(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  if (!has_cursor()) {
    clear_parameter_type();
    set_has_cursor();
    parameter_type_.cursor_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  parameter_type_.cursor_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.datastore.v1.GqlQueryParameter.cursor)
}
inline void GqlQueryParameter::set_cursor(const void* value, size_t size) {
  if (!has_cursor()) {
    clear_parameter_type();
    set_has_cursor();
    parameter_type_.cursor_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  parameter_type_.cursor_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.datastore.v1.GqlQueryParameter.cursor)
}
inline ::std::string* GqlQueryParameter::mutable_cursor() {
  if (!has_cursor()) {
    clear_parameter_type();
    set_has_cursor();
    parameter_type_.cursor_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:google.datastore.v1.GqlQueryParameter.cursor)
  return parameter_type_.cursor_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GqlQueryParameter::release_cursor() {
  // @@protoc_insertion_point(field_release:google.datastore.v1.GqlQueryParameter.cursor)
  if (has_cursor()) {
    clear_has_parameter_type();
    return parameter_type_.cursor_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
inline void GqlQueryParameter::set_allocated_cursor(::std::string* cursor) {
  if (!has_cursor()) {
    parameter_type_.cursor_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_parameter_type();
  if (cursor != NULL) {
    set_has_cursor();
    parameter_type_.cursor_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        cursor);
  }
  // @@protoc_insertion_point(field_set_allocated:google.datastore.v1.GqlQueryParameter.cursor)
}

inline bool GqlQueryParameter::has_parameter_type() const {
  return parameter_type_case() != PARAMETER_TYPE_NOT_SET;
}
inline void GqlQueryParameter::clear_has_parameter_type() {
  _oneof_case_[0] = PARAMETER_TYPE_NOT_SET;
}
inline GqlQueryParameter::ParameterTypeCase GqlQueryParameter::parameter_type_case() const {
  return GqlQueryParameter::ParameterTypeCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// QueryResultBatch

// int32 skipped_results = 6;
inline void QueryResultBatch::clear_skipped_results() {
  skipped_results_ = 0;
}
inline ::google::protobuf::int32 QueryResultBatch::skipped_results() const {
  // @@protoc_insertion_point(field_get:google.datastore.v1.QueryResultBatch.skipped_results)
  return skipped_results_;
}
inline void QueryResultBatch::set_skipped_results(::google::protobuf::int32 value) {
  
  skipped_results_ = value;
  // @@protoc_insertion_point(field_set:google.datastore.v1.QueryResultBatch.skipped_results)
}

// bytes skipped_cursor = 3;
inline void QueryResultBatch::clear_skipped_cursor() {
  skipped_cursor_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& QueryResultBatch::skipped_cursor() const {
  // @@protoc_insertion_point(field_get:google.datastore.v1.QueryResultBatch.skipped_cursor)
  return skipped_cursor_.GetNoArena();
}
inline void QueryResultBatch::set_skipped_cursor(const ::std::string& value) {
  
  skipped_cursor_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.datastore.v1.QueryResultBatch.skipped_cursor)
}
#if LANG_CXX11
inline void QueryResultBatch::set_skipped_cursor(::std::string&& value) {
  
  skipped_cursor_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.datastore.v1.QueryResultBatch.skipped_cursor)
}
#endif
inline void QueryResultBatch::set_skipped_cursor(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  skipped_cursor_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.datastore.v1.QueryResultBatch.skipped_cursor)
}
inline void QueryResultBatch::set_skipped_cursor(const void* value, size_t size) {
  
  skipped_cursor_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.datastore.v1.QueryResultBatch.skipped_cursor)
}
inline ::std::string* QueryResultBatch::mutable_skipped_cursor() {
  
  // @@protoc_insertion_point(field_mutable:google.datastore.v1.QueryResultBatch.skipped_cursor)
  return skipped_cursor_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* QueryResultBatch::release_skipped_cursor() {
  // @@protoc_insertion_point(field_release:google.datastore.v1.QueryResultBatch.skipped_cursor)
  
  return skipped_cursor_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void QueryResultBatch::set_allocated_skipped_cursor(::std::string* skipped_cursor) {
  if (skipped_cursor != NULL) {
    
  } else {
    
  }
  skipped_cursor_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), skipped_cursor);
  // @@protoc_insertion_point(field_set_allocated:google.datastore.v1.QueryResultBatch.skipped_cursor)
}

// .google.datastore.v1.EntityResult.ResultType entity_result_type = 1;
inline void QueryResultBatch::clear_entity_result_type() {
  entity_result_type_ = 0;
}
inline ::google::datastore::v1::EntityResult_ResultType QueryResultBatch::entity_result_type() const {
  // @@protoc_insertion_point(field_get:google.datastore.v1.QueryResultBatch.entity_result_type)
  return static_cast< ::google::datastore::v1::EntityResult_ResultType >(entity_result_type_);
}
inline void QueryResultBatch::set_entity_result_type(::google::datastore::v1::EntityResult_ResultType value) {
  
  entity_result_type_ = value;
  // @@protoc_insertion_point(field_set:google.datastore.v1.QueryResultBatch.entity_result_type)
}

// repeated .google.datastore.v1.EntityResult entity_results = 2;
inline int QueryResultBatch::entity_results_size() const {
  return entity_results_.size();
}
inline void QueryResultBatch::clear_entity_results() {
  entity_results_.Clear();
}
inline const ::google::datastore::v1::EntityResult& QueryResultBatch::entity_results(int index) const {
  // @@protoc_insertion_point(field_get:google.datastore.v1.QueryResultBatch.entity_results)
  return entity_results_.Get(index);
}
inline ::google::datastore::v1::EntityResult* QueryResultBatch::mutable_entity_results(int index) {
  // @@protoc_insertion_point(field_mutable:google.datastore.v1.QueryResultBatch.entity_results)
  return entity_results_.Mutable(index);
}
inline ::google::datastore::v1::EntityResult* QueryResultBatch::add_entity_results() {
  // @@protoc_insertion_point(field_add:google.datastore.v1.QueryResultBatch.entity_results)
  return entity_results_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::google::datastore::v1::EntityResult >*
QueryResultBatch::mutable_entity_results() {
  // @@protoc_insertion_point(field_mutable_list:google.datastore.v1.QueryResultBatch.entity_results)
  return &entity_results_;
}
inline const ::google::protobuf::RepeatedPtrField< ::google::datastore::v1::EntityResult >&
QueryResultBatch::entity_results() const {
  // @@protoc_insertion_point(field_list:google.datastore.v1.QueryResultBatch.entity_results)
  return entity_results_;
}

// bytes end_cursor = 4;
inline void QueryResultBatch::clear_end_cursor() {
  end_cursor_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& QueryResultBatch::end_cursor() const {
  // @@protoc_insertion_point(field_get:google.datastore.v1.QueryResultBatch.end_cursor)
  return end_cursor_.GetNoArena();
}
inline void QueryResultBatch::set_end_cursor(const ::std::string& value) {
  
  end_cursor_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.datastore.v1.QueryResultBatch.end_cursor)
}
#if LANG_CXX11
inline void QueryResultBatch::set_end_cursor(::std::string&& value) {
  
  end_cursor_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.datastore.v1.QueryResultBatch.end_cursor)
}
#endif
inline void QueryResultBatch::set_end_cursor(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  end_cursor_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.datastore.v1.QueryResultBatch.end_cursor)
}
inline void QueryResultBatch::set_end_cursor(const void* value, size_t size) {
  
  end_cursor_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.datastore.v1.QueryResultBatch.end_cursor)
}
inline ::std::string* QueryResultBatch::mutable_end_cursor() {
  
  // @@protoc_insertion_point(field_mutable:google.datastore.v1.QueryResultBatch.end_cursor)
  return end_cursor_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* QueryResultBatch::release_end_cursor() {
  // @@protoc_insertion_point(field_release:google.datastore.v1.QueryResultBatch.end_cursor)
  
  return end_cursor_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void QueryResultBatch::set_allocated_end_cursor(::std::string* end_cursor) {
  if (end_cursor != NULL) {
    
  } else {
    
  }
  end_cursor_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), end_cursor);
  // @@protoc_insertion_point(field_set_allocated:google.datastore.v1.QueryResultBatch.end_cursor)
}

// .google.datastore.v1.QueryResultBatch.MoreResultsType more_results = 5;
inline void QueryResultBatch::clear_more_results() {
  more_results_ = 0;
}
inline ::google::datastore::v1::QueryResultBatch_MoreResultsType QueryResultBatch::more_results() const {
  // @@protoc_insertion_point(field_get:google.datastore.v1.QueryResultBatch.more_results)
  return static_cast< ::google::datastore::v1::QueryResultBatch_MoreResultsType >(more_results_);
}
inline void QueryResultBatch::set_more_results(::google::datastore::v1::QueryResultBatch_MoreResultsType value) {
  
  more_results_ = value;
  // @@protoc_insertion_point(field_set:google.datastore.v1.QueryResultBatch.more_results)
}

// int64 snapshot_version = 7;
inline void QueryResultBatch::clear_snapshot_version() {
  snapshot_version_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 QueryResultBatch::snapshot_version() const {
  // @@protoc_insertion_point(field_get:google.datastore.v1.QueryResultBatch.snapshot_version)
  return snapshot_version_;
}
inline void QueryResultBatch::set_snapshot_version(::google::protobuf::int64 value) {
  
  snapshot_version_ = value;
  // @@protoc_insertion_point(field_set:google.datastore.v1.QueryResultBatch.snapshot_version)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace datastore
}  // namespace google

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::google::datastore::v1::EntityResult_ResultType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::google::datastore::v1::EntityResult_ResultType>() {
  return ::google::datastore::v1::EntityResult_ResultType_descriptor();
}
template <> struct is_proto_enum< ::google::datastore::v1::PropertyOrder_Direction> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::google::datastore::v1::PropertyOrder_Direction>() {
  return ::google::datastore::v1::PropertyOrder_Direction_descriptor();
}
template <> struct is_proto_enum< ::google::datastore::v1::CompositeFilter_Operator> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::google::datastore::v1::CompositeFilter_Operator>() {
  return ::google::datastore::v1::CompositeFilter_Operator_descriptor();
}
template <> struct is_proto_enum< ::google::datastore::v1::PropertyFilter_Operator> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::google::datastore::v1::PropertyFilter_Operator>() {
  return ::google::datastore::v1::PropertyFilter_Operator_descriptor();
}
template <> struct is_proto_enum< ::google::datastore::v1::QueryResultBatch_MoreResultsType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::google::datastore::v1::QueryResultBatch_MoreResultsType>() {
  return ::google::datastore::v1::QueryResultBatch_MoreResultsType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_google_2fdatastore_2fv1_2fquery_2eproto__INCLUDED
