// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/cloud/bigquery/logging/v1/audit_data.proto

#ifndef PROTOBUF_google_2fcloud_2fbigquery_2flogging_2fv1_2faudit_5fdata_2eproto__INCLUDED
#define PROTOBUF_google_2fcloud_2fbigquery_2flogging_2fv1_2faudit_5fdata_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "google/api/annotations.pb.h"
#include <google/protobuf/duration.pb.h>
#include <google/protobuf/timestamp.pb.h>
#include "google/rpc/status.pb.h"
// @@protoc_insertion_point(includes)

namespace protobuf_google_2fcloud_2fbigquery_2flogging_2fv1_2faudit_5fdata_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[38];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsAuditDataImpl();
void InitDefaultsAuditData();
void InitDefaultsTableInsertRequestImpl();
void InitDefaultsTableInsertRequest();
void InitDefaultsTableUpdateRequestImpl();
void InitDefaultsTableUpdateRequest();
void InitDefaultsTableInsertResponseImpl();
void InitDefaultsTableInsertResponse();
void InitDefaultsTableUpdateResponseImpl();
void InitDefaultsTableUpdateResponse();
void InitDefaultsDatasetListRequestImpl();
void InitDefaultsDatasetListRequest();
void InitDefaultsDatasetInsertRequestImpl();
void InitDefaultsDatasetInsertRequest();
void InitDefaultsDatasetInsertResponseImpl();
void InitDefaultsDatasetInsertResponse();
void InitDefaultsDatasetUpdateRequestImpl();
void InitDefaultsDatasetUpdateRequest();
void InitDefaultsDatasetUpdateResponseImpl();
void InitDefaultsDatasetUpdateResponse();
void InitDefaultsJobInsertRequestImpl();
void InitDefaultsJobInsertRequest();
void InitDefaultsJobInsertResponseImpl();
void InitDefaultsJobInsertResponse();
void InitDefaultsJobQueryRequestImpl();
void InitDefaultsJobQueryRequest();
void InitDefaultsJobQueryResponseImpl();
void InitDefaultsJobQueryResponse();
void InitDefaultsJobGetQueryResultsRequestImpl();
void InitDefaultsJobGetQueryResultsRequest();
void InitDefaultsJobGetQueryResultsResponseImpl();
void InitDefaultsJobGetQueryResultsResponse();
void InitDefaultsJobQueryDoneResponseImpl();
void InitDefaultsJobQueryDoneResponse();
void InitDefaultsJobCompletedEventImpl();
void InitDefaultsJobCompletedEvent();
void InitDefaultsTableDataListRequestImpl();
void InitDefaultsTableDataListRequest();
void InitDefaultsTableImpl();
void InitDefaultsTable();
void InitDefaultsTableInfoImpl();
void InitDefaultsTableInfo();
void InitDefaultsTableViewDefinitionImpl();
void InitDefaultsTableViewDefinition();
void InitDefaultsDatasetImpl();
void InitDefaultsDataset();
void InitDefaultsDatasetInfoImpl();
void InitDefaultsDatasetInfo();
void InitDefaultsBigQueryAcl_EntryImpl();
void InitDefaultsBigQueryAcl_Entry();
void InitDefaultsBigQueryAclImpl();
void InitDefaultsBigQueryAcl();
void InitDefaultsJobImpl();
void InitDefaultsJob();
void InitDefaultsJobConfiguration_QueryImpl();
void InitDefaultsJobConfiguration_Query();
void InitDefaultsJobConfiguration_LoadImpl();
void InitDefaultsJobConfiguration_Load();
void InitDefaultsJobConfiguration_ExtractImpl();
void InitDefaultsJobConfiguration_Extract();
void InitDefaultsJobConfiguration_TableCopyImpl();
void InitDefaultsJobConfiguration_TableCopy();
void InitDefaultsJobConfigurationImpl();
void InitDefaultsJobConfiguration();
void InitDefaultsTableDefinitionImpl();
void InitDefaultsTableDefinition();
void InitDefaultsJobStatusImpl();
void InitDefaultsJobStatus();
void InitDefaultsJobStatisticsImpl();
void InitDefaultsJobStatistics();
void InitDefaultsDatasetNameImpl();
void InitDefaultsDatasetName();
void InitDefaultsTableNameImpl();
void InitDefaultsTableName();
void InitDefaultsJobNameImpl();
void InitDefaultsJobName();
inline void InitDefaults() {
  InitDefaultsAuditData();
  InitDefaultsTableInsertRequest();
  InitDefaultsTableUpdateRequest();
  InitDefaultsTableInsertResponse();
  InitDefaultsTableUpdateResponse();
  InitDefaultsDatasetListRequest();
  InitDefaultsDatasetInsertRequest();
  InitDefaultsDatasetInsertResponse();
  InitDefaultsDatasetUpdateRequest();
  InitDefaultsDatasetUpdateResponse();
  InitDefaultsJobInsertRequest();
  InitDefaultsJobInsertResponse();
  InitDefaultsJobQueryRequest();
  InitDefaultsJobQueryResponse();
  InitDefaultsJobGetQueryResultsRequest();
  InitDefaultsJobGetQueryResultsResponse();
  InitDefaultsJobQueryDoneResponse();
  InitDefaultsJobCompletedEvent();
  InitDefaultsTableDataListRequest();
  InitDefaultsTable();
  InitDefaultsTableInfo();
  InitDefaultsTableViewDefinition();
  InitDefaultsDataset();
  InitDefaultsDatasetInfo();
  InitDefaultsBigQueryAcl_Entry();
  InitDefaultsBigQueryAcl();
  InitDefaultsJob();
  InitDefaultsJobConfiguration_Query();
  InitDefaultsJobConfiguration_Load();
  InitDefaultsJobConfiguration_Extract();
  InitDefaultsJobConfiguration_TableCopy();
  InitDefaultsJobConfiguration();
  InitDefaultsTableDefinition();
  InitDefaultsJobStatus();
  InitDefaultsJobStatistics();
  InitDefaultsDatasetName();
  InitDefaultsTableName();
  InitDefaultsJobName();
}
}  // namespace protobuf_google_2fcloud_2fbigquery_2flogging_2fv1_2faudit_5fdata_2eproto
namespace google {
namespace cloud {
namespace bigquery {
namespace logging {
namespace v1 {
class AuditData;
class AuditDataDefaultTypeInternal;
extern AuditDataDefaultTypeInternal _AuditData_default_instance_;
class BigQueryAcl;
class BigQueryAclDefaultTypeInternal;
extern BigQueryAclDefaultTypeInternal _BigQueryAcl_default_instance_;
class BigQueryAcl_Entry;
class BigQueryAcl_EntryDefaultTypeInternal;
extern BigQueryAcl_EntryDefaultTypeInternal _BigQueryAcl_Entry_default_instance_;
class Dataset;
class DatasetDefaultTypeInternal;
extern DatasetDefaultTypeInternal _Dataset_default_instance_;
class DatasetInfo;
class DatasetInfoDefaultTypeInternal;
extern DatasetInfoDefaultTypeInternal _DatasetInfo_default_instance_;
class DatasetInsertRequest;
class DatasetInsertRequestDefaultTypeInternal;
extern DatasetInsertRequestDefaultTypeInternal _DatasetInsertRequest_default_instance_;
class DatasetInsertResponse;
class DatasetInsertResponseDefaultTypeInternal;
extern DatasetInsertResponseDefaultTypeInternal _DatasetInsertResponse_default_instance_;
class DatasetListRequest;
class DatasetListRequestDefaultTypeInternal;
extern DatasetListRequestDefaultTypeInternal _DatasetListRequest_default_instance_;
class DatasetName;
class DatasetNameDefaultTypeInternal;
extern DatasetNameDefaultTypeInternal _DatasetName_default_instance_;
class DatasetUpdateRequest;
class DatasetUpdateRequestDefaultTypeInternal;
extern DatasetUpdateRequestDefaultTypeInternal _DatasetUpdateRequest_default_instance_;
class DatasetUpdateResponse;
class DatasetUpdateResponseDefaultTypeInternal;
extern DatasetUpdateResponseDefaultTypeInternal _DatasetUpdateResponse_default_instance_;
class Job;
class JobDefaultTypeInternal;
extern JobDefaultTypeInternal _Job_default_instance_;
class JobCompletedEvent;
class JobCompletedEventDefaultTypeInternal;
extern JobCompletedEventDefaultTypeInternal _JobCompletedEvent_default_instance_;
class JobConfiguration;
class JobConfigurationDefaultTypeInternal;
extern JobConfigurationDefaultTypeInternal _JobConfiguration_default_instance_;
class JobConfiguration_Extract;
class JobConfiguration_ExtractDefaultTypeInternal;
extern JobConfiguration_ExtractDefaultTypeInternal _JobConfiguration_Extract_default_instance_;
class JobConfiguration_Load;
class JobConfiguration_LoadDefaultTypeInternal;
extern JobConfiguration_LoadDefaultTypeInternal _JobConfiguration_Load_default_instance_;
class JobConfiguration_Query;
class JobConfiguration_QueryDefaultTypeInternal;
extern JobConfiguration_QueryDefaultTypeInternal _JobConfiguration_Query_default_instance_;
class JobConfiguration_TableCopy;
class JobConfiguration_TableCopyDefaultTypeInternal;
extern JobConfiguration_TableCopyDefaultTypeInternal _JobConfiguration_TableCopy_default_instance_;
class JobGetQueryResultsRequest;
class JobGetQueryResultsRequestDefaultTypeInternal;
extern JobGetQueryResultsRequestDefaultTypeInternal _JobGetQueryResultsRequest_default_instance_;
class JobGetQueryResultsResponse;
class JobGetQueryResultsResponseDefaultTypeInternal;
extern JobGetQueryResultsResponseDefaultTypeInternal _JobGetQueryResultsResponse_default_instance_;
class JobInsertRequest;
class JobInsertRequestDefaultTypeInternal;
extern JobInsertRequestDefaultTypeInternal _JobInsertRequest_default_instance_;
class JobInsertResponse;
class JobInsertResponseDefaultTypeInternal;
extern JobInsertResponseDefaultTypeInternal _JobInsertResponse_default_instance_;
class JobName;
class JobNameDefaultTypeInternal;
extern JobNameDefaultTypeInternal _JobName_default_instance_;
class JobQueryDoneResponse;
class JobQueryDoneResponseDefaultTypeInternal;
extern JobQueryDoneResponseDefaultTypeInternal _JobQueryDoneResponse_default_instance_;
class JobQueryRequest;
class JobQueryRequestDefaultTypeInternal;
extern JobQueryRequestDefaultTypeInternal _JobQueryRequest_default_instance_;
class JobQueryResponse;
class JobQueryResponseDefaultTypeInternal;
extern JobQueryResponseDefaultTypeInternal _JobQueryResponse_default_instance_;
class JobStatistics;
class JobStatisticsDefaultTypeInternal;
extern JobStatisticsDefaultTypeInternal _JobStatistics_default_instance_;
class JobStatus;
class JobStatusDefaultTypeInternal;
extern JobStatusDefaultTypeInternal _JobStatus_default_instance_;
class Table;
class TableDefaultTypeInternal;
extern TableDefaultTypeInternal _Table_default_instance_;
class TableDataListRequest;
class TableDataListRequestDefaultTypeInternal;
extern TableDataListRequestDefaultTypeInternal _TableDataListRequest_default_instance_;
class TableDefinition;
class TableDefinitionDefaultTypeInternal;
extern TableDefinitionDefaultTypeInternal _TableDefinition_default_instance_;
class TableInfo;
class TableInfoDefaultTypeInternal;
extern TableInfoDefaultTypeInternal _TableInfo_default_instance_;
class TableInsertRequest;
class TableInsertRequestDefaultTypeInternal;
extern TableInsertRequestDefaultTypeInternal _TableInsertRequest_default_instance_;
class TableInsertResponse;
class TableInsertResponseDefaultTypeInternal;
extern TableInsertResponseDefaultTypeInternal _TableInsertResponse_default_instance_;
class TableName;
class TableNameDefaultTypeInternal;
extern TableNameDefaultTypeInternal _TableName_default_instance_;
class TableUpdateRequest;
class TableUpdateRequestDefaultTypeInternal;
extern TableUpdateRequestDefaultTypeInternal _TableUpdateRequest_default_instance_;
class TableUpdateResponse;
class TableUpdateResponseDefaultTypeInternal;
extern TableUpdateResponseDefaultTypeInternal _TableUpdateResponse_default_instance_;
class TableViewDefinition;
class TableViewDefinitionDefaultTypeInternal;
extern TableViewDefinitionDefaultTypeInternal _TableViewDefinition_default_instance_;
}  // namespace v1
}  // namespace logging
}  // namespace bigquery
}  // namespace cloud
}  // namespace google
namespace google {
namespace cloud {
namespace bigquery {
namespace logging {
namespace v1 {

// ===================================================================

class AuditData : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.cloud.bigquery.logging.v1.AuditData) */ {
 public:
  AuditData();
  virtual ~AuditData();

  AuditData(const AuditData& from);

  inline AuditData& operator=(const AuditData& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AuditData(AuditData&& from) noexcept
    : AuditData() {
    *this = ::std::move(from);
  }

  inline AuditData& operator=(AuditData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const AuditData& default_instance();

  enum RequestCase {
    kTableInsertRequest = 1,
    kTableUpdateRequest = 16,
    kDatasetListRequest = 2,
    kDatasetInsertRequest = 3,
    kDatasetUpdateRequest = 4,
    kJobInsertRequest = 5,
    kJobQueryRequest = 6,
    kJobGetQueryResultsRequest = 7,
    kTableDataListRequest = 8,
    REQUEST_NOT_SET = 0,
  };

  enum ResponseCase {
    kTableInsertResponse = 9,
    kTableUpdateResponse = 10,
    kDatasetInsertResponse = 11,
    kDatasetUpdateResponse = 12,
    kJobInsertResponse = 18,
    kJobQueryResponse = 13,
    kJobGetQueryResultsResponse = 14,
    kJobQueryDoneResponse = 15,
    RESPONSE_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AuditData* internal_default_instance() {
    return reinterpret_cast<const AuditData*>(
               &_AuditData_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(AuditData* other);
  friend void swap(AuditData& a, AuditData& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AuditData* New() const PROTOBUF_FINAL { return New(NULL); }

  AuditData* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const AuditData& from);
  void MergeFrom(const AuditData& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(AuditData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.cloud.bigquery.logging.v1.JobCompletedEvent job_completed_event = 17;
  bool has_job_completed_event() const;
  void clear_job_completed_event();
  static const int kJobCompletedEventFieldNumber = 17;
  const ::google::cloud::bigquery::logging::v1::JobCompletedEvent& job_completed_event() const;
  ::google::cloud::bigquery::logging::v1::JobCompletedEvent* release_job_completed_event();
  ::google::cloud::bigquery::logging::v1::JobCompletedEvent* mutable_job_completed_event();
  void set_allocated_job_completed_event(::google::cloud::bigquery::logging::v1::JobCompletedEvent* job_completed_event);

  // .google.cloud.bigquery.logging.v1.TableInsertRequest table_insert_request = 1;
  bool has_table_insert_request() const;
  void clear_table_insert_request();
  static const int kTableInsertRequestFieldNumber = 1;
  const ::google::cloud::bigquery::logging::v1::TableInsertRequest& table_insert_request() const;
  ::google::cloud::bigquery::logging::v1::TableInsertRequest* release_table_insert_request();
  ::google::cloud::bigquery::logging::v1::TableInsertRequest* mutable_table_insert_request();
  void set_allocated_table_insert_request(::google::cloud::bigquery::logging::v1::TableInsertRequest* table_insert_request);

  // .google.cloud.bigquery.logging.v1.TableUpdateRequest table_update_request = 16;
  bool has_table_update_request() const;
  void clear_table_update_request();
  static const int kTableUpdateRequestFieldNumber = 16;
  const ::google::cloud::bigquery::logging::v1::TableUpdateRequest& table_update_request() const;
  ::google::cloud::bigquery::logging::v1::TableUpdateRequest* release_table_update_request();
  ::google::cloud::bigquery::logging::v1::TableUpdateRequest* mutable_table_update_request();
  void set_allocated_table_update_request(::google::cloud::bigquery::logging::v1::TableUpdateRequest* table_update_request);

  // .google.cloud.bigquery.logging.v1.DatasetListRequest dataset_list_request = 2;
  bool has_dataset_list_request() const;
  void clear_dataset_list_request();
  static const int kDatasetListRequestFieldNumber = 2;
  const ::google::cloud::bigquery::logging::v1::DatasetListRequest& dataset_list_request() const;
  ::google::cloud::bigquery::logging::v1::DatasetListRequest* release_dataset_list_request();
  ::google::cloud::bigquery::logging::v1::DatasetListRequest* mutable_dataset_list_request();
  void set_allocated_dataset_list_request(::google::cloud::bigquery::logging::v1::DatasetListRequest* dataset_list_request);

  // .google.cloud.bigquery.logging.v1.DatasetInsertRequest dataset_insert_request = 3;
  bool has_dataset_insert_request() const;
  void clear_dataset_insert_request();
  static const int kDatasetInsertRequestFieldNumber = 3;
  const ::google::cloud::bigquery::logging::v1::DatasetInsertRequest& dataset_insert_request() const;
  ::google::cloud::bigquery::logging::v1::DatasetInsertRequest* release_dataset_insert_request();
  ::google::cloud::bigquery::logging::v1::DatasetInsertRequest* mutable_dataset_insert_request();
  void set_allocated_dataset_insert_request(::google::cloud::bigquery::logging::v1::DatasetInsertRequest* dataset_insert_request);

  // .google.cloud.bigquery.logging.v1.DatasetUpdateRequest dataset_update_request = 4;
  bool has_dataset_update_request() const;
  void clear_dataset_update_request();
  static const int kDatasetUpdateRequestFieldNumber = 4;
  const ::google::cloud::bigquery::logging::v1::DatasetUpdateRequest& dataset_update_request() const;
  ::google::cloud::bigquery::logging::v1::DatasetUpdateRequest* release_dataset_update_request();
  ::google::cloud::bigquery::logging::v1::DatasetUpdateRequest* mutable_dataset_update_request();
  void set_allocated_dataset_update_request(::google::cloud::bigquery::logging::v1::DatasetUpdateRequest* dataset_update_request);

  // .google.cloud.bigquery.logging.v1.JobInsertRequest job_insert_request = 5;
  bool has_job_insert_request() const;
  void clear_job_insert_request();
  static const int kJobInsertRequestFieldNumber = 5;
  const ::google::cloud::bigquery::logging::v1::JobInsertRequest& job_insert_request() const;
  ::google::cloud::bigquery::logging::v1::JobInsertRequest* release_job_insert_request();
  ::google::cloud::bigquery::logging::v1::JobInsertRequest* mutable_job_insert_request();
  void set_allocated_job_insert_request(::google::cloud::bigquery::logging::v1::JobInsertRequest* job_insert_request);

  // .google.cloud.bigquery.logging.v1.JobQueryRequest job_query_request = 6;
  bool has_job_query_request() const;
  void clear_job_query_request();
  static const int kJobQueryRequestFieldNumber = 6;
  const ::google::cloud::bigquery::logging::v1::JobQueryRequest& job_query_request() const;
  ::google::cloud::bigquery::logging::v1::JobQueryRequest* release_job_query_request();
  ::google::cloud::bigquery::logging::v1::JobQueryRequest* mutable_job_query_request();
  void set_allocated_job_query_request(::google::cloud::bigquery::logging::v1::JobQueryRequest* job_query_request);

  // .google.cloud.bigquery.logging.v1.JobGetQueryResultsRequest job_get_query_results_request = 7;
  bool has_job_get_query_results_request() const;
  void clear_job_get_query_results_request();
  static const int kJobGetQueryResultsRequestFieldNumber = 7;
  const ::google::cloud::bigquery::logging::v1::JobGetQueryResultsRequest& job_get_query_results_request() const;
  ::google::cloud::bigquery::logging::v1::JobGetQueryResultsRequest* release_job_get_query_results_request();
  ::google::cloud::bigquery::logging::v1::JobGetQueryResultsRequest* mutable_job_get_query_results_request();
  void set_allocated_job_get_query_results_request(::google::cloud::bigquery::logging::v1::JobGetQueryResultsRequest* job_get_query_results_request);

  // .google.cloud.bigquery.logging.v1.TableDataListRequest table_data_list_request = 8;
  bool has_table_data_list_request() const;
  void clear_table_data_list_request();
  static const int kTableDataListRequestFieldNumber = 8;
  const ::google::cloud::bigquery::logging::v1::TableDataListRequest& table_data_list_request() const;
  ::google::cloud::bigquery::logging::v1::TableDataListRequest* release_table_data_list_request();
  ::google::cloud::bigquery::logging::v1::TableDataListRequest* mutable_table_data_list_request();
  void set_allocated_table_data_list_request(::google::cloud::bigquery::logging::v1::TableDataListRequest* table_data_list_request);

  // .google.cloud.bigquery.logging.v1.TableInsertResponse table_insert_response = 9;
  bool has_table_insert_response() const;
  void clear_table_insert_response();
  static const int kTableInsertResponseFieldNumber = 9;
  const ::google::cloud::bigquery::logging::v1::TableInsertResponse& table_insert_response() const;
  ::google::cloud::bigquery::logging::v1::TableInsertResponse* release_table_insert_response();
  ::google::cloud::bigquery::logging::v1::TableInsertResponse* mutable_table_insert_response();
  void set_allocated_table_insert_response(::google::cloud::bigquery::logging::v1::TableInsertResponse* table_insert_response);

  // .google.cloud.bigquery.logging.v1.TableUpdateResponse table_update_response = 10;
  bool has_table_update_response() const;
  void clear_table_update_response();
  static const int kTableUpdateResponseFieldNumber = 10;
  const ::google::cloud::bigquery::logging::v1::TableUpdateResponse& table_update_response() const;
  ::google::cloud::bigquery::logging::v1::TableUpdateResponse* release_table_update_response();
  ::google::cloud::bigquery::logging::v1::TableUpdateResponse* mutable_table_update_response();
  void set_allocated_table_update_response(::google::cloud::bigquery::logging::v1::TableUpdateResponse* table_update_response);

  // .google.cloud.bigquery.logging.v1.DatasetInsertResponse dataset_insert_response = 11;
  bool has_dataset_insert_response() const;
  void clear_dataset_insert_response();
  static const int kDatasetInsertResponseFieldNumber = 11;
  const ::google::cloud::bigquery::logging::v1::DatasetInsertResponse& dataset_insert_response() const;
  ::google::cloud::bigquery::logging::v1::DatasetInsertResponse* release_dataset_insert_response();
  ::google::cloud::bigquery::logging::v1::DatasetInsertResponse* mutable_dataset_insert_response();
  void set_allocated_dataset_insert_response(::google::cloud::bigquery::logging::v1::DatasetInsertResponse* dataset_insert_response);

  // .google.cloud.bigquery.logging.v1.DatasetUpdateResponse dataset_update_response = 12;
  bool has_dataset_update_response() const;
  void clear_dataset_update_response();
  static const int kDatasetUpdateResponseFieldNumber = 12;
  const ::google::cloud::bigquery::logging::v1::DatasetUpdateResponse& dataset_update_response() const;
  ::google::cloud::bigquery::logging::v1::DatasetUpdateResponse* release_dataset_update_response();
  ::google::cloud::bigquery::logging::v1::DatasetUpdateResponse* mutable_dataset_update_response();
  void set_allocated_dataset_update_response(::google::cloud::bigquery::logging::v1::DatasetUpdateResponse* dataset_update_response);

  // .google.cloud.bigquery.logging.v1.JobInsertResponse job_insert_response = 18;
  bool has_job_insert_response() const;
  void clear_job_insert_response();
  static const int kJobInsertResponseFieldNumber = 18;
  const ::google::cloud::bigquery::logging::v1::JobInsertResponse& job_insert_response() const;
  ::google::cloud::bigquery::logging::v1::JobInsertResponse* release_job_insert_response();
  ::google::cloud::bigquery::logging::v1::JobInsertResponse* mutable_job_insert_response();
  void set_allocated_job_insert_response(::google::cloud::bigquery::logging::v1::JobInsertResponse* job_insert_response);

  // .google.cloud.bigquery.logging.v1.JobQueryResponse job_query_response = 13;
  bool has_job_query_response() const;
  void clear_job_query_response();
  static const int kJobQueryResponseFieldNumber = 13;
  const ::google::cloud::bigquery::logging::v1::JobQueryResponse& job_query_response() const;
  ::google::cloud::bigquery::logging::v1::JobQueryResponse* release_job_query_response();
  ::google::cloud::bigquery::logging::v1::JobQueryResponse* mutable_job_query_response();
  void set_allocated_job_query_response(::google::cloud::bigquery::logging::v1::JobQueryResponse* job_query_response);

  // .google.cloud.bigquery.logging.v1.JobGetQueryResultsResponse job_get_query_results_response = 14;
  bool has_job_get_query_results_response() const;
  void clear_job_get_query_results_response();
  static const int kJobGetQueryResultsResponseFieldNumber = 14;
  const ::google::cloud::bigquery::logging::v1::JobGetQueryResultsResponse& job_get_query_results_response() const;
  ::google::cloud::bigquery::logging::v1::JobGetQueryResultsResponse* release_job_get_query_results_response();
  ::google::cloud::bigquery::logging::v1::JobGetQueryResultsResponse* mutable_job_get_query_results_response();
  void set_allocated_job_get_query_results_response(::google::cloud::bigquery::logging::v1::JobGetQueryResultsResponse* job_get_query_results_response);

  // .google.cloud.bigquery.logging.v1.JobQueryDoneResponse job_query_done_response = 15;
  bool has_job_query_done_response() const;
  void clear_job_query_done_response();
  static const int kJobQueryDoneResponseFieldNumber = 15;
  const ::google::cloud::bigquery::logging::v1::JobQueryDoneResponse& job_query_done_response() const;
  ::google::cloud::bigquery::logging::v1::JobQueryDoneResponse* release_job_query_done_response();
  ::google::cloud::bigquery::logging::v1::JobQueryDoneResponse* mutable_job_query_done_response();
  void set_allocated_job_query_done_response(::google::cloud::bigquery::logging::v1::JobQueryDoneResponse* job_query_done_response);

  RequestCase request_case() const;
  ResponseCase response_case() const;
  // @@protoc_insertion_point(class_scope:google.cloud.bigquery.logging.v1.AuditData)
 private:
  void set_has_table_insert_request();
  void set_has_table_update_request();
  void set_has_dataset_list_request();
  void set_has_dataset_insert_request();
  void set_has_dataset_update_request();
  void set_has_job_insert_request();
  void set_has_job_query_request();
  void set_has_job_get_query_results_request();
  void set_has_table_data_list_request();
  void set_has_table_insert_response();
  void set_has_table_update_response();
  void set_has_dataset_insert_response();
  void set_has_dataset_update_response();
  void set_has_job_insert_response();
  void set_has_job_query_response();
  void set_has_job_get_query_results_response();
  void set_has_job_query_done_response();

  inline bool has_request() const;
  void clear_request();
  inline void clear_has_request();

  inline bool has_response() const;
  void clear_response();
  inline void clear_has_response();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::cloud::bigquery::logging::v1::JobCompletedEvent* job_completed_event_;
  union RequestUnion {
    RequestUnion() {}
    ::google::cloud::bigquery::logging::v1::TableInsertRequest* table_insert_request_;
    ::google::cloud::bigquery::logging::v1::TableUpdateRequest* table_update_request_;
    ::google::cloud::bigquery::logging::v1::DatasetListRequest* dataset_list_request_;
    ::google::cloud::bigquery::logging::v1::DatasetInsertRequest* dataset_insert_request_;
    ::google::cloud::bigquery::logging::v1::DatasetUpdateRequest* dataset_update_request_;
    ::google::cloud::bigquery::logging::v1::JobInsertRequest* job_insert_request_;
    ::google::cloud::bigquery::logging::v1::JobQueryRequest* job_query_request_;
    ::google::cloud::bigquery::logging::v1::JobGetQueryResultsRequest* job_get_query_results_request_;
    ::google::cloud::bigquery::logging::v1::TableDataListRequest* table_data_list_request_;
  } request_;
  union ResponseUnion {
    ResponseUnion() {}
    ::google::cloud::bigquery::logging::v1::TableInsertResponse* table_insert_response_;
    ::google::cloud::bigquery::logging::v1::TableUpdateResponse* table_update_response_;
    ::google::cloud::bigquery::logging::v1::DatasetInsertResponse* dataset_insert_response_;
    ::google::cloud::bigquery::logging::v1::DatasetUpdateResponse* dataset_update_response_;
    ::google::cloud::bigquery::logging::v1::JobInsertResponse* job_insert_response_;
    ::google::cloud::bigquery::logging::v1::JobQueryResponse* job_query_response_;
    ::google::cloud::bigquery::logging::v1::JobGetQueryResultsResponse* job_get_query_results_response_;
    ::google::cloud::bigquery::logging::v1::JobQueryDoneResponse* job_query_done_response_;
  } response_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[2];

  friend struct ::protobuf_google_2fcloud_2fbigquery_2flogging_2fv1_2faudit_5fdata_2eproto::TableStruct;
  friend void ::protobuf_google_2fcloud_2fbigquery_2flogging_2fv1_2faudit_5fdata_2eproto::InitDefaultsAuditDataImpl();
};
// -------------------------------------------------------------------

class TableInsertRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.cloud.bigquery.logging.v1.TableInsertRequest) */ {
 public:
  TableInsertRequest();
  virtual ~TableInsertRequest();

  TableInsertRequest(const TableInsertRequest& from);

  inline TableInsertRequest& operator=(const TableInsertRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TableInsertRequest(TableInsertRequest&& from) noexcept
    : TableInsertRequest() {
    *this = ::std::move(from);
  }

  inline TableInsertRequest& operator=(TableInsertRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const TableInsertRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TableInsertRequest* internal_default_instance() {
    return reinterpret_cast<const TableInsertRequest*>(
               &_TableInsertRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(TableInsertRequest* other);
  friend void swap(TableInsertRequest& a, TableInsertRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TableInsertRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  TableInsertRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const TableInsertRequest& from);
  void MergeFrom(const TableInsertRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TableInsertRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.cloud.bigquery.logging.v1.Table resource = 1;
  bool has_resource() const;
  void clear_resource();
  static const int kResourceFieldNumber = 1;
  const ::google::cloud::bigquery::logging::v1::Table& resource() const;
  ::google::cloud::bigquery::logging::v1::Table* release_resource();
  ::google::cloud::bigquery::logging::v1::Table* mutable_resource();
  void set_allocated_resource(::google::cloud::bigquery::logging::v1::Table* resource);

  // @@protoc_insertion_point(class_scope:google.cloud.bigquery.logging.v1.TableInsertRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::cloud::bigquery::logging::v1::Table* resource_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fcloud_2fbigquery_2flogging_2fv1_2faudit_5fdata_2eproto::TableStruct;
  friend void ::protobuf_google_2fcloud_2fbigquery_2flogging_2fv1_2faudit_5fdata_2eproto::InitDefaultsTableInsertRequestImpl();
};
// -------------------------------------------------------------------

class TableUpdateRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.cloud.bigquery.logging.v1.TableUpdateRequest) */ {
 public:
  TableUpdateRequest();
  virtual ~TableUpdateRequest();

  TableUpdateRequest(const TableUpdateRequest& from);

  inline TableUpdateRequest& operator=(const TableUpdateRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TableUpdateRequest(TableUpdateRequest&& from) noexcept
    : TableUpdateRequest() {
    *this = ::std::move(from);
  }

  inline TableUpdateRequest& operator=(TableUpdateRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const TableUpdateRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TableUpdateRequest* internal_default_instance() {
    return reinterpret_cast<const TableUpdateRequest*>(
               &_TableUpdateRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(TableUpdateRequest* other);
  friend void swap(TableUpdateRequest& a, TableUpdateRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TableUpdateRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  TableUpdateRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const TableUpdateRequest& from);
  void MergeFrom(const TableUpdateRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TableUpdateRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.cloud.bigquery.logging.v1.Table resource = 1;
  bool has_resource() const;
  void clear_resource();
  static const int kResourceFieldNumber = 1;
  const ::google::cloud::bigquery::logging::v1::Table& resource() const;
  ::google::cloud::bigquery::logging::v1::Table* release_resource();
  ::google::cloud::bigquery::logging::v1::Table* mutable_resource();
  void set_allocated_resource(::google::cloud::bigquery::logging::v1::Table* resource);

  // @@protoc_insertion_point(class_scope:google.cloud.bigquery.logging.v1.TableUpdateRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::cloud::bigquery::logging::v1::Table* resource_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fcloud_2fbigquery_2flogging_2fv1_2faudit_5fdata_2eproto::TableStruct;
  friend void ::protobuf_google_2fcloud_2fbigquery_2flogging_2fv1_2faudit_5fdata_2eproto::InitDefaultsTableUpdateRequestImpl();
};
// -------------------------------------------------------------------

class TableInsertResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.cloud.bigquery.logging.v1.TableInsertResponse) */ {
 public:
  TableInsertResponse();
  virtual ~TableInsertResponse();

  TableInsertResponse(const TableInsertResponse& from);

  inline TableInsertResponse& operator=(const TableInsertResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TableInsertResponse(TableInsertResponse&& from) noexcept
    : TableInsertResponse() {
    *this = ::std::move(from);
  }

  inline TableInsertResponse& operator=(TableInsertResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const TableInsertResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TableInsertResponse* internal_default_instance() {
    return reinterpret_cast<const TableInsertResponse*>(
               &_TableInsertResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(TableInsertResponse* other);
  friend void swap(TableInsertResponse& a, TableInsertResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TableInsertResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  TableInsertResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const TableInsertResponse& from);
  void MergeFrom(const TableInsertResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TableInsertResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.cloud.bigquery.logging.v1.Table resource = 1;
  bool has_resource() const;
  void clear_resource();
  static const int kResourceFieldNumber = 1;
  const ::google::cloud::bigquery::logging::v1::Table& resource() const;
  ::google::cloud::bigquery::logging::v1::Table* release_resource();
  ::google::cloud::bigquery::logging::v1::Table* mutable_resource();
  void set_allocated_resource(::google::cloud::bigquery::logging::v1::Table* resource);

  // @@protoc_insertion_point(class_scope:google.cloud.bigquery.logging.v1.TableInsertResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::cloud::bigquery::logging::v1::Table* resource_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fcloud_2fbigquery_2flogging_2fv1_2faudit_5fdata_2eproto::TableStruct;
  friend void ::protobuf_google_2fcloud_2fbigquery_2flogging_2fv1_2faudit_5fdata_2eproto::InitDefaultsTableInsertResponseImpl();
};
// -------------------------------------------------------------------

class TableUpdateResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.cloud.bigquery.logging.v1.TableUpdateResponse) */ {
 public:
  TableUpdateResponse();
  virtual ~TableUpdateResponse();

  TableUpdateResponse(const TableUpdateResponse& from);

  inline TableUpdateResponse& operator=(const TableUpdateResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TableUpdateResponse(TableUpdateResponse&& from) noexcept
    : TableUpdateResponse() {
    *this = ::std::move(from);
  }

  inline TableUpdateResponse& operator=(TableUpdateResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const TableUpdateResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TableUpdateResponse* internal_default_instance() {
    return reinterpret_cast<const TableUpdateResponse*>(
               &_TableUpdateResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(TableUpdateResponse* other);
  friend void swap(TableUpdateResponse& a, TableUpdateResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TableUpdateResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  TableUpdateResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const TableUpdateResponse& from);
  void MergeFrom(const TableUpdateResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TableUpdateResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.cloud.bigquery.logging.v1.Table resource = 1;
  bool has_resource() const;
  void clear_resource();
  static const int kResourceFieldNumber = 1;
  const ::google::cloud::bigquery::logging::v1::Table& resource() const;
  ::google::cloud::bigquery::logging::v1::Table* release_resource();
  ::google::cloud::bigquery::logging::v1::Table* mutable_resource();
  void set_allocated_resource(::google::cloud::bigquery::logging::v1::Table* resource);

  // @@protoc_insertion_point(class_scope:google.cloud.bigquery.logging.v1.TableUpdateResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::cloud::bigquery::logging::v1::Table* resource_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fcloud_2fbigquery_2flogging_2fv1_2faudit_5fdata_2eproto::TableStruct;
  friend void ::protobuf_google_2fcloud_2fbigquery_2flogging_2fv1_2faudit_5fdata_2eproto::InitDefaultsTableUpdateResponseImpl();
};
// -------------------------------------------------------------------

class DatasetListRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.cloud.bigquery.logging.v1.DatasetListRequest) */ {
 public:
  DatasetListRequest();
  virtual ~DatasetListRequest();

  DatasetListRequest(const DatasetListRequest& from);

  inline DatasetListRequest& operator=(const DatasetListRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DatasetListRequest(DatasetListRequest&& from) noexcept
    : DatasetListRequest() {
    *this = ::std::move(from);
  }

  inline DatasetListRequest& operator=(DatasetListRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DatasetListRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DatasetListRequest* internal_default_instance() {
    return reinterpret_cast<const DatasetListRequest*>(
               &_DatasetListRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    5;

  void Swap(DatasetListRequest* other);
  friend void swap(DatasetListRequest& a, DatasetListRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DatasetListRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  DatasetListRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DatasetListRequest& from);
  void MergeFrom(const DatasetListRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DatasetListRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bool list_all = 1;
  void clear_list_all();
  static const int kListAllFieldNumber = 1;
  bool list_all() const;
  void set_list_all(bool value);

  // @@protoc_insertion_point(class_scope:google.cloud.bigquery.logging.v1.DatasetListRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool list_all_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fcloud_2fbigquery_2flogging_2fv1_2faudit_5fdata_2eproto::TableStruct;
  friend void ::protobuf_google_2fcloud_2fbigquery_2flogging_2fv1_2faudit_5fdata_2eproto::InitDefaultsDatasetListRequestImpl();
};
// -------------------------------------------------------------------

class DatasetInsertRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.cloud.bigquery.logging.v1.DatasetInsertRequest) */ {
 public:
  DatasetInsertRequest();
  virtual ~DatasetInsertRequest();

  DatasetInsertRequest(const DatasetInsertRequest& from);

  inline DatasetInsertRequest& operator=(const DatasetInsertRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DatasetInsertRequest(DatasetInsertRequest&& from) noexcept
    : DatasetInsertRequest() {
    *this = ::std::move(from);
  }

  inline DatasetInsertRequest& operator=(DatasetInsertRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DatasetInsertRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DatasetInsertRequest* internal_default_instance() {
    return reinterpret_cast<const DatasetInsertRequest*>(
               &_DatasetInsertRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    6;

  void Swap(DatasetInsertRequest* other);
  friend void swap(DatasetInsertRequest& a, DatasetInsertRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DatasetInsertRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  DatasetInsertRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DatasetInsertRequest& from);
  void MergeFrom(const DatasetInsertRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DatasetInsertRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.cloud.bigquery.logging.v1.Dataset resource = 1;
  bool has_resource() const;
  void clear_resource();
  static const int kResourceFieldNumber = 1;
  const ::google::cloud::bigquery::logging::v1::Dataset& resource() const;
  ::google::cloud::bigquery::logging::v1::Dataset* release_resource();
  ::google::cloud::bigquery::logging::v1::Dataset* mutable_resource();
  void set_allocated_resource(::google::cloud::bigquery::logging::v1::Dataset* resource);

  // @@protoc_insertion_point(class_scope:google.cloud.bigquery.logging.v1.DatasetInsertRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::cloud::bigquery::logging::v1::Dataset* resource_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fcloud_2fbigquery_2flogging_2fv1_2faudit_5fdata_2eproto::TableStruct;
  friend void ::protobuf_google_2fcloud_2fbigquery_2flogging_2fv1_2faudit_5fdata_2eproto::InitDefaultsDatasetInsertRequestImpl();
};
// -------------------------------------------------------------------

class DatasetInsertResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.cloud.bigquery.logging.v1.DatasetInsertResponse) */ {
 public:
  DatasetInsertResponse();
  virtual ~DatasetInsertResponse();

  DatasetInsertResponse(const DatasetInsertResponse& from);

  inline DatasetInsertResponse& operator=(const DatasetInsertResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DatasetInsertResponse(DatasetInsertResponse&& from) noexcept
    : DatasetInsertResponse() {
    *this = ::std::move(from);
  }

  inline DatasetInsertResponse& operator=(DatasetInsertResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DatasetInsertResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DatasetInsertResponse* internal_default_instance() {
    return reinterpret_cast<const DatasetInsertResponse*>(
               &_DatasetInsertResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    7;

  void Swap(DatasetInsertResponse* other);
  friend void swap(DatasetInsertResponse& a, DatasetInsertResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DatasetInsertResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  DatasetInsertResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DatasetInsertResponse& from);
  void MergeFrom(const DatasetInsertResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DatasetInsertResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.cloud.bigquery.logging.v1.Dataset resource = 1;
  bool has_resource() const;
  void clear_resource();
  static const int kResourceFieldNumber = 1;
  const ::google::cloud::bigquery::logging::v1::Dataset& resource() const;
  ::google::cloud::bigquery::logging::v1::Dataset* release_resource();
  ::google::cloud::bigquery::logging::v1::Dataset* mutable_resource();
  void set_allocated_resource(::google::cloud::bigquery::logging::v1::Dataset* resource);

  // @@protoc_insertion_point(class_scope:google.cloud.bigquery.logging.v1.DatasetInsertResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::cloud::bigquery::logging::v1::Dataset* resource_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fcloud_2fbigquery_2flogging_2fv1_2faudit_5fdata_2eproto::TableStruct;
  friend void ::protobuf_google_2fcloud_2fbigquery_2flogging_2fv1_2faudit_5fdata_2eproto::InitDefaultsDatasetInsertResponseImpl();
};
// -------------------------------------------------------------------

class DatasetUpdateRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.cloud.bigquery.logging.v1.DatasetUpdateRequest) */ {
 public:
  DatasetUpdateRequest();
  virtual ~DatasetUpdateRequest();

  DatasetUpdateRequest(const DatasetUpdateRequest& from);

  inline DatasetUpdateRequest& operator=(const DatasetUpdateRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DatasetUpdateRequest(DatasetUpdateRequest&& from) noexcept
    : DatasetUpdateRequest() {
    *this = ::std::move(from);
  }

  inline DatasetUpdateRequest& operator=(DatasetUpdateRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DatasetUpdateRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DatasetUpdateRequest* internal_default_instance() {
    return reinterpret_cast<const DatasetUpdateRequest*>(
               &_DatasetUpdateRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    8;

  void Swap(DatasetUpdateRequest* other);
  friend void swap(DatasetUpdateRequest& a, DatasetUpdateRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DatasetUpdateRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  DatasetUpdateRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DatasetUpdateRequest& from);
  void MergeFrom(const DatasetUpdateRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DatasetUpdateRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.cloud.bigquery.logging.v1.Dataset resource = 1;
  bool has_resource() const;
  void clear_resource();
  static const int kResourceFieldNumber = 1;
  const ::google::cloud::bigquery::logging::v1::Dataset& resource() const;
  ::google::cloud::bigquery::logging::v1::Dataset* release_resource();
  ::google::cloud::bigquery::logging::v1::Dataset* mutable_resource();
  void set_allocated_resource(::google::cloud::bigquery::logging::v1::Dataset* resource);

  // @@protoc_insertion_point(class_scope:google.cloud.bigquery.logging.v1.DatasetUpdateRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::cloud::bigquery::logging::v1::Dataset* resource_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fcloud_2fbigquery_2flogging_2fv1_2faudit_5fdata_2eproto::TableStruct;
  friend void ::protobuf_google_2fcloud_2fbigquery_2flogging_2fv1_2faudit_5fdata_2eproto::InitDefaultsDatasetUpdateRequestImpl();
};
// -------------------------------------------------------------------

class DatasetUpdateResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.cloud.bigquery.logging.v1.DatasetUpdateResponse) */ {
 public:
  DatasetUpdateResponse();
  virtual ~DatasetUpdateResponse();

  DatasetUpdateResponse(const DatasetUpdateResponse& from);

  inline DatasetUpdateResponse& operator=(const DatasetUpdateResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DatasetUpdateResponse(DatasetUpdateResponse&& from) noexcept
    : DatasetUpdateResponse() {
    *this = ::std::move(from);
  }

  inline DatasetUpdateResponse& operator=(DatasetUpdateResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DatasetUpdateResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DatasetUpdateResponse* internal_default_instance() {
    return reinterpret_cast<const DatasetUpdateResponse*>(
               &_DatasetUpdateResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    9;

  void Swap(DatasetUpdateResponse* other);
  friend void swap(DatasetUpdateResponse& a, DatasetUpdateResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DatasetUpdateResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  DatasetUpdateResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DatasetUpdateResponse& from);
  void MergeFrom(const DatasetUpdateResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DatasetUpdateResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.cloud.bigquery.logging.v1.Dataset resource = 1;
  bool has_resource() const;
  void clear_resource();
  static const int kResourceFieldNumber = 1;
  const ::google::cloud::bigquery::logging::v1::Dataset& resource() const;
  ::google::cloud::bigquery::logging::v1::Dataset* release_resource();
  ::google::cloud::bigquery::logging::v1::Dataset* mutable_resource();
  void set_allocated_resource(::google::cloud::bigquery::logging::v1::Dataset* resource);

  // @@protoc_insertion_point(class_scope:google.cloud.bigquery.logging.v1.DatasetUpdateResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::cloud::bigquery::logging::v1::Dataset* resource_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fcloud_2fbigquery_2flogging_2fv1_2faudit_5fdata_2eproto::TableStruct;
  friend void ::protobuf_google_2fcloud_2fbigquery_2flogging_2fv1_2faudit_5fdata_2eproto::InitDefaultsDatasetUpdateResponseImpl();
};
// -------------------------------------------------------------------

class JobInsertRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.cloud.bigquery.logging.v1.JobInsertRequest) */ {
 public:
  JobInsertRequest();
  virtual ~JobInsertRequest();

  JobInsertRequest(const JobInsertRequest& from);

  inline JobInsertRequest& operator=(const JobInsertRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  JobInsertRequest(JobInsertRequest&& from) noexcept
    : JobInsertRequest() {
    *this = ::std::move(from);
  }

  inline JobInsertRequest& operator=(JobInsertRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const JobInsertRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const JobInsertRequest* internal_default_instance() {
    return reinterpret_cast<const JobInsertRequest*>(
               &_JobInsertRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    10;

  void Swap(JobInsertRequest* other);
  friend void swap(JobInsertRequest& a, JobInsertRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline JobInsertRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  JobInsertRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const JobInsertRequest& from);
  void MergeFrom(const JobInsertRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(JobInsertRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.cloud.bigquery.logging.v1.Job resource = 1;
  bool has_resource() const;
  void clear_resource();
  static const int kResourceFieldNumber = 1;
  const ::google::cloud::bigquery::logging::v1::Job& resource() const;
  ::google::cloud::bigquery::logging::v1::Job* release_resource();
  ::google::cloud::bigquery::logging::v1::Job* mutable_resource();
  void set_allocated_resource(::google::cloud::bigquery::logging::v1::Job* resource);

  // @@protoc_insertion_point(class_scope:google.cloud.bigquery.logging.v1.JobInsertRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::cloud::bigquery::logging::v1::Job* resource_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fcloud_2fbigquery_2flogging_2fv1_2faudit_5fdata_2eproto::TableStruct;
  friend void ::protobuf_google_2fcloud_2fbigquery_2flogging_2fv1_2faudit_5fdata_2eproto::InitDefaultsJobInsertRequestImpl();
};
// -------------------------------------------------------------------

class JobInsertResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.cloud.bigquery.logging.v1.JobInsertResponse) */ {
 public:
  JobInsertResponse();
  virtual ~JobInsertResponse();

  JobInsertResponse(const JobInsertResponse& from);

  inline JobInsertResponse& operator=(const JobInsertResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  JobInsertResponse(JobInsertResponse&& from) noexcept
    : JobInsertResponse() {
    *this = ::std::move(from);
  }

  inline JobInsertResponse& operator=(JobInsertResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const JobInsertResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const JobInsertResponse* internal_default_instance() {
    return reinterpret_cast<const JobInsertResponse*>(
               &_JobInsertResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    11;

  void Swap(JobInsertResponse* other);
  friend void swap(JobInsertResponse& a, JobInsertResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline JobInsertResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  JobInsertResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const JobInsertResponse& from);
  void MergeFrom(const JobInsertResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(JobInsertResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.cloud.bigquery.logging.v1.Job resource = 1;
  bool has_resource() const;
  void clear_resource();
  static const int kResourceFieldNumber = 1;
  const ::google::cloud::bigquery::logging::v1::Job& resource() const;
  ::google::cloud::bigquery::logging::v1::Job* release_resource();
  ::google::cloud::bigquery::logging::v1::Job* mutable_resource();
  void set_allocated_resource(::google::cloud::bigquery::logging::v1::Job* resource);

  // @@protoc_insertion_point(class_scope:google.cloud.bigquery.logging.v1.JobInsertResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::cloud::bigquery::logging::v1::Job* resource_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fcloud_2fbigquery_2flogging_2fv1_2faudit_5fdata_2eproto::TableStruct;
  friend void ::protobuf_google_2fcloud_2fbigquery_2flogging_2fv1_2faudit_5fdata_2eproto::InitDefaultsJobInsertResponseImpl();
};
// -------------------------------------------------------------------

class JobQueryRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.cloud.bigquery.logging.v1.JobQueryRequest) */ {
 public:
  JobQueryRequest();
  virtual ~JobQueryRequest();

  JobQueryRequest(const JobQueryRequest& from);

  inline JobQueryRequest& operator=(const JobQueryRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  JobQueryRequest(JobQueryRequest&& from) noexcept
    : JobQueryRequest() {
    *this = ::std::move(from);
  }

  inline JobQueryRequest& operator=(JobQueryRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const JobQueryRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const JobQueryRequest* internal_default_instance() {
    return reinterpret_cast<const JobQueryRequest*>(
               &_JobQueryRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    12;

  void Swap(JobQueryRequest* other);
  friend void swap(JobQueryRequest& a, JobQueryRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline JobQueryRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  JobQueryRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const JobQueryRequest& from);
  void MergeFrom(const JobQueryRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(JobQueryRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string query = 1;
  void clear_query();
  static const int kQueryFieldNumber = 1;
  const ::std::string& query() const;
  void set_query(const ::std::string& value);
  #if LANG_CXX11
  void set_query(::std::string&& value);
  #endif
  void set_query(const char* value);
  void set_query(const char* value, size_t size);
  ::std::string* mutable_query();
  ::std::string* release_query();
  void set_allocated_query(::std::string* query);

  // string project_id = 4;
  void clear_project_id();
  static const int kProjectIdFieldNumber = 4;
  const ::std::string& project_id() const;
  void set_project_id(const ::std::string& value);
  #if LANG_CXX11
  void set_project_id(::std::string&& value);
  #endif
  void set_project_id(const char* value);
  void set_project_id(const char* value, size_t size);
  ::std::string* mutable_project_id();
  ::std::string* release_project_id();
  void set_allocated_project_id(::std::string* project_id);

  // .google.cloud.bigquery.logging.v1.DatasetName default_dataset = 3;
  bool has_default_dataset() const;
  void clear_default_dataset();
  static const int kDefaultDatasetFieldNumber = 3;
  const ::google::cloud::bigquery::logging::v1::DatasetName& default_dataset() const;
  ::google::cloud::bigquery::logging::v1::DatasetName* release_default_dataset();
  ::google::cloud::bigquery::logging::v1::DatasetName* mutable_default_dataset();
  void set_allocated_default_dataset(::google::cloud::bigquery::logging::v1::DatasetName* default_dataset);

  // uint32 max_results = 2;
  void clear_max_results();
  static const int kMaxResultsFieldNumber = 2;
  ::google::protobuf::uint32 max_results() const;
  void set_max_results(::google::protobuf::uint32 value);

  // bool dry_run = 5;
  void clear_dry_run();
  static const int kDryRunFieldNumber = 5;
  bool dry_run() const;
  void set_dry_run(bool value);

  // @@protoc_insertion_point(class_scope:google.cloud.bigquery.logging.v1.JobQueryRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr query_;
  ::google::protobuf::internal::ArenaStringPtr project_id_;
  ::google::cloud::bigquery::logging::v1::DatasetName* default_dataset_;
  ::google::protobuf::uint32 max_results_;
  bool dry_run_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fcloud_2fbigquery_2flogging_2fv1_2faudit_5fdata_2eproto::TableStruct;
  friend void ::protobuf_google_2fcloud_2fbigquery_2flogging_2fv1_2faudit_5fdata_2eproto::InitDefaultsJobQueryRequestImpl();
};
// -------------------------------------------------------------------

class JobQueryResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.cloud.bigquery.logging.v1.JobQueryResponse) */ {
 public:
  JobQueryResponse();
  virtual ~JobQueryResponse();

  JobQueryResponse(const JobQueryResponse& from);

  inline JobQueryResponse& operator=(const JobQueryResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  JobQueryResponse(JobQueryResponse&& from) noexcept
    : JobQueryResponse() {
    *this = ::std::move(from);
  }

  inline JobQueryResponse& operator=(JobQueryResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const JobQueryResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const JobQueryResponse* internal_default_instance() {
    return reinterpret_cast<const JobQueryResponse*>(
               &_JobQueryResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    13;

  void Swap(JobQueryResponse* other);
  friend void swap(JobQueryResponse& a, JobQueryResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline JobQueryResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  JobQueryResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const JobQueryResponse& from);
  void MergeFrom(const JobQueryResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(JobQueryResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.cloud.bigquery.logging.v1.Job job = 2;
  bool has_job() const;
  void clear_job();
  static const int kJobFieldNumber = 2;
  const ::google::cloud::bigquery::logging::v1::Job& job() const;
  ::google::cloud::bigquery::logging::v1::Job* release_job();
  ::google::cloud::bigquery::logging::v1::Job* mutable_job();
  void set_allocated_job(::google::cloud::bigquery::logging::v1::Job* job);

  // uint64 total_results = 1;
  void clear_total_results();
  static const int kTotalResultsFieldNumber = 1;
  ::google::protobuf::uint64 total_results() const;
  void set_total_results(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:google.cloud.bigquery.logging.v1.JobQueryResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::cloud::bigquery::logging::v1::Job* job_;
  ::google::protobuf::uint64 total_results_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fcloud_2fbigquery_2flogging_2fv1_2faudit_5fdata_2eproto::TableStruct;
  friend void ::protobuf_google_2fcloud_2fbigquery_2flogging_2fv1_2faudit_5fdata_2eproto::InitDefaultsJobQueryResponseImpl();
};
// -------------------------------------------------------------------

class JobGetQueryResultsRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.cloud.bigquery.logging.v1.JobGetQueryResultsRequest) */ {
 public:
  JobGetQueryResultsRequest();
  virtual ~JobGetQueryResultsRequest();

  JobGetQueryResultsRequest(const JobGetQueryResultsRequest& from);

  inline JobGetQueryResultsRequest& operator=(const JobGetQueryResultsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  JobGetQueryResultsRequest(JobGetQueryResultsRequest&& from) noexcept
    : JobGetQueryResultsRequest() {
    *this = ::std::move(from);
  }

  inline JobGetQueryResultsRequest& operator=(JobGetQueryResultsRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const JobGetQueryResultsRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const JobGetQueryResultsRequest* internal_default_instance() {
    return reinterpret_cast<const JobGetQueryResultsRequest*>(
               &_JobGetQueryResultsRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    14;

  void Swap(JobGetQueryResultsRequest* other);
  friend void swap(JobGetQueryResultsRequest& a, JobGetQueryResultsRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline JobGetQueryResultsRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  JobGetQueryResultsRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const JobGetQueryResultsRequest& from);
  void MergeFrom(const JobGetQueryResultsRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(JobGetQueryResultsRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint64 start_row = 2;
  void clear_start_row();
  static const int kStartRowFieldNumber = 2;
  ::google::protobuf::uint64 start_row() const;
  void set_start_row(::google::protobuf::uint64 value);

  // uint32 max_results = 1;
  void clear_max_results();
  static const int kMaxResultsFieldNumber = 1;
  ::google::protobuf::uint32 max_results() const;
  void set_max_results(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:google.cloud.bigquery.logging.v1.JobGetQueryResultsRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint64 start_row_;
  ::google::protobuf::uint32 max_results_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fcloud_2fbigquery_2flogging_2fv1_2faudit_5fdata_2eproto::TableStruct;
  friend void ::protobuf_google_2fcloud_2fbigquery_2flogging_2fv1_2faudit_5fdata_2eproto::InitDefaultsJobGetQueryResultsRequestImpl();
};
// -------------------------------------------------------------------

class JobGetQueryResultsResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.cloud.bigquery.logging.v1.JobGetQueryResultsResponse) */ {
 public:
  JobGetQueryResultsResponse();
  virtual ~JobGetQueryResultsResponse();

  JobGetQueryResultsResponse(const JobGetQueryResultsResponse& from);

  inline JobGetQueryResultsResponse& operator=(const JobGetQueryResultsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  JobGetQueryResultsResponse(JobGetQueryResultsResponse&& from) noexcept
    : JobGetQueryResultsResponse() {
    *this = ::std::move(from);
  }

  inline JobGetQueryResultsResponse& operator=(JobGetQueryResultsResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const JobGetQueryResultsResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const JobGetQueryResultsResponse* internal_default_instance() {
    return reinterpret_cast<const JobGetQueryResultsResponse*>(
               &_JobGetQueryResultsResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    15;

  void Swap(JobGetQueryResultsResponse* other);
  friend void swap(JobGetQueryResultsResponse& a, JobGetQueryResultsResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline JobGetQueryResultsResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  JobGetQueryResultsResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const JobGetQueryResultsResponse& from);
  void MergeFrom(const JobGetQueryResultsResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(JobGetQueryResultsResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.cloud.bigquery.logging.v1.Job job = 2;
  bool has_job() const;
  void clear_job();
  static const int kJobFieldNumber = 2;
  const ::google::cloud::bigquery::logging::v1::Job& job() const;
  ::google::cloud::bigquery::logging::v1::Job* release_job();
  ::google::cloud::bigquery::logging::v1::Job* mutable_job();
  void set_allocated_job(::google::cloud::bigquery::logging::v1::Job* job);

  // uint64 total_results = 1;
  void clear_total_results();
  static const int kTotalResultsFieldNumber = 1;
  ::google::protobuf::uint64 total_results() const;
  void set_total_results(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:google.cloud.bigquery.logging.v1.JobGetQueryResultsResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::cloud::bigquery::logging::v1::Job* job_;
  ::google::protobuf::uint64 total_results_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fcloud_2fbigquery_2flogging_2fv1_2faudit_5fdata_2eproto::TableStruct;
  friend void ::protobuf_google_2fcloud_2fbigquery_2flogging_2fv1_2faudit_5fdata_2eproto::InitDefaultsJobGetQueryResultsResponseImpl();
};
// -------------------------------------------------------------------

class JobQueryDoneResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.cloud.bigquery.logging.v1.JobQueryDoneResponse) */ {
 public:
  JobQueryDoneResponse();
  virtual ~JobQueryDoneResponse();

  JobQueryDoneResponse(const JobQueryDoneResponse& from);

  inline JobQueryDoneResponse& operator=(const JobQueryDoneResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  JobQueryDoneResponse(JobQueryDoneResponse&& from) noexcept
    : JobQueryDoneResponse() {
    *this = ::std::move(from);
  }

  inline JobQueryDoneResponse& operator=(JobQueryDoneResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const JobQueryDoneResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const JobQueryDoneResponse* internal_default_instance() {
    return reinterpret_cast<const JobQueryDoneResponse*>(
               &_JobQueryDoneResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    16;

  void Swap(JobQueryDoneResponse* other);
  friend void swap(JobQueryDoneResponse& a, JobQueryDoneResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline JobQueryDoneResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  JobQueryDoneResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const JobQueryDoneResponse& from);
  void MergeFrom(const JobQueryDoneResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(JobQueryDoneResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.cloud.bigquery.logging.v1.Job job = 1;
  bool has_job() const;
  void clear_job();
  static const int kJobFieldNumber = 1;
  const ::google::cloud::bigquery::logging::v1::Job& job() const;
  ::google::cloud::bigquery::logging::v1::Job* release_job();
  ::google::cloud::bigquery::logging::v1::Job* mutable_job();
  void set_allocated_job(::google::cloud::bigquery::logging::v1::Job* job);

  // @@protoc_insertion_point(class_scope:google.cloud.bigquery.logging.v1.JobQueryDoneResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::cloud::bigquery::logging::v1::Job* job_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fcloud_2fbigquery_2flogging_2fv1_2faudit_5fdata_2eproto::TableStruct;
  friend void ::protobuf_google_2fcloud_2fbigquery_2flogging_2fv1_2faudit_5fdata_2eproto::InitDefaultsJobQueryDoneResponseImpl();
};
// -------------------------------------------------------------------

class JobCompletedEvent : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.cloud.bigquery.logging.v1.JobCompletedEvent) */ {
 public:
  JobCompletedEvent();
  virtual ~JobCompletedEvent();

  JobCompletedEvent(const JobCompletedEvent& from);

  inline JobCompletedEvent& operator=(const JobCompletedEvent& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  JobCompletedEvent(JobCompletedEvent&& from) noexcept
    : JobCompletedEvent() {
    *this = ::std::move(from);
  }

  inline JobCompletedEvent& operator=(JobCompletedEvent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const JobCompletedEvent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const JobCompletedEvent* internal_default_instance() {
    return reinterpret_cast<const JobCompletedEvent*>(
               &_JobCompletedEvent_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    17;

  void Swap(JobCompletedEvent* other);
  friend void swap(JobCompletedEvent& a, JobCompletedEvent& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline JobCompletedEvent* New() const PROTOBUF_FINAL { return New(NULL); }

  JobCompletedEvent* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const JobCompletedEvent& from);
  void MergeFrom(const JobCompletedEvent& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(JobCompletedEvent* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string event_name = 1;
  void clear_event_name();
  static const int kEventNameFieldNumber = 1;
  const ::std::string& event_name() const;
  void set_event_name(const ::std::string& value);
  #if LANG_CXX11
  void set_event_name(::std::string&& value);
  #endif
  void set_event_name(const char* value);
  void set_event_name(const char* value, size_t size);
  ::std::string* mutable_event_name();
  ::std::string* release_event_name();
  void set_allocated_event_name(::std::string* event_name);

  // .google.cloud.bigquery.logging.v1.Job job = 2;
  bool has_job() const;
  void clear_job();
  static const int kJobFieldNumber = 2;
  const ::google::cloud::bigquery::logging::v1::Job& job() const;
  ::google::cloud::bigquery::logging::v1::Job* release_job();
  ::google::cloud::bigquery::logging::v1::Job* mutable_job();
  void set_allocated_job(::google::cloud::bigquery::logging::v1::Job* job);

  // @@protoc_insertion_point(class_scope:google.cloud.bigquery.logging.v1.JobCompletedEvent)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr event_name_;
  ::google::cloud::bigquery::logging::v1::Job* job_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fcloud_2fbigquery_2flogging_2fv1_2faudit_5fdata_2eproto::TableStruct;
  friend void ::protobuf_google_2fcloud_2fbigquery_2flogging_2fv1_2faudit_5fdata_2eproto::InitDefaultsJobCompletedEventImpl();
};
// -------------------------------------------------------------------

class TableDataListRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.cloud.bigquery.logging.v1.TableDataListRequest) */ {
 public:
  TableDataListRequest();
  virtual ~TableDataListRequest();

  TableDataListRequest(const TableDataListRequest& from);

  inline TableDataListRequest& operator=(const TableDataListRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TableDataListRequest(TableDataListRequest&& from) noexcept
    : TableDataListRequest() {
    *this = ::std::move(from);
  }

  inline TableDataListRequest& operator=(TableDataListRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const TableDataListRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TableDataListRequest* internal_default_instance() {
    return reinterpret_cast<const TableDataListRequest*>(
               &_TableDataListRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    18;

  void Swap(TableDataListRequest* other);
  friend void swap(TableDataListRequest& a, TableDataListRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TableDataListRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  TableDataListRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const TableDataListRequest& from);
  void MergeFrom(const TableDataListRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TableDataListRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint64 start_row = 1;
  void clear_start_row();
  static const int kStartRowFieldNumber = 1;
  ::google::protobuf::uint64 start_row() const;
  void set_start_row(::google::protobuf::uint64 value);

  // uint32 max_results = 2;
  void clear_max_results();
  static const int kMaxResultsFieldNumber = 2;
  ::google::protobuf::uint32 max_results() const;
  void set_max_results(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:google.cloud.bigquery.logging.v1.TableDataListRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint64 start_row_;
  ::google::protobuf::uint32 max_results_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fcloud_2fbigquery_2flogging_2fv1_2faudit_5fdata_2eproto::TableStruct;
  friend void ::protobuf_google_2fcloud_2fbigquery_2flogging_2fv1_2faudit_5fdata_2eproto::InitDefaultsTableDataListRequestImpl();
};
// -------------------------------------------------------------------

class Table : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.cloud.bigquery.logging.v1.Table) */ {
 public:
  Table();
  virtual ~Table();

  Table(const Table& from);

  inline Table& operator=(const Table& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Table(Table&& from) noexcept
    : Table() {
    *this = ::std::move(from);
  }

  inline Table& operator=(Table&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Table& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Table* internal_default_instance() {
    return reinterpret_cast<const Table*>(
               &_Table_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    19;

  void Swap(Table* other);
  friend void swap(Table& a, Table& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Table* New() const PROTOBUF_FINAL { return New(NULL); }

  Table* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Table& from);
  void MergeFrom(const Table& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Table* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string schema_json = 8;
  void clear_schema_json();
  static const int kSchemaJsonFieldNumber = 8;
  const ::std::string& schema_json() const;
  void set_schema_json(const ::std::string& value);
  #if LANG_CXX11
  void set_schema_json(::std::string&& value);
  #endif
  void set_schema_json(const char* value);
  void set_schema_json(const char* value, size_t size);
  ::std::string* mutable_schema_json();
  ::std::string* release_schema_json();
  void set_allocated_schema_json(::std::string* schema_json);

  // .google.cloud.bigquery.logging.v1.TableName table_name = 1;
  bool has_table_name() const;
  void clear_table_name();
  static const int kTableNameFieldNumber = 1;
  const ::google::cloud::bigquery::logging::v1::TableName& table_name() const;
  ::google::cloud::bigquery::logging::v1::TableName* release_table_name();
  ::google::cloud::bigquery::logging::v1::TableName* mutable_table_name();
  void set_allocated_table_name(::google::cloud::bigquery::logging::v1::TableName* table_name);

  // .google.cloud.bigquery.logging.v1.TableInfo info = 2;
  bool has_info() const;
  void clear_info();
  static const int kInfoFieldNumber = 2;
  const ::google::cloud::bigquery::logging::v1::TableInfo& info() const;
  ::google::cloud::bigquery::logging::v1::TableInfo* release_info();
  ::google::cloud::bigquery::logging::v1::TableInfo* mutable_info();
  void set_allocated_info(::google::cloud::bigquery::logging::v1::TableInfo* info);

  // .google.cloud.bigquery.logging.v1.TableViewDefinition view = 4;
  bool has_view() const;
  void clear_view();
  static const int kViewFieldNumber = 4;
  const ::google::cloud::bigquery::logging::v1::TableViewDefinition& view() const;
  ::google::cloud::bigquery::logging::v1::TableViewDefinition* release_view();
  ::google::cloud::bigquery::logging::v1::TableViewDefinition* mutable_view();
  void set_allocated_view(::google::cloud::bigquery::logging::v1::TableViewDefinition* view);

  // .google.protobuf.Timestamp expire_time = 5;
  bool has_expire_time() const;
  void clear_expire_time();
  static const int kExpireTimeFieldNumber = 5;
  const ::google::protobuf::Timestamp& expire_time() const;
  ::google::protobuf::Timestamp* release_expire_time();
  ::google::protobuf::Timestamp* mutable_expire_time();
  void set_allocated_expire_time(::google::protobuf::Timestamp* expire_time);

  // .google.protobuf.Timestamp create_time = 6;
  bool has_create_time() const;
  void clear_create_time();
  static const int kCreateTimeFieldNumber = 6;
  const ::google::protobuf::Timestamp& create_time() const;
  ::google::protobuf::Timestamp* release_create_time();
  ::google::protobuf::Timestamp* mutable_create_time();
  void set_allocated_create_time(::google::protobuf::Timestamp* create_time);

  // .google.protobuf.Timestamp truncate_time = 7;
  bool has_truncate_time() const;
  void clear_truncate_time();
  static const int kTruncateTimeFieldNumber = 7;
  const ::google::protobuf::Timestamp& truncate_time() const;
  ::google::protobuf::Timestamp* release_truncate_time();
  ::google::protobuf::Timestamp* mutable_truncate_time();
  void set_allocated_truncate_time(::google::protobuf::Timestamp* truncate_time);

  // @@protoc_insertion_point(class_scope:google.cloud.bigquery.logging.v1.Table)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr schema_json_;
  ::google::cloud::bigquery::logging::v1::TableName* table_name_;
  ::google::cloud::bigquery::logging::v1::TableInfo* info_;
  ::google::cloud::bigquery::logging::v1::TableViewDefinition* view_;
  ::google::protobuf::Timestamp* expire_time_;
  ::google::protobuf::Timestamp* create_time_;
  ::google::protobuf::Timestamp* truncate_time_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fcloud_2fbigquery_2flogging_2fv1_2faudit_5fdata_2eproto::TableStruct;
  friend void ::protobuf_google_2fcloud_2fbigquery_2flogging_2fv1_2faudit_5fdata_2eproto::InitDefaultsTableImpl();
};
// -------------------------------------------------------------------

class TableInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.cloud.bigquery.logging.v1.TableInfo) */ {
 public:
  TableInfo();
  virtual ~TableInfo();

  TableInfo(const TableInfo& from);

  inline TableInfo& operator=(const TableInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TableInfo(TableInfo&& from) noexcept
    : TableInfo() {
    *this = ::std::move(from);
  }

  inline TableInfo& operator=(TableInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const TableInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TableInfo* internal_default_instance() {
    return reinterpret_cast<const TableInfo*>(
               &_TableInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    20;

  void Swap(TableInfo* other);
  friend void swap(TableInfo& a, TableInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TableInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  TableInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const TableInfo& from);
  void MergeFrom(const TableInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TableInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string friendly_name = 1;
  void clear_friendly_name();
  static const int kFriendlyNameFieldNumber = 1;
  const ::std::string& friendly_name() const;
  void set_friendly_name(const ::std::string& value);
  #if LANG_CXX11
  void set_friendly_name(::std::string&& value);
  #endif
  void set_friendly_name(const char* value);
  void set_friendly_name(const char* value, size_t size);
  ::std::string* mutable_friendly_name();
  ::std::string* release_friendly_name();
  void set_allocated_friendly_name(::std::string* friendly_name);

  // string description = 2;
  void clear_description();
  static const int kDescriptionFieldNumber = 2;
  const ::std::string& description() const;
  void set_description(const ::std::string& value);
  #if LANG_CXX11
  void set_description(::std::string&& value);
  #endif
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  ::std::string* mutable_description();
  ::std::string* release_description();
  void set_allocated_description(::std::string* description);

  // @@protoc_insertion_point(class_scope:google.cloud.bigquery.logging.v1.TableInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr friendly_name_;
  ::google::protobuf::internal::ArenaStringPtr description_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fcloud_2fbigquery_2flogging_2fv1_2faudit_5fdata_2eproto::TableStruct;
  friend void ::protobuf_google_2fcloud_2fbigquery_2flogging_2fv1_2faudit_5fdata_2eproto::InitDefaultsTableInfoImpl();
};
// -------------------------------------------------------------------

class TableViewDefinition : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.cloud.bigquery.logging.v1.TableViewDefinition) */ {
 public:
  TableViewDefinition();
  virtual ~TableViewDefinition();

  TableViewDefinition(const TableViewDefinition& from);

  inline TableViewDefinition& operator=(const TableViewDefinition& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TableViewDefinition(TableViewDefinition&& from) noexcept
    : TableViewDefinition() {
    *this = ::std::move(from);
  }

  inline TableViewDefinition& operator=(TableViewDefinition&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const TableViewDefinition& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TableViewDefinition* internal_default_instance() {
    return reinterpret_cast<const TableViewDefinition*>(
               &_TableViewDefinition_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    21;

  void Swap(TableViewDefinition* other);
  friend void swap(TableViewDefinition& a, TableViewDefinition& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TableViewDefinition* New() const PROTOBUF_FINAL { return New(NULL); }

  TableViewDefinition* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const TableViewDefinition& from);
  void MergeFrom(const TableViewDefinition& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TableViewDefinition* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string query = 1;
  void clear_query();
  static const int kQueryFieldNumber = 1;
  const ::std::string& query() const;
  void set_query(const ::std::string& value);
  #if LANG_CXX11
  void set_query(::std::string&& value);
  #endif
  void set_query(const char* value);
  void set_query(const char* value, size_t size);
  ::std::string* mutable_query();
  ::std::string* release_query();
  void set_allocated_query(::std::string* query);

  // @@protoc_insertion_point(class_scope:google.cloud.bigquery.logging.v1.TableViewDefinition)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr query_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fcloud_2fbigquery_2flogging_2fv1_2faudit_5fdata_2eproto::TableStruct;
  friend void ::protobuf_google_2fcloud_2fbigquery_2flogging_2fv1_2faudit_5fdata_2eproto::InitDefaultsTableViewDefinitionImpl();
};
// -------------------------------------------------------------------

class Dataset : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.cloud.bigquery.logging.v1.Dataset) */ {
 public:
  Dataset();
  virtual ~Dataset();

  Dataset(const Dataset& from);

  inline Dataset& operator=(const Dataset& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Dataset(Dataset&& from) noexcept
    : Dataset() {
    *this = ::std::move(from);
  }

  inline Dataset& operator=(Dataset&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Dataset& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Dataset* internal_default_instance() {
    return reinterpret_cast<const Dataset*>(
               &_Dataset_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    22;

  void Swap(Dataset* other);
  friend void swap(Dataset& a, Dataset& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Dataset* New() const PROTOBUF_FINAL { return New(NULL); }

  Dataset* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Dataset& from);
  void MergeFrom(const Dataset& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Dataset* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.cloud.bigquery.logging.v1.DatasetName dataset_name = 1;
  bool has_dataset_name() const;
  void clear_dataset_name();
  static const int kDatasetNameFieldNumber = 1;
  const ::google::cloud::bigquery::logging::v1::DatasetName& dataset_name() const;
  ::google::cloud::bigquery::logging::v1::DatasetName* release_dataset_name();
  ::google::cloud::bigquery::logging::v1::DatasetName* mutable_dataset_name();
  void set_allocated_dataset_name(::google::cloud::bigquery::logging::v1::DatasetName* dataset_name);

  // .google.cloud.bigquery.logging.v1.DatasetInfo info = 2;
  bool has_info() const;
  void clear_info();
  static const int kInfoFieldNumber = 2;
  const ::google::cloud::bigquery::logging::v1::DatasetInfo& info() const;
  ::google::cloud::bigquery::logging::v1::DatasetInfo* release_info();
  ::google::cloud::bigquery::logging::v1::DatasetInfo* mutable_info();
  void set_allocated_info(::google::cloud::bigquery::logging::v1::DatasetInfo* info);

  // .google.protobuf.Timestamp create_time = 4;
  bool has_create_time() const;
  void clear_create_time();
  static const int kCreateTimeFieldNumber = 4;
  const ::google::protobuf::Timestamp& create_time() const;
  ::google::protobuf::Timestamp* release_create_time();
  ::google::protobuf::Timestamp* mutable_create_time();
  void set_allocated_create_time(::google::protobuf::Timestamp* create_time);

  // .google.protobuf.Timestamp update_time = 5;
  bool has_update_time() const;
  void clear_update_time();
  static const int kUpdateTimeFieldNumber = 5;
  const ::google::protobuf::Timestamp& update_time() const;
  ::google::protobuf::Timestamp* release_update_time();
  ::google::protobuf::Timestamp* mutable_update_time();
  void set_allocated_update_time(::google::protobuf::Timestamp* update_time);

  // .google.cloud.bigquery.logging.v1.BigQueryAcl acl = 6;
  bool has_acl() const;
  void clear_acl();
  static const int kAclFieldNumber = 6;
  const ::google::cloud::bigquery::logging::v1::BigQueryAcl& acl() const;
  ::google::cloud::bigquery::logging::v1::BigQueryAcl* release_acl();
  ::google::cloud::bigquery::logging::v1::BigQueryAcl* mutable_acl();
  void set_allocated_acl(::google::cloud::bigquery::logging::v1::BigQueryAcl* acl);

  // .google.protobuf.Duration default_table_expire_duration = 8;
  bool has_default_table_expire_duration() const;
  void clear_default_table_expire_duration();
  static const int kDefaultTableExpireDurationFieldNumber = 8;
  const ::google::protobuf::Duration& default_table_expire_duration() const;
  ::google::protobuf::Duration* release_default_table_expire_duration();
  ::google::protobuf::Duration* mutable_default_table_expire_duration();
  void set_allocated_default_table_expire_duration(::google::protobuf::Duration* default_table_expire_duration);

  // @@protoc_insertion_point(class_scope:google.cloud.bigquery.logging.v1.Dataset)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::cloud::bigquery::logging::v1::DatasetName* dataset_name_;
  ::google::cloud::bigquery::logging::v1::DatasetInfo* info_;
  ::google::protobuf::Timestamp* create_time_;
  ::google::protobuf::Timestamp* update_time_;
  ::google::cloud::bigquery::logging::v1::BigQueryAcl* acl_;
  ::google::protobuf::Duration* default_table_expire_duration_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fcloud_2fbigquery_2flogging_2fv1_2faudit_5fdata_2eproto::TableStruct;
  friend void ::protobuf_google_2fcloud_2fbigquery_2flogging_2fv1_2faudit_5fdata_2eproto::InitDefaultsDatasetImpl();
};
// -------------------------------------------------------------------

class DatasetInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.cloud.bigquery.logging.v1.DatasetInfo) */ {
 public:
  DatasetInfo();
  virtual ~DatasetInfo();

  DatasetInfo(const DatasetInfo& from);

  inline DatasetInfo& operator=(const DatasetInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DatasetInfo(DatasetInfo&& from) noexcept
    : DatasetInfo() {
    *this = ::std::move(from);
  }

  inline DatasetInfo& operator=(DatasetInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DatasetInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DatasetInfo* internal_default_instance() {
    return reinterpret_cast<const DatasetInfo*>(
               &_DatasetInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    23;

  void Swap(DatasetInfo* other);
  friend void swap(DatasetInfo& a, DatasetInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DatasetInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  DatasetInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DatasetInfo& from);
  void MergeFrom(const DatasetInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DatasetInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string friendly_name = 1;
  void clear_friendly_name();
  static const int kFriendlyNameFieldNumber = 1;
  const ::std::string& friendly_name() const;
  void set_friendly_name(const ::std::string& value);
  #if LANG_CXX11
  void set_friendly_name(::std::string&& value);
  #endif
  void set_friendly_name(const char* value);
  void set_friendly_name(const char* value, size_t size);
  ::std::string* mutable_friendly_name();
  ::std::string* release_friendly_name();
  void set_allocated_friendly_name(::std::string* friendly_name);

  // string description = 2;
  void clear_description();
  static const int kDescriptionFieldNumber = 2;
  const ::std::string& description() const;
  void set_description(const ::std::string& value);
  #if LANG_CXX11
  void set_description(::std::string&& value);
  #endif
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  ::std::string* mutable_description();
  ::std::string* release_description();
  void set_allocated_description(::std::string* description);

  // @@protoc_insertion_point(class_scope:google.cloud.bigquery.logging.v1.DatasetInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr friendly_name_;
  ::google::protobuf::internal::ArenaStringPtr description_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fcloud_2fbigquery_2flogging_2fv1_2faudit_5fdata_2eproto::TableStruct;
  friend void ::protobuf_google_2fcloud_2fbigquery_2flogging_2fv1_2faudit_5fdata_2eproto::InitDefaultsDatasetInfoImpl();
};
// -------------------------------------------------------------------

class BigQueryAcl_Entry : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.cloud.bigquery.logging.v1.BigQueryAcl.Entry) */ {
 public:
  BigQueryAcl_Entry();
  virtual ~BigQueryAcl_Entry();

  BigQueryAcl_Entry(const BigQueryAcl_Entry& from);

  inline BigQueryAcl_Entry& operator=(const BigQueryAcl_Entry& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  BigQueryAcl_Entry(BigQueryAcl_Entry&& from) noexcept
    : BigQueryAcl_Entry() {
    *this = ::std::move(from);
  }

  inline BigQueryAcl_Entry& operator=(BigQueryAcl_Entry&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const BigQueryAcl_Entry& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BigQueryAcl_Entry* internal_default_instance() {
    return reinterpret_cast<const BigQueryAcl_Entry*>(
               &_BigQueryAcl_Entry_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    24;

  void Swap(BigQueryAcl_Entry* other);
  friend void swap(BigQueryAcl_Entry& a, BigQueryAcl_Entry& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BigQueryAcl_Entry* New() const PROTOBUF_FINAL { return New(NULL); }

  BigQueryAcl_Entry* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const BigQueryAcl_Entry& from);
  void MergeFrom(const BigQueryAcl_Entry& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(BigQueryAcl_Entry* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string role = 1;
  void clear_role();
  static const int kRoleFieldNumber = 1;
  const ::std::string& role() const;
  void set_role(const ::std::string& value);
  #if LANG_CXX11
  void set_role(::std::string&& value);
  #endif
  void set_role(const char* value);
  void set_role(const char* value, size_t size);
  ::std::string* mutable_role();
  ::std::string* release_role();
  void set_allocated_role(::std::string* role);

  // string group_email = 2;
  void clear_group_email();
  static const int kGroupEmailFieldNumber = 2;
  const ::std::string& group_email() const;
  void set_group_email(const ::std::string& value);
  #if LANG_CXX11
  void set_group_email(::std::string&& value);
  #endif
  void set_group_email(const char* value);
  void set_group_email(const char* value, size_t size);
  ::std::string* mutable_group_email();
  ::std::string* release_group_email();
  void set_allocated_group_email(::std::string* group_email);

  // string user_email = 3;
  void clear_user_email();
  static const int kUserEmailFieldNumber = 3;
  const ::std::string& user_email() const;
  void set_user_email(const ::std::string& value);
  #if LANG_CXX11
  void set_user_email(::std::string&& value);
  #endif
  void set_user_email(const char* value);
  void set_user_email(const char* value, size_t size);
  ::std::string* mutable_user_email();
  ::std::string* release_user_email();
  void set_allocated_user_email(::std::string* user_email);

  // string domain = 4;
  void clear_domain();
  static const int kDomainFieldNumber = 4;
  const ::std::string& domain() const;
  void set_domain(const ::std::string& value);
  #if LANG_CXX11
  void set_domain(::std::string&& value);
  #endif
  void set_domain(const char* value);
  void set_domain(const char* value, size_t size);
  ::std::string* mutable_domain();
  ::std::string* release_domain();
  void set_allocated_domain(::std::string* domain);

  // string special_group = 5;
  void clear_special_group();
  static const int kSpecialGroupFieldNumber = 5;
  const ::std::string& special_group() const;
  void set_special_group(const ::std::string& value);
  #if LANG_CXX11
  void set_special_group(::std::string&& value);
  #endif
  void set_special_group(const char* value);
  void set_special_group(const char* value, size_t size);
  ::std::string* mutable_special_group();
  ::std::string* release_special_group();
  void set_allocated_special_group(::std::string* special_group);

  // .google.cloud.bigquery.logging.v1.TableName view_name = 6;
  bool has_view_name() const;
  void clear_view_name();
  static const int kViewNameFieldNumber = 6;
  const ::google::cloud::bigquery::logging::v1::TableName& view_name() const;
  ::google::cloud::bigquery::logging::v1::TableName* release_view_name();
  ::google::cloud::bigquery::logging::v1::TableName* mutable_view_name();
  void set_allocated_view_name(::google::cloud::bigquery::logging::v1::TableName* view_name);

  // @@protoc_insertion_point(class_scope:google.cloud.bigquery.logging.v1.BigQueryAcl.Entry)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr role_;
  ::google::protobuf::internal::ArenaStringPtr group_email_;
  ::google::protobuf::internal::ArenaStringPtr user_email_;
  ::google::protobuf::internal::ArenaStringPtr domain_;
  ::google::protobuf::internal::ArenaStringPtr special_group_;
  ::google::cloud::bigquery::logging::v1::TableName* view_name_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fcloud_2fbigquery_2flogging_2fv1_2faudit_5fdata_2eproto::TableStruct;
  friend void ::protobuf_google_2fcloud_2fbigquery_2flogging_2fv1_2faudit_5fdata_2eproto::InitDefaultsBigQueryAcl_EntryImpl();
};
// -------------------------------------------------------------------

class BigQueryAcl : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.cloud.bigquery.logging.v1.BigQueryAcl) */ {
 public:
  BigQueryAcl();
  virtual ~BigQueryAcl();

  BigQueryAcl(const BigQueryAcl& from);

  inline BigQueryAcl& operator=(const BigQueryAcl& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  BigQueryAcl(BigQueryAcl&& from) noexcept
    : BigQueryAcl() {
    *this = ::std::move(from);
  }

  inline BigQueryAcl& operator=(BigQueryAcl&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const BigQueryAcl& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BigQueryAcl* internal_default_instance() {
    return reinterpret_cast<const BigQueryAcl*>(
               &_BigQueryAcl_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    25;

  void Swap(BigQueryAcl* other);
  friend void swap(BigQueryAcl& a, BigQueryAcl& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BigQueryAcl* New() const PROTOBUF_FINAL { return New(NULL); }

  BigQueryAcl* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const BigQueryAcl& from);
  void MergeFrom(const BigQueryAcl& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(BigQueryAcl* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef BigQueryAcl_Entry Entry;

  // accessors -------------------------------------------------------

  // repeated .google.cloud.bigquery.logging.v1.BigQueryAcl.Entry entries = 1;
  int entries_size() const;
  void clear_entries();
  static const int kEntriesFieldNumber = 1;
  const ::google::cloud::bigquery::logging::v1::BigQueryAcl_Entry& entries(int index) const;
  ::google::cloud::bigquery::logging::v1::BigQueryAcl_Entry* mutable_entries(int index);
  ::google::cloud::bigquery::logging::v1::BigQueryAcl_Entry* add_entries();
  ::google::protobuf::RepeatedPtrField< ::google::cloud::bigquery::logging::v1::BigQueryAcl_Entry >*
      mutable_entries();
  const ::google::protobuf::RepeatedPtrField< ::google::cloud::bigquery::logging::v1::BigQueryAcl_Entry >&
      entries() const;

  // @@protoc_insertion_point(class_scope:google.cloud.bigquery.logging.v1.BigQueryAcl)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::google::cloud::bigquery::logging::v1::BigQueryAcl_Entry > entries_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fcloud_2fbigquery_2flogging_2fv1_2faudit_5fdata_2eproto::TableStruct;
  friend void ::protobuf_google_2fcloud_2fbigquery_2flogging_2fv1_2faudit_5fdata_2eproto::InitDefaultsBigQueryAclImpl();
};
// -------------------------------------------------------------------

class Job : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.cloud.bigquery.logging.v1.Job) */ {
 public:
  Job();
  virtual ~Job();

  Job(const Job& from);

  inline Job& operator=(const Job& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Job(Job&& from) noexcept
    : Job() {
    *this = ::std::move(from);
  }

  inline Job& operator=(Job&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Job& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Job* internal_default_instance() {
    return reinterpret_cast<const Job*>(
               &_Job_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    26;

  void Swap(Job* other);
  friend void swap(Job& a, Job& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Job* New() const PROTOBUF_FINAL { return New(NULL); }

  Job* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Job& from);
  void MergeFrom(const Job& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Job* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.cloud.bigquery.logging.v1.JobName job_name = 1;
  bool has_job_name() const;
  void clear_job_name();
  static const int kJobNameFieldNumber = 1;
  const ::google::cloud::bigquery::logging::v1::JobName& job_name() const;
  ::google::cloud::bigquery::logging::v1::JobName* release_job_name();
  ::google::cloud::bigquery::logging::v1::JobName* mutable_job_name();
  void set_allocated_job_name(::google::cloud::bigquery::logging::v1::JobName* job_name);

  // .google.cloud.bigquery.logging.v1.JobConfiguration job_configuration = 2;
  bool has_job_configuration() const;
  void clear_job_configuration();
  static const int kJobConfigurationFieldNumber = 2;
  const ::google::cloud::bigquery::logging::v1::JobConfiguration& job_configuration() const;
  ::google::cloud::bigquery::logging::v1::JobConfiguration* release_job_configuration();
  ::google::cloud::bigquery::logging::v1::JobConfiguration* mutable_job_configuration();
  void set_allocated_job_configuration(::google::cloud::bigquery::logging::v1::JobConfiguration* job_configuration);

  // .google.cloud.bigquery.logging.v1.JobStatus job_status = 3;
  bool has_job_status() const;
  void clear_job_status();
  static const int kJobStatusFieldNumber = 3;
  const ::google::cloud::bigquery::logging::v1::JobStatus& job_status() const;
  ::google::cloud::bigquery::logging::v1::JobStatus* release_job_status();
  ::google::cloud::bigquery::logging::v1::JobStatus* mutable_job_status();
  void set_allocated_job_status(::google::cloud::bigquery::logging::v1::JobStatus* job_status);

  // .google.cloud.bigquery.logging.v1.JobStatistics job_statistics = 4;
  bool has_job_statistics() const;
  void clear_job_statistics();
  static const int kJobStatisticsFieldNumber = 4;
  const ::google::cloud::bigquery::logging::v1::JobStatistics& job_statistics() const;
  ::google::cloud::bigquery::logging::v1::JobStatistics* release_job_statistics();
  ::google::cloud::bigquery::logging::v1::JobStatistics* mutable_job_statistics();
  void set_allocated_job_statistics(::google::cloud::bigquery::logging::v1::JobStatistics* job_statistics);

  // @@protoc_insertion_point(class_scope:google.cloud.bigquery.logging.v1.Job)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::cloud::bigquery::logging::v1::JobName* job_name_;
  ::google::cloud::bigquery::logging::v1::JobConfiguration* job_configuration_;
  ::google::cloud::bigquery::logging::v1::JobStatus* job_status_;
  ::google::cloud::bigquery::logging::v1::JobStatistics* job_statistics_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fcloud_2fbigquery_2flogging_2fv1_2faudit_5fdata_2eproto::TableStruct;
  friend void ::protobuf_google_2fcloud_2fbigquery_2flogging_2fv1_2faudit_5fdata_2eproto::InitDefaultsJobImpl();
};
// -------------------------------------------------------------------

class JobConfiguration_Query : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.cloud.bigquery.logging.v1.JobConfiguration.Query) */ {
 public:
  JobConfiguration_Query();
  virtual ~JobConfiguration_Query();

  JobConfiguration_Query(const JobConfiguration_Query& from);

  inline JobConfiguration_Query& operator=(const JobConfiguration_Query& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  JobConfiguration_Query(JobConfiguration_Query&& from) noexcept
    : JobConfiguration_Query() {
    *this = ::std::move(from);
  }

  inline JobConfiguration_Query& operator=(JobConfiguration_Query&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const JobConfiguration_Query& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const JobConfiguration_Query* internal_default_instance() {
    return reinterpret_cast<const JobConfiguration_Query*>(
               &_JobConfiguration_Query_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    27;

  void Swap(JobConfiguration_Query* other);
  friend void swap(JobConfiguration_Query& a, JobConfiguration_Query& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline JobConfiguration_Query* New() const PROTOBUF_FINAL { return New(NULL); }

  JobConfiguration_Query* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const JobConfiguration_Query& from);
  void MergeFrom(const JobConfiguration_Query& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(JobConfiguration_Query* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .google.cloud.bigquery.logging.v1.TableDefinition table_definitions = 6;
  int table_definitions_size() const;
  void clear_table_definitions();
  static const int kTableDefinitionsFieldNumber = 6;
  const ::google::cloud::bigquery::logging::v1::TableDefinition& table_definitions(int index) const;
  ::google::cloud::bigquery::logging::v1::TableDefinition* mutable_table_definitions(int index);
  ::google::cloud::bigquery::logging::v1::TableDefinition* add_table_definitions();
  ::google::protobuf::RepeatedPtrField< ::google::cloud::bigquery::logging::v1::TableDefinition >*
      mutable_table_definitions();
  const ::google::protobuf::RepeatedPtrField< ::google::cloud::bigquery::logging::v1::TableDefinition >&
      table_definitions() const;

  // string query = 1;
  void clear_query();
  static const int kQueryFieldNumber = 1;
  const ::std::string& query() const;
  void set_query(const ::std::string& value);
  #if LANG_CXX11
  void set_query(::std::string&& value);
  #endif
  void set_query(const char* value);
  void set_query(const char* value, size_t size);
  ::std::string* mutable_query();
  ::std::string* release_query();
  void set_allocated_query(::std::string* query);

  // string create_disposition = 3;
  void clear_create_disposition();
  static const int kCreateDispositionFieldNumber = 3;
  const ::std::string& create_disposition() const;
  void set_create_disposition(const ::std::string& value);
  #if LANG_CXX11
  void set_create_disposition(::std::string&& value);
  #endif
  void set_create_disposition(const char* value);
  void set_create_disposition(const char* value, size_t size);
  ::std::string* mutable_create_disposition();
  ::std::string* release_create_disposition();
  void set_allocated_create_disposition(::std::string* create_disposition);

  // string write_disposition = 4;
  void clear_write_disposition();
  static const int kWriteDispositionFieldNumber = 4;
  const ::std::string& write_disposition() const;
  void set_write_disposition(const ::std::string& value);
  #if LANG_CXX11
  void set_write_disposition(::std::string&& value);
  #endif
  void set_write_disposition(const char* value);
  void set_write_disposition(const char* value, size_t size);
  ::std::string* mutable_write_disposition();
  ::std::string* release_write_disposition();
  void set_allocated_write_disposition(::std::string* write_disposition);

  // .google.cloud.bigquery.logging.v1.TableName destination_table = 2;
  bool has_destination_table() const;
  void clear_destination_table();
  static const int kDestinationTableFieldNumber = 2;
  const ::google::cloud::bigquery::logging::v1::TableName& destination_table() const;
  ::google::cloud::bigquery::logging::v1::TableName* release_destination_table();
  ::google::cloud::bigquery::logging::v1::TableName* mutable_destination_table();
  void set_allocated_destination_table(::google::cloud::bigquery::logging::v1::TableName* destination_table);

  // .google.cloud.bigquery.logging.v1.DatasetName default_dataset = 5;
  bool has_default_dataset() const;
  void clear_default_dataset();
  static const int kDefaultDatasetFieldNumber = 5;
  const ::google::cloud::bigquery::logging::v1::DatasetName& default_dataset() const;
  ::google::cloud::bigquery::logging::v1::DatasetName* release_default_dataset();
  ::google::cloud::bigquery::logging::v1::DatasetName* mutable_default_dataset();
  void set_allocated_default_dataset(::google::cloud::bigquery::logging::v1::DatasetName* default_dataset);

  // @@protoc_insertion_point(class_scope:google.cloud.bigquery.logging.v1.JobConfiguration.Query)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::google::cloud::bigquery::logging::v1::TableDefinition > table_definitions_;
  ::google::protobuf::internal::ArenaStringPtr query_;
  ::google::protobuf::internal::ArenaStringPtr create_disposition_;
  ::google::protobuf::internal::ArenaStringPtr write_disposition_;
  ::google::cloud::bigquery::logging::v1::TableName* destination_table_;
  ::google::cloud::bigquery::logging::v1::DatasetName* default_dataset_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fcloud_2fbigquery_2flogging_2fv1_2faudit_5fdata_2eproto::TableStruct;
  friend void ::protobuf_google_2fcloud_2fbigquery_2flogging_2fv1_2faudit_5fdata_2eproto::InitDefaultsJobConfiguration_QueryImpl();
};
// -------------------------------------------------------------------

class JobConfiguration_Load : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.cloud.bigquery.logging.v1.JobConfiguration.Load) */ {
 public:
  JobConfiguration_Load();
  virtual ~JobConfiguration_Load();

  JobConfiguration_Load(const JobConfiguration_Load& from);

  inline JobConfiguration_Load& operator=(const JobConfiguration_Load& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  JobConfiguration_Load(JobConfiguration_Load&& from) noexcept
    : JobConfiguration_Load() {
    *this = ::std::move(from);
  }

  inline JobConfiguration_Load& operator=(JobConfiguration_Load&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const JobConfiguration_Load& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const JobConfiguration_Load* internal_default_instance() {
    return reinterpret_cast<const JobConfiguration_Load*>(
               &_JobConfiguration_Load_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    28;

  void Swap(JobConfiguration_Load* other);
  friend void swap(JobConfiguration_Load& a, JobConfiguration_Load& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline JobConfiguration_Load* New() const PROTOBUF_FINAL { return New(NULL); }

  JobConfiguration_Load* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const JobConfiguration_Load& from);
  void MergeFrom(const JobConfiguration_Load& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(JobConfiguration_Load* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string source_uris = 1;
  int source_uris_size() const;
  void clear_source_uris();
  static const int kSourceUrisFieldNumber = 1;
  const ::std::string& source_uris(int index) const;
  ::std::string* mutable_source_uris(int index);
  void set_source_uris(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_source_uris(int index, ::std::string&& value);
  #endif
  void set_source_uris(int index, const char* value);
  void set_source_uris(int index, const char* value, size_t size);
  ::std::string* add_source_uris();
  void add_source_uris(const ::std::string& value);
  #if LANG_CXX11
  void add_source_uris(::std::string&& value);
  #endif
  void add_source_uris(const char* value);
  void add_source_uris(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& source_uris() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_source_uris();

  // string create_disposition = 4;
  void clear_create_disposition();
  static const int kCreateDispositionFieldNumber = 4;
  const ::std::string& create_disposition() const;
  void set_create_disposition(const ::std::string& value);
  #if LANG_CXX11
  void set_create_disposition(::std::string&& value);
  #endif
  void set_create_disposition(const char* value);
  void set_create_disposition(const char* value, size_t size);
  ::std::string* mutable_create_disposition();
  ::std::string* release_create_disposition();
  void set_allocated_create_disposition(::std::string* create_disposition);

  // string write_disposition = 5;
  void clear_write_disposition();
  static const int kWriteDispositionFieldNumber = 5;
  const ::std::string& write_disposition() const;
  void set_write_disposition(const ::std::string& value);
  #if LANG_CXX11
  void set_write_disposition(::std::string&& value);
  #endif
  void set_write_disposition(const char* value);
  void set_write_disposition(const char* value, size_t size);
  ::std::string* mutable_write_disposition();
  ::std::string* release_write_disposition();
  void set_allocated_write_disposition(::std::string* write_disposition);

  // string schema_json = 6;
  void clear_schema_json();
  static const int kSchemaJsonFieldNumber = 6;
  const ::std::string& schema_json() const;
  void set_schema_json(const ::std::string& value);
  #if LANG_CXX11
  void set_schema_json(::std::string&& value);
  #endif
  void set_schema_json(const char* value);
  void set_schema_json(const char* value, size_t size);
  ::std::string* mutable_schema_json();
  ::std::string* release_schema_json();
  void set_allocated_schema_json(::std::string* schema_json);

  // .google.cloud.bigquery.logging.v1.TableName destination_table = 3;
  bool has_destination_table() const;
  void clear_destination_table();
  static const int kDestinationTableFieldNumber = 3;
  const ::google::cloud::bigquery::logging::v1::TableName& destination_table() const;
  ::google::cloud::bigquery::logging::v1::TableName* release_destination_table();
  ::google::cloud::bigquery::logging::v1::TableName* mutable_destination_table();
  void set_allocated_destination_table(::google::cloud::bigquery::logging::v1::TableName* destination_table);

  // @@protoc_insertion_point(class_scope:google.cloud.bigquery.logging.v1.JobConfiguration.Load)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> source_uris_;
  ::google::protobuf::internal::ArenaStringPtr create_disposition_;
  ::google::protobuf::internal::ArenaStringPtr write_disposition_;
  ::google::protobuf::internal::ArenaStringPtr schema_json_;
  ::google::cloud::bigquery::logging::v1::TableName* destination_table_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fcloud_2fbigquery_2flogging_2fv1_2faudit_5fdata_2eproto::TableStruct;
  friend void ::protobuf_google_2fcloud_2fbigquery_2flogging_2fv1_2faudit_5fdata_2eproto::InitDefaultsJobConfiguration_LoadImpl();
};
// -------------------------------------------------------------------

class JobConfiguration_Extract : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.cloud.bigquery.logging.v1.JobConfiguration.Extract) */ {
 public:
  JobConfiguration_Extract();
  virtual ~JobConfiguration_Extract();

  JobConfiguration_Extract(const JobConfiguration_Extract& from);

  inline JobConfiguration_Extract& operator=(const JobConfiguration_Extract& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  JobConfiguration_Extract(JobConfiguration_Extract&& from) noexcept
    : JobConfiguration_Extract() {
    *this = ::std::move(from);
  }

  inline JobConfiguration_Extract& operator=(JobConfiguration_Extract&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const JobConfiguration_Extract& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const JobConfiguration_Extract* internal_default_instance() {
    return reinterpret_cast<const JobConfiguration_Extract*>(
               &_JobConfiguration_Extract_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    29;

  void Swap(JobConfiguration_Extract* other);
  friend void swap(JobConfiguration_Extract& a, JobConfiguration_Extract& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline JobConfiguration_Extract* New() const PROTOBUF_FINAL { return New(NULL); }

  JobConfiguration_Extract* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const JobConfiguration_Extract& from);
  void MergeFrom(const JobConfiguration_Extract& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(JobConfiguration_Extract* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string destination_uris = 1;
  int destination_uris_size() const;
  void clear_destination_uris();
  static const int kDestinationUrisFieldNumber = 1;
  const ::std::string& destination_uris(int index) const;
  ::std::string* mutable_destination_uris(int index);
  void set_destination_uris(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_destination_uris(int index, ::std::string&& value);
  #endif
  void set_destination_uris(int index, const char* value);
  void set_destination_uris(int index, const char* value, size_t size);
  ::std::string* add_destination_uris();
  void add_destination_uris(const ::std::string& value);
  #if LANG_CXX11
  void add_destination_uris(::std::string&& value);
  #endif
  void add_destination_uris(const char* value);
  void add_destination_uris(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& destination_uris() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_destination_uris();

  // .google.cloud.bigquery.logging.v1.TableName source_table = 2;
  bool has_source_table() const;
  void clear_source_table();
  static const int kSourceTableFieldNumber = 2;
  const ::google::cloud::bigquery::logging::v1::TableName& source_table() const;
  ::google::cloud::bigquery::logging::v1::TableName* release_source_table();
  ::google::cloud::bigquery::logging::v1::TableName* mutable_source_table();
  void set_allocated_source_table(::google::cloud::bigquery::logging::v1::TableName* source_table);

  // @@protoc_insertion_point(class_scope:google.cloud.bigquery.logging.v1.JobConfiguration.Extract)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> destination_uris_;
  ::google::cloud::bigquery::logging::v1::TableName* source_table_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fcloud_2fbigquery_2flogging_2fv1_2faudit_5fdata_2eproto::TableStruct;
  friend void ::protobuf_google_2fcloud_2fbigquery_2flogging_2fv1_2faudit_5fdata_2eproto::InitDefaultsJobConfiguration_ExtractImpl();
};
// -------------------------------------------------------------------

class JobConfiguration_TableCopy : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.cloud.bigquery.logging.v1.JobConfiguration.TableCopy) */ {
 public:
  JobConfiguration_TableCopy();
  virtual ~JobConfiguration_TableCopy();

  JobConfiguration_TableCopy(const JobConfiguration_TableCopy& from);

  inline JobConfiguration_TableCopy& operator=(const JobConfiguration_TableCopy& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  JobConfiguration_TableCopy(JobConfiguration_TableCopy&& from) noexcept
    : JobConfiguration_TableCopy() {
    *this = ::std::move(from);
  }

  inline JobConfiguration_TableCopy& operator=(JobConfiguration_TableCopy&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const JobConfiguration_TableCopy& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const JobConfiguration_TableCopy* internal_default_instance() {
    return reinterpret_cast<const JobConfiguration_TableCopy*>(
               &_JobConfiguration_TableCopy_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    30;

  void Swap(JobConfiguration_TableCopy* other);
  friend void swap(JobConfiguration_TableCopy& a, JobConfiguration_TableCopy& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline JobConfiguration_TableCopy* New() const PROTOBUF_FINAL { return New(NULL); }

  JobConfiguration_TableCopy* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const JobConfiguration_TableCopy& from);
  void MergeFrom(const JobConfiguration_TableCopy& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(JobConfiguration_TableCopy* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .google.cloud.bigquery.logging.v1.TableName source_tables = 1;
  int source_tables_size() const;
  void clear_source_tables();
  static const int kSourceTablesFieldNumber = 1;
  const ::google::cloud::bigquery::logging::v1::TableName& source_tables(int index) const;
  ::google::cloud::bigquery::logging::v1::TableName* mutable_source_tables(int index);
  ::google::cloud::bigquery::logging::v1::TableName* add_source_tables();
  ::google::protobuf::RepeatedPtrField< ::google::cloud::bigquery::logging::v1::TableName >*
      mutable_source_tables();
  const ::google::protobuf::RepeatedPtrField< ::google::cloud::bigquery::logging::v1::TableName >&
      source_tables() const;

  // string create_disposition = 3;
  void clear_create_disposition();
  static const int kCreateDispositionFieldNumber = 3;
  const ::std::string& create_disposition() const;
  void set_create_disposition(const ::std::string& value);
  #if LANG_CXX11
  void set_create_disposition(::std::string&& value);
  #endif
  void set_create_disposition(const char* value);
  void set_create_disposition(const char* value, size_t size);
  ::std::string* mutable_create_disposition();
  ::std::string* release_create_disposition();
  void set_allocated_create_disposition(::std::string* create_disposition);

  // string write_disposition = 4;
  void clear_write_disposition();
  static const int kWriteDispositionFieldNumber = 4;
  const ::std::string& write_disposition() const;
  void set_write_disposition(const ::std::string& value);
  #if LANG_CXX11
  void set_write_disposition(::std::string&& value);
  #endif
  void set_write_disposition(const char* value);
  void set_write_disposition(const char* value, size_t size);
  ::std::string* mutable_write_disposition();
  ::std::string* release_write_disposition();
  void set_allocated_write_disposition(::std::string* write_disposition);

  // .google.cloud.bigquery.logging.v1.TableName destination_table = 2;
  bool has_destination_table() const;
  void clear_destination_table();
  static const int kDestinationTableFieldNumber = 2;
  const ::google::cloud::bigquery::logging::v1::TableName& destination_table() const;
  ::google::cloud::bigquery::logging::v1::TableName* release_destination_table();
  ::google::cloud::bigquery::logging::v1::TableName* mutable_destination_table();
  void set_allocated_destination_table(::google::cloud::bigquery::logging::v1::TableName* destination_table);

  // @@protoc_insertion_point(class_scope:google.cloud.bigquery.logging.v1.JobConfiguration.TableCopy)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::google::cloud::bigquery::logging::v1::TableName > source_tables_;
  ::google::protobuf::internal::ArenaStringPtr create_disposition_;
  ::google::protobuf::internal::ArenaStringPtr write_disposition_;
  ::google::cloud::bigquery::logging::v1::TableName* destination_table_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fcloud_2fbigquery_2flogging_2fv1_2faudit_5fdata_2eproto::TableStruct;
  friend void ::protobuf_google_2fcloud_2fbigquery_2flogging_2fv1_2faudit_5fdata_2eproto::InitDefaultsJobConfiguration_TableCopyImpl();
};
// -------------------------------------------------------------------

class JobConfiguration : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.cloud.bigquery.logging.v1.JobConfiguration) */ {
 public:
  JobConfiguration();
  virtual ~JobConfiguration();

  JobConfiguration(const JobConfiguration& from);

  inline JobConfiguration& operator=(const JobConfiguration& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  JobConfiguration(JobConfiguration&& from) noexcept
    : JobConfiguration() {
    *this = ::std::move(from);
  }

  inline JobConfiguration& operator=(JobConfiguration&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const JobConfiguration& default_instance();

  enum ConfigurationCase {
    kQuery = 5,
    kLoad = 6,
    kExtract = 7,
    kTableCopy = 8,
    CONFIGURATION_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const JobConfiguration* internal_default_instance() {
    return reinterpret_cast<const JobConfiguration*>(
               &_JobConfiguration_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    31;

  void Swap(JobConfiguration* other);
  friend void swap(JobConfiguration& a, JobConfiguration& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline JobConfiguration* New() const PROTOBUF_FINAL { return New(NULL); }

  JobConfiguration* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const JobConfiguration& from);
  void MergeFrom(const JobConfiguration& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(JobConfiguration* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef JobConfiguration_Query Query;
  typedef JobConfiguration_Load Load;
  typedef JobConfiguration_Extract Extract;
  typedef JobConfiguration_TableCopy TableCopy;

  // accessors -------------------------------------------------------

  // bool dry_run = 9;
  void clear_dry_run();
  static const int kDryRunFieldNumber = 9;
  bool dry_run() const;
  void set_dry_run(bool value);

  // .google.cloud.bigquery.logging.v1.JobConfiguration.Query query = 5;
  bool has_query() const;
  void clear_query();
  static const int kQueryFieldNumber = 5;
  const ::google::cloud::bigquery::logging::v1::JobConfiguration_Query& query() const;
  ::google::cloud::bigquery::logging::v1::JobConfiguration_Query* release_query();
  ::google::cloud::bigquery::logging::v1::JobConfiguration_Query* mutable_query();
  void set_allocated_query(::google::cloud::bigquery::logging::v1::JobConfiguration_Query* query);

  // .google.cloud.bigquery.logging.v1.JobConfiguration.Load load = 6;
  bool has_load() const;
  void clear_load();
  static const int kLoadFieldNumber = 6;
  const ::google::cloud::bigquery::logging::v1::JobConfiguration_Load& load() const;
  ::google::cloud::bigquery::logging::v1::JobConfiguration_Load* release_load();
  ::google::cloud::bigquery::logging::v1::JobConfiguration_Load* mutable_load();
  void set_allocated_load(::google::cloud::bigquery::logging::v1::JobConfiguration_Load* load);

  // .google.cloud.bigquery.logging.v1.JobConfiguration.Extract extract = 7;
  bool has_extract() const;
  void clear_extract();
  static const int kExtractFieldNumber = 7;
  const ::google::cloud::bigquery::logging::v1::JobConfiguration_Extract& extract() const;
  ::google::cloud::bigquery::logging::v1::JobConfiguration_Extract* release_extract();
  ::google::cloud::bigquery::logging::v1::JobConfiguration_Extract* mutable_extract();
  void set_allocated_extract(::google::cloud::bigquery::logging::v1::JobConfiguration_Extract* extract);

  // .google.cloud.bigquery.logging.v1.JobConfiguration.TableCopy table_copy = 8;
  bool has_table_copy() const;
  void clear_table_copy();
  static const int kTableCopyFieldNumber = 8;
  const ::google::cloud::bigquery::logging::v1::JobConfiguration_TableCopy& table_copy() const;
  ::google::cloud::bigquery::logging::v1::JobConfiguration_TableCopy* release_table_copy();
  ::google::cloud::bigquery::logging::v1::JobConfiguration_TableCopy* mutable_table_copy();
  void set_allocated_table_copy(::google::cloud::bigquery::logging::v1::JobConfiguration_TableCopy* table_copy);

  ConfigurationCase configuration_case() const;
  // @@protoc_insertion_point(class_scope:google.cloud.bigquery.logging.v1.JobConfiguration)
 private:
  void set_has_query();
  void set_has_load();
  void set_has_extract();
  void set_has_table_copy();

  inline bool has_configuration() const;
  void clear_configuration();
  inline void clear_has_configuration();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool dry_run_;
  union ConfigurationUnion {
    ConfigurationUnion() {}
    ::google::cloud::bigquery::logging::v1::JobConfiguration_Query* query_;
    ::google::cloud::bigquery::logging::v1::JobConfiguration_Load* load_;
    ::google::cloud::bigquery::logging::v1::JobConfiguration_Extract* extract_;
    ::google::cloud::bigquery::logging::v1::JobConfiguration_TableCopy* table_copy_;
  } configuration_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::protobuf_google_2fcloud_2fbigquery_2flogging_2fv1_2faudit_5fdata_2eproto::TableStruct;
  friend void ::protobuf_google_2fcloud_2fbigquery_2flogging_2fv1_2faudit_5fdata_2eproto::InitDefaultsJobConfigurationImpl();
};
// -------------------------------------------------------------------

class TableDefinition : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.cloud.bigquery.logging.v1.TableDefinition) */ {
 public:
  TableDefinition();
  virtual ~TableDefinition();

  TableDefinition(const TableDefinition& from);

  inline TableDefinition& operator=(const TableDefinition& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TableDefinition(TableDefinition&& from) noexcept
    : TableDefinition() {
    *this = ::std::move(from);
  }

  inline TableDefinition& operator=(TableDefinition&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const TableDefinition& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TableDefinition* internal_default_instance() {
    return reinterpret_cast<const TableDefinition*>(
               &_TableDefinition_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    32;

  void Swap(TableDefinition* other);
  friend void swap(TableDefinition& a, TableDefinition& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TableDefinition* New() const PROTOBUF_FINAL { return New(NULL); }

  TableDefinition* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const TableDefinition& from);
  void MergeFrom(const TableDefinition& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TableDefinition* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string source_uris = 2;
  int source_uris_size() const;
  void clear_source_uris();
  static const int kSourceUrisFieldNumber = 2;
  const ::std::string& source_uris(int index) const;
  ::std::string* mutable_source_uris(int index);
  void set_source_uris(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_source_uris(int index, ::std::string&& value);
  #endif
  void set_source_uris(int index, const char* value);
  void set_source_uris(int index, const char* value, size_t size);
  ::std::string* add_source_uris();
  void add_source_uris(const ::std::string& value);
  #if LANG_CXX11
  void add_source_uris(::std::string&& value);
  #endif
  void add_source_uris(const char* value);
  void add_source_uris(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& source_uris() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_source_uris();

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:google.cloud.bigquery.logging.v1.TableDefinition)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> source_uris_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fcloud_2fbigquery_2flogging_2fv1_2faudit_5fdata_2eproto::TableStruct;
  friend void ::protobuf_google_2fcloud_2fbigquery_2flogging_2fv1_2faudit_5fdata_2eproto::InitDefaultsTableDefinitionImpl();
};
// -------------------------------------------------------------------

class JobStatus : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.cloud.bigquery.logging.v1.JobStatus) */ {
 public:
  JobStatus();
  virtual ~JobStatus();

  JobStatus(const JobStatus& from);

  inline JobStatus& operator=(const JobStatus& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  JobStatus(JobStatus&& from) noexcept
    : JobStatus() {
    *this = ::std::move(from);
  }

  inline JobStatus& operator=(JobStatus&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const JobStatus& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const JobStatus* internal_default_instance() {
    return reinterpret_cast<const JobStatus*>(
               &_JobStatus_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    33;

  void Swap(JobStatus* other);
  friend void swap(JobStatus& a, JobStatus& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline JobStatus* New() const PROTOBUF_FINAL { return New(NULL); }

  JobStatus* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const JobStatus& from);
  void MergeFrom(const JobStatus& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(JobStatus* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string state = 1;
  void clear_state();
  static const int kStateFieldNumber = 1;
  const ::std::string& state() const;
  void set_state(const ::std::string& value);
  #if LANG_CXX11
  void set_state(::std::string&& value);
  #endif
  void set_state(const char* value);
  void set_state(const char* value, size_t size);
  ::std::string* mutable_state();
  ::std::string* release_state();
  void set_allocated_state(::std::string* state);

  // .google.rpc.Status error = 2;
  bool has_error() const;
  void clear_error();
  static const int kErrorFieldNumber = 2;
  const ::google::rpc::Status& error() const;
  ::google::rpc::Status* release_error();
  ::google::rpc::Status* mutable_error();
  void set_allocated_error(::google::rpc::Status* error);

  // @@protoc_insertion_point(class_scope:google.cloud.bigquery.logging.v1.JobStatus)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr state_;
  ::google::rpc::Status* error_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fcloud_2fbigquery_2flogging_2fv1_2faudit_5fdata_2eproto::TableStruct;
  friend void ::protobuf_google_2fcloud_2fbigquery_2flogging_2fv1_2faudit_5fdata_2eproto::InitDefaultsJobStatusImpl();
};
// -------------------------------------------------------------------

class JobStatistics : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.cloud.bigquery.logging.v1.JobStatistics) */ {
 public:
  JobStatistics();
  virtual ~JobStatistics();

  JobStatistics(const JobStatistics& from);

  inline JobStatistics& operator=(const JobStatistics& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  JobStatistics(JobStatistics&& from) noexcept
    : JobStatistics() {
    *this = ::std::move(from);
  }

  inline JobStatistics& operator=(JobStatistics&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const JobStatistics& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const JobStatistics* internal_default_instance() {
    return reinterpret_cast<const JobStatistics*>(
               &_JobStatistics_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    34;

  void Swap(JobStatistics* other);
  friend void swap(JobStatistics& a, JobStatistics& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline JobStatistics* New() const PROTOBUF_FINAL { return New(NULL); }

  JobStatistics* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const JobStatistics& from);
  void MergeFrom(const JobStatistics& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(JobStatistics* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.protobuf.Timestamp create_time = 1;
  bool has_create_time() const;
  void clear_create_time();
  static const int kCreateTimeFieldNumber = 1;
  const ::google::protobuf::Timestamp& create_time() const;
  ::google::protobuf::Timestamp* release_create_time();
  ::google::protobuf::Timestamp* mutable_create_time();
  void set_allocated_create_time(::google::protobuf::Timestamp* create_time);

  // .google.protobuf.Timestamp start_time = 2;
  bool has_start_time() const;
  void clear_start_time();
  static const int kStartTimeFieldNumber = 2;
  const ::google::protobuf::Timestamp& start_time() const;
  ::google::protobuf::Timestamp* release_start_time();
  ::google::protobuf::Timestamp* mutable_start_time();
  void set_allocated_start_time(::google::protobuf::Timestamp* start_time);

  // .google.protobuf.Timestamp end_time = 3;
  bool has_end_time() const;
  void clear_end_time();
  static const int kEndTimeFieldNumber = 3;
  const ::google::protobuf::Timestamp& end_time() const;
  ::google::protobuf::Timestamp* release_end_time();
  ::google::protobuf::Timestamp* mutable_end_time();
  void set_allocated_end_time(::google::protobuf::Timestamp* end_time);

  // int64 total_processed_bytes = 4;
  void clear_total_processed_bytes();
  static const int kTotalProcessedBytesFieldNumber = 4;
  ::google::protobuf::int64 total_processed_bytes() const;
  void set_total_processed_bytes(::google::protobuf::int64 value);

  // int64 total_billed_bytes = 5;
  void clear_total_billed_bytes();
  static const int kTotalBilledBytesFieldNumber = 5;
  ::google::protobuf::int64 total_billed_bytes() const;
  void set_total_billed_bytes(::google::protobuf::int64 value);

  // int32 billing_tier = 7;
  void clear_billing_tier();
  static const int kBillingTierFieldNumber = 7;
  ::google::protobuf::int32 billing_tier() const;
  void set_billing_tier(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:google.cloud.bigquery.logging.v1.JobStatistics)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::Timestamp* create_time_;
  ::google::protobuf::Timestamp* start_time_;
  ::google::protobuf::Timestamp* end_time_;
  ::google::protobuf::int64 total_processed_bytes_;
  ::google::protobuf::int64 total_billed_bytes_;
  ::google::protobuf::int32 billing_tier_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fcloud_2fbigquery_2flogging_2fv1_2faudit_5fdata_2eproto::TableStruct;
  friend void ::protobuf_google_2fcloud_2fbigquery_2flogging_2fv1_2faudit_5fdata_2eproto::InitDefaultsJobStatisticsImpl();
};
// -------------------------------------------------------------------

class DatasetName : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.cloud.bigquery.logging.v1.DatasetName) */ {
 public:
  DatasetName();
  virtual ~DatasetName();

  DatasetName(const DatasetName& from);

  inline DatasetName& operator=(const DatasetName& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DatasetName(DatasetName&& from) noexcept
    : DatasetName() {
    *this = ::std::move(from);
  }

  inline DatasetName& operator=(DatasetName&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DatasetName& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DatasetName* internal_default_instance() {
    return reinterpret_cast<const DatasetName*>(
               &_DatasetName_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    35;

  void Swap(DatasetName* other);
  friend void swap(DatasetName& a, DatasetName& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DatasetName* New() const PROTOBUF_FINAL { return New(NULL); }

  DatasetName* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DatasetName& from);
  void MergeFrom(const DatasetName& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DatasetName* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string project_id = 1;
  void clear_project_id();
  static const int kProjectIdFieldNumber = 1;
  const ::std::string& project_id() const;
  void set_project_id(const ::std::string& value);
  #if LANG_CXX11
  void set_project_id(::std::string&& value);
  #endif
  void set_project_id(const char* value);
  void set_project_id(const char* value, size_t size);
  ::std::string* mutable_project_id();
  ::std::string* release_project_id();
  void set_allocated_project_id(::std::string* project_id);

  // string dataset_id = 2;
  void clear_dataset_id();
  static const int kDatasetIdFieldNumber = 2;
  const ::std::string& dataset_id() const;
  void set_dataset_id(const ::std::string& value);
  #if LANG_CXX11
  void set_dataset_id(::std::string&& value);
  #endif
  void set_dataset_id(const char* value);
  void set_dataset_id(const char* value, size_t size);
  ::std::string* mutable_dataset_id();
  ::std::string* release_dataset_id();
  void set_allocated_dataset_id(::std::string* dataset_id);

  // @@protoc_insertion_point(class_scope:google.cloud.bigquery.logging.v1.DatasetName)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr project_id_;
  ::google::protobuf::internal::ArenaStringPtr dataset_id_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fcloud_2fbigquery_2flogging_2fv1_2faudit_5fdata_2eproto::TableStruct;
  friend void ::protobuf_google_2fcloud_2fbigquery_2flogging_2fv1_2faudit_5fdata_2eproto::InitDefaultsDatasetNameImpl();
};
// -------------------------------------------------------------------

class TableName : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.cloud.bigquery.logging.v1.TableName) */ {
 public:
  TableName();
  virtual ~TableName();

  TableName(const TableName& from);

  inline TableName& operator=(const TableName& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TableName(TableName&& from) noexcept
    : TableName() {
    *this = ::std::move(from);
  }

  inline TableName& operator=(TableName&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const TableName& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TableName* internal_default_instance() {
    return reinterpret_cast<const TableName*>(
               &_TableName_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    36;

  void Swap(TableName* other);
  friend void swap(TableName& a, TableName& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TableName* New() const PROTOBUF_FINAL { return New(NULL); }

  TableName* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const TableName& from);
  void MergeFrom(const TableName& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TableName* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string project_id = 1;
  void clear_project_id();
  static const int kProjectIdFieldNumber = 1;
  const ::std::string& project_id() const;
  void set_project_id(const ::std::string& value);
  #if LANG_CXX11
  void set_project_id(::std::string&& value);
  #endif
  void set_project_id(const char* value);
  void set_project_id(const char* value, size_t size);
  ::std::string* mutable_project_id();
  ::std::string* release_project_id();
  void set_allocated_project_id(::std::string* project_id);

  // string dataset_id = 2;
  void clear_dataset_id();
  static const int kDatasetIdFieldNumber = 2;
  const ::std::string& dataset_id() const;
  void set_dataset_id(const ::std::string& value);
  #if LANG_CXX11
  void set_dataset_id(::std::string&& value);
  #endif
  void set_dataset_id(const char* value);
  void set_dataset_id(const char* value, size_t size);
  ::std::string* mutable_dataset_id();
  ::std::string* release_dataset_id();
  void set_allocated_dataset_id(::std::string* dataset_id);

  // string table_id = 3;
  void clear_table_id();
  static const int kTableIdFieldNumber = 3;
  const ::std::string& table_id() const;
  void set_table_id(const ::std::string& value);
  #if LANG_CXX11
  void set_table_id(::std::string&& value);
  #endif
  void set_table_id(const char* value);
  void set_table_id(const char* value, size_t size);
  ::std::string* mutable_table_id();
  ::std::string* release_table_id();
  void set_allocated_table_id(::std::string* table_id);

  // @@protoc_insertion_point(class_scope:google.cloud.bigquery.logging.v1.TableName)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr project_id_;
  ::google::protobuf::internal::ArenaStringPtr dataset_id_;
  ::google::protobuf::internal::ArenaStringPtr table_id_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fcloud_2fbigquery_2flogging_2fv1_2faudit_5fdata_2eproto::TableStruct;
  friend void ::protobuf_google_2fcloud_2fbigquery_2flogging_2fv1_2faudit_5fdata_2eproto::InitDefaultsTableNameImpl();
};
// -------------------------------------------------------------------

class JobName : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.cloud.bigquery.logging.v1.JobName) */ {
 public:
  JobName();
  virtual ~JobName();

  JobName(const JobName& from);

  inline JobName& operator=(const JobName& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  JobName(JobName&& from) noexcept
    : JobName() {
    *this = ::std::move(from);
  }

  inline JobName& operator=(JobName&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const JobName& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const JobName* internal_default_instance() {
    return reinterpret_cast<const JobName*>(
               &_JobName_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    37;

  void Swap(JobName* other);
  friend void swap(JobName& a, JobName& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline JobName* New() const PROTOBUF_FINAL { return New(NULL); }

  JobName* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const JobName& from);
  void MergeFrom(const JobName& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(JobName* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string project_id = 1;
  void clear_project_id();
  static const int kProjectIdFieldNumber = 1;
  const ::std::string& project_id() const;
  void set_project_id(const ::std::string& value);
  #if LANG_CXX11
  void set_project_id(::std::string&& value);
  #endif
  void set_project_id(const char* value);
  void set_project_id(const char* value, size_t size);
  ::std::string* mutable_project_id();
  ::std::string* release_project_id();
  void set_allocated_project_id(::std::string* project_id);

  // string job_id = 2;
  void clear_job_id();
  static const int kJobIdFieldNumber = 2;
  const ::std::string& job_id() const;
  void set_job_id(const ::std::string& value);
  #if LANG_CXX11
  void set_job_id(::std::string&& value);
  #endif
  void set_job_id(const char* value);
  void set_job_id(const char* value, size_t size);
  ::std::string* mutable_job_id();
  ::std::string* release_job_id();
  void set_allocated_job_id(::std::string* job_id);

  // @@protoc_insertion_point(class_scope:google.cloud.bigquery.logging.v1.JobName)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr project_id_;
  ::google::protobuf::internal::ArenaStringPtr job_id_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fcloud_2fbigquery_2flogging_2fv1_2faudit_5fdata_2eproto::TableStruct;
  friend void ::protobuf_google_2fcloud_2fbigquery_2flogging_2fv1_2faudit_5fdata_2eproto::InitDefaultsJobNameImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// AuditData

// .google.cloud.bigquery.logging.v1.TableInsertRequest table_insert_request = 1;
inline bool AuditData::has_table_insert_request() const {
  return request_case() == kTableInsertRequest;
}
inline void AuditData::set_has_table_insert_request() {
  _oneof_case_[0] = kTableInsertRequest;
}
inline void AuditData::clear_table_insert_request() {
  if (has_table_insert_request()) {
    delete request_.table_insert_request_;
    clear_has_request();
  }
}
inline ::google::cloud::bigquery::logging::v1::TableInsertRequest* AuditData::release_table_insert_request() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.logging.v1.AuditData.table_insert_request)
  if (has_table_insert_request()) {
    clear_has_request();
      ::google::cloud::bigquery::logging::v1::TableInsertRequest* temp = request_.table_insert_request_;
    request_.table_insert_request_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::cloud::bigquery::logging::v1::TableInsertRequest& AuditData::table_insert_request() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.logging.v1.AuditData.table_insert_request)
  return has_table_insert_request()
      ? *request_.table_insert_request_
      : *reinterpret_cast< ::google::cloud::bigquery::logging::v1::TableInsertRequest*>(&::google::cloud::bigquery::logging::v1::_TableInsertRequest_default_instance_);
}
inline ::google::cloud::bigquery::logging::v1::TableInsertRequest* AuditData::mutable_table_insert_request() {
  if (!has_table_insert_request()) {
    clear_request();
    set_has_table_insert_request();
    request_.table_insert_request_ = new ::google::cloud::bigquery::logging::v1::TableInsertRequest;
  }
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.logging.v1.AuditData.table_insert_request)
  return request_.table_insert_request_;
}

// .google.cloud.bigquery.logging.v1.TableUpdateRequest table_update_request = 16;
inline bool AuditData::has_table_update_request() const {
  return request_case() == kTableUpdateRequest;
}
inline void AuditData::set_has_table_update_request() {
  _oneof_case_[0] = kTableUpdateRequest;
}
inline void AuditData::clear_table_update_request() {
  if (has_table_update_request()) {
    delete request_.table_update_request_;
    clear_has_request();
  }
}
inline ::google::cloud::bigquery::logging::v1::TableUpdateRequest* AuditData::release_table_update_request() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.logging.v1.AuditData.table_update_request)
  if (has_table_update_request()) {
    clear_has_request();
      ::google::cloud::bigquery::logging::v1::TableUpdateRequest* temp = request_.table_update_request_;
    request_.table_update_request_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::cloud::bigquery::logging::v1::TableUpdateRequest& AuditData::table_update_request() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.logging.v1.AuditData.table_update_request)
  return has_table_update_request()
      ? *request_.table_update_request_
      : *reinterpret_cast< ::google::cloud::bigquery::logging::v1::TableUpdateRequest*>(&::google::cloud::bigquery::logging::v1::_TableUpdateRequest_default_instance_);
}
inline ::google::cloud::bigquery::logging::v1::TableUpdateRequest* AuditData::mutable_table_update_request() {
  if (!has_table_update_request()) {
    clear_request();
    set_has_table_update_request();
    request_.table_update_request_ = new ::google::cloud::bigquery::logging::v1::TableUpdateRequest;
  }
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.logging.v1.AuditData.table_update_request)
  return request_.table_update_request_;
}

// .google.cloud.bigquery.logging.v1.DatasetListRequest dataset_list_request = 2;
inline bool AuditData::has_dataset_list_request() const {
  return request_case() == kDatasetListRequest;
}
inline void AuditData::set_has_dataset_list_request() {
  _oneof_case_[0] = kDatasetListRequest;
}
inline void AuditData::clear_dataset_list_request() {
  if (has_dataset_list_request()) {
    delete request_.dataset_list_request_;
    clear_has_request();
  }
}
inline ::google::cloud::bigquery::logging::v1::DatasetListRequest* AuditData::release_dataset_list_request() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.logging.v1.AuditData.dataset_list_request)
  if (has_dataset_list_request()) {
    clear_has_request();
      ::google::cloud::bigquery::logging::v1::DatasetListRequest* temp = request_.dataset_list_request_;
    request_.dataset_list_request_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::cloud::bigquery::logging::v1::DatasetListRequest& AuditData::dataset_list_request() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.logging.v1.AuditData.dataset_list_request)
  return has_dataset_list_request()
      ? *request_.dataset_list_request_
      : *reinterpret_cast< ::google::cloud::bigquery::logging::v1::DatasetListRequest*>(&::google::cloud::bigquery::logging::v1::_DatasetListRequest_default_instance_);
}
inline ::google::cloud::bigquery::logging::v1::DatasetListRequest* AuditData::mutable_dataset_list_request() {
  if (!has_dataset_list_request()) {
    clear_request();
    set_has_dataset_list_request();
    request_.dataset_list_request_ = new ::google::cloud::bigquery::logging::v1::DatasetListRequest;
  }
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.logging.v1.AuditData.dataset_list_request)
  return request_.dataset_list_request_;
}

// .google.cloud.bigquery.logging.v1.DatasetInsertRequest dataset_insert_request = 3;
inline bool AuditData::has_dataset_insert_request() const {
  return request_case() == kDatasetInsertRequest;
}
inline void AuditData::set_has_dataset_insert_request() {
  _oneof_case_[0] = kDatasetInsertRequest;
}
inline void AuditData::clear_dataset_insert_request() {
  if (has_dataset_insert_request()) {
    delete request_.dataset_insert_request_;
    clear_has_request();
  }
}
inline ::google::cloud::bigquery::logging::v1::DatasetInsertRequest* AuditData::release_dataset_insert_request() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.logging.v1.AuditData.dataset_insert_request)
  if (has_dataset_insert_request()) {
    clear_has_request();
      ::google::cloud::bigquery::logging::v1::DatasetInsertRequest* temp = request_.dataset_insert_request_;
    request_.dataset_insert_request_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::cloud::bigquery::logging::v1::DatasetInsertRequest& AuditData::dataset_insert_request() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.logging.v1.AuditData.dataset_insert_request)
  return has_dataset_insert_request()
      ? *request_.dataset_insert_request_
      : *reinterpret_cast< ::google::cloud::bigquery::logging::v1::DatasetInsertRequest*>(&::google::cloud::bigquery::logging::v1::_DatasetInsertRequest_default_instance_);
}
inline ::google::cloud::bigquery::logging::v1::DatasetInsertRequest* AuditData::mutable_dataset_insert_request() {
  if (!has_dataset_insert_request()) {
    clear_request();
    set_has_dataset_insert_request();
    request_.dataset_insert_request_ = new ::google::cloud::bigquery::logging::v1::DatasetInsertRequest;
  }
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.logging.v1.AuditData.dataset_insert_request)
  return request_.dataset_insert_request_;
}

// .google.cloud.bigquery.logging.v1.DatasetUpdateRequest dataset_update_request = 4;
inline bool AuditData::has_dataset_update_request() const {
  return request_case() == kDatasetUpdateRequest;
}
inline void AuditData::set_has_dataset_update_request() {
  _oneof_case_[0] = kDatasetUpdateRequest;
}
inline void AuditData::clear_dataset_update_request() {
  if (has_dataset_update_request()) {
    delete request_.dataset_update_request_;
    clear_has_request();
  }
}
inline ::google::cloud::bigquery::logging::v1::DatasetUpdateRequest* AuditData::release_dataset_update_request() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.logging.v1.AuditData.dataset_update_request)
  if (has_dataset_update_request()) {
    clear_has_request();
      ::google::cloud::bigquery::logging::v1::DatasetUpdateRequest* temp = request_.dataset_update_request_;
    request_.dataset_update_request_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::cloud::bigquery::logging::v1::DatasetUpdateRequest& AuditData::dataset_update_request() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.logging.v1.AuditData.dataset_update_request)
  return has_dataset_update_request()
      ? *request_.dataset_update_request_
      : *reinterpret_cast< ::google::cloud::bigquery::logging::v1::DatasetUpdateRequest*>(&::google::cloud::bigquery::logging::v1::_DatasetUpdateRequest_default_instance_);
}
inline ::google::cloud::bigquery::logging::v1::DatasetUpdateRequest* AuditData::mutable_dataset_update_request() {
  if (!has_dataset_update_request()) {
    clear_request();
    set_has_dataset_update_request();
    request_.dataset_update_request_ = new ::google::cloud::bigquery::logging::v1::DatasetUpdateRequest;
  }
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.logging.v1.AuditData.dataset_update_request)
  return request_.dataset_update_request_;
}

// .google.cloud.bigquery.logging.v1.JobInsertRequest job_insert_request = 5;
inline bool AuditData::has_job_insert_request() const {
  return request_case() == kJobInsertRequest;
}
inline void AuditData::set_has_job_insert_request() {
  _oneof_case_[0] = kJobInsertRequest;
}
inline void AuditData::clear_job_insert_request() {
  if (has_job_insert_request()) {
    delete request_.job_insert_request_;
    clear_has_request();
  }
}
inline ::google::cloud::bigquery::logging::v1::JobInsertRequest* AuditData::release_job_insert_request() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.logging.v1.AuditData.job_insert_request)
  if (has_job_insert_request()) {
    clear_has_request();
      ::google::cloud::bigquery::logging::v1::JobInsertRequest* temp = request_.job_insert_request_;
    request_.job_insert_request_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::cloud::bigquery::logging::v1::JobInsertRequest& AuditData::job_insert_request() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.logging.v1.AuditData.job_insert_request)
  return has_job_insert_request()
      ? *request_.job_insert_request_
      : *reinterpret_cast< ::google::cloud::bigquery::logging::v1::JobInsertRequest*>(&::google::cloud::bigquery::logging::v1::_JobInsertRequest_default_instance_);
}
inline ::google::cloud::bigquery::logging::v1::JobInsertRequest* AuditData::mutable_job_insert_request() {
  if (!has_job_insert_request()) {
    clear_request();
    set_has_job_insert_request();
    request_.job_insert_request_ = new ::google::cloud::bigquery::logging::v1::JobInsertRequest;
  }
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.logging.v1.AuditData.job_insert_request)
  return request_.job_insert_request_;
}

// .google.cloud.bigquery.logging.v1.JobQueryRequest job_query_request = 6;
inline bool AuditData::has_job_query_request() const {
  return request_case() == kJobQueryRequest;
}
inline void AuditData::set_has_job_query_request() {
  _oneof_case_[0] = kJobQueryRequest;
}
inline void AuditData::clear_job_query_request() {
  if (has_job_query_request()) {
    delete request_.job_query_request_;
    clear_has_request();
  }
}
inline ::google::cloud::bigquery::logging::v1::JobQueryRequest* AuditData::release_job_query_request() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.logging.v1.AuditData.job_query_request)
  if (has_job_query_request()) {
    clear_has_request();
      ::google::cloud::bigquery::logging::v1::JobQueryRequest* temp = request_.job_query_request_;
    request_.job_query_request_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::cloud::bigquery::logging::v1::JobQueryRequest& AuditData::job_query_request() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.logging.v1.AuditData.job_query_request)
  return has_job_query_request()
      ? *request_.job_query_request_
      : *reinterpret_cast< ::google::cloud::bigquery::logging::v1::JobQueryRequest*>(&::google::cloud::bigquery::logging::v1::_JobQueryRequest_default_instance_);
}
inline ::google::cloud::bigquery::logging::v1::JobQueryRequest* AuditData::mutable_job_query_request() {
  if (!has_job_query_request()) {
    clear_request();
    set_has_job_query_request();
    request_.job_query_request_ = new ::google::cloud::bigquery::logging::v1::JobQueryRequest;
  }
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.logging.v1.AuditData.job_query_request)
  return request_.job_query_request_;
}

// .google.cloud.bigquery.logging.v1.JobGetQueryResultsRequest job_get_query_results_request = 7;
inline bool AuditData::has_job_get_query_results_request() const {
  return request_case() == kJobGetQueryResultsRequest;
}
inline void AuditData::set_has_job_get_query_results_request() {
  _oneof_case_[0] = kJobGetQueryResultsRequest;
}
inline void AuditData::clear_job_get_query_results_request() {
  if (has_job_get_query_results_request()) {
    delete request_.job_get_query_results_request_;
    clear_has_request();
  }
}
inline ::google::cloud::bigquery::logging::v1::JobGetQueryResultsRequest* AuditData::release_job_get_query_results_request() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.logging.v1.AuditData.job_get_query_results_request)
  if (has_job_get_query_results_request()) {
    clear_has_request();
      ::google::cloud::bigquery::logging::v1::JobGetQueryResultsRequest* temp = request_.job_get_query_results_request_;
    request_.job_get_query_results_request_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::cloud::bigquery::logging::v1::JobGetQueryResultsRequest& AuditData::job_get_query_results_request() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.logging.v1.AuditData.job_get_query_results_request)
  return has_job_get_query_results_request()
      ? *request_.job_get_query_results_request_
      : *reinterpret_cast< ::google::cloud::bigquery::logging::v1::JobGetQueryResultsRequest*>(&::google::cloud::bigquery::logging::v1::_JobGetQueryResultsRequest_default_instance_);
}
inline ::google::cloud::bigquery::logging::v1::JobGetQueryResultsRequest* AuditData::mutable_job_get_query_results_request() {
  if (!has_job_get_query_results_request()) {
    clear_request();
    set_has_job_get_query_results_request();
    request_.job_get_query_results_request_ = new ::google::cloud::bigquery::logging::v1::JobGetQueryResultsRequest;
  }
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.logging.v1.AuditData.job_get_query_results_request)
  return request_.job_get_query_results_request_;
}

// .google.cloud.bigquery.logging.v1.TableDataListRequest table_data_list_request = 8;
inline bool AuditData::has_table_data_list_request() const {
  return request_case() == kTableDataListRequest;
}
inline void AuditData::set_has_table_data_list_request() {
  _oneof_case_[0] = kTableDataListRequest;
}
inline void AuditData::clear_table_data_list_request() {
  if (has_table_data_list_request()) {
    delete request_.table_data_list_request_;
    clear_has_request();
  }
}
inline ::google::cloud::bigquery::logging::v1::TableDataListRequest* AuditData::release_table_data_list_request() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.logging.v1.AuditData.table_data_list_request)
  if (has_table_data_list_request()) {
    clear_has_request();
      ::google::cloud::bigquery::logging::v1::TableDataListRequest* temp = request_.table_data_list_request_;
    request_.table_data_list_request_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::cloud::bigquery::logging::v1::TableDataListRequest& AuditData::table_data_list_request() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.logging.v1.AuditData.table_data_list_request)
  return has_table_data_list_request()
      ? *request_.table_data_list_request_
      : *reinterpret_cast< ::google::cloud::bigquery::logging::v1::TableDataListRequest*>(&::google::cloud::bigquery::logging::v1::_TableDataListRequest_default_instance_);
}
inline ::google::cloud::bigquery::logging::v1::TableDataListRequest* AuditData::mutable_table_data_list_request() {
  if (!has_table_data_list_request()) {
    clear_request();
    set_has_table_data_list_request();
    request_.table_data_list_request_ = new ::google::cloud::bigquery::logging::v1::TableDataListRequest;
  }
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.logging.v1.AuditData.table_data_list_request)
  return request_.table_data_list_request_;
}

// .google.cloud.bigquery.logging.v1.TableInsertResponse table_insert_response = 9;
inline bool AuditData::has_table_insert_response() const {
  return response_case() == kTableInsertResponse;
}
inline void AuditData::set_has_table_insert_response() {
  _oneof_case_[1] = kTableInsertResponse;
}
inline void AuditData::clear_table_insert_response() {
  if (has_table_insert_response()) {
    delete response_.table_insert_response_;
    clear_has_response();
  }
}
inline ::google::cloud::bigquery::logging::v1::TableInsertResponse* AuditData::release_table_insert_response() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.logging.v1.AuditData.table_insert_response)
  if (has_table_insert_response()) {
    clear_has_response();
      ::google::cloud::bigquery::logging::v1::TableInsertResponse* temp = response_.table_insert_response_;
    response_.table_insert_response_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::cloud::bigquery::logging::v1::TableInsertResponse& AuditData::table_insert_response() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.logging.v1.AuditData.table_insert_response)
  return has_table_insert_response()
      ? *response_.table_insert_response_
      : *reinterpret_cast< ::google::cloud::bigquery::logging::v1::TableInsertResponse*>(&::google::cloud::bigquery::logging::v1::_TableInsertResponse_default_instance_);
}
inline ::google::cloud::bigquery::logging::v1::TableInsertResponse* AuditData::mutable_table_insert_response() {
  if (!has_table_insert_response()) {
    clear_response();
    set_has_table_insert_response();
    response_.table_insert_response_ = new ::google::cloud::bigquery::logging::v1::TableInsertResponse;
  }
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.logging.v1.AuditData.table_insert_response)
  return response_.table_insert_response_;
}

// .google.cloud.bigquery.logging.v1.TableUpdateResponse table_update_response = 10;
inline bool AuditData::has_table_update_response() const {
  return response_case() == kTableUpdateResponse;
}
inline void AuditData::set_has_table_update_response() {
  _oneof_case_[1] = kTableUpdateResponse;
}
inline void AuditData::clear_table_update_response() {
  if (has_table_update_response()) {
    delete response_.table_update_response_;
    clear_has_response();
  }
}
inline ::google::cloud::bigquery::logging::v1::TableUpdateResponse* AuditData::release_table_update_response() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.logging.v1.AuditData.table_update_response)
  if (has_table_update_response()) {
    clear_has_response();
      ::google::cloud::bigquery::logging::v1::TableUpdateResponse* temp = response_.table_update_response_;
    response_.table_update_response_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::cloud::bigquery::logging::v1::TableUpdateResponse& AuditData::table_update_response() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.logging.v1.AuditData.table_update_response)
  return has_table_update_response()
      ? *response_.table_update_response_
      : *reinterpret_cast< ::google::cloud::bigquery::logging::v1::TableUpdateResponse*>(&::google::cloud::bigquery::logging::v1::_TableUpdateResponse_default_instance_);
}
inline ::google::cloud::bigquery::logging::v1::TableUpdateResponse* AuditData::mutable_table_update_response() {
  if (!has_table_update_response()) {
    clear_response();
    set_has_table_update_response();
    response_.table_update_response_ = new ::google::cloud::bigquery::logging::v1::TableUpdateResponse;
  }
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.logging.v1.AuditData.table_update_response)
  return response_.table_update_response_;
}

// .google.cloud.bigquery.logging.v1.DatasetInsertResponse dataset_insert_response = 11;
inline bool AuditData::has_dataset_insert_response() const {
  return response_case() == kDatasetInsertResponse;
}
inline void AuditData::set_has_dataset_insert_response() {
  _oneof_case_[1] = kDatasetInsertResponse;
}
inline void AuditData::clear_dataset_insert_response() {
  if (has_dataset_insert_response()) {
    delete response_.dataset_insert_response_;
    clear_has_response();
  }
}
inline ::google::cloud::bigquery::logging::v1::DatasetInsertResponse* AuditData::release_dataset_insert_response() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.logging.v1.AuditData.dataset_insert_response)
  if (has_dataset_insert_response()) {
    clear_has_response();
      ::google::cloud::bigquery::logging::v1::DatasetInsertResponse* temp = response_.dataset_insert_response_;
    response_.dataset_insert_response_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::cloud::bigquery::logging::v1::DatasetInsertResponse& AuditData::dataset_insert_response() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.logging.v1.AuditData.dataset_insert_response)
  return has_dataset_insert_response()
      ? *response_.dataset_insert_response_
      : *reinterpret_cast< ::google::cloud::bigquery::logging::v1::DatasetInsertResponse*>(&::google::cloud::bigquery::logging::v1::_DatasetInsertResponse_default_instance_);
}
inline ::google::cloud::bigquery::logging::v1::DatasetInsertResponse* AuditData::mutable_dataset_insert_response() {
  if (!has_dataset_insert_response()) {
    clear_response();
    set_has_dataset_insert_response();
    response_.dataset_insert_response_ = new ::google::cloud::bigquery::logging::v1::DatasetInsertResponse;
  }
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.logging.v1.AuditData.dataset_insert_response)
  return response_.dataset_insert_response_;
}

// .google.cloud.bigquery.logging.v1.DatasetUpdateResponse dataset_update_response = 12;
inline bool AuditData::has_dataset_update_response() const {
  return response_case() == kDatasetUpdateResponse;
}
inline void AuditData::set_has_dataset_update_response() {
  _oneof_case_[1] = kDatasetUpdateResponse;
}
inline void AuditData::clear_dataset_update_response() {
  if (has_dataset_update_response()) {
    delete response_.dataset_update_response_;
    clear_has_response();
  }
}
inline ::google::cloud::bigquery::logging::v1::DatasetUpdateResponse* AuditData::release_dataset_update_response() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.logging.v1.AuditData.dataset_update_response)
  if (has_dataset_update_response()) {
    clear_has_response();
      ::google::cloud::bigquery::logging::v1::DatasetUpdateResponse* temp = response_.dataset_update_response_;
    response_.dataset_update_response_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::cloud::bigquery::logging::v1::DatasetUpdateResponse& AuditData::dataset_update_response() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.logging.v1.AuditData.dataset_update_response)
  return has_dataset_update_response()
      ? *response_.dataset_update_response_
      : *reinterpret_cast< ::google::cloud::bigquery::logging::v1::DatasetUpdateResponse*>(&::google::cloud::bigquery::logging::v1::_DatasetUpdateResponse_default_instance_);
}
inline ::google::cloud::bigquery::logging::v1::DatasetUpdateResponse* AuditData::mutable_dataset_update_response() {
  if (!has_dataset_update_response()) {
    clear_response();
    set_has_dataset_update_response();
    response_.dataset_update_response_ = new ::google::cloud::bigquery::logging::v1::DatasetUpdateResponse;
  }
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.logging.v1.AuditData.dataset_update_response)
  return response_.dataset_update_response_;
}

// .google.cloud.bigquery.logging.v1.JobInsertResponse job_insert_response = 18;
inline bool AuditData::has_job_insert_response() const {
  return response_case() == kJobInsertResponse;
}
inline void AuditData::set_has_job_insert_response() {
  _oneof_case_[1] = kJobInsertResponse;
}
inline void AuditData::clear_job_insert_response() {
  if (has_job_insert_response()) {
    delete response_.job_insert_response_;
    clear_has_response();
  }
}
inline ::google::cloud::bigquery::logging::v1::JobInsertResponse* AuditData::release_job_insert_response() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.logging.v1.AuditData.job_insert_response)
  if (has_job_insert_response()) {
    clear_has_response();
      ::google::cloud::bigquery::logging::v1::JobInsertResponse* temp = response_.job_insert_response_;
    response_.job_insert_response_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::cloud::bigquery::logging::v1::JobInsertResponse& AuditData::job_insert_response() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.logging.v1.AuditData.job_insert_response)
  return has_job_insert_response()
      ? *response_.job_insert_response_
      : *reinterpret_cast< ::google::cloud::bigquery::logging::v1::JobInsertResponse*>(&::google::cloud::bigquery::logging::v1::_JobInsertResponse_default_instance_);
}
inline ::google::cloud::bigquery::logging::v1::JobInsertResponse* AuditData::mutable_job_insert_response() {
  if (!has_job_insert_response()) {
    clear_response();
    set_has_job_insert_response();
    response_.job_insert_response_ = new ::google::cloud::bigquery::logging::v1::JobInsertResponse;
  }
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.logging.v1.AuditData.job_insert_response)
  return response_.job_insert_response_;
}

// .google.cloud.bigquery.logging.v1.JobQueryResponse job_query_response = 13;
inline bool AuditData::has_job_query_response() const {
  return response_case() == kJobQueryResponse;
}
inline void AuditData::set_has_job_query_response() {
  _oneof_case_[1] = kJobQueryResponse;
}
inline void AuditData::clear_job_query_response() {
  if (has_job_query_response()) {
    delete response_.job_query_response_;
    clear_has_response();
  }
}
inline ::google::cloud::bigquery::logging::v1::JobQueryResponse* AuditData::release_job_query_response() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.logging.v1.AuditData.job_query_response)
  if (has_job_query_response()) {
    clear_has_response();
      ::google::cloud::bigquery::logging::v1::JobQueryResponse* temp = response_.job_query_response_;
    response_.job_query_response_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::cloud::bigquery::logging::v1::JobQueryResponse& AuditData::job_query_response() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.logging.v1.AuditData.job_query_response)
  return has_job_query_response()
      ? *response_.job_query_response_
      : *reinterpret_cast< ::google::cloud::bigquery::logging::v1::JobQueryResponse*>(&::google::cloud::bigquery::logging::v1::_JobQueryResponse_default_instance_);
}
inline ::google::cloud::bigquery::logging::v1::JobQueryResponse* AuditData::mutable_job_query_response() {
  if (!has_job_query_response()) {
    clear_response();
    set_has_job_query_response();
    response_.job_query_response_ = new ::google::cloud::bigquery::logging::v1::JobQueryResponse;
  }
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.logging.v1.AuditData.job_query_response)
  return response_.job_query_response_;
}

// .google.cloud.bigquery.logging.v1.JobGetQueryResultsResponse job_get_query_results_response = 14;
inline bool AuditData::has_job_get_query_results_response() const {
  return response_case() == kJobGetQueryResultsResponse;
}
inline void AuditData::set_has_job_get_query_results_response() {
  _oneof_case_[1] = kJobGetQueryResultsResponse;
}
inline void AuditData::clear_job_get_query_results_response() {
  if (has_job_get_query_results_response()) {
    delete response_.job_get_query_results_response_;
    clear_has_response();
  }
}
inline ::google::cloud::bigquery::logging::v1::JobGetQueryResultsResponse* AuditData::release_job_get_query_results_response() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.logging.v1.AuditData.job_get_query_results_response)
  if (has_job_get_query_results_response()) {
    clear_has_response();
      ::google::cloud::bigquery::logging::v1::JobGetQueryResultsResponse* temp = response_.job_get_query_results_response_;
    response_.job_get_query_results_response_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::cloud::bigquery::logging::v1::JobGetQueryResultsResponse& AuditData::job_get_query_results_response() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.logging.v1.AuditData.job_get_query_results_response)
  return has_job_get_query_results_response()
      ? *response_.job_get_query_results_response_
      : *reinterpret_cast< ::google::cloud::bigquery::logging::v1::JobGetQueryResultsResponse*>(&::google::cloud::bigquery::logging::v1::_JobGetQueryResultsResponse_default_instance_);
}
inline ::google::cloud::bigquery::logging::v1::JobGetQueryResultsResponse* AuditData::mutable_job_get_query_results_response() {
  if (!has_job_get_query_results_response()) {
    clear_response();
    set_has_job_get_query_results_response();
    response_.job_get_query_results_response_ = new ::google::cloud::bigquery::logging::v1::JobGetQueryResultsResponse;
  }
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.logging.v1.AuditData.job_get_query_results_response)
  return response_.job_get_query_results_response_;
}

// .google.cloud.bigquery.logging.v1.JobQueryDoneResponse job_query_done_response = 15;
inline bool AuditData::has_job_query_done_response() const {
  return response_case() == kJobQueryDoneResponse;
}
inline void AuditData::set_has_job_query_done_response() {
  _oneof_case_[1] = kJobQueryDoneResponse;
}
inline void AuditData::clear_job_query_done_response() {
  if (has_job_query_done_response()) {
    delete response_.job_query_done_response_;
    clear_has_response();
  }
}
inline ::google::cloud::bigquery::logging::v1::JobQueryDoneResponse* AuditData::release_job_query_done_response() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.logging.v1.AuditData.job_query_done_response)
  if (has_job_query_done_response()) {
    clear_has_response();
      ::google::cloud::bigquery::logging::v1::JobQueryDoneResponse* temp = response_.job_query_done_response_;
    response_.job_query_done_response_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::cloud::bigquery::logging::v1::JobQueryDoneResponse& AuditData::job_query_done_response() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.logging.v1.AuditData.job_query_done_response)
  return has_job_query_done_response()
      ? *response_.job_query_done_response_
      : *reinterpret_cast< ::google::cloud::bigquery::logging::v1::JobQueryDoneResponse*>(&::google::cloud::bigquery::logging::v1::_JobQueryDoneResponse_default_instance_);
}
inline ::google::cloud::bigquery::logging::v1::JobQueryDoneResponse* AuditData::mutable_job_query_done_response() {
  if (!has_job_query_done_response()) {
    clear_response();
    set_has_job_query_done_response();
    response_.job_query_done_response_ = new ::google::cloud::bigquery::logging::v1::JobQueryDoneResponse;
  }
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.logging.v1.AuditData.job_query_done_response)
  return response_.job_query_done_response_;
}

// .google.cloud.bigquery.logging.v1.JobCompletedEvent job_completed_event = 17;
inline bool AuditData::has_job_completed_event() const {
  return this != internal_default_instance() && job_completed_event_ != NULL;
}
inline void AuditData::clear_job_completed_event() {
  if (GetArenaNoVirtual() == NULL && job_completed_event_ != NULL) {
    delete job_completed_event_;
  }
  job_completed_event_ = NULL;
}
inline const ::google::cloud::bigquery::logging::v1::JobCompletedEvent& AuditData::job_completed_event() const {
  const ::google::cloud::bigquery::logging::v1::JobCompletedEvent* p = job_completed_event_;
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.logging.v1.AuditData.job_completed_event)
  return p != NULL ? *p : *reinterpret_cast<const ::google::cloud::bigquery::logging::v1::JobCompletedEvent*>(
      &::google::cloud::bigquery::logging::v1::_JobCompletedEvent_default_instance_);
}
inline ::google::cloud::bigquery::logging::v1::JobCompletedEvent* AuditData::release_job_completed_event() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.logging.v1.AuditData.job_completed_event)
  
  ::google::cloud::bigquery::logging::v1::JobCompletedEvent* temp = job_completed_event_;
  job_completed_event_ = NULL;
  return temp;
}
inline ::google::cloud::bigquery::logging::v1::JobCompletedEvent* AuditData::mutable_job_completed_event() {
  
  if (job_completed_event_ == NULL) {
    job_completed_event_ = new ::google::cloud::bigquery::logging::v1::JobCompletedEvent;
  }
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.logging.v1.AuditData.job_completed_event)
  return job_completed_event_;
}
inline void AuditData::set_allocated_job_completed_event(::google::cloud::bigquery::logging::v1::JobCompletedEvent* job_completed_event) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete job_completed_event_;
  }
  if (job_completed_event) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      job_completed_event = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, job_completed_event, submessage_arena);
    }
    
  } else {
    
  }
  job_completed_event_ = job_completed_event;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.logging.v1.AuditData.job_completed_event)
}

inline bool AuditData::has_request() const {
  return request_case() != REQUEST_NOT_SET;
}
inline void AuditData::clear_has_request() {
  _oneof_case_[0] = REQUEST_NOT_SET;
}
inline bool AuditData::has_response() const {
  return response_case() != RESPONSE_NOT_SET;
}
inline void AuditData::clear_has_response() {
  _oneof_case_[1] = RESPONSE_NOT_SET;
}
inline AuditData::RequestCase AuditData::request_case() const {
  return AuditData::RequestCase(_oneof_case_[0]);
}
inline AuditData::ResponseCase AuditData::response_case() const {
  return AuditData::ResponseCase(_oneof_case_[1]);
}
// -------------------------------------------------------------------

// TableInsertRequest

// .google.cloud.bigquery.logging.v1.Table resource = 1;
inline bool TableInsertRequest::has_resource() const {
  return this != internal_default_instance() && resource_ != NULL;
}
inline void TableInsertRequest::clear_resource() {
  if (GetArenaNoVirtual() == NULL && resource_ != NULL) {
    delete resource_;
  }
  resource_ = NULL;
}
inline const ::google::cloud::bigquery::logging::v1::Table& TableInsertRequest::resource() const {
  const ::google::cloud::bigquery::logging::v1::Table* p = resource_;
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.logging.v1.TableInsertRequest.resource)
  return p != NULL ? *p : *reinterpret_cast<const ::google::cloud::bigquery::logging::v1::Table*>(
      &::google::cloud::bigquery::logging::v1::_Table_default_instance_);
}
inline ::google::cloud::bigquery::logging::v1::Table* TableInsertRequest::release_resource() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.logging.v1.TableInsertRequest.resource)
  
  ::google::cloud::bigquery::logging::v1::Table* temp = resource_;
  resource_ = NULL;
  return temp;
}
inline ::google::cloud::bigquery::logging::v1::Table* TableInsertRequest::mutable_resource() {
  
  if (resource_ == NULL) {
    resource_ = new ::google::cloud::bigquery::logging::v1::Table;
  }
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.logging.v1.TableInsertRequest.resource)
  return resource_;
}
inline void TableInsertRequest::set_allocated_resource(::google::cloud::bigquery::logging::v1::Table* resource) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete resource_;
  }
  if (resource) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      resource = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, resource, submessage_arena);
    }
    
  } else {
    
  }
  resource_ = resource;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.logging.v1.TableInsertRequest.resource)
}

// -------------------------------------------------------------------

// TableUpdateRequest

// .google.cloud.bigquery.logging.v1.Table resource = 1;
inline bool TableUpdateRequest::has_resource() const {
  return this != internal_default_instance() && resource_ != NULL;
}
inline void TableUpdateRequest::clear_resource() {
  if (GetArenaNoVirtual() == NULL && resource_ != NULL) {
    delete resource_;
  }
  resource_ = NULL;
}
inline const ::google::cloud::bigquery::logging::v1::Table& TableUpdateRequest::resource() const {
  const ::google::cloud::bigquery::logging::v1::Table* p = resource_;
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.logging.v1.TableUpdateRequest.resource)
  return p != NULL ? *p : *reinterpret_cast<const ::google::cloud::bigquery::logging::v1::Table*>(
      &::google::cloud::bigquery::logging::v1::_Table_default_instance_);
}
inline ::google::cloud::bigquery::logging::v1::Table* TableUpdateRequest::release_resource() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.logging.v1.TableUpdateRequest.resource)
  
  ::google::cloud::bigquery::logging::v1::Table* temp = resource_;
  resource_ = NULL;
  return temp;
}
inline ::google::cloud::bigquery::logging::v1::Table* TableUpdateRequest::mutable_resource() {
  
  if (resource_ == NULL) {
    resource_ = new ::google::cloud::bigquery::logging::v1::Table;
  }
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.logging.v1.TableUpdateRequest.resource)
  return resource_;
}
inline void TableUpdateRequest::set_allocated_resource(::google::cloud::bigquery::logging::v1::Table* resource) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete resource_;
  }
  if (resource) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      resource = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, resource, submessage_arena);
    }
    
  } else {
    
  }
  resource_ = resource;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.logging.v1.TableUpdateRequest.resource)
}

// -------------------------------------------------------------------

// TableInsertResponse

// .google.cloud.bigquery.logging.v1.Table resource = 1;
inline bool TableInsertResponse::has_resource() const {
  return this != internal_default_instance() && resource_ != NULL;
}
inline void TableInsertResponse::clear_resource() {
  if (GetArenaNoVirtual() == NULL && resource_ != NULL) {
    delete resource_;
  }
  resource_ = NULL;
}
inline const ::google::cloud::bigquery::logging::v1::Table& TableInsertResponse::resource() const {
  const ::google::cloud::bigquery::logging::v1::Table* p = resource_;
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.logging.v1.TableInsertResponse.resource)
  return p != NULL ? *p : *reinterpret_cast<const ::google::cloud::bigquery::logging::v1::Table*>(
      &::google::cloud::bigquery::logging::v1::_Table_default_instance_);
}
inline ::google::cloud::bigquery::logging::v1::Table* TableInsertResponse::release_resource() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.logging.v1.TableInsertResponse.resource)
  
  ::google::cloud::bigquery::logging::v1::Table* temp = resource_;
  resource_ = NULL;
  return temp;
}
inline ::google::cloud::bigquery::logging::v1::Table* TableInsertResponse::mutable_resource() {
  
  if (resource_ == NULL) {
    resource_ = new ::google::cloud::bigquery::logging::v1::Table;
  }
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.logging.v1.TableInsertResponse.resource)
  return resource_;
}
inline void TableInsertResponse::set_allocated_resource(::google::cloud::bigquery::logging::v1::Table* resource) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete resource_;
  }
  if (resource) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      resource = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, resource, submessage_arena);
    }
    
  } else {
    
  }
  resource_ = resource;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.logging.v1.TableInsertResponse.resource)
}

// -------------------------------------------------------------------

// TableUpdateResponse

// .google.cloud.bigquery.logging.v1.Table resource = 1;
inline bool TableUpdateResponse::has_resource() const {
  return this != internal_default_instance() && resource_ != NULL;
}
inline void TableUpdateResponse::clear_resource() {
  if (GetArenaNoVirtual() == NULL && resource_ != NULL) {
    delete resource_;
  }
  resource_ = NULL;
}
inline const ::google::cloud::bigquery::logging::v1::Table& TableUpdateResponse::resource() const {
  const ::google::cloud::bigquery::logging::v1::Table* p = resource_;
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.logging.v1.TableUpdateResponse.resource)
  return p != NULL ? *p : *reinterpret_cast<const ::google::cloud::bigquery::logging::v1::Table*>(
      &::google::cloud::bigquery::logging::v1::_Table_default_instance_);
}
inline ::google::cloud::bigquery::logging::v1::Table* TableUpdateResponse::release_resource() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.logging.v1.TableUpdateResponse.resource)
  
  ::google::cloud::bigquery::logging::v1::Table* temp = resource_;
  resource_ = NULL;
  return temp;
}
inline ::google::cloud::bigquery::logging::v1::Table* TableUpdateResponse::mutable_resource() {
  
  if (resource_ == NULL) {
    resource_ = new ::google::cloud::bigquery::logging::v1::Table;
  }
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.logging.v1.TableUpdateResponse.resource)
  return resource_;
}
inline void TableUpdateResponse::set_allocated_resource(::google::cloud::bigquery::logging::v1::Table* resource) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete resource_;
  }
  if (resource) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      resource = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, resource, submessage_arena);
    }
    
  } else {
    
  }
  resource_ = resource;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.logging.v1.TableUpdateResponse.resource)
}

// -------------------------------------------------------------------

// DatasetListRequest

// bool list_all = 1;
inline void DatasetListRequest::clear_list_all() {
  list_all_ = false;
}
inline bool DatasetListRequest::list_all() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.logging.v1.DatasetListRequest.list_all)
  return list_all_;
}
inline void DatasetListRequest::set_list_all(bool value) {
  
  list_all_ = value;
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.logging.v1.DatasetListRequest.list_all)
}

// -------------------------------------------------------------------

// DatasetInsertRequest

// .google.cloud.bigquery.logging.v1.Dataset resource = 1;
inline bool DatasetInsertRequest::has_resource() const {
  return this != internal_default_instance() && resource_ != NULL;
}
inline void DatasetInsertRequest::clear_resource() {
  if (GetArenaNoVirtual() == NULL && resource_ != NULL) {
    delete resource_;
  }
  resource_ = NULL;
}
inline const ::google::cloud::bigquery::logging::v1::Dataset& DatasetInsertRequest::resource() const {
  const ::google::cloud::bigquery::logging::v1::Dataset* p = resource_;
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.logging.v1.DatasetInsertRequest.resource)
  return p != NULL ? *p : *reinterpret_cast<const ::google::cloud::bigquery::logging::v1::Dataset*>(
      &::google::cloud::bigquery::logging::v1::_Dataset_default_instance_);
}
inline ::google::cloud::bigquery::logging::v1::Dataset* DatasetInsertRequest::release_resource() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.logging.v1.DatasetInsertRequest.resource)
  
  ::google::cloud::bigquery::logging::v1::Dataset* temp = resource_;
  resource_ = NULL;
  return temp;
}
inline ::google::cloud::bigquery::logging::v1::Dataset* DatasetInsertRequest::mutable_resource() {
  
  if (resource_ == NULL) {
    resource_ = new ::google::cloud::bigquery::logging::v1::Dataset;
  }
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.logging.v1.DatasetInsertRequest.resource)
  return resource_;
}
inline void DatasetInsertRequest::set_allocated_resource(::google::cloud::bigquery::logging::v1::Dataset* resource) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete resource_;
  }
  if (resource) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      resource = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, resource, submessage_arena);
    }
    
  } else {
    
  }
  resource_ = resource;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.logging.v1.DatasetInsertRequest.resource)
}

// -------------------------------------------------------------------

// DatasetInsertResponse

// .google.cloud.bigquery.logging.v1.Dataset resource = 1;
inline bool DatasetInsertResponse::has_resource() const {
  return this != internal_default_instance() && resource_ != NULL;
}
inline void DatasetInsertResponse::clear_resource() {
  if (GetArenaNoVirtual() == NULL && resource_ != NULL) {
    delete resource_;
  }
  resource_ = NULL;
}
inline const ::google::cloud::bigquery::logging::v1::Dataset& DatasetInsertResponse::resource() const {
  const ::google::cloud::bigquery::logging::v1::Dataset* p = resource_;
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.logging.v1.DatasetInsertResponse.resource)
  return p != NULL ? *p : *reinterpret_cast<const ::google::cloud::bigquery::logging::v1::Dataset*>(
      &::google::cloud::bigquery::logging::v1::_Dataset_default_instance_);
}
inline ::google::cloud::bigquery::logging::v1::Dataset* DatasetInsertResponse::release_resource() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.logging.v1.DatasetInsertResponse.resource)
  
  ::google::cloud::bigquery::logging::v1::Dataset* temp = resource_;
  resource_ = NULL;
  return temp;
}
inline ::google::cloud::bigquery::logging::v1::Dataset* DatasetInsertResponse::mutable_resource() {
  
  if (resource_ == NULL) {
    resource_ = new ::google::cloud::bigquery::logging::v1::Dataset;
  }
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.logging.v1.DatasetInsertResponse.resource)
  return resource_;
}
inline void DatasetInsertResponse::set_allocated_resource(::google::cloud::bigquery::logging::v1::Dataset* resource) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete resource_;
  }
  if (resource) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      resource = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, resource, submessage_arena);
    }
    
  } else {
    
  }
  resource_ = resource;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.logging.v1.DatasetInsertResponse.resource)
}

// -------------------------------------------------------------------

// DatasetUpdateRequest

// .google.cloud.bigquery.logging.v1.Dataset resource = 1;
inline bool DatasetUpdateRequest::has_resource() const {
  return this != internal_default_instance() && resource_ != NULL;
}
inline void DatasetUpdateRequest::clear_resource() {
  if (GetArenaNoVirtual() == NULL && resource_ != NULL) {
    delete resource_;
  }
  resource_ = NULL;
}
inline const ::google::cloud::bigquery::logging::v1::Dataset& DatasetUpdateRequest::resource() const {
  const ::google::cloud::bigquery::logging::v1::Dataset* p = resource_;
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.logging.v1.DatasetUpdateRequest.resource)
  return p != NULL ? *p : *reinterpret_cast<const ::google::cloud::bigquery::logging::v1::Dataset*>(
      &::google::cloud::bigquery::logging::v1::_Dataset_default_instance_);
}
inline ::google::cloud::bigquery::logging::v1::Dataset* DatasetUpdateRequest::release_resource() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.logging.v1.DatasetUpdateRequest.resource)
  
  ::google::cloud::bigquery::logging::v1::Dataset* temp = resource_;
  resource_ = NULL;
  return temp;
}
inline ::google::cloud::bigquery::logging::v1::Dataset* DatasetUpdateRequest::mutable_resource() {
  
  if (resource_ == NULL) {
    resource_ = new ::google::cloud::bigquery::logging::v1::Dataset;
  }
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.logging.v1.DatasetUpdateRequest.resource)
  return resource_;
}
inline void DatasetUpdateRequest::set_allocated_resource(::google::cloud::bigquery::logging::v1::Dataset* resource) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete resource_;
  }
  if (resource) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      resource = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, resource, submessage_arena);
    }
    
  } else {
    
  }
  resource_ = resource;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.logging.v1.DatasetUpdateRequest.resource)
}

// -------------------------------------------------------------------

// DatasetUpdateResponse

// .google.cloud.bigquery.logging.v1.Dataset resource = 1;
inline bool DatasetUpdateResponse::has_resource() const {
  return this != internal_default_instance() && resource_ != NULL;
}
inline void DatasetUpdateResponse::clear_resource() {
  if (GetArenaNoVirtual() == NULL && resource_ != NULL) {
    delete resource_;
  }
  resource_ = NULL;
}
inline const ::google::cloud::bigquery::logging::v1::Dataset& DatasetUpdateResponse::resource() const {
  const ::google::cloud::bigquery::logging::v1::Dataset* p = resource_;
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.logging.v1.DatasetUpdateResponse.resource)
  return p != NULL ? *p : *reinterpret_cast<const ::google::cloud::bigquery::logging::v1::Dataset*>(
      &::google::cloud::bigquery::logging::v1::_Dataset_default_instance_);
}
inline ::google::cloud::bigquery::logging::v1::Dataset* DatasetUpdateResponse::release_resource() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.logging.v1.DatasetUpdateResponse.resource)
  
  ::google::cloud::bigquery::logging::v1::Dataset* temp = resource_;
  resource_ = NULL;
  return temp;
}
inline ::google::cloud::bigquery::logging::v1::Dataset* DatasetUpdateResponse::mutable_resource() {
  
  if (resource_ == NULL) {
    resource_ = new ::google::cloud::bigquery::logging::v1::Dataset;
  }
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.logging.v1.DatasetUpdateResponse.resource)
  return resource_;
}
inline void DatasetUpdateResponse::set_allocated_resource(::google::cloud::bigquery::logging::v1::Dataset* resource) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete resource_;
  }
  if (resource) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      resource = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, resource, submessage_arena);
    }
    
  } else {
    
  }
  resource_ = resource;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.logging.v1.DatasetUpdateResponse.resource)
}

// -------------------------------------------------------------------

// JobInsertRequest

// .google.cloud.bigquery.logging.v1.Job resource = 1;
inline bool JobInsertRequest::has_resource() const {
  return this != internal_default_instance() && resource_ != NULL;
}
inline void JobInsertRequest::clear_resource() {
  if (GetArenaNoVirtual() == NULL && resource_ != NULL) {
    delete resource_;
  }
  resource_ = NULL;
}
inline const ::google::cloud::bigquery::logging::v1::Job& JobInsertRequest::resource() const {
  const ::google::cloud::bigquery::logging::v1::Job* p = resource_;
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.logging.v1.JobInsertRequest.resource)
  return p != NULL ? *p : *reinterpret_cast<const ::google::cloud::bigquery::logging::v1::Job*>(
      &::google::cloud::bigquery::logging::v1::_Job_default_instance_);
}
inline ::google::cloud::bigquery::logging::v1::Job* JobInsertRequest::release_resource() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.logging.v1.JobInsertRequest.resource)
  
  ::google::cloud::bigquery::logging::v1::Job* temp = resource_;
  resource_ = NULL;
  return temp;
}
inline ::google::cloud::bigquery::logging::v1::Job* JobInsertRequest::mutable_resource() {
  
  if (resource_ == NULL) {
    resource_ = new ::google::cloud::bigquery::logging::v1::Job;
  }
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.logging.v1.JobInsertRequest.resource)
  return resource_;
}
inline void JobInsertRequest::set_allocated_resource(::google::cloud::bigquery::logging::v1::Job* resource) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete resource_;
  }
  if (resource) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      resource = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, resource, submessage_arena);
    }
    
  } else {
    
  }
  resource_ = resource;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.logging.v1.JobInsertRequest.resource)
}

// -------------------------------------------------------------------

// JobInsertResponse

// .google.cloud.bigquery.logging.v1.Job resource = 1;
inline bool JobInsertResponse::has_resource() const {
  return this != internal_default_instance() && resource_ != NULL;
}
inline void JobInsertResponse::clear_resource() {
  if (GetArenaNoVirtual() == NULL && resource_ != NULL) {
    delete resource_;
  }
  resource_ = NULL;
}
inline const ::google::cloud::bigquery::logging::v1::Job& JobInsertResponse::resource() const {
  const ::google::cloud::bigquery::logging::v1::Job* p = resource_;
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.logging.v1.JobInsertResponse.resource)
  return p != NULL ? *p : *reinterpret_cast<const ::google::cloud::bigquery::logging::v1::Job*>(
      &::google::cloud::bigquery::logging::v1::_Job_default_instance_);
}
inline ::google::cloud::bigquery::logging::v1::Job* JobInsertResponse::release_resource() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.logging.v1.JobInsertResponse.resource)
  
  ::google::cloud::bigquery::logging::v1::Job* temp = resource_;
  resource_ = NULL;
  return temp;
}
inline ::google::cloud::bigquery::logging::v1::Job* JobInsertResponse::mutable_resource() {
  
  if (resource_ == NULL) {
    resource_ = new ::google::cloud::bigquery::logging::v1::Job;
  }
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.logging.v1.JobInsertResponse.resource)
  return resource_;
}
inline void JobInsertResponse::set_allocated_resource(::google::cloud::bigquery::logging::v1::Job* resource) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete resource_;
  }
  if (resource) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      resource = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, resource, submessage_arena);
    }
    
  } else {
    
  }
  resource_ = resource;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.logging.v1.JobInsertResponse.resource)
}

// -------------------------------------------------------------------

// JobQueryRequest

// string query = 1;
inline void JobQueryRequest::clear_query() {
  query_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& JobQueryRequest::query() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.logging.v1.JobQueryRequest.query)
  return query_.GetNoArena();
}
inline void JobQueryRequest::set_query(const ::std::string& value) {
  
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.logging.v1.JobQueryRequest.query)
}
#if LANG_CXX11
inline void JobQueryRequest::set_query(::std::string&& value) {
  
  query_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.bigquery.logging.v1.JobQueryRequest.query)
}
#endif
inline void JobQueryRequest::set_query(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.cloud.bigquery.logging.v1.JobQueryRequest.query)
}
inline void JobQueryRequest::set_query(const char* value, size_t size) {
  
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.cloud.bigquery.logging.v1.JobQueryRequest.query)
}
inline ::std::string* JobQueryRequest::mutable_query() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.logging.v1.JobQueryRequest.query)
  return query_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* JobQueryRequest::release_query() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.logging.v1.JobQueryRequest.query)
  
  return query_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void JobQueryRequest::set_allocated_query(::std::string* query) {
  if (query != NULL) {
    
  } else {
    
  }
  query_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), query);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.logging.v1.JobQueryRequest.query)
}

// uint32 max_results = 2;
inline void JobQueryRequest::clear_max_results() {
  max_results_ = 0u;
}
inline ::google::protobuf::uint32 JobQueryRequest::max_results() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.logging.v1.JobQueryRequest.max_results)
  return max_results_;
}
inline void JobQueryRequest::set_max_results(::google::protobuf::uint32 value) {
  
  max_results_ = value;
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.logging.v1.JobQueryRequest.max_results)
}

// .google.cloud.bigquery.logging.v1.DatasetName default_dataset = 3;
inline bool JobQueryRequest::has_default_dataset() const {
  return this != internal_default_instance() && default_dataset_ != NULL;
}
inline void JobQueryRequest::clear_default_dataset() {
  if (GetArenaNoVirtual() == NULL && default_dataset_ != NULL) {
    delete default_dataset_;
  }
  default_dataset_ = NULL;
}
inline const ::google::cloud::bigquery::logging::v1::DatasetName& JobQueryRequest::default_dataset() const {
  const ::google::cloud::bigquery::logging::v1::DatasetName* p = default_dataset_;
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.logging.v1.JobQueryRequest.default_dataset)
  return p != NULL ? *p : *reinterpret_cast<const ::google::cloud::bigquery::logging::v1::DatasetName*>(
      &::google::cloud::bigquery::logging::v1::_DatasetName_default_instance_);
}
inline ::google::cloud::bigquery::logging::v1::DatasetName* JobQueryRequest::release_default_dataset() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.logging.v1.JobQueryRequest.default_dataset)
  
  ::google::cloud::bigquery::logging::v1::DatasetName* temp = default_dataset_;
  default_dataset_ = NULL;
  return temp;
}
inline ::google::cloud::bigquery::logging::v1::DatasetName* JobQueryRequest::mutable_default_dataset() {
  
  if (default_dataset_ == NULL) {
    default_dataset_ = new ::google::cloud::bigquery::logging::v1::DatasetName;
  }
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.logging.v1.JobQueryRequest.default_dataset)
  return default_dataset_;
}
inline void JobQueryRequest::set_allocated_default_dataset(::google::cloud::bigquery::logging::v1::DatasetName* default_dataset) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete default_dataset_;
  }
  if (default_dataset) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      default_dataset = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, default_dataset, submessage_arena);
    }
    
  } else {
    
  }
  default_dataset_ = default_dataset;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.logging.v1.JobQueryRequest.default_dataset)
}

// string project_id = 4;
inline void JobQueryRequest::clear_project_id() {
  project_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& JobQueryRequest::project_id() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.logging.v1.JobQueryRequest.project_id)
  return project_id_.GetNoArena();
}
inline void JobQueryRequest::set_project_id(const ::std::string& value) {
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.logging.v1.JobQueryRequest.project_id)
}
#if LANG_CXX11
inline void JobQueryRequest::set_project_id(::std::string&& value) {
  
  project_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.bigquery.logging.v1.JobQueryRequest.project_id)
}
#endif
inline void JobQueryRequest::set_project_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.cloud.bigquery.logging.v1.JobQueryRequest.project_id)
}
inline void JobQueryRequest::set_project_id(const char* value, size_t size) {
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.cloud.bigquery.logging.v1.JobQueryRequest.project_id)
}
inline ::std::string* JobQueryRequest::mutable_project_id() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.logging.v1.JobQueryRequest.project_id)
  return project_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* JobQueryRequest::release_project_id() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.logging.v1.JobQueryRequest.project_id)
  
  return project_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void JobQueryRequest::set_allocated_project_id(::std::string* project_id) {
  if (project_id != NULL) {
    
  } else {
    
  }
  project_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), project_id);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.logging.v1.JobQueryRequest.project_id)
}

// bool dry_run = 5;
inline void JobQueryRequest::clear_dry_run() {
  dry_run_ = false;
}
inline bool JobQueryRequest::dry_run() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.logging.v1.JobQueryRequest.dry_run)
  return dry_run_;
}
inline void JobQueryRequest::set_dry_run(bool value) {
  
  dry_run_ = value;
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.logging.v1.JobQueryRequest.dry_run)
}

// -------------------------------------------------------------------

// JobQueryResponse

// uint64 total_results = 1;
inline void JobQueryResponse::clear_total_results() {
  total_results_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 JobQueryResponse::total_results() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.logging.v1.JobQueryResponse.total_results)
  return total_results_;
}
inline void JobQueryResponse::set_total_results(::google::protobuf::uint64 value) {
  
  total_results_ = value;
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.logging.v1.JobQueryResponse.total_results)
}

// .google.cloud.bigquery.logging.v1.Job job = 2;
inline bool JobQueryResponse::has_job() const {
  return this != internal_default_instance() && job_ != NULL;
}
inline void JobQueryResponse::clear_job() {
  if (GetArenaNoVirtual() == NULL && job_ != NULL) {
    delete job_;
  }
  job_ = NULL;
}
inline const ::google::cloud::bigquery::logging::v1::Job& JobQueryResponse::job() const {
  const ::google::cloud::bigquery::logging::v1::Job* p = job_;
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.logging.v1.JobQueryResponse.job)
  return p != NULL ? *p : *reinterpret_cast<const ::google::cloud::bigquery::logging::v1::Job*>(
      &::google::cloud::bigquery::logging::v1::_Job_default_instance_);
}
inline ::google::cloud::bigquery::logging::v1::Job* JobQueryResponse::release_job() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.logging.v1.JobQueryResponse.job)
  
  ::google::cloud::bigquery::logging::v1::Job* temp = job_;
  job_ = NULL;
  return temp;
}
inline ::google::cloud::bigquery::logging::v1::Job* JobQueryResponse::mutable_job() {
  
  if (job_ == NULL) {
    job_ = new ::google::cloud::bigquery::logging::v1::Job;
  }
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.logging.v1.JobQueryResponse.job)
  return job_;
}
inline void JobQueryResponse::set_allocated_job(::google::cloud::bigquery::logging::v1::Job* job) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete job_;
  }
  if (job) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      job = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, job, submessage_arena);
    }
    
  } else {
    
  }
  job_ = job;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.logging.v1.JobQueryResponse.job)
}

// -------------------------------------------------------------------

// JobGetQueryResultsRequest

// uint32 max_results = 1;
inline void JobGetQueryResultsRequest::clear_max_results() {
  max_results_ = 0u;
}
inline ::google::protobuf::uint32 JobGetQueryResultsRequest::max_results() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.logging.v1.JobGetQueryResultsRequest.max_results)
  return max_results_;
}
inline void JobGetQueryResultsRequest::set_max_results(::google::protobuf::uint32 value) {
  
  max_results_ = value;
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.logging.v1.JobGetQueryResultsRequest.max_results)
}

// uint64 start_row = 2;
inline void JobGetQueryResultsRequest::clear_start_row() {
  start_row_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 JobGetQueryResultsRequest::start_row() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.logging.v1.JobGetQueryResultsRequest.start_row)
  return start_row_;
}
inline void JobGetQueryResultsRequest::set_start_row(::google::protobuf::uint64 value) {
  
  start_row_ = value;
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.logging.v1.JobGetQueryResultsRequest.start_row)
}

// -------------------------------------------------------------------

// JobGetQueryResultsResponse

// uint64 total_results = 1;
inline void JobGetQueryResultsResponse::clear_total_results() {
  total_results_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 JobGetQueryResultsResponse::total_results() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.logging.v1.JobGetQueryResultsResponse.total_results)
  return total_results_;
}
inline void JobGetQueryResultsResponse::set_total_results(::google::protobuf::uint64 value) {
  
  total_results_ = value;
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.logging.v1.JobGetQueryResultsResponse.total_results)
}

// .google.cloud.bigquery.logging.v1.Job job = 2;
inline bool JobGetQueryResultsResponse::has_job() const {
  return this != internal_default_instance() && job_ != NULL;
}
inline void JobGetQueryResultsResponse::clear_job() {
  if (GetArenaNoVirtual() == NULL && job_ != NULL) {
    delete job_;
  }
  job_ = NULL;
}
inline const ::google::cloud::bigquery::logging::v1::Job& JobGetQueryResultsResponse::job() const {
  const ::google::cloud::bigquery::logging::v1::Job* p = job_;
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.logging.v1.JobGetQueryResultsResponse.job)
  return p != NULL ? *p : *reinterpret_cast<const ::google::cloud::bigquery::logging::v1::Job*>(
      &::google::cloud::bigquery::logging::v1::_Job_default_instance_);
}
inline ::google::cloud::bigquery::logging::v1::Job* JobGetQueryResultsResponse::release_job() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.logging.v1.JobGetQueryResultsResponse.job)
  
  ::google::cloud::bigquery::logging::v1::Job* temp = job_;
  job_ = NULL;
  return temp;
}
inline ::google::cloud::bigquery::logging::v1::Job* JobGetQueryResultsResponse::mutable_job() {
  
  if (job_ == NULL) {
    job_ = new ::google::cloud::bigquery::logging::v1::Job;
  }
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.logging.v1.JobGetQueryResultsResponse.job)
  return job_;
}
inline void JobGetQueryResultsResponse::set_allocated_job(::google::cloud::bigquery::logging::v1::Job* job) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete job_;
  }
  if (job) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      job = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, job, submessage_arena);
    }
    
  } else {
    
  }
  job_ = job;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.logging.v1.JobGetQueryResultsResponse.job)
}

// -------------------------------------------------------------------

// JobQueryDoneResponse

// .google.cloud.bigquery.logging.v1.Job job = 1;
inline bool JobQueryDoneResponse::has_job() const {
  return this != internal_default_instance() && job_ != NULL;
}
inline void JobQueryDoneResponse::clear_job() {
  if (GetArenaNoVirtual() == NULL && job_ != NULL) {
    delete job_;
  }
  job_ = NULL;
}
inline const ::google::cloud::bigquery::logging::v1::Job& JobQueryDoneResponse::job() const {
  const ::google::cloud::bigquery::logging::v1::Job* p = job_;
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.logging.v1.JobQueryDoneResponse.job)
  return p != NULL ? *p : *reinterpret_cast<const ::google::cloud::bigquery::logging::v1::Job*>(
      &::google::cloud::bigquery::logging::v1::_Job_default_instance_);
}
inline ::google::cloud::bigquery::logging::v1::Job* JobQueryDoneResponse::release_job() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.logging.v1.JobQueryDoneResponse.job)
  
  ::google::cloud::bigquery::logging::v1::Job* temp = job_;
  job_ = NULL;
  return temp;
}
inline ::google::cloud::bigquery::logging::v1::Job* JobQueryDoneResponse::mutable_job() {
  
  if (job_ == NULL) {
    job_ = new ::google::cloud::bigquery::logging::v1::Job;
  }
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.logging.v1.JobQueryDoneResponse.job)
  return job_;
}
inline void JobQueryDoneResponse::set_allocated_job(::google::cloud::bigquery::logging::v1::Job* job) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete job_;
  }
  if (job) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      job = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, job, submessage_arena);
    }
    
  } else {
    
  }
  job_ = job;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.logging.v1.JobQueryDoneResponse.job)
}

// -------------------------------------------------------------------

// JobCompletedEvent

// string event_name = 1;
inline void JobCompletedEvent::clear_event_name() {
  event_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& JobCompletedEvent::event_name() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.logging.v1.JobCompletedEvent.event_name)
  return event_name_.GetNoArena();
}
inline void JobCompletedEvent::set_event_name(const ::std::string& value) {
  
  event_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.logging.v1.JobCompletedEvent.event_name)
}
#if LANG_CXX11
inline void JobCompletedEvent::set_event_name(::std::string&& value) {
  
  event_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.bigquery.logging.v1.JobCompletedEvent.event_name)
}
#endif
inline void JobCompletedEvent::set_event_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  event_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.cloud.bigquery.logging.v1.JobCompletedEvent.event_name)
}
inline void JobCompletedEvent::set_event_name(const char* value, size_t size) {
  
  event_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.cloud.bigquery.logging.v1.JobCompletedEvent.event_name)
}
inline ::std::string* JobCompletedEvent::mutable_event_name() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.logging.v1.JobCompletedEvent.event_name)
  return event_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* JobCompletedEvent::release_event_name() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.logging.v1.JobCompletedEvent.event_name)
  
  return event_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void JobCompletedEvent::set_allocated_event_name(::std::string* event_name) {
  if (event_name != NULL) {
    
  } else {
    
  }
  event_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), event_name);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.logging.v1.JobCompletedEvent.event_name)
}

// .google.cloud.bigquery.logging.v1.Job job = 2;
inline bool JobCompletedEvent::has_job() const {
  return this != internal_default_instance() && job_ != NULL;
}
inline void JobCompletedEvent::clear_job() {
  if (GetArenaNoVirtual() == NULL && job_ != NULL) {
    delete job_;
  }
  job_ = NULL;
}
inline const ::google::cloud::bigquery::logging::v1::Job& JobCompletedEvent::job() const {
  const ::google::cloud::bigquery::logging::v1::Job* p = job_;
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.logging.v1.JobCompletedEvent.job)
  return p != NULL ? *p : *reinterpret_cast<const ::google::cloud::bigquery::logging::v1::Job*>(
      &::google::cloud::bigquery::logging::v1::_Job_default_instance_);
}
inline ::google::cloud::bigquery::logging::v1::Job* JobCompletedEvent::release_job() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.logging.v1.JobCompletedEvent.job)
  
  ::google::cloud::bigquery::logging::v1::Job* temp = job_;
  job_ = NULL;
  return temp;
}
inline ::google::cloud::bigquery::logging::v1::Job* JobCompletedEvent::mutable_job() {
  
  if (job_ == NULL) {
    job_ = new ::google::cloud::bigquery::logging::v1::Job;
  }
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.logging.v1.JobCompletedEvent.job)
  return job_;
}
inline void JobCompletedEvent::set_allocated_job(::google::cloud::bigquery::logging::v1::Job* job) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete job_;
  }
  if (job) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      job = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, job, submessage_arena);
    }
    
  } else {
    
  }
  job_ = job;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.logging.v1.JobCompletedEvent.job)
}

// -------------------------------------------------------------------

// TableDataListRequest

// uint64 start_row = 1;
inline void TableDataListRequest::clear_start_row() {
  start_row_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 TableDataListRequest::start_row() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.logging.v1.TableDataListRequest.start_row)
  return start_row_;
}
inline void TableDataListRequest::set_start_row(::google::protobuf::uint64 value) {
  
  start_row_ = value;
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.logging.v1.TableDataListRequest.start_row)
}

// uint32 max_results = 2;
inline void TableDataListRequest::clear_max_results() {
  max_results_ = 0u;
}
inline ::google::protobuf::uint32 TableDataListRequest::max_results() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.logging.v1.TableDataListRequest.max_results)
  return max_results_;
}
inline void TableDataListRequest::set_max_results(::google::protobuf::uint32 value) {
  
  max_results_ = value;
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.logging.v1.TableDataListRequest.max_results)
}

// -------------------------------------------------------------------

// Table

// .google.cloud.bigquery.logging.v1.TableName table_name = 1;
inline bool Table::has_table_name() const {
  return this != internal_default_instance() && table_name_ != NULL;
}
inline void Table::clear_table_name() {
  if (GetArenaNoVirtual() == NULL && table_name_ != NULL) {
    delete table_name_;
  }
  table_name_ = NULL;
}
inline const ::google::cloud::bigquery::logging::v1::TableName& Table::table_name() const {
  const ::google::cloud::bigquery::logging::v1::TableName* p = table_name_;
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.logging.v1.Table.table_name)
  return p != NULL ? *p : *reinterpret_cast<const ::google::cloud::bigquery::logging::v1::TableName*>(
      &::google::cloud::bigquery::logging::v1::_TableName_default_instance_);
}
inline ::google::cloud::bigquery::logging::v1::TableName* Table::release_table_name() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.logging.v1.Table.table_name)
  
  ::google::cloud::bigquery::logging::v1::TableName* temp = table_name_;
  table_name_ = NULL;
  return temp;
}
inline ::google::cloud::bigquery::logging::v1::TableName* Table::mutable_table_name() {
  
  if (table_name_ == NULL) {
    table_name_ = new ::google::cloud::bigquery::logging::v1::TableName;
  }
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.logging.v1.Table.table_name)
  return table_name_;
}
inline void Table::set_allocated_table_name(::google::cloud::bigquery::logging::v1::TableName* table_name) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete table_name_;
  }
  if (table_name) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      table_name = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, table_name, submessage_arena);
    }
    
  } else {
    
  }
  table_name_ = table_name;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.logging.v1.Table.table_name)
}

// .google.cloud.bigquery.logging.v1.TableInfo info = 2;
inline bool Table::has_info() const {
  return this != internal_default_instance() && info_ != NULL;
}
inline void Table::clear_info() {
  if (GetArenaNoVirtual() == NULL && info_ != NULL) {
    delete info_;
  }
  info_ = NULL;
}
inline const ::google::cloud::bigquery::logging::v1::TableInfo& Table::info() const {
  const ::google::cloud::bigquery::logging::v1::TableInfo* p = info_;
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.logging.v1.Table.info)
  return p != NULL ? *p : *reinterpret_cast<const ::google::cloud::bigquery::logging::v1::TableInfo*>(
      &::google::cloud::bigquery::logging::v1::_TableInfo_default_instance_);
}
inline ::google::cloud::bigquery::logging::v1::TableInfo* Table::release_info() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.logging.v1.Table.info)
  
  ::google::cloud::bigquery::logging::v1::TableInfo* temp = info_;
  info_ = NULL;
  return temp;
}
inline ::google::cloud::bigquery::logging::v1::TableInfo* Table::mutable_info() {
  
  if (info_ == NULL) {
    info_ = new ::google::cloud::bigquery::logging::v1::TableInfo;
  }
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.logging.v1.Table.info)
  return info_;
}
inline void Table::set_allocated_info(::google::cloud::bigquery::logging::v1::TableInfo* info) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete info_;
  }
  if (info) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      info = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, info, submessage_arena);
    }
    
  } else {
    
  }
  info_ = info;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.logging.v1.Table.info)
}

// string schema_json = 8;
inline void Table::clear_schema_json() {
  schema_json_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Table::schema_json() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.logging.v1.Table.schema_json)
  return schema_json_.GetNoArena();
}
inline void Table::set_schema_json(const ::std::string& value) {
  
  schema_json_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.logging.v1.Table.schema_json)
}
#if LANG_CXX11
inline void Table::set_schema_json(::std::string&& value) {
  
  schema_json_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.bigquery.logging.v1.Table.schema_json)
}
#endif
inline void Table::set_schema_json(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  schema_json_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.cloud.bigquery.logging.v1.Table.schema_json)
}
inline void Table::set_schema_json(const char* value, size_t size) {
  
  schema_json_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.cloud.bigquery.logging.v1.Table.schema_json)
}
inline ::std::string* Table::mutable_schema_json() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.logging.v1.Table.schema_json)
  return schema_json_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Table::release_schema_json() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.logging.v1.Table.schema_json)
  
  return schema_json_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Table::set_allocated_schema_json(::std::string* schema_json) {
  if (schema_json != NULL) {
    
  } else {
    
  }
  schema_json_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), schema_json);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.logging.v1.Table.schema_json)
}

// .google.cloud.bigquery.logging.v1.TableViewDefinition view = 4;
inline bool Table::has_view() const {
  return this != internal_default_instance() && view_ != NULL;
}
inline void Table::clear_view() {
  if (GetArenaNoVirtual() == NULL && view_ != NULL) {
    delete view_;
  }
  view_ = NULL;
}
inline const ::google::cloud::bigquery::logging::v1::TableViewDefinition& Table::view() const {
  const ::google::cloud::bigquery::logging::v1::TableViewDefinition* p = view_;
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.logging.v1.Table.view)
  return p != NULL ? *p : *reinterpret_cast<const ::google::cloud::bigquery::logging::v1::TableViewDefinition*>(
      &::google::cloud::bigquery::logging::v1::_TableViewDefinition_default_instance_);
}
inline ::google::cloud::bigquery::logging::v1::TableViewDefinition* Table::release_view() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.logging.v1.Table.view)
  
  ::google::cloud::bigquery::logging::v1::TableViewDefinition* temp = view_;
  view_ = NULL;
  return temp;
}
inline ::google::cloud::bigquery::logging::v1::TableViewDefinition* Table::mutable_view() {
  
  if (view_ == NULL) {
    view_ = new ::google::cloud::bigquery::logging::v1::TableViewDefinition;
  }
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.logging.v1.Table.view)
  return view_;
}
inline void Table::set_allocated_view(::google::cloud::bigquery::logging::v1::TableViewDefinition* view) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete view_;
  }
  if (view) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      view = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, view, submessage_arena);
    }
    
  } else {
    
  }
  view_ = view;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.logging.v1.Table.view)
}

// .google.protobuf.Timestamp expire_time = 5;
inline bool Table::has_expire_time() const {
  return this != internal_default_instance() && expire_time_ != NULL;
}
inline const ::google::protobuf::Timestamp& Table::expire_time() const {
  const ::google::protobuf::Timestamp* p = expire_time_;
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.logging.v1.Table.expire_time)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::Timestamp*>(
      &::google::protobuf::_Timestamp_default_instance_);
}
inline ::google::protobuf::Timestamp* Table::release_expire_time() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.logging.v1.Table.expire_time)
  
  ::google::protobuf::Timestamp* temp = expire_time_;
  expire_time_ = NULL;
  return temp;
}
inline ::google::protobuf::Timestamp* Table::mutable_expire_time() {
  
  if (expire_time_ == NULL) {
    expire_time_ = new ::google::protobuf::Timestamp;
  }
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.logging.v1.Table.expire_time)
  return expire_time_;
}
inline void Table::set_allocated_expire_time(::google::protobuf::Timestamp* expire_time) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(expire_time_);
  }
  if (expire_time) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast< ::google::protobuf::MessageLite*>(expire_time)->GetArena();
    if (message_arena != submessage_arena) {
      expire_time = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, expire_time, submessage_arena);
    }
    
  } else {
    
  }
  expire_time_ = expire_time;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.logging.v1.Table.expire_time)
}

// .google.protobuf.Timestamp create_time = 6;
inline bool Table::has_create_time() const {
  return this != internal_default_instance() && create_time_ != NULL;
}
inline const ::google::protobuf::Timestamp& Table::create_time() const {
  const ::google::protobuf::Timestamp* p = create_time_;
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.logging.v1.Table.create_time)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::Timestamp*>(
      &::google::protobuf::_Timestamp_default_instance_);
}
inline ::google::protobuf::Timestamp* Table::release_create_time() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.logging.v1.Table.create_time)
  
  ::google::protobuf::Timestamp* temp = create_time_;
  create_time_ = NULL;
  return temp;
}
inline ::google::protobuf::Timestamp* Table::mutable_create_time() {
  
  if (create_time_ == NULL) {
    create_time_ = new ::google::protobuf::Timestamp;
  }
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.logging.v1.Table.create_time)
  return create_time_;
}
inline void Table::set_allocated_create_time(::google::protobuf::Timestamp* create_time) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(create_time_);
  }
  if (create_time) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast< ::google::protobuf::MessageLite*>(create_time)->GetArena();
    if (message_arena != submessage_arena) {
      create_time = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, create_time, submessage_arena);
    }
    
  } else {
    
  }
  create_time_ = create_time;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.logging.v1.Table.create_time)
}

// .google.protobuf.Timestamp truncate_time = 7;
inline bool Table::has_truncate_time() const {
  return this != internal_default_instance() && truncate_time_ != NULL;
}
inline const ::google::protobuf::Timestamp& Table::truncate_time() const {
  const ::google::protobuf::Timestamp* p = truncate_time_;
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.logging.v1.Table.truncate_time)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::Timestamp*>(
      &::google::protobuf::_Timestamp_default_instance_);
}
inline ::google::protobuf::Timestamp* Table::release_truncate_time() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.logging.v1.Table.truncate_time)
  
  ::google::protobuf::Timestamp* temp = truncate_time_;
  truncate_time_ = NULL;
  return temp;
}
inline ::google::protobuf::Timestamp* Table::mutable_truncate_time() {
  
  if (truncate_time_ == NULL) {
    truncate_time_ = new ::google::protobuf::Timestamp;
  }
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.logging.v1.Table.truncate_time)
  return truncate_time_;
}
inline void Table::set_allocated_truncate_time(::google::protobuf::Timestamp* truncate_time) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(truncate_time_);
  }
  if (truncate_time) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast< ::google::protobuf::MessageLite*>(truncate_time)->GetArena();
    if (message_arena != submessage_arena) {
      truncate_time = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, truncate_time, submessage_arena);
    }
    
  } else {
    
  }
  truncate_time_ = truncate_time;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.logging.v1.Table.truncate_time)
}

// -------------------------------------------------------------------

// TableInfo

// string friendly_name = 1;
inline void TableInfo::clear_friendly_name() {
  friendly_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TableInfo::friendly_name() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.logging.v1.TableInfo.friendly_name)
  return friendly_name_.GetNoArena();
}
inline void TableInfo::set_friendly_name(const ::std::string& value) {
  
  friendly_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.logging.v1.TableInfo.friendly_name)
}
#if LANG_CXX11
inline void TableInfo::set_friendly_name(::std::string&& value) {
  
  friendly_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.bigquery.logging.v1.TableInfo.friendly_name)
}
#endif
inline void TableInfo::set_friendly_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  friendly_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.cloud.bigquery.logging.v1.TableInfo.friendly_name)
}
inline void TableInfo::set_friendly_name(const char* value, size_t size) {
  
  friendly_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.cloud.bigquery.logging.v1.TableInfo.friendly_name)
}
inline ::std::string* TableInfo::mutable_friendly_name() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.logging.v1.TableInfo.friendly_name)
  return friendly_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TableInfo::release_friendly_name() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.logging.v1.TableInfo.friendly_name)
  
  return friendly_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TableInfo::set_allocated_friendly_name(::std::string* friendly_name) {
  if (friendly_name != NULL) {
    
  } else {
    
  }
  friendly_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), friendly_name);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.logging.v1.TableInfo.friendly_name)
}

// string description = 2;
inline void TableInfo::clear_description() {
  description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TableInfo::description() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.logging.v1.TableInfo.description)
  return description_.GetNoArena();
}
inline void TableInfo::set_description(const ::std::string& value) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.logging.v1.TableInfo.description)
}
#if LANG_CXX11
inline void TableInfo::set_description(::std::string&& value) {
  
  description_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.bigquery.logging.v1.TableInfo.description)
}
#endif
inline void TableInfo::set_description(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.cloud.bigquery.logging.v1.TableInfo.description)
}
inline void TableInfo::set_description(const char* value, size_t size) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.cloud.bigquery.logging.v1.TableInfo.description)
}
inline ::std::string* TableInfo::mutable_description() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.logging.v1.TableInfo.description)
  return description_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TableInfo::release_description() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.logging.v1.TableInfo.description)
  
  return description_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TableInfo::set_allocated_description(::std::string* description) {
  if (description != NULL) {
    
  } else {
    
  }
  description_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.logging.v1.TableInfo.description)
}

// -------------------------------------------------------------------

// TableViewDefinition

// string query = 1;
inline void TableViewDefinition::clear_query() {
  query_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TableViewDefinition::query() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.logging.v1.TableViewDefinition.query)
  return query_.GetNoArena();
}
inline void TableViewDefinition::set_query(const ::std::string& value) {
  
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.logging.v1.TableViewDefinition.query)
}
#if LANG_CXX11
inline void TableViewDefinition::set_query(::std::string&& value) {
  
  query_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.bigquery.logging.v1.TableViewDefinition.query)
}
#endif
inline void TableViewDefinition::set_query(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.cloud.bigquery.logging.v1.TableViewDefinition.query)
}
inline void TableViewDefinition::set_query(const char* value, size_t size) {
  
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.cloud.bigquery.logging.v1.TableViewDefinition.query)
}
inline ::std::string* TableViewDefinition::mutable_query() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.logging.v1.TableViewDefinition.query)
  return query_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TableViewDefinition::release_query() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.logging.v1.TableViewDefinition.query)
  
  return query_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TableViewDefinition::set_allocated_query(::std::string* query) {
  if (query != NULL) {
    
  } else {
    
  }
  query_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), query);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.logging.v1.TableViewDefinition.query)
}

// -------------------------------------------------------------------

// Dataset

// .google.cloud.bigquery.logging.v1.DatasetName dataset_name = 1;
inline bool Dataset::has_dataset_name() const {
  return this != internal_default_instance() && dataset_name_ != NULL;
}
inline void Dataset::clear_dataset_name() {
  if (GetArenaNoVirtual() == NULL && dataset_name_ != NULL) {
    delete dataset_name_;
  }
  dataset_name_ = NULL;
}
inline const ::google::cloud::bigquery::logging::v1::DatasetName& Dataset::dataset_name() const {
  const ::google::cloud::bigquery::logging::v1::DatasetName* p = dataset_name_;
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.logging.v1.Dataset.dataset_name)
  return p != NULL ? *p : *reinterpret_cast<const ::google::cloud::bigquery::logging::v1::DatasetName*>(
      &::google::cloud::bigquery::logging::v1::_DatasetName_default_instance_);
}
inline ::google::cloud::bigquery::logging::v1::DatasetName* Dataset::release_dataset_name() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.logging.v1.Dataset.dataset_name)
  
  ::google::cloud::bigquery::logging::v1::DatasetName* temp = dataset_name_;
  dataset_name_ = NULL;
  return temp;
}
inline ::google::cloud::bigquery::logging::v1::DatasetName* Dataset::mutable_dataset_name() {
  
  if (dataset_name_ == NULL) {
    dataset_name_ = new ::google::cloud::bigquery::logging::v1::DatasetName;
  }
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.logging.v1.Dataset.dataset_name)
  return dataset_name_;
}
inline void Dataset::set_allocated_dataset_name(::google::cloud::bigquery::logging::v1::DatasetName* dataset_name) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete dataset_name_;
  }
  if (dataset_name) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      dataset_name = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, dataset_name, submessage_arena);
    }
    
  } else {
    
  }
  dataset_name_ = dataset_name;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.logging.v1.Dataset.dataset_name)
}

// .google.cloud.bigquery.logging.v1.DatasetInfo info = 2;
inline bool Dataset::has_info() const {
  return this != internal_default_instance() && info_ != NULL;
}
inline void Dataset::clear_info() {
  if (GetArenaNoVirtual() == NULL && info_ != NULL) {
    delete info_;
  }
  info_ = NULL;
}
inline const ::google::cloud::bigquery::logging::v1::DatasetInfo& Dataset::info() const {
  const ::google::cloud::bigquery::logging::v1::DatasetInfo* p = info_;
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.logging.v1.Dataset.info)
  return p != NULL ? *p : *reinterpret_cast<const ::google::cloud::bigquery::logging::v1::DatasetInfo*>(
      &::google::cloud::bigquery::logging::v1::_DatasetInfo_default_instance_);
}
inline ::google::cloud::bigquery::logging::v1::DatasetInfo* Dataset::release_info() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.logging.v1.Dataset.info)
  
  ::google::cloud::bigquery::logging::v1::DatasetInfo* temp = info_;
  info_ = NULL;
  return temp;
}
inline ::google::cloud::bigquery::logging::v1::DatasetInfo* Dataset::mutable_info() {
  
  if (info_ == NULL) {
    info_ = new ::google::cloud::bigquery::logging::v1::DatasetInfo;
  }
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.logging.v1.Dataset.info)
  return info_;
}
inline void Dataset::set_allocated_info(::google::cloud::bigquery::logging::v1::DatasetInfo* info) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete info_;
  }
  if (info) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      info = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, info, submessage_arena);
    }
    
  } else {
    
  }
  info_ = info;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.logging.v1.Dataset.info)
}

// .google.protobuf.Timestamp create_time = 4;
inline bool Dataset::has_create_time() const {
  return this != internal_default_instance() && create_time_ != NULL;
}
inline const ::google::protobuf::Timestamp& Dataset::create_time() const {
  const ::google::protobuf::Timestamp* p = create_time_;
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.logging.v1.Dataset.create_time)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::Timestamp*>(
      &::google::protobuf::_Timestamp_default_instance_);
}
inline ::google::protobuf::Timestamp* Dataset::release_create_time() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.logging.v1.Dataset.create_time)
  
  ::google::protobuf::Timestamp* temp = create_time_;
  create_time_ = NULL;
  return temp;
}
inline ::google::protobuf::Timestamp* Dataset::mutable_create_time() {
  
  if (create_time_ == NULL) {
    create_time_ = new ::google::protobuf::Timestamp;
  }
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.logging.v1.Dataset.create_time)
  return create_time_;
}
inline void Dataset::set_allocated_create_time(::google::protobuf::Timestamp* create_time) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(create_time_);
  }
  if (create_time) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast< ::google::protobuf::MessageLite*>(create_time)->GetArena();
    if (message_arena != submessage_arena) {
      create_time = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, create_time, submessage_arena);
    }
    
  } else {
    
  }
  create_time_ = create_time;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.logging.v1.Dataset.create_time)
}

// .google.protobuf.Timestamp update_time = 5;
inline bool Dataset::has_update_time() const {
  return this != internal_default_instance() && update_time_ != NULL;
}
inline const ::google::protobuf::Timestamp& Dataset::update_time() const {
  const ::google::protobuf::Timestamp* p = update_time_;
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.logging.v1.Dataset.update_time)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::Timestamp*>(
      &::google::protobuf::_Timestamp_default_instance_);
}
inline ::google::protobuf::Timestamp* Dataset::release_update_time() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.logging.v1.Dataset.update_time)
  
  ::google::protobuf::Timestamp* temp = update_time_;
  update_time_ = NULL;
  return temp;
}
inline ::google::protobuf::Timestamp* Dataset::mutable_update_time() {
  
  if (update_time_ == NULL) {
    update_time_ = new ::google::protobuf::Timestamp;
  }
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.logging.v1.Dataset.update_time)
  return update_time_;
}
inline void Dataset::set_allocated_update_time(::google::protobuf::Timestamp* update_time) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(update_time_);
  }
  if (update_time) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast< ::google::protobuf::MessageLite*>(update_time)->GetArena();
    if (message_arena != submessage_arena) {
      update_time = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, update_time, submessage_arena);
    }
    
  } else {
    
  }
  update_time_ = update_time;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.logging.v1.Dataset.update_time)
}

// .google.cloud.bigquery.logging.v1.BigQueryAcl acl = 6;
inline bool Dataset::has_acl() const {
  return this != internal_default_instance() && acl_ != NULL;
}
inline void Dataset::clear_acl() {
  if (GetArenaNoVirtual() == NULL && acl_ != NULL) {
    delete acl_;
  }
  acl_ = NULL;
}
inline const ::google::cloud::bigquery::logging::v1::BigQueryAcl& Dataset::acl() const {
  const ::google::cloud::bigquery::logging::v1::BigQueryAcl* p = acl_;
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.logging.v1.Dataset.acl)
  return p != NULL ? *p : *reinterpret_cast<const ::google::cloud::bigquery::logging::v1::BigQueryAcl*>(
      &::google::cloud::bigquery::logging::v1::_BigQueryAcl_default_instance_);
}
inline ::google::cloud::bigquery::logging::v1::BigQueryAcl* Dataset::release_acl() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.logging.v1.Dataset.acl)
  
  ::google::cloud::bigquery::logging::v1::BigQueryAcl* temp = acl_;
  acl_ = NULL;
  return temp;
}
inline ::google::cloud::bigquery::logging::v1::BigQueryAcl* Dataset::mutable_acl() {
  
  if (acl_ == NULL) {
    acl_ = new ::google::cloud::bigquery::logging::v1::BigQueryAcl;
  }
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.logging.v1.Dataset.acl)
  return acl_;
}
inline void Dataset::set_allocated_acl(::google::cloud::bigquery::logging::v1::BigQueryAcl* acl) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete acl_;
  }
  if (acl) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      acl = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, acl, submessage_arena);
    }
    
  } else {
    
  }
  acl_ = acl;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.logging.v1.Dataset.acl)
}

// .google.protobuf.Duration default_table_expire_duration = 8;
inline bool Dataset::has_default_table_expire_duration() const {
  return this != internal_default_instance() && default_table_expire_duration_ != NULL;
}
inline const ::google::protobuf::Duration& Dataset::default_table_expire_duration() const {
  const ::google::protobuf::Duration* p = default_table_expire_duration_;
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.logging.v1.Dataset.default_table_expire_duration)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::Duration*>(
      &::google::protobuf::_Duration_default_instance_);
}
inline ::google::protobuf::Duration* Dataset::release_default_table_expire_duration() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.logging.v1.Dataset.default_table_expire_duration)
  
  ::google::protobuf::Duration* temp = default_table_expire_duration_;
  default_table_expire_duration_ = NULL;
  return temp;
}
inline ::google::protobuf::Duration* Dataset::mutable_default_table_expire_duration() {
  
  if (default_table_expire_duration_ == NULL) {
    default_table_expire_duration_ = new ::google::protobuf::Duration;
  }
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.logging.v1.Dataset.default_table_expire_duration)
  return default_table_expire_duration_;
}
inline void Dataset::set_allocated_default_table_expire_duration(::google::protobuf::Duration* default_table_expire_duration) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(default_table_expire_duration_);
  }
  if (default_table_expire_duration) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast< ::google::protobuf::MessageLite*>(default_table_expire_duration)->GetArena();
    if (message_arena != submessage_arena) {
      default_table_expire_duration = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, default_table_expire_duration, submessage_arena);
    }
    
  } else {
    
  }
  default_table_expire_duration_ = default_table_expire_duration;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.logging.v1.Dataset.default_table_expire_duration)
}

// -------------------------------------------------------------------

// DatasetInfo

// string friendly_name = 1;
inline void DatasetInfo::clear_friendly_name() {
  friendly_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DatasetInfo::friendly_name() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.logging.v1.DatasetInfo.friendly_name)
  return friendly_name_.GetNoArena();
}
inline void DatasetInfo::set_friendly_name(const ::std::string& value) {
  
  friendly_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.logging.v1.DatasetInfo.friendly_name)
}
#if LANG_CXX11
inline void DatasetInfo::set_friendly_name(::std::string&& value) {
  
  friendly_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.bigquery.logging.v1.DatasetInfo.friendly_name)
}
#endif
inline void DatasetInfo::set_friendly_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  friendly_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.cloud.bigquery.logging.v1.DatasetInfo.friendly_name)
}
inline void DatasetInfo::set_friendly_name(const char* value, size_t size) {
  
  friendly_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.cloud.bigquery.logging.v1.DatasetInfo.friendly_name)
}
inline ::std::string* DatasetInfo::mutable_friendly_name() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.logging.v1.DatasetInfo.friendly_name)
  return friendly_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DatasetInfo::release_friendly_name() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.logging.v1.DatasetInfo.friendly_name)
  
  return friendly_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DatasetInfo::set_allocated_friendly_name(::std::string* friendly_name) {
  if (friendly_name != NULL) {
    
  } else {
    
  }
  friendly_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), friendly_name);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.logging.v1.DatasetInfo.friendly_name)
}

// string description = 2;
inline void DatasetInfo::clear_description() {
  description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DatasetInfo::description() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.logging.v1.DatasetInfo.description)
  return description_.GetNoArena();
}
inline void DatasetInfo::set_description(const ::std::string& value) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.logging.v1.DatasetInfo.description)
}
#if LANG_CXX11
inline void DatasetInfo::set_description(::std::string&& value) {
  
  description_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.bigquery.logging.v1.DatasetInfo.description)
}
#endif
inline void DatasetInfo::set_description(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.cloud.bigquery.logging.v1.DatasetInfo.description)
}
inline void DatasetInfo::set_description(const char* value, size_t size) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.cloud.bigquery.logging.v1.DatasetInfo.description)
}
inline ::std::string* DatasetInfo::mutable_description() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.logging.v1.DatasetInfo.description)
  return description_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DatasetInfo::release_description() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.logging.v1.DatasetInfo.description)
  
  return description_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DatasetInfo::set_allocated_description(::std::string* description) {
  if (description != NULL) {
    
  } else {
    
  }
  description_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.logging.v1.DatasetInfo.description)
}

// -------------------------------------------------------------------

// BigQueryAcl_Entry

// string role = 1;
inline void BigQueryAcl_Entry::clear_role() {
  role_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& BigQueryAcl_Entry::role() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.logging.v1.BigQueryAcl.Entry.role)
  return role_.GetNoArena();
}
inline void BigQueryAcl_Entry::set_role(const ::std::string& value) {
  
  role_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.logging.v1.BigQueryAcl.Entry.role)
}
#if LANG_CXX11
inline void BigQueryAcl_Entry::set_role(::std::string&& value) {
  
  role_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.bigquery.logging.v1.BigQueryAcl.Entry.role)
}
#endif
inline void BigQueryAcl_Entry::set_role(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  role_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.cloud.bigquery.logging.v1.BigQueryAcl.Entry.role)
}
inline void BigQueryAcl_Entry::set_role(const char* value, size_t size) {
  
  role_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.cloud.bigquery.logging.v1.BigQueryAcl.Entry.role)
}
inline ::std::string* BigQueryAcl_Entry::mutable_role() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.logging.v1.BigQueryAcl.Entry.role)
  return role_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BigQueryAcl_Entry::release_role() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.logging.v1.BigQueryAcl.Entry.role)
  
  return role_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BigQueryAcl_Entry::set_allocated_role(::std::string* role) {
  if (role != NULL) {
    
  } else {
    
  }
  role_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), role);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.logging.v1.BigQueryAcl.Entry.role)
}

// string group_email = 2;
inline void BigQueryAcl_Entry::clear_group_email() {
  group_email_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& BigQueryAcl_Entry::group_email() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.logging.v1.BigQueryAcl.Entry.group_email)
  return group_email_.GetNoArena();
}
inline void BigQueryAcl_Entry::set_group_email(const ::std::string& value) {
  
  group_email_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.logging.v1.BigQueryAcl.Entry.group_email)
}
#if LANG_CXX11
inline void BigQueryAcl_Entry::set_group_email(::std::string&& value) {
  
  group_email_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.bigquery.logging.v1.BigQueryAcl.Entry.group_email)
}
#endif
inline void BigQueryAcl_Entry::set_group_email(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  group_email_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.cloud.bigquery.logging.v1.BigQueryAcl.Entry.group_email)
}
inline void BigQueryAcl_Entry::set_group_email(const char* value, size_t size) {
  
  group_email_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.cloud.bigquery.logging.v1.BigQueryAcl.Entry.group_email)
}
inline ::std::string* BigQueryAcl_Entry::mutable_group_email() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.logging.v1.BigQueryAcl.Entry.group_email)
  return group_email_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BigQueryAcl_Entry::release_group_email() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.logging.v1.BigQueryAcl.Entry.group_email)
  
  return group_email_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BigQueryAcl_Entry::set_allocated_group_email(::std::string* group_email) {
  if (group_email != NULL) {
    
  } else {
    
  }
  group_email_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), group_email);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.logging.v1.BigQueryAcl.Entry.group_email)
}

// string user_email = 3;
inline void BigQueryAcl_Entry::clear_user_email() {
  user_email_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& BigQueryAcl_Entry::user_email() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.logging.v1.BigQueryAcl.Entry.user_email)
  return user_email_.GetNoArena();
}
inline void BigQueryAcl_Entry::set_user_email(const ::std::string& value) {
  
  user_email_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.logging.v1.BigQueryAcl.Entry.user_email)
}
#if LANG_CXX11
inline void BigQueryAcl_Entry::set_user_email(::std::string&& value) {
  
  user_email_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.bigquery.logging.v1.BigQueryAcl.Entry.user_email)
}
#endif
inline void BigQueryAcl_Entry::set_user_email(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  user_email_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.cloud.bigquery.logging.v1.BigQueryAcl.Entry.user_email)
}
inline void BigQueryAcl_Entry::set_user_email(const char* value, size_t size) {
  
  user_email_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.cloud.bigquery.logging.v1.BigQueryAcl.Entry.user_email)
}
inline ::std::string* BigQueryAcl_Entry::mutable_user_email() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.logging.v1.BigQueryAcl.Entry.user_email)
  return user_email_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BigQueryAcl_Entry::release_user_email() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.logging.v1.BigQueryAcl.Entry.user_email)
  
  return user_email_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BigQueryAcl_Entry::set_allocated_user_email(::std::string* user_email) {
  if (user_email != NULL) {
    
  } else {
    
  }
  user_email_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user_email);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.logging.v1.BigQueryAcl.Entry.user_email)
}

// string domain = 4;
inline void BigQueryAcl_Entry::clear_domain() {
  domain_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& BigQueryAcl_Entry::domain() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.logging.v1.BigQueryAcl.Entry.domain)
  return domain_.GetNoArena();
}
inline void BigQueryAcl_Entry::set_domain(const ::std::string& value) {
  
  domain_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.logging.v1.BigQueryAcl.Entry.domain)
}
#if LANG_CXX11
inline void BigQueryAcl_Entry::set_domain(::std::string&& value) {
  
  domain_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.bigquery.logging.v1.BigQueryAcl.Entry.domain)
}
#endif
inline void BigQueryAcl_Entry::set_domain(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  domain_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.cloud.bigquery.logging.v1.BigQueryAcl.Entry.domain)
}
inline void BigQueryAcl_Entry::set_domain(const char* value, size_t size) {
  
  domain_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.cloud.bigquery.logging.v1.BigQueryAcl.Entry.domain)
}
inline ::std::string* BigQueryAcl_Entry::mutable_domain() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.logging.v1.BigQueryAcl.Entry.domain)
  return domain_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BigQueryAcl_Entry::release_domain() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.logging.v1.BigQueryAcl.Entry.domain)
  
  return domain_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BigQueryAcl_Entry::set_allocated_domain(::std::string* domain) {
  if (domain != NULL) {
    
  } else {
    
  }
  domain_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), domain);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.logging.v1.BigQueryAcl.Entry.domain)
}

// string special_group = 5;
inline void BigQueryAcl_Entry::clear_special_group() {
  special_group_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& BigQueryAcl_Entry::special_group() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.logging.v1.BigQueryAcl.Entry.special_group)
  return special_group_.GetNoArena();
}
inline void BigQueryAcl_Entry::set_special_group(const ::std::string& value) {
  
  special_group_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.logging.v1.BigQueryAcl.Entry.special_group)
}
#if LANG_CXX11
inline void BigQueryAcl_Entry::set_special_group(::std::string&& value) {
  
  special_group_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.bigquery.logging.v1.BigQueryAcl.Entry.special_group)
}
#endif
inline void BigQueryAcl_Entry::set_special_group(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  special_group_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.cloud.bigquery.logging.v1.BigQueryAcl.Entry.special_group)
}
inline void BigQueryAcl_Entry::set_special_group(const char* value, size_t size) {
  
  special_group_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.cloud.bigquery.logging.v1.BigQueryAcl.Entry.special_group)
}
inline ::std::string* BigQueryAcl_Entry::mutable_special_group() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.logging.v1.BigQueryAcl.Entry.special_group)
  return special_group_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BigQueryAcl_Entry::release_special_group() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.logging.v1.BigQueryAcl.Entry.special_group)
  
  return special_group_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BigQueryAcl_Entry::set_allocated_special_group(::std::string* special_group) {
  if (special_group != NULL) {
    
  } else {
    
  }
  special_group_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), special_group);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.logging.v1.BigQueryAcl.Entry.special_group)
}

// .google.cloud.bigquery.logging.v1.TableName view_name = 6;
inline bool BigQueryAcl_Entry::has_view_name() const {
  return this != internal_default_instance() && view_name_ != NULL;
}
inline void BigQueryAcl_Entry::clear_view_name() {
  if (GetArenaNoVirtual() == NULL && view_name_ != NULL) {
    delete view_name_;
  }
  view_name_ = NULL;
}
inline const ::google::cloud::bigquery::logging::v1::TableName& BigQueryAcl_Entry::view_name() const {
  const ::google::cloud::bigquery::logging::v1::TableName* p = view_name_;
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.logging.v1.BigQueryAcl.Entry.view_name)
  return p != NULL ? *p : *reinterpret_cast<const ::google::cloud::bigquery::logging::v1::TableName*>(
      &::google::cloud::bigquery::logging::v1::_TableName_default_instance_);
}
inline ::google::cloud::bigquery::logging::v1::TableName* BigQueryAcl_Entry::release_view_name() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.logging.v1.BigQueryAcl.Entry.view_name)
  
  ::google::cloud::bigquery::logging::v1::TableName* temp = view_name_;
  view_name_ = NULL;
  return temp;
}
inline ::google::cloud::bigquery::logging::v1::TableName* BigQueryAcl_Entry::mutable_view_name() {
  
  if (view_name_ == NULL) {
    view_name_ = new ::google::cloud::bigquery::logging::v1::TableName;
  }
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.logging.v1.BigQueryAcl.Entry.view_name)
  return view_name_;
}
inline void BigQueryAcl_Entry::set_allocated_view_name(::google::cloud::bigquery::logging::v1::TableName* view_name) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete view_name_;
  }
  if (view_name) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      view_name = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, view_name, submessage_arena);
    }
    
  } else {
    
  }
  view_name_ = view_name;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.logging.v1.BigQueryAcl.Entry.view_name)
}

// -------------------------------------------------------------------

// BigQueryAcl

// repeated .google.cloud.bigquery.logging.v1.BigQueryAcl.Entry entries = 1;
inline int BigQueryAcl::entries_size() const {
  return entries_.size();
}
inline void BigQueryAcl::clear_entries() {
  entries_.Clear();
}
inline const ::google::cloud::bigquery::logging::v1::BigQueryAcl_Entry& BigQueryAcl::entries(int index) const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.logging.v1.BigQueryAcl.entries)
  return entries_.Get(index);
}
inline ::google::cloud::bigquery::logging::v1::BigQueryAcl_Entry* BigQueryAcl::mutable_entries(int index) {
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.logging.v1.BigQueryAcl.entries)
  return entries_.Mutable(index);
}
inline ::google::cloud::bigquery::logging::v1::BigQueryAcl_Entry* BigQueryAcl::add_entries() {
  // @@protoc_insertion_point(field_add:google.cloud.bigquery.logging.v1.BigQueryAcl.entries)
  return entries_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::google::cloud::bigquery::logging::v1::BigQueryAcl_Entry >*
BigQueryAcl::mutable_entries() {
  // @@protoc_insertion_point(field_mutable_list:google.cloud.bigquery.logging.v1.BigQueryAcl.entries)
  return &entries_;
}
inline const ::google::protobuf::RepeatedPtrField< ::google::cloud::bigquery::logging::v1::BigQueryAcl_Entry >&
BigQueryAcl::entries() const {
  // @@protoc_insertion_point(field_list:google.cloud.bigquery.logging.v1.BigQueryAcl.entries)
  return entries_;
}

// -------------------------------------------------------------------

// Job

// .google.cloud.bigquery.logging.v1.JobName job_name = 1;
inline bool Job::has_job_name() const {
  return this != internal_default_instance() && job_name_ != NULL;
}
inline void Job::clear_job_name() {
  if (GetArenaNoVirtual() == NULL && job_name_ != NULL) {
    delete job_name_;
  }
  job_name_ = NULL;
}
inline const ::google::cloud::bigquery::logging::v1::JobName& Job::job_name() const {
  const ::google::cloud::bigquery::logging::v1::JobName* p = job_name_;
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.logging.v1.Job.job_name)
  return p != NULL ? *p : *reinterpret_cast<const ::google::cloud::bigquery::logging::v1::JobName*>(
      &::google::cloud::bigquery::logging::v1::_JobName_default_instance_);
}
inline ::google::cloud::bigquery::logging::v1::JobName* Job::release_job_name() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.logging.v1.Job.job_name)
  
  ::google::cloud::bigquery::logging::v1::JobName* temp = job_name_;
  job_name_ = NULL;
  return temp;
}
inline ::google::cloud::bigquery::logging::v1::JobName* Job::mutable_job_name() {
  
  if (job_name_ == NULL) {
    job_name_ = new ::google::cloud::bigquery::logging::v1::JobName;
  }
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.logging.v1.Job.job_name)
  return job_name_;
}
inline void Job::set_allocated_job_name(::google::cloud::bigquery::logging::v1::JobName* job_name) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete job_name_;
  }
  if (job_name) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      job_name = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, job_name, submessage_arena);
    }
    
  } else {
    
  }
  job_name_ = job_name;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.logging.v1.Job.job_name)
}

// .google.cloud.bigquery.logging.v1.JobConfiguration job_configuration = 2;
inline bool Job::has_job_configuration() const {
  return this != internal_default_instance() && job_configuration_ != NULL;
}
inline void Job::clear_job_configuration() {
  if (GetArenaNoVirtual() == NULL && job_configuration_ != NULL) {
    delete job_configuration_;
  }
  job_configuration_ = NULL;
}
inline const ::google::cloud::bigquery::logging::v1::JobConfiguration& Job::job_configuration() const {
  const ::google::cloud::bigquery::logging::v1::JobConfiguration* p = job_configuration_;
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.logging.v1.Job.job_configuration)
  return p != NULL ? *p : *reinterpret_cast<const ::google::cloud::bigquery::logging::v1::JobConfiguration*>(
      &::google::cloud::bigquery::logging::v1::_JobConfiguration_default_instance_);
}
inline ::google::cloud::bigquery::logging::v1::JobConfiguration* Job::release_job_configuration() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.logging.v1.Job.job_configuration)
  
  ::google::cloud::bigquery::logging::v1::JobConfiguration* temp = job_configuration_;
  job_configuration_ = NULL;
  return temp;
}
inline ::google::cloud::bigquery::logging::v1::JobConfiguration* Job::mutable_job_configuration() {
  
  if (job_configuration_ == NULL) {
    job_configuration_ = new ::google::cloud::bigquery::logging::v1::JobConfiguration;
  }
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.logging.v1.Job.job_configuration)
  return job_configuration_;
}
inline void Job::set_allocated_job_configuration(::google::cloud::bigquery::logging::v1::JobConfiguration* job_configuration) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete job_configuration_;
  }
  if (job_configuration) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      job_configuration = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, job_configuration, submessage_arena);
    }
    
  } else {
    
  }
  job_configuration_ = job_configuration;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.logging.v1.Job.job_configuration)
}

// .google.cloud.bigquery.logging.v1.JobStatus job_status = 3;
inline bool Job::has_job_status() const {
  return this != internal_default_instance() && job_status_ != NULL;
}
inline void Job::clear_job_status() {
  if (GetArenaNoVirtual() == NULL && job_status_ != NULL) {
    delete job_status_;
  }
  job_status_ = NULL;
}
inline const ::google::cloud::bigquery::logging::v1::JobStatus& Job::job_status() const {
  const ::google::cloud::bigquery::logging::v1::JobStatus* p = job_status_;
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.logging.v1.Job.job_status)
  return p != NULL ? *p : *reinterpret_cast<const ::google::cloud::bigquery::logging::v1::JobStatus*>(
      &::google::cloud::bigquery::logging::v1::_JobStatus_default_instance_);
}
inline ::google::cloud::bigquery::logging::v1::JobStatus* Job::release_job_status() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.logging.v1.Job.job_status)
  
  ::google::cloud::bigquery::logging::v1::JobStatus* temp = job_status_;
  job_status_ = NULL;
  return temp;
}
inline ::google::cloud::bigquery::logging::v1::JobStatus* Job::mutable_job_status() {
  
  if (job_status_ == NULL) {
    job_status_ = new ::google::cloud::bigquery::logging::v1::JobStatus;
  }
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.logging.v1.Job.job_status)
  return job_status_;
}
inline void Job::set_allocated_job_status(::google::cloud::bigquery::logging::v1::JobStatus* job_status) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete job_status_;
  }
  if (job_status) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      job_status = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, job_status, submessage_arena);
    }
    
  } else {
    
  }
  job_status_ = job_status;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.logging.v1.Job.job_status)
}

// .google.cloud.bigquery.logging.v1.JobStatistics job_statistics = 4;
inline bool Job::has_job_statistics() const {
  return this != internal_default_instance() && job_statistics_ != NULL;
}
inline void Job::clear_job_statistics() {
  if (GetArenaNoVirtual() == NULL && job_statistics_ != NULL) {
    delete job_statistics_;
  }
  job_statistics_ = NULL;
}
inline const ::google::cloud::bigquery::logging::v1::JobStatistics& Job::job_statistics() const {
  const ::google::cloud::bigquery::logging::v1::JobStatistics* p = job_statistics_;
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.logging.v1.Job.job_statistics)
  return p != NULL ? *p : *reinterpret_cast<const ::google::cloud::bigquery::logging::v1::JobStatistics*>(
      &::google::cloud::bigquery::logging::v1::_JobStatistics_default_instance_);
}
inline ::google::cloud::bigquery::logging::v1::JobStatistics* Job::release_job_statistics() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.logging.v1.Job.job_statistics)
  
  ::google::cloud::bigquery::logging::v1::JobStatistics* temp = job_statistics_;
  job_statistics_ = NULL;
  return temp;
}
inline ::google::cloud::bigquery::logging::v1::JobStatistics* Job::mutable_job_statistics() {
  
  if (job_statistics_ == NULL) {
    job_statistics_ = new ::google::cloud::bigquery::logging::v1::JobStatistics;
  }
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.logging.v1.Job.job_statistics)
  return job_statistics_;
}
inline void Job::set_allocated_job_statistics(::google::cloud::bigquery::logging::v1::JobStatistics* job_statistics) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete job_statistics_;
  }
  if (job_statistics) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      job_statistics = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, job_statistics, submessage_arena);
    }
    
  } else {
    
  }
  job_statistics_ = job_statistics;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.logging.v1.Job.job_statistics)
}

// -------------------------------------------------------------------

// JobConfiguration_Query

// string query = 1;
inline void JobConfiguration_Query::clear_query() {
  query_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& JobConfiguration_Query::query() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.logging.v1.JobConfiguration.Query.query)
  return query_.GetNoArena();
}
inline void JobConfiguration_Query::set_query(const ::std::string& value) {
  
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.logging.v1.JobConfiguration.Query.query)
}
#if LANG_CXX11
inline void JobConfiguration_Query::set_query(::std::string&& value) {
  
  query_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.bigquery.logging.v1.JobConfiguration.Query.query)
}
#endif
inline void JobConfiguration_Query::set_query(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.cloud.bigquery.logging.v1.JobConfiguration.Query.query)
}
inline void JobConfiguration_Query::set_query(const char* value, size_t size) {
  
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.cloud.bigquery.logging.v1.JobConfiguration.Query.query)
}
inline ::std::string* JobConfiguration_Query::mutable_query() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.logging.v1.JobConfiguration.Query.query)
  return query_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* JobConfiguration_Query::release_query() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.logging.v1.JobConfiguration.Query.query)
  
  return query_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void JobConfiguration_Query::set_allocated_query(::std::string* query) {
  if (query != NULL) {
    
  } else {
    
  }
  query_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), query);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.logging.v1.JobConfiguration.Query.query)
}

// .google.cloud.bigquery.logging.v1.TableName destination_table = 2;
inline bool JobConfiguration_Query::has_destination_table() const {
  return this != internal_default_instance() && destination_table_ != NULL;
}
inline void JobConfiguration_Query::clear_destination_table() {
  if (GetArenaNoVirtual() == NULL && destination_table_ != NULL) {
    delete destination_table_;
  }
  destination_table_ = NULL;
}
inline const ::google::cloud::bigquery::logging::v1::TableName& JobConfiguration_Query::destination_table() const {
  const ::google::cloud::bigquery::logging::v1::TableName* p = destination_table_;
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.logging.v1.JobConfiguration.Query.destination_table)
  return p != NULL ? *p : *reinterpret_cast<const ::google::cloud::bigquery::logging::v1::TableName*>(
      &::google::cloud::bigquery::logging::v1::_TableName_default_instance_);
}
inline ::google::cloud::bigquery::logging::v1::TableName* JobConfiguration_Query::release_destination_table() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.logging.v1.JobConfiguration.Query.destination_table)
  
  ::google::cloud::bigquery::logging::v1::TableName* temp = destination_table_;
  destination_table_ = NULL;
  return temp;
}
inline ::google::cloud::bigquery::logging::v1::TableName* JobConfiguration_Query::mutable_destination_table() {
  
  if (destination_table_ == NULL) {
    destination_table_ = new ::google::cloud::bigquery::logging::v1::TableName;
  }
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.logging.v1.JobConfiguration.Query.destination_table)
  return destination_table_;
}
inline void JobConfiguration_Query::set_allocated_destination_table(::google::cloud::bigquery::logging::v1::TableName* destination_table) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete destination_table_;
  }
  if (destination_table) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      destination_table = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, destination_table, submessage_arena);
    }
    
  } else {
    
  }
  destination_table_ = destination_table;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.logging.v1.JobConfiguration.Query.destination_table)
}

// string create_disposition = 3;
inline void JobConfiguration_Query::clear_create_disposition() {
  create_disposition_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& JobConfiguration_Query::create_disposition() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.logging.v1.JobConfiguration.Query.create_disposition)
  return create_disposition_.GetNoArena();
}
inline void JobConfiguration_Query::set_create_disposition(const ::std::string& value) {
  
  create_disposition_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.logging.v1.JobConfiguration.Query.create_disposition)
}
#if LANG_CXX11
inline void JobConfiguration_Query::set_create_disposition(::std::string&& value) {
  
  create_disposition_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.bigquery.logging.v1.JobConfiguration.Query.create_disposition)
}
#endif
inline void JobConfiguration_Query::set_create_disposition(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  create_disposition_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.cloud.bigquery.logging.v1.JobConfiguration.Query.create_disposition)
}
inline void JobConfiguration_Query::set_create_disposition(const char* value, size_t size) {
  
  create_disposition_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.cloud.bigquery.logging.v1.JobConfiguration.Query.create_disposition)
}
inline ::std::string* JobConfiguration_Query::mutable_create_disposition() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.logging.v1.JobConfiguration.Query.create_disposition)
  return create_disposition_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* JobConfiguration_Query::release_create_disposition() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.logging.v1.JobConfiguration.Query.create_disposition)
  
  return create_disposition_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void JobConfiguration_Query::set_allocated_create_disposition(::std::string* create_disposition) {
  if (create_disposition != NULL) {
    
  } else {
    
  }
  create_disposition_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), create_disposition);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.logging.v1.JobConfiguration.Query.create_disposition)
}

// string write_disposition = 4;
inline void JobConfiguration_Query::clear_write_disposition() {
  write_disposition_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& JobConfiguration_Query::write_disposition() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.logging.v1.JobConfiguration.Query.write_disposition)
  return write_disposition_.GetNoArena();
}
inline void JobConfiguration_Query::set_write_disposition(const ::std::string& value) {
  
  write_disposition_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.logging.v1.JobConfiguration.Query.write_disposition)
}
#if LANG_CXX11
inline void JobConfiguration_Query::set_write_disposition(::std::string&& value) {
  
  write_disposition_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.bigquery.logging.v1.JobConfiguration.Query.write_disposition)
}
#endif
inline void JobConfiguration_Query::set_write_disposition(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  write_disposition_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.cloud.bigquery.logging.v1.JobConfiguration.Query.write_disposition)
}
inline void JobConfiguration_Query::set_write_disposition(const char* value, size_t size) {
  
  write_disposition_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.cloud.bigquery.logging.v1.JobConfiguration.Query.write_disposition)
}
inline ::std::string* JobConfiguration_Query::mutable_write_disposition() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.logging.v1.JobConfiguration.Query.write_disposition)
  return write_disposition_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* JobConfiguration_Query::release_write_disposition() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.logging.v1.JobConfiguration.Query.write_disposition)
  
  return write_disposition_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void JobConfiguration_Query::set_allocated_write_disposition(::std::string* write_disposition) {
  if (write_disposition != NULL) {
    
  } else {
    
  }
  write_disposition_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), write_disposition);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.logging.v1.JobConfiguration.Query.write_disposition)
}

// .google.cloud.bigquery.logging.v1.DatasetName default_dataset = 5;
inline bool JobConfiguration_Query::has_default_dataset() const {
  return this != internal_default_instance() && default_dataset_ != NULL;
}
inline void JobConfiguration_Query::clear_default_dataset() {
  if (GetArenaNoVirtual() == NULL && default_dataset_ != NULL) {
    delete default_dataset_;
  }
  default_dataset_ = NULL;
}
inline const ::google::cloud::bigquery::logging::v1::DatasetName& JobConfiguration_Query::default_dataset() const {
  const ::google::cloud::bigquery::logging::v1::DatasetName* p = default_dataset_;
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.logging.v1.JobConfiguration.Query.default_dataset)
  return p != NULL ? *p : *reinterpret_cast<const ::google::cloud::bigquery::logging::v1::DatasetName*>(
      &::google::cloud::bigquery::logging::v1::_DatasetName_default_instance_);
}
inline ::google::cloud::bigquery::logging::v1::DatasetName* JobConfiguration_Query::release_default_dataset() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.logging.v1.JobConfiguration.Query.default_dataset)
  
  ::google::cloud::bigquery::logging::v1::DatasetName* temp = default_dataset_;
  default_dataset_ = NULL;
  return temp;
}
inline ::google::cloud::bigquery::logging::v1::DatasetName* JobConfiguration_Query::mutable_default_dataset() {
  
  if (default_dataset_ == NULL) {
    default_dataset_ = new ::google::cloud::bigquery::logging::v1::DatasetName;
  }
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.logging.v1.JobConfiguration.Query.default_dataset)
  return default_dataset_;
}
inline void JobConfiguration_Query::set_allocated_default_dataset(::google::cloud::bigquery::logging::v1::DatasetName* default_dataset) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete default_dataset_;
  }
  if (default_dataset) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      default_dataset = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, default_dataset, submessage_arena);
    }
    
  } else {
    
  }
  default_dataset_ = default_dataset;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.logging.v1.JobConfiguration.Query.default_dataset)
}

// repeated .google.cloud.bigquery.logging.v1.TableDefinition table_definitions = 6;
inline int JobConfiguration_Query::table_definitions_size() const {
  return table_definitions_.size();
}
inline void JobConfiguration_Query::clear_table_definitions() {
  table_definitions_.Clear();
}
inline const ::google::cloud::bigquery::logging::v1::TableDefinition& JobConfiguration_Query::table_definitions(int index) const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.logging.v1.JobConfiguration.Query.table_definitions)
  return table_definitions_.Get(index);
}
inline ::google::cloud::bigquery::logging::v1::TableDefinition* JobConfiguration_Query::mutable_table_definitions(int index) {
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.logging.v1.JobConfiguration.Query.table_definitions)
  return table_definitions_.Mutable(index);
}
inline ::google::cloud::bigquery::logging::v1::TableDefinition* JobConfiguration_Query::add_table_definitions() {
  // @@protoc_insertion_point(field_add:google.cloud.bigquery.logging.v1.JobConfiguration.Query.table_definitions)
  return table_definitions_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::google::cloud::bigquery::logging::v1::TableDefinition >*
JobConfiguration_Query::mutable_table_definitions() {
  // @@protoc_insertion_point(field_mutable_list:google.cloud.bigquery.logging.v1.JobConfiguration.Query.table_definitions)
  return &table_definitions_;
}
inline const ::google::protobuf::RepeatedPtrField< ::google::cloud::bigquery::logging::v1::TableDefinition >&
JobConfiguration_Query::table_definitions() const {
  // @@protoc_insertion_point(field_list:google.cloud.bigquery.logging.v1.JobConfiguration.Query.table_definitions)
  return table_definitions_;
}

// -------------------------------------------------------------------

// JobConfiguration_Load

// repeated string source_uris = 1;
inline int JobConfiguration_Load::source_uris_size() const {
  return source_uris_.size();
}
inline void JobConfiguration_Load::clear_source_uris() {
  source_uris_.Clear();
}
inline const ::std::string& JobConfiguration_Load::source_uris(int index) const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.logging.v1.JobConfiguration.Load.source_uris)
  return source_uris_.Get(index);
}
inline ::std::string* JobConfiguration_Load::mutable_source_uris(int index) {
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.logging.v1.JobConfiguration.Load.source_uris)
  return source_uris_.Mutable(index);
}
inline void JobConfiguration_Load::set_source_uris(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.logging.v1.JobConfiguration.Load.source_uris)
  source_uris_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void JobConfiguration_Load::set_source_uris(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.logging.v1.JobConfiguration.Load.source_uris)
  source_uris_.Mutable(index)->assign(std::move(value));
}
#endif
inline void JobConfiguration_Load::set_source_uris(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  source_uris_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:google.cloud.bigquery.logging.v1.JobConfiguration.Load.source_uris)
}
inline void JobConfiguration_Load::set_source_uris(int index, const char* value, size_t size) {
  source_uris_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:google.cloud.bigquery.logging.v1.JobConfiguration.Load.source_uris)
}
inline ::std::string* JobConfiguration_Load::add_source_uris() {
  // @@protoc_insertion_point(field_add_mutable:google.cloud.bigquery.logging.v1.JobConfiguration.Load.source_uris)
  return source_uris_.Add();
}
inline void JobConfiguration_Load::add_source_uris(const ::std::string& value) {
  source_uris_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:google.cloud.bigquery.logging.v1.JobConfiguration.Load.source_uris)
}
#if LANG_CXX11
inline void JobConfiguration_Load::add_source_uris(::std::string&& value) {
  source_uris_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:google.cloud.bigquery.logging.v1.JobConfiguration.Load.source_uris)
}
#endif
inline void JobConfiguration_Load::add_source_uris(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  source_uris_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:google.cloud.bigquery.logging.v1.JobConfiguration.Load.source_uris)
}
inline void JobConfiguration_Load::add_source_uris(const char* value, size_t size) {
  source_uris_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:google.cloud.bigquery.logging.v1.JobConfiguration.Load.source_uris)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
JobConfiguration_Load::source_uris() const {
  // @@protoc_insertion_point(field_list:google.cloud.bigquery.logging.v1.JobConfiguration.Load.source_uris)
  return source_uris_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
JobConfiguration_Load::mutable_source_uris() {
  // @@protoc_insertion_point(field_mutable_list:google.cloud.bigquery.logging.v1.JobConfiguration.Load.source_uris)
  return &source_uris_;
}

// string schema_json = 6;
inline void JobConfiguration_Load::clear_schema_json() {
  schema_json_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& JobConfiguration_Load::schema_json() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.logging.v1.JobConfiguration.Load.schema_json)
  return schema_json_.GetNoArena();
}
inline void JobConfiguration_Load::set_schema_json(const ::std::string& value) {
  
  schema_json_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.logging.v1.JobConfiguration.Load.schema_json)
}
#if LANG_CXX11
inline void JobConfiguration_Load::set_schema_json(::std::string&& value) {
  
  schema_json_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.bigquery.logging.v1.JobConfiguration.Load.schema_json)
}
#endif
inline void JobConfiguration_Load::set_schema_json(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  schema_json_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.cloud.bigquery.logging.v1.JobConfiguration.Load.schema_json)
}
inline void JobConfiguration_Load::set_schema_json(const char* value, size_t size) {
  
  schema_json_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.cloud.bigquery.logging.v1.JobConfiguration.Load.schema_json)
}
inline ::std::string* JobConfiguration_Load::mutable_schema_json() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.logging.v1.JobConfiguration.Load.schema_json)
  return schema_json_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* JobConfiguration_Load::release_schema_json() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.logging.v1.JobConfiguration.Load.schema_json)
  
  return schema_json_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void JobConfiguration_Load::set_allocated_schema_json(::std::string* schema_json) {
  if (schema_json != NULL) {
    
  } else {
    
  }
  schema_json_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), schema_json);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.logging.v1.JobConfiguration.Load.schema_json)
}

// .google.cloud.bigquery.logging.v1.TableName destination_table = 3;
inline bool JobConfiguration_Load::has_destination_table() const {
  return this != internal_default_instance() && destination_table_ != NULL;
}
inline void JobConfiguration_Load::clear_destination_table() {
  if (GetArenaNoVirtual() == NULL && destination_table_ != NULL) {
    delete destination_table_;
  }
  destination_table_ = NULL;
}
inline const ::google::cloud::bigquery::logging::v1::TableName& JobConfiguration_Load::destination_table() const {
  const ::google::cloud::bigquery::logging::v1::TableName* p = destination_table_;
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.logging.v1.JobConfiguration.Load.destination_table)
  return p != NULL ? *p : *reinterpret_cast<const ::google::cloud::bigquery::logging::v1::TableName*>(
      &::google::cloud::bigquery::logging::v1::_TableName_default_instance_);
}
inline ::google::cloud::bigquery::logging::v1::TableName* JobConfiguration_Load::release_destination_table() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.logging.v1.JobConfiguration.Load.destination_table)
  
  ::google::cloud::bigquery::logging::v1::TableName* temp = destination_table_;
  destination_table_ = NULL;
  return temp;
}
inline ::google::cloud::bigquery::logging::v1::TableName* JobConfiguration_Load::mutable_destination_table() {
  
  if (destination_table_ == NULL) {
    destination_table_ = new ::google::cloud::bigquery::logging::v1::TableName;
  }
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.logging.v1.JobConfiguration.Load.destination_table)
  return destination_table_;
}
inline void JobConfiguration_Load::set_allocated_destination_table(::google::cloud::bigquery::logging::v1::TableName* destination_table) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete destination_table_;
  }
  if (destination_table) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      destination_table = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, destination_table, submessage_arena);
    }
    
  } else {
    
  }
  destination_table_ = destination_table;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.logging.v1.JobConfiguration.Load.destination_table)
}

// string create_disposition = 4;
inline void JobConfiguration_Load::clear_create_disposition() {
  create_disposition_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& JobConfiguration_Load::create_disposition() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.logging.v1.JobConfiguration.Load.create_disposition)
  return create_disposition_.GetNoArena();
}
inline void JobConfiguration_Load::set_create_disposition(const ::std::string& value) {
  
  create_disposition_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.logging.v1.JobConfiguration.Load.create_disposition)
}
#if LANG_CXX11
inline void JobConfiguration_Load::set_create_disposition(::std::string&& value) {
  
  create_disposition_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.bigquery.logging.v1.JobConfiguration.Load.create_disposition)
}
#endif
inline void JobConfiguration_Load::set_create_disposition(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  create_disposition_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.cloud.bigquery.logging.v1.JobConfiguration.Load.create_disposition)
}
inline void JobConfiguration_Load::set_create_disposition(const char* value, size_t size) {
  
  create_disposition_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.cloud.bigquery.logging.v1.JobConfiguration.Load.create_disposition)
}
inline ::std::string* JobConfiguration_Load::mutable_create_disposition() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.logging.v1.JobConfiguration.Load.create_disposition)
  return create_disposition_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* JobConfiguration_Load::release_create_disposition() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.logging.v1.JobConfiguration.Load.create_disposition)
  
  return create_disposition_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void JobConfiguration_Load::set_allocated_create_disposition(::std::string* create_disposition) {
  if (create_disposition != NULL) {
    
  } else {
    
  }
  create_disposition_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), create_disposition);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.logging.v1.JobConfiguration.Load.create_disposition)
}

// string write_disposition = 5;
inline void JobConfiguration_Load::clear_write_disposition() {
  write_disposition_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& JobConfiguration_Load::write_disposition() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.logging.v1.JobConfiguration.Load.write_disposition)
  return write_disposition_.GetNoArena();
}
inline void JobConfiguration_Load::set_write_disposition(const ::std::string& value) {
  
  write_disposition_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.logging.v1.JobConfiguration.Load.write_disposition)
}
#if LANG_CXX11
inline void JobConfiguration_Load::set_write_disposition(::std::string&& value) {
  
  write_disposition_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.bigquery.logging.v1.JobConfiguration.Load.write_disposition)
}
#endif
inline void JobConfiguration_Load::set_write_disposition(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  write_disposition_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.cloud.bigquery.logging.v1.JobConfiguration.Load.write_disposition)
}
inline void JobConfiguration_Load::set_write_disposition(const char* value, size_t size) {
  
  write_disposition_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.cloud.bigquery.logging.v1.JobConfiguration.Load.write_disposition)
}
inline ::std::string* JobConfiguration_Load::mutable_write_disposition() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.logging.v1.JobConfiguration.Load.write_disposition)
  return write_disposition_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* JobConfiguration_Load::release_write_disposition() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.logging.v1.JobConfiguration.Load.write_disposition)
  
  return write_disposition_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void JobConfiguration_Load::set_allocated_write_disposition(::std::string* write_disposition) {
  if (write_disposition != NULL) {
    
  } else {
    
  }
  write_disposition_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), write_disposition);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.logging.v1.JobConfiguration.Load.write_disposition)
}

// -------------------------------------------------------------------

// JobConfiguration_Extract

// repeated string destination_uris = 1;
inline int JobConfiguration_Extract::destination_uris_size() const {
  return destination_uris_.size();
}
inline void JobConfiguration_Extract::clear_destination_uris() {
  destination_uris_.Clear();
}
inline const ::std::string& JobConfiguration_Extract::destination_uris(int index) const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.logging.v1.JobConfiguration.Extract.destination_uris)
  return destination_uris_.Get(index);
}
inline ::std::string* JobConfiguration_Extract::mutable_destination_uris(int index) {
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.logging.v1.JobConfiguration.Extract.destination_uris)
  return destination_uris_.Mutable(index);
}
inline void JobConfiguration_Extract::set_destination_uris(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.logging.v1.JobConfiguration.Extract.destination_uris)
  destination_uris_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void JobConfiguration_Extract::set_destination_uris(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.logging.v1.JobConfiguration.Extract.destination_uris)
  destination_uris_.Mutable(index)->assign(std::move(value));
}
#endif
inline void JobConfiguration_Extract::set_destination_uris(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  destination_uris_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:google.cloud.bigquery.logging.v1.JobConfiguration.Extract.destination_uris)
}
inline void JobConfiguration_Extract::set_destination_uris(int index, const char* value, size_t size) {
  destination_uris_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:google.cloud.bigquery.logging.v1.JobConfiguration.Extract.destination_uris)
}
inline ::std::string* JobConfiguration_Extract::add_destination_uris() {
  // @@protoc_insertion_point(field_add_mutable:google.cloud.bigquery.logging.v1.JobConfiguration.Extract.destination_uris)
  return destination_uris_.Add();
}
inline void JobConfiguration_Extract::add_destination_uris(const ::std::string& value) {
  destination_uris_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:google.cloud.bigquery.logging.v1.JobConfiguration.Extract.destination_uris)
}
#if LANG_CXX11
inline void JobConfiguration_Extract::add_destination_uris(::std::string&& value) {
  destination_uris_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:google.cloud.bigquery.logging.v1.JobConfiguration.Extract.destination_uris)
}
#endif
inline void JobConfiguration_Extract::add_destination_uris(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  destination_uris_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:google.cloud.bigquery.logging.v1.JobConfiguration.Extract.destination_uris)
}
inline void JobConfiguration_Extract::add_destination_uris(const char* value, size_t size) {
  destination_uris_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:google.cloud.bigquery.logging.v1.JobConfiguration.Extract.destination_uris)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
JobConfiguration_Extract::destination_uris() const {
  // @@protoc_insertion_point(field_list:google.cloud.bigquery.logging.v1.JobConfiguration.Extract.destination_uris)
  return destination_uris_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
JobConfiguration_Extract::mutable_destination_uris() {
  // @@protoc_insertion_point(field_mutable_list:google.cloud.bigquery.logging.v1.JobConfiguration.Extract.destination_uris)
  return &destination_uris_;
}

// .google.cloud.bigquery.logging.v1.TableName source_table = 2;
inline bool JobConfiguration_Extract::has_source_table() const {
  return this != internal_default_instance() && source_table_ != NULL;
}
inline void JobConfiguration_Extract::clear_source_table() {
  if (GetArenaNoVirtual() == NULL && source_table_ != NULL) {
    delete source_table_;
  }
  source_table_ = NULL;
}
inline const ::google::cloud::bigquery::logging::v1::TableName& JobConfiguration_Extract::source_table() const {
  const ::google::cloud::bigquery::logging::v1::TableName* p = source_table_;
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.logging.v1.JobConfiguration.Extract.source_table)
  return p != NULL ? *p : *reinterpret_cast<const ::google::cloud::bigquery::logging::v1::TableName*>(
      &::google::cloud::bigquery::logging::v1::_TableName_default_instance_);
}
inline ::google::cloud::bigquery::logging::v1::TableName* JobConfiguration_Extract::release_source_table() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.logging.v1.JobConfiguration.Extract.source_table)
  
  ::google::cloud::bigquery::logging::v1::TableName* temp = source_table_;
  source_table_ = NULL;
  return temp;
}
inline ::google::cloud::bigquery::logging::v1::TableName* JobConfiguration_Extract::mutable_source_table() {
  
  if (source_table_ == NULL) {
    source_table_ = new ::google::cloud::bigquery::logging::v1::TableName;
  }
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.logging.v1.JobConfiguration.Extract.source_table)
  return source_table_;
}
inline void JobConfiguration_Extract::set_allocated_source_table(::google::cloud::bigquery::logging::v1::TableName* source_table) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete source_table_;
  }
  if (source_table) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      source_table = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, source_table, submessage_arena);
    }
    
  } else {
    
  }
  source_table_ = source_table;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.logging.v1.JobConfiguration.Extract.source_table)
}

// -------------------------------------------------------------------

// JobConfiguration_TableCopy

// repeated .google.cloud.bigquery.logging.v1.TableName source_tables = 1;
inline int JobConfiguration_TableCopy::source_tables_size() const {
  return source_tables_.size();
}
inline void JobConfiguration_TableCopy::clear_source_tables() {
  source_tables_.Clear();
}
inline const ::google::cloud::bigquery::logging::v1::TableName& JobConfiguration_TableCopy::source_tables(int index) const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.logging.v1.JobConfiguration.TableCopy.source_tables)
  return source_tables_.Get(index);
}
inline ::google::cloud::bigquery::logging::v1::TableName* JobConfiguration_TableCopy::mutable_source_tables(int index) {
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.logging.v1.JobConfiguration.TableCopy.source_tables)
  return source_tables_.Mutable(index);
}
inline ::google::cloud::bigquery::logging::v1::TableName* JobConfiguration_TableCopy::add_source_tables() {
  // @@protoc_insertion_point(field_add:google.cloud.bigquery.logging.v1.JobConfiguration.TableCopy.source_tables)
  return source_tables_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::google::cloud::bigquery::logging::v1::TableName >*
JobConfiguration_TableCopy::mutable_source_tables() {
  // @@protoc_insertion_point(field_mutable_list:google.cloud.bigquery.logging.v1.JobConfiguration.TableCopy.source_tables)
  return &source_tables_;
}
inline const ::google::protobuf::RepeatedPtrField< ::google::cloud::bigquery::logging::v1::TableName >&
JobConfiguration_TableCopy::source_tables() const {
  // @@protoc_insertion_point(field_list:google.cloud.bigquery.logging.v1.JobConfiguration.TableCopy.source_tables)
  return source_tables_;
}

// .google.cloud.bigquery.logging.v1.TableName destination_table = 2;
inline bool JobConfiguration_TableCopy::has_destination_table() const {
  return this != internal_default_instance() && destination_table_ != NULL;
}
inline void JobConfiguration_TableCopy::clear_destination_table() {
  if (GetArenaNoVirtual() == NULL && destination_table_ != NULL) {
    delete destination_table_;
  }
  destination_table_ = NULL;
}
inline const ::google::cloud::bigquery::logging::v1::TableName& JobConfiguration_TableCopy::destination_table() const {
  const ::google::cloud::bigquery::logging::v1::TableName* p = destination_table_;
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.logging.v1.JobConfiguration.TableCopy.destination_table)
  return p != NULL ? *p : *reinterpret_cast<const ::google::cloud::bigquery::logging::v1::TableName*>(
      &::google::cloud::bigquery::logging::v1::_TableName_default_instance_);
}
inline ::google::cloud::bigquery::logging::v1::TableName* JobConfiguration_TableCopy::release_destination_table() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.logging.v1.JobConfiguration.TableCopy.destination_table)
  
  ::google::cloud::bigquery::logging::v1::TableName* temp = destination_table_;
  destination_table_ = NULL;
  return temp;
}
inline ::google::cloud::bigquery::logging::v1::TableName* JobConfiguration_TableCopy::mutable_destination_table() {
  
  if (destination_table_ == NULL) {
    destination_table_ = new ::google::cloud::bigquery::logging::v1::TableName;
  }
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.logging.v1.JobConfiguration.TableCopy.destination_table)
  return destination_table_;
}
inline void JobConfiguration_TableCopy::set_allocated_destination_table(::google::cloud::bigquery::logging::v1::TableName* destination_table) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete destination_table_;
  }
  if (destination_table) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      destination_table = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, destination_table, submessage_arena);
    }
    
  } else {
    
  }
  destination_table_ = destination_table;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.logging.v1.JobConfiguration.TableCopy.destination_table)
}

// string create_disposition = 3;
inline void JobConfiguration_TableCopy::clear_create_disposition() {
  create_disposition_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& JobConfiguration_TableCopy::create_disposition() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.logging.v1.JobConfiguration.TableCopy.create_disposition)
  return create_disposition_.GetNoArena();
}
inline void JobConfiguration_TableCopy::set_create_disposition(const ::std::string& value) {
  
  create_disposition_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.logging.v1.JobConfiguration.TableCopy.create_disposition)
}
#if LANG_CXX11
inline void JobConfiguration_TableCopy::set_create_disposition(::std::string&& value) {
  
  create_disposition_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.bigquery.logging.v1.JobConfiguration.TableCopy.create_disposition)
}
#endif
inline void JobConfiguration_TableCopy::set_create_disposition(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  create_disposition_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.cloud.bigquery.logging.v1.JobConfiguration.TableCopy.create_disposition)
}
inline void JobConfiguration_TableCopy::set_create_disposition(const char* value, size_t size) {
  
  create_disposition_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.cloud.bigquery.logging.v1.JobConfiguration.TableCopy.create_disposition)
}
inline ::std::string* JobConfiguration_TableCopy::mutable_create_disposition() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.logging.v1.JobConfiguration.TableCopy.create_disposition)
  return create_disposition_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* JobConfiguration_TableCopy::release_create_disposition() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.logging.v1.JobConfiguration.TableCopy.create_disposition)
  
  return create_disposition_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void JobConfiguration_TableCopy::set_allocated_create_disposition(::std::string* create_disposition) {
  if (create_disposition != NULL) {
    
  } else {
    
  }
  create_disposition_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), create_disposition);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.logging.v1.JobConfiguration.TableCopy.create_disposition)
}

// string write_disposition = 4;
inline void JobConfiguration_TableCopy::clear_write_disposition() {
  write_disposition_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& JobConfiguration_TableCopy::write_disposition() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.logging.v1.JobConfiguration.TableCopy.write_disposition)
  return write_disposition_.GetNoArena();
}
inline void JobConfiguration_TableCopy::set_write_disposition(const ::std::string& value) {
  
  write_disposition_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.logging.v1.JobConfiguration.TableCopy.write_disposition)
}
#if LANG_CXX11
inline void JobConfiguration_TableCopy::set_write_disposition(::std::string&& value) {
  
  write_disposition_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.bigquery.logging.v1.JobConfiguration.TableCopy.write_disposition)
}
#endif
inline void JobConfiguration_TableCopy::set_write_disposition(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  write_disposition_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.cloud.bigquery.logging.v1.JobConfiguration.TableCopy.write_disposition)
}
inline void JobConfiguration_TableCopy::set_write_disposition(const char* value, size_t size) {
  
  write_disposition_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.cloud.bigquery.logging.v1.JobConfiguration.TableCopy.write_disposition)
}
inline ::std::string* JobConfiguration_TableCopy::mutable_write_disposition() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.logging.v1.JobConfiguration.TableCopy.write_disposition)
  return write_disposition_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* JobConfiguration_TableCopy::release_write_disposition() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.logging.v1.JobConfiguration.TableCopy.write_disposition)
  
  return write_disposition_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void JobConfiguration_TableCopy::set_allocated_write_disposition(::std::string* write_disposition) {
  if (write_disposition != NULL) {
    
  } else {
    
  }
  write_disposition_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), write_disposition);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.logging.v1.JobConfiguration.TableCopy.write_disposition)
}

// -------------------------------------------------------------------

// JobConfiguration

// .google.cloud.bigquery.logging.v1.JobConfiguration.Query query = 5;
inline bool JobConfiguration::has_query() const {
  return configuration_case() == kQuery;
}
inline void JobConfiguration::set_has_query() {
  _oneof_case_[0] = kQuery;
}
inline void JobConfiguration::clear_query() {
  if (has_query()) {
    delete configuration_.query_;
    clear_has_configuration();
  }
}
inline ::google::cloud::bigquery::logging::v1::JobConfiguration_Query* JobConfiguration::release_query() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.logging.v1.JobConfiguration.query)
  if (has_query()) {
    clear_has_configuration();
      ::google::cloud::bigquery::logging::v1::JobConfiguration_Query* temp = configuration_.query_;
    configuration_.query_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::cloud::bigquery::logging::v1::JobConfiguration_Query& JobConfiguration::query() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.logging.v1.JobConfiguration.query)
  return has_query()
      ? *configuration_.query_
      : *reinterpret_cast< ::google::cloud::bigquery::logging::v1::JobConfiguration_Query*>(&::google::cloud::bigquery::logging::v1::_JobConfiguration_Query_default_instance_);
}
inline ::google::cloud::bigquery::logging::v1::JobConfiguration_Query* JobConfiguration::mutable_query() {
  if (!has_query()) {
    clear_configuration();
    set_has_query();
    configuration_.query_ = new ::google::cloud::bigquery::logging::v1::JobConfiguration_Query;
  }
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.logging.v1.JobConfiguration.query)
  return configuration_.query_;
}

// .google.cloud.bigquery.logging.v1.JobConfiguration.Load load = 6;
inline bool JobConfiguration::has_load() const {
  return configuration_case() == kLoad;
}
inline void JobConfiguration::set_has_load() {
  _oneof_case_[0] = kLoad;
}
inline void JobConfiguration::clear_load() {
  if (has_load()) {
    delete configuration_.load_;
    clear_has_configuration();
  }
}
inline ::google::cloud::bigquery::logging::v1::JobConfiguration_Load* JobConfiguration::release_load() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.logging.v1.JobConfiguration.load)
  if (has_load()) {
    clear_has_configuration();
      ::google::cloud::bigquery::logging::v1::JobConfiguration_Load* temp = configuration_.load_;
    configuration_.load_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::cloud::bigquery::logging::v1::JobConfiguration_Load& JobConfiguration::load() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.logging.v1.JobConfiguration.load)
  return has_load()
      ? *configuration_.load_
      : *reinterpret_cast< ::google::cloud::bigquery::logging::v1::JobConfiguration_Load*>(&::google::cloud::bigquery::logging::v1::_JobConfiguration_Load_default_instance_);
}
inline ::google::cloud::bigquery::logging::v1::JobConfiguration_Load* JobConfiguration::mutable_load() {
  if (!has_load()) {
    clear_configuration();
    set_has_load();
    configuration_.load_ = new ::google::cloud::bigquery::logging::v1::JobConfiguration_Load;
  }
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.logging.v1.JobConfiguration.load)
  return configuration_.load_;
}

// .google.cloud.bigquery.logging.v1.JobConfiguration.Extract extract = 7;
inline bool JobConfiguration::has_extract() const {
  return configuration_case() == kExtract;
}
inline void JobConfiguration::set_has_extract() {
  _oneof_case_[0] = kExtract;
}
inline void JobConfiguration::clear_extract() {
  if (has_extract()) {
    delete configuration_.extract_;
    clear_has_configuration();
  }
}
inline ::google::cloud::bigquery::logging::v1::JobConfiguration_Extract* JobConfiguration::release_extract() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.logging.v1.JobConfiguration.extract)
  if (has_extract()) {
    clear_has_configuration();
      ::google::cloud::bigquery::logging::v1::JobConfiguration_Extract* temp = configuration_.extract_;
    configuration_.extract_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::cloud::bigquery::logging::v1::JobConfiguration_Extract& JobConfiguration::extract() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.logging.v1.JobConfiguration.extract)
  return has_extract()
      ? *configuration_.extract_
      : *reinterpret_cast< ::google::cloud::bigquery::logging::v1::JobConfiguration_Extract*>(&::google::cloud::bigquery::logging::v1::_JobConfiguration_Extract_default_instance_);
}
inline ::google::cloud::bigquery::logging::v1::JobConfiguration_Extract* JobConfiguration::mutable_extract() {
  if (!has_extract()) {
    clear_configuration();
    set_has_extract();
    configuration_.extract_ = new ::google::cloud::bigquery::logging::v1::JobConfiguration_Extract;
  }
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.logging.v1.JobConfiguration.extract)
  return configuration_.extract_;
}

// .google.cloud.bigquery.logging.v1.JobConfiguration.TableCopy table_copy = 8;
inline bool JobConfiguration::has_table_copy() const {
  return configuration_case() == kTableCopy;
}
inline void JobConfiguration::set_has_table_copy() {
  _oneof_case_[0] = kTableCopy;
}
inline void JobConfiguration::clear_table_copy() {
  if (has_table_copy()) {
    delete configuration_.table_copy_;
    clear_has_configuration();
  }
}
inline ::google::cloud::bigquery::logging::v1::JobConfiguration_TableCopy* JobConfiguration::release_table_copy() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.logging.v1.JobConfiguration.table_copy)
  if (has_table_copy()) {
    clear_has_configuration();
      ::google::cloud::bigquery::logging::v1::JobConfiguration_TableCopy* temp = configuration_.table_copy_;
    configuration_.table_copy_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::cloud::bigquery::logging::v1::JobConfiguration_TableCopy& JobConfiguration::table_copy() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.logging.v1.JobConfiguration.table_copy)
  return has_table_copy()
      ? *configuration_.table_copy_
      : *reinterpret_cast< ::google::cloud::bigquery::logging::v1::JobConfiguration_TableCopy*>(&::google::cloud::bigquery::logging::v1::_JobConfiguration_TableCopy_default_instance_);
}
inline ::google::cloud::bigquery::logging::v1::JobConfiguration_TableCopy* JobConfiguration::mutable_table_copy() {
  if (!has_table_copy()) {
    clear_configuration();
    set_has_table_copy();
    configuration_.table_copy_ = new ::google::cloud::bigquery::logging::v1::JobConfiguration_TableCopy;
  }
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.logging.v1.JobConfiguration.table_copy)
  return configuration_.table_copy_;
}

// bool dry_run = 9;
inline void JobConfiguration::clear_dry_run() {
  dry_run_ = false;
}
inline bool JobConfiguration::dry_run() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.logging.v1.JobConfiguration.dry_run)
  return dry_run_;
}
inline void JobConfiguration::set_dry_run(bool value) {
  
  dry_run_ = value;
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.logging.v1.JobConfiguration.dry_run)
}

inline bool JobConfiguration::has_configuration() const {
  return configuration_case() != CONFIGURATION_NOT_SET;
}
inline void JobConfiguration::clear_has_configuration() {
  _oneof_case_[0] = CONFIGURATION_NOT_SET;
}
inline JobConfiguration::ConfigurationCase JobConfiguration::configuration_case() const {
  return JobConfiguration::ConfigurationCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// TableDefinition

// string name = 1;
inline void TableDefinition::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TableDefinition::name() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.logging.v1.TableDefinition.name)
  return name_.GetNoArena();
}
inline void TableDefinition::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.logging.v1.TableDefinition.name)
}
#if LANG_CXX11
inline void TableDefinition::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.bigquery.logging.v1.TableDefinition.name)
}
#endif
inline void TableDefinition::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.cloud.bigquery.logging.v1.TableDefinition.name)
}
inline void TableDefinition::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.cloud.bigquery.logging.v1.TableDefinition.name)
}
inline ::std::string* TableDefinition::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.logging.v1.TableDefinition.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TableDefinition::release_name() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.logging.v1.TableDefinition.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TableDefinition::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.logging.v1.TableDefinition.name)
}

// repeated string source_uris = 2;
inline int TableDefinition::source_uris_size() const {
  return source_uris_.size();
}
inline void TableDefinition::clear_source_uris() {
  source_uris_.Clear();
}
inline const ::std::string& TableDefinition::source_uris(int index) const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.logging.v1.TableDefinition.source_uris)
  return source_uris_.Get(index);
}
inline ::std::string* TableDefinition::mutable_source_uris(int index) {
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.logging.v1.TableDefinition.source_uris)
  return source_uris_.Mutable(index);
}
inline void TableDefinition::set_source_uris(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.logging.v1.TableDefinition.source_uris)
  source_uris_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void TableDefinition::set_source_uris(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.logging.v1.TableDefinition.source_uris)
  source_uris_.Mutable(index)->assign(std::move(value));
}
#endif
inline void TableDefinition::set_source_uris(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  source_uris_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:google.cloud.bigquery.logging.v1.TableDefinition.source_uris)
}
inline void TableDefinition::set_source_uris(int index, const char* value, size_t size) {
  source_uris_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:google.cloud.bigquery.logging.v1.TableDefinition.source_uris)
}
inline ::std::string* TableDefinition::add_source_uris() {
  // @@protoc_insertion_point(field_add_mutable:google.cloud.bigquery.logging.v1.TableDefinition.source_uris)
  return source_uris_.Add();
}
inline void TableDefinition::add_source_uris(const ::std::string& value) {
  source_uris_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:google.cloud.bigquery.logging.v1.TableDefinition.source_uris)
}
#if LANG_CXX11
inline void TableDefinition::add_source_uris(::std::string&& value) {
  source_uris_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:google.cloud.bigquery.logging.v1.TableDefinition.source_uris)
}
#endif
inline void TableDefinition::add_source_uris(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  source_uris_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:google.cloud.bigquery.logging.v1.TableDefinition.source_uris)
}
inline void TableDefinition::add_source_uris(const char* value, size_t size) {
  source_uris_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:google.cloud.bigquery.logging.v1.TableDefinition.source_uris)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
TableDefinition::source_uris() const {
  // @@protoc_insertion_point(field_list:google.cloud.bigquery.logging.v1.TableDefinition.source_uris)
  return source_uris_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
TableDefinition::mutable_source_uris() {
  // @@protoc_insertion_point(field_mutable_list:google.cloud.bigquery.logging.v1.TableDefinition.source_uris)
  return &source_uris_;
}

// -------------------------------------------------------------------

// JobStatus

// string state = 1;
inline void JobStatus::clear_state() {
  state_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& JobStatus::state() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.logging.v1.JobStatus.state)
  return state_.GetNoArena();
}
inline void JobStatus::set_state(const ::std::string& value) {
  
  state_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.logging.v1.JobStatus.state)
}
#if LANG_CXX11
inline void JobStatus::set_state(::std::string&& value) {
  
  state_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.bigquery.logging.v1.JobStatus.state)
}
#endif
inline void JobStatus::set_state(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  state_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.cloud.bigquery.logging.v1.JobStatus.state)
}
inline void JobStatus::set_state(const char* value, size_t size) {
  
  state_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.cloud.bigquery.logging.v1.JobStatus.state)
}
inline ::std::string* JobStatus::mutable_state() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.logging.v1.JobStatus.state)
  return state_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* JobStatus::release_state() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.logging.v1.JobStatus.state)
  
  return state_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void JobStatus::set_allocated_state(::std::string* state) {
  if (state != NULL) {
    
  } else {
    
  }
  state_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), state);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.logging.v1.JobStatus.state)
}

// .google.rpc.Status error = 2;
inline bool JobStatus::has_error() const {
  return this != internal_default_instance() && error_ != NULL;
}
inline const ::google::rpc::Status& JobStatus::error() const {
  const ::google::rpc::Status* p = error_;
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.logging.v1.JobStatus.error)
  return p != NULL ? *p : *reinterpret_cast<const ::google::rpc::Status*>(
      &::google::rpc::_Status_default_instance_);
}
inline ::google::rpc::Status* JobStatus::release_error() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.logging.v1.JobStatus.error)
  
  ::google::rpc::Status* temp = error_;
  error_ = NULL;
  return temp;
}
inline ::google::rpc::Status* JobStatus::mutable_error() {
  
  if (error_ == NULL) {
    error_ = new ::google::rpc::Status;
  }
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.logging.v1.JobStatus.error)
  return error_;
}
inline void JobStatus::set_allocated_error(::google::rpc::Status* error) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(error_);
  }
  if (error) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      error = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, error, submessage_arena);
    }
    
  } else {
    
  }
  error_ = error;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.logging.v1.JobStatus.error)
}

// -------------------------------------------------------------------

// JobStatistics

// .google.protobuf.Timestamp create_time = 1;
inline bool JobStatistics::has_create_time() const {
  return this != internal_default_instance() && create_time_ != NULL;
}
inline const ::google::protobuf::Timestamp& JobStatistics::create_time() const {
  const ::google::protobuf::Timestamp* p = create_time_;
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.logging.v1.JobStatistics.create_time)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::Timestamp*>(
      &::google::protobuf::_Timestamp_default_instance_);
}
inline ::google::protobuf::Timestamp* JobStatistics::release_create_time() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.logging.v1.JobStatistics.create_time)
  
  ::google::protobuf::Timestamp* temp = create_time_;
  create_time_ = NULL;
  return temp;
}
inline ::google::protobuf::Timestamp* JobStatistics::mutable_create_time() {
  
  if (create_time_ == NULL) {
    create_time_ = new ::google::protobuf::Timestamp;
  }
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.logging.v1.JobStatistics.create_time)
  return create_time_;
}
inline void JobStatistics::set_allocated_create_time(::google::protobuf::Timestamp* create_time) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(create_time_);
  }
  if (create_time) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast< ::google::protobuf::MessageLite*>(create_time)->GetArena();
    if (message_arena != submessage_arena) {
      create_time = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, create_time, submessage_arena);
    }
    
  } else {
    
  }
  create_time_ = create_time;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.logging.v1.JobStatistics.create_time)
}

// .google.protobuf.Timestamp start_time = 2;
inline bool JobStatistics::has_start_time() const {
  return this != internal_default_instance() && start_time_ != NULL;
}
inline const ::google::protobuf::Timestamp& JobStatistics::start_time() const {
  const ::google::protobuf::Timestamp* p = start_time_;
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.logging.v1.JobStatistics.start_time)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::Timestamp*>(
      &::google::protobuf::_Timestamp_default_instance_);
}
inline ::google::protobuf::Timestamp* JobStatistics::release_start_time() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.logging.v1.JobStatistics.start_time)
  
  ::google::protobuf::Timestamp* temp = start_time_;
  start_time_ = NULL;
  return temp;
}
inline ::google::protobuf::Timestamp* JobStatistics::mutable_start_time() {
  
  if (start_time_ == NULL) {
    start_time_ = new ::google::protobuf::Timestamp;
  }
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.logging.v1.JobStatistics.start_time)
  return start_time_;
}
inline void JobStatistics::set_allocated_start_time(::google::protobuf::Timestamp* start_time) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(start_time_);
  }
  if (start_time) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast< ::google::protobuf::MessageLite*>(start_time)->GetArena();
    if (message_arena != submessage_arena) {
      start_time = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, start_time, submessage_arena);
    }
    
  } else {
    
  }
  start_time_ = start_time;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.logging.v1.JobStatistics.start_time)
}

// .google.protobuf.Timestamp end_time = 3;
inline bool JobStatistics::has_end_time() const {
  return this != internal_default_instance() && end_time_ != NULL;
}
inline const ::google::protobuf::Timestamp& JobStatistics::end_time() const {
  const ::google::protobuf::Timestamp* p = end_time_;
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.logging.v1.JobStatistics.end_time)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::Timestamp*>(
      &::google::protobuf::_Timestamp_default_instance_);
}
inline ::google::protobuf::Timestamp* JobStatistics::release_end_time() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.logging.v1.JobStatistics.end_time)
  
  ::google::protobuf::Timestamp* temp = end_time_;
  end_time_ = NULL;
  return temp;
}
inline ::google::protobuf::Timestamp* JobStatistics::mutable_end_time() {
  
  if (end_time_ == NULL) {
    end_time_ = new ::google::protobuf::Timestamp;
  }
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.logging.v1.JobStatistics.end_time)
  return end_time_;
}
inline void JobStatistics::set_allocated_end_time(::google::protobuf::Timestamp* end_time) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(end_time_);
  }
  if (end_time) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast< ::google::protobuf::MessageLite*>(end_time)->GetArena();
    if (message_arena != submessage_arena) {
      end_time = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, end_time, submessage_arena);
    }
    
  } else {
    
  }
  end_time_ = end_time;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.logging.v1.JobStatistics.end_time)
}

// int64 total_processed_bytes = 4;
inline void JobStatistics::clear_total_processed_bytes() {
  total_processed_bytes_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 JobStatistics::total_processed_bytes() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.logging.v1.JobStatistics.total_processed_bytes)
  return total_processed_bytes_;
}
inline void JobStatistics::set_total_processed_bytes(::google::protobuf::int64 value) {
  
  total_processed_bytes_ = value;
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.logging.v1.JobStatistics.total_processed_bytes)
}

// int64 total_billed_bytes = 5;
inline void JobStatistics::clear_total_billed_bytes() {
  total_billed_bytes_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 JobStatistics::total_billed_bytes() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.logging.v1.JobStatistics.total_billed_bytes)
  return total_billed_bytes_;
}
inline void JobStatistics::set_total_billed_bytes(::google::protobuf::int64 value) {
  
  total_billed_bytes_ = value;
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.logging.v1.JobStatistics.total_billed_bytes)
}

// int32 billing_tier = 7;
inline void JobStatistics::clear_billing_tier() {
  billing_tier_ = 0;
}
inline ::google::protobuf::int32 JobStatistics::billing_tier() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.logging.v1.JobStatistics.billing_tier)
  return billing_tier_;
}
inline void JobStatistics::set_billing_tier(::google::protobuf::int32 value) {
  
  billing_tier_ = value;
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.logging.v1.JobStatistics.billing_tier)
}

// -------------------------------------------------------------------

// DatasetName

// string project_id = 1;
inline void DatasetName::clear_project_id() {
  project_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DatasetName::project_id() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.logging.v1.DatasetName.project_id)
  return project_id_.GetNoArena();
}
inline void DatasetName::set_project_id(const ::std::string& value) {
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.logging.v1.DatasetName.project_id)
}
#if LANG_CXX11
inline void DatasetName::set_project_id(::std::string&& value) {
  
  project_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.bigquery.logging.v1.DatasetName.project_id)
}
#endif
inline void DatasetName::set_project_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.cloud.bigquery.logging.v1.DatasetName.project_id)
}
inline void DatasetName::set_project_id(const char* value, size_t size) {
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.cloud.bigquery.logging.v1.DatasetName.project_id)
}
inline ::std::string* DatasetName::mutable_project_id() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.logging.v1.DatasetName.project_id)
  return project_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DatasetName::release_project_id() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.logging.v1.DatasetName.project_id)
  
  return project_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DatasetName::set_allocated_project_id(::std::string* project_id) {
  if (project_id != NULL) {
    
  } else {
    
  }
  project_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), project_id);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.logging.v1.DatasetName.project_id)
}

// string dataset_id = 2;
inline void DatasetName::clear_dataset_id() {
  dataset_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DatasetName::dataset_id() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.logging.v1.DatasetName.dataset_id)
  return dataset_id_.GetNoArena();
}
inline void DatasetName::set_dataset_id(const ::std::string& value) {
  
  dataset_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.logging.v1.DatasetName.dataset_id)
}
#if LANG_CXX11
inline void DatasetName::set_dataset_id(::std::string&& value) {
  
  dataset_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.bigquery.logging.v1.DatasetName.dataset_id)
}
#endif
inline void DatasetName::set_dataset_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  dataset_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.cloud.bigquery.logging.v1.DatasetName.dataset_id)
}
inline void DatasetName::set_dataset_id(const char* value, size_t size) {
  
  dataset_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.cloud.bigquery.logging.v1.DatasetName.dataset_id)
}
inline ::std::string* DatasetName::mutable_dataset_id() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.logging.v1.DatasetName.dataset_id)
  return dataset_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DatasetName::release_dataset_id() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.logging.v1.DatasetName.dataset_id)
  
  return dataset_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DatasetName::set_allocated_dataset_id(::std::string* dataset_id) {
  if (dataset_id != NULL) {
    
  } else {
    
  }
  dataset_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), dataset_id);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.logging.v1.DatasetName.dataset_id)
}

// -------------------------------------------------------------------

// TableName

// string project_id = 1;
inline void TableName::clear_project_id() {
  project_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TableName::project_id() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.logging.v1.TableName.project_id)
  return project_id_.GetNoArena();
}
inline void TableName::set_project_id(const ::std::string& value) {
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.logging.v1.TableName.project_id)
}
#if LANG_CXX11
inline void TableName::set_project_id(::std::string&& value) {
  
  project_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.bigquery.logging.v1.TableName.project_id)
}
#endif
inline void TableName::set_project_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.cloud.bigquery.logging.v1.TableName.project_id)
}
inline void TableName::set_project_id(const char* value, size_t size) {
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.cloud.bigquery.logging.v1.TableName.project_id)
}
inline ::std::string* TableName::mutable_project_id() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.logging.v1.TableName.project_id)
  return project_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TableName::release_project_id() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.logging.v1.TableName.project_id)
  
  return project_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TableName::set_allocated_project_id(::std::string* project_id) {
  if (project_id != NULL) {
    
  } else {
    
  }
  project_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), project_id);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.logging.v1.TableName.project_id)
}

// string dataset_id = 2;
inline void TableName::clear_dataset_id() {
  dataset_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TableName::dataset_id() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.logging.v1.TableName.dataset_id)
  return dataset_id_.GetNoArena();
}
inline void TableName::set_dataset_id(const ::std::string& value) {
  
  dataset_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.logging.v1.TableName.dataset_id)
}
#if LANG_CXX11
inline void TableName::set_dataset_id(::std::string&& value) {
  
  dataset_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.bigquery.logging.v1.TableName.dataset_id)
}
#endif
inline void TableName::set_dataset_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  dataset_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.cloud.bigquery.logging.v1.TableName.dataset_id)
}
inline void TableName::set_dataset_id(const char* value, size_t size) {
  
  dataset_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.cloud.bigquery.logging.v1.TableName.dataset_id)
}
inline ::std::string* TableName::mutable_dataset_id() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.logging.v1.TableName.dataset_id)
  return dataset_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TableName::release_dataset_id() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.logging.v1.TableName.dataset_id)
  
  return dataset_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TableName::set_allocated_dataset_id(::std::string* dataset_id) {
  if (dataset_id != NULL) {
    
  } else {
    
  }
  dataset_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), dataset_id);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.logging.v1.TableName.dataset_id)
}

// string table_id = 3;
inline void TableName::clear_table_id() {
  table_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TableName::table_id() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.logging.v1.TableName.table_id)
  return table_id_.GetNoArena();
}
inline void TableName::set_table_id(const ::std::string& value) {
  
  table_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.logging.v1.TableName.table_id)
}
#if LANG_CXX11
inline void TableName::set_table_id(::std::string&& value) {
  
  table_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.bigquery.logging.v1.TableName.table_id)
}
#endif
inline void TableName::set_table_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  table_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.cloud.bigquery.logging.v1.TableName.table_id)
}
inline void TableName::set_table_id(const char* value, size_t size) {
  
  table_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.cloud.bigquery.logging.v1.TableName.table_id)
}
inline ::std::string* TableName::mutable_table_id() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.logging.v1.TableName.table_id)
  return table_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TableName::release_table_id() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.logging.v1.TableName.table_id)
  
  return table_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TableName::set_allocated_table_id(::std::string* table_id) {
  if (table_id != NULL) {
    
  } else {
    
  }
  table_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), table_id);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.logging.v1.TableName.table_id)
}

// -------------------------------------------------------------------

// JobName

// string project_id = 1;
inline void JobName::clear_project_id() {
  project_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& JobName::project_id() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.logging.v1.JobName.project_id)
  return project_id_.GetNoArena();
}
inline void JobName::set_project_id(const ::std::string& value) {
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.logging.v1.JobName.project_id)
}
#if LANG_CXX11
inline void JobName::set_project_id(::std::string&& value) {
  
  project_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.bigquery.logging.v1.JobName.project_id)
}
#endif
inline void JobName::set_project_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.cloud.bigquery.logging.v1.JobName.project_id)
}
inline void JobName::set_project_id(const char* value, size_t size) {
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.cloud.bigquery.logging.v1.JobName.project_id)
}
inline ::std::string* JobName::mutable_project_id() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.logging.v1.JobName.project_id)
  return project_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* JobName::release_project_id() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.logging.v1.JobName.project_id)
  
  return project_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void JobName::set_allocated_project_id(::std::string* project_id) {
  if (project_id != NULL) {
    
  } else {
    
  }
  project_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), project_id);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.logging.v1.JobName.project_id)
}

// string job_id = 2;
inline void JobName::clear_job_id() {
  job_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& JobName::job_id() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.logging.v1.JobName.job_id)
  return job_id_.GetNoArena();
}
inline void JobName::set_job_id(const ::std::string& value) {
  
  job_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.logging.v1.JobName.job_id)
}
#if LANG_CXX11
inline void JobName::set_job_id(::std::string&& value) {
  
  job_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.bigquery.logging.v1.JobName.job_id)
}
#endif
inline void JobName::set_job_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  job_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.cloud.bigquery.logging.v1.JobName.job_id)
}
inline void JobName::set_job_id(const char* value, size_t size) {
  
  job_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.cloud.bigquery.logging.v1.JobName.job_id)
}
inline ::std::string* JobName::mutable_job_id() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.logging.v1.JobName.job_id)
  return job_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* JobName::release_job_id() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.logging.v1.JobName.job_id)
  
  return job_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void JobName::set_allocated_job_id(::std::string* job_id) {
  if (job_id != NULL) {
    
  } else {
    
  }
  job_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), job_id);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.logging.v1.JobName.job_id)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace logging
}  // namespace bigquery
}  // namespace cloud
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_google_2fcloud_2fbigquery_2flogging_2fv1_2faudit_5fdata_2eproto__INCLUDED
