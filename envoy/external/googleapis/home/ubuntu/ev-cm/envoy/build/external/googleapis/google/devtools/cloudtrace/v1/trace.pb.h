// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/devtools/cloudtrace/v1/trace.proto

#ifndef PROTOBUF_google_2fdevtools_2fcloudtrace_2fv1_2ftrace_2eproto__INCLUDED
#define PROTOBUF_google_2fdevtools_2fcloudtrace_2fv1_2ftrace_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "google/api/annotations.pb.h"
#include <google/protobuf/empty.pb.h>
#include <google/protobuf/timestamp.pb.h>
// @@protoc_insertion_point(includes)

namespace protobuf_google_2fdevtools_2fcloudtrace_2fv1_2ftrace_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[8];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsTraceImpl();
void InitDefaultsTrace();
void InitDefaultsTracesImpl();
void InitDefaultsTraces();
void InitDefaultsTraceSpan_LabelsEntry_DoNotUseImpl();
void InitDefaultsTraceSpan_LabelsEntry_DoNotUse();
void InitDefaultsTraceSpanImpl();
void InitDefaultsTraceSpan();
void InitDefaultsListTracesRequestImpl();
void InitDefaultsListTracesRequest();
void InitDefaultsListTracesResponseImpl();
void InitDefaultsListTracesResponse();
void InitDefaultsGetTraceRequestImpl();
void InitDefaultsGetTraceRequest();
void InitDefaultsPatchTracesRequestImpl();
void InitDefaultsPatchTracesRequest();
inline void InitDefaults() {
  InitDefaultsTrace();
  InitDefaultsTraces();
  InitDefaultsTraceSpan_LabelsEntry_DoNotUse();
  InitDefaultsTraceSpan();
  InitDefaultsListTracesRequest();
  InitDefaultsListTracesResponse();
  InitDefaultsGetTraceRequest();
  InitDefaultsPatchTracesRequest();
}
}  // namespace protobuf_google_2fdevtools_2fcloudtrace_2fv1_2ftrace_2eproto
namespace google {
namespace devtools {
namespace cloudtrace {
namespace v1 {
class GetTraceRequest;
class GetTraceRequestDefaultTypeInternal;
extern GetTraceRequestDefaultTypeInternal _GetTraceRequest_default_instance_;
class ListTracesRequest;
class ListTracesRequestDefaultTypeInternal;
extern ListTracesRequestDefaultTypeInternal _ListTracesRequest_default_instance_;
class ListTracesResponse;
class ListTracesResponseDefaultTypeInternal;
extern ListTracesResponseDefaultTypeInternal _ListTracesResponse_default_instance_;
class PatchTracesRequest;
class PatchTracesRequestDefaultTypeInternal;
extern PatchTracesRequestDefaultTypeInternal _PatchTracesRequest_default_instance_;
class Trace;
class TraceDefaultTypeInternal;
extern TraceDefaultTypeInternal _Trace_default_instance_;
class TraceSpan;
class TraceSpanDefaultTypeInternal;
extern TraceSpanDefaultTypeInternal _TraceSpan_default_instance_;
class TraceSpan_LabelsEntry_DoNotUse;
class TraceSpan_LabelsEntry_DoNotUseDefaultTypeInternal;
extern TraceSpan_LabelsEntry_DoNotUseDefaultTypeInternal _TraceSpan_LabelsEntry_DoNotUse_default_instance_;
class Traces;
class TracesDefaultTypeInternal;
extern TracesDefaultTypeInternal _Traces_default_instance_;
}  // namespace v1
}  // namespace cloudtrace
}  // namespace devtools
}  // namespace google
namespace google {
namespace devtools {
namespace cloudtrace {
namespace v1 {

enum TraceSpan_SpanKind {
  TraceSpan_SpanKind_SPAN_KIND_UNSPECIFIED = 0,
  TraceSpan_SpanKind_RPC_SERVER = 1,
  TraceSpan_SpanKind_RPC_CLIENT = 2,
  TraceSpan_SpanKind_TraceSpan_SpanKind_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  TraceSpan_SpanKind_TraceSpan_SpanKind_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool TraceSpan_SpanKind_IsValid(int value);
const TraceSpan_SpanKind TraceSpan_SpanKind_SpanKind_MIN = TraceSpan_SpanKind_SPAN_KIND_UNSPECIFIED;
const TraceSpan_SpanKind TraceSpan_SpanKind_SpanKind_MAX = TraceSpan_SpanKind_RPC_CLIENT;
const int TraceSpan_SpanKind_SpanKind_ARRAYSIZE = TraceSpan_SpanKind_SpanKind_MAX + 1;

const ::google::protobuf::EnumDescriptor* TraceSpan_SpanKind_descriptor();
inline const ::std::string& TraceSpan_SpanKind_Name(TraceSpan_SpanKind value) {
  return ::google::protobuf::internal::NameOfEnum(
    TraceSpan_SpanKind_descriptor(), value);
}
inline bool TraceSpan_SpanKind_Parse(
    const ::std::string& name, TraceSpan_SpanKind* value) {
  return ::google::protobuf::internal::ParseNamedEnum<TraceSpan_SpanKind>(
    TraceSpan_SpanKind_descriptor(), name, value);
}
enum ListTracesRequest_ViewType {
  ListTracesRequest_ViewType_VIEW_TYPE_UNSPECIFIED = 0,
  ListTracesRequest_ViewType_MINIMAL = 1,
  ListTracesRequest_ViewType_ROOTSPAN = 2,
  ListTracesRequest_ViewType_COMPLETE = 3,
  ListTracesRequest_ViewType_ListTracesRequest_ViewType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  ListTracesRequest_ViewType_ListTracesRequest_ViewType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool ListTracesRequest_ViewType_IsValid(int value);
const ListTracesRequest_ViewType ListTracesRequest_ViewType_ViewType_MIN = ListTracesRequest_ViewType_VIEW_TYPE_UNSPECIFIED;
const ListTracesRequest_ViewType ListTracesRequest_ViewType_ViewType_MAX = ListTracesRequest_ViewType_COMPLETE;
const int ListTracesRequest_ViewType_ViewType_ARRAYSIZE = ListTracesRequest_ViewType_ViewType_MAX + 1;

const ::google::protobuf::EnumDescriptor* ListTracesRequest_ViewType_descriptor();
inline const ::std::string& ListTracesRequest_ViewType_Name(ListTracesRequest_ViewType value) {
  return ::google::protobuf::internal::NameOfEnum(
    ListTracesRequest_ViewType_descriptor(), value);
}
inline bool ListTracesRequest_ViewType_Parse(
    const ::std::string& name, ListTracesRequest_ViewType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ListTracesRequest_ViewType>(
    ListTracesRequest_ViewType_descriptor(), name, value);
}
// ===================================================================

class Trace : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.devtools.cloudtrace.v1.Trace) */ {
 public:
  Trace();
  virtual ~Trace();

  Trace(const Trace& from);

  inline Trace& operator=(const Trace& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Trace(Trace&& from) noexcept
    : Trace() {
    *this = ::std::move(from);
  }

  inline Trace& operator=(Trace&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Trace& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Trace* internal_default_instance() {
    return reinterpret_cast<const Trace*>(
               &_Trace_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(Trace* other);
  friend void swap(Trace& a, Trace& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Trace* New() const PROTOBUF_FINAL { return New(NULL); }

  Trace* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Trace& from);
  void MergeFrom(const Trace& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Trace* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .google.devtools.cloudtrace.v1.TraceSpan spans = 3;
  int spans_size() const;
  void clear_spans();
  static const int kSpansFieldNumber = 3;
  const ::google::devtools::cloudtrace::v1::TraceSpan& spans(int index) const;
  ::google::devtools::cloudtrace::v1::TraceSpan* mutable_spans(int index);
  ::google::devtools::cloudtrace::v1::TraceSpan* add_spans();
  ::google::protobuf::RepeatedPtrField< ::google::devtools::cloudtrace::v1::TraceSpan >*
      mutable_spans();
  const ::google::protobuf::RepeatedPtrField< ::google::devtools::cloudtrace::v1::TraceSpan >&
      spans() const;

  // string project_id = 1;
  void clear_project_id();
  static const int kProjectIdFieldNumber = 1;
  const ::std::string& project_id() const;
  void set_project_id(const ::std::string& value);
  #if LANG_CXX11
  void set_project_id(::std::string&& value);
  #endif
  void set_project_id(const char* value);
  void set_project_id(const char* value, size_t size);
  ::std::string* mutable_project_id();
  ::std::string* release_project_id();
  void set_allocated_project_id(::std::string* project_id);

  // string trace_id = 2;
  void clear_trace_id();
  static const int kTraceIdFieldNumber = 2;
  const ::std::string& trace_id() const;
  void set_trace_id(const ::std::string& value);
  #if LANG_CXX11
  void set_trace_id(::std::string&& value);
  #endif
  void set_trace_id(const char* value);
  void set_trace_id(const char* value, size_t size);
  ::std::string* mutable_trace_id();
  ::std::string* release_trace_id();
  void set_allocated_trace_id(::std::string* trace_id);

  // @@protoc_insertion_point(class_scope:google.devtools.cloudtrace.v1.Trace)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::google::devtools::cloudtrace::v1::TraceSpan > spans_;
  ::google::protobuf::internal::ArenaStringPtr project_id_;
  ::google::protobuf::internal::ArenaStringPtr trace_id_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fdevtools_2fcloudtrace_2fv1_2ftrace_2eproto::TableStruct;
  friend void ::protobuf_google_2fdevtools_2fcloudtrace_2fv1_2ftrace_2eproto::InitDefaultsTraceImpl();
};
// -------------------------------------------------------------------

class Traces : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.devtools.cloudtrace.v1.Traces) */ {
 public:
  Traces();
  virtual ~Traces();

  Traces(const Traces& from);

  inline Traces& operator=(const Traces& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Traces(Traces&& from) noexcept
    : Traces() {
    *this = ::std::move(from);
  }

  inline Traces& operator=(Traces&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Traces& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Traces* internal_default_instance() {
    return reinterpret_cast<const Traces*>(
               &_Traces_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(Traces* other);
  friend void swap(Traces& a, Traces& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Traces* New() const PROTOBUF_FINAL { return New(NULL); }

  Traces* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Traces& from);
  void MergeFrom(const Traces& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Traces* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .google.devtools.cloudtrace.v1.Trace traces = 1;
  int traces_size() const;
  void clear_traces();
  static const int kTracesFieldNumber = 1;
  const ::google::devtools::cloudtrace::v1::Trace& traces(int index) const;
  ::google::devtools::cloudtrace::v1::Trace* mutable_traces(int index);
  ::google::devtools::cloudtrace::v1::Trace* add_traces();
  ::google::protobuf::RepeatedPtrField< ::google::devtools::cloudtrace::v1::Trace >*
      mutable_traces();
  const ::google::protobuf::RepeatedPtrField< ::google::devtools::cloudtrace::v1::Trace >&
      traces() const;

  // @@protoc_insertion_point(class_scope:google.devtools.cloudtrace.v1.Traces)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::google::devtools::cloudtrace::v1::Trace > traces_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fdevtools_2fcloudtrace_2fv1_2ftrace_2eproto::TableStruct;
  friend void ::protobuf_google_2fdevtools_2fcloudtrace_2fv1_2ftrace_2eproto::InitDefaultsTracesImpl();
};
// -------------------------------------------------------------------

class TraceSpan_LabelsEntry_DoNotUse : public ::google::protobuf::internal::MapEntry<TraceSpan_LabelsEntry_DoNotUse, 
    ::std::string, ::std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    0 > {
public:
  typedef ::google::protobuf::internal::MapEntry<TraceSpan_LabelsEntry_DoNotUse, 
    ::std::string, ::std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    0 > SuperType;
  TraceSpan_LabelsEntry_DoNotUse();
  TraceSpan_LabelsEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const TraceSpan_LabelsEntry_DoNotUse& other);
  static const TraceSpan_LabelsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const TraceSpan_LabelsEntry_DoNotUse*>(&_TraceSpan_LabelsEntry_DoNotUse_default_instance_); }
  void MergeFrom(const ::google::protobuf::Message& other) PROTOBUF_FINAL;
  ::google::protobuf::Metadata GetMetadata() const;
};

// -------------------------------------------------------------------

class TraceSpan : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.devtools.cloudtrace.v1.TraceSpan) */ {
 public:
  TraceSpan();
  virtual ~TraceSpan();

  TraceSpan(const TraceSpan& from);

  inline TraceSpan& operator=(const TraceSpan& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TraceSpan(TraceSpan&& from) noexcept
    : TraceSpan() {
    *this = ::std::move(from);
  }

  inline TraceSpan& operator=(TraceSpan&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const TraceSpan& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TraceSpan* internal_default_instance() {
    return reinterpret_cast<const TraceSpan*>(
               &_TraceSpan_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(TraceSpan* other);
  friend void swap(TraceSpan& a, TraceSpan& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TraceSpan* New() const PROTOBUF_FINAL { return New(NULL); }

  TraceSpan* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const TraceSpan& from);
  void MergeFrom(const TraceSpan& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TraceSpan* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------


  typedef TraceSpan_SpanKind SpanKind;
  static const SpanKind SPAN_KIND_UNSPECIFIED =
    TraceSpan_SpanKind_SPAN_KIND_UNSPECIFIED;
  static const SpanKind RPC_SERVER =
    TraceSpan_SpanKind_RPC_SERVER;
  static const SpanKind RPC_CLIENT =
    TraceSpan_SpanKind_RPC_CLIENT;
  static inline bool SpanKind_IsValid(int value) {
    return TraceSpan_SpanKind_IsValid(value);
  }
  static const SpanKind SpanKind_MIN =
    TraceSpan_SpanKind_SpanKind_MIN;
  static const SpanKind SpanKind_MAX =
    TraceSpan_SpanKind_SpanKind_MAX;
  static const int SpanKind_ARRAYSIZE =
    TraceSpan_SpanKind_SpanKind_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  SpanKind_descriptor() {
    return TraceSpan_SpanKind_descriptor();
  }
  static inline const ::std::string& SpanKind_Name(SpanKind value) {
    return TraceSpan_SpanKind_Name(value);
  }
  static inline bool SpanKind_Parse(const ::std::string& name,
      SpanKind* value) {
    return TraceSpan_SpanKind_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // map<string, string> labels = 7;
  int labels_size() const;
  void clear_labels();
  static const int kLabelsFieldNumber = 7;
  const ::google::protobuf::Map< ::std::string, ::std::string >&
      labels() const;
  ::google::protobuf::Map< ::std::string, ::std::string >*
      mutable_labels();

  // string name = 3;
  void clear_name();
  static const int kNameFieldNumber = 3;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // .google.protobuf.Timestamp start_time = 4;
  bool has_start_time() const;
  void clear_start_time();
  static const int kStartTimeFieldNumber = 4;
  const ::google::protobuf::Timestamp& start_time() const;
  ::google::protobuf::Timestamp* release_start_time();
  ::google::protobuf::Timestamp* mutable_start_time();
  void set_allocated_start_time(::google::protobuf::Timestamp* start_time);

  // .google.protobuf.Timestamp end_time = 5;
  bool has_end_time() const;
  void clear_end_time();
  static const int kEndTimeFieldNumber = 5;
  const ::google::protobuf::Timestamp& end_time() const;
  ::google::protobuf::Timestamp* release_end_time();
  ::google::protobuf::Timestamp* mutable_end_time();
  void set_allocated_end_time(::google::protobuf::Timestamp* end_time);

  // fixed64 span_id = 1;
  void clear_span_id();
  static const int kSpanIdFieldNumber = 1;
  ::google::protobuf::uint64 span_id() const;
  void set_span_id(::google::protobuf::uint64 value);

  // fixed64 parent_span_id = 6;
  void clear_parent_span_id();
  static const int kParentSpanIdFieldNumber = 6;
  ::google::protobuf::uint64 parent_span_id() const;
  void set_parent_span_id(::google::protobuf::uint64 value);

  // .google.devtools.cloudtrace.v1.TraceSpan.SpanKind kind = 2;
  void clear_kind();
  static const int kKindFieldNumber = 2;
  ::google::devtools::cloudtrace::v1::TraceSpan_SpanKind kind() const;
  void set_kind(::google::devtools::cloudtrace::v1::TraceSpan_SpanKind value);

  // @@protoc_insertion_point(class_scope:google.devtools.cloudtrace.v1.TraceSpan)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::MapField<
      TraceSpan_LabelsEntry_DoNotUse,
      ::std::string, ::std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      0 > labels_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::Timestamp* start_time_;
  ::google::protobuf::Timestamp* end_time_;
  ::google::protobuf::uint64 span_id_;
  ::google::protobuf::uint64 parent_span_id_;
  int kind_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fdevtools_2fcloudtrace_2fv1_2ftrace_2eproto::TableStruct;
  friend void ::protobuf_google_2fdevtools_2fcloudtrace_2fv1_2ftrace_2eproto::InitDefaultsTraceSpanImpl();
};
// -------------------------------------------------------------------

class ListTracesRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.devtools.cloudtrace.v1.ListTracesRequest) */ {
 public:
  ListTracesRequest();
  virtual ~ListTracesRequest();

  ListTracesRequest(const ListTracesRequest& from);

  inline ListTracesRequest& operator=(const ListTracesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ListTracesRequest(ListTracesRequest&& from) noexcept
    : ListTracesRequest() {
    *this = ::std::move(from);
  }

  inline ListTracesRequest& operator=(ListTracesRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ListTracesRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListTracesRequest* internal_default_instance() {
    return reinterpret_cast<const ListTracesRequest*>(
               &_ListTracesRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(ListTracesRequest* other);
  friend void swap(ListTracesRequest& a, ListTracesRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ListTracesRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  ListTracesRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ListTracesRequest& from);
  void MergeFrom(const ListTracesRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ListTracesRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef ListTracesRequest_ViewType ViewType;
  static const ViewType VIEW_TYPE_UNSPECIFIED =
    ListTracesRequest_ViewType_VIEW_TYPE_UNSPECIFIED;
  static const ViewType MINIMAL =
    ListTracesRequest_ViewType_MINIMAL;
  static const ViewType ROOTSPAN =
    ListTracesRequest_ViewType_ROOTSPAN;
  static const ViewType COMPLETE =
    ListTracesRequest_ViewType_COMPLETE;
  static inline bool ViewType_IsValid(int value) {
    return ListTracesRequest_ViewType_IsValid(value);
  }
  static const ViewType ViewType_MIN =
    ListTracesRequest_ViewType_ViewType_MIN;
  static const ViewType ViewType_MAX =
    ListTracesRequest_ViewType_ViewType_MAX;
  static const int ViewType_ARRAYSIZE =
    ListTracesRequest_ViewType_ViewType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ViewType_descriptor() {
    return ListTracesRequest_ViewType_descriptor();
  }
  static inline const ::std::string& ViewType_Name(ViewType value) {
    return ListTracesRequest_ViewType_Name(value);
  }
  static inline bool ViewType_Parse(const ::std::string& name,
      ViewType* value) {
    return ListTracesRequest_ViewType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // string project_id = 1;
  void clear_project_id();
  static const int kProjectIdFieldNumber = 1;
  const ::std::string& project_id() const;
  void set_project_id(const ::std::string& value);
  #if LANG_CXX11
  void set_project_id(::std::string&& value);
  #endif
  void set_project_id(const char* value);
  void set_project_id(const char* value, size_t size);
  ::std::string* mutable_project_id();
  ::std::string* release_project_id();
  void set_allocated_project_id(::std::string* project_id);

  // string page_token = 4;
  void clear_page_token();
  static const int kPageTokenFieldNumber = 4;
  const ::std::string& page_token() const;
  void set_page_token(const ::std::string& value);
  #if LANG_CXX11
  void set_page_token(::std::string&& value);
  #endif
  void set_page_token(const char* value);
  void set_page_token(const char* value, size_t size);
  ::std::string* mutable_page_token();
  ::std::string* release_page_token();
  void set_allocated_page_token(::std::string* page_token);

  // string filter = 7;
  void clear_filter();
  static const int kFilterFieldNumber = 7;
  const ::std::string& filter() const;
  void set_filter(const ::std::string& value);
  #if LANG_CXX11
  void set_filter(::std::string&& value);
  #endif
  void set_filter(const char* value);
  void set_filter(const char* value, size_t size);
  ::std::string* mutable_filter();
  ::std::string* release_filter();
  void set_allocated_filter(::std::string* filter);

  // string order_by = 8;
  void clear_order_by();
  static const int kOrderByFieldNumber = 8;
  const ::std::string& order_by() const;
  void set_order_by(const ::std::string& value);
  #if LANG_CXX11
  void set_order_by(::std::string&& value);
  #endif
  void set_order_by(const char* value);
  void set_order_by(const char* value, size_t size);
  ::std::string* mutable_order_by();
  ::std::string* release_order_by();
  void set_allocated_order_by(::std::string* order_by);

  // .google.protobuf.Timestamp start_time = 5;
  bool has_start_time() const;
  void clear_start_time();
  static const int kStartTimeFieldNumber = 5;
  const ::google::protobuf::Timestamp& start_time() const;
  ::google::protobuf::Timestamp* release_start_time();
  ::google::protobuf::Timestamp* mutable_start_time();
  void set_allocated_start_time(::google::protobuf::Timestamp* start_time);

  // .google.protobuf.Timestamp end_time = 6;
  bool has_end_time() const;
  void clear_end_time();
  static const int kEndTimeFieldNumber = 6;
  const ::google::protobuf::Timestamp& end_time() const;
  ::google::protobuf::Timestamp* release_end_time();
  ::google::protobuf::Timestamp* mutable_end_time();
  void set_allocated_end_time(::google::protobuf::Timestamp* end_time);

  // .google.devtools.cloudtrace.v1.ListTracesRequest.ViewType view = 2;
  void clear_view();
  static const int kViewFieldNumber = 2;
  ::google::devtools::cloudtrace::v1::ListTracesRequest_ViewType view() const;
  void set_view(::google::devtools::cloudtrace::v1::ListTracesRequest_ViewType value);

  // int32 page_size = 3;
  void clear_page_size();
  static const int kPageSizeFieldNumber = 3;
  ::google::protobuf::int32 page_size() const;
  void set_page_size(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:google.devtools.cloudtrace.v1.ListTracesRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr project_id_;
  ::google::protobuf::internal::ArenaStringPtr page_token_;
  ::google::protobuf::internal::ArenaStringPtr filter_;
  ::google::protobuf::internal::ArenaStringPtr order_by_;
  ::google::protobuf::Timestamp* start_time_;
  ::google::protobuf::Timestamp* end_time_;
  int view_;
  ::google::protobuf::int32 page_size_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fdevtools_2fcloudtrace_2fv1_2ftrace_2eproto::TableStruct;
  friend void ::protobuf_google_2fdevtools_2fcloudtrace_2fv1_2ftrace_2eproto::InitDefaultsListTracesRequestImpl();
};
// -------------------------------------------------------------------

class ListTracesResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.devtools.cloudtrace.v1.ListTracesResponse) */ {
 public:
  ListTracesResponse();
  virtual ~ListTracesResponse();

  ListTracesResponse(const ListTracesResponse& from);

  inline ListTracesResponse& operator=(const ListTracesResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ListTracesResponse(ListTracesResponse&& from) noexcept
    : ListTracesResponse() {
    *this = ::std::move(from);
  }

  inline ListTracesResponse& operator=(ListTracesResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ListTracesResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListTracesResponse* internal_default_instance() {
    return reinterpret_cast<const ListTracesResponse*>(
               &_ListTracesResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    5;

  void Swap(ListTracesResponse* other);
  friend void swap(ListTracesResponse& a, ListTracesResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ListTracesResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  ListTracesResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ListTracesResponse& from);
  void MergeFrom(const ListTracesResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ListTracesResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .google.devtools.cloudtrace.v1.Trace traces = 1;
  int traces_size() const;
  void clear_traces();
  static const int kTracesFieldNumber = 1;
  const ::google::devtools::cloudtrace::v1::Trace& traces(int index) const;
  ::google::devtools::cloudtrace::v1::Trace* mutable_traces(int index);
  ::google::devtools::cloudtrace::v1::Trace* add_traces();
  ::google::protobuf::RepeatedPtrField< ::google::devtools::cloudtrace::v1::Trace >*
      mutable_traces();
  const ::google::protobuf::RepeatedPtrField< ::google::devtools::cloudtrace::v1::Trace >&
      traces() const;

  // string next_page_token = 2;
  void clear_next_page_token();
  static const int kNextPageTokenFieldNumber = 2;
  const ::std::string& next_page_token() const;
  void set_next_page_token(const ::std::string& value);
  #if LANG_CXX11
  void set_next_page_token(::std::string&& value);
  #endif
  void set_next_page_token(const char* value);
  void set_next_page_token(const char* value, size_t size);
  ::std::string* mutable_next_page_token();
  ::std::string* release_next_page_token();
  void set_allocated_next_page_token(::std::string* next_page_token);

  // @@protoc_insertion_point(class_scope:google.devtools.cloudtrace.v1.ListTracesResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::google::devtools::cloudtrace::v1::Trace > traces_;
  ::google::protobuf::internal::ArenaStringPtr next_page_token_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fdevtools_2fcloudtrace_2fv1_2ftrace_2eproto::TableStruct;
  friend void ::protobuf_google_2fdevtools_2fcloudtrace_2fv1_2ftrace_2eproto::InitDefaultsListTracesResponseImpl();
};
// -------------------------------------------------------------------

class GetTraceRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.devtools.cloudtrace.v1.GetTraceRequest) */ {
 public:
  GetTraceRequest();
  virtual ~GetTraceRequest();

  GetTraceRequest(const GetTraceRequest& from);

  inline GetTraceRequest& operator=(const GetTraceRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetTraceRequest(GetTraceRequest&& from) noexcept
    : GetTraceRequest() {
    *this = ::std::move(from);
  }

  inline GetTraceRequest& operator=(GetTraceRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetTraceRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetTraceRequest* internal_default_instance() {
    return reinterpret_cast<const GetTraceRequest*>(
               &_GetTraceRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    6;

  void Swap(GetTraceRequest* other);
  friend void swap(GetTraceRequest& a, GetTraceRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetTraceRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  GetTraceRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GetTraceRequest& from);
  void MergeFrom(const GetTraceRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GetTraceRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string project_id = 1;
  void clear_project_id();
  static const int kProjectIdFieldNumber = 1;
  const ::std::string& project_id() const;
  void set_project_id(const ::std::string& value);
  #if LANG_CXX11
  void set_project_id(::std::string&& value);
  #endif
  void set_project_id(const char* value);
  void set_project_id(const char* value, size_t size);
  ::std::string* mutable_project_id();
  ::std::string* release_project_id();
  void set_allocated_project_id(::std::string* project_id);

  // string trace_id = 2;
  void clear_trace_id();
  static const int kTraceIdFieldNumber = 2;
  const ::std::string& trace_id() const;
  void set_trace_id(const ::std::string& value);
  #if LANG_CXX11
  void set_trace_id(::std::string&& value);
  #endif
  void set_trace_id(const char* value);
  void set_trace_id(const char* value, size_t size);
  ::std::string* mutable_trace_id();
  ::std::string* release_trace_id();
  void set_allocated_trace_id(::std::string* trace_id);

  // @@protoc_insertion_point(class_scope:google.devtools.cloudtrace.v1.GetTraceRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr project_id_;
  ::google::protobuf::internal::ArenaStringPtr trace_id_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fdevtools_2fcloudtrace_2fv1_2ftrace_2eproto::TableStruct;
  friend void ::protobuf_google_2fdevtools_2fcloudtrace_2fv1_2ftrace_2eproto::InitDefaultsGetTraceRequestImpl();
};
// -------------------------------------------------------------------

class PatchTracesRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.devtools.cloudtrace.v1.PatchTracesRequest) */ {
 public:
  PatchTracesRequest();
  virtual ~PatchTracesRequest();

  PatchTracesRequest(const PatchTracesRequest& from);

  inline PatchTracesRequest& operator=(const PatchTracesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PatchTracesRequest(PatchTracesRequest&& from) noexcept
    : PatchTracesRequest() {
    *this = ::std::move(from);
  }

  inline PatchTracesRequest& operator=(PatchTracesRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PatchTracesRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PatchTracesRequest* internal_default_instance() {
    return reinterpret_cast<const PatchTracesRequest*>(
               &_PatchTracesRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    7;

  void Swap(PatchTracesRequest* other);
  friend void swap(PatchTracesRequest& a, PatchTracesRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PatchTracesRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  PatchTracesRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const PatchTracesRequest& from);
  void MergeFrom(const PatchTracesRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(PatchTracesRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string project_id = 1;
  void clear_project_id();
  static const int kProjectIdFieldNumber = 1;
  const ::std::string& project_id() const;
  void set_project_id(const ::std::string& value);
  #if LANG_CXX11
  void set_project_id(::std::string&& value);
  #endif
  void set_project_id(const char* value);
  void set_project_id(const char* value, size_t size);
  ::std::string* mutable_project_id();
  ::std::string* release_project_id();
  void set_allocated_project_id(::std::string* project_id);

  // .google.devtools.cloudtrace.v1.Traces traces = 2;
  bool has_traces() const;
  void clear_traces();
  static const int kTracesFieldNumber = 2;
  const ::google::devtools::cloudtrace::v1::Traces& traces() const;
  ::google::devtools::cloudtrace::v1::Traces* release_traces();
  ::google::devtools::cloudtrace::v1::Traces* mutable_traces();
  void set_allocated_traces(::google::devtools::cloudtrace::v1::Traces* traces);

  // @@protoc_insertion_point(class_scope:google.devtools.cloudtrace.v1.PatchTracesRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr project_id_;
  ::google::devtools::cloudtrace::v1::Traces* traces_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fdevtools_2fcloudtrace_2fv1_2ftrace_2eproto::TableStruct;
  friend void ::protobuf_google_2fdevtools_2fcloudtrace_2fv1_2ftrace_2eproto::InitDefaultsPatchTracesRequestImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Trace

// string project_id = 1;
inline void Trace::clear_project_id() {
  project_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Trace::project_id() const {
  // @@protoc_insertion_point(field_get:google.devtools.cloudtrace.v1.Trace.project_id)
  return project_id_.GetNoArena();
}
inline void Trace::set_project_id(const ::std::string& value) {
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.devtools.cloudtrace.v1.Trace.project_id)
}
#if LANG_CXX11
inline void Trace::set_project_id(::std::string&& value) {
  
  project_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.devtools.cloudtrace.v1.Trace.project_id)
}
#endif
inline void Trace::set_project_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.devtools.cloudtrace.v1.Trace.project_id)
}
inline void Trace::set_project_id(const char* value, size_t size) {
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.devtools.cloudtrace.v1.Trace.project_id)
}
inline ::std::string* Trace::mutable_project_id() {
  
  // @@protoc_insertion_point(field_mutable:google.devtools.cloudtrace.v1.Trace.project_id)
  return project_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Trace::release_project_id() {
  // @@protoc_insertion_point(field_release:google.devtools.cloudtrace.v1.Trace.project_id)
  
  return project_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Trace::set_allocated_project_id(::std::string* project_id) {
  if (project_id != NULL) {
    
  } else {
    
  }
  project_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), project_id);
  // @@protoc_insertion_point(field_set_allocated:google.devtools.cloudtrace.v1.Trace.project_id)
}

// string trace_id = 2;
inline void Trace::clear_trace_id() {
  trace_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Trace::trace_id() const {
  // @@protoc_insertion_point(field_get:google.devtools.cloudtrace.v1.Trace.trace_id)
  return trace_id_.GetNoArena();
}
inline void Trace::set_trace_id(const ::std::string& value) {
  
  trace_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.devtools.cloudtrace.v1.Trace.trace_id)
}
#if LANG_CXX11
inline void Trace::set_trace_id(::std::string&& value) {
  
  trace_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.devtools.cloudtrace.v1.Trace.trace_id)
}
#endif
inline void Trace::set_trace_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  trace_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.devtools.cloudtrace.v1.Trace.trace_id)
}
inline void Trace::set_trace_id(const char* value, size_t size) {
  
  trace_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.devtools.cloudtrace.v1.Trace.trace_id)
}
inline ::std::string* Trace::mutable_trace_id() {
  
  // @@protoc_insertion_point(field_mutable:google.devtools.cloudtrace.v1.Trace.trace_id)
  return trace_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Trace::release_trace_id() {
  // @@protoc_insertion_point(field_release:google.devtools.cloudtrace.v1.Trace.trace_id)
  
  return trace_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Trace::set_allocated_trace_id(::std::string* trace_id) {
  if (trace_id != NULL) {
    
  } else {
    
  }
  trace_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), trace_id);
  // @@protoc_insertion_point(field_set_allocated:google.devtools.cloudtrace.v1.Trace.trace_id)
}

// repeated .google.devtools.cloudtrace.v1.TraceSpan spans = 3;
inline int Trace::spans_size() const {
  return spans_.size();
}
inline void Trace::clear_spans() {
  spans_.Clear();
}
inline const ::google::devtools::cloudtrace::v1::TraceSpan& Trace::spans(int index) const {
  // @@protoc_insertion_point(field_get:google.devtools.cloudtrace.v1.Trace.spans)
  return spans_.Get(index);
}
inline ::google::devtools::cloudtrace::v1::TraceSpan* Trace::mutable_spans(int index) {
  // @@protoc_insertion_point(field_mutable:google.devtools.cloudtrace.v1.Trace.spans)
  return spans_.Mutable(index);
}
inline ::google::devtools::cloudtrace::v1::TraceSpan* Trace::add_spans() {
  // @@protoc_insertion_point(field_add:google.devtools.cloudtrace.v1.Trace.spans)
  return spans_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::google::devtools::cloudtrace::v1::TraceSpan >*
Trace::mutable_spans() {
  // @@protoc_insertion_point(field_mutable_list:google.devtools.cloudtrace.v1.Trace.spans)
  return &spans_;
}
inline const ::google::protobuf::RepeatedPtrField< ::google::devtools::cloudtrace::v1::TraceSpan >&
Trace::spans() const {
  // @@protoc_insertion_point(field_list:google.devtools.cloudtrace.v1.Trace.spans)
  return spans_;
}

// -------------------------------------------------------------------

// Traces

// repeated .google.devtools.cloudtrace.v1.Trace traces = 1;
inline int Traces::traces_size() const {
  return traces_.size();
}
inline void Traces::clear_traces() {
  traces_.Clear();
}
inline const ::google::devtools::cloudtrace::v1::Trace& Traces::traces(int index) const {
  // @@protoc_insertion_point(field_get:google.devtools.cloudtrace.v1.Traces.traces)
  return traces_.Get(index);
}
inline ::google::devtools::cloudtrace::v1::Trace* Traces::mutable_traces(int index) {
  // @@protoc_insertion_point(field_mutable:google.devtools.cloudtrace.v1.Traces.traces)
  return traces_.Mutable(index);
}
inline ::google::devtools::cloudtrace::v1::Trace* Traces::add_traces() {
  // @@protoc_insertion_point(field_add:google.devtools.cloudtrace.v1.Traces.traces)
  return traces_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::google::devtools::cloudtrace::v1::Trace >*
Traces::mutable_traces() {
  // @@protoc_insertion_point(field_mutable_list:google.devtools.cloudtrace.v1.Traces.traces)
  return &traces_;
}
inline const ::google::protobuf::RepeatedPtrField< ::google::devtools::cloudtrace::v1::Trace >&
Traces::traces() const {
  // @@protoc_insertion_point(field_list:google.devtools.cloudtrace.v1.Traces.traces)
  return traces_;
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// TraceSpan

// fixed64 span_id = 1;
inline void TraceSpan::clear_span_id() {
  span_id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 TraceSpan::span_id() const {
  // @@protoc_insertion_point(field_get:google.devtools.cloudtrace.v1.TraceSpan.span_id)
  return span_id_;
}
inline void TraceSpan::set_span_id(::google::protobuf::uint64 value) {
  
  span_id_ = value;
  // @@protoc_insertion_point(field_set:google.devtools.cloudtrace.v1.TraceSpan.span_id)
}

// .google.devtools.cloudtrace.v1.TraceSpan.SpanKind kind = 2;
inline void TraceSpan::clear_kind() {
  kind_ = 0;
}
inline ::google::devtools::cloudtrace::v1::TraceSpan_SpanKind TraceSpan::kind() const {
  // @@protoc_insertion_point(field_get:google.devtools.cloudtrace.v1.TraceSpan.kind)
  return static_cast< ::google::devtools::cloudtrace::v1::TraceSpan_SpanKind >(kind_);
}
inline void TraceSpan::set_kind(::google::devtools::cloudtrace::v1::TraceSpan_SpanKind value) {
  
  kind_ = value;
  // @@protoc_insertion_point(field_set:google.devtools.cloudtrace.v1.TraceSpan.kind)
}

// string name = 3;
inline void TraceSpan::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TraceSpan::name() const {
  // @@protoc_insertion_point(field_get:google.devtools.cloudtrace.v1.TraceSpan.name)
  return name_.GetNoArena();
}
inline void TraceSpan::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.devtools.cloudtrace.v1.TraceSpan.name)
}
#if LANG_CXX11
inline void TraceSpan::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.devtools.cloudtrace.v1.TraceSpan.name)
}
#endif
inline void TraceSpan::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.devtools.cloudtrace.v1.TraceSpan.name)
}
inline void TraceSpan::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.devtools.cloudtrace.v1.TraceSpan.name)
}
inline ::std::string* TraceSpan::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:google.devtools.cloudtrace.v1.TraceSpan.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TraceSpan::release_name() {
  // @@protoc_insertion_point(field_release:google.devtools.cloudtrace.v1.TraceSpan.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TraceSpan::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:google.devtools.cloudtrace.v1.TraceSpan.name)
}

// .google.protobuf.Timestamp start_time = 4;
inline bool TraceSpan::has_start_time() const {
  return this != internal_default_instance() && start_time_ != NULL;
}
inline const ::google::protobuf::Timestamp& TraceSpan::start_time() const {
  const ::google::protobuf::Timestamp* p = start_time_;
  // @@protoc_insertion_point(field_get:google.devtools.cloudtrace.v1.TraceSpan.start_time)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::Timestamp*>(
      &::google::protobuf::_Timestamp_default_instance_);
}
inline ::google::protobuf::Timestamp* TraceSpan::release_start_time() {
  // @@protoc_insertion_point(field_release:google.devtools.cloudtrace.v1.TraceSpan.start_time)
  
  ::google::protobuf::Timestamp* temp = start_time_;
  start_time_ = NULL;
  return temp;
}
inline ::google::protobuf::Timestamp* TraceSpan::mutable_start_time() {
  
  if (start_time_ == NULL) {
    start_time_ = new ::google::protobuf::Timestamp;
  }
  // @@protoc_insertion_point(field_mutable:google.devtools.cloudtrace.v1.TraceSpan.start_time)
  return start_time_;
}
inline void TraceSpan::set_allocated_start_time(::google::protobuf::Timestamp* start_time) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(start_time_);
  }
  if (start_time) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast< ::google::protobuf::MessageLite*>(start_time)->GetArena();
    if (message_arena != submessage_arena) {
      start_time = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, start_time, submessage_arena);
    }
    
  } else {
    
  }
  start_time_ = start_time;
  // @@protoc_insertion_point(field_set_allocated:google.devtools.cloudtrace.v1.TraceSpan.start_time)
}

// .google.protobuf.Timestamp end_time = 5;
inline bool TraceSpan::has_end_time() const {
  return this != internal_default_instance() && end_time_ != NULL;
}
inline const ::google::protobuf::Timestamp& TraceSpan::end_time() const {
  const ::google::protobuf::Timestamp* p = end_time_;
  // @@protoc_insertion_point(field_get:google.devtools.cloudtrace.v1.TraceSpan.end_time)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::Timestamp*>(
      &::google::protobuf::_Timestamp_default_instance_);
}
inline ::google::protobuf::Timestamp* TraceSpan::release_end_time() {
  // @@protoc_insertion_point(field_release:google.devtools.cloudtrace.v1.TraceSpan.end_time)
  
  ::google::protobuf::Timestamp* temp = end_time_;
  end_time_ = NULL;
  return temp;
}
inline ::google::protobuf::Timestamp* TraceSpan::mutable_end_time() {
  
  if (end_time_ == NULL) {
    end_time_ = new ::google::protobuf::Timestamp;
  }
  // @@protoc_insertion_point(field_mutable:google.devtools.cloudtrace.v1.TraceSpan.end_time)
  return end_time_;
}
inline void TraceSpan::set_allocated_end_time(::google::protobuf::Timestamp* end_time) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(end_time_);
  }
  if (end_time) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast< ::google::protobuf::MessageLite*>(end_time)->GetArena();
    if (message_arena != submessage_arena) {
      end_time = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, end_time, submessage_arena);
    }
    
  } else {
    
  }
  end_time_ = end_time;
  // @@protoc_insertion_point(field_set_allocated:google.devtools.cloudtrace.v1.TraceSpan.end_time)
}

// fixed64 parent_span_id = 6;
inline void TraceSpan::clear_parent_span_id() {
  parent_span_id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 TraceSpan::parent_span_id() const {
  // @@protoc_insertion_point(field_get:google.devtools.cloudtrace.v1.TraceSpan.parent_span_id)
  return parent_span_id_;
}
inline void TraceSpan::set_parent_span_id(::google::protobuf::uint64 value) {
  
  parent_span_id_ = value;
  // @@protoc_insertion_point(field_set:google.devtools.cloudtrace.v1.TraceSpan.parent_span_id)
}

// map<string, string> labels = 7;
inline int TraceSpan::labels_size() const {
  return labels_.size();
}
inline void TraceSpan::clear_labels() {
  labels_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::std::string >&
TraceSpan::labels() const {
  // @@protoc_insertion_point(field_map:google.devtools.cloudtrace.v1.TraceSpan.labels)
  return labels_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::std::string >*
TraceSpan::mutable_labels() {
  // @@protoc_insertion_point(field_mutable_map:google.devtools.cloudtrace.v1.TraceSpan.labels)
  return labels_.MutableMap();
}

// -------------------------------------------------------------------

// ListTracesRequest

// string project_id = 1;
inline void ListTracesRequest::clear_project_id() {
  project_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ListTracesRequest::project_id() const {
  // @@protoc_insertion_point(field_get:google.devtools.cloudtrace.v1.ListTracesRequest.project_id)
  return project_id_.GetNoArena();
}
inline void ListTracesRequest::set_project_id(const ::std::string& value) {
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.devtools.cloudtrace.v1.ListTracesRequest.project_id)
}
#if LANG_CXX11
inline void ListTracesRequest::set_project_id(::std::string&& value) {
  
  project_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.devtools.cloudtrace.v1.ListTracesRequest.project_id)
}
#endif
inline void ListTracesRequest::set_project_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.devtools.cloudtrace.v1.ListTracesRequest.project_id)
}
inline void ListTracesRequest::set_project_id(const char* value, size_t size) {
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.devtools.cloudtrace.v1.ListTracesRequest.project_id)
}
inline ::std::string* ListTracesRequest::mutable_project_id() {
  
  // @@protoc_insertion_point(field_mutable:google.devtools.cloudtrace.v1.ListTracesRequest.project_id)
  return project_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ListTracesRequest::release_project_id() {
  // @@protoc_insertion_point(field_release:google.devtools.cloudtrace.v1.ListTracesRequest.project_id)
  
  return project_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ListTracesRequest::set_allocated_project_id(::std::string* project_id) {
  if (project_id != NULL) {
    
  } else {
    
  }
  project_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), project_id);
  // @@protoc_insertion_point(field_set_allocated:google.devtools.cloudtrace.v1.ListTracesRequest.project_id)
}

// .google.devtools.cloudtrace.v1.ListTracesRequest.ViewType view = 2;
inline void ListTracesRequest::clear_view() {
  view_ = 0;
}
inline ::google::devtools::cloudtrace::v1::ListTracesRequest_ViewType ListTracesRequest::view() const {
  // @@protoc_insertion_point(field_get:google.devtools.cloudtrace.v1.ListTracesRequest.view)
  return static_cast< ::google::devtools::cloudtrace::v1::ListTracesRequest_ViewType >(view_);
}
inline void ListTracesRequest::set_view(::google::devtools::cloudtrace::v1::ListTracesRequest_ViewType value) {
  
  view_ = value;
  // @@protoc_insertion_point(field_set:google.devtools.cloudtrace.v1.ListTracesRequest.view)
}

// int32 page_size = 3;
inline void ListTracesRequest::clear_page_size() {
  page_size_ = 0;
}
inline ::google::protobuf::int32 ListTracesRequest::page_size() const {
  // @@protoc_insertion_point(field_get:google.devtools.cloudtrace.v1.ListTracesRequest.page_size)
  return page_size_;
}
inline void ListTracesRequest::set_page_size(::google::protobuf::int32 value) {
  
  page_size_ = value;
  // @@protoc_insertion_point(field_set:google.devtools.cloudtrace.v1.ListTracesRequest.page_size)
}

// string page_token = 4;
inline void ListTracesRequest::clear_page_token() {
  page_token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ListTracesRequest::page_token() const {
  // @@protoc_insertion_point(field_get:google.devtools.cloudtrace.v1.ListTracesRequest.page_token)
  return page_token_.GetNoArena();
}
inline void ListTracesRequest::set_page_token(const ::std::string& value) {
  
  page_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.devtools.cloudtrace.v1.ListTracesRequest.page_token)
}
#if LANG_CXX11
inline void ListTracesRequest::set_page_token(::std::string&& value) {
  
  page_token_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.devtools.cloudtrace.v1.ListTracesRequest.page_token)
}
#endif
inline void ListTracesRequest::set_page_token(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  page_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.devtools.cloudtrace.v1.ListTracesRequest.page_token)
}
inline void ListTracesRequest::set_page_token(const char* value, size_t size) {
  
  page_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.devtools.cloudtrace.v1.ListTracesRequest.page_token)
}
inline ::std::string* ListTracesRequest::mutable_page_token() {
  
  // @@protoc_insertion_point(field_mutable:google.devtools.cloudtrace.v1.ListTracesRequest.page_token)
  return page_token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ListTracesRequest::release_page_token() {
  // @@protoc_insertion_point(field_release:google.devtools.cloudtrace.v1.ListTracesRequest.page_token)
  
  return page_token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ListTracesRequest::set_allocated_page_token(::std::string* page_token) {
  if (page_token != NULL) {
    
  } else {
    
  }
  page_token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), page_token);
  // @@protoc_insertion_point(field_set_allocated:google.devtools.cloudtrace.v1.ListTracesRequest.page_token)
}

// .google.protobuf.Timestamp start_time = 5;
inline bool ListTracesRequest::has_start_time() const {
  return this != internal_default_instance() && start_time_ != NULL;
}
inline const ::google::protobuf::Timestamp& ListTracesRequest::start_time() const {
  const ::google::protobuf::Timestamp* p = start_time_;
  // @@protoc_insertion_point(field_get:google.devtools.cloudtrace.v1.ListTracesRequest.start_time)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::Timestamp*>(
      &::google::protobuf::_Timestamp_default_instance_);
}
inline ::google::protobuf::Timestamp* ListTracesRequest::release_start_time() {
  // @@protoc_insertion_point(field_release:google.devtools.cloudtrace.v1.ListTracesRequest.start_time)
  
  ::google::protobuf::Timestamp* temp = start_time_;
  start_time_ = NULL;
  return temp;
}
inline ::google::protobuf::Timestamp* ListTracesRequest::mutable_start_time() {
  
  if (start_time_ == NULL) {
    start_time_ = new ::google::protobuf::Timestamp;
  }
  // @@protoc_insertion_point(field_mutable:google.devtools.cloudtrace.v1.ListTracesRequest.start_time)
  return start_time_;
}
inline void ListTracesRequest::set_allocated_start_time(::google::protobuf::Timestamp* start_time) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(start_time_);
  }
  if (start_time) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast< ::google::protobuf::MessageLite*>(start_time)->GetArena();
    if (message_arena != submessage_arena) {
      start_time = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, start_time, submessage_arena);
    }
    
  } else {
    
  }
  start_time_ = start_time;
  // @@protoc_insertion_point(field_set_allocated:google.devtools.cloudtrace.v1.ListTracesRequest.start_time)
}

// .google.protobuf.Timestamp end_time = 6;
inline bool ListTracesRequest::has_end_time() const {
  return this != internal_default_instance() && end_time_ != NULL;
}
inline const ::google::protobuf::Timestamp& ListTracesRequest::end_time() const {
  const ::google::protobuf::Timestamp* p = end_time_;
  // @@protoc_insertion_point(field_get:google.devtools.cloudtrace.v1.ListTracesRequest.end_time)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::Timestamp*>(
      &::google::protobuf::_Timestamp_default_instance_);
}
inline ::google::protobuf::Timestamp* ListTracesRequest::release_end_time() {
  // @@protoc_insertion_point(field_release:google.devtools.cloudtrace.v1.ListTracesRequest.end_time)
  
  ::google::protobuf::Timestamp* temp = end_time_;
  end_time_ = NULL;
  return temp;
}
inline ::google::protobuf::Timestamp* ListTracesRequest::mutable_end_time() {
  
  if (end_time_ == NULL) {
    end_time_ = new ::google::protobuf::Timestamp;
  }
  // @@protoc_insertion_point(field_mutable:google.devtools.cloudtrace.v1.ListTracesRequest.end_time)
  return end_time_;
}
inline void ListTracesRequest::set_allocated_end_time(::google::protobuf::Timestamp* end_time) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(end_time_);
  }
  if (end_time) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast< ::google::protobuf::MessageLite*>(end_time)->GetArena();
    if (message_arena != submessage_arena) {
      end_time = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, end_time, submessage_arena);
    }
    
  } else {
    
  }
  end_time_ = end_time;
  // @@protoc_insertion_point(field_set_allocated:google.devtools.cloudtrace.v1.ListTracesRequest.end_time)
}

// string filter = 7;
inline void ListTracesRequest::clear_filter() {
  filter_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ListTracesRequest::filter() const {
  // @@protoc_insertion_point(field_get:google.devtools.cloudtrace.v1.ListTracesRequest.filter)
  return filter_.GetNoArena();
}
inline void ListTracesRequest::set_filter(const ::std::string& value) {
  
  filter_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.devtools.cloudtrace.v1.ListTracesRequest.filter)
}
#if LANG_CXX11
inline void ListTracesRequest::set_filter(::std::string&& value) {
  
  filter_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.devtools.cloudtrace.v1.ListTracesRequest.filter)
}
#endif
inline void ListTracesRequest::set_filter(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  filter_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.devtools.cloudtrace.v1.ListTracesRequest.filter)
}
inline void ListTracesRequest::set_filter(const char* value, size_t size) {
  
  filter_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.devtools.cloudtrace.v1.ListTracesRequest.filter)
}
inline ::std::string* ListTracesRequest::mutable_filter() {
  
  // @@protoc_insertion_point(field_mutable:google.devtools.cloudtrace.v1.ListTracesRequest.filter)
  return filter_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ListTracesRequest::release_filter() {
  // @@protoc_insertion_point(field_release:google.devtools.cloudtrace.v1.ListTracesRequest.filter)
  
  return filter_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ListTracesRequest::set_allocated_filter(::std::string* filter) {
  if (filter != NULL) {
    
  } else {
    
  }
  filter_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), filter);
  // @@protoc_insertion_point(field_set_allocated:google.devtools.cloudtrace.v1.ListTracesRequest.filter)
}

// string order_by = 8;
inline void ListTracesRequest::clear_order_by() {
  order_by_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ListTracesRequest::order_by() const {
  // @@protoc_insertion_point(field_get:google.devtools.cloudtrace.v1.ListTracesRequest.order_by)
  return order_by_.GetNoArena();
}
inline void ListTracesRequest::set_order_by(const ::std::string& value) {
  
  order_by_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.devtools.cloudtrace.v1.ListTracesRequest.order_by)
}
#if LANG_CXX11
inline void ListTracesRequest::set_order_by(::std::string&& value) {
  
  order_by_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.devtools.cloudtrace.v1.ListTracesRequest.order_by)
}
#endif
inline void ListTracesRequest::set_order_by(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  order_by_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.devtools.cloudtrace.v1.ListTracesRequest.order_by)
}
inline void ListTracesRequest::set_order_by(const char* value, size_t size) {
  
  order_by_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.devtools.cloudtrace.v1.ListTracesRequest.order_by)
}
inline ::std::string* ListTracesRequest::mutable_order_by() {
  
  // @@protoc_insertion_point(field_mutable:google.devtools.cloudtrace.v1.ListTracesRequest.order_by)
  return order_by_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ListTracesRequest::release_order_by() {
  // @@protoc_insertion_point(field_release:google.devtools.cloudtrace.v1.ListTracesRequest.order_by)
  
  return order_by_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ListTracesRequest::set_allocated_order_by(::std::string* order_by) {
  if (order_by != NULL) {
    
  } else {
    
  }
  order_by_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), order_by);
  // @@protoc_insertion_point(field_set_allocated:google.devtools.cloudtrace.v1.ListTracesRequest.order_by)
}

// -------------------------------------------------------------------

// ListTracesResponse

// repeated .google.devtools.cloudtrace.v1.Trace traces = 1;
inline int ListTracesResponse::traces_size() const {
  return traces_.size();
}
inline void ListTracesResponse::clear_traces() {
  traces_.Clear();
}
inline const ::google::devtools::cloudtrace::v1::Trace& ListTracesResponse::traces(int index) const {
  // @@protoc_insertion_point(field_get:google.devtools.cloudtrace.v1.ListTracesResponse.traces)
  return traces_.Get(index);
}
inline ::google::devtools::cloudtrace::v1::Trace* ListTracesResponse::mutable_traces(int index) {
  // @@protoc_insertion_point(field_mutable:google.devtools.cloudtrace.v1.ListTracesResponse.traces)
  return traces_.Mutable(index);
}
inline ::google::devtools::cloudtrace::v1::Trace* ListTracesResponse::add_traces() {
  // @@protoc_insertion_point(field_add:google.devtools.cloudtrace.v1.ListTracesResponse.traces)
  return traces_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::google::devtools::cloudtrace::v1::Trace >*
ListTracesResponse::mutable_traces() {
  // @@protoc_insertion_point(field_mutable_list:google.devtools.cloudtrace.v1.ListTracesResponse.traces)
  return &traces_;
}
inline const ::google::protobuf::RepeatedPtrField< ::google::devtools::cloudtrace::v1::Trace >&
ListTracesResponse::traces() const {
  // @@protoc_insertion_point(field_list:google.devtools.cloudtrace.v1.ListTracesResponse.traces)
  return traces_;
}

// string next_page_token = 2;
inline void ListTracesResponse::clear_next_page_token() {
  next_page_token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ListTracesResponse::next_page_token() const {
  // @@protoc_insertion_point(field_get:google.devtools.cloudtrace.v1.ListTracesResponse.next_page_token)
  return next_page_token_.GetNoArena();
}
inline void ListTracesResponse::set_next_page_token(const ::std::string& value) {
  
  next_page_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.devtools.cloudtrace.v1.ListTracesResponse.next_page_token)
}
#if LANG_CXX11
inline void ListTracesResponse::set_next_page_token(::std::string&& value) {
  
  next_page_token_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.devtools.cloudtrace.v1.ListTracesResponse.next_page_token)
}
#endif
inline void ListTracesResponse::set_next_page_token(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  next_page_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.devtools.cloudtrace.v1.ListTracesResponse.next_page_token)
}
inline void ListTracesResponse::set_next_page_token(const char* value, size_t size) {
  
  next_page_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.devtools.cloudtrace.v1.ListTracesResponse.next_page_token)
}
inline ::std::string* ListTracesResponse::mutable_next_page_token() {
  
  // @@protoc_insertion_point(field_mutable:google.devtools.cloudtrace.v1.ListTracesResponse.next_page_token)
  return next_page_token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ListTracesResponse::release_next_page_token() {
  // @@protoc_insertion_point(field_release:google.devtools.cloudtrace.v1.ListTracesResponse.next_page_token)
  
  return next_page_token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ListTracesResponse::set_allocated_next_page_token(::std::string* next_page_token) {
  if (next_page_token != NULL) {
    
  } else {
    
  }
  next_page_token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), next_page_token);
  // @@protoc_insertion_point(field_set_allocated:google.devtools.cloudtrace.v1.ListTracesResponse.next_page_token)
}

// -------------------------------------------------------------------

// GetTraceRequest

// string project_id = 1;
inline void GetTraceRequest::clear_project_id() {
  project_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetTraceRequest::project_id() const {
  // @@protoc_insertion_point(field_get:google.devtools.cloudtrace.v1.GetTraceRequest.project_id)
  return project_id_.GetNoArena();
}
inline void GetTraceRequest::set_project_id(const ::std::string& value) {
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.devtools.cloudtrace.v1.GetTraceRequest.project_id)
}
#if LANG_CXX11
inline void GetTraceRequest::set_project_id(::std::string&& value) {
  
  project_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.devtools.cloudtrace.v1.GetTraceRequest.project_id)
}
#endif
inline void GetTraceRequest::set_project_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.devtools.cloudtrace.v1.GetTraceRequest.project_id)
}
inline void GetTraceRequest::set_project_id(const char* value, size_t size) {
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.devtools.cloudtrace.v1.GetTraceRequest.project_id)
}
inline ::std::string* GetTraceRequest::mutable_project_id() {
  
  // @@protoc_insertion_point(field_mutable:google.devtools.cloudtrace.v1.GetTraceRequest.project_id)
  return project_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetTraceRequest::release_project_id() {
  // @@protoc_insertion_point(field_release:google.devtools.cloudtrace.v1.GetTraceRequest.project_id)
  
  return project_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetTraceRequest::set_allocated_project_id(::std::string* project_id) {
  if (project_id != NULL) {
    
  } else {
    
  }
  project_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), project_id);
  // @@protoc_insertion_point(field_set_allocated:google.devtools.cloudtrace.v1.GetTraceRequest.project_id)
}

// string trace_id = 2;
inline void GetTraceRequest::clear_trace_id() {
  trace_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetTraceRequest::trace_id() const {
  // @@protoc_insertion_point(field_get:google.devtools.cloudtrace.v1.GetTraceRequest.trace_id)
  return trace_id_.GetNoArena();
}
inline void GetTraceRequest::set_trace_id(const ::std::string& value) {
  
  trace_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.devtools.cloudtrace.v1.GetTraceRequest.trace_id)
}
#if LANG_CXX11
inline void GetTraceRequest::set_trace_id(::std::string&& value) {
  
  trace_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.devtools.cloudtrace.v1.GetTraceRequest.trace_id)
}
#endif
inline void GetTraceRequest::set_trace_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  trace_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.devtools.cloudtrace.v1.GetTraceRequest.trace_id)
}
inline void GetTraceRequest::set_trace_id(const char* value, size_t size) {
  
  trace_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.devtools.cloudtrace.v1.GetTraceRequest.trace_id)
}
inline ::std::string* GetTraceRequest::mutable_trace_id() {
  
  // @@protoc_insertion_point(field_mutable:google.devtools.cloudtrace.v1.GetTraceRequest.trace_id)
  return trace_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetTraceRequest::release_trace_id() {
  // @@protoc_insertion_point(field_release:google.devtools.cloudtrace.v1.GetTraceRequest.trace_id)
  
  return trace_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetTraceRequest::set_allocated_trace_id(::std::string* trace_id) {
  if (trace_id != NULL) {
    
  } else {
    
  }
  trace_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), trace_id);
  // @@protoc_insertion_point(field_set_allocated:google.devtools.cloudtrace.v1.GetTraceRequest.trace_id)
}

// -------------------------------------------------------------------

// PatchTracesRequest

// string project_id = 1;
inline void PatchTracesRequest::clear_project_id() {
  project_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PatchTracesRequest::project_id() const {
  // @@protoc_insertion_point(field_get:google.devtools.cloudtrace.v1.PatchTracesRequest.project_id)
  return project_id_.GetNoArena();
}
inline void PatchTracesRequest::set_project_id(const ::std::string& value) {
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.devtools.cloudtrace.v1.PatchTracesRequest.project_id)
}
#if LANG_CXX11
inline void PatchTracesRequest::set_project_id(::std::string&& value) {
  
  project_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.devtools.cloudtrace.v1.PatchTracesRequest.project_id)
}
#endif
inline void PatchTracesRequest::set_project_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.devtools.cloudtrace.v1.PatchTracesRequest.project_id)
}
inline void PatchTracesRequest::set_project_id(const char* value, size_t size) {
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.devtools.cloudtrace.v1.PatchTracesRequest.project_id)
}
inline ::std::string* PatchTracesRequest::mutable_project_id() {
  
  // @@protoc_insertion_point(field_mutable:google.devtools.cloudtrace.v1.PatchTracesRequest.project_id)
  return project_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PatchTracesRequest::release_project_id() {
  // @@protoc_insertion_point(field_release:google.devtools.cloudtrace.v1.PatchTracesRequest.project_id)
  
  return project_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PatchTracesRequest::set_allocated_project_id(::std::string* project_id) {
  if (project_id != NULL) {
    
  } else {
    
  }
  project_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), project_id);
  // @@protoc_insertion_point(field_set_allocated:google.devtools.cloudtrace.v1.PatchTracesRequest.project_id)
}

// .google.devtools.cloudtrace.v1.Traces traces = 2;
inline bool PatchTracesRequest::has_traces() const {
  return this != internal_default_instance() && traces_ != NULL;
}
inline void PatchTracesRequest::clear_traces() {
  if (GetArenaNoVirtual() == NULL && traces_ != NULL) {
    delete traces_;
  }
  traces_ = NULL;
}
inline const ::google::devtools::cloudtrace::v1::Traces& PatchTracesRequest::traces() const {
  const ::google::devtools::cloudtrace::v1::Traces* p = traces_;
  // @@protoc_insertion_point(field_get:google.devtools.cloudtrace.v1.PatchTracesRequest.traces)
  return p != NULL ? *p : *reinterpret_cast<const ::google::devtools::cloudtrace::v1::Traces*>(
      &::google::devtools::cloudtrace::v1::_Traces_default_instance_);
}
inline ::google::devtools::cloudtrace::v1::Traces* PatchTracesRequest::release_traces() {
  // @@protoc_insertion_point(field_release:google.devtools.cloudtrace.v1.PatchTracesRequest.traces)
  
  ::google::devtools::cloudtrace::v1::Traces* temp = traces_;
  traces_ = NULL;
  return temp;
}
inline ::google::devtools::cloudtrace::v1::Traces* PatchTracesRequest::mutable_traces() {
  
  if (traces_ == NULL) {
    traces_ = new ::google::devtools::cloudtrace::v1::Traces;
  }
  // @@protoc_insertion_point(field_mutable:google.devtools.cloudtrace.v1.PatchTracesRequest.traces)
  return traces_;
}
inline void PatchTracesRequest::set_allocated_traces(::google::devtools::cloudtrace::v1::Traces* traces) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete traces_;
  }
  if (traces) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      traces = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, traces, submessage_arena);
    }
    
  } else {
    
  }
  traces_ = traces;
  // @@protoc_insertion_point(field_set_allocated:google.devtools.cloudtrace.v1.PatchTracesRequest.traces)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace cloudtrace
}  // namespace devtools
}  // namespace google

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::google::devtools::cloudtrace::v1::TraceSpan_SpanKind> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::google::devtools::cloudtrace::v1::TraceSpan_SpanKind>() {
  return ::google::devtools::cloudtrace::v1::TraceSpan_SpanKind_descriptor();
}
template <> struct is_proto_enum< ::google::devtools::cloudtrace::v1::ListTracesRequest_ViewType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::google::devtools::cloudtrace::v1::ListTracesRequest_ViewType>() {
  return ::google::devtools::cloudtrace::v1::ListTracesRequest_ViewType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_google_2fdevtools_2fcloudtrace_2fv1_2ftrace_2eproto__INCLUDED
