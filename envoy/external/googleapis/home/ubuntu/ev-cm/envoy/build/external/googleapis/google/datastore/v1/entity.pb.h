// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/datastore/v1/entity.proto

#ifndef PROTOBUF_google_2fdatastore_2fv1_2fentity_2eproto__INCLUDED
#define PROTOBUF_google_2fdatastore_2fv1_2fentity_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/unknown_field_set.h>
#include "google/api/annotations.pb.h"
#include <google/protobuf/struct.pb.h>
#include <google/protobuf/timestamp.pb.h>
#include "google/type/latlng.pb.h"
// @@protoc_insertion_point(includes)

namespace protobuf_google_2fdatastore_2fv1_2fentity_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[7];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsPartitionIdImpl();
void InitDefaultsPartitionId();
void InitDefaultsKey_PathElementImpl();
void InitDefaultsKey_PathElement();
void InitDefaultsKeyImpl();
void InitDefaultsKey();
void InitDefaultsArrayValueImpl();
void InitDefaultsArrayValue();
inline void InitDefaults() {
  InitDefaultsPartitionId();
  InitDefaultsKey_PathElement();
  InitDefaultsKey();
  InitDefaultsArrayValue();
}
}  // namespace protobuf_google_2fdatastore_2fv1_2fentity_2eproto
namespace google {
namespace datastore {
namespace v1 {
class ArrayValue;
class ArrayValueDefaultTypeInternal;
extern ArrayValueDefaultTypeInternal _ArrayValue_default_instance_;
class Entity;
class EntityDefaultTypeInternal;
extern EntityDefaultTypeInternal _Entity_default_instance_;
class Entity_PropertiesEntry_DoNotUse;
class Entity_PropertiesEntry_DoNotUseDefaultTypeInternal;
extern Entity_PropertiesEntry_DoNotUseDefaultTypeInternal _Entity_PropertiesEntry_DoNotUse_default_instance_;
class Key;
class KeyDefaultTypeInternal;
extern KeyDefaultTypeInternal _Key_default_instance_;
class Key_PathElement;
class Key_PathElementDefaultTypeInternal;
extern Key_PathElementDefaultTypeInternal _Key_PathElement_default_instance_;
class PartitionId;
class PartitionIdDefaultTypeInternal;
extern PartitionIdDefaultTypeInternal _PartitionId_default_instance_;
class Value;
class ValueDefaultTypeInternal;
extern ValueDefaultTypeInternal _Value_default_instance_;
}  // namespace v1
}  // namespace datastore
}  // namespace google
namespace google {
namespace datastore {
namespace v1 {

// ===================================================================

class PartitionId : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.datastore.v1.PartitionId) */ {
 public:
  PartitionId();
  virtual ~PartitionId();

  PartitionId(const PartitionId& from);

  inline PartitionId& operator=(const PartitionId& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PartitionId(PartitionId&& from) noexcept
    : PartitionId() {
    *this = ::std::move(from);
  }

  inline PartitionId& operator=(PartitionId&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PartitionId& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PartitionId* internal_default_instance() {
    return reinterpret_cast<const PartitionId*>(
               &_PartitionId_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(PartitionId* other);
  friend void swap(PartitionId& a, PartitionId& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PartitionId* New() const PROTOBUF_FINAL { return New(NULL); }

  PartitionId* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const PartitionId& from);
  void MergeFrom(const PartitionId& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(PartitionId* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string project_id = 2;
  void clear_project_id();
  static const int kProjectIdFieldNumber = 2;
  const ::std::string& project_id() const;
  void set_project_id(const ::std::string& value);
  #if LANG_CXX11
  void set_project_id(::std::string&& value);
  #endif
  void set_project_id(const char* value);
  void set_project_id(const char* value, size_t size);
  ::std::string* mutable_project_id();
  ::std::string* release_project_id();
  void set_allocated_project_id(::std::string* project_id);

  // string namespace_id = 4;
  void clear_namespace_id();
  static const int kNamespaceIdFieldNumber = 4;
  const ::std::string& namespace_id() const;
  void set_namespace_id(const ::std::string& value);
  #if LANG_CXX11
  void set_namespace_id(::std::string&& value);
  #endif
  void set_namespace_id(const char* value);
  void set_namespace_id(const char* value, size_t size);
  ::std::string* mutable_namespace_id();
  ::std::string* release_namespace_id();
  void set_allocated_namespace_id(::std::string* namespace_id);

  // @@protoc_insertion_point(class_scope:google.datastore.v1.PartitionId)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr project_id_;
  ::google::protobuf::internal::ArenaStringPtr namespace_id_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fdatastore_2fv1_2fentity_2eproto::TableStruct;
  friend void ::protobuf_google_2fdatastore_2fv1_2fentity_2eproto::InitDefaultsPartitionIdImpl();
};
// -------------------------------------------------------------------

class Key_PathElement : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.datastore.v1.Key.PathElement) */ {
 public:
  Key_PathElement();
  virtual ~Key_PathElement();

  Key_PathElement(const Key_PathElement& from);

  inline Key_PathElement& operator=(const Key_PathElement& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Key_PathElement(Key_PathElement&& from) noexcept
    : Key_PathElement() {
    *this = ::std::move(from);
  }

  inline Key_PathElement& operator=(Key_PathElement&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Key_PathElement& default_instance();

  enum IdTypeCase {
    kId = 2,
    kName = 3,
    ID_TYPE_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Key_PathElement* internal_default_instance() {
    return reinterpret_cast<const Key_PathElement*>(
               &_Key_PathElement_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(Key_PathElement* other);
  friend void swap(Key_PathElement& a, Key_PathElement& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Key_PathElement* New() const PROTOBUF_FINAL { return New(NULL); }

  Key_PathElement* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Key_PathElement& from);
  void MergeFrom(const Key_PathElement& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Key_PathElement* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string kind = 1;
  void clear_kind();
  static const int kKindFieldNumber = 1;
  const ::std::string& kind() const;
  void set_kind(const ::std::string& value);
  #if LANG_CXX11
  void set_kind(::std::string&& value);
  #endif
  void set_kind(const char* value);
  void set_kind(const char* value, size_t size);
  ::std::string* mutable_kind();
  ::std::string* release_kind();
  void set_allocated_kind(::std::string* kind);

  // int64 id = 2;
  private:
  bool has_id() const;
  public:
  void clear_id();
  static const int kIdFieldNumber = 2;
  ::google::protobuf::int64 id() const;
  void set_id(::google::protobuf::int64 value);

  // string name = 3;
  private:
  bool has_name() const;
  public:
  void clear_name();
  static const int kNameFieldNumber = 3;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  IdTypeCase id_type_case() const;
  // @@protoc_insertion_point(class_scope:google.datastore.v1.Key.PathElement)
 private:
  void set_has_id();
  void set_has_name();

  inline bool has_id_type() const;
  void clear_id_type();
  inline void clear_has_id_type();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr kind_;
  union IdTypeUnion {
    IdTypeUnion() {}
    ::google::protobuf::int64 id_;
    ::google::protobuf::internal::ArenaStringPtr name_;
  } id_type_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::protobuf_google_2fdatastore_2fv1_2fentity_2eproto::TableStruct;
  friend void ::protobuf_google_2fdatastore_2fv1_2fentity_2eproto::InitDefaultsKey_PathElementImpl();
};
// -------------------------------------------------------------------

class Key : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.datastore.v1.Key) */ {
 public:
  Key();
  virtual ~Key();

  Key(const Key& from);

  inline Key& operator=(const Key& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Key(Key&& from) noexcept
    : Key() {
    *this = ::std::move(from);
  }

  inline Key& operator=(Key&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Key& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Key* internal_default_instance() {
    return reinterpret_cast<const Key*>(
               &_Key_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(Key* other);
  friend void swap(Key& a, Key& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Key* New() const PROTOBUF_FINAL { return New(NULL); }

  Key* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Key& from);
  void MergeFrom(const Key& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Key* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef Key_PathElement PathElement;

  // accessors -------------------------------------------------------

  // repeated .google.datastore.v1.Key.PathElement path = 2;
  int path_size() const;
  void clear_path();
  static const int kPathFieldNumber = 2;
  const ::google::datastore::v1::Key_PathElement& path(int index) const;
  ::google::datastore::v1::Key_PathElement* mutable_path(int index);
  ::google::datastore::v1::Key_PathElement* add_path();
  ::google::protobuf::RepeatedPtrField< ::google::datastore::v1::Key_PathElement >*
      mutable_path();
  const ::google::protobuf::RepeatedPtrField< ::google::datastore::v1::Key_PathElement >&
      path() const;

  // .google.datastore.v1.PartitionId partition_id = 1;
  bool has_partition_id() const;
  void clear_partition_id();
  static const int kPartitionIdFieldNumber = 1;
  const ::google::datastore::v1::PartitionId& partition_id() const;
  ::google::datastore::v1::PartitionId* release_partition_id();
  ::google::datastore::v1::PartitionId* mutable_partition_id();
  void set_allocated_partition_id(::google::datastore::v1::PartitionId* partition_id);

  // @@protoc_insertion_point(class_scope:google.datastore.v1.Key)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::google::datastore::v1::Key_PathElement > path_;
  ::google::datastore::v1::PartitionId* partition_id_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fdatastore_2fv1_2fentity_2eproto::TableStruct;
  friend void ::protobuf_google_2fdatastore_2fv1_2fentity_2eproto::InitDefaultsKeyImpl();
};
// -------------------------------------------------------------------

class ArrayValue : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.datastore.v1.ArrayValue) */ {
 public:
  ArrayValue();
  virtual ~ArrayValue();

  ArrayValue(const ArrayValue& from);

  inline ArrayValue& operator=(const ArrayValue& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ArrayValue(ArrayValue&& from) noexcept
    : ArrayValue() {
    *this = ::std::move(from);
  }

  inline ArrayValue& operator=(ArrayValue&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ArrayValue& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ArrayValue* internal_default_instance() {
    return reinterpret_cast<const ArrayValue*>(
               &_ArrayValue_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(ArrayValue* other);
  friend void swap(ArrayValue& a, ArrayValue& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ArrayValue* New() const PROTOBUF_FINAL { return New(NULL); }

  ArrayValue* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ArrayValue& from);
  void MergeFrom(const ArrayValue& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ArrayValue* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .google.datastore.v1.Value values = 1;
  int values_size() const;
  void clear_values();
  static const int kValuesFieldNumber = 1;
  const ::google::datastore::v1::Value& values(int index) const;
  ::google::datastore::v1::Value* mutable_values(int index);
  ::google::datastore::v1::Value* add_values();
  ::google::protobuf::RepeatedPtrField< ::google::datastore::v1::Value >*
      mutable_values();
  const ::google::protobuf::RepeatedPtrField< ::google::datastore::v1::Value >&
      values() const;

  // @@protoc_insertion_point(class_scope:google.datastore.v1.ArrayValue)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::google::datastore::v1::Value > values_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fdatastore_2fv1_2fentity_2eproto::TableStruct;
  friend void ::protobuf_google_2fdatastore_2fv1_2fentity_2eproto::InitDefaultsArrayValueImpl();
};
// -------------------------------------------------------------------

class Value : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.datastore.v1.Value) */ {
 public:
  Value();
  virtual ~Value();

  Value(const Value& from);

  inline Value& operator=(const Value& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Value(Value&& from) noexcept
    : Value() {
    *this = ::std::move(from);
  }

  inline Value& operator=(Value&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Value& default_instance();

  enum ValueTypeCase {
    kNullValue = 11,
    kBooleanValue = 1,
    kIntegerValue = 2,
    kDoubleValue = 3,
    kTimestampValue = 10,
    kKeyValue = 5,
    kStringValue = 17,
    kBlobValue = 18,
    kGeoPointValue = 8,
    kEntityValue = 6,
    kArrayValue = 9,
    VALUE_TYPE_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Value* internal_default_instance() {
    return reinterpret_cast<const Value*>(
               &_Value_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(Value* other);
  friend void swap(Value& a, Value& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Value* New() const PROTOBUF_FINAL { return New(NULL); }

  Value* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Value& from);
  void MergeFrom(const Value& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Value* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 meaning = 14;
  void clear_meaning();
  static const int kMeaningFieldNumber = 14;
  ::google::protobuf::int32 meaning() const;
  void set_meaning(::google::protobuf::int32 value);

  // bool exclude_from_indexes = 19;
  void clear_exclude_from_indexes();
  static const int kExcludeFromIndexesFieldNumber = 19;
  bool exclude_from_indexes() const;
  void set_exclude_from_indexes(bool value);

  // .google.protobuf.NullValue null_value = 11;
  private:
  bool has_null_value() const;
  public:
  void clear_null_value();
  static const int kNullValueFieldNumber = 11;
  ::google::protobuf::NullValue null_value() const;
  void set_null_value(::google::protobuf::NullValue value);

  // bool boolean_value = 1;
  private:
  bool has_boolean_value() const;
  public:
  void clear_boolean_value();
  static const int kBooleanValueFieldNumber = 1;
  bool boolean_value() const;
  void set_boolean_value(bool value);

  // int64 integer_value = 2;
  private:
  bool has_integer_value() const;
  public:
  void clear_integer_value();
  static const int kIntegerValueFieldNumber = 2;
  ::google::protobuf::int64 integer_value() const;
  void set_integer_value(::google::protobuf::int64 value);

  // double double_value = 3;
  private:
  bool has_double_value() const;
  public:
  void clear_double_value();
  static const int kDoubleValueFieldNumber = 3;
  double double_value() const;
  void set_double_value(double value);

  // .google.protobuf.Timestamp timestamp_value = 10;
  bool has_timestamp_value() const;
  void clear_timestamp_value();
  static const int kTimestampValueFieldNumber = 10;
  const ::google::protobuf::Timestamp& timestamp_value() const;
  ::google::protobuf::Timestamp* release_timestamp_value();
  ::google::protobuf::Timestamp* mutable_timestamp_value();
  void set_allocated_timestamp_value(::google::protobuf::Timestamp* timestamp_value);

  // .google.datastore.v1.Key key_value = 5;
  bool has_key_value() const;
  void clear_key_value();
  static const int kKeyValueFieldNumber = 5;
  const ::google::datastore::v1::Key& key_value() const;
  ::google::datastore::v1::Key* release_key_value();
  ::google::datastore::v1::Key* mutable_key_value();
  void set_allocated_key_value(::google::datastore::v1::Key* key_value);

  // string string_value = 17;
  private:
  bool has_string_value() const;
  public:
  void clear_string_value();
  static const int kStringValueFieldNumber = 17;
  const ::std::string& string_value() const;
  void set_string_value(const ::std::string& value);
  #if LANG_CXX11
  void set_string_value(::std::string&& value);
  #endif
  void set_string_value(const char* value);
  void set_string_value(const char* value, size_t size);
  ::std::string* mutable_string_value();
  ::std::string* release_string_value();
  void set_allocated_string_value(::std::string* string_value);

  // bytes blob_value = 18;
  private:
  bool has_blob_value() const;
  public:
  void clear_blob_value();
  static const int kBlobValueFieldNumber = 18;
  const ::std::string& blob_value() const;
  void set_blob_value(const ::std::string& value);
  #if LANG_CXX11
  void set_blob_value(::std::string&& value);
  #endif
  void set_blob_value(const char* value);
  void set_blob_value(const void* value, size_t size);
  ::std::string* mutable_blob_value();
  ::std::string* release_blob_value();
  void set_allocated_blob_value(::std::string* blob_value);

  // .google.type.LatLng geo_point_value = 8;
  bool has_geo_point_value() const;
  void clear_geo_point_value();
  static const int kGeoPointValueFieldNumber = 8;
  const ::google::type::LatLng& geo_point_value() const;
  ::google::type::LatLng* release_geo_point_value();
  ::google::type::LatLng* mutable_geo_point_value();
  void set_allocated_geo_point_value(::google::type::LatLng* geo_point_value);

  // .google.datastore.v1.Entity entity_value = 6;
  bool has_entity_value() const;
  void clear_entity_value();
  static const int kEntityValueFieldNumber = 6;
  const ::google::datastore::v1::Entity& entity_value() const;
  ::google::datastore::v1::Entity* release_entity_value();
  ::google::datastore::v1::Entity* mutable_entity_value();
  void set_allocated_entity_value(::google::datastore::v1::Entity* entity_value);

  // .google.datastore.v1.ArrayValue array_value = 9;
  bool has_array_value() const;
  void clear_array_value();
  static const int kArrayValueFieldNumber = 9;
  const ::google::datastore::v1::ArrayValue& array_value() const;
  ::google::datastore::v1::ArrayValue* release_array_value();
  ::google::datastore::v1::ArrayValue* mutable_array_value();
  void set_allocated_array_value(::google::datastore::v1::ArrayValue* array_value);

  ValueTypeCase value_type_case() const;
  // @@protoc_insertion_point(class_scope:google.datastore.v1.Value)
 private:
  void set_has_null_value();
  void set_has_boolean_value();
  void set_has_integer_value();
  void set_has_double_value();
  void set_has_timestamp_value();
  void set_has_key_value();
  void set_has_string_value();
  void set_has_blob_value();
  void set_has_geo_point_value();
  void set_has_entity_value();
  void set_has_array_value();

  inline bool has_value_type() const;
  void clear_value_type();
  inline void clear_has_value_type();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 meaning_;
  bool exclude_from_indexes_;
  union ValueTypeUnion {
    ValueTypeUnion() {}
    int null_value_;
    bool boolean_value_;
    ::google::protobuf::int64 integer_value_;
    double double_value_;
    ::google::protobuf::Timestamp* timestamp_value_;
    ::google::datastore::v1::Key* key_value_;
    ::google::protobuf::internal::ArenaStringPtr string_value_;
    ::google::protobuf::internal::ArenaStringPtr blob_value_;
    ::google::type::LatLng* geo_point_value_;
    ::google::datastore::v1::Entity* entity_value_;
    ::google::datastore::v1::ArrayValue* array_value_;
  } value_type_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::protobuf_google_2fdatastore_2fv1_2fentity_2eproto::TableStruct;
  friend void ::protobuf_google_2fdatastore_2fv1_2fentity_2eproto::InitDefaultsArrayValueImpl();
};
// -------------------------------------------------------------------

class Entity_PropertiesEntry_DoNotUse : public ::google::protobuf::internal::MapEntry<Entity_PropertiesEntry_DoNotUse, 
    ::std::string, ::google::datastore::v1::Value,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
    0 > {
public:
  typedef ::google::protobuf::internal::MapEntry<Entity_PropertiesEntry_DoNotUse, 
    ::std::string, ::google::datastore::v1::Value,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
    0 > SuperType;
  Entity_PropertiesEntry_DoNotUse();
  Entity_PropertiesEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const Entity_PropertiesEntry_DoNotUse& other);
  static const Entity_PropertiesEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const Entity_PropertiesEntry_DoNotUse*>(&_Entity_PropertiesEntry_DoNotUse_default_instance_); }
  void MergeFrom(const ::google::protobuf::Message& other) PROTOBUF_FINAL;
  ::google::protobuf::Metadata GetMetadata() const;
};

// -------------------------------------------------------------------

class Entity : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.datastore.v1.Entity) */ {
 public:
  Entity();
  virtual ~Entity();

  Entity(const Entity& from);

  inline Entity& operator=(const Entity& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Entity(Entity&& from) noexcept
    : Entity() {
    *this = ::std::move(from);
  }

  inline Entity& operator=(Entity&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Entity& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Entity* internal_default_instance() {
    return reinterpret_cast<const Entity*>(
               &_Entity_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    6;

  void Swap(Entity* other);
  friend void swap(Entity& a, Entity& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Entity* New() const PROTOBUF_FINAL { return New(NULL); }

  Entity* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Entity& from);
  void MergeFrom(const Entity& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Entity* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // map<string, .google.datastore.v1.Value> properties = 3;
  int properties_size() const;
  void clear_properties();
  static const int kPropertiesFieldNumber = 3;
  const ::google::protobuf::Map< ::std::string, ::google::datastore::v1::Value >&
      properties() const;
  ::google::protobuf::Map< ::std::string, ::google::datastore::v1::Value >*
      mutable_properties();

  // .google.datastore.v1.Key key = 1;
  bool has_key() const;
  void clear_key();
  static const int kKeyFieldNumber = 1;
  const ::google::datastore::v1::Key& key() const;
  ::google::datastore::v1::Key* release_key();
  ::google::datastore::v1::Key* mutable_key();
  void set_allocated_key(::google::datastore::v1::Key* key);

  // @@protoc_insertion_point(class_scope:google.datastore.v1.Entity)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::MapField<
      Entity_PropertiesEntry_DoNotUse,
      ::std::string, ::google::datastore::v1::Value,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 > properties_;
  ::google::datastore::v1::Key* key_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fdatastore_2fv1_2fentity_2eproto::TableStruct;
  friend void ::protobuf_google_2fdatastore_2fv1_2fentity_2eproto::InitDefaultsArrayValueImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// PartitionId

// string project_id = 2;
inline void PartitionId::clear_project_id() {
  project_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PartitionId::project_id() const {
  // @@protoc_insertion_point(field_get:google.datastore.v1.PartitionId.project_id)
  return project_id_.GetNoArena();
}
inline void PartitionId::set_project_id(const ::std::string& value) {
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.datastore.v1.PartitionId.project_id)
}
#if LANG_CXX11
inline void PartitionId::set_project_id(::std::string&& value) {
  
  project_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.datastore.v1.PartitionId.project_id)
}
#endif
inline void PartitionId::set_project_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.datastore.v1.PartitionId.project_id)
}
inline void PartitionId::set_project_id(const char* value, size_t size) {
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.datastore.v1.PartitionId.project_id)
}
inline ::std::string* PartitionId::mutable_project_id() {
  
  // @@protoc_insertion_point(field_mutable:google.datastore.v1.PartitionId.project_id)
  return project_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PartitionId::release_project_id() {
  // @@protoc_insertion_point(field_release:google.datastore.v1.PartitionId.project_id)
  
  return project_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PartitionId::set_allocated_project_id(::std::string* project_id) {
  if (project_id != NULL) {
    
  } else {
    
  }
  project_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), project_id);
  // @@protoc_insertion_point(field_set_allocated:google.datastore.v1.PartitionId.project_id)
}

// string namespace_id = 4;
inline void PartitionId::clear_namespace_id() {
  namespace_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PartitionId::namespace_id() const {
  // @@protoc_insertion_point(field_get:google.datastore.v1.PartitionId.namespace_id)
  return namespace_id_.GetNoArena();
}
inline void PartitionId::set_namespace_id(const ::std::string& value) {
  
  namespace_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.datastore.v1.PartitionId.namespace_id)
}
#if LANG_CXX11
inline void PartitionId::set_namespace_id(::std::string&& value) {
  
  namespace_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.datastore.v1.PartitionId.namespace_id)
}
#endif
inline void PartitionId::set_namespace_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  namespace_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.datastore.v1.PartitionId.namespace_id)
}
inline void PartitionId::set_namespace_id(const char* value, size_t size) {
  
  namespace_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.datastore.v1.PartitionId.namespace_id)
}
inline ::std::string* PartitionId::mutable_namespace_id() {
  
  // @@protoc_insertion_point(field_mutable:google.datastore.v1.PartitionId.namespace_id)
  return namespace_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PartitionId::release_namespace_id() {
  // @@protoc_insertion_point(field_release:google.datastore.v1.PartitionId.namespace_id)
  
  return namespace_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PartitionId::set_allocated_namespace_id(::std::string* namespace_id) {
  if (namespace_id != NULL) {
    
  } else {
    
  }
  namespace_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), namespace_id);
  // @@protoc_insertion_point(field_set_allocated:google.datastore.v1.PartitionId.namespace_id)
}

// -------------------------------------------------------------------

// Key_PathElement

// string kind = 1;
inline void Key_PathElement::clear_kind() {
  kind_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Key_PathElement::kind() const {
  // @@protoc_insertion_point(field_get:google.datastore.v1.Key.PathElement.kind)
  return kind_.GetNoArena();
}
inline void Key_PathElement::set_kind(const ::std::string& value) {
  
  kind_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.datastore.v1.Key.PathElement.kind)
}
#if LANG_CXX11
inline void Key_PathElement::set_kind(::std::string&& value) {
  
  kind_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.datastore.v1.Key.PathElement.kind)
}
#endif
inline void Key_PathElement::set_kind(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  kind_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.datastore.v1.Key.PathElement.kind)
}
inline void Key_PathElement::set_kind(const char* value, size_t size) {
  
  kind_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.datastore.v1.Key.PathElement.kind)
}
inline ::std::string* Key_PathElement::mutable_kind() {
  
  // @@protoc_insertion_point(field_mutable:google.datastore.v1.Key.PathElement.kind)
  return kind_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Key_PathElement::release_kind() {
  // @@protoc_insertion_point(field_release:google.datastore.v1.Key.PathElement.kind)
  
  return kind_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Key_PathElement::set_allocated_kind(::std::string* kind) {
  if (kind != NULL) {
    
  } else {
    
  }
  kind_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), kind);
  // @@protoc_insertion_point(field_set_allocated:google.datastore.v1.Key.PathElement.kind)
}

// int64 id = 2;
inline bool Key_PathElement::has_id() const {
  return id_type_case() == kId;
}
inline void Key_PathElement::set_has_id() {
  _oneof_case_[0] = kId;
}
inline void Key_PathElement::clear_id() {
  if (has_id()) {
    id_type_.id_ = GOOGLE_LONGLONG(0);
    clear_has_id_type();
  }
}
inline ::google::protobuf::int64 Key_PathElement::id() const {
  // @@protoc_insertion_point(field_get:google.datastore.v1.Key.PathElement.id)
  if (has_id()) {
    return id_type_.id_;
  }
  return GOOGLE_LONGLONG(0);
}
inline void Key_PathElement::set_id(::google::protobuf::int64 value) {
  if (!has_id()) {
    clear_id_type();
    set_has_id();
  }
  id_type_.id_ = value;
  // @@protoc_insertion_point(field_set:google.datastore.v1.Key.PathElement.id)
}

// string name = 3;
inline bool Key_PathElement::has_name() const {
  return id_type_case() == kName;
}
inline void Key_PathElement::set_has_name() {
  _oneof_case_[0] = kName;
}
inline void Key_PathElement::clear_name() {
  if (has_name()) {
    id_type_.name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_id_type();
  }
}
inline const ::std::string& Key_PathElement::name() const {
  // @@protoc_insertion_point(field_get:google.datastore.v1.Key.PathElement.name)
  if (has_name()) {
    return id_type_.name_.GetNoArena();
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
inline void Key_PathElement::set_name(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:google.datastore.v1.Key.PathElement.name)
  if (!has_name()) {
    clear_id_type();
    set_has_name();
    id_type_.name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  id_type_.name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.datastore.v1.Key.PathElement.name)
}
#if LANG_CXX11
inline void Key_PathElement::set_name(::std::string&& value) {
  // @@protoc_insertion_point(field_set:google.datastore.v1.Key.PathElement.name)
  if (!has_name()) {
    clear_id_type();
    set_has_name();
    id_type_.name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  id_type_.name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.datastore.v1.Key.PathElement.name)
}
#endif
inline void Key_PathElement::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  if (!has_name()) {
    clear_id_type();
    set_has_name();
    id_type_.name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  id_type_.name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.datastore.v1.Key.PathElement.name)
}
inline void Key_PathElement::set_name(const char* value, size_t size) {
  if (!has_name()) {
    clear_id_type();
    set_has_name();
    id_type_.name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  id_type_.name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.datastore.v1.Key.PathElement.name)
}
inline ::std::string* Key_PathElement::mutable_name() {
  if (!has_name()) {
    clear_id_type();
    set_has_name();
    id_type_.name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:google.datastore.v1.Key.PathElement.name)
  return id_type_.name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Key_PathElement::release_name() {
  // @@protoc_insertion_point(field_release:google.datastore.v1.Key.PathElement.name)
  if (has_name()) {
    clear_has_id_type();
    return id_type_.name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
inline void Key_PathElement::set_allocated_name(::std::string* name) {
  if (!has_name()) {
    id_type_.name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_id_type();
  if (name != NULL) {
    set_has_name();
    id_type_.name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        name);
  }
  // @@protoc_insertion_point(field_set_allocated:google.datastore.v1.Key.PathElement.name)
}

inline bool Key_PathElement::has_id_type() const {
  return id_type_case() != ID_TYPE_NOT_SET;
}
inline void Key_PathElement::clear_has_id_type() {
  _oneof_case_[0] = ID_TYPE_NOT_SET;
}
inline Key_PathElement::IdTypeCase Key_PathElement::id_type_case() const {
  return Key_PathElement::IdTypeCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// Key

// .google.datastore.v1.PartitionId partition_id = 1;
inline bool Key::has_partition_id() const {
  return this != internal_default_instance() && partition_id_ != NULL;
}
inline void Key::clear_partition_id() {
  if (GetArenaNoVirtual() == NULL && partition_id_ != NULL) {
    delete partition_id_;
  }
  partition_id_ = NULL;
}
inline const ::google::datastore::v1::PartitionId& Key::partition_id() const {
  const ::google::datastore::v1::PartitionId* p = partition_id_;
  // @@protoc_insertion_point(field_get:google.datastore.v1.Key.partition_id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::datastore::v1::PartitionId*>(
      &::google::datastore::v1::_PartitionId_default_instance_);
}
inline ::google::datastore::v1::PartitionId* Key::release_partition_id() {
  // @@protoc_insertion_point(field_release:google.datastore.v1.Key.partition_id)
  
  ::google::datastore::v1::PartitionId* temp = partition_id_;
  partition_id_ = NULL;
  return temp;
}
inline ::google::datastore::v1::PartitionId* Key::mutable_partition_id() {
  
  if (partition_id_ == NULL) {
    partition_id_ = new ::google::datastore::v1::PartitionId;
  }
  // @@protoc_insertion_point(field_mutable:google.datastore.v1.Key.partition_id)
  return partition_id_;
}
inline void Key::set_allocated_partition_id(::google::datastore::v1::PartitionId* partition_id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete partition_id_;
  }
  if (partition_id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      partition_id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, partition_id, submessage_arena);
    }
    
  } else {
    
  }
  partition_id_ = partition_id;
  // @@protoc_insertion_point(field_set_allocated:google.datastore.v1.Key.partition_id)
}

// repeated .google.datastore.v1.Key.PathElement path = 2;
inline int Key::path_size() const {
  return path_.size();
}
inline void Key::clear_path() {
  path_.Clear();
}
inline const ::google::datastore::v1::Key_PathElement& Key::path(int index) const {
  // @@protoc_insertion_point(field_get:google.datastore.v1.Key.path)
  return path_.Get(index);
}
inline ::google::datastore::v1::Key_PathElement* Key::mutable_path(int index) {
  // @@protoc_insertion_point(field_mutable:google.datastore.v1.Key.path)
  return path_.Mutable(index);
}
inline ::google::datastore::v1::Key_PathElement* Key::add_path() {
  // @@protoc_insertion_point(field_add:google.datastore.v1.Key.path)
  return path_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::google::datastore::v1::Key_PathElement >*
Key::mutable_path() {
  // @@protoc_insertion_point(field_mutable_list:google.datastore.v1.Key.path)
  return &path_;
}
inline const ::google::protobuf::RepeatedPtrField< ::google::datastore::v1::Key_PathElement >&
Key::path() const {
  // @@protoc_insertion_point(field_list:google.datastore.v1.Key.path)
  return path_;
}

// -------------------------------------------------------------------

// ArrayValue

// repeated .google.datastore.v1.Value values = 1;
inline int ArrayValue::values_size() const {
  return values_.size();
}
inline void ArrayValue::clear_values() {
  values_.Clear();
}
inline const ::google::datastore::v1::Value& ArrayValue::values(int index) const {
  // @@protoc_insertion_point(field_get:google.datastore.v1.ArrayValue.values)
  return values_.Get(index);
}
inline ::google::datastore::v1::Value* ArrayValue::mutable_values(int index) {
  // @@protoc_insertion_point(field_mutable:google.datastore.v1.ArrayValue.values)
  return values_.Mutable(index);
}
inline ::google::datastore::v1::Value* ArrayValue::add_values() {
  // @@protoc_insertion_point(field_add:google.datastore.v1.ArrayValue.values)
  return values_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::google::datastore::v1::Value >*
ArrayValue::mutable_values() {
  // @@protoc_insertion_point(field_mutable_list:google.datastore.v1.ArrayValue.values)
  return &values_;
}
inline const ::google::protobuf::RepeatedPtrField< ::google::datastore::v1::Value >&
ArrayValue::values() const {
  // @@protoc_insertion_point(field_list:google.datastore.v1.ArrayValue.values)
  return values_;
}

// -------------------------------------------------------------------

// Value

// .google.protobuf.NullValue null_value = 11;
inline bool Value::has_null_value() const {
  return value_type_case() == kNullValue;
}
inline void Value::set_has_null_value() {
  _oneof_case_[0] = kNullValue;
}
inline void Value::clear_null_value() {
  if (has_null_value()) {
    value_type_.null_value_ = 0;
    clear_has_value_type();
  }
}
inline ::google::protobuf::NullValue Value::null_value() const {
  // @@protoc_insertion_point(field_get:google.datastore.v1.Value.null_value)
  if (has_null_value()) {
    return static_cast< ::google::protobuf::NullValue >(value_type_.null_value_);
  }
  return static_cast< ::google::protobuf::NullValue >(0);
}
inline void Value::set_null_value(::google::protobuf::NullValue value) {
  if (!has_null_value()) {
    clear_value_type();
    set_has_null_value();
  }
  value_type_.null_value_ = value;
  // @@protoc_insertion_point(field_set:google.datastore.v1.Value.null_value)
}

// bool boolean_value = 1;
inline bool Value::has_boolean_value() const {
  return value_type_case() == kBooleanValue;
}
inline void Value::set_has_boolean_value() {
  _oneof_case_[0] = kBooleanValue;
}
inline void Value::clear_boolean_value() {
  if (has_boolean_value()) {
    value_type_.boolean_value_ = false;
    clear_has_value_type();
  }
}
inline bool Value::boolean_value() const {
  // @@protoc_insertion_point(field_get:google.datastore.v1.Value.boolean_value)
  if (has_boolean_value()) {
    return value_type_.boolean_value_;
  }
  return false;
}
inline void Value::set_boolean_value(bool value) {
  if (!has_boolean_value()) {
    clear_value_type();
    set_has_boolean_value();
  }
  value_type_.boolean_value_ = value;
  // @@protoc_insertion_point(field_set:google.datastore.v1.Value.boolean_value)
}

// int64 integer_value = 2;
inline bool Value::has_integer_value() const {
  return value_type_case() == kIntegerValue;
}
inline void Value::set_has_integer_value() {
  _oneof_case_[0] = kIntegerValue;
}
inline void Value::clear_integer_value() {
  if (has_integer_value()) {
    value_type_.integer_value_ = GOOGLE_LONGLONG(0);
    clear_has_value_type();
  }
}
inline ::google::protobuf::int64 Value::integer_value() const {
  // @@protoc_insertion_point(field_get:google.datastore.v1.Value.integer_value)
  if (has_integer_value()) {
    return value_type_.integer_value_;
  }
  return GOOGLE_LONGLONG(0);
}
inline void Value::set_integer_value(::google::protobuf::int64 value) {
  if (!has_integer_value()) {
    clear_value_type();
    set_has_integer_value();
  }
  value_type_.integer_value_ = value;
  // @@protoc_insertion_point(field_set:google.datastore.v1.Value.integer_value)
}

// double double_value = 3;
inline bool Value::has_double_value() const {
  return value_type_case() == kDoubleValue;
}
inline void Value::set_has_double_value() {
  _oneof_case_[0] = kDoubleValue;
}
inline void Value::clear_double_value() {
  if (has_double_value()) {
    value_type_.double_value_ = 0;
    clear_has_value_type();
  }
}
inline double Value::double_value() const {
  // @@protoc_insertion_point(field_get:google.datastore.v1.Value.double_value)
  if (has_double_value()) {
    return value_type_.double_value_;
  }
  return 0;
}
inline void Value::set_double_value(double value) {
  if (!has_double_value()) {
    clear_value_type();
    set_has_double_value();
  }
  value_type_.double_value_ = value;
  // @@protoc_insertion_point(field_set:google.datastore.v1.Value.double_value)
}

// .google.protobuf.Timestamp timestamp_value = 10;
inline bool Value::has_timestamp_value() const {
  return value_type_case() == kTimestampValue;
}
inline void Value::set_has_timestamp_value() {
  _oneof_case_[0] = kTimestampValue;
}
inline ::google::protobuf::Timestamp* Value::release_timestamp_value() {
  // @@protoc_insertion_point(field_release:google.datastore.v1.Value.timestamp_value)
  if (has_timestamp_value()) {
    clear_has_value_type();
      ::google::protobuf::Timestamp* temp = value_type_.timestamp_value_;
    value_type_.timestamp_value_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::protobuf::Timestamp& Value::timestamp_value() const {
  // @@protoc_insertion_point(field_get:google.datastore.v1.Value.timestamp_value)
  return has_timestamp_value()
      ? *value_type_.timestamp_value_
      : *reinterpret_cast< ::google::protobuf::Timestamp*>(&::google::protobuf::_Timestamp_default_instance_);
}
inline ::google::protobuf::Timestamp* Value::mutable_timestamp_value() {
  if (!has_timestamp_value()) {
    clear_value_type();
    set_has_timestamp_value();
    value_type_.timestamp_value_ = new ::google::protobuf::Timestamp;
  }
  // @@protoc_insertion_point(field_mutable:google.datastore.v1.Value.timestamp_value)
  return value_type_.timestamp_value_;
}

// .google.datastore.v1.Key key_value = 5;
inline bool Value::has_key_value() const {
  return value_type_case() == kKeyValue;
}
inline void Value::set_has_key_value() {
  _oneof_case_[0] = kKeyValue;
}
inline void Value::clear_key_value() {
  if (has_key_value()) {
    delete value_type_.key_value_;
    clear_has_value_type();
  }
}
inline ::google::datastore::v1::Key* Value::release_key_value() {
  // @@protoc_insertion_point(field_release:google.datastore.v1.Value.key_value)
  if (has_key_value()) {
    clear_has_value_type();
      ::google::datastore::v1::Key* temp = value_type_.key_value_;
    value_type_.key_value_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::datastore::v1::Key& Value::key_value() const {
  // @@protoc_insertion_point(field_get:google.datastore.v1.Value.key_value)
  return has_key_value()
      ? *value_type_.key_value_
      : *reinterpret_cast< ::google::datastore::v1::Key*>(&::google::datastore::v1::_Key_default_instance_);
}
inline ::google::datastore::v1::Key* Value::mutable_key_value() {
  if (!has_key_value()) {
    clear_value_type();
    set_has_key_value();
    value_type_.key_value_ = new ::google::datastore::v1::Key;
  }
  // @@protoc_insertion_point(field_mutable:google.datastore.v1.Value.key_value)
  return value_type_.key_value_;
}

// string string_value = 17;
inline bool Value::has_string_value() const {
  return value_type_case() == kStringValue;
}
inline void Value::set_has_string_value() {
  _oneof_case_[0] = kStringValue;
}
inline void Value::clear_string_value() {
  if (has_string_value()) {
    value_type_.string_value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_value_type();
  }
}
inline const ::std::string& Value::string_value() const {
  // @@protoc_insertion_point(field_get:google.datastore.v1.Value.string_value)
  if (has_string_value()) {
    return value_type_.string_value_.GetNoArena();
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
inline void Value::set_string_value(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:google.datastore.v1.Value.string_value)
  if (!has_string_value()) {
    clear_value_type();
    set_has_string_value();
    value_type_.string_value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  value_type_.string_value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.datastore.v1.Value.string_value)
}
#if LANG_CXX11
inline void Value::set_string_value(::std::string&& value) {
  // @@protoc_insertion_point(field_set:google.datastore.v1.Value.string_value)
  if (!has_string_value()) {
    clear_value_type();
    set_has_string_value();
    value_type_.string_value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  value_type_.string_value_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.datastore.v1.Value.string_value)
}
#endif
inline void Value::set_string_value(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  if (!has_string_value()) {
    clear_value_type();
    set_has_string_value();
    value_type_.string_value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  value_type_.string_value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.datastore.v1.Value.string_value)
}
inline void Value::set_string_value(const char* value, size_t size) {
  if (!has_string_value()) {
    clear_value_type();
    set_has_string_value();
    value_type_.string_value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  value_type_.string_value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.datastore.v1.Value.string_value)
}
inline ::std::string* Value::mutable_string_value() {
  if (!has_string_value()) {
    clear_value_type();
    set_has_string_value();
    value_type_.string_value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:google.datastore.v1.Value.string_value)
  return value_type_.string_value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Value::release_string_value() {
  // @@protoc_insertion_point(field_release:google.datastore.v1.Value.string_value)
  if (has_string_value()) {
    clear_has_value_type();
    return value_type_.string_value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
inline void Value::set_allocated_string_value(::std::string* string_value) {
  if (!has_string_value()) {
    value_type_.string_value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_value_type();
  if (string_value != NULL) {
    set_has_string_value();
    value_type_.string_value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        string_value);
  }
  // @@protoc_insertion_point(field_set_allocated:google.datastore.v1.Value.string_value)
}

// bytes blob_value = 18;
inline bool Value::has_blob_value() const {
  return value_type_case() == kBlobValue;
}
inline void Value::set_has_blob_value() {
  _oneof_case_[0] = kBlobValue;
}
inline void Value::clear_blob_value() {
  if (has_blob_value()) {
    value_type_.blob_value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_value_type();
  }
}
inline const ::std::string& Value::blob_value() const {
  // @@protoc_insertion_point(field_get:google.datastore.v1.Value.blob_value)
  if (has_blob_value()) {
    return value_type_.blob_value_.GetNoArena();
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
inline void Value::set_blob_value(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:google.datastore.v1.Value.blob_value)
  if (!has_blob_value()) {
    clear_value_type();
    set_has_blob_value();
    value_type_.blob_value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  value_type_.blob_value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.datastore.v1.Value.blob_value)
}
#if LANG_CXX11
inline void Value::set_blob_value(::std::string&& value) {
  // @@protoc_insertion_point(field_set:google.datastore.v1.Value.blob_value)
  if (!has_blob_value()) {
    clear_value_type();
    set_has_blob_value();
    value_type_.blob_value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  value_type_.blob_value_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.datastore.v1.Value.blob_value)
}
#endif
inline void Value::set_blob_value(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  if (!has_blob_value()) {
    clear_value_type();
    set_has_blob_value();
    value_type_.blob_value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  value_type_.blob_value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.datastore.v1.Value.blob_value)
}
inline void Value::set_blob_value(const void* value, size_t size) {
  if (!has_blob_value()) {
    clear_value_type();
    set_has_blob_value();
    value_type_.blob_value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  value_type_.blob_value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.datastore.v1.Value.blob_value)
}
inline ::std::string* Value::mutable_blob_value() {
  if (!has_blob_value()) {
    clear_value_type();
    set_has_blob_value();
    value_type_.blob_value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:google.datastore.v1.Value.blob_value)
  return value_type_.blob_value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Value::release_blob_value() {
  // @@protoc_insertion_point(field_release:google.datastore.v1.Value.blob_value)
  if (has_blob_value()) {
    clear_has_value_type();
    return value_type_.blob_value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
inline void Value::set_allocated_blob_value(::std::string* blob_value) {
  if (!has_blob_value()) {
    value_type_.blob_value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_value_type();
  if (blob_value != NULL) {
    set_has_blob_value();
    value_type_.blob_value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        blob_value);
  }
  // @@protoc_insertion_point(field_set_allocated:google.datastore.v1.Value.blob_value)
}

// .google.type.LatLng geo_point_value = 8;
inline bool Value::has_geo_point_value() const {
  return value_type_case() == kGeoPointValue;
}
inline void Value::set_has_geo_point_value() {
  _oneof_case_[0] = kGeoPointValue;
}
inline ::google::type::LatLng* Value::release_geo_point_value() {
  // @@protoc_insertion_point(field_release:google.datastore.v1.Value.geo_point_value)
  if (has_geo_point_value()) {
    clear_has_value_type();
      ::google::type::LatLng* temp = value_type_.geo_point_value_;
    value_type_.geo_point_value_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::type::LatLng& Value::geo_point_value() const {
  // @@protoc_insertion_point(field_get:google.datastore.v1.Value.geo_point_value)
  return has_geo_point_value()
      ? *value_type_.geo_point_value_
      : *reinterpret_cast< ::google::type::LatLng*>(&::google::type::_LatLng_default_instance_);
}
inline ::google::type::LatLng* Value::mutable_geo_point_value() {
  if (!has_geo_point_value()) {
    clear_value_type();
    set_has_geo_point_value();
    value_type_.geo_point_value_ = new ::google::type::LatLng;
  }
  // @@protoc_insertion_point(field_mutable:google.datastore.v1.Value.geo_point_value)
  return value_type_.geo_point_value_;
}

// .google.datastore.v1.Entity entity_value = 6;
inline bool Value::has_entity_value() const {
  return value_type_case() == kEntityValue;
}
inline void Value::set_has_entity_value() {
  _oneof_case_[0] = kEntityValue;
}
inline void Value::clear_entity_value() {
  if (has_entity_value()) {
    delete value_type_.entity_value_;
    clear_has_value_type();
  }
}
inline ::google::datastore::v1::Entity* Value::release_entity_value() {
  // @@protoc_insertion_point(field_release:google.datastore.v1.Value.entity_value)
  if (has_entity_value()) {
    clear_has_value_type();
      ::google::datastore::v1::Entity* temp = value_type_.entity_value_;
    value_type_.entity_value_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::datastore::v1::Entity& Value::entity_value() const {
  // @@protoc_insertion_point(field_get:google.datastore.v1.Value.entity_value)
  return has_entity_value()
      ? *value_type_.entity_value_
      : *reinterpret_cast< ::google::datastore::v1::Entity*>(&::google::datastore::v1::_Entity_default_instance_);
}
inline ::google::datastore::v1::Entity* Value::mutable_entity_value() {
  if (!has_entity_value()) {
    clear_value_type();
    set_has_entity_value();
    value_type_.entity_value_ = new ::google::datastore::v1::Entity;
  }
  // @@protoc_insertion_point(field_mutable:google.datastore.v1.Value.entity_value)
  return value_type_.entity_value_;
}

// .google.datastore.v1.ArrayValue array_value = 9;
inline bool Value::has_array_value() const {
  return value_type_case() == kArrayValue;
}
inline void Value::set_has_array_value() {
  _oneof_case_[0] = kArrayValue;
}
inline void Value::clear_array_value() {
  if (has_array_value()) {
    delete value_type_.array_value_;
    clear_has_value_type();
  }
}
inline ::google::datastore::v1::ArrayValue* Value::release_array_value() {
  // @@protoc_insertion_point(field_release:google.datastore.v1.Value.array_value)
  if (has_array_value()) {
    clear_has_value_type();
      ::google::datastore::v1::ArrayValue* temp = value_type_.array_value_;
    value_type_.array_value_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::datastore::v1::ArrayValue& Value::array_value() const {
  // @@protoc_insertion_point(field_get:google.datastore.v1.Value.array_value)
  return has_array_value()
      ? *value_type_.array_value_
      : *reinterpret_cast< ::google::datastore::v1::ArrayValue*>(&::google::datastore::v1::_ArrayValue_default_instance_);
}
inline ::google::datastore::v1::ArrayValue* Value::mutable_array_value() {
  if (!has_array_value()) {
    clear_value_type();
    set_has_array_value();
    value_type_.array_value_ = new ::google::datastore::v1::ArrayValue;
  }
  // @@protoc_insertion_point(field_mutable:google.datastore.v1.Value.array_value)
  return value_type_.array_value_;
}

// int32 meaning = 14;
inline void Value::clear_meaning() {
  meaning_ = 0;
}
inline ::google::protobuf::int32 Value::meaning() const {
  // @@protoc_insertion_point(field_get:google.datastore.v1.Value.meaning)
  return meaning_;
}
inline void Value::set_meaning(::google::protobuf::int32 value) {
  
  meaning_ = value;
  // @@protoc_insertion_point(field_set:google.datastore.v1.Value.meaning)
}

// bool exclude_from_indexes = 19;
inline void Value::clear_exclude_from_indexes() {
  exclude_from_indexes_ = false;
}
inline bool Value::exclude_from_indexes() const {
  // @@protoc_insertion_point(field_get:google.datastore.v1.Value.exclude_from_indexes)
  return exclude_from_indexes_;
}
inline void Value::set_exclude_from_indexes(bool value) {
  
  exclude_from_indexes_ = value;
  // @@protoc_insertion_point(field_set:google.datastore.v1.Value.exclude_from_indexes)
}

inline bool Value::has_value_type() const {
  return value_type_case() != VALUE_TYPE_NOT_SET;
}
inline void Value::clear_has_value_type() {
  _oneof_case_[0] = VALUE_TYPE_NOT_SET;
}
inline Value::ValueTypeCase Value::value_type_case() const {
  return Value::ValueTypeCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// Entity

// .google.datastore.v1.Key key = 1;
inline bool Entity::has_key() const {
  return this != internal_default_instance() && key_ != NULL;
}
inline void Entity::clear_key() {
  if (GetArenaNoVirtual() == NULL && key_ != NULL) {
    delete key_;
  }
  key_ = NULL;
}
inline const ::google::datastore::v1::Key& Entity::key() const {
  const ::google::datastore::v1::Key* p = key_;
  // @@protoc_insertion_point(field_get:google.datastore.v1.Entity.key)
  return p != NULL ? *p : *reinterpret_cast<const ::google::datastore::v1::Key*>(
      &::google::datastore::v1::_Key_default_instance_);
}
inline ::google::datastore::v1::Key* Entity::release_key() {
  // @@protoc_insertion_point(field_release:google.datastore.v1.Entity.key)
  
  ::google::datastore::v1::Key* temp = key_;
  key_ = NULL;
  return temp;
}
inline ::google::datastore::v1::Key* Entity::mutable_key() {
  
  if (key_ == NULL) {
    key_ = new ::google::datastore::v1::Key;
  }
  // @@protoc_insertion_point(field_mutable:google.datastore.v1.Entity.key)
  return key_;
}
inline void Entity::set_allocated_key(::google::datastore::v1::Key* key) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete key_;
  }
  if (key) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      key = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, key, submessage_arena);
    }
    
  } else {
    
  }
  key_ = key;
  // @@protoc_insertion_point(field_set_allocated:google.datastore.v1.Entity.key)
}

// map<string, .google.datastore.v1.Value> properties = 3;
inline int Entity::properties_size() const {
  return properties_.size();
}
inline void Entity::clear_properties() {
  properties_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::google::datastore::v1::Value >&
Entity::properties() const {
  // @@protoc_insertion_point(field_map:google.datastore.v1.Entity.properties)
  return properties_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::google::datastore::v1::Value >*
Entity::mutable_properties() {
  // @@protoc_insertion_point(field_mutable_map:google.datastore.v1.Entity.properties)
  return properties_.MutableMap();
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace datastore
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_google_2fdatastore_2fv1_2fentity_2eproto__INCLUDED
