// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/cloud/vision/v1/text_annotation.proto

#ifndef PROTOBUF_google_2fcloud_2fvision_2fv1_2ftext_5fannotation_2eproto__INCLUDED
#define PROTOBUF_google_2fcloud_2fvision_2fv1_2ftext_5fannotation_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "google/api/annotations.pb.h"
#include "google/cloud/vision/v1/geometry.pb.h"
// @@protoc_insertion_point(includes)

namespace protobuf_google_2fcloud_2fvision_2fv1_2ftext_5fannotation_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[9];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsTextAnnotation_DetectedLanguageImpl();
void InitDefaultsTextAnnotation_DetectedLanguage();
void InitDefaultsTextAnnotation_DetectedBreakImpl();
void InitDefaultsTextAnnotation_DetectedBreak();
void InitDefaultsTextAnnotation_TextPropertyImpl();
void InitDefaultsTextAnnotation_TextProperty();
void InitDefaultsTextAnnotationImpl();
void InitDefaultsTextAnnotation();
void InitDefaultsPageImpl();
void InitDefaultsPage();
void InitDefaultsBlockImpl();
void InitDefaultsBlock();
void InitDefaultsParagraphImpl();
void InitDefaultsParagraph();
void InitDefaultsWordImpl();
void InitDefaultsWord();
void InitDefaultsSymbolImpl();
void InitDefaultsSymbol();
inline void InitDefaults() {
  InitDefaultsTextAnnotation_DetectedLanguage();
  InitDefaultsTextAnnotation_DetectedBreak();
  InitDefaultsTextAnnotation_TextProperty();
  InitDefaultsTextAnnotation();
  InitDefaultsPage();
  InitDefaultsBlock();
  InitDefaultsParagraph();
  InitDefaultsWord();
  InitDefaultsSymbol();
}
}  // namespace protobuf_google_2fcloud_2fvision_2fv1_2ftext_5fannotation_2eproto
namespace google {
namespace cloud {
namespace vision {
namespace v1 {
class Block;
class BlockDefaultTypeInternal;
extern BlockDefaultTypeInternal _Block_default_instance_;
class Page;
class PageDefaultTypeInternal;
extern PageDefaultTypeInternal _Page_default_instance_;
class Paragraph;
class ParagraphDefaultTypeInternal;
extern ParagraphDefaultTypeInternal _Paragraph_default_instance_;
class Symbol;
class SymbolDefaultTypeInternal;
extern SymbolDefaultTypeInternal _Symbol_default_instance_;
class TextAnnotation;
class TextAnnotationDefaultTypeInternal;
extern TextAnnotationDefaultTypeInternal _TextAnnotation_default_instance_;
class TextAnnotation_DetectedBreak;
class TextAnnotation_DetectedBreakDefaultTypeInternal;
extern TextAnnotation_DetectedBreakDefaultTypeInternal _TextAnnotation_DetectedBreak_default_instance_;
class TextAnnotation_DetectedLanguage;
class TextAnnotation_DetectedLanguageDefaultTypeInternal;
extern TextAnnotation_DetectedLanguageDefaultTypeInternal _TextAnnotation_DetectedLanguage_default_instance_;
class TextAnnotation_TextProperty;
class TextAnnotation_TextPropertyDefaultTypeInternal;
extern TextAnnotation_TextPropertyDefaultTypeInternal _TextAnnotation_TextProperty_default_instance_;
class Word;
class WordDefaultTypeInternal;
extern WordDefaultTypeInternal _Word_default_instance_;
}  // namespace v1
}  // namespace vision
}  // namespace cloud
}  // namespace google
namespace google {
namespace cloud {
namespace vision {
namespace v1 {

enum TextAnnotation_DetectedBreak_BreakType {
  TextAnnotation_DetectedBreak_BreakType_UNKNOWN = 0,
  TextAnnotation_DetectedBreak_BreakType_SPACE = 1,
  TextAnnotation_DetectedBreak_BreakType_SURE_SPACE = 2,
  TextAnnotation_DetectedBreak_BreakType_EOL_SURE_SPACE = 3,
  TextAnnotation_DetectedBreak_BreakType_HYPHEN = 4,
  TextAnnotation_DetectedBreak_BreakType_LINE_BREAK = 5,
  TextAnnotation_DetectedBreak_BreakType_TextAnnotation_DetectedBreak_BreakType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  TextAnnotation_DetectedBreak_BreakType_TextAnnotation_DetectedBreak_BreakType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool TextAnnotation_DetectedBreak_BreakType_IsValid(int value);
const TextAnnotation_DetectedBreak_BreakType TextAnnotation_DetectedBreak_BreakType_BreakType_MIN = TextAnnotation_DetectedBreak_BreakType_UNKNOWN;
const TextAnnotation_DetectedBreak_BreakType TextAnnotation_DetectedBreak_BreakType_BreakType_MAX = TextAnnotation_DetectedBreak_BreakType_LINE_BREAK;
const int TextAnnotation_DetectedBreak_BreakType_BreakType_ARRAYSIZE = TextAnnotation_DetectedBreak_BreakType_BreakType_MAX + 1;

const ::google::protobuf::EnumDescriptor* TextAnnotation_DetectedBreak_BreakType_descriptor();
inline const ::std::string& TextAnnotation_DetectedBreak_BreakType_Name(TextAnnotation_DetectedBreak_BreakType value) {
  return ::google::protobuf::internal::NameOfEnum(
    TextAnnotation_DetectedBreak_BreakType_descriptor(), value);
}
inline bool TextAnnotation_DetectedBreak_BreakType_Parse(
    const ::std::string& name, TextAnnotation_DetectedBreak_BreakType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<TextAnnotation_DetectedBreak_BreakType>(
    TextAnnotation_DetectedBreak_BreakType_descriptor(), name, value);
}
enum Block_BlockType {
  Block_BlockType_UNKNOWN = 0,
  Block_BlockType_TEXT = 1,
  Block_BlockType_TABLE = 2,
  Block_BlockType_PICTURE = 3,
  Block_BlockType_RULER = 4,
  Block_BlockType_BARCODE = 5,
  Block_BlockType_Block_BlockType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  Block_BlockType_Block_BlockType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool Block_BlockType_IsValid(int value);
const Block_BlockType Block_BlockType_BlockType_MIN = Block_BlockType_UNKNOWN;
const Block_BlockType Block_BlockType_BlockType_MAX = Block_BlockType_BARCODE;
const int Block_BlockType_BlockType_ARRAYSIZE = Block_BlockType_BlockType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Block_BlockType_descriptor();
inline const ::std::string& Block_BlockType_Name(Block_BlockType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Block_BlockType_descriptor(), value);
}
inline bool Block_BlockType_Parse(
    const ::std::string& name, Block_BlockType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Block_BlockType>(
    Block_BlockType_descriptor(), name, value);
}
// ===================================================================

class TextAnnotation_DetectedLanguage : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.cloud.vision.v1.TextAnnotation.DetectedLanguage) */ {
 public:
  TextAnnotation_DetectedLanguage();
  virtual ~TextAnnotation_DetectedLanguage();

  TextAnnotation_DetectedLanguage(const TextAnnotation_DetectedLanguage& from);

  inline TextAnnotation_DetectedLanguage& operator=(const TextAnnotation_DetectedLanguage& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TextAnnotation_DetectedLanguage(TextAnnotation_DetectedLanguage&& from) noexcept
    : TextAnnotation_DetectedLanguage() {
    *this = ::std::move(from);
  }

  inline TextAnnotation_DetectedLanguage& operator=(TextAnnotation_DetectedLanguage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const TextAnnotation_DetectedLanguage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TextAnnotation_DetectedLanguage* internal_default_instance() {
    return reinterpret_cast<const TextAnnotation_DetectedLanguage*>(
               &_TextAnnotation_DetectedLanguage_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void UnsafeArenaSwap(TextAnnotation_DetectedLanguage* other);
  void Swap(TextAnnotation_DetectedLanguage* other);
  friend void swap(TextAnnotation_DetectedLanguage& a, TextAnnotation_DetectedLanguage& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TextAnnotation_DetectedLanguage* New() const PROTOBUF_FINAL { return New(NULL); }

  TextAnnotation_DetectedLanguage* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const TextAnnotation_DetectedLanguage& from);
  void MergeFrom(const TextAnnotation_DetectedLanguage& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TextAnnotation_DetectedLanguage* other);
  protected:
  explicit TextAnnotation_DetectedLanguage(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string language_code = 1;
  void clear_language_code();
  static const int kLanguageCodeFieldNumber = 1;
  const ::std::string& language_code() const;
  void set_language_code(const ::std::string& value);
  #if LANG_CXX11
  void set_language_code(::std::string&& value);
  #endif
  void set_language_code(const char* value);
  void set_language_code(const char* value, size_t size);
  ::std::string* mutable_language_code();
  ::std::string* release_language_code();
  void set_allocated_language_code(::std::string* language_code);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_language_code();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_language_code(
      ::std::string* language_code);

  // float confidence = 2;
  void clear_confidence();
  static const int kConfidenceFieldNumber = 2;
  float confidence() const;
  void set_confidence(float value);

  // @@protoc_insertion_point(class_scope:google.cloud.vision.v1.TextAnnotation.DetectedLanguage)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::ArenaStringPtr language_code_;
  float confidence_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fcloud_2fvision_2fv1_2ftext_5fannotation_2eproto::TableStruct;
  friend void ::protobuf_google_2fcloud_2fvision_2fv1_2ftext_5fannotation_2eproto::InitDefaultsTextAnnotation_DetectedLanguageImpl();
};
// -------------------------------------------------------------------

class TextAnnotation_DetectedBreak : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.cloud.vision.v1.TextAnnotation.DetectedBreak) */ {
 public:
  TextAnnotation_DetectedBreak();
  virtual ~TextAnnotation_DetectedBreak();

  TextAnnotation_DetectedBreak(const TextAnnotation_DetectedBreak& from);

  inline TextAnnotation_DetectedBreak& operator=(const TextAnnotation_DetectedBreak& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TextAnnotation_DetectedBreak(TextAnnotation_DetectedBreak&& from) noexcept
    : TextAnnotation_DetectedBreak() {
    *this = ::std::move(from);
  }

  inline TextAnnotation_DetectedBreak& operator=(TextAnnotation_DetectedBreak&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const TextAnnotation_DetectedBreak& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TextAnnotation_DetectedBreak* internal_default_instance() {
    return reinterpret_cast<const TextAnnotation_DetectedBreak*>(
               &_TextAnnotation_DetectedBreak_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void UnsafeArenaSwap(TextAnnotation_DetectedBreak* other);
  void Swap(TextAnnotation_DetectedBreak* other);
  friend void swap(TextAnnotation_DetectedBreak& a, TextAnnotation_DetectedBreak& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TextAnnotation_DetectedBreak* New() const PROTOBUF_FINAL { return New(NULL); }

  TextAnnotation_DetectedBreak* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const TextAnnotation_DetectedBreak& from);
  void MergeFrom(const TextAnnotation_DetectedBreak& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TextAnnotation_DetectedBreak* other);
  protected:
  explicit TextAnnotation_DetectedBreak(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef TextAnnotation_DetectedBreak_BreakType BreakType;
  static const BreakType UNKNOWN =
    TextAnnotation_DetectedBreak_BreakType_UNKNOWN;
  static const BreakType SPACE =
    TextAnnotation_DetectedBreak_BreakType_SPACE;
  static const BreakType SURE_SPACE =
    TextAnnotation_DetectedBreak_BreakType_SURE_SPACE;
  static const BreakType EOL_SURE_SPACE =
    TextAnnotation_DetectedBreak_BreakType_EOL_SURE_SPACE;
  static const BreakType HYPHEN =
    TextAnnotation_DetectedBreak_BreakType_HYPHEN;
  static const BreakType LINE_BREAK =
    TextAnnotation_DetectedBreak_BreakType_LINE_BREAK;
  static inline bool BreakType_IsValid(int value) {
    return TextAnnotation_DetectedBreak_BreakType_IsValid(value);
  }
  static const BreakType BreakType_MIN =
    TextAnnotation_DetectedBreak_BreakType_BreakType_MIN;
  static const BreakType BreakType_MAX =
    TextAnnotation_DetectedBreak_BreakType_BreakType_MAX;
  static const int BreakType_ARRAYSIZE =
    TextAnnotation_DetectedBreak_BreakType_BreakType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  BreakType_descriptor() {
    return TextAnnotation_DetectedBreak_BreakType_descriptor();
  }
  static inline const ::std::string& BreakType_Name(BreakType value) {
    return TextAnnotation_DetectedBreak_BreakType_Name(value);
  }
  static inline bool BreakType_Parse(const ::std::string& name,
      BreakType* value) {
    return TextAnnotation_DetectedBreak_BreakType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // .google.cloud.vision.v1.TextAnnotation.DetectedBreak.BreakType type = 1;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::google::cloud::vision::v1::TextAnnotation_DetectedBreak_BreakType type() const;
  void set_type(::google::cloud::vision::v1::TextAnnotation_DetectedBreak_BreakType value);

  // bool is_prefix = 2;
  void clear_is_prefix();
  static const int kIsPrefixFieldNumber = 2;
  bool is_prefix() const;
  void set_is_prefix(bool value);

  // @@protoc_insertion_point(class_scope:google.cloud.vision.v1.TextAnnotation.DetectedBreak)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int type_;
  bool is_prefix_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fcloud_2fvision_2fv1_2ftext_5fannotation_2eproto::TableStruct;
  friend void ::protobuf_google_2fcloud_2fvision_2fv1_2ftext_5fannotation_2eproto::InitDefaultsTextAnnotation_DetectedBreakImpl();
};
// -------------------------------------------------------------------

class TextAnnotation_TextProperty : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.cloud.vision.v1.TextAnnotation.TextProperty) */ {
 public:
  TextAnnotation_TextProperty();
  virtual ~TextAnnotation_TextProperty();

  TextAnnotation_TextProperty(const TextAnnotation_TextProperty& from);

  inline TextAnnotation_TextProperty& operator=(const TextAnnotation_TextProperty& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TextAnnotation_TextProperty(TextAnnotation_TextProperty&& from) noexcept
    : TextAnnotation_TextProperty() {
    *this = ::std::move(from);
  }

  inline TextAnnotation_TextProperty& operator=(TextAnnotation_TextProperty&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const TextAnnotation_TextProperty& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TextAnnotation_TextProperty* internal_default_instance() {
    return reinterpret_cast<const TextAnnotation_TextProperty*>(
               &_TextAnnotation_TextProperty_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void UnsafeArenaSwap(TextAnnotation_TextProperty* other);
  void Swap(TextAnnotation_TextProperty* other);
  friend void swap(TextAnnotation_TextProperty& a, TextAnnotation_TextProperty& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TextAnnotation_TextProperty* New() const PROTOBUF_FINAL { return New(NULL); }

  TextAnnotation_TextProperty* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const TextAnnotation_TextProperty& from);
  void MergeFrom(const TextAnnotation_TextProperty& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TextAnnotation_TextProperty* other);
  protected:
  explicit TextAnnotation_TextProperty(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .google.cloud.vision.v1.TextAnnotation.DetectedLanguage detected_languages = 1;
  int detected_languages_size() const;
  void clear_detected_languages();
  static const int kDetectedLanguagesFieldNumber = 1;
  const ::google::cloud::vision::v1::TextAnnotation_DetectedLanguage& detected_languages(int index) const;
  ::google::cloud::vision::v1::TextAnnotation_DetectedLanguage* mutable_detected_languages(int index);
  ::google::cloud::vision::v1::TextAnnotation_DetectedLanguage* add_detected_languages();
  ::google::protobuf::RepeatedPtrField< ::google::cloud::vision::v1::TextAnnotation_DetectedLanguage >*
      mutable_detected_languages();
  const ::google::protobuf::RepeatedPtrField< ::google::cloud::vision::v1::TextAnnotation_DetectedLanguage >&
      detected_languages() const;

  // .google.cloud.vision.v1.TextAnnotation.DetectedBreak detected_break = 2;
  bool has_detected_break() const;
  void clear_detected_break();
  static const int kDetectedBreakFieldNumber = 2;
  private:
  void _slow_mutable_detected_break();
  public:
  const ::google::cloud::vision::v1::TextAnnotation_DetectedBreak& detected_break() const;
  ::google::cloud::vision::v1::TextAnnotation_DetectedBreak* release_detected_break();
  ::google::cloud::vision::v1::TextAnnotation_DetectedBreak* mutable_detected_break();
  void set_allocated_detected_break(::google::cloud::vision::v1::TextAnnotation_DetectedBreak* detected_break);
  void unsafe_arena_set_allocated_detected_break(
      ::google::cloud::vision::v1::TextAnnotation_DetectedBreak* detected_break);
  ::google::cloud::vision::v1::TextAnnotation_DetectedBreak* unsafe_arena_release_detected_break();

  // @@protoc_insertion_point(class_scope:google.cloud.vision.v1.TextAnnotation.TextProperty)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::RepeatedPtrField< ::google::cloud::vision::v1::TextAnnotation_DetectedLanguage > detected_languages_;
  ::google::cloud::vision::v1::TextAnnotation_DetectedBreak* detected_break_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fcloud_2fvision_2fv1_2ftext_5fannotation_2eproto::TableStruct;
  friend void ::protobuf_google_2fcloud_2fvision_2fv1_2ftext_5fannotation_2eproto::InitDefaultsTextAnnotation_TextPropertyImpl();
};
// -------------------------------------------------------------------

class TextAnnotation : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.cloud.vision.v1.TextAnnotation) */ {
 public:
  TextAnnotation();
  virtual ~TextAnnotation();

  TextAnnotation(const TextAnnotation& from);

  inline TextAnnotation& operator=(const TextAnnotation& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TextAnnotation(TextAnnotation&& from) noexcept
    : TextAnnotation() {
    *this = ::std::move(from);
  }

  inline TextAnnotation& operator=(TextAnnotation&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const TextAnnotation& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TextAnnotation* internal_default_instance() {
    return reinterpret_cast<const TextAnnotation*>(
               &_TextAnnotation_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void UnsafeArenaSwap(TextAnnotation* other);
  void Swap(TextAnnotation* other);
  friend void swap(TextAnnotation& a, TextAnnotation& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TextAnnotation* New() const PROTOBUF_FINAL { return New(NULL); }

  TextAnnotation* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const TextAnnotation& from);
  void MergeFrom(const TextAnnotation& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TextAnnotation* other);
  protected:
  explicit TextAnnotation(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef TextAnnotation_DetectedLanguage DetectedLanguage;
  typedef TextAnnotation_DetectedBreak DetectedBreak;
  typedef TextAnnotation_TextProperty TextProperty;

  // accessors -------------------------------------------------------

  // repeated .google.cloud.vision.v1.Page pages = 1;
  int pages_size() const;
  void clear_pages();
  static const int kPagesFieldNumber = 1;
  const ::google::cloud::vision::v1::Page& pages(int index) const;
  ::google::cloud::vision::v1::Page* mutable_pages(int index);
  ::google::cloud::vision::v1::Page* add_pages();
  ::google::protobuf::RepeatedPtrField< ::google::cloud::vision::v1::Page >*
      mutable_pages();
  const ::google::protobuf::RepeatedPtrField< ::google::cloud::vision::v1::Page >&
      pages() const;

  // string text = 2;
  void clear_text();
  static const int kTextFieldNumber = 2;
  const ::std::string& text() const;
  void set_text(const ::std::string& value);
  #if LANG_CXX11
  void set_text(::std::string&& value);
  #endif
  void set_text(const char* value);
  void set_text(const char* value, size_t size);
  ::std::string* mutable_text();
  ::std::string* release_text();
  void set_allocated_text(::std::string* text);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_text();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_text(
      ::std::string* text);

  // @@protoc_insertion_point(class_scope:google.cloud.vision.v1.TextAnnotation)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::RepeatedPtrField< ::google::cloud::vision::v1::Page > pages_;
  ::google::protobuf::internal::ArenaStringPtr text_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fcloud_2fvision_2fv1_2ftext_5fannotation_2eproto::TableStruct;
  friend void ::protobuf_google_2fcloud_2fvision_2fv1_2ftext_5fannotation_2eproto::InitDefaultsTextAnnotationImpl();
};
// -------------------------------------------------------------------

class Page : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.cloud.vision.v1.Page) */ {
 public:
  Page();
  virtual ~Page();

  Page(const Page& from);

  inline Page& operator=(const Page& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Page(Page&& from) noexcept
    : Page() {
    *this = ::std::move(from);
  }

  inline Page& operator=(Page&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const Page& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Page* internal_default_instance() {
    return reinterpret_cast<const Page*>(
               &_Page_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void UnsafeArenaSwap(Page* other);
  void Swap(Page* other);
  friend void swap(Page& a, Page& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Page* New() const PROTOBUF_FINAL { return New(NULL); }

  Page* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Page& from);
  void MergeFrom(const Page& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Page* other);
  protected:
  explicit Page(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .google.cloud.vision.v1.Block blocks = 4;
  int blocks_size() const;
  void clear_blocks();
  static const int kBlocksFieldNumber = 4;
  const ::google::cloud::vision::v1::Block& blocks(int index) const;
  ::google::cloud::vision::v1::Block* mutable_blocks(int index);
  ::google::cloud::vision::v1::Block* add_blocks();
  ::google::protobuf::RepeatedPtrField< ::google::cloud::vision::v1::Block >*
      mutable_blocks();
  const ::google::protobuf::RepeatedPtrField< ::google::cloud::vision::v1::Block >&
      blocks() const;

  // .google.cloud.vision.v1.TextAnnotation.TextProperty property = 1;
  bool has_property() const;
  void clear_property();
  static const int kPropertyFieldNumber = 1;
  private:
  void _slow_mutable_property();
  public:
  const ::google::cloud::vision::v1::TextAnnotation_TextProperty& property() const;
  ::google::cloud::vision::v1::TextAnnotation_TextProperty* release_property();
  ::google::cloud::vision::v1::TextAnnotation_TextProperty* mutable_property();
  void set_allocated_property(::google::cloud::vision::v1::TextAnnotation_TextProperty* property);
  void unsafe_arena_set_allocated_property(
      ::google::cloud::vision::v1::TextAnnotation_TextProperty* property);
  ::google::cloud::vision::v1::TextAnnotation_TextProperty* unsafe_arena_release_property();

  // int32 width = 2;
  void clear_width();
  static const int kWidthFieldNumber = 2;
  ::google::protobuf::int32 width() const;
  void set_width(::google::protobuf::int32 value);

  // int32 height = 3;
  void clear_height();
  static const int kHeightFieldNumber = 3;
  ::google::protobuf::int32 height() const;
  void set_height(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:google.cloud.vision.v1.Page)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::RepeatedPtrField< ::google::cloud::vision::v1::Block > blocks_;
  ::google::cloud::vision::v1::TextAnnotation_TextProperty* property_;
  ::google::protobuf::int32 width_;
  ::google::protobuf::int32 height_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fcloud_2fvision_2fv1_2ftext_5fannotation_2eproto::TableStruct;
  friend void ::protobuf_google_2fcloud_2fvision_2fv1_2ftext_5fannotation_2eproto::InitDefaultsPageImpl();
};
// -------------------------------------------------------------------

class Block : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.cloud.vision.v1.Block) */ {
 public:
  Block();
  virtual ~Block();

  Block(const Block& from);

  inline Block& operator=(const Block& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Block(Block&& from) noexcept
    : Block() {
    *this = ::std::move(from);
  }

  inline Block& operator=(Block&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const Block& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Block* internal_default_instance() {
    return reinterpret_cast<const Block*>(
               &_Block_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    5;

  void UnsafeArenaSwap(Block* other);
  void Swap(Block* other);
  friend void swap(Block& a, Block& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Block* New() const PROTOBUF_FINAL { return New(NULL); }

  Block* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Block& from);
  void MergeFrom(const Block& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Block* other);
  protected:
  explicit Block(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef Block_BlockType BlockType;
  static const BlockType UNKNOWN =
    Block_BlockType_UNKNOWN;
  static const BlockType TEXT =
    Block_BlockType_TEXT;
  static const BlockType TABLE =
    Block_BlockType_TABLE;
  static const BlockType PICTURE =
    Block_BlockType_PICTURE;
  static const BlockType RULER =
    Block_BlockType_RULER;
  static const BlockType BARCODE =
    Block_BlockType_BARCODE;
  static inline bool BlockType_IsValid(int value) {
    return Block_BlockType_IsValid(value);
  }
  static const BlockType BlockType_MIN =
    Block_BlockType_BlockType_MIN;
  static const BlockType BlockType_MAX =
    Block_BlockType_BlockType_MAX;
  static const int BlockType_ARRAYSIZE =
    Block_BlockType_BlockType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  BlockType_descriptor() {
    return Block_BlockType_descriptor();
  }
  static inline const ::std::string& BlockType_Name(BlockType value) {
    return Block_BlockType_Name(value);
  }
  static inline bool BlockType_Parse(const ::std::string& name,
      BlockType* value) {
    return Block_BlockType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated .google.cloud.vision.v1.Paragraph paragraphs = 3;
  int paragraphs_size() const;
  void clear_paragraphs();
  static const int kParagraphsFieldNumber = 3;
  const ::google::cloud::vision::v1::Paragraph& paragraphs(int index) const;
  ::google::cloud::vision::v1::Paragraph* mutable_paragraphs(int index);
  ::google::cloud::vision::v1::Paragraph* add_paragraphs();
  ::google::protobuf::RepeatedPtrField< ::google::cloud::vision::v1::Paragraph >*
      mutable_paragraphs();
  const ::google::protobuf::RepeatedPtrField< ::google::cloud::vision::v1::Paragraph >&
      paragraphs() const;

  // .google.cloud.vision.v1.TextAnnotation.TextProperty property = 1;
  bool has_property() const;
  void clear_property();
  static const int kPropertyFieldNumber = 1;
  private:
  void _slow_mutable_property();
  public:
  const ::google::cloud::vision::v1::TextAnnotation_TextProperty& property() const;
  ::google::cloud::vision::v1::TextAnnotation_TextProperty* release_property();
  ::google::cloud::vision::v1::TextAnnotation_TextProperty* mutable_property();
  void set_allocated_property(::google::cloud::vision::v1::TextAnnotation_TextProperty* property);
  void unsafe_arena_set_allocated_property(
      ::google::cloud::vision::v1::TextAnnotation_TextProperty* property);
  ::google::cloud::vision::v1::TextAnnotation_TextProperty* unsafe_arena_release_property();

  // .google.cloud.vision.v1.BoundingPoly bounding_box = 2;
  bool has_bounding_box() const;
  void clear_bounding_box();
  static const int kBoundingBoxFieldNumber = 2;
  private:
  void _slow_mutable_bounding_box();
  public:
  const ::google::cloud::vision::v1::BoundingPoly& bounding_box() const;
  ::google::cloud::vision::v1::BoundingPoly* release_bounding_box();
  ::google::cloud::vision::v1::BoundingPoly* mutable_bounding_box();
  void set_allocated_bounding_box(::google::cloud::vision::v1::BoundingPoly* bounding_box);
  void unsafe_arena_set_allocated_bounding_box(
      ::google::cloud::vision::v1::BoundingPoly* bounding_box);
  ::google::cloud::vision::v1::BoundingPoly* unsafe_arena_release_bounding_box();

  // .google.cloud.vision.v1.Block.BlockType block_type = 4;
  void clear_block_type();
  static const int kBlockTypeFieldNumber = 4;
  ::google::cloud::vision::v1::Block_BlockType block_type() const;
  void set_block_type(::google::cloud::vision::v1::Block_BlockType value);

  // @@protoc_insertion_point(class_scope:google.cloud.vision.v1.Block)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::RepeatedPtrField< ::google::cloud::vision::v1::Paragraph > paragraphs_;
  ::google::cloud::vision::v1::TextAnnotation_TextProperty* property_;
  ::google::cloud::vision::v1::BoundingPoly* bounding_box_;
  int block_type_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fcloud_2fvision_2fv1_2ftext_5fannotation_2eproto::TableStruct;
  friend void ::protobuf_google_2fcloud_2fvision_2fv1_2ftext_5fannotation_2eproto::InitDefaultsBlockImpl();
};
// -------------------------------------------------------------------

class Paragraph : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.cloud.vision.v1.Paragraph) */ {
 public:
  Paragraph();
  virtual ~Paragraph();

  Paragraph(const Paragraph& from);

  inline Paragraph& operator=(const Paragraph& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Paragraph(Paragraph&& from) noexcept
    : Paragraph() {
    *this = ::std::move(from);
  }

  inline Paragraph& operator=(Paragraph&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const Paragraph& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Paragraph* internal_default_instance() {
    return reinterpret_cast<const Paragraph*>(
               &_Paragraph_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    6;

  void UnsafeArenaSwap(Paragraph* other);
  void Swap(Paragraph* other);
  friend void swap(Paragraph& a, Paragraph& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Paragraph* New() const PROTOBUF_FINAL { return New(NULL); }

  Paragraph* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Paragraph& from);
  void MergeFrom(const Paragraph& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Paragraph* other);
  protected:
  explicit Paragraph(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .google.cloud.vision.v1.Word words = 3;
  int words_size() const;
  void clear_words();
  static const int kWordsFieldNumber = 3;
  const ::google::cloud::vision::v1::Word& words(int index) const;
  ::google::cloud::vision::v1::Word* mutable_words(int index);
  ::google::cloud::vision::v1::Word* add_words();
  ::google::protobuf::RepeatedPtrField< ::google::cloud::vision::v1::Word >*
      mutable_words();
  const ::google::protobuf::RepeatedPtrField< ::google::cloud::vision::v1::Word >&
      words() const;

  // .google.cloud.vision.v1.TextAnnotation.TextProperty property = 1;
  bool has_property() const;
  void clear_property();
  static const int kPropertyFieldNumber = 1;
  private:
  void _slow_mutable_property();
  public:
  const ::google::cloud::vision::v1::TextAnnotation_TextProperty& property() const;
  ::google::cloud::vision::v1::TextAnnotation_TextProperty* release_property();
  ::google::cloud::vision::v1::TextAnnotation_TextProperty* mutable_property();
  void set_allocated_property(::google::cloud::vision::v1::TextAnnotation_TextProperty* property);
  void unsafe_arena_set_allocated_property(
      ::google::cloud::vision::v1::TextAnnotation_TextProperty* property);
  ::google::cloud::vision::v1::TextAnnotation_TextProperty* unsafe_arena_release_property();

  // .google.cloud.vision.v1.BoundingPoly bounding_box = 2;
  bool has_bounding_box() const;
  void clear_bounding_box();
  static const int kBoundingBoxFieldNumber = 2;
  private:
  void _slow_mutable_bounding_box();
  public:
  const ::google::cloud::vision::v1::BoundingPoly& bounding_box() const;
  ::google::cloud::vision::v1::BoundingPoly* release_bounding_box();
  ::google::cloud::vision::v1::BoundingPoly* mutable_bounding_box();
  void set_allocated_bounding_box(::google::cloud::vision::v1::BoundingPoly* bounding_box);
  void unsafe_arena_set_allocated_bounding_box(
      ::google::cloud::vision::v1::BoundingPoly* bounding_box);
  ::google::cloud::vision::v1::BoundingPoly* unsafe_arena_release_bounding_box();

  // @@protoc_insertion_point(class_scope:google.cloud.vision.v1.Paragraph)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::RepeatedPtrField< ::google::cloud::vision::v1::Word > words_;
  ::google::cloud::vision::v1::TextAnnotation_TextProperty* property_;
  ::google::cloud::vision::v1::BoundingPoly* bounding_box_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fcloud_2fvision_2fv1_2ftext_5fannotation_2eproto::TableStruct;
  friend void ::protobuf_google_2fcloud_2fvision_2fv1_2ftext_5fannotation_2eproto::InitDefaultsParagraphImpl();
};
// -------------------------------------------------------------------

class Word : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.cloud.vision.v1.Word) */ {
 public:
  Word();
  virtual ~Word();

  Word(const Word& from);

  inline Word& operator=(const Word& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Word(Word&& from) noexcept
    : Word() {
    *this = ::std::move(from);
  }

  inline Word& operator=(Word&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const Word& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Word* internal_default_instance() {
    return reinterpret_cast<const Word*>(
               &_Word_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    7;

  void UnsafeArenaSwap(Word* other);
  void Swap(Word* other);
  friend void swap(Word& a, Word& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Word* New() const PROTOBUF_FINAL { return New(NULL); }

  Word* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Word& from);
  void MergeFrom(const Word& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Word* other);
  protected:
  explicit Word(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .google.cloud.vision.v1.Symbol symbols = 3;
  int symbols_size() const;
  void clear_symbols();
  static const int kSymbolsFieldNumber = 3;
  const ::google::cloud::vision::v1::Symbol& symbols(int index) const;
  ::google::cloud::vision::v1::Symbol* mutable_symbols(int index);
  ::google::cloud::vision::v1::Symbol* add_symbols();
  ::google::protobuf::RepeatedPtrField< ::google::cloud::vision::v1::Symbol >*
      mutable_symbols();
  const ::google::protobuf::RepeatedPtrField< ::google::cloud::vision::v1::Symbol >&
      symbols() const;

  // .google.cloud.vision.v1.TextAnnotation.TextProperty property = 1;
  bool has_property() const;
  void clear_property();
  static const int kPropertyFieldNumber = 1;
  private:
  void _slow_mutable_property();
  public:
  const ::google::cloud::vision::v1::TextAnnotation_TextProperty& property() const;
  ::google::cloud::vision::v1::TextAnnotation_TextProperty* release_property();
  ::google::cloud::vision::v1::TextAnnotation_TextProperty* mutable_property();
  void set_allocated_property(::google::cloud::vision::v1::TextAnnotation_TextProperty* property);
  void unsafe_arena_set_allocated_property(
      ::google::cloud::vision::v1::TextAnnotation_TextProperty* property);
  ::google::cloud::vision::v1::TextAnnotation_TextProperty* unsafe_arena_release_property();

  // .google.cloud.vision.v1.BoundingPoly bounding_box = 2;
  bool has_bounding_box() const;
  void clear_bounding_box();
  static const int kBoundingBoxFieldNumber = 2;
  private:
  void _slow_mutable_bounding_box();
  public:
  const ::google::cloud::vision::v1::BoundingPoly& bounding_box() const;
  ::google::cloud::vision::v1::BoundingPoly* release_bounding_box();
  ::google::cloud::vision::v1::BoundingPoly* mutable_bounding_box();
  void set_allocated_bounding_box(::google::cloud::vision::v1::BoundingPoly* bounding_box);
  void unsafe_arena_set_allocated_bounding_box(
      ::google::cloud::vision::v1::BoundingPoly* bounding_box);
  ::google::cloud::vision::v1::BoundingPoly* unsafe_arena_release_bounding_box();

  // @@protoc_insertion_point(class_scope:google.cloud.vision.v1.Word)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::RepeatedPtrField< ::google::cloud::vision::v1::Symbol > symbols_;
  ::google::cloud::vision::v1::TextAnnotation_TextProperty* property_;
  ::google::cloud::vision::v1::BoundingPoly* bounding_box_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fcloud_2fvision_2fv1_2ftext_5fannotation_2eproto::TableStruct;
  friend void ::protobuf_google_2fcloud_2fvision_2fv1_2ftext_5fannotation_2eproto::InitDefaultsWordImpl();
};
// -------------------------------------------------------------------

class Symbol : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.cloud.vision.v1.Symbol) */ {
 public:
  Symbol();
  virtual ~Symbol();

  Symbol(const Symbol& from);

  inline Symbol& operator=(const Symbol& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Symbol(Symbol&& from) noexcept
    : Symbol() {
    *this = ::std::move(from);
  }

  inline Symbol& operator=(Symbol&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const Symbol& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Symbol* internal_default_instance() {
    return reinterpret_cast<const Symbol*>(
               &_Symbol_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    8;

  void UnsafeArenaSwap(Symbol* other);
  void Swap(Symbol* other);
  friend void swap(Symbol& a, Symbol& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Symbol* New() const PROTOBUF_FINAL { return New(NULL); }

  Symbol* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Symbol& from);
  void MergeFrom(const Symbol& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Symbol* other);
  protected:
  explicit Symbol(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string text = 3;
  void clear_text();
  static const int kTextFieldNumber = 3;
  const ::std::string& text() const;
  void set_text(const ::std::string& value);
  #if LANG_CXX11
  void set_text(::std::string&& value);
  #endif
  void set_text(const char* value);
  void set_text(const char* value, size_t size);
  ::std::string* mutable_text();
  ::std::string* release_text();
  void set_allocated_text(::std::string* text);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_text();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_text(
      ::std::string* text);

  // .google.cloud.vision.v1.TextAnnotation.TextProperty property = 1;
  bool has_property() const;
  void clear_property();
  static const int kPropertyFieldNumber = 1;
  private:
  void _slow_mutable_property();
  public:
  const ::google::cloud::vision::v1::TextAnnotation_TextProperty& property() const;
  ::google::cloud::vision::v1::TextAnnotation_TextProperty* release_property();
  ::google::cloud::vision::v1::TextAnnotation_TextProperty* mutable_property();
  void set_allocated_property(::google::cloud::vision::v1::TextAnnotation_TextProperty* property);
  void unsafe_arena_set_allocated_property(
      ::google::cloud::vision::v1::TextAnnotation_TextProperty* property);
  ::google::cloud::vision::v1::TextAnnotation_TextProperty* unsafe_arena_release_property();

  // .google.cloud.vision.v1.BoundingPoly bounding_box = 2;
  bool has_bounding_box() const;
  void clear_bounding_box();
  static const int kBoundingBoxFieldNumber = 2;
  private:
  void _slow_mutable_bounding_box();
  public:
  const ::google::cloud::vision::v1::BoundingPoly& bounding_box() const;
  ::google::cloud::vision::v1::BoundingPoly* release_bounding_box();
  ::google::cloud::vision::v1::BoundingPoly* mutable_bounding_box();
  void set_allocated_bounding_box(::google::cloud::vision::v1::BoundingPoly* bounding_box);
  void unsafe_arena_set_allocated_bounding_box(
      ::google::cloud::vision::v1::BoundingPoly* bounding_box);
  ::google::cloud::vision::v1::BoundingPoly* unsafe_arena_release_bounding_box();

  // @@protoc_insertion_point(class_scope:google.cloud.vision.v1.Symbol)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::ArenaStringPtr text_;
  ::google::cloud::vision::v1::TextAnnotation_TextProperty* property_;
  ::google::cloud::vision::v1::BoundingPoly* bounding_box_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fcloud_2fvision_2fv1_2ftext_5fannotation_2eproto::TableStruct;
  friend void ::protobuf_google_2fcloud_2fvision_2fv1_2ftext_5fannotation_2eproto::InitDefaultsSymbolImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TextAnnotation_DetectedLanguage

// string language_code = 1;
inline void TextAnnotation_DetectedLanguage::clear_language_code() {
  language_code_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& TextAnnotation_DetectedLanguage::language_code() const {
  // @@protoc_insertion_point(field_get:google.cloud.vision.v1.TextAnnotation.DetectedLanguage.language_code)
  return language_code_.Get();
}
inline void TextAnnotation_DetectedLanguage::set_language_code(const ::std::string& value) {
  
  language_code_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.cloud.vision.v1.TextAnnotation.DetectedLanguage.language_code)
}
#if LANG_CXX11
inline void TextAnnotation_DetectedLanguage::set_language_code(::std::string&& value) {
  
  language_code_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.vision.v1.TextAnnotation.DetectedLanguage.language_code)
}
#endif
inline void TextAnnotation_DetectedLanguage::set_language_code(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  language_code_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.cloud.vision.v1.TextAnnotation.DetectedLanguage.language_code)
}
inline void TextAnnotation_DetectedLanguage::set_language_code(const char* value,
    size_t size) {
  
  language_code_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.cloud.vision.v1.TextAnnotation.DetectedLanguage.language_code)
}
inline ::std::string* TextAnnotation_DetectedLanguage::mutable_language_code() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.vision.v1.TextAnnotation.DetectedLanguage.language_code)
  return language_code_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* TextAnnotation_DetectedLanguage::release_language_code() {
  // @@protoc_insertion_point(field_release:google.cloud.vision.v1.TextAnnotation.DetectedLanguage.language_code)
  
  return language_code_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void TextAnnotation_DetectedLanguage::set_allocated_language_code(::std::string* language_code) {
  if (language_code != NULL) {
    
  } else {
    
  }
  language_code_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), language_code,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.cloud.vision.v1.TextAnnotation.DetectedLanguage.language_code)
}
inline ::std::string* TextAnnotation_DetectedLanguage::unsafe_arena_release_language_code() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.cloud.vision.v1.TextAnnotation.DetectedLanguage.language_code)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return language_code_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void TextAnnotation_DetectedLanguage::unsafe_arena_set_allocated_language_code(
    ::std::string* language_code) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (language_code != NULL) {
    
  } else {
    
  }
  language_code_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      language_code, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.vision.v1.TextAnnotation.DetectedLanguage.language_code)
}

// float confidence = 2;
inline void TextAnnotation_DetectedLanguage::clear_confidence() {
  confidence_ = 0;
}
inline float TextAnnotation_DetectedLanguage::confidence() const {
  // @@protoc_insertion_point(field_get:google.cloud.vision.v1.TextAnnotation.DetectedLanguage.confidence)
  return confidence_;
}
inline void TextAnnotation_DetectedLanguage::set_confidence(float value) {
  
  confidence_ = value;
  // @@protoc_insertion_point(field_set:google.cloud.vision.v1.TextAnnotation.DetectedLanguage.confidence)
}

// -------------------------------------------------------------------

// TextAnnotation_DetectedBreak

// .google.cloud.vision.v1.TextAnnotation.DetectedBreak.BreakType type = 1;
inline void TextAnnotation_DetectedBreak::clear_type() {
  type_ = 0;
}
inline ::google::cloud::vision::v1::TextAnnotation_DetectedBreak_BreakType TextAnnotation_DetectedBreak::type() const {
  // @@protoc_insertion_point(field_get:google.cloud.vision.v1.TextAnnotation.DetectedBreak.type)
  return static_cast< ::google::cloud::vision::v1::TextAnnotation_DetectedBreak_BreakType >(type_);
}
inline void TextAnnotation_DetectedBreak::set_type(::google::cloud::vision::v1::TextAnnotation_DetectedBreak_BreakType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:google.cloud.vision.v1.TextAnnotation.DetectedBreak.type)
}

// bool is_prefix = 2;
inline void TextAnnotation_DetectedBreak::clear_is_prefix() {
  is_prefix_ = false;
}
inline bool TextAnnotation_DetectedBreak::is_prefix() const {
  // @@protoc_insertion_point(field_get:google.cloud.vision.v1.TextAnnotation.DetectedBreak.is_prefix)
  return is_prefix_;
}
inline void TextAnnotation_DetectedBreak::set_is_prefix(bool value) {
  
  is_prefix_ = value;
  // @@protoc_insertion_point(field_set:google.cloud.vision.v1.TextAnnotation.DetectedBreak.is_prefix)
}

// -------------------------------------------------------------------

// TextAnnotation_TextProperty

// repeated .google.cloud.vision.v1.TextAnnotation.DetectedLanguage detected_languages = 1;
inline int TextAnnotation_TextProperty::detected_languages_size() const {
  return detected_languages_.size();
}
inline void TextAnnotation_TextProperty::clear_detected_languages() {
  detected_languages_.Clear();
}
inline const ::google::cloud::vision::v1::TextAnnotation_DetectedLanguage& TextAnnotation_TextProperty::detected_languages(int index) const {
  // @@protoc_insertion_point(field_get:google.cloud.vision.v1.TextAnnotation.TextProperty.detected_languages)
  return detected_languages_.Get(index);
}
inline ::google::cloud::vision::v1::TextAnnotation_DetectedLanguage* TextAnnotation_TextProperty::mutable_detected_languages(int index) {
  // @@protoc_insertion_point(field_mutable:google.cloud.vision.v1.TextAnnotation.TextProperty.detected_languages)
  return detected_languages_.Mutable(index);
}
inline ::google::cloud::vision::v1::TextAnnotation_DetectedLanguage* TextAnnotation_TextProperty::add_detected_languages() {
  // @@protoc_insertion_point(field_add:google.cloud.vision.v1.TextAnnotation.TextProperty.detected_languages)
  return detected_languages_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::google::cloud::vision::v1::TextAnnotation_DetectedLanguage >*
TextAnnotation_TextProperty::mutable_detected_languages() {
  // @@protoc_insertion_point(field_mutable_list:google.cloud.vision.v1.TextAnnotation.TextProperty.detected_languages)
  return &detected_languages_;
}
inline const ::google::protobuf::RepeatedPtrField< ::google::cloud::vision::v1::TextAnnotation_DetectedLanguage >&
TextAnnotation_TextProperty::detected_languages() const {
  // @@protoc_insertion_point(field_list:google.cloud.vision.v1.TextAnnotation.TextProperty.detected_languages)
  return detected_languages_;
}

// .google.cloud.vision.v1.TextAnnotation.DetectedBreak detected_break = 2;
inline bool TextAnnotation_TextProperty::has_detected_break() const {
  return this != internal_default_instance() && detected_break_ != NULL;
}
inline void TextAnnotation_TextProperty::clear_detected_break() {
  if (GetArenaNoVirtual() == NULL && detected_break_ != NULL) {
    delete detected_break_;
  }
  detected_break_ = NULL;
}
inline const ::google::cloud::vision::v1::TextAnnotation_DetectedBreak& TextAnnotation_TextProperty::detected_break() const {
  const ::google::cloud::vision::v1::TextAnnotation_DetectedBreak* p = detected_break_;
  // @@protoc_insertion_point(field_get:google.cloud.vision.v1.TextAnnotation.TextProperty.detected_break)
  return p != NULL ? *p : *reinterpret_cast<const ::google::cloud::vision::v1::TextAnnotation_DetectedBreak*>(
      &::google::cloud::vision::v1::_TextAnnotation_DetectedBreak_default_instance_);
}
inline ::google::cloud::vision::v1::TextAnnotation_DetectedBreak* TextAnnotation_TextProperty::release_detected_break() {
  // @@protoc_insertion_point(field_release:google.cloud.vision.v1.TextAnnotation.TextProperty.detected_break)
  
  ::google::cloud::vision::v1::TextAnnotation_DetectedBreak* temp = detected_break_;
  if (GetArenaNoVirtual() != NULL) {
    temp = ::google::protobuf::internal::DuplicateIfNonNull(temp, NULL);
  }
  detected_break_ = NULL;
  return temp;
}
inline ::google::cloud::vision::v1::TextAnnotation_DetectedBreak* TextAnnotation_TextProperty::unsafe_arena_release_detected_break() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.cloud.vision.v1.TextAnnotation.TextProperty.detected_break)
  
  ::google::cloud::vision::v1::TextAnnotation_DetectedBreak* temp = detected_break_;
  detected_break_ = NULL;
  return temp;
}
inline ::google::cloud::vision::v1::TextAnnotation_DetectedBreak* TextAnnotation_TextProperty::mutable_detected_break() {
  
  if (detected_break_ == NULL) {
    _slow_mutable_detected_break();
  }
  // @@protoc_insertion_point(field_mutable:google.cloud.vision.v1.TextAnnotation.TextProperty.detected_break)
  return detected_break_;
}
inline void TextAnnotation_TextProperty::set_allocated_detected_break(::google::cloud::vision::v1::TextAnnotation_DetectedBreak* detected_break) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete detected_break_;
  }
  if (detected_break) {
    ::google::protobuf::Arena* submessage_arena =
      ::google::protobuf::Arena::GetArena(detected_break);
    if (message_arena != submessage_arena) {
      detected_break = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, detected_break, submessage_arena);
    }
    
  } else {
    
  }
  detected_break_ = detected_break;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.vision.v1.TextAnnotation.TextProperty.detected_break)
}

// -------------------------------------------------------------------

// TextAnnotation

// repeated .google.cloud.vision.v1.Page pages = 1;
inline int TextAnnotation::pages_size() const {
  return pages_.size();
}
inline void TextAnnotation::clear_pages() {
  pages_.Clear();
}
inline const ::google::cloud::vision::v1::Page& TextAnnotation::pages(int index) const {
  // @@protoc_insertion_point(field_get:google.cloud.vision.v1.TextAnnotation.pages)
  return pages_.Get(index);
}
inline ::google::cloud::vision::v1::Page* TextAnnotation::mutable_pages(int index) {
  // @@protoc_insertion_point(field_mutable:google.cloud.vision.v1.TextAnnotation.pages)
  return pages_.Mutable(index);
}
inline ::google::cloud::vision::v1::Page* TextAnnotation::add_pages() {
  // @@protoc_insertion_point(field_add:google.cloud.vision.v1.TextAnnotation.pages)
  return pages_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::google::cloud::vision::v1::Page >*
TextAnnotation::mutable_pages() {
  // @@protoc_insertion_point(field_mutable_list:google.cloud.vision.v1.TextAnnotation.pages)
  return &pages_;
}
inline const ::google::protobuf::RepeatedPtrField< ::google::cloud::vision::v1::Page >&
TextAnnotation::pages() const {
  // @@protoc_insertion_point(field_list:google.cloud.vision.v1.TextAnnotation.pages)
  return pages_;
}

// string text = 2;
inline void TextAnnotation::clear_text() {
  text_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& TextAnnotation::text() const {
  // @@protoc_insertion_point(field_get:google.cloud.vision.v1.TextAnnotation.text)
  return text_.Get();
}
inline void TextAnnotation::set_text(const ::std::string& value) {
  
  text_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.cloud.vision.v1.TextAnnotation.text)
}
#if LANG_CXX11
inline void TextAnnotation::set_text(::std::string&& value) {
  
  text_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.vision.v1.TextAnnotation.text)
}
#endif
inline void TextAnnotation::set_text(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  text_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.cloud.vision.v1.TextAnnotation.text)
}
inline void TextAnnotation::set_text(const char* value,
    size_t size) {
  
  text_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.cloud.vision.v1.TextAnnotation.text)
}
inline ::std::string* TextAnnotation::mutable_text() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.vision.v1.TextAnnotation.text)
  return text_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* TextAnnotation::release_text() {
  // @@protoc_insertion_point(field_release:google.cloud.vision.v1.TextAnnotation.text)
  
  return text_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void TextAnnotation::set_allocated_text(::std::string* text) {
  if (text != NULL) {
    
  } else {
    
  }
  text_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), text,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.cloud.vision.v1.TextAnnotation.text)
}
inline ::std::string* TextAnnotation::unsafe_arena_release_text() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.cloud.vision.v1.TextAnnotation.text)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return text_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void TextAnnotation::unsafe_arena_set_allocated_text(
    ::std::string* text) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (text != NULL) {
    
  } else {
    
  }
  text_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      text, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.vision.v1.TextAnnotation.text)
}

// -------------------------------------------------------------------

// Page

// .google.cloud.vision.v1.TextAnnotation.TextProperty property = 1;
inline bool Page::has_property() const {
  return this != internal_default_instance() && property_ != NULL;
}
inline void Page::clear_property() {
  if (GetArenaNoVirtual() == NULL && property_ != NULL) {
    delete property_;
  }
  property_ = NULL;
}
inline const ::google::cloud::vision::v1::TextAnnotation_TextProperty& Page::property() const {
  const ::google::cloud::vision::v1::TextAnnotation_TextProperty* p = property_;
  // @@protoc_insertion_point(field_get:google.cloud.vision.v1.Page.property)
  return p != NULL ? *p : *reinterpret_cast<const ::google::cloud::vision::v1::TextAnnotation_TextProperty*>(
      &::google::cloud::vision::v1::_TextAnnotation_TextProperty_default_instance_);
}
inline ::google::cloud::vision::v1::TextAnnotation_TextProperty* Page::release_property() {
  // @@protoc_insertion_point(field_release:google.cloud.vision.v1.Page.property)
  
  ::google::cloud::vision::v1::TextAnnotation_TextProperty* temp = property_;
  if (GetArenaNoVirtual() != NULL) {
    temp = ::google::protobuf::internal::DuplicateIfNonNull(temp, NULL);
  }
  property_ = NULL;
  return temp;
}
inline ::google::cloud::vision::v1::TextAnnotation_TextProperty* Page::unsafe_arena_release_property() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.cloud.vision.v1.Page.property)
  
  ::google::cloud::vision::v1::TextAnnotation_TextProperty* temp = property_;
  property_ = NULL;
  return temp;
}
inline ::google::cloud::vision::v1::TextAnnotation_TextProperty* Page::mutable_property() {
  
  if (property_ == NULL) {
    _slow_mutable_property();
  }
  // @@protoc_insertion_point(field_mutable:google.cloud.vision.v1.Page.property)
  return property_;
}
inline void Page::set_allocated_property(::google::cloud::vision::v1::TextAnnotation_TextProperty* property) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete property_;
  }
  if (property) {
    ::google::protobuf::Arena* submessage_arena =
      ::google::protobuf::Arena::GetArena(property);
    if (message_arena != submessage_arena) {
      property = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, property, submessage_arena);
    }
    
  } else {
    
  }
  property_ = property;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.vision.v1.Page.property)
}

// int32 width = 2;
inline void Page::clear_width() {
  width_ = 0;
}
inline ::google::protobuf::int32 Page::width() const {
  // @@protoc_insertion_point(field_get:google.cloud.vision.v1.Page.width)
  return width_;
}
inline void Page::set_width(::google::protobuf::int32 value) {
  
  width_ = value;
  // @@protoc_insertion_point(field_set:google.cloud.vision.v1.Page.width)
}

// int32 height = 3;
inline void Page::clear_height() {
  height_ = 0;
}
inline ::google::protobuf::int32 Page::height() const {
  // @@protoc_insertion_point(field_get:google.cloud.vision.v1.Page.height)
  return height_;
}
inline void Page::set_height(::google::protobuf::int32 value) {
  
  height_ = value;
  // @@protoc_insertion_point(field_set:google.cloud.vision.v1.Page.height)
}

// repeated .google.cloud.vision.v1.Block blocks = 4;
inline int Page::blocks_size() const {
  return blocks_.size();
}
inline void Page::clear_blocks() {
  blocks_.Clear();
}
inline const ::google::cloud::vision::v1::Block& Page::blocks(int index) const {
  // @@protoc_insertion_point(field_get:google.cloud.vision.v1.Page.blocks)
  return blocks_.Get(index);
}
inline ::google::cloud::vision::v1::Block* Page::mutable_blocks(int index) {
  // @@protoc_insertion_point(field_mutable:google.cloud.vision.v1.Page.blocks)
  return blocks_.Mutable(index);
}
inline ::google::cloud::vision::v1::Block* Page::add_blocks() {
  // @@protoc_insertion_point(field_add:google.cloud.vision.v1.Page.blocks)
  return blocks_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::google::cloud::vision::v1::Block >*
Page::mutable_blocks() {
  // @@protoc_insertion_point(field_mutable_list:google.cloud.vision.v1.Page.blocks)
  return &blocks_;
}
inline const ::google::protobuf::RepeatedPtrField< ::google::cloud::vision::v1::Block >&
Page::blocks() const {
  // @@protoc_insertion_point(field_list:google.cloud.vision.v1.Page.blocks)
  return blocks_;
}

// -------------------------------------------------------------------

// Block

// .google.cloud.vision.v1.TextAnnotation.TextProperty property = 1;
inline bool Block::has_property() const {
  return this != internal_default_instance() && property_ != NULL;
}
inline void Block::clear_property() {
  if (GetArenaNoVirtual() == NULL && property_ != NULL) {
    delete property_;
  }
  property_ = NULL;
}
inline const ::google::cloud::vision::v1::TextAnnotation_TextProperty& Block::property() const {
  const ::google::cloud::vision::v1::TextAnnotation_TextProperty* p = property_;
  // @@protoc_insertion_point(field_get:google.cloud.vision.v1.Block.property)
  return p != NULL ? *p : *reinterpret_cast<const ::google::cloud::vision::v1::TextAnnotation_TextProperty*>(
      &::google::cloud::vision::v1::_TextAnnotation_TextProperty_default_instance_);
}
inline ::google::cloud::vision::v1::TextAnnotation_TextProperty* Block::release_property() {
  // @@protoc_insertion_point(field_release:google.cloud.vision.v1.Block.property)
  
  ::google::cloud::vision::v1::TextAnnotation_TextProperty* temp = property_;
  if (GetArenaNoVirtual() != NULL) {
    temp = ::google::protobuf::internal::DuplicateIfNonNull(temp, NULL);
  }
  property_ = NULL;
  return temp;
}
inline ::google::cloud::vision::v1::TextAnnotation_TextProperty* Block::unsafe_arena_release_property() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.cloud.vision.v1.Block.property)
  
  ::google::cloud::vision::v1::TextAnnotation_TextProperty* temp = property_;
  property_ = NULL;
  return temp;
}
inline ::google::cloud::vision::v1::TextAnnotation_TextProperty* Block::mutable_property() {
  
  if (property_ == NULL) {
    _slow_mutable_property();
  }
  // @@protoc_insertion_point(field_mutable:google.cloud.vision.v1.Block.property)
  return property_;
}
inline void Block::set_allocated_property(::google::cloud::vision::v1::TextAnnotation_TextProperty* property) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete property_;
  }
  if (property) {
    ::google::protobuf::Arena* submessage_arena =
      ::google::protobuf::Arena::GetArena(property);
    if (message_arena != submessage_arena) {
      property = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, property, submessage_arena);
    }
    
  } else {
    
  }
  property_ = property;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.vision.v1.Block.property)
}

// .google.cloud.vision.v1.BoundingPoly bounding_box = 2;
inline bool Block::has_bounding_box() const {
  return this != internal_default_instance() && bounding_box_ != NULL;
}
inline const ::google::cloud::vision::v1::BoundingPoly& Block::bounding_box() const {
  const ::google::cloud::vision::v1::BoundingPoly* p = bounding_box_;
  // @@protoc_insertion_point(field_get:google.cloud.vision.v1.Block.bounding_box)
  return p != NULL ? *p : *reinterpret_cast<const ::google::cloud::vision::v1::BoundingPoly*>(
      &::google::cloud::vision::v1::_BoundingPoly_default_instance_);
}
inline ::google::cloud::vision::v1::BoundingPoly* Block::release_bounding_box() {
  // @@protoc_insertion_point(field_release:google.cloud.vision.v1.Block.bounding_box)
  
  ::google::cloud::vision::v1::BoundingPoly* temp = bounding_box_;
  if (GetArenaNoVirtual() != NULL) {
    temp = ::google::protobuf::internal::DuplicateIfNonNull(temp, NULL);
  }
  bounding_box_ = NULL;
  return temp;
}
inline ::google::cloud::vision::v1::BoundingPoly* Block::unsafe_arena_release_bounding_box() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.cloud.vision.v1.Block.bounding_box)
  
  ::google::cloud::vision::v1::BoundingPoly* temp = bounding_box_;
  bounding_box_ = NULL;
  return temp;
}
inline ::google::cloud::vision::v1::BoundingPoly* Block::mutable_bounding_box() {
  
  if (bounding_box_ == NULL) {
    _slow_mutable_bounding_box();
  }
  // @@protoc_insertion_point(field_mutable:google.cloud.vision.v1.Block.bounding_box)
  return bounding_box_;
}
inline void Block::set_allocated_bounding_box(::google::cloud::vision::v1::BoundingPoly* bounding_box) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(bounding_box_);
  }
  if (bounding_box) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast< ::google::protobuf::MessageLite*>(bounding_box)->GetArena();
    if (message_arena != submessage_arena) {
      bounding_box = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, bounding_box, submessage_arena);
    }
    
  } else {
    
  }
  bounding_box_ = bounding_box;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.vision.v1.Block.bounding_box)
}

// repeated .google.cloud.vision.v1.Paragraph paragraphs = 3;
inline int Block::paragraphs_size() const {
  return paragraphs_.size();
}
inline void Block::clear_paragraphs() {
  paragraphs_.Clear();
}
inline const ::google::cloud::vision::v1::Paragraph& Block::paragraphs(int index) const {
  // @@protoc_insertion_point(field_get:google.cloud.vision.v1.Block.paragraphs)
  return paragraphs_.Get(index);
}
inline ::google::cloud::vision::v1::Paragraph* Block::mutable_paragraphs(int index) {
  // @@protoc_insertion_point(field_mutable:google.cloud.vision.v1.Block.paragraphs)
  return paragraphs_.Mutable(index);
}
inline ::google::cloud::vision::v1::Paragraph* Block::add_paragraphs() {
  // @@protoc_insertion_point(field_add:google.cloud.vision.v1.Block.paragraphs)
  return paragraphs_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::google::cloud::vision::v1::Paragraph >*
Block::mutable_paragraphs() {
  // @@protoc_insertion_point(field_mutable_list:google.cloud.vision.v1.Block.paragraphs)
  return &paragraphs_;
}
inline const ::google::protobuf::RepeatedPtrField< ::google::cloud::vision::v1::Paragraph >&
Block::paragraphs() const {
  // @@protoc_insertion_point(field_list:google.cloud.vision.v1.Block.paragraphs)
  return paragraphs_;
}

// .google.cloud.vision.v1.Block.BlockType block_type = 4;
inline void Block::clear_block_type() {
  block_type_ = 0;
}
inline ::google::cloud::vision::v1::Block_BlockType Block::block_type() const {
  // @@protoc_insertion_point(field_get:google.cloud.vision.v1.Block.block_type)
  return static_cast< ::google::cloud::vision::v1::Block_BlockType >(block_type_);
}
inline void Block::set_block_type(::google::cloud::vision::v1::Block_BlockType value) {
  
  block_type_ = value;
  // @@protoc_insertion_point(field_set:google.cloud.vision.v1.Block.block_type)
}

// -------------------------------------------------------------------

// Paragraph

// .google.cloud.vision.v1.TextAnnotation.TextProperty property = 1;
inline bool Paragraph::has_property() const {
  return this != internal_default_instance() && property_ != NULL;
}
inline void Paragraph::clear_property() {
  if (GetArenaNoVirtual() == NULL && property_ != NULL) {
    delete property_;
  }
  property_ = NULL;
}
inline const ::google::cloud::vision::v1::TextAnnotation_TextProperty& Paragraph::property() const {
  const ::google::cloud::vision::v1::TextAnnotation_TextProperty* p = property_;
  // @@protoc_insertion_point(field_get:google.cloud.vision.v1.Paragraph.property)
  return p != NULL ? *p : *reinterpret_cast<const ::google::cloud::vision::v1::TextAnnotation_TextProperty*>(
      &::google::cloud::vision::v1::_TextAnnotation_TextProperty_default_instance_);
}
inline ::google::cloud::vision::v1::TextAnnotation_TextProperty* Paragraph::release_property() {
  // @@protoc_insertion_point(field_release:google.cloud.vision.v1.Paragraph.property)
  
  ::google::cloud::vision::v1::TextAnnotation_TextProperty* temp = property_;
  if (GetArenaNoVirtual() != NULL) {
    temp = ::google::protobuf::internal::DuplicateIfNonNull(temp, NULL);
  }
  property_ = NULL;
  return temp;
}
inline ::google::cloud::vision::v1::TextAnnotation_TextProperty* Paragraph::unsafe_arena_release_property() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.cloud.vision.v1.Paragraph.property)
  
  ::google::cloud::vision::v1::TextAnnotation_TextProperty* temp = property_;
  property_ = NULL;
  return temp;
}
inline ::google::cloud::vision::v1::TextAnnotation_TextProperty* Paragraph::mutable_property() {
  
  if (property_ == NULL) {
    _slow_mutable_property();
  }
  // @@protoc_insertion_point(field_mutable:google.cloud.vision.v1.Paragraph.property)
  return property_;
}
inline void Paragraph::set_allocated_property(::google::cloud::vision::v1::TextAnnotation_TextProperty* property) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete property_;
  }
  if (property) {
    ::google::protobuf::Arena* submessage_arena =
      ::google::protobuf::Arena::GetArena(property);
    if (message_arena != submessage_arena) {
      property = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, property, submessage_arena);
    }
    
  } else {
    
  }
  property_ = property;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.vision.v1.Paragraph.property)
}

// .google.cloud.vision.v1.BoundingPoly bounding_box = 2;
inline bool Paragraph::has_bounding_box() const {
  return this != internal_default_instance() && bounding_box_ != NULL;
}
inline const ::google::cloud::vision::v1::BoundingPoly& Paragraph::bounding_box() const {
  const ::google::cloud::vision::v1::BoundingPoly* p = bounding_box_;
  // @@protoc_insertion_point(field_get:google.cloud.vision.v1.Paragraph.bounding_box)
  return p != NULL ? *p : *reinterpret_cast<const ::google::cloud::vision::v1::BoundingPoly*>(
      &::google::cloud::vision::v1::_BoundingPoly_default_instance_);
}
inline ::google::cloud::vision::v1::BoundingPoly* Paragraph::release_bounding_box() {
  // @@protoc_insertion_point(field_release:google.cloud.vision.v1.Paragraph.bounding_box)
  
  ::google::cloud::vision::v1::BoundingPoly* temp = bounding_box_;
  if (GetArenaNoVirtual() != NULL) {
    temp = ::google::protobuf::internal::DuplicateIfNonNull(temp, NULL);
  }
  bounding_box_ = NULL;
  return temp;
}
inline ::google::cloud::vision::v1::BoundingPoly* Paragraph::unsafe_arena_release_bounding_box() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.cloud.vision.v1.Paragraph.bounding_box)
  
  ::google::cloud::vision::v1::BoundingPoly* temp = bounding_box_;
  bounding_box_ = NULL;
  return temp;
}
inline ::google::cloud::vision::v1::BoundingPoly* Paragraph::mutable_bounding_box() {
  
  if (bounding_box_ == NULL) {
    _slow_mutable_bounding_box();
  }
  // @@protoc_insertion_point(field_mutable:google.cloud.vision.v1.Paragraph.bounding_box)
  return bounding_box_;
}
inline void Paragraph::set_allocated_bounding_box(::google::cloud::vision::v1::BoundingPoly* bounding_box) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(bounding_box_);
  }
  if (bounding_box) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast< ::google::protobuf::MessageLite*>(bounding_box)->GetArena();
    if (message_arena != submessage_arena) {
      bounding_box = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, bounding_box, submessage_arena);
    }
    
  } else {
    
  }
  bounding_box_ = bounding_box;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.vision.v1.Paragraph.bounding_box)
}

// repeated .google.cloud.vision.v1.Word words = 3;
inline int Paragraph::words_size() const {
  return words_.size();
}
inline void Paragraph::clear_words() {
  words_.Clear();
}
inline const ::google::cloud::vision::v1::Word& Paragraph::words(int index) const {
  // @@protoc_insertion_point(field_get:google.cloud.vision.v1.Paragraph.words)
  return words_.Get(index);
}
inline ::google::cloud::vision::v1::Word* Paragraph::mutable_words(int index) {
  // @@protoc_insertion_point(field_mutable:google.cloud.vision.v1.Paragraph.words)
  return words_.Mutable(index);
}
inline ::google::cloud::vision::v1::Word* Paragraph::add_words() {
  // @@protoc_insertion_point(field_add:google.cloud.vision.v1.Paragraph.words)
  return words_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::google::cloud::vision::v1::Word >*
Paragraph::mutable_words() {
  // @@protoc_insertion_point(field_mutable_list:google.cloud.vision.v1.Paragraph.words)
  return &words_;
}
inline const ::google::protobuf::RepeatedPtrField< ::google::cloud::vision::v1::Word >&
Paragraph::words() const {
  // @@protoc_insertion_point(field_list:google.cloud.vision.v1.Paragraph.words)
  return words_;
}

// -------------------------------------------------------------------

// Word

// .google.cloud.vision.v1.TextAnnotation.TextProperty property = 1;
inline bool Word::has_property() const {
  return this != internal_default_instance() && property_ != NULL;
}
inline void Word::clear_property() {
  if (GetArenaNoVirtual() == NULL && property_ != NULL) {
    delete property_;
  }
  property_ = NULL;
}
inline const ::google::cloud::vision::v1::TextAnnotation_TextProperty& Word::property() const {
  const ::google::cloud::vision::v1::TextAnnotation_TextProperty* p = property_;
  // @@protoc_insertion_point(field_get:google.cloud.vision.v1.Word.property)
  return p != NULL ? *p : *reinterpret_cast<const ::google::cloud::vision::v1::TextAnnotation_TextProperty*>(
      &::google::cloud::vision::v1::_TextAnnotation_TextProperty_default_instance_);
}
inline ::google::cloud::vision::v1::TextAnnotation_TextProperty* Word::release_property() {
  // @@protoc_insertion_point(field_release:google.cloud.vision.v1.Word.property)
  
  ::google::cloud::vision::v1::TextAnnotation_TextProperty* temp = property_;
  if (GetArenaNoVirtual() != NULL) {
    temp = ::google::protobuf::internal::DuplicateIfNonNull(temp, NULL);
  }
  property_ = NULL;
  return temp;
}
inline ::google::cloud::vision::v1::TextAnnotation_TextProperty* Word::unsafe_arena_release_property() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.cloud.vision.v1.Word.property)
  
  ::google::cloud::vision::v1::TextAnnotation_TextProperty* temp = property_;
  property_ = NULL;
  return temp;
}
inline ::google::cloud::vision::v1::TextAnnotation_TextProperty* Word::mutable_property() {
  
  if (property_ == NULL) {
    _slow_mutable_property();
  }
  // @@protoc_insertion_point(field_mutable:google.cloud.vision.v1.Word.property)
  return property_;
}
inline void Word::set_allocated_property(::google::cloud::vision::v1::TextAnnotation_TextProperty* property) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete property_;
  }
  if (property) {
    ::google::protobuf::Arena* submessage_arena =
      ::google::protobuf::Arena::GetArena(property);
    if (message_arena != submessage_arena) {
      property = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, property, submessage_arena);
    }
    
  } else {
    
  }
  property_ = property;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.vision.v1.Word.property)
}

// .google.cloud.vision.v1.BoundingPoly bounding_box = 2;
inline bool Word::has_bounding_box() const {
  return this != internal_default_instance() && bounding_box_ != NULL;
}
inline const ::google::cloud::vision::v1::BoundingPoly& Word::bounding_box() const {
  const ::google::cloud::vision::v1::BoundingPoly* p = bounding_box_;
  // @@protoc_insertion_point(field_get:google.cloud.vision.v1.Word.bounding_box)
  return p != NULL ? *p : *reinterpret_cast<const ::google::cloud::vision::v1::BoundingPoly*>(
      &::google::cloud::vision::v1::_BoundingPoly_default_instance_);
}
inline ::google::cloud::vision::v1::BoundingPoly* Word::release_bounding_box() {
  // @@protoc_insertion_point(field_release:google.cloud.vision.v1.Word.bounding_box)
  
  ::google::cloud::vision::v1::BoundingPoly* temp = bounding_box_;
  if (GetArenaNoVirtual() != NULL) {
    temp = ::google::protobuf::internal::DuplicateIfNonNull(temp, NULL);
  }
  bounding_box_ = NULL;
  return temp;
}
inline ::google::cloud::vision::v1::BoundingPoly* Word::unsafe_arena_release_bounding_box() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.cloud.vision.v1.Word.bounding_box)
  
  ::google::cloud::vision::v1::BoundingPoly* temp = bounding_box_;
  bounding_box_ = NULL;
  return temp;
}
inline ::google::cloud::vision::v1::BoundingPoly* Word::mutable_bounding_box() {
  
  if (bounding_box_ == NULL) {
    _slow_mutable_bounding_box();
  }
  // @@protoc_insertion_point(field_mutable:google.cloud.vision.v1.Word.bounding_box)
  return bounding_box_;
}
inline void Word::set_allocated_bounding_box(::google::cloud::vision::v1::BoundingPoly* bounding_box) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(bounding_box_);
  }
  if (bounding_box) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast< ::google::protobuf::MessageLite*>(bounding_box)->GetArena();
    if (message_arena != submessage_arena) {
      bounding_box = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, bounding_box, submessage_arena);
    }
    
  } else {
    
  }
  bounding_box_ = bounding_box;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.vision.v1.Word.bounding_box)
}

// repeated .google.cloud.vision.v1.Symbol symbols = 3;
inline int Word::symbols_size() const {
  return symbols_.size();
}
inline void Word::clear_symbols() {
  symbols_.Clear();
}
inline const ::google::cloud::vision::v1::Symbol& Word::symbols(int index) const {
  // @@protoc_insertion_point(field_get:google.cloud.vision.v1.Word.symbols)
  return symbols_.Get(index);
}
inline ::google::cloud::vision::v1::Symbol* Word::mutable_symbols(int index) {
  // @@protoc_insertion_point(field_mutable:google.cloud.vision.v1.Word.symbols)
  return symbols_.Mutable(index);
}
inline ::google::cloud::vision::v1::Symbol* Word::add_symbols() {
  // @@protoc_insertion_point(field_add:google.cloud.vision.v1.Word.symbols)
  return symbols_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::google::cloud::vision::v1::Symbol >*
Word::mutable_symbols() {
  // @@protoc_insertion_point(field_mutable_list:google.cloud.vision.v1.Word.symbols)
  return &symbols_;
}
inline const ::google::protobuf::RepeatedPtrField< ::google::cloud::vision::v1::Symbol >&
Word::symbols() const {
  // @@protoc_insertion_point(field_list:google.cloud.vision.v1.Word.symbols)
  return symbols_;
}

// -------------------------------------------------------------------

// Symbol

// .google.cloud.vision.v1.TextAnnotation.TextProperty property = 1;
inline bool Symbol::has_property() const {
  return this != internal_default_instance() && property_ != NULL;
}
inline void Symbol::clear_property() {
  if (GetArenaNoVirtual() == NULL && property_ != NULL) {
    delete property_;
  }
  property_ = NULL;
}
inline const ::google::cloud::vision::v1::TextAnnotation_TextProperty& Symbol::property() const {
  const ::google::cloud::vision::v1::TextAnnotation_TextProperty* p = property_;
  // @@protoc_insertion_point(field_get:google.cloud.vision.v1.Symbol.property)
  return p != NULL ? *p : *reinterpret_cast<const ::google::cloud::vision::v1::TextAnnotation_TextProperty*>(
      &::google::cloud::vision::v1::_TextAnnotation_TextProperty_default_instance_);
}
inline ::google::cloud::vision::v1::TextAnnotation_TextProperty* Symbol::release_property() {
  // @@protoc_insertion_point(field_release:google.cloud.vision.v1.Symbol.property)
  
  ::google::cloud::vision::v1::TextAnnotation_TextProperty* temp = property_;
  if (GetArenaNoVirtual() != NULL) {
    temp = ::google::protobuf::internal::DuplicateIfNonNull(temp, NULL);
  }
  property_ = NULL;
  return temp;
}
inline ::google::cloud::vision::v1::TextAnnotation_TextProperty* Symbol::unsafe_arena_release_property() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.cloud.vision.v1.Symbol.property)
  
  ::google::cloud::vision::v1::TextAnnotation_TextProperty* temp = property_;
  property_ = NULL;
  return temp;
}
inline ::google::cloud::vision::v1::TextAnnotation_TextProperty* Symbol::mutable_property() {
  
  if (property_ == NULL) {
    _slow_mutable_property();
  }
  // @@protoc_insertion_point(field_mutable:google.cloud.vision.v1.Symbol.property)
  return property_;
}
inline void Symbol::set_allocated_property(::google::cloud::vision::v1::TextAnnotation_TextProperty* property) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete property_;
  }
  if (property) {
    ::google::protobuf::Arena* submessage_arena =
      ::google::protobuf::Arena::GetArena(property);
    if (message_arena != submessage_arena) {
      property = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, property, submessage_arena);
    }
    
  } else {
    
  }
  property_ = property;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.vision.v1.Symbol.property)
}

// .google.cloud.vision.v1.BoundingPoly bounding_box = 2;
inline bool Symbol::has_bounding_box() const {
  return this != internal_default_instance() && bounding_box_ != NULL;
}
inline const ::google::cloud::vision::v1::BoundingPoly& Symbol::bounding_box() const {
  const ::google::cloud::vision::v1::BoundingPoly* p = bounding_box_;
  // @@protoc_insertion_point(field_get:google.cloud.vision.v1.Symbol.bounding_box)
  return p != NULL ? *p : *reinterpret_cast<const ::google::cloud::vision::v1::BoundingPoly*>(
      &::google::cloud::vision::v1::_BoundingPoly_default_instance_);
}
inline ::google::cloud::vision::v1::BoundingPoly* Symbol::release_bounding_box() {
  // @@protoc_insertion_point(field_release:google.cloud.vision.v1.Symbol.bounding_box)
  
  ::google::cloud::vision::v1::BoundingPoly* temp = bounding_box_;
  if (GetArenaNoVirtual() != NULL) {
    temp = ::google::protobuf::internal::DuplicateIfNonNull(temp, NULL);
  }
  bounding_box_ = NULL;
  return temp;
}
inline ::google::cloud::vision::v1::BoundingPoly* Symbol::unsafe_arena_release_bounding_box() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.cloud.vision.v1.Symbol.bounding_box)
  
  ::google::cloud::vision::v1::BoundingPoly* temp = bounding_box_;
  bounding_box_ = NULL;
  return temp;
}
inline ::google::cloud::vision::v1::BoundingPoly* Symbol::mutable_bounding_box() {
  
  if (bounding_box_ == NULL) {
    _slow_mutable_bounding_box();
  }
  // @@protoc_insertion_point(field_mutable:google.cloud.vision.v1.Symbol.bounding_box)
  return bounding_box_;
}
inline void Symbol::set_allocated_bounding_box(::google::cloud::vision::v1::BoundingPoly* bounding_box) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(bounding_box_);
  }
  if (bounding_box) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast< ::google::protobuf::MessageLite*>(bounding_box)->GetArena();
    if (message_arena != submessage_arena) {
      bounding_box = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, bounding_box, submessage_arena);
    }
    
  } else {
    
  }
  bounding_box_ = bounding_box;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.vision.v1.Symbol.bounding_box)
}

// string text = 3;
inline void Symbol::clear_text() {
  text_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& Symbol::text() const {
  // @@protoc_insertion_point(field_get:google.cloud.vision.v1.Symbol.text)
  return text_.Get();
}
inline void Symbol::set_text(const ::std::string& value) {
  
  text_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.cloud.vision.v1.Symbol.text)
}
#if LANG_CXX11
inline void Symbol::set_text(::std::string&& value) {
  
  text_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.vision.v1.Symbol.text)
}
#endif
inline void Symbol::set_text(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  text_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.cloud.vision.v1.Symbol.text)
}
inline void Symbol::set_text(const char* value,
    size_t size) {
  
  text_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.cloud.vision.v1.Symbol.text)
}
inline ::std::string* Symbol::mutable_text() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.vision.v1.Symbol.text)
  return text_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* Symbol::release_text() {
  // @@protoc_insertion_point(field_release:google.cloud.vision.v1.Symbol.text)
  
  return text_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void Symbol::set_allocated_text(::std::string* text) {
  if (text != NULL) {
    
  } else {
    
  }
  text_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), text,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.cloud.vision.v1.Symbol.text)
}
inline ::std::string* Symbol::unsafe_arena_release_text() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.cloud.vision.v1.Symbol.text)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return text_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void Symbol::unsafe_arena_set_allocated_text(
    ::std::string* text) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (text != NULL) {
    
  } else {
    
  }
  text_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      text, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.vision.v1.Symbol.text)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace vision
}  // namespace cloud
}  // namespace google

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::google::cloud::vision::v1::TextAnnotation_DetectedBreak_BreakType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::google::cloud::vision::v1::TextAnnotation_DetectedBreak_BreakType>() {
  return ::google::cloud::vision::v1::TextAnnotation_DetectedBreak_BreakType_descriptor();
}
template <> struct is_proto_enum< ::google::cloud::vision::v1::Block_BlockType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::google::cloud::vision::v1::Block_BlockType>() {
  return ::google::cloud::vision::v1::Block_BlockType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_google_2fcloud_2fvision_2fv1_2ftext_5fannotation_2eproto__INCLUDED
