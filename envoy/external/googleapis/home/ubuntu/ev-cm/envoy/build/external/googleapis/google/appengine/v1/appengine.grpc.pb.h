// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: google/appengine/v1/appengine.proto
// Original file comments:
// Copyright 2016 Google Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
#ifndef GRPC_google_2fappengine_2fv1_2fappengine_2eproto__INCLUDED
#define GRPC_google_2fappengine_2fv1_2fappengine_2eproto__INCLUDED

#include "google/appengine/v1/appengine.pb.h"

#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace grpc {
class CompletionQueue;
class Channel;
class ServerCompletionQueue;
class ServerContext;
}  // namespace grpc

namespace google {
namespace appengine {
namespace v1 {

// Manages instances of a version.
class Instances final {
 public:
  static constexpr char const* service_full_name() {
    return "google.appengine.v1.Instances";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Lists the instances of a version.
    virtual ::grpc::Status ListInstances(::grpc::ClientContext* context, const ::google::appengine::v1::ListInstancesRequest& request, ::google::appengine::v1::ListInstancesResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::appengine::v1::ListInstancesResponse>> AsyncListInstances(::grpc::ClientContext* context, const ::google::appengine::v1::ListInstancesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::appengine::v1::ListInstancesResponse>>(AsyncListInstancesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::appengine::v1::ListInstancesResponse>> PrepareAsyncListInstances(::grpc::ClientContext* context, const ::google::appengine::v1::ListInstancesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::appengine::v1::ListInstancesResponse>>(PrepareAsyncListInstancesRaw(context, request, cq));
    }
    // Gets instance information.
    virtual ::grpc::Status GetInstance(::grpc::ClientContext* context, const ::google::appengine::v1::GetInstanceRequest& request, ::google::appengine::v1::Instance* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::appengine::v1::Instance>> AsyncGetInstance(::grpc::ClientContext* context, const ::google::appengine::v1::GetInstanceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::appengine::v1::Instance>>(AsyncGetInstanceRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::appengine::v1::Instance>> PrepareAsyncGetInstance(::grpc::ClientContext* context, const ::google::appengine::v1::GetInstanceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::appengine::v1::Instance>>(PrepareAsyncGetInstanceRaw(context, request, cq));
    }
    // Stops a running instance.
    virtual ::grpc::Status DeleteInstance(::grpc::ClientContext* context, const ::google::appengine::v1::DeleteInstanceRequest& request, ::google::longrunning::Operation* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::longrunning::Operation>> AsyncDeleteInstance(::grpc::ClientContext* context, const ::google::appengine::v1::DeleteInstanceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::longrunning::Operation>>(AsyncDeleteInstanceRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::longrunning::Operation>> PrepareAsyncDeleteInstance(::grpc::ClientContext* context, const ::google::appengine::v1::DeleteInstanceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::longrunning::Operation>>(PrepareAsyncDeleteInstanceRaw(context, request, cq));
    }
    // Enables debugging on a VM instance. This allows you to use the SSH
    // command to connect to the virtual machine where the instance lives.
    // While in "debug mode", the instance continues to serve live traffic.
    // You should delete the instance when you are done debugging and then
    // allow the system to take over and determine if another instance
    // should be started.
    //
    // Only applicable for instances in App Engine flexible environment.
    virtual ::grpc::Status DebugInstance(::grpc::ClientContext* context, const ::google::appengine::v1::DebugInstanceRequest& request, ::google::longrunning::Operation* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::longrunning::Operation>> AsyncDebugInstance(::grpc::ClientContext* context, const ::google::appengine::v1::DebugInstanceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::longrunning::Operation>>(AsyncDebugInstanceRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::longrunning::Operation>> PrepareAsyncDebugInstance(::grpc::ClientContext* context, const ::google::appengine::v1::DebugInstanceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::longrunning::Operation>>(PrepareAsyncDebugInstanceRaw(context, request, cq));
    }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::appengine::v1::ListInstancesResponse>* AsyncListInstancesRaw(::grpc::ClientContext* context, const ::google::appengine::v1::ListInstancesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::appengine::v1::ListInstancesResponse>* PrepareAsyncListInstancesRaw(::grpc::ClientContext* context, const ::google::appengine::v1::ListInstancesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::appengine::v1::Instance>* AsyncGetInstanceRaw(::grpc::ClientContext* context, const ::google::appengine::v1::GetInstanceRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::appengine::v1::Instance>* PrepareAsyncGetInstanceRaw(::grpc::ClientContext* context, const ::google::appengine::v1::GetInstanceRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::longrunning::Operation>* AsyncDeleteInstanceRaw(::grpc::ClientContext* context, const ::google::appengine::v1::DeleteInstanceRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::longrunning::Operation>* PrepareAsyncDeleteInstanceRaw(::grpc::ClientContext* context, const ::google::appengine::v1::DeleteInstanceRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::longrunning::Operation>* AsyncDebugInstanceRaw(::grpc::ClientContext* context, const ::google::appengine::v1::DebugInstanceRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::longrunning::Operation>* PrepareAsyncDebugInstanceRaw(::grpc::ClientContext* context, const ::google::appengine::v1::DebugInstanceRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status ListInstances(::grpc::ClientContext* context, const ::google::appengine::v1::ListInstancesRequest& request, ::google::appengine::v1::ListInstancesResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::appengine::v1::ListInstancesResponse>> AsyncListInstances(::grpc::ClientContext* context, const ::google::appengine::v1::ListInstancesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::appengine::v1::ListInstancesResponse>>(AsyncListInstancesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::appengine::v1::ListInstancesResponse>> PrepareAsyncListInstances(::grpc::ClientContext* context, const ::google::appengine::v1::ListInstancesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::appengine::v1::ListInstancesResponse>>(PrepareAsyncListInstancesRaw(context, request, cq));
    }
    ::grpc::Status GetInstance(::grpc::ClientContext* context, const ::google::appengine::v1::GetInstanceRequest& request, ::google::appengine::v1::Instance* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::appengine::v1::Instance>> AsyncGetInstance(::grpc::ClientContext* context, const ::google::appengine::v1::GetInstanceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::appengine::v1::Instance>>(AsyncGetInstanceRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::appengine::v1::Instance>> PrepareAsyncGetInstance(::grpc::ClientContext* context, const ::google::appengine::v1::GetInstanceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::appengine::v1::Instance>>(PrepareAsyncGetInstanceRaw(context, request, cq));
    }
    ::grpc::Status DeleteInstance(::grpc::ClientContext* context, const ::google::appengine::v1::DeleteInstanceRequest& request, ::google::longrunning::Operation* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::longrunning::Operation>> AsyncDeleteInstance(::grpc::ClientContext* context, const ::google::appengine::v1::DeleteInstanceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::longrunning::Operation>>(AsyncDeleteInstanceRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::longrunning::Operation>> PrepareAsyncDeleteInstance(::grpc::ClientContext* context, const ::google::appengine::v1::DeleteInstanceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::longrunning::Operation>>(PrepareAsyncDeleteInstanceRaw(context, request, cq));
    }
    ::grpc::Status DebugInstance(::grpc::ClientContext* context, const ::google::appengine::v1::DebugInstanceRequest& request, ::google::longrunning::Operation* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::longrunning::Operation>> AsyncDebugInstance(::grpc::ClientContext* context, const ::google::appengine::v1::DebugInstanceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::longrunning::Operation>>(AsyncDebugInstanceRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::longrunning::Operation>> PrepareAsyncDebugInstance(::grpc::ClientContext* context, const ::google::appengine::v1::DebugInstanceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::longrunning::Operation>>(PrepareAsyncDebugInstanceRaw(context, request, cq));
    }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    ::grpc::ClientAsyncResponseReader< ::google::appengine::v1::ListInstancesResponse>* AsyncListInstancesRaw(::grpc::ClientContext* context, const ::google::appengine::v1::ListInstancesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::appengine::v1::ListInstancesResponse>* PrepareAsyncListInstancesRaw(::grpc::ClientContext* context, const ::google::appengine::v1::ListInstancesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::appengine::v1::Instance>* AsyncGetInstanceRaw(::grpc::ClientContext* context, const ::google::appengine::v1::GetInstanceRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::appengine::v1::Instance>* PrepareAsyncGetInstanceRaw(::grpc::ClientContext* context, const ::google::appengine::v1::GetInstanceRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::longrunning::Operation>* AsyncDeleteInstanceRaw(::grpc::ClientContext* context, const ::google::appengine::v1::DeleteInstanceRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::longrunning::Operation>* PrepareAsyncDeleteInstanceRaw(::grpc::ClientContext* context, const ::google::appengine::v1::DeleteInstanceRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::longrunning::Operation>* AsyncDebugInstanceRaw(::grpc::ClientContext* context, const ::google::appengine::v1::DebugInstanceRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::longrunning::Operation>* PrepareAsyncDebugInstanceRaw(::grpc::ClientContext* context, const ::google::appengine::v1::DebugInstanceRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_ListInstances_;
    const ::grpc::internal::RpcMethod rpcmethod_GetInstance_;
    const ::grpc::internal::RpcMethod rpcmethod_DeleteInstance_;
    const ::grpc::internal::RpcMethod rpcmethod_DebugInstance_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Lists the instances of a version.
    virtual ::grpc::Status ListInstances(::grpc::ServerContext* context, const ::google::appengine::v1::ListInstancesRequest* request, ::google::appengine::v1::ListInstancesResponse* response);
    // Gets instance information.
    virtual ::grpc::Status GetInstance(::grpc::ServerContext* context, const ::google::appengine::v1::GetInstanceRequest* request, ::google::appengine::v1::Instance* response);
    // Stops a running instance.
    virtual ::grpc::Status DeleteInstance(::grpc::ServerContext* context, const ::google::appengine::v1::DeleteInstanceRequest* request, ::google::longrunning::Operation* response);
    // Enables debugging on a VM instance. This allows you to use the SSH
    // command to connect to the virtual machine where the instance lives.
    // While in "debug mode", the instance continues to serve live traffic.
    // You should delete the instance when you are done debugging and then
    // allow the system to take over and determine if another instance
    // should be started.
    //
    // Only applicable for instances in App Engine flexible environment.
    virtual ::grpc::Status DebugInstance(::grpc::ServerContext* context, const ::google::appengine::v1::DebugInstanceRequest* request, ::google::longrunning::Operation* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_ListInstances : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_ListInstances() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_ListInstances() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListInstances(::grpc::ServerContext* context, const ::google::appengine::v1::ListInstancesRequest* request, ::google::appengine::v1::ListInstancesResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListInstances(::grpc::ServerContext* context, ::google::appengine::v1::ListInstancesRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::appengine::v1::ListInstancesResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetInstance : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_GetInstance() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_GetInstance() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetInstance(::grpc::ServerContext* context, const ::google::appengine::v1::GetInstanceRequest* request, ::google::appengine::v1::Instance* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetInstance(::grpc::ServerContext* context, ::google::appengine::v1::GetInstanceRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::appengine::v1::Instance>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DeleteInstance : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_DeleteInstance() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_DeleteInstance() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteInstance(::grpc::ServerContext* context, const ::google::appengine::v1::DeleteInstanceRequest* request, ::google::longrunning::Operation* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteInstance(::grpc::ServerContext* context, ::google::appengine::v1::DeleteInstanceRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::longrunning::Operation>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DebugInstance : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_DebugInstance() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_DebugInstance() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DebugInstance(::grpc::ServerContext* context, const ::google::appengine::v1::DebugInstanceRequest* request, ::google::longrunning::Operation* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDebugInstance(::grpc::ServerContext* context, ::google::appengine::v1::DebugInstanceRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::longrunning::Operation>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_ListInstances<WithAsyncMethod_GetInstance<WithAsyncMethod_DeleteInstance<WithAsyncMethod_DebugInstance<Service > > > > AsyncService;
  template <class BaseClass>
  class WithGenericMethod_ListInstances : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_ListInstances() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_ListInstances() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListInstances(::grpc::ServerContext* context, const ::google::appengine::v1::ListInstancesRequest* request, ::google::appengine::v1::ListInstancesResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetInstance : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_GetInstance() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_GetInstance() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetInstance(::grpc::ServerContext* context, const ::google::appengine::v1::GetInstanceRequest* request, ::google::appengine::v1::Instance* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DeleteInstance : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_DeleteInstance() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_DeleteInstance() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteInstance(::grpc::ServerContext* context, const ::google::appengine::v1::DeleteInstanceRequest* request, ::google::longrunning::Operation* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DebugInstance : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_DebugInstance() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_DebugInstance() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DebugInstance(::grpc::ServerContext* context, const ::google::appengine::v1::DebugInstanceRequest* request, ::google::longrunning::Operation* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ListInstances : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_ListInstances() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler< ::google::appengine::v1::ListInstancesRequest, ::google::appengine::v1::ListInstancesResponse>(std::bind(&WithStreamedUnaryMethod_ListInstances<BaseClass>::StreamedListInstances, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_ListInstances() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ListInstances(::grpc::ServerContext* context, const ::google::appengine::v1::ListInstancesRequest* request, ::google::appengine::v1::ListInstancesResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedListInstances(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::appengine::v1::ListInstancesRequest,::google::appengine::v1::ListInstancesResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetInstance : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_GetInstance() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler< ::google::appengine::v1::GetInstanceRequest, ::google::appengine::v1::Instance>(std::bind(&WithStreamedUnaryMethod_GetInstance<BaseClass>::StreamedGetInstance, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetInstance() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetInstance(::grpc::ServerContext* context, const ::google::appengine::v1::GetInstanceRequest* request, ::google::appengine::v1::Instance* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetInstance(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::appengine::v1::GetInstanceRequest,::google::appengine::v1::Instance>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DeleteInstance : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_DeleteInstance() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler< ::google::appengine::v1::DeleteInstanceRequest, ::google::longrunning::Operation>(std::bind(&WithStreamedUnaryMethod_DeleteInstance<BaseClass>::StreamedDeleteInstance, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_DeleteInstance() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DeleteInstance(::grpc::ServerContext* context, const ::google::appengine::v1::DeleteInstanceRequest* request, ::google::longrunning::Operation* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDeleteInstance(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::appengine::v1::DeleteInstanceRequest,::google::longrunning::Operation>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DebugInstance : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_DebugInstance() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler< ::google::appengine::v1::DebugInstanceRequest, ::google::longrunning::Operation>(std::bind(&WithStreamedUnaryMethod_DebugInstance<BaseClass>::StreamedDebugInstance, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_DebugInstance() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DebugInstance(::grpc::ServerContext* context, const ::google::appengine::v1::DebugInstanceRequest* request, ::google::longrunning::Operation* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDebugInstance(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::appengine::v1::DebugInstanceRequest,::google::longrunning::Operation>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_ListInstances<WithStreamedUnaryMethod_GetInstance<WithStreamedUnaryMethod_DeleteInstance<WithStreamedUnaryMethod_DebugInstance<Service > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_ListInstances<WithStreamedUnaryMethod_GetInstance<WithStreamedUnaryMethod_DeleteInstance<WithStreamedUnaryMethod_DebugInstance<Service > > > > StreamedService;
};

// Manages versions of a service.
class Versions final {
 public:
  static constexpr char const* service_full_name() {
    return "google.appengine.v1.Versions";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Lists the versions of a service.
    virtual ::grpc::Status ListVersions(::grpc::ClientContext* context, const ::google::appengine::v1::ListVersionsRequest& request, ::google::appengine::v1::ListVersionsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::appengine::v1::ListVersionsResponse>> AsyncListVersions(::grpc::ClientContext* context, const ::google::appengine::v1::ListVersionsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::appengine::v1::ListVersionsResponse>>(AsyncListVersionsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::appengine::v1::ListVersionsResponse>> PrepareAsyncListVersions(::grpc::ClientContext* context, const ::google::appengine::v1::ListVersionsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::appengine::v1::ListVersionsResponse>>(PrepareAsyncListVersionsRaw(context, request, cq));
    }
    // Gets the specified Version resource.
    // By default, only a `BASIC_VIEW` will be returned.
    // Specify the `FULL_VIEW` parameter to get the full resource.
    virtual ::grpc::Status GetVersion(::grpc::ClientContext* context, const ::google::appengine::v1::GetVersionRequest& request, ::google::appengine::v1::Version* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::appengine::v1::Version>> AsyncGetVersion(::grpc::ClientContext* context, const ::google::appengine::v1::GetVersionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::appengine::v1::Version>>(AsyncGetVersionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::appengine::v1::Version>> PrepareAsyncGetVersion(::grpc::ClientContext* context, const ::google::appengine::v1::GetVersionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::appengine::v1::Version>>(PrepareAsyncGetVersionRaw(context, request, cq));
    }
    // Deploys code and resource files to a new version.
    virtual ::grpc::Status CreateVersion(::grpc::ClientContext* context, const ::google::appengine::v1::CreateVersionRequest& request, ::google::longrunning::Operation* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::longrunning::Operation>> AsyncCreateVersion(::grpc::ClientContext* context, const ::google::appengine::v1::CreateVersionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::longrunning::Operation>>(AsyncCreateVersionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::longrunning::Operation>> PrepareAsyncCreateVersion(::grpc::ClientContext* context, const ::google::appengine::v1::CreateVersionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::longrunning::Operation>>(PrepareAsyncCreateVersionRaw(context, request, cq));
    }
    // Updates the specified Version resource.
    // You can specify the following fields depending on the App Engine
    // environment and type of scaling that the version resource uses:
    //
    // * [`serving_status`](https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions#Version.FIELDS.serving_status):
    //   For Version resources that use basic scaling, manual scaling, or run in
    //   the App Engine flexible environment.
    // * [`instance_class`](https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions#Version.FIELDS.instance_class):
    //   For Version resources that run in the App Engine standard environment.
    // * [`automatic_scaling.min_idle_instances`](https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions#Version.FIELDS.automatic_scaling):
    //   For Version resources that use automatic scaling and run in the App
    //   Engine standard environment.
    // * [`automatic_scaling.max_idle_instances`](https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions#Version.FIELDS.automatic_scaling):
    //   For Version resources that use automatic scaling and run in the App
    //   Engine standard environment.
    virtual ::grpc::Status UpdateVersion(::grpc::ClientContext* context, const ::google::appengine::v1::UpdateVersionRequest& request, ::google::longrunning::Operation* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::longrunning::Operation>> AsyncUpdateVersion(::grpc::ClientContext* context, const ::google::appengine::v1::UpdateVersionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::longrunning::Operation>>(AsyncUpdateVersionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::longrunning::Operation>> PrepareAsyncUpdateVersion(::grpc::ClientContext* context, const ::google::appengine::v1::UpdateVersionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::longrunning::Operation>>(PrepareAsyncUpdateVersionRaw(context, request, cq));
    }
    // Deletes an existing Version resource.
    virtual ::grpc::Status DeleteVersion(::grpc::ClientContext* context, const ::google::appengine::v1::DeleteVersionRequest& request, ::google::longrunning::Operation* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::longrunning::Operation>> AsyncDeleteVersion(::grpc::ClientContext* context, const ::google::appengine::v1::DeleteVersionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::longrunning::Operation>>(AsyncDeleteVersionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::longrunning::Operation>> PrepareAsyncDeleteVersion(::grpc::ClientContext* context, const ::google::appengine::v1::DeleteVersionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::longrunning::Operation>>(PrepareAsyncDeleteVersionRaw(context, request, cq));
    }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::appengine::v1::ListVersionsResponse>* AsyncListVersionsRaw(::grpc::ClientContext* context, const ::google::appengine::v1::ListVersionsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::appengine::v1::ListVersionsResponse>* PrepareAsyncListVersionsRaw(::grpc::ClientContext* context, const ::google::appengine::v1::ListVersionsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::appengine::v1::Version>* AsyncGetVersionRaw(::grpc::ClientContext* context, const ::google::appengine::v1::GetVersionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::appengine::v1::Version>* PrepareAsyncGetVersionRaw(::grpc::ClientContext* context, const ::google::appengine::v1::GetVersionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::longrunning::Operation>* AsyncCreateVersionRaw(::grpc::ClientContext* context, const ::google::appengine::v1::CreateVersionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::longrunning::Operation>* PrepareAsyncCreateVersionRaw(::grpc::ClientContext* context, const ::google::appengine::v1::CreateVersionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::longrunning::Operation>* AsyncUpdateVersionRaw(::grpc::ClientContext* context, const ::google::appengine::v1::UpdateVersionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::longrunning::Operation>* PrepareAsyncUpdateVersionRaw(::grpc::ClientContext* context, const ::google::appengine::v1::UpdateVersionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::longrunning::Operation>* AsyncDeleteVersionRaw(::grpc::ClientContext* context, const ::google::appengine::v1::DeleteVersionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::longrunning::Operation>* PrepareAsyncDeleteVersionRaw(::grpc::ClientContext* context, const ::google::appengine::v1::DeleteVersionRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status ListVersions(::grpc::ClientContext* context, const ::google::appengine::v1::ListVersionsRequest& request, ::google::appengine::v1::ListVersionsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::appengine::v1::ListVersionsResponse>> AsyncListVersions(::grpc::ClientContext* context, const ::google::appengine::v1::ListVersionsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::appengine::v1::ListVersionsResponse>>(AsyncListVersionsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::appengine::v1::ListVersionsResponse>> PrepareAsyncListVersions(::grpc::ClientContext* context, const ::google::appengine::v1::ListVersionsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::appengine::v1::ListVersionsResponse>>(PrepareAsyncListVersionsRaw(context, request, cq));
    }
    ::grpc::Status GetVersion(::grpc::ClientContext* context, const ::google::appengine::v1::GetVersionRequest& request, ::google::appengine::v1::Version* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::appengine::v1::Version>> AsyncGetVersion(::grpc::ClientContext* context, const ::google::appengine::v1::GetVersionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::appengine::v1::Version>>(AsyncGetVersionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::appengine::v1::Version>> PrepareAsyncGetVersion(::grpc::ClientContext* context, const ::google::appengine::v1::GetVersionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::appengine::v1::Version>>(PrepareAsyncGetVersionRaw(context, request, cq));
    }
    ::grpc::Status CreateVersion(::grpc::ClientContext* context, const ::google::appengine::v1::CreateVersionRequest& request, ::google::longrunning::Operation* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::longrunning::Operation>> AsyncCreateVersion(::grpc::ClientContext* context, const ::google::appengine::v1::CreateVersionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::longrunning::Operation>>(AsyncCreateVersionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::longrunning::Operation>> PrepareAsyncCreateVersion(::grpc::ClientContext* context, const ::google::appengine::v1::CreateVersionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::longrunning::Operation>>(PrepareAsyncCreateVersionRaw(context, request, cq));
    }
    ::grpc::Status UpdateVersion(::grpc::ClientContext* context, const ::google::appengine::v1::UpdateVersionRequest& request, ::google::longrunning::Operation* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::longrunning::Operation>> AsyncUpdateVersion(::grpc::ClientContext* context, const ::google::appengine::v1::UpdateVersionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::longrunning::Operation>>(AsyncUpdateVersionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::longrunning::Operation>> PrepareAsyncUpdateVersion(::grpc::ClientContext* context, const ::google::appengine::v1::UpdateVersionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::longrunning::Operation>>(PrepareAsyncUpdateVersionRaw(context, request, cq));
    }
    ::grpc::Status DeleteVersion(::grpc::ClientContext* context, const ::google::appengine::v1::DeleteVersionRequest& request, ::google::longrunning::Operation* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::longrunning::Operation>> AsyncDeleteVersion(::grpc::ClientContext* context, const ::google::appengine::v1::DeleteVersionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::longrunning::Operation>>(AsyncDeleteVersionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::longrunning::Operation>> PrepareAsyncDeleteVersion(::grpc::ClientContext* context, const ::google::appengine::v1::DeleteVersionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::longrunning::Operation>>(PrepareAsyncDeleteVersionRaw(context, request, cq));
    }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    ::grpc::ClientAsyncResponseReader< ::google::appengine::v1::ListVersionsResponse>* AsyncListVersionsRaw(::grpc::ClientContext* context, const ::google::appengine::v1::ListVersionsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::appengine::v1::ListVersionsResponse>* PrepareAsyncListVersionsRaw(::grpc::ClientContext* context, const ::google::appengine::v1::ListVersionsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::appengine::v1::Version>* AsyncGetVersionRaw(::grpc::ClientContext* context, const ::google::appengine::v1::GetVersionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::appengine::v1::Version>* PrepareAsyncGetVersionRaw(::grpc::ClientContext* context, const ::google::appengine::v1::GetVersionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::longrunning::Operation>* AsyncCreateVersionRaw(::grpc::ClientContext* context, const ::google::appengine::v1::CreateVersionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::longrunning::Operation>* PrepareAsyncCreateVersionRaw(::grpc::ClientContext* context, const ::google::appengine::v1::CreateVersionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::longrunning::Operation>* AsyncUpdateVersionRaw(::grpc::ClientContext* context, const ::google::appengine::v1::UpdateVersionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::longrunning::Operation>* PrepareAsyncUpdateVersionRaw(::grpc::ClientContext* context, const ::google::appengine::v1::UpdateVersionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::longrunning::Operation>* AsyncDeleteVersionRaw(::grpc::ClientContext* context, const ::google::appengine::v1::DeleteVersionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::longrunning::Operation>* PrepareAsyncDeleteVersionRaw(::grpc::ClientContext* context, const ::google::appengine::v1::DeleteVersionRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_ListVersions_;
    const ::grpc::internal::RpcMethod rpcmethod_GetVersion_;
    const ::grpc::internal::RpcMethod rpcmethod_CreateVersion_;
    const ::grpc::internal::RpcMethod rpcmethod_UpdateVersion_;
    const ::grpc::internal::RpcMethod rpcmethod_DeleteVersion_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Lists the versions of a service.
    virtual ::grpc::Status ListVersions(::grpc::ServerContext* context, const ::google::appengine::v1::ListVersionsRequest* request, ::google::appengine::v1::ListVersionsResponse* response);
    // Gets the specified Version resource.
    // By default, only a `BASIC_VIEW` will be returned.
    // Specify the `FULL_VIEW` parameter to get the full resource.
    virtual ::grpc::Status GetVersion(::grpc::ServerContext* context, const ::google::appengine::v1::GetVersionRequest* request, ::google::appengine::v1::Version* response);
    // Deploys code and resource files to a new version.
    virtual ::grpc::Status CreateVersion(::grpc::ServerContext* context, const ::google::appengine::v1::CreateVersionRequest* request, ::google::longrunning::Operation* response);
    // Updates the specified Version resource.
    // You can specify the following fields depending on the App Engine
    // environment and type of scaling that the version resource uses:
    //
    // * [`serving_status`](https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions#Version.FIELDS.serving_status):
    //   For Version resources that use basic scaling, manual scaling, or run in
    //   the App Engine flexible environment.
    // * [`instance_class`](https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions#Version.FIELDS.instance_class):
    //   For Version resources that run in the App Engine standard environment.
    // * [`automatic_scaling.min_idle_instances`](https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions#Version.FIELDS.automatic_scaling):
    //   For Version resources that use automatic scaling and run in the App
    //   Engine standard environment.
    // * [`automatic_scaling.max_idle_instances`](https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions#Version.FIELDS.automatic_scaling):
    //   For Version resources that use automatic scaling and run in the App
    //   Engine standard environment.
    virtual ::grpc::Status UpdateVersion(::grpc::ServerContext* context, const ::google::appengine::v1::UpdateVersionRequest* request, ::google::longrunning::Operation* response);
    // Deletes an existing Version resource.
    virtual ::grpc::Status DeleteVersion(::grpc::ServerContext* context, const ::google::appengine::v1::DeleteVersionRequest* request, ::google::longrunning::Operation* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_ListVersions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_ListVersions() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_ListVersions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListVersions(::grpc::ServerContext* context, const ::google::appengine::v1::ListVersionsRequest* request, ::google::appengine::v1::ListVersionsResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListVersions(::grpc::ServerContext* context, ::google::appengine::v1::ListVersionsRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::appengine::v1::ListVersionsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetVersion : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_GetVersion() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_GetVersion() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetVersion(::grpc::ServerContext* context, const ::google::appengine::v1::GetVersionRequest* request, ::google::appengine::v1::Version* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetVersion(::grpc::ServerContext* context, ::google::appengine::v1::GetVersionRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::appengine::v1::Version>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_CreateVersion : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_CreateVersion() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_CreateVersion() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateVersion(::grpc::ServerContext* context, const ::google::appengine::v1::CreateVersionRequest* request, ::google::longrunning::Operation* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateVersion(::grpc::ServerContext* context, ::google::appengine::v1::CreateVersionRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::longrunning::Operation>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_UpdateVersion : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_UpdateVersion() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_UpdateVersion() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateVersion(::grpc::ServerContext* context, const ::google::appengine::v1::UpdateVersionRequest* request, ::google::longrunning::Operation* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateVersion(::grpc::ServerContext* context, ::google::appengine::v1::UpdateVersionRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::longrunning::Operation>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DeleteVersion : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_DeleteVersion() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_DeleteVersion() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteVersion(::grpc::ServerContext* context, const ::google::appengine::v1::DeleteVersionRequest* request, ::google::longrunning::Operation* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteVersion(::grpc::ServerContext* context, ::google::appengine::v1::DeleteVersionRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::longrunning::Operation>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_ListVersions<WithAsyncMethod_GetVersion<WithAsyncMethod_CreateVersion<WithAsyncMethod_UpdateVersion<WithAsyncMethod_DeleteVersion<Service > > > > > AsyncService;
  template <class BaseClass>
  class WithGenericMethod_ListVersions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_ListVersions() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_ListVersions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListVersions(::grpc::ServerContext* context, const ::google::appengine::v1::ListVersionsRequest* request, ::google::appengine::v1::ListVersionsResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetVersion : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_GetVersion() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_GetVersion() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetVersion(::grpc::ServerContext* context, const ::google::appengine::v1::GetVersionRequest* request, ::google::appengine::v1::Version* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_CreateVersion : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_CreateVersion() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_CreateVersion() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateVersion(::grpc::ServerContext* context, const ::google::appengine::v1::CreateVersionRequest* request, ::google::longrunning::Operation* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_UpdateVersion : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_UpdateVersion() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_UpdateVersion() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateVersion(::grpc::ServerContext* context, const ::google::appengine::v1::UpdateVersionRequest* request, ::google::longrunning::Operation* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DeleteVersion : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_DeleteVersion() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_DeleteVersion() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteVersion(::grpc::ServerContext* context, const ::google::appengine::v1::DeleteVersionRequest* request, ::google::longrunning::Operation* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ListVersions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_ListVersions() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler< ::google::appengine::v1::ListVersionsRequest, ::google::appengine::v1::ListVersionsResponse>(std::bind(&WithStreamedUnaryMethod_ListVersions<BaseClass>::StreamedListVersions, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_ListVersions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ListVersions(::grpc::ServerContext* context, const ::google::appengine::v1::ListVersionsRequest* request, ::google::appengine::v1::ListVersionsResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedListVersions(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::appengine::v1::ListVersionsRequest,::google::appengine::v1::ListVersionsResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetVersion : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_GetVersion() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler< ::google::appengine::v1::GetVersionRequest, ::google::appengine::v1::Version>(std::bind(&WithStreamedUnaryMethod_GetVersion<BaseClass>::StreamedGetVersion, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetVersion() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetVersion(::grpc::ServerContext* context, const ::google::appengine::v1::GetVersionRequest* request, ::google::appengine::v1::Version* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetVersion(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::appengine::v1::GetVersionRequest,::google::appengine::v1::Version>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CreateVersion : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_CreateVersion() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler< ::google::appengine::v1::CreateVersionRequest, ::google::longrunning::Operation>(std::bind(&WithStreamedUnaryMethod_CreateVersion<BaseClass>::StreamedCreateVersion, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_CreateVersion() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CreateVersion(::grpc::ServerContext* context, const ::google::appengine::v1::CreateVersionRequest* request, ::google::longrunning::Operation* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCreateVersion(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::appengine::v1::CreateVersionRequest,::google::longrunning::Operation>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_UpdateVersion : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_UpdateVersion() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler< ::google::appengine::v1::UpdateVersionRequest, ::google::longrunning::Operation>(std::bind(&WithStreamedUnaryMethod_UpdateVersion<BaseClass>::StreamedUpdateVersion, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_UpdateVersion() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status UpdateVersion(::grpc::ServerContext* context, const ::google::appengine::v1::UpdateVersionRequest* request, ::google::longrunning::Operation* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedUpdateVersion(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::appengine::v1::UpdateVersionRequest,::google::longrunning::Operation>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DeleteVersion : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_DeleteVersion() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler< ::google::appengine::v1::DeleteVersionRequest, ::google::longrunning::Operation>(std::bind(&WithStreamedUnaryMethod_DeleteVersion<BaseClass>::StreamedDeleteVersion, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_DeleteVersion() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DeleteVersion(::grpc::ServerContext* context, const ::google::appengine::v1::DeleteVersionRequest* request, ::google::longrunning::Operation* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDeleteVersion(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::appengine::v1::DeleteVersionRequest,::google::longrunning::Operation>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_ListVersions<WithStreamedUnaryMethod_GetVersion<WithStreamedUnaryMethod_CreateVersion<WithStreamedUnaryMethod_UpdateVersion<WithStreamedUnaryMethod_DeleteVersion<Service > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_ListVersions<WithStreamedUnaryMethod_GetVersion<WithStreamedUnaryMethod_CreateVersion<WithStreamedUnaryMethod_UpdateVersion<WithStreamedUnaryMethod_DeleteVersion<Service > > > > > StreamedService;
};

// Manages services of an application.
class Services final {
 public:
  static constexpr char const* service_full_name() {
    return "google.appengine.v1.Services";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Lists all the services in the application.
    virtual ::grpc::Status ListServices(::grpc::ClientContext* context, const ::google::appengine::v1::ListServicesRequest& request, ::google::appengine::v1::ListServicesResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::appengine::v1::ListServicesResponse>> AsyncListServices(::grpc::ClientContext* context, const ::google::appengine::v1::ListServicesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::appengine::v1::ListServicesResponse>>(AsyncListServicesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::appengine::v1::ListServicesResponse>> PrepareAsyncListServices(::grpc::ClientContext* context, const ::google::appengine::v1::ListServicesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::appengine::v1::ListServicesResponse>>(PrepareAsyncListServicesRaw(context, request, cq));
    }
    // Gets the current configuration of the specified service.
    virtual ::grpc::Status GetService(::grpc::ClientContext* context, const ::google::appengine::v1::GetServiceRequest& request, ::google::appengine::v1::Service* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::appengine::v1::Service>> AsyncGetService(::grpc::ClientContext* context, const ::google::appengine::v1::GetServiceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::appengine::v1::Service>>(AsyncGetServiceRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::appengine::v1::Service>> PrepareAsyncGetService(::grpc::ClientContext* context, const ::google::appengine::v1::GetServiceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::appengine::v1::Service>>(PrepareAsyncGetServiceRaw(context, request, cq));
    }
    // Updates the configuration of the specified service.
    virtual ::grpc::Status UpdateService(::grpc::ClientContext* context, const ::google::appengine::v1::UpdateServiceRequest& request, ::google::longrunning::Operation* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::longrunning::Operation>> AsyncUpdateService(::grpc::ClientContext* context, const ::google::appengine::v1::UpdateServiceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::longrunning::Operation>>(AsyncUpdateServiceRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::longrunning::Operation>> PrepareAsyncUpdateService(::grpc::ClientContext* context, const ::google::appengine::v1::UpdateServiceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::longrunning::Operation>>(PrepareAsyncUpdateServiceRaw(context, request, cq));
    }
    // Deletes the specified service and all enclosed versions.
    virtual ::grpc::Status DeleteService(::grpc::ClientContext* context, const ::google::appengine::v1::DeleteServiceRequest& request, ::google::longrunning::Operation* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::longrunning::Operation>> AsyncDeleteService(::grpc::ClientContext* context, const ::google::appengine::v1::DeleteServiceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::longrunning::Operation>>(AsyncDeleteServiceRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::longrunning::Operation>> PrepareAsyncDeleteService(::grpc::ClientContext* context, const ::google::appengine::v1::DeleteServiceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::longrunning::Operation>>(PrepareAsyncDeleteServiceRaw(context, request, cq));
    }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::appengine::v1::ListServicesResponse>* AsyncListServicesRaw(::grpc::ClientContext* context, const ::google::appengine::v1::ListServicesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::appengine::v1::ListServicesResponse>* PrepareAsyncListServicesRaw(::grpc::ClientContext* context, const ::google::appengine::v1::ListServicesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::appengine::v1::Service>* AsyncGetServiceRaw(::grpc::ClientContext* context, const ::google::appengine::v1::GetServiceRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::appengine::v1::Service>* PrepareAsyncGetServiceRaw(::grpc::ClientContext* context, const ::google::appengine::v1::GetServiceRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::longrunning::Operation>* AsyncUpdateServiceRaw(::grpc::ClientContext* context, const ::google::appengine::v1::UpdateServiceRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::longrunning::Operation>* PrepareAsyncUpdateServiceRaw(::grpc::ClientContext* context, const ::google::appengine::v1::UpdateServiceRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::longrunning::Operation>* AsyncDeleteServiceRaw(::grpc::ClientContext* context, const ::google::appengine::v1::DeleteServiceRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::longrunning::Operation>* PrepareAsyncDeleteServiceRaw(::grpc::ClientContext* context, const ::google::appengine::v1::DeleteServiceRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status ListServices(::grpc::ClientContext* context, const ::google::appengine::v1::ListServicesRequest& request, ::google::appengine::v1::ListServicesResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::appengine::v1::ListServicesResponse>> AsyncListServices(::grpc::ClientContext* context, const ::google::appengine::v1::ListServicesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::appengine::v1::ListServicesResponse>>(AsyncListServicesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::appengine::v1::ListServicesResponse>> PrepareAsyncListServices(::grpc::ClientContext* context, const ::google::appengine::v1::ListServicesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::appengine::v1::ListServicesResponse>>(PrepareAsyncListServicesRaw(context, request, cq));
    }
    ::grpc::Status GetService(::grpc::ClientContext* context, const ::google::appengine::v1::GetServiceRequest& request, ::google::appengine::v1::Service* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::appengine::v1::Service>> AsyncGetService(::grpc::ClientContext* context, const ::google::appengine::v1::GetServiceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::appengine::v1::Service>>(AsyncGetServiceRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::appengine::v1::Service>> PrepareAsyncGetService(::grpc::ClientContext* context, const ::google::appengine::v1::GetServiceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::appengine::v1::Service>>(PrepareAsyncGetServiceRaw(context, request, cq));
    }
    ::grpc::Status UpdateService(::grpc::ClientContext* context, const ::google::appengine::v1::UpdateServiceRequest& request, ::google::longrunning::Operation* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::longrunning::Operation>> AsyncUpdateService(::grpc::ClientContext* context, const ::google::appengine::v1::UpdateServiceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::longrunning::Operation>>(AsyncUpdateServiceRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::longrunning::Operation>> PrepareAsyncUpdateService(::grpc::ClientContext* context, const ::google::appengine::v1::UpdateServiceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::longrunning::Operation>>(PrepareAsyncUpdateServiceRaw(context, request, cq));
    }
    ::grpc::Status DeleteService(::grpc::ClientContext* context, const ::google::appengine::v1::DeleteServiceRequest& request, ::google::longrunning::Operation* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::longrunning::Operation>> AsyncDeleteService(::grpc::ClientContext* context, const ::google::appengine::v1::DeleteServiceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::longrunning::Operation>>(AsyncDeleteServiceRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::longrunning::Operation>> PrepareAsyncDeleteService(::grpc::ClientContext* context, const ::google::appengine::v1::DeleteServiceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::longrunning::Operation>>(PrepareAsyncDeleteServiceRaw(context, request, cq));
    }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    ::grpc::ClientAsyncResponseReader< ::google::appengine::v1::ListServicesResponse>* AsyncListServicesRaw(::grpc::ClientContext* context, const ::google::appengine::v1::ListServicesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::appengine::v1::ListServicesResponse>* PrepareAsyncListServicesRaw(::grpc::ClientContext* context, const ::google::appengine::v1::ListServicesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::appengine::v1::Service>* AsyncGetServiceRaw(::grpc::ClientContext* context, const ::google::appengine::v1::GetServiceRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::appengine::v1::Service>* PrepareAsyncGetServiceRaw(::grpc::ClientContext* context, const ::google::appengine::v1::GetServiceRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::longrunning::Operation>* AsyncUpdateServiceRaw(::grpc::ClientContext* context, const ::google::appengine::v1::UpdateServiceRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::longrunning::Operation>* PrepareAsyncUpdateServiceRaw(::grpc::ClientContext* context, const ::google::appengine::v1::UpdateServiceRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::longrunning::Operation>* AsyncDeleteServiceRaw(::grpc::ClientContext* context, const ::google::appengine::v1::DeleteServiceRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::longrunning::Operation>* PrepareAsyncDeleteServiceRaw(::grpc::ClientContext* context, const ::google::appengine::v1::DeleteServiceRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_ListServices_;
    const ::grpc::internal::RpcMethod rpcmethod_GetService_;
    const ::grpc::internal::RpcMethod rpcmethod_UpdateService_;
    const ::grpc::internal::RpcMethod rpcmethod_DeleteService_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Lists all the services in the application.
    virtual ::grpc::Status ListServices(::grpc::ServerContext* context, const ::google::appengine::v1::ListServicesRequest* request, ::google::appengine::v1::ListServicesResponse* response);
    // Gets the current configuration of the specified service.
    virtual ::grpc::Status GetService(::grpc::ServerContext* context, const ::google::appengine::v1::GetServiceRequest* request, ::google::appengine::v1::Service* response);
    // Updates the configuration of the specified service.
    virtual ::grpc::Status UpdateService(::grpc::ServerContext* context, const ::google::appengine::v1::UpdateServiceRequest* request, ::google::longrunning::Operation* response);
    // Deletes the specified service and all enclosed versions.
    virtual ::grpc::Status DeleteService(::grpc::ServerContext* context, const ::google::appengine::v1::DeleteServiceRequest* request, ::google::longrunning::Operation* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_ListServices : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_ListServices() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_ListServices() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListServices(::grpc::ServerContext* context, const ::google::appengine::v1::ListServicesRequest* request, ::google::appengine::v1::ListServicesResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListServices(::grpc::ServerContext* context, ::google::appengine::v1::ListServicesRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::appengine::v1::ListServicesResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetService : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_GetService() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_GetService() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetService(::grpc::ServerContext* context, const ::google::appengine::v1::GetServiceRequest* request, ::google::appengine::v1::Service* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetService(::grpc::ServerContext* context, ::google::appengine::v1::GetServiceRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::appengine::v1::Service>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_UpdateService : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_UpdateService() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_UpdateService() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateService(::grpc::ServerContext* context, const ::google::appengine::v1::UpdateServiceRequest* request, ::google::longrunning::Operation* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateService(::grpc::ServerContext* context, ::google::appengine::v1::UpdateServiceRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::longrunning::Operation>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DeleteService : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_DeleteService() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_DeleteService() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteService(::grpc::ServerContext* context, const ::google::appengine::v1::DeleteServiceRequest* request, ::google::longrunning::Operation* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteService(::grpc::ServerContext* context, ::google::appengine::v1::DeleteServiceRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::longrunning::Operation>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_ListServices<WithAsyncMethod_GetService<WithAsyncMethod_UpdateService<WithAsyncMethod_DeleteService<Service > > > > AsyncService;
  template <class BaseClass>
  class WithGenericMethod_ListServices : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_ListServices() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_ListServices() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListServices(::grpc::ServerContext* context, const ::google::appengine::v1::ListServicesRequest* request, ::google::appengine::v1::ListServicesResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetService : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_GetService() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_GetService() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetService(::grpc::ServerContext* context, const ::google::appengine::v1::GetServiceRequest* request, ::google::appengine::v1::Service* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_UpdateService : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_UpdateService() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_UpdateService() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateService(::grpc::ServerContext* context, const ::google::appengine::v1::UpdateServiceRequest* request, ::google::longrunning::Operation* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DeleteService : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_DeleteService() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_DeleteService() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteService(::grpc::ServerContext* context, const ::google::appengine::v1::DeleteServiceRequest* request, ::google::longrunning::Operation* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ListServices : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_ListServices() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler< ::google::appengine::v1::ListServicesRequest, ::google::appengine::v1::ListServicesResponse>(std::bind(&WithStreamedUnaryMethod_ListServices<BaseClass>::StreamedListServices, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_ListServices() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ListServices(::grpc::ServerContext* context, const ::google::appengine::v1::ListServicesRequest* request, ::google::appengine::v1::ListServicesResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedListServices(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::appengine::v1::ListServicesRequest,::google::appengine::v1::ListServicesResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetService : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_GetService() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler< ::google::appengine::v1::GetServiceRequest, ::google::appengine::v1::Service>(std::bind(&WithStreamedUnaryMethod_GetService<BaseClass>::StreamedGetService, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetService() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetService(::grpc::ServerContext* context, const ::google::appengine::v1::GetServiceRequest* request, ::google::appengine::v1::Service* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetService(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::appengine::v1::GetServiceRequest,::google::appengine::v1::Service>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_UpdateService : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_UpdateService() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler< ::google::appengine::v1::UpdateServiceRequest, ::google::longrunning::Operation>(std::bind(&WithStreamedUnaryMethod_UpdateService<BaseClass>::StreamedUpdateService, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_UpdateService() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status UpdateService(::grpc::ServerContext* context, const ::google::appengine::v1::UpdateServiceRequest* request, ::google::longrunning::Operation* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedUpdateService(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::appengine::v1::UpdateServiceRequest,::google::longrunning::Operation>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DeleteService : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_DeleteService() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler< ::google::appengine::v1::DeleteServiceRequest, ::google::longrunning::Operation>(std::bind(&WithStreamedUnaryMethod_DeleteService<BaseClass>::StreamedDeleteService, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_DeleteService() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DeleteService(::grpc::ServerContext* context, const ::google::appengine::v1::DeleteServiceRequest* request, ::google::longrunning::Operation* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDeleteService(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::appengine::v1::DeleteServiceRequest,::google::longrunning::Operation>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_ListServices<WithStreamedUnaryMethod_GetService<WithStreamedUnaryMethod_UpdateService<WithStreamedUnaryMethod_DeleteService<Service > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_ListServices<WithStreamedUnaryMethod_GetService<WithStreamedUnaryMethod_UpdateService<WithStreamedUnaryMethod_DeleteService<Service > > > > StreamedService;
};

// Manages App Engine applications.
class Applications final {
 public:
  static constexpr char const* service_full_name() {
    return "google.appengine.v1.Applications";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Gets information about an application.
    virtual ::grpc::Status GetApplication(::grpc::ClientContext* context, const ::google::appengine::v1::GetApplicationRequest& request, ::google::appengine::v1::Application* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::appengine::v1::Application>> AsyncGetApplication(::grpc::ClientContext* context, const ::google::appengine::v1::GetApplicationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::appengine::v1::Application>>(AsyncGetApplicationRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::appengine::v1::Application>> PrepareAsyncGetApplication(::grpc::ClientContext* context, const ::google::appengine::v1::GetApplicationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::appengine::v1::Application>>(PrepareAsyncGetApplicationRaw(context, request, cq));
    }
    // Recreates the required App Engine features for the application in your
    // project, for example a Cloud Storage bucket or App Engine service account.
    // Use this method if you receive an error message about a missing feature,
    // for example "*Error retrieving the App Engine service account*".
    virtual ::grpc::Status RepairApplication(::grpc::ClientContext* context, const ::google::appengine::v1::RepairApplicationRequest& request, ::google::longrunning::Operation* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::longrunning::Operation>> AsyncRepairApplication(::grpc::ClientContext* context, const ::google::appengine::v1::RepairApplicationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::longrunning::Operation>>(AsyncRepairApplicationRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::longrunning::Operation>> PrepareAsyncRepairApplication(::grpc::ClientContext* context, const ::google::appengine::v1::RepairApplicationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::longrunning::Operation>>(PrepareAsyncRepairApplicationRaw(context, request, cq));
    }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::appengine::v1::Application>* AsyncGetApplicationRaw(::grpc::ClientContext* context, const ::google::appengine::v1::GetApplicationRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::appengine::v1::Application>* PrepareAsyncGetApplicationRaw(::grpc::ClientContext* context, const ::google::appengine::v1::GetApplicationRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::longrunning::Operation>* AsyncRepairApplicationRaw(::grpc::ClientContext* context, const ::google::appengine::v1::RepairApplicationRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::longrunning::Operation>* PrepareAsyncRepairApplicationRaw(::grpc::ClientContext* context, const ::google::appengine::v1::RepairApplicationRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status GetApplication(::grpc::ClientContext* context, const ::google::appengine::v1::GetApplicationRequest& request, ::google::appengine::v1::Application* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::appengine::v1::Application>> AsyncGetApplication(::grpc::ClientContext* context, const ::google::appengine::v1::GetApplicationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::appengine::v1::Application>>(AsyncGetApplicationRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::appengine::v1::Application>> PrepareAsyncGetApplication(::grpc::ClientContext* context, const ::google::appengine::v1::GetApplicationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::appengine::v1::Application>>(PrepareAsyncGetApplicationRaw(context, request, cq));
    }
    ::grpc::Status RepairApplication(::grpc::ClientContext* context, const ::google::appengine::v1::RepairApplicationRequest& request, ::google::longrunning::Operation* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::longrunning::Operation>> AsyncRepairApplication(::grpc::ClientContext* context, const ::google::appengine::v1::RepairApplicationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::longrunning::Operation>>(AsyncRepairApplicationRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::longrunning::Operation>> PrepareAsyncRepairApplication(::grpc::ClientContext* context, const ::google::appengine::v1::RepairApplicationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::longrunning::Operation>>(PrepareAsyncRepairApplicationRaw(context, request, cq));
    }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    ::grpc::ClientAsyncResponseReader< ::google::appengine::v1::Application>* AsyncGetApplicationRaw(::grpc::ClientContext* context, const ::google::appengine::v1::GetApplicationRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::appengine::v1::Application>* PrepareAsyncGetApplicationRaw(::grpc::ClientContext* context, const ::google::appengine::v1::GetApplicationRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::longrunning::Operation>* AsyncRepairApplicationRaw(::grpc::ClientContext* context, const ::google::appengine::v1::RepairApplicationRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::longrunning::Operation>* PrepareAsyncRepairApplicationRaw(::grpc::ClientContext* context, const ::google::appengine::v1::RepairApplicationRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_GetApplication_;
    const ::grpc::internal::RpcMethod rpcmethod_RepairApplication_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Gets information about an application.
    virtual ::grpc::Status GetApplication(::grpc::ServerContext* context, const ::google::appengine::v1::GetApplicationRequest* request, ::google::appengine::v1::Application* response);
    // Recreates the required App Engine features for the application in your
    // project, for example a Cloud Storage bucket or App Engine service account.
    // Use this method if you receive an error message about a missing feature,
    // for example "*Error retrieving the App Engine service account*".
    virtual ::grpc::Status RepairApplication(::grpc::ServerContext* context, const ::google::appengine::v1::RepairApplicationRequest* request, ::google::longrunning::Operation* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_GetApplication : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_GetApplication() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_GetApplication() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetApplication(::grpc::ServerContext* context, const ::google::appengine::v1::GetApplicationRequest* request, ::google::appengine::v1::Application* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetApplication(::grpc::ServerContext* context, ::google::appengine::v1::GetApplicationRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::appengine::v1::Application>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_RepairApplication : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_RepairApplication() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_RepairApplication() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RepairApplication(::grpc::ServerContext* context, const ::google::appengine::v1::RepairApplicationRequest* request, ::google::longrunning::Operation* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRepairApplication(::grpc::ServerContext* context, ::google::appengine::v1::RepairApplicationRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::longrunning::Operation>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_GetApplication<WithAsyncMethod_RepairApplication<Service > > AsyncService;
  template <class BaseClass>
  class WithGenericMethod_GetApplication : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_GetApplication() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_GetApplication() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetApplication(::grpc::ServerContext* context, const ::google::appengine::v1::GetApplicationRequest* request, ::google::appengine::v1::Application* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_RepairApplication : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_RepairApplication() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_RepairApplication() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RepairApplication(::grpc::ServerContext* context, const ::google::appengine::v1::RepairApplicationRequest* request, ::google::longrunning::Operation* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetApplication : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_GetApplication() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler< ::google::appengine::v1::GetApplicationRequest, ::google::appengine::v1::Application>(std::bind(&WithStreamedUnaryMethod_GetApplication<BaseClass>::StreamedGetApplication, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetApplication() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetApplication(::grpc::ServerContext* context, const ::google::appengine::v1::GetApplicationRequest* request, ::google::appengine::v1::Application* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetApplication(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::appengine::v1::GetApplicationRequest,::google::appengine::v1::Application>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_RepairApplication : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_RepairApplication() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler< ::google::appengine::v1::RepairApplicationRequest, ::google::longrunning::Operation>(std::bind(&WithStreamedUnaryMethod_RepairApplication<BaseClass>::StreamedRepairApplication, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_RepairApplication() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status RepairApplication(::grpc::ServerContext* context, const ::google::appengine::v1::RepairApplicationRequest* request, ::google::longrunning::Operation* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedRepairApplication(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::appengine::v1::RepairApplicationRequest,::google::longrunning::Operation>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_GetApplication<WithStreamedUnaryMethod_RepairApplication<Service > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_GetApplication<WithStreamedUnaryMethod_RepairApplication<Service > > StreamedService;
};

}  // namespace v1
}  // namespace appengine
}  // namespace google


#endif  // GRPC_google_2fappengine_2fv1_2fappengine_2eproto__INCLUDED
