// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/appengine/logging/v1/request_log.proto

#ifndef PROTOBUF_google_2fappengine_2flogging_2fv1_2frequest_5flog_2eproto__INCLUDED
#define PROTOBUF_google_2fappengine_2flogging_2fv1_2frequest_5flog_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "google/logging/type/log_severity.pb.h"
#include <google/protobuf/duration.pb.h>
#include <google/protobuf/timestamp.pb.h>
// @@protoc_insertion_point(includes)

namespace protobuf_google_2fappengine_2flogging_2fv1_2frequest_5flog_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[4];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsLogLineImpl();
void InitDefaultsLogLine();
void InitDefaultsSourceLocationImpl();
void InitDefaultsSourceLocation();
void InitDefaultsSourceReferenceImpl();
void InitDefaultsSourceReference();
void InitDefaultsRequestLogImpl();
void InitDefaultsRequestLog();
inline void InitDefaults() {
  InitDefaultsLogLine();
  InitDefaultsSourceLocation();
  InitDefaultsSourceReference();
  InitDefaultsRequestLog();
}
}  // namespace protobuf_google_2fappengine_2flogging_2fv1_2frequest_5flog_2eproto
namespace google {
namespace appengine {
namespace logging {
namespace v1 {
class LogLine;
class LogLineDefaultTypeInternal;
extern LogLineDefaultTypeInternal _LogLine_default_instance_;
class RequestLog;
class RequestLogDefaultTypeInternal;
extern RequestLogDefaultTypeInternal _RequestLog_default_instance_;
class SourceLocation;
class SourceLocationDefaultTypeInternal;
extern SourceLocationDefaultTypeInternal _SourceLocation_default_instance_;
class SourceReference;
class SourceReferenceDefaultTypeInternal;
extern SourceReferenceDefaultTypeInternal _SourceReference_default_instance_;
}  // namespace v1
}  // namespace logging
}  // namespace appengine
}  // namespace google
namespace google {
namespace appengine {
namespace logging {
namespace v1 {

// ===================================================================

class LogLine : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.appengine.logging.v1.LogLine) */ {
 public:
  LogLine();
  virtual ~LogLine();

  LogLine(const LogLine& from);

  inline LogLine& operator=(const LogLine& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LogLine(LogLine&& from) noexcept
    : LogLine() {
    *this = ::std::move(from);
  }

  inline LogLine& operator=(LogLine&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const LogLine& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LogLine* internal_default_instance() {
    return reinterpret_cast<const LogLine*>(
               &_LogLine_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(LogLine* other);
  friend void swap(LogLine& a, LogLine& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LogLine* New() const PROTOBUF_FINAL { return New(NULL); }

  LogLine* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const LogLine& from);
  void MergeFrom(const LogLine& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(LogLine* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string log_message = 3;
  void clear_log_message();
  static const int kLogMessageFieldNumber = 3;
  const ::std::string& log_message() const;
  void set_log_message(const ::std::string& value);
  #if LANG_CXX11
  void set_log_message(::std::string&& value);
  #endif
  void set_log_message(const char* value);
  void set_log_message(const char* value, size_t size);
  ::std::string* mutable_log_message();
  ::std::string* release_log_message();
  void set_allocated_log_message(::std::string* log_message);

  // .google.protobuf.Timestamp time = 1;
  bool has_time() const;
  void clear_time();
  static const int kTimeFieldNumber = 1;
  const ::google::protobuf::Timestamp& time() const;
  ::google::protobuf::Timestamp* release_time();
  ::google::protobuf::Timestamp* mutable_time();
  void set_allocated_time(::google::protobuf::Timestamp* time);

  // .google.appengine.logging.v1.SourceLocation source_location = 4;
  bool has_source_location() const;
  void clear_source_location();
  static const int kSourceLocationFieldNumber = 4;
  const ::google::appengine::logging::v1::SourceLocation& source_location() const;
  ::google::appengine::logging::v1::SourceLocation* release_source_location();
  ::google::appengine::logging::v1::SourceLocation* mutable_source_location();
  void set_allocated_source_location(::google::appengine::logging::v1::SourceLocation* source_location);

  // .google.logging.type.LogSeverity severity = 2;
  void clear_severity();
  static const int kSeverityFieldNumber = 2;
  ::google::logging::type::LogSeverity severity() const;
  void set_severity(::google::logging::type::LogSeverity value);

  // @@protoc_insertion_point(class_scope:google.appengine.logging.v1.LogLine)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr log_message_;
  ::google::protobuf::Timestamp* time_;
  ::google::appengine::logging::v1::SourceLocation* source_location_;
  int severity_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fappengine_2flogging_2fv1_2frequest_5flog_2eproto::TableStruct;
  friend void ::protobuf_google_2fappengine_2flogging_2fv1_2frequest_5flog_2eproto::InitDefaultsLogLineImpl();
};
// -------------------------------------------------------------------

class SourceLocation : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.appengine.logging.v1.SourceLocation) */ {
 public:
  SourceLocation();
  virtual ~SourceLocation();

  SourceLocation(const SourceLocation& from);

  inline SourceLocation& operator=(const SourceLocation& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SourceLocation(SourceLocation&& from) noexcept
    : SourceLocation() {
    *this = ::std::move(from);
  }

  inline SourceLocation& operator=(SourceLocation&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SourceLocation& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SourceLocation* internal_default_instance() {
    return reinterpret_cast<const SourceLocation*>(
               &_SourceLocation_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(SourceLocation* other);
  friend void swap(SourceLocation& a, SourceLocation& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SourceLocation* New() const PROTOBUF_FINAL { return New(NULL); }

  SourceLocation* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SourceLocation& from);
  void MergeFrom(const SourceLocation& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SourceLocation* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string file = 1;
  void clear_file();
  static const int kFileFieldNumber = 1;
  const ::std::string& file() const;
  void set_file(const ::std::string& value);
  #if LANG_CXX11
  void set_file(::std::string&& value);
  #endif
  void set_file(const char* value);
  void set_file(const char* value, size_t size);
  ::std::string* mutable_file();
  ::std::string* release_file();
  void set_allocated_file(::std::string* file);

  // string function_name = 3;
  void clear_function_name();
  static const int kFunctionNameFieldNumber = 3;
  const ::std::string& function_name() const;
  void set_function_name(const ::std::string& value);
  #if LANG_CXX11
  void set_function_name(::std::string&& value);
  #endif
  void set_function_name(const char* value);
  void set_function_name(const char* value, size_t size);
  ::std::string* mutable_function_name();
  ::std::string* release_function_name();
  void set_allocated_function_name(::std::string* function_name);

  // int64 line = 2;
  void clear_line();
  static const int kLineFieldNumber = 2;
  ::google::protobuf::int64 line() const;
  void set_line(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:google.appengine.logging.v1.SourceLocation)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr file_;
  ::google::protobuf::internal::ArenaStringPtr function_name_;
  ::google::protobuf::int64 line_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fappengine_2flogging_2fv1_2frequest_5flog_2eproto::TableStruct;
  friend void ::protobuf_google_2fappengine_2flogging_2fv1_2frequest_5flog_2eproto::InitDefaultsSourceLocationImpl();
};
// -------------------------------------------------------------------

class SourceReference : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.appengine.logging.v1.SourceReference) */ {
 public:
  SourceReference();
  virtual ~SourceReference();

  SourceReference(const SourceReference& from);

  inline SourceReference& operator=(const SourceReference& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SourceReference(SourceReference&& from) noexcept
    : SourceReference() {
    *this = ::std::move(from);
  }

  inline SourceReference& operator=(SourceReference&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SourceReference& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SourceReference* internal_default_instance() {
    return reinterpret_cast<const SourceReference*>(
               &_SourceReference_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(SourceReference* other);
  friend void swap(SourceReference& a, SourceReference& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SourceReference* New() const PROTOBUF_FINAL { return New(NULL); }

  SourceReference* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SourceReference& from);
  void MergeFrom(const SourceReference& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SourceReference* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string repository = 1;
  void clear_repository();
  static const int kRepositoryFieldNumber = 1;
  const ::std::string& repository() const;
  void set_repository(const ::std::string& value);
  #if LANG_CXX11
  void set_repository(::std::string&& value);
  #endif
  void set_repository(const char* value);
  void set_repository(const char* value, size_t size);
  ::std::string* mutable_repository();
  ::std::string* release_repository();
  void set_allocated_repository(::std::string* repository);

  // string revision_id = 2;
  void clear_revision_id();
  static const int kRevisionIdFieldNumber = 2;
  const ::std::string& revision_id() const;
  void set_revision_id(const ::std::string& value);
  #if LANG_CXX11
  void set_revision_id(::std::string&& value);
  #endif
  void set_revision_id(const char* value);
  void set_revision_id(const char* value, size_t size);
  ::std::string* mutable_revision_id();
  ::std::string* release_revision_id();
  void set_allocated_revision_id(::std::string* revision_id);

  // @@protoc_insertion_point(class_scope:google.appengine.logging.v1.SourceReference)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr repository_;
  ::google::protobuf::internal::ArenaStringPtr revision_id_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fappengine_2flogging_2fv1_2frequest_5flog_2eproto::TableStruct;
  friend void ::protobuf_google_2fappengine_2flogging_2fv1_2frequest_5flog_2eproto::InitDefaultsSourceReferenceImpl();
};
// -------------------------------------------------------------------

class RequestLog : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.appengine.logging.v1.RequestLog) */ {
 public:
  RequestLog();
  virtual ~RequestLog();

  RequestLog(const RequestLog& from);

  inline RequestLog& operator=(const RequestLog& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RequestLog(RequestLog&& from) noexcept
    : RequestLog() {
    *this = ::std::move(from);
  }

  inline RequestLog& operator=(RequestLog&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RequestLog& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RequestLog* internal_default_instance() {
    return reinterpret_cast<const RequestLog*>(
               &_RequestLog_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(RequestLog* other);
  friend void swap(RequestLog& a, RequestLog& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RequestLog* New() const PROTOBUF_FINAL { return New(NULL); }

  RequestLog* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const RequestLog& from);
  void MergeFrom(const RequestLog& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(RequestLog* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .google.appengine.logging.v1.LogLine line = 29;
  int line_size() const;
  void clear_line();
  static const int kLineFieldNumber = 29;
  const ::google::appengine::logging::v1::LogLine& line(int index) const;
  ::google::appengine::logging::v1::LogLine* mutable_line(int index);
  ::google::appengine::logging::v1::LogLine* add_line();
  ::google::protobuf::RepeatedPtrField< ::google::appengine::logging::v1::LogLine >*
      mutable_line();
  const ::google::protobuf::RepeatedPtrField< ::google::appengine::logging::v1::LogLine >&
      line() const;

  // repeated .google.appengine.logging.v1.SourceReference source_reference = 41;
  int source_reference_size() const;
  void clear_source_reference();
  static const int kSourceReferenceFieldNumber = 41;
  const ::google::appengine::logging::v1::SourceReference& source_reference(int index) const;
  ::google::appengine::logging::v1::SourceReference* mutable_source_reference(int index);
  ::google::appengine::logging::v1::SourceReference* add_source_reference();
  ::google::protobuf::RepeatedPtrField< ::google::appengine::logging::v1::SourceReference >*
      mutable_source_reference();
  const ::google::protobuf::RepeatedPtrField< ::google::appengine::logging::v1::SourceReference >&
      source_reference() const;

  // string app_id = 1;
  void clear_app_id();
  static const int kAppIdFieldNumber = 1;
  const ::std::string& app_id() const;
  void set_app_id(const ::std::string& value);
  #if LANG_CXX11
  void set_app_id(::std::string&& value);
  #endif
  void set_app_id(const char* value);
  void set_app_id(const char* value, size_t size);
  ::std::string* mutable_app_id();
  ::std::string* release_app_id();
  void set_allocated_app_id(::std::string* app_id);

  // string version_id = 2;
  void clear_version_id();
  static const int kVersionIdFieldNumber = 2;
  const ::std::string& version_id() const;
  void set_version_id(const ::std::string& value);
  #if LANG_CXX11
  void set_version_id(::std::string&& value);
  #endif
  void set_version_id(const char* value);
  void set_version_id(const char* value, size_t size);
  ::std::string* mutable_version_id();
  ::std::string* release_version_id();
  void set_allocated_version_id(::std::string* version_id);

  // string request_id = 3;
  void clear_request_id();
  static const int kRequestIdFieldNumber = 3;
  const ::std::string& request_id() const;
  void set_request_id(const ::std::string& value);
  #if LANG_CXX11
  void set_request_id(::std::string&& value);
  #endif
  void set_request_id(const char* value);
  void set_request_id(const char* value, size_t size);
  ::std::string* mutable_request_id();
  ::std::string* release_request_id();
  void set_allocated_request_id(::std::string* request_id);

  // string ip = 4;
  void clear_ip();
  static const int kIpFieldNumber = 4;
  const ::std::string& ip() const;
  void set_ip(const ::std::string& value);
  #if LANG_CXX11
  void set_ip(::std::string&& value);
  #endif
  void set_ip(const char* value);
  void set_ip(const char* value, size_t size);
  ::std::string* mutable_ip();
  ::std::string* release_ip();
  void set_allocated_ip(::std::string* ip);

  // string method = 10;
  void clear_method();
  static const int kMethodFieldNumber = 10;
  const ::std::string& method() const;
  void set_method(const ::std::string& value);
  #if LANG_CXX11
  void set_method(::std::string&& value);
  #endif
  void set_method(const char* value);
  void set_method(const char* value, size_t size);
  ::std::string* mutable_method();
  ::std::string* release_method();
  void set_allocated_method(::std::string* method);

  // string resource = 11;
  void clear_resource();
  static const int kResourceFieldNumber = 11;
  const ::std::string& resource() const;
  void set_resource(const ::std::string& value);
  #if LANG_CXX11
  void set_resource(::std::string&& value);
  #endif
  void set_resource(const char* value);
  void set_resource(const char* value, size_t size);
  ::std::string* mutable_resource();
  ::std::string* release_resource();
  void set_allocated_resource(::std::string* resource);

  // string http_version = 12;
  void clear_http_version();
  static const int kHttpVersionFieldNumber = 12;
  const ::std::string& http_version() const;
  void set_http_version(const ::std::string& value);
  #if LANG_CXX11
  void set_http_version(::std::string&& value);
  #endif
  void set_http_version(const char* value);
  void set_http_version(const char* value, size_t size);
  ::std::string* mutable_http_version();
  ::std::string* release_http_version();
  void set_allocated_http_version(::std::string* http_version);

  // string referrer = 15;
  void clear_referrer();
  static const int kReferrerFieldNumber = 15;
  const ::std::string& referrer() const;
  void set_referrer(const ::std::string& value);
  #if LANG_CXX11
  void set_referrer(::std::string&& value);
  #endif
  void set_referrer(const char* value);
  void set_referrer(const char* value, size_t size);
  ::std::string* mutable_referrer();
  ::std::string* release_referrer();
  void set_allocated_referrer(::std::string* referrer);

  // string user_agent = 16;
  void clear_user_agent();
  static const int kUserAgentFieldNumber = 16;
  const ::std::string& user_agent() const;
  void set_user_agent(const ::std::string& value);
  #if LANG_CXX11
  void set_user_agent(::std::string&& value);
  #endif
  void set_user_agent(const char* value);
  void set_user_agent(const char* value, size_t size);
  ::std::string* mutable_user_agent();
  ::std::string* release_user_agent();
  void set_allocated_user_agent(::std::string* user_agent);

  // string url_map_entry = 17;
  void clear_url_map_entry();
  static const int kUrlMapEntryFieldNumber = 17;
  const ::std::string& url_map_entry() const;
  void set_url_map_entry(const ::std::string& value);
  #if LANG_CXX11
  void set_url_map_entry(::std::string&& value);
  #endif
  void set_url_map_entry(const char* value);
  void set_url_map_entry(const char* value, size_t size);
  ::std::string* mutable_url_map_entry();
  ::std::string* release_url_map_entry();
  void set_allocated_url_map_entry(::std::string* url_map_entry);

  // string host = 20;
  void clear_host();
  static const int kHostFieldNumber = 20;
  const ::std::string& host() const;
  void set_host(const ::std::string& value);
  #if LANG_CXX11
  void set_host(::std::string&& value);
  #endif
  void set_host(const char* value);
  void set_host(const char* value, size_t size);
  ::std::string* mutable_host();
  ::std::string* release_host();
  void set_allocated_host(::std::string* host);

  // string task_queue_name = 22;
  void clear_task_queue_name();
  static const int kTaskQueueNameFieldNumber = 22;
  const ::std::string& task_queue_name() const;
  void set_task_queue_name(const ::std::string& value);
  #if LANG_CXX11
  void set_task_queue_name(::std::string&& value);
  #endif
  void set_task_queue_name(const char* value);
  void set_task_queue_name(const char* value, size_t size);
  ::std::string* mutable_task_queue_name();
  ::std::string* release_task_queue_name();
  void set_allocated_task_queue_name(::std::string* task_queue_name);

  // string task_name = 23;
  void clear_task_name();
  static const int kTaskNameFieldNumber = 23;
  const ::std::string& task_name() const;
  void set_task_name(const ::std::string& value);
  #if LANG_CXX11
  void set_task_name(::std::string&& value);
  #endif
  void set_task_name(const char* value);
  void set_task_name(const char* value, size_t size);
  ::std::string* mutable_task_name();
  ::std::string* release_task_name();
  void set_allocated_task_name(::std::string* task_name);

  // string instance_id = 28;
  void clear_instance_id();
  static const int kInstanceIdFieldNumber = 28;
  const ::std::string& instance_id() const;
  void set_instance_id(const ::std::string& value);
  #if LANG_CXX11
  void set_instance_id(::std::string&& value);
  #endif
  void set_instance_id(const char* value);
  void set_instance_id(const char* value, size_t size);
  ::std::string* mutable_instance_id();
  ::std::string* release_instance_id();
  void set_allocated_instance_id(::std::string* instance_id);

  // string module_id = 37;
  void clear_module_id();
  static const int kModuleIdFieldNumber = 37;
  const ::std::string& module_id() const;
  void set_module_id(const ::std::string& value);
  #if LANG_CXX11
  void set_module_id(::std::string&& value);
  #endif
  void set_module_id(const char* value);
  void set_module_id(const char* value, size_t size);
  ::std::string* mutable_module_id();
  ::std::string* release_module_id();
  void set_allocated_module_id(::std::string* module_id);

  // string app_engine_release = 38;
  void clear_app_engine_release();
  static const int kAppEngineReleaseFieldNumber = 38;
  const ::std::string& app_engine_release() const;
  void set_app_engine_release(const ::std::string& value);
  #if LANG_CXX11
  void set_app_engine_release(::std::string&& value);
  #endif
  void set_app_engine_release(const char* value);
  void set_app_engine_release(const char* value, size_t size);
  ::std::string* mutable_app_engine_release();
  ::std::string* release_app_engine_release();
  void set_allocated_app_engine_release(::std::string* app_engine_release);

  // string trace_id = 39;
  void clear_trace_id();
  static const int kTraceIdFieldNumber = 39;
  const ::std::string& trace_id() const;
  void set_trace_id(const ::std::string& value);
  #if LANG_CXX11
  void set_trace_id(::std::string&& value);
  #endif
  void set_trace_id(const char* value);
  void set_trace_id(const char* value, size_t size);
  ::std::string* mutable_trace_id();
  ::std::string* release_trace_id();
  void set_allocated_trace_id(::std::string* trace_id);

  // string nickname = 40;
  void clear_nickname();
  static const int kNicknameFieldNumber = 40;
  const ::std::string& nickname() const;
  void set_nickname(const ::std::string& value);
  #if LANG_CXX11
  void set_nickname(::std::string&& value);
  #endif
  void set_nickname(const char* value);
  void set_nickname(const char* value, size_t size);
  ::std::string* mutable_nickname();
  ::std::string* release_nickname();
  void set_allocated_nickname(::std::string* nickname);

  // .google.protobuf.Timestamp start_time = 6;
  bool has_start_time() const;
  void clear_start_time();
  static const int kStartTimeFieldNumber = 6;
  const ::google::protobuf::Timestamp& start_time() const;
  ::google::protobuf::Timestamp* release_start_time();
  ::google::protobuf::Timestamp* mutable_start_time();
  void set_allocated_start_time(::google::protobuf::Timestamp* start_time);

  // .google.protobuf.Timestamp end_time = 7;
  bool has_end_time() const;
  void clear_end_time();
  static const int kEndTimeFieldNumber = 7;
  const ::google::protobuf::Timestamp& end_time() const;
  ::google::protobuf::Timestamp* release_end_time();
  ::google::protobuf::Timestamp* mutable_end_time();
  void set_allocated_end_time(::google::protobuf::Timestamp* end_time);

  // .google.protobuf.Duration latency = 8;
  bool has_latency() const;
  void clear_latency();
  static const int kLatencyFieldNumber = 8;
  const ::google::protobuf::Duration& latency() const;
  ::google::protobuf::Duration* release_latency();
  ::google::protobuf::Duration* mutable_latency();
  void set_allocated_latency(::google::protobuf::Duration* latency);

  // .google.protobuf.Duration pending_time = 25;
  bool has_pending_time() const;
  void clear_pending_time();
  static const int kPendingTimeFieldNumber = 25;
  const ::google::protobuf::Duration& pending_time() const;
  ::google::protobuf::Duration* release_pending_time();
  ::google::protobuf::Duration* mutable_pending_time();
  void set_allocated_pending_time(::google::protobuf::Duration* pending_time);

  // int64 mega_cycles = 9;
  void clear_mega_cycles();
  static const int kMegaCyclesFieldNumber = 9;
  ::google::protobuf::int64 mega_cycles() const;
  void set_mega_cycles(::google::protobuf::int64 value);

  // int64 response_size = 14;
  void clear_response_size();
  static const int kResponseSizeFieldNumber = 14;
  ::google::protobuf::int64 response_size() const;
  void set_response_size(::google::protobuf::int64 value);

  // int32 status = 13;
  void clear_status();
  static const int kStatusFieldNumber = 13;
  ::google::protobuf::int32 status() const;
  void set_status(::google::protobuf::int32 value);

  // int32 instance_index = 26;
  void clear_instance_index();
  static const int kInstanceIndexFieldNumber = 26;
  ::google::protobuf::int32 instance_index() const;
  void set_instance_index(::google::protobuf::int32 value);

  // double cost = 21;
  void clear_cost();
  static const int kCostFieldNumber = 21;
  double cost() const;
  void set_cost(double value);

  // bool was_loading_request = 24;
  void clear_was_loading_request();
  static const int kWasLoadingRequestFieldNumber = 24;
  bool was_loading_request() const;
  void set_was_loading_request(bool value);

  // bool finished = 27;
  void clear_finished();
  static const int kFinishedFieldNumber = 27;
  bool finished() const;
  void set_finished(bool value);

  // bool first = 42;
  void clear_first();
  static const int kFirstFieldNumber = 42;
  bool first() const;
  void set_first(bool value);

  // @@protoc_insertion_point(class_scope:google.appengine.logging.v1.RequestLog)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::google::appengine::logging::v1::LogLine > line_;
  ::google::protobuf::RepeatedPtrField< ::google::appengine::logging::v1::SourceReference > source_reference_;
  ::google::protobuf::internal::ArenaStringPtr app_id_;
  ::google::protobuf::internal::ArenaStringPtr version_id_;
  ::google::protobuf::internal::ArenaStringPtr request_id_;
  ::google::protobuf::internal::ArenaStringPtr ip_;
  ::google::protobuf::internal::ArenaStringPtr method_;
  ::google::protobuf::internal::ArenaStringPtr resource_;
  ::google::protobuf::internal::ArenaStringPtr http_version_;
  ::google::protobuf::internal::ArenaStringPtr referrer_;
  ::google::protobuf::internal::ArenaStringPtr user_agent_;
  ::google::protobuf::internal::ArenaStringPtr url_map_entry_;
  ::google::protobuf::internal::ArenaStringPtr host_;
  ::google::protobuf::internal::ArenaStringPtr task_queue_name_;
  ::google::protobuf::internal::ArenaStringPtr task_name_;
  ::google::protobuf::internal::ArenaStringPtr instance_id_;
  ::google::protobuf::internal::ArenaStringPtr module_id_;
  ::google::protobuf::internal::ArenaStringPtr app_engine_release_;
  ::google::protobuf::internal::ArenaStringPtr trace_id_;
  ::google::protobuf::internal::ArenaStringPtr nickname_;
  ::google::protobuf::Timestamp* start_time_;
  ::google::protobuf::Timestamp* end_time_;
  ::google::protobuf::Duration* latency_;
  ::google::protobuf::Duration* pending_time_;
  ::google::protobuf::int64 mega_cycles_;
  ::google::protobuf::int64 response_size_;
  ::google::protobuf::int32 status_;
  ::google::protobuf::int32 instance_index_;
  double cost_;
  bool was_loading_request_;
  bool finished_;
  bool first_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fappengine_2flogging_2fv1_2frequest_5flog_2eproto::TableStruct;
  friend void ::protobuf_google_2fappengine_2flogging_2fv1_2frequest_5flog_2eproto::InitDefaultsRequestLogImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// LogLine

// .google.protobuf.Timestamp time = 1;
inline bool LogLine::has_time() const {
  return this != internal_default_instance() && time_ != NULL;
}
inline const ::google::protobuf::Timestamp& LogLine::time() const {
  const ::google::protobuf::Timestamp* p = time_;
  // @@protoc_insertion_point(field_get:google.appengine.logging.v1.LogLine.time)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::Timestamp*>(
      &::google::protobuf::_Timestamp_default_instance_);
}
inline ::google::protobuf::Timestamp* LogLine::release_time() {
  // @@protoc_insertion_point(field_release:google.appengine.logging.v1.LogLine.time)
  
  ::google::protobuf::Timestamp* temp = time_;
  time_ = NULL;
  return temp;
}
inline ::google::protobuf::Timestamp* LogLine::mutable_time() {
  
  if (time_ == NULL) {
    time_ = new ::google::protobuf::Timestamp;
  }
  // @@protoc_insertion_point(field_mutable:google.appengine.logging.v1.LogLine.time)
  return time_;
}
inline void LogLine::set_allocated_time(::google::protobuf::Timestamp* time) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(time_);
  }
  if (time) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast< ::google::protobuf::MessageLite*>(time)->GetArena();
    if (message_arena != submessage_arena) {
      time = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, time, submessage_arena);
    }
    
  } else {
    
  }
  time_ = time;
  // @@protoc_insertion_point(field_set_allocated:google.appengine.logging.v1.LogLine.time)
}

// .google.logging.type.LogSeverity severity = 2;
inline void LogLine::clear_severity() {
  severity_ = 0;
}
inline ::google::logging::type::LogSeverity LogLine::severity() const {
  // @@protoc_insertion_point(field_get:google.appengine.logging.v1.LogLine.severity)
  return static_cast< ::google::logging::type::LogSeverity >(severity_);
}
inline void LogLine::set_severity(::google::logging::type::LogSeverity value) {
  
  severity_ = value;
  // @@protoc_insertion_point(field_set:google.appengine.logging.v1.LogLine.severity)
}

// string log_message = 3;
inline void LogLine::clear_log_message() {
  log_message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LogLine::log_message() const {
  // @@protoc_insertion_point(field_get:google.appengine.logging.v1.LogLine.log_message)
  return log_message_.GetNoArena();
}
inline void LogLine::set_log_message(const ::std::string& value) {
  
  log_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.appengine.logging.v1.LogLine.log_message)
}
#if LANG_CXX11
inline void LogLine::set_log_message(::std::string&& value) {
  
  log_message_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.appengine.logging.v1.LogLine.log_message)
}
#endif
inline void LogLine::set_log_message(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  log_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.appengine.logging.v1.LogLine.log_message)
}
inline void LogLine::set_log_message(const char* value, size_t size) {
  
  log_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.appengine.logging.v1.LogLine.log_message)
}
inline ::std::string* LogLine::mutable_log_message() {
  
  // @@protoc_insertion_point(field_mutable:google.appengine.logging.v1.LogLine.log_message)
  return log_message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LogLine::release_log_message() {
  // @@protoc_insertion_point(field_release:google.appengine.logging.v1.LogLine.log_message)
  
  return log_message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LogLine::set_allocated_log_message(::std::string* log_message) {
  if (log_message != NULL) {
    
  } else {
    
  }
  log_message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), log_message);
  // @@protoc_insertion_point(field_set_allocated:google.appengine.logging.v1.LogLine.log_message)
}

// .google.appengine.logging.v1.SourceLocation source_location = 4;
inline bool LogLine::has_source_location() const {
  return this != internal_default_instance() && source_location_ != NULL;
}
inline void LogLine::clear_source_location() {
  if (GetArenaNoVirtual() == NULL && source_location_ != NULL) {
    delete source_location_;
  }
  source_location_ = NULL;
}
inline const ::google::appengine::logging::v1::SourceLocation& LogLine::source_location() const {
  const ::google::appengine::logging::v1::SourceLocation* p = source_location_;
  // @@protoc_insertion_point(field_get:google.appengine.logging.v1.LogLine.source_location)
  return p != NULL ? *p : *reinterpret_cast<const ::google::appengine::logging::v1::SourceLocation*>(
      &::google::appengine::logging::v1::_SourceLocation_default_instance_);
}
inline ::google::appengine::logging::v1::SourceLocation* LogLine::release_source_location() {
  // @@protoc_insertion_point(field_release:google.appengine.logging.v1.LogLine.source_location)
  
  ::google::appengine::logging::v1::SourceLocation* temp = source_location_;
  source_location_ = NULL;
  return temp;
}
inline ::google::appengine::logging::v1::SourceLocation* LogLine::mutable_source_location() {
  
  if (source_location_ == NULL) {
    source_location_ = new ::google::appengine::logging::v1::SourceLocation;
  }
  // @@protoc_insertion_point(field_mutable:google.appengine.logging.v1.LogLine.source_location)
  return source_location_;
}
inline void LogLine::set_allocated_source_location(::google::appengine::logging::v1::SourceLocation* source_location) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete source_location_;
  }
  if (source_location) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      source_location = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, source_location, submessage_arena);
    }
    
  } else {
    
  }
  source_location_ = source_location;
  // @@protoc_insertion_point(field_set_allocated:google.appengine.logging.v1.LogLine.source_location)
}

// -------------------------------------------------------------------

// SourceLocation

// string file = 1;
inline void SourceLocation::clear_file() {
  file_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SourceLocation::file() const {
  // @@protoc_insertion_point(field_get:google.appengine.logging.v1.SourceLocation.file)
  return file_.GetNoArena();
}
inline void SourceLocation::set_file(const ::std::string& value) {
  
  file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.appengine.logging.v1.SourceLocation.file)
}
#if LANG_CXX11
inline void SourceLocation::set_file(::std::string&& value) {
  
  file_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.appengine.logging.v1.SourceLocation.file)
}
#endif
inline void SourceLocation::set_file(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.appengine.logging.v1.SourceLocation.file)
}
inline void SourceLocation::set_file(const char* value, size_t size) {
  
  file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.appengine.logging.v1.SourceLocation.file)
}
inline ::std::string* SourceLocation::mutable_file() {
  
  // @@protoc_insertion_point(field_mutable:google.appengine.logging.v1.SourceLocation.file)
  return file_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SourceLocation::release_file() {
  // @@protoc_insertion_point(field_release:google.appengine.logging.v1.SourceLocation.file)
  
  return file_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SourceLocation::set_allocated_file(::std::string* file) {
  if (file != NULL) {
    
  } else {
    
  }
  file_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), file);
  // @@protoc_insertion_point(field_set_allocated:google.appengine.logging.v1.SourceLocation.file)
}

// int64 line = 2;
inline void SourceLocation::clear_line() {
  line_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 SourceLocation::line() const {
  // @@protoc_insertion_point(field_get:google.appengine.logging.v1.SourceLocation.line)
  return line_;
}
inline void SourceLocation::set_line(::google::protobuf::int64 value) {
  
  line_ = value;
  // @@protoc_insertion_point(field_set:google.appengine.logging.v1.SourceLocation.line)
}

// string function_name = 3;
inline void SourceLocation::clear_function_name() {
  function_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SourceLocation::function_name() const {
  // @@protoc_insertion_point(field_get:google.appengine.logging.v1.SourceLocation.function_name)
  return function_name_.GetNoArena();
}
inline void SourceLocation::set_function_name(const ::std::string& value) {
  
  function_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.appengine.logging.v1.SourceLocation.function_name)
}
#if LANG_CXX11
inline void SourceLocation::set_function_name(::std::string&& value) {
  
  function_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.appengine.logging.v1.SourceLocation.function_name)
}
#endif
inline void SourceLocation::set_function_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  function_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.appengine.logging.v1.SourceLocation.function_name)
}
inline void SourceLocation::set_function_name(const char* value, size_t size) {
  
  function_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.appengine.logging.v1.SourceLocation.function_name)
}
inline ::std::string* SourceLocation::mutable_function_name() {
  
  // @@protoc_insertion_point(field_mutable:google.appengine.logging.v1.SourceLocation.function_name)
  return function_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SourceLocation::release_function_name() {
  // @@protoc_insertion_point(field_release:google.appengine.logging.v1.SourceLocation.function_name)
  
  return function_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SourceLocation::set_allocated_function_name(::std::string* function_name) {
  if (function_name != NULL) {
    
  } else {
    
  }
  function_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), function_name);
  // @@protoc_insertion_point(field_set_allocated:google.appengine.logging.v1.SourceLocation.function_name)
}

// -------------------------------------------------------------------

// SourceReference

// string repository = 1;
inline void SourceReference::clear_repository() {
  repository_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SourceReference::repository() const {
  // @@protoc_insertion_point(field_get:google.appengine.logging.v1.SourceReference.repository)
  return repository_.GetNoArena();
}
inline void SourceReference::set_repository(const ::std::string& value) {
  
  repository_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.appengine.logging.v1.SourceReference.repository)
}
#if LANG_CXX11
inline void SourceReference::set_repository(::std::string&& value) {
  
  repository_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.appengine.logging.v1.SourceReference.repository)
}
#endif
inline void SourceReference::set_repository(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  repository_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.appengine.logging.v1.SourceReference.repository)
}
inline void SourceReference::set_repository(const char* value, size_t size) {
  
  repository_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.appengine.logging.v1.SourceReference.repository)
}
inline ::std::string* SourceReference::mutable_repository() {
  
  // @@protoc_insertion_point(field_mutable:google.appengine.logging.v1.SourceReference.repository)
  return repository_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SourceReference::release_repository() {
  // @@protoc_insertion_point(field_release:google.appengine.logging.v1.SourceReference.repository)
  
  return repository_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SourceReference::set_allocated_repository(::std::string* repository) {
  if (repository != NULL) {
    
  } else {
    
  }
  repository_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), repository);
  // @@protoc_insertion_point(field_set_allocated:google.appengine.logging.v1.SourceReference.repository)
}

// string revision_id = 2;
inline void SourceReference::clear_revision_id() {
  revision_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SourceReference::revision_id() const {
  // @@protoc_insertion_point(field_get:google.appengine.logging.v1.SourceReference.revision_id)
  return revision_id_.GetNoArena();
}
inline void SourceReference::set_revision_id(const ::std::string& value) {
  
  revision_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.appengine.logging.v1.SourceReference.revision_id)
}
#if LANG_CXX11
inline void SourceReference::set_revision_id(::std::string&& value) {
  
  revision_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.appengine.logging.v1.SourceReference.revision_id)
}
#endif
inline void SourceReference::set_revision_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  revision_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.appengine.logging.v1.SourceReference.revision_id)
}
inline void SourceReference::set_revision_id(const char* value, size_t size) {
  
  revision_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.appengine.logging.v1.SourceReference.revision_id)
}
inline ::std::string* SourceReference::mutable_revision_id() {
  
  // @@protoc_insertion_point(field_mutable:google.appengine.logging.v1.SourceReference.revision_id)
  return revision_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SourceReference::release_revision_id() {
  // @@protoc_insertion_point(field_release:google.appengine.logging.v1.SourceReference.revision_id)
  
  return revision_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SourceReference::set_allocated_revision_id(::std::string* revision_id) {
  if (revision_id != NULL) {
    
  } else {
    
  }
  revision_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), revision_id);
  // @@protoc_insertion_point(field_set_allocated:google.appengine.logging.v1.SourceReference.revision_id)
}

// -------------------------------------------------------------------

// RequestLog

// string app_id = 1;
inline void RequestLog::clear_app_id() {
  app_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RequestLog::app_id() const {
  // @@protoc_insertion_point(field_get:google.appengine.logging.v1.RequestLog.app_id)
  return app_id_.GetNoArena();
}
inline void RequestLog::set_app_id(const ::std::string& value) {
  
  app_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.appengine.logging.v1.RequestLog.app_id)
}
#if LANG_CXX11
inline void RequestLog::set_app_id(::std::string&& value) {
  
  app_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.appengine.logging.v1.RequestLog.app_id)
}
#endif
inline void RequestLog::set_app_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  app_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.appengine.logging.v1.RequestLog.app_id)
}
inline void RequestLog::set_app_id(const char* value, size_t size) {
  
  app_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.appengine.logging.v1.RequestLog.app_id)
}
inline ::std::string* RequestLog::mutable_app_id() {
  
  // @@protoc_insertion_point(field_mutable:google.appengine.logging.v1.RequestLog.app_id)
  return app_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RequestLog::release_app_id() {
  // @@protoc_insertion_point(field_release:google.appengine.logging.v1.RequestLog.app_id)
  
  return app_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RequestLog::set_allocated_app_id(::std::string* app_id) {
  if (app_id != NULL) {
    
  } else {
    
  }
  app_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), app_id);
  // @@protoc_insertion_point(field_set_allocated:google.appengine.logging.v1.RequestLog.app_id)
}

// string module_id = 37;
inline void RequestLog::clear_module_id() {
  module_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RequestLog::module_id() const {
  // @@protoc_insertion_point(field_get:google.appengine.logging.v1.RequestLog.module_id)
  return module_id_.GetNoArena();
}
inline void RequestLog::set_module_id(const ::std::string& value) {
  
  module_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.appengine.logging.v1.RequestLog.module_id)
}
#if LANG_CXX11
inline void RequestLog::set_module_id(::std::string&& value) {
  
  module_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.appengine.logging.v1.RequestLog.module_id)
}
#endif
inline void RequestLog::set_module_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  module_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.appengine.logging.v1.RequestLog.module_id)
}
inline void RequestLog::set_module_id(const char* value, size_t size) {
  
  module_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.appengine.logging.v1.RequestLog.module_id)
}
inline ::std::string* RequestLog::mutable_module_id() {
  
  // @@protoc_insertion_point(field_mutable:google.appengine.logging.v1.RequestLog.module_id)
  return module_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RequestLog::release_module_id() {
  // @@protoc_insertion_point(field_release:google.appengine.logging.v1.RequestLog.module_id)
  
  return module_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RequestLog::set_allocated_module_id(::std::string* module_id) {
  if (module_id != NULL) {
    
  } else {
    
  }
  module_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), module_id);
  // @@protoc_insertion_point(field_set_allocated:google.appengine.logging.v1.RequestLog.module_id)
}

// string version_id = 2;
inline void RequestLog::clear_version_id() {
  version_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RequestLog::version_id() const {
  // @@protoc_insertion_point(field_get:google.appengine.logging.v1.RequestLog.version_id)
  return version_id_.GetNoArena();
}
inline void RequestLog::set_version_id(const ::std::string& value) {
  
  version_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.appengine.logging.v1.RequestLog.version_id)
}
#if LANG_CXX11
inline void RequestLog::set_version_id(::std::string&& value) {
  
  version_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.appengine.logging.v1.RequestLog.version_id)
}
#endif
inline void RequestLog::set_version_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  version_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.appengine.logging.v1.RequestLog.version_id)
}
inline void RequestLog::set_version_id(const char* value, size_t size) {
  
  version_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.appengine.logging.v1.RequestLog.version_id)
}
inline ::std::string* RequestLog::mutable_version_id() {
  
  // @@protoc_insertion_point(field_mutable:google.appengine.logging.v1.RequestLog.version_id)
  return version_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RequestLog::release_version_id() {
  // @@protoc_insertion_point(field_release:google.appengine.logging.v1.RequestLog.version_id)
  
  return version_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RequestLog::set_allocated_version_id(::std::string* version_id) {
  if (version_id != NULL) {
    
  } else {
    
  }
  version_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), version_id);
  // @@protoc_insertion_point(field_set_allocated:google.appengine.logging.v1.RequestLog.version_id)
}

// string request_id = 3;
inline void RequestLog::clear_request_id() {
  request_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RequestLog::request_id() const {
  // @@protoc_insertion_point(field_get:google.appengine.logging.v1.RequestLog.request_id)
  return request_id_.GetNoArena();
}
inline void RequestLog::set_request_id(const ::std::string& value) {
  
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.appengine.logging.v1.RequestLog.request_id)
}
#if LANG_CXX11
inline void RequestLog::set_request_id(::std::string&& value) {
  
  request_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.appengine.logging.v1.RequestLog.request_id)
}
#endif
inline void RequestLog::set_request_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.appengine.logging.v1.RequestLog.request_id)
}
inline void RequestLog::set_request_id(const char* value, size_t size) {
  
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.appengine.logging.v1.RequestLog.request_id)
}
inline ::std::string* RequestLog::mutable_request_id() {
  
  // @@protoc_insertion_point(field_mutable:google.appengine.logging.v1.RequestLog.request_id)
  return request_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RequestLog::release_request_id() {
  // @@protoc_insertion_point(field_release:google.appengine.logging.v1.RequestLog.request_id)
  
  return request_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RequestLog::set_allocated_request_id(::std::string* request_id) {
  if (request_id != NULL) {
    
  } else {
    
  }
  request_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), request_id);
  // @@protoc_insertion_point(field_set_allocated:google.appengine.logging.v1.RequestLog.request_id)
}

// string ip = 4;
inline void RequestLog::clear_ip() {
  ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RequestLog::ip() const {
  // @@protoc_insertion_point(field_get:google.appengine.logging.v1.RequestLog.ip)
  return ip_.GetNoArena();
}
inline void RequestLog::set_ip(const ::std::string& value) {
  
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.appengine.logging.v1.RequestLog.ip)
}
#if LANG_CXX11
inline void RequestLog::set_ip(::std::string&& value) {
  
  ip_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.appengine.logging.v1.RequestLog.ip)
}
#endif
inline void RequestLog::set_ip(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.appengine.logging.v1.RequestLog.ip)
}
inline void RequestLog::set_ip(const char* value, size_t size) {
  
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.appengine.logging.v1.RequestLog.ip)
}
inline ::std::string* RequestLog::mutable_ip() {
  
  // @@protoc_insertion_point(field_mutable:google.appengine.logging.v1.RequestLog.ip)
  return ip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RequestLog::release_ip() {
  // @@protoc_insertion_point(field_release:google.appengine.logging.v1.RequestLog.ip)
  
  return ip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RequestLog::set_allocated_ip(::std::string* ip) {
  if (ip != NULL) {
    
  } else {
    
  }
  ip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ip);
  // @@protoc_insertion_point(field_set_allocated:google.appengine.logging.v1.RequestLog.ip)
}

// .google.protobuf.Timestamp start_time = 6;
inline bool RequestLog::has_start_time() const {
  return this != internal_default_instance() && start_time_ != NULL;
}
inline const ::google::protobuf::Timestamp& RequestLog::start_time() const {
  const ::google::protobuf::Timestamp* p = start_time_;
  // @@protoc_insertion_point(field_get:google.appengine.logging.v1.RequestLog.start_time)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::Timestamp*>(
      &::google::protobuf::_Timestamp_default_instance_);
}
inline ::google::protobuf::Timestamp* RequestLog::release_start_time() {
  // @@protoc_insertion_point(field_release:google.appengine.logging.v1.RequestLog.start_time)
  
  ::google::protobuf::Timestamp* temp = start_time_;
  start_time_ = NULL;
  return temp;
}
inline ::google::protobuf::Timestamp* RequestLog::mutable_start_time() {
  
  if (start_time_ == NULL) {
    start_time_ = new ::google::protobuf::Timestamp;
  }
  // @@protoc_insertion_point(field_mutable:google.appengine.logging.v1.RequestLog.start_time)
  return start_time_;
}
inline void RequestLog::set_allocated_start_time(::google::protobuf::Timestamp* start_time) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(start_time_);
  }
  if (start_time) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast< ::google::protobuf::MessageLite*>(start_time)->GetArena();
    if (message_arena != submessage_arena) {
      start_time = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, start_time, submessage_arena);
    }
    
  } else {
    
  }
  start_time_ = start_time;
  // @@protoc_insertion_point(field_set_allocated:google.appengine.logging.v1.RequestLog.start_time)
}

// .google.protobuf.Timestamp end_time = 7;
inline bool RequestLog::has_end_time() const {
  return this != internal_default_instance() && end_time_ != NULL;
}
inline const ::google::protobuf::Timestamp& RequestLog::end_time() const {
  const ::google::protobuf::Timestamp* p = end_time_;
  // @@protoc_insertion_point(field_get:google.appengine.logging.v1.RequestLog.end_time)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::Timestamp*>(
      &::google::protobuf::_Timestamp_default_instance_);
}
inline ::google::protobuf::Timestamp* RequestLog::release_end_time() {
  // @@protoc_insertion_point(field_release:google.appengine.logging.v1.RequestLog.end_time)
  
  ::google::protobuf::Timestamp* temp = end_time_;
  end_time_ = NULL;
  return temp;
}
inline ::google::protobuf::Timestamp* RequestLog::mutable_end_time() {
  
  if (end_time_ == NULL) {
    end_time_ = new ::google::protobuf::Timestamp;
  }
  // @@protoc_insertion_point(field_mutable:google.appengine.logging.v1.RequestLog.end_time)
  return end_time_;
}
inline void RequestLog::set_allocated_end_time(::google::protobuf::Timestamp* end_time) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(end_time_);
  }
  if (end_time) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast< ::google::protobuf::MessageLite*>(end_time)->GetArena();
    if (message_arena != submessage_arena) {
      end_time = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, end_time, submessage_arena);
    }
    
  } else {
    
  }
  end_time_ = end_time;
  // @@protoc_insertion_point(field_set_allocated:google.appengine.logging.v1.RequestLog.end_time)
}

// .google.protobuf.Duration latency = 8;
inline bool RequestLog::has_latency() const {
  return this != internal_default_instance() && latency_ != NULL;
}
inline const ::google::protobuf::Duration& RequestLog::latency() const {
  const ::google::protobuf::Duration* p = latency_;
  // @@protoc_insertion_point(field_get:google.appengine.logging.v1.RequestLog.latency)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::Duration*>(
      &::google::protobuf::_Duration_default_instance_);
}
inline ::google::protobuf::Duration* RequestLog::release_latency() {
  // @@protoc_insertion_point(field_release:google.appengine.logging.v1.RequestLog.latency)
  
  ::google::protobuf::Duration* temp = latency_;
  latency_ = NULL;
  return temp;
}
inline ::google::protobuf::Duration* RequestLog::mutable_latency() {
  
  if (latency_ == NULL) {
    latency_ = new ::google::protobuf::Duration;
  }
  // @@protoc_insertion_point(field_mutable:google.appengine.logging.v1.RequestLog.latency)
  return latency_;
}
inline void RequestLog::set_allocated_latency(::google::protobuf::Duration* latency) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(latency_);
  }
  if (latency) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast< ::google::protobuf::MessageLite*>(latency)->GetArena();
    if (message_arena != submessage_arena) {
      latency = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, latency, submessage_arena);
    }
    
  } else {
    
  }
  latency_ = latency;
  // @@protoc_insertion_point(field_set_allocated:google.appengine.logging.v1.RequestLog.latency)
}

// int64 mega_cycles = 9;
inline void RequestLog::clear_mega_cycles() {
  mega_cycles_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 RequestLog::mega_cycles() const {
  // @@protoc_insertion_point(field_get:google.appengine.logging.v1.RequestLog.mega_cycles)
  return mega_cycles_;
}
inline void RequestLog::set_mega_cycles(::google::protobuf::int64 value) {
  
  mega_cycles_ = value;
  // @@protoc_insertion_point(field_set:google.appengine.logging.v1.RequestLog.mega_cycles)
}

// string method = 10;
inline void RequestLog::clear_method() {
  method_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RequestLog::method() const {
  // @@protoc_insertion_point(field_get:google.appengine.logging.v1.RequestLog.method)
  return method_.GetNoArena();
}
inline void RequestLog::set_method(const ::std::string& value) {
  
  method_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.appengine.logging.v1.RequestLog.method)
}
#if LANG_CXX11
inline void RequestLog::set_method(::std::string&& value) {
  
  method_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.appengine.logging.v1.RequestLog.method)
}
#endif
inline void RequestLog::set_method(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  method_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.appengine.logging.v1.RequestLog.method)
}
inline void RequestLog::set_method(const char* value, size_t size) {
  
  method_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.appengine.logging.v1.RequestLog.method)
}
inline ::std::string* RequestLog::mutable_method() {
  
  // @@protoc_insertion_point(field_mutable:google.appengine.logging.v1.RequestLog.method)
  return method_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RequestLog::release_method() {
  // @@protoc_insertion_point(field_release:google.appengine.logging.v1.RequestLog.method)
  
  return method_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RequestLog::set_allocated_method(::std::string* method) {
  if (method != NULL) {
    
  } else {
    
  }
  method_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), method);
  // @@protoc_insertion_point(field_set_allocated:google.appengine.logging.v1.RequestLog.method)
}

// string resource = 11;
inline void RequestLog::clear_resource() {
  resource_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RequestLog::resource() const {
  // @@protoc_insertion_point(field_get:google.appengine.logging.v1.RequestLog.resource)
  return resource_.GetNoArena();
}
inline void RequestLog::set_resource(const ::std::string& value) {
  
  resource_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.appengine.logging.v1.RequestLog.resource)
}
#if LANG_CXX11
inline void RequestLog::set_resource(::std::string&& value) {
  
  resource_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.appengine.logging.v1.RequestLog.resource)
}
#endif
inline void RequestLog::set_resource(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  resource_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.appengine.logging.v1.RequestLog.resource)
}
inline void RequestLog::set_resource(const char* value, size_t size) {
  
  resource_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.appengine.logging.v1.RequestLog.resource)
}
inline ::std::string* RequestLog::mutable_resource() {
  
  // @@protoc_insertion_point(field_mutable:google.appengine.logging.v1.RequestLog.resource)
  return resource_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RequestLog::release_resource() {
  // @@protoc_insertion_point(field_release:google.appengine.logging.v1.RequestLog.resource)
  
  return resource_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RequestLog::set_allocated_resource(::std::string* resource) {
  if (resource != NULL) {
    
  } else {
    
  }
  resource_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), resource);
  // @@protoc_insertion_point(field_set_allocated:google.appengine.logging.v1.RequestLog.resource)
}

// string http_version = 12;
inline void RequestLog::clear_http_version() {
  http_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RequestLog::http_version() const {
  // @@protoc_insertion_point(field_get:google.appengine.logging.v1.RequestLog.http_version)
  return http_version_.GetNoArena();
}
inline void RequestLog::set_http_version(const ::std::string& value) {
  
  http_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.appengine.logging.v1.RequestLog.http_version)
}
#if LANG_CXX11
inline void RequestLog::set_http_version(::std::string&& value) {
  
  http_version_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.appengine.logging.v1.RequestLog.http_version)
}
#endif
inline void RequestLog::set_http_version(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  http_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.appengine.logging.v1.RequestLog.http_version)
}
inline void RequestLog::set_http_version(const char* value, size_t size) {
  
  http_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.appengine.logging.v1.RequestLog.http_version)
}
inline ::std::string* RequestLog::mutable_http_version() {
  
  // @@protoc_insertion_point(field_mutable:google.appengine.logging.v1.RequestLog.http_version)
  return http_version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RequestLog::release_http_version() {
  // @@protoc_insertion_point(field_release:google.appengine.logging.v1.RequestLog.http_version)
  
  return http_version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RequestLog::set_allocated_http_version(::std::string* http_version) {
  if (http_version != NULL) {
    
  } else {
    
  }
  http_version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), http_version);
  // @@protoc_insertion_point(field_set_allocated:google.appengine.logging.v1.RequestLog.http_version)
}

// int32 status = 13;
inline void RequestLog::clear_status() {
  status_ = 0;
}
inline ::google::protobuf::int32 RequestLog::status() const {
  // @@protoc_insertion_point(field_get:google.appengine.logging.v1.RequestLog.status)
  return status_;
}
inline void RequestLog::set_status(::google::protobuf::int32 value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:google.appengine.logging.v1.RequestLog.status)
}

// int64 response_size = 14;
inline void RequestLog::clear_response_size() {
  response_size_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 RequestLog::response_size() const {
  // @@protoc_insertion_point(field_get:google.appengine.logging.v1.RequestLog.response_size)
  return response_size_;
}
inline void RequestLog::set_response_size(::google::protobuf::int64 value) {
  
  response_size_ = value;
  // @@protoc_insertion_point(field_set:google.appengine.logging.v1.RequestLog.response_size)
}

// string referrer = 15;
inline void RequestLog::clear_referrer() {
  referrer_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RequestLog::referrer() const {
  // @@protoc_insertion_point(field_get:google.appengine.logging.v1.RequestLog.referrer)
  return referrer_.GetNoArena();
}
inline void RequestLog::set_referrer(const ::std::string& value) {
  
  referrer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.appengine.logging.v1.RequestLog.referrer)
}
#if LANG_CXX11
inline void RequestLog::set_referrer(::std::string&& value) {
  
  referrer_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.appengine.logging.v1.RequestLog.referrer)
}
#endif
inline void RequestLog::set_referrer(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  referrer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.appengine.logging.v1.RequestLog.referrer)
}
inline void RequestLog::set_referrer(const char* value, size_t size) {
  
  referrer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.appengine.logging.v1.RequestLog.referrer)
}
inline ::std::string* RequestLog::mutable_referrer() {
  
  // @@protoc_insertion_point(field_mutable:google.appengine.logging.v1.RequestLog.referrer)
  return referrer_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RequestLog::release_referrer() {
  // @@protoc_insertion_point(field_release:google.appengine.logging.v1.RequestLog.referrer)
  
  return referrer_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RequestLog::set_allocated_referrer(::std::string* referrer) {
  if (referrer != NULL) {
    
  } else {
    
  }
  referrer_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), referrer);
  // @@protoc_insertion_point(field_set_allocated:google.appengine.logging.v1.RequestLog.referrer)
}

// string user_agent = 16;
inline void RequestLog::clear_user_agent() {
  user_agent_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RequestLog::user_agent() const {
  // @@protoc_insertion_point(field_get:google.appengine.logging.v1.RequestLog.user_agent)
  return user_agent_.GetNoArena();
}
inline void RequestLog::set_user_agent(const ::std::string& value) {
  
  user_agent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.appengine.logging.v1.RequestLog.user_agent)
}
#if LANG_CXX11
inline void RequestLog::set_user_agent(::std::string&& value) {
  
  user_agent_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.appengine.logging.v1.RequestLog.user_agent)
}
#endif
inline void RequestLog::set_user_agent(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  user_agent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.appengine.logging.v1.RequestLog.user_agent)
}
inline void RequestLog::set_user_agent(const char* value, size_t size) {
  
  user_agent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.appengine.logging.v1.RequestLog.user_agent)
}
inline ::std::string* RequestLog::mutable_user_agent() {
  
  // @@protoc_insertion_point(field_mutable:google.appengine.logging.v1.RequestLog.user_agent)
  return user_agent_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RequestLog::release_user_agent() {
  // @@protoc_insertion_point(field_release:google.appengine.logging.v1.RequestLog.user_agent)
  
  return user_agent_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RequestLog::set_allocated_user_agent(::std::string* user_agent) {
  if (user_agent != NULL) {
    
  } else {
    
  }
  user_agent_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user_agent);
  // @@protoc_insertion_point(field_set_allocated:google.appengine.logging.v1.RequestLog.user_agent)
}

// string nickname = 40;
inline void RequestLog::clear_nickname() {
  nickname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RequestLog::nickname() const {
  // @@protoc_insertion_point(field_get:google.appengine.logging.v1.RequestLog.nickname)
  return nickname_.GetNoArena();
}
inline void RequestLog::set_nickname(const ::std::string& value) {
  
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.appengine.logging.v1.RequestLog.nickname)
}
#if LANG_CXX11
inline void RequestLog::set_nickname(::std::string&& value) {
  
  nickname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.appengine.logging.v1.RequestLog.nickname)
}
#endif
inline void RequestLog::set_nickname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.appengine.logging.v1.RequestLog.nickname)
}
inline void RequestLog::set_nickname(const char* value, size_t size) {
  
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.appengine.logging.v1.RequestLog.nickname)
}
inline ::std::string* RequestLog::mutable_nickname() {
  
  // @@protoc_insertion_point(field_mutable:google.appengine.logging.v1.RequestLog.nickname)
  return nickname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RequestLog::release_nickname() {
  // @@protoc_insertion_point(field_release:google.appengine.logging.v1.RequestLog.nickname)
  
  return nickname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RequestLog::set_allocated_nickname(::std::string* nickname) {
  if (nickname != NULL) {
    
  } else {
    
  }
  nickname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), nickname);
  // @@protoc_insertion_point(field_set_allocated:google.appengine.logging.v1.RequestLog.nickname)
}

// string url_map_entry = 17;
inline void RequestLog::clear_url_map_entry() {
  url_map_entry_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RequestLog::url_map_entry() const {
  // @@protoc_insertion_point(field_get:google.appengine.logging.v1.RequestLog.url_map_entry)
  return url_map_entry_.GetNoArena();
}
inline void RequestLog::set_url_map_entry(const ::std::string& value) {
  
  url_map_entry_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.appengine.logging.v1.RequestLog.url_map_entry)
}
#if LANG_CXX11
inline void RequestLog::set_url_map_entry(::std::string&& value) {
  
  url_map_entry_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.appengine.logging.v1.RequestLog.url_map_entry)
}
#endif
inline void RequestLog::set_url_map_entry(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  url_map_entry_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.appengine.logging.v1.RequestLog.url_map_entry)
}
inline void RequestLog::set_url_map_entry(const char* value, size_t size) {
  
  url_map_entry_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.appengine.logging.v1.RequestLog.url_map_entry)
}
inline ::std::string* RequestLog::mutable_url_map_entry() {
  
  // @@protoc_insertion_point(field_mutable:google.appengine.logging.v1.RequestLog.url_map_entry)
  return url_map_entry_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RequestLog::release_url_map_entry() {
  // @@protoc_insertion_point(field_release:google.appengine.logging.v1.RequestLog.url_map_entry)
  
  return url_map_entry_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RequestLog::set_allocated_url_map_entry(::std::string* url_map_entry) {
  if (url_map_entry != NULL) {
    
  } else {
    
  }
  url_map_entry_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), url_map_entry);
  // @@protoc_insertion_point(field_set_allocated:google.appengine.logging.v1.RequestLog.url_map_entry)
}

// string host = 20;
inline void RequestLog::clear_host() {
  host_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RequestLog::host() const {
  // @@protoc_insertion_point(field_get:google.appengine.logging.v1.RequestLog.host)
  return host_.GetNoArena();
}
inline void RequestLog::set_host(const ::std::string& value) {
  
  host_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.appengine.logging.v1.RequestLog.host)
}
#if LANG_CXX11
inline void RequestLog::set_host(::std::string&& value) {
  
  host_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.appengine.logging.v1.RequestLog.host)
}
#endif
inline void RequestLog::set_host(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  host_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.appengine.logging.v1.RequestLog.host)
}
inline void RequestLog::set_host(const char* value, size_t size) {
  
  host_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.appengine.logging.v1.RequestLog.host)
}
inline ::std::string* RequestLog::mutable_host() {
  
  // @@protoc_insertion_point(field_mutable:google.appengine.logging.v1.RequestLog.host)
  return host_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RequestLog::release_host() {
  // @@protoc_insertion_point(field_release:google.appengine.logging.v1.RequestLog.host)
  
  return host_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RequestLog::set_allocated_host(::std::string* host) {
  if (host != NULL) {
    
  } else {
    
  }
  host_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), host);
  // @@protoc_insertion_point(field_set_allocated:google.appengine.logging.v1.RequestLog.host)
}

// double cost = 21;
inline void RequestLog::clear_cost() {
  cost_ = 0;
}
inline double RequestLog::cost() const {
  // @@protoc_insertion_point(field_get:google.appengine.logging.v1.RequestLog.cost)
  return cost_;
}
inline void RequestLog::set_cost(double value) {
  
  cost_ = value;
  // @@protoc_insertion_point(field_set:google.appengine.logging.v1.RequestLog.cost)
}

// string task_queue_name = 22;
inline void RequestLog::clear_task_queue_name() {
  task_queue_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RequestLog::task_queue_name() const {
  // @@protoc_insertion_point(field_get:google.appengine.logging.v1.RequestLog.task_queue_name)
  return task_queue_name_.GetNoArena();
}
inline void RequestLog::set_task_queue_name(const ::std::string& value) {
  
  task_queue_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.appengine.logging.v1.RequestLog.task_queue_name)
}
#if LANG_CXX11
inline void RequestLog::set_task_queue_name(::std::string&& value) {
  
  task_queue_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.appengine.logging.v1.RequestLog.task_queue_name)
}
#endif
inline void RequestLog::set_task_queue_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  task_queue_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.appengine.logging.v1.RequestLog.task_queue_name)
}
inline void RequestLog::set_task_queue_name(const char* value, size_t size) {
  
  task_queue_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.appengine.logging.v1.RequestLog.task_queue_name)
}
inline ::std::string* RequestLog::mutable_task_queue_name() {
  
  // @@protoc_insertion_point(field_mutable:google.appengine.logging.v1.RequestLog.task_queue_name)
  return task_queue_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RequestLog::release_task_queue_name() {
  // @@protoc_insertion_point(field_release:google.appengine.logging.v1.RequestLog.task_queue_name)
  
  return task_queue_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RequestLog::set_allocated_task_queue_name(::std::string* task_queue_name) {
  if (task_queue_name != NULL) {
    
  } else {
    
  }
  task_queue_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), task_queue_name);
  // @@protoc_insertion_point(field_set_allocated:google.appengine.logging.v1.RequestLog.task_queue_name)
}

// string task_name = 23;
inline void RequestLog::clear_task_name() {
  task_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RequestLog::task_name() const {
  // @@protoc_insertion_point(field_get:google.appengine.logging.v1.RequestLog.task_name)
  return task_name_.GetNoArena();
}
inline void RequestLog::set_task_name(const ::std::string& value) {
  
  task_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.appengine.logging.v1.RequestLog.task_name)
}
#if LANG_CXX11
inline void RequestLog::set_task_name(::std::string&& value) {
  
  task_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.appengine.logging.v1.RequestLog.task_name)
}
#endif
inline void RequestLog::set_task_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  task_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.appengine.logging.v1.RequestLog.task_name)
}
inline void RequestLog::set_task_name(const char* value, size_t size) {
  
  task_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.appengine.logging.v1.RequestLog.task_name)
}
inline ::std::string* RequestLog::mutable_task_name() {
  
  // @@protoc_insertion_point(field_mutable:google.appengine.logging.v1.RequestLog.task_name)
  return task_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RequestLog::release_task_name() {
  // @@protoc_insertion_point(field_release:google.appengine.logging.v1.RequestLog.task_name)
  
  return task_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RequestLog::set_allocated_task_name(::std::string* task_name) {
  if (task_name != NULL) {
    
  } else {
    
  }
  task_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), task_name);
  // @@protoc_insertion_point(field_set_allocated:google.appengine.logging.v1.RequestLog.task_name)
}

// bool was_loading_request = 24;
inline void RequestLog::clear_was_loading_request() {
  was_loading_request_ = false;
}
inline bool RequestLog::was_loading_request() const {
  // @@protoc_insertion_point(field_get:google.appengine.logging.v1.RequestLog.was_loading_request)
  return was_loading_request_;
}
inline void RequestLog::set_was_loading_request(bool value) {
  
  was_loading_request_ = value;
  // @@protoc_insertion_point(field_set:google.appengine.logging.v1.RequestLog.was_loading_request)
}

// .google.protobuf.Duration pending_time = 25;
inline bool RequestLog::has_pending_time() const {
  return this != internal_default_instance() && pending_time_ != NULL;
}
inline const ::google::protobuf::Duration& RequestLog::pending_time() const {
  const ::google::protobuf::Duration* p = pending_time_;
  // @@protoc_insertion_point(field_get:google.appengine.logging.v1.RequestLog.pending_time)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::Duration*>(
      &::google::protobuf::_Duration_default_instance_);
}
inline ::google::protobuf::Duration* RequestLog::release_pending_time() {
  // @@protoc_insertion_point(field_release:google.appengine.logging.v1.RequestLog.pending_time)
  
  ::google::protobuf::Duration* temp = pending_time_;
  pending_time_ = NULL;
  return temp;
}
inline ::google::protobuf::Duration* RequestLog::mutable_pending_time() {
  
  if (pending_time_ == NULL) {
    pending_time_ = new ::google::protobuf::Duration;
  }
  // @@protoc_insertion_point(field_mutable:google.appengine.logging.v1.RequestLog.pending_time)
  return pending_time_;
}
inline void RequestLog::set_allocated_pending_time(::google::protobuf::Duration* pending_time) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(pending_time_);
  }
  if (pending_time) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast< ::google::protobuf::MessageLite*>(pending_time)->GetArena();
    if (message_arena != submessage_arena) {
      pending_time = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, pending_time, submessage_arena);
    }
    
  } else {
    
  }
  pending_time_ = pending_time;
  // @@protoc_insertion_point(field_set_allocated:google.appengine.logging.v1.RequestLog.pending_time)
}

// int32 instance_index = 26;
inline void RequestLog::clear_instance_index() {
  instance_index_ = 0;
}
inline ::google::protobuf::int32 RequestLog::instance_index() const {
  // @@protoc_insertion_point(field_get:google.appengine.logging.v1.RequestLog.instance_index)
  return instance_index_;
}
inline void RequestLog::set_instance_index(::google::protobuf::int32 value) {
  
  instance_index_ = value;
  // @@protoc_insertion_point(field_set:google.appengine.logging.v1.RequestLog.instance_index)
}

// bool finished = 27;
inline void RequestLog::clear_finished() {
  finished_ = false;
}
inline bool RequestLog::finished() const {
  // @@protoc_insertion_point(field_get:google.appengine.logging.v1.RequestLog.finished)
  return finished_;
}
inline void RequestLog::set_finished(bool value) {
  
  finished_ = value;
  // @@protoc_insertion_point(field_set:google.appengine.logging.v1.RequestLog.finished)
}

// bool first = 42;
inline void RequestLog::clear_first() {
  first_ = false;
}
inline bool RequestLog::first() const {
  // @@protoc_insertion_point(field_get:google.appengine.logging.v1.RequestLog.first)
  return first_;
}
inline void RequestLog::set_first(bool value) {
  
  first_ = value;
  // @@protoc_insertion_point(field_set:google.appengine.logging.v1.RequestLog.first)
}

// string instance_id = 28;
inline void RequestLog::clear_instance_id() {
  instance_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RequestLog::instance_id() const {
  // @@protoc_insertion_point(field_get:google.appengine.logging.v1.RequestLog.instance_id)
  return instance_id_.GetNoArena();
}
inline void RequestLog::set_instance_id(const ::std::string& value) {
  
  instance_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.appengine.logging.v1.RequestLog.instance_id)
}
#if LANG_CXX11
inline void RequestLog::set_instance_id(::std::string&& value) {
  
  instance_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.appengine.logging.v1.RequestLog.instance_id)
}
#endif
inline void RequestLog::set_instance_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  instance_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.appengine.logging.v1.RequestLog.instance_id)
}
inline void RequestLog::set_instance_id(const char* value, size_t size) {
  
  instance_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.appengine.logging.v1.RequestLog.instance_id)
}
inline ::std::string* RequestLog::mutable_instance_id() {
  
  // @@protoc_insertion_point(field_mutable:google.appengine.logging.v1.RequestLog.instance_id)
  return instance_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RequestLog::release_instance_id() {
  // @@protoc_insertion_point(field_release:google.appengine.logging.v1.RequestLog.instance_id)
  
  return instance_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RequestLog::set_allocated_instance_id(::std::string* instance_id) {
  if (instance_id != NULL) {
    
  } else {
    
  }
  instance_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), instance_id);
  // @@protoc_insertion_point(field_set_allocated:google.appengine.logging.v1.RequestLog.instance_id)
}

// repeated .google.appengine.logging.v1.LogLine line = 29;
inline int RequestLog::line_size() const {
  return line_.size();
}
inline void RequestLog::clear_line() {
  line_.Clear();
}
inline const ::google::appengine::logging::v1::LogLine& RequestLog::line(int index) const {
  // @@protoc_insertion_point(field_get:google.appengine.logging.v1.RequestLog.line)
  return line_.Get(index);
}
inline ::google::appengine::logging::v1::LogLine* RequestLog::mutable_line(int index) {
  // @@protoc_insertion_point(field_mutable:google.appengine.logging.v1.RequestLog.line)
  return line_.Mutable(index);
}
inline ::google::appengine::logging::v1::LogLine* RequestLog::add_line() {
  // @@protoc_insertion_point(field_add:google.appengine.logging.v1.RequestLog.line)
  return line_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::google::appengine::logging::v1::LogLine >*
RequestLog::mutable_line() {
  // @@protoc_insertion_point(field_mutable_list:google.appengine.logging.v1.RequestLog.line)
  return &line_;
}
inline const ::google::protobuf::RepeatedPtrField< ::google::appengine::logging::v1::LogLine >&
RequestLog::line() const {
  // @@protoc_insertion_point(field_list:google.appengine.logging.v1.RequestLog.line)
  return line_;
}

// string app_engine_release = 38;
inline void RequestLog::clear_app_engine_release() {
  app_engine_release_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RequestLog::app_engine_release() const {
  // @@protoc_insertion_point(field_get:google.appengine.logging.v1.RequestLog.app_engine_release)
  return app_engine_release_.GetNoArena();
}
inline void RequestLog::set_app_engine_release(const ::std::string& value) {
  
  app_engine_release_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.appengine.logging.v1.RequestLog.app_engine_release)
}
#if LANG_CXX11
inline void RequestLog::set_app_engine_release(::std::string&& value) {
  
  app_engine_release_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.appengine.logging.v1.RequestLog.app_engine_release)
}
#endif
inline void RequestLog::set_app_engine_release(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  app_engine_release_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.appengine.logging.v1.RequestLog.app_engine_release)
}
inline void RequestLog::set_app_engine_release(const char* value, size_t size) {
  
  app_engine_release_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.appengine.logging.v1.RequestLog.app_engine_release)
}
inline ::std::string* RequestLog::mutable_app_engine_release() {
  
  // @@protoc_insertion_point(field_mutable:google.appengine.logging.v1.RequestLog.app_engine_release)
  return app_engine_release_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RequestLog::release_app_engine_release() {
  // @@protoc_insertion_point(field_release:google.appengine.logging.v1.RequestLog.app_engine_release)
  
  return app_engine_release_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RequestLog::set_allocated_app_engine_release(::std::string* app_engine_release) {
  if (app_engine_release != NULL) {
    
  } else {
    
  }
  app_engine_release_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), app_engine_release);
  // @@protoc_insertion_point(field_set_allocated:google.appengine.logging.v1.RequestLog.app_engine_release)
}

// string trace_id = 39;
inline void RequestLog::clear_trace_id() {
  trace_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RequestLog::trace_id() const {
  // @@protoc_insertion_point(field_get:google.appengine.logging.v1.RequestLog.trace_id)
  return trace_id_.GetNoArena();
}
inline void RequestLog::set_trace_id(const ::std::string& value) {
  
  trace_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.appengine.logging.v1.RequestLog.trace_id)
}
#if LANG_CXX11
inline void RequestLog::set_trace_id(::std::string&& value) {
  
  trace_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.appengine.logging.v1.RequestLog.trace_id)
}
#endif
inline void RequestLog::set_trace_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  trace_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.appengine.logging.v1.RequestLog.trace_id)
}
inline void RequestLog::set_trace_id(const char* value, size_t size) {
  
  trace_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.appengine.logging.v1.RequestLog.trace_id)
}
inline ::std::string* RequestLog::mutable_trace_id() {
  
  // @@protoc_insertion_point(field_mutable:google.appengine.logging.v1.RequestLog.trace_id)
  return trace_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RequestLog::release_trace_id() {
  // @@protoc_insertion_point(field_release:google.appengine.logging.v1.RequestLog.trace_id)
  
  return trace_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RequestLog::set_allocated_trace_id(::std::string* trace_id) {
  if (trace_id != NULL) {
    
  } else {
    
  }
  trace_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), trace_id);
  // @@protoc_insertion_point(field_set_allocated:google.appengine.logging.v1.RequestLog.trace_id)
}

// repeated .google.appengine.logging.v1.SourceReference source_reference = 41;
inline int RequestLog::source_reference_size() const {
  return source_reference_.size();
}
inline void RequestLog::clear_source_reference() {
  source_reference_.Clear();
}
inline const ::google::appengine::logging::v1::SourceReference& RequestLog::source_reference(int index) const {
  // @@protoc_insertion_point(field_get:google.appengine.logging.v1.RequestLog.source_reference)
  return source_reference_.Get(index);
}
inline ::google::appengine::logging::v1::SourceReference* RequestLog::mutable_source_reference(int index) {
  // @@protoc_insertion_point(field_mutable:google.appengine.logging.v1.RequestLog.source_reference)
  return source_reference_.Mutable(index);
}
inline ::google::appengine::logging::v1::SourceReference* RequestLog::add_source_reference() {
  // @@protoc_insertion_point(field_add:google.appengine.logging.v1.RequestLog.source_reference)
  return source_reference_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::google::appengine::logging::v1::SourceReference >*
RequestLog::mutable_source_reference() {
  // @@protoc_insertion_point(field_mutable_list:google.appengine.logging.v1.RequestLog.source_reference)
  return &source_reference_;
}
inline const ::google::protobuf::RepeatedPtrField< ::google::appengine::logging::v1::SourceReference >&
RequestLog::source_reference() const {
  // @@protoc_insertion_point(field_list:google.appengine.logging.v1.RequestLog.source_reference)
  return source_reference_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace logging
}  // namespace appengine
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_google_2fappengine_2flogging_2fv1_2frequest_5flog_2eproto__INCLUDED
