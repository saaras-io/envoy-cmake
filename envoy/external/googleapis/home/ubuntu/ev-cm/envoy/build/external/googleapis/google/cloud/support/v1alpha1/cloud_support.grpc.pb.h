// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: google/cloud/support/v1alpha1/cloud_support.proto
// Original file comments:
// Copyright 2017 Google Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
#ifndef GRPC_google_2fcloud_2fsupport_2fv1alpha1_2fcloud_5fsupport_2eproto__INCLUDED
#define GRPC_google_2fcloud_2fsupport_2fv1alpha1_2fcloud_5fsupport_2eproto__INCLUDED

#include "google/cloud/support/v1alpha1/cloud_support.pb.h"

#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace grpc {
class CompletionQueue;
class Channel;
class ServerCompletionQueue;
class ServerContext;
}  // namespace grpc

namespace google {
namespace cloud {
namespace support {
namespace v1alpha1 {

// Retrieves the list of Google Cloud Platform Support accounts and manages
// support cases associated with them.
class CloudSupport final {
 public:
  static constexpr char const* service_full_name() {
    return "google.cloud.support.v1alpha1.CloudSupport";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Retrieves the support account details given an account identifier.
    // The authenticated user calling this method must be the account owner.
    virtual ::grpc::Status GetSupportAccount(::grpc::ClientContext* context, const ::google::cloud::support::v1alpha1::GetSupportAccountRequest& request, ::google::cloud::support::common::SupportAccount* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::support::common::SupportAccount>> AsyncGetSupportAccount(::grpc::ClientContext* context, const ::google::cloud::support::v1alpha1::GetSupportAccountRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::support::common::SupportAccount>>(AsyncGetSupportAccountRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::support::common::SupportAccount>> PrepareAsyncGetSupportAccount(::grpc::ClientContext* context, const ::google::cloud::support::v1alpha1::GetSupportAccountRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::support::common::SupportAccount>>(PrepareAsyncGetSupportAccountRaw(context, request, cq));
    }
    // Retrieves the list of accounts the current authenticated user has access
    // to.
    virtual ::grpc::Status ListSupportAccounts(::grpc::ClientContext* context, const ::google::cloud::support::v1alpha1::ListSupportAccountsRequest& request, ::google::cloud::support::v1alpha1::ListSupportAccountsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::support::v1alpha1::ListSupportAccountsResponse>> AsyncListSupportAccounts(::grpc::ClientContext* context, const ::google::cloud::support::v1alpha1::ListSupportAccountsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::support::v1alpha1::ListSupportAccountsResponse>>(AsyncListSupportAccountsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::support::v1alpha1::ListSupportAccountsResponse>> PrepareAsyncListSupportAccounts(::grpc::ClientContext* context, const ::google::cloud::support::v1alpha1::ListSupportAccountsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::support::v1alpha1::ListSupportAccountsResponse>>(PrepareAsyncListSupportAccountsRaw(context, request, cq));
    }
    // Retrieves the details for a support case. The current authenticated user
    // calling this method must have permissions to view this case.
    virtual ::grpc::Status GetCase(::grpc::ClientContext* context, const ::google::cloud::support::v1alpha1::GetCaseRequest& request, ::google::cloud::support::common::Case* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::support::common::Case>> AsyncGetCase(::grpc::ClientContext* context, const ::google::cloud::support::v1alpha1::GetCaseRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::support::common::Case>>(AsyncGetCaseRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::support::common::Case>> PrepareAsyncGetCase(::grpc::ClientContext* context, const ::google::cloud::support::v1alpha1::GetCaseRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::support::common::Case>>(PrepareAsyncGetCaseRaw(context, request, cq));
    }
    // Retrieves the list of support cases associated with an account. The current
    // authenticated user must have the permission to list and view these cases.
    virtual ::grpc::Status ListCases(::grpc::ClientContext* context, const ::google::cloud::support::v1alpha1::ListCasesRequest& request, ::google::cloud::support::v1alpha1::ListCasesResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::support::v1alpha1::ListCasesResponse>> AsyncListCases(::grpc::ClientContext* context, const ::google::cloud::support::v1alpha1::ListCasesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::support::v1alpha1::ListCasesResponse>>(AsyncListCasesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::support::v1alpha1::ListCasesResponse>> PrepareAsyncListCases(::grpc::ClientContext* context, const ::google::cloud::support::v1alpha1::ListCasesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::support::v1alpha1::ListCasesResponse>>(PrepareAsyncListCasesRaw(context, request, cq));
    }
    // Lists all comments from a case.
    virtual ::grpc::Status ListComments(::grpc::ClientContext* context, const ::google::cloud::support::v1alpha1::ListCommentsRequest& request, ::google::cloud::support::v1alpha1::ListCommentsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::support::v1alpha1::ListCommentsResponse>> AsyncListComments(::grpc::ClientContext* context, const ::google::cloud::support::v1alpha1::ListCommentsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::support::v1alpha1::ListCommentsResponse>>(AsyncListCommentsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::support::v1alpha1::ListCommentsResponse>> PrepareAsyncListComments(::grpc::ClientContext* context, const ::google::cloud::support::v1alpha1::ListCommentsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::support::v1alpha1::ListCommentsResponse>>(PrepareAsyncListCommentsRaw(context, request, cq));
    }
    // Creates a case and associates it with a
    // [SupportAccount][google.cloud.support.v1alpha2.SupportAcccount]. The
    // authenticated user attempting this action must have permissions to create a
    // `Case` under that [SupportAccount].
    virtual ::grpc::Status CreateCase(::grpc::ClientContext* context, const ::google::cloud::support::v1alpha1::CreateCaseRequest& request, ::google::cloud::support::common::Case* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::support::common::Case>> AsyncCreateCase(::grpc::ClientContext* context, const ::google::cloud::support::v1alpha1::CreateCaseRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::support::common::Case>>(AsyncCreateCaseRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::support::common::Case>> PrepareAsyncCreateCase(::grpc::ClientContext* context, const ::google::cloud::support::v1alpha1::CreateCaseRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::support::common::Case>>(PrepareAsyncCreateCaseRaw(context, request, cq));
    }
    // Updates a support case. Only a small set of details (priority, subject and
    // cc_address) can be update after a case is created.
    virtual ::grpc::Status UpdateCase(::grpc::ClientContext* context, const ::google::cloud::support::v1alpha1::UpdateCaseRequest& request, ::google::cloud::support::common::Case* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::support::common::Case>> AsyncUpdateCase(::grpc::ClientContext* context, const ::google::cloud::support::v1alpha1::UpdateCaseRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::support::common::Case>>(AsyncUpdateCaseRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::support::common::Case>> PrepareAsyncUpdateCase(::grpc::ClientContext* context, const ::google::cloud::support::v1alpha1::UpdateCaseRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::support::common::Case>>(PrepareAsyncUpdateCaseRaw(context, request, cq));
    }
    // Adds a new comment to a case.
    virtual ::grpc::Status CreateComment(::grpc::ClientContext* context, const ::google::cloud::support::v1alpha1::CreateCommentRequest& request, ::google::cloud::support::common::Comment* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::support::common::Comment>> AsyncCreateComment(::grpc::ClientContext* context, const ::google::cloud::support::v1alpha1::CreateCommentRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::support::common::Comment>>(AsyncCreateCommentRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::support::common::Comment>> PrepareAsyncCreateComment(::grpc::ClientContext* context, const ::google::cloud::support::v1alpha1::CreateCommentRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::support::common::Comment>>(PrepareAsyncCreateCommentRaw(context, request, cq));
    }
    // Retrieves the taxonomy of product categories and components to be used
    // while creating a support case.
    virtual ::grpc::Status GetIssueTaxonomy(::grpc::ClientContext* context, const ::google::cloud::support::v1alpha1::GetIssueTaxonomyRequest& request, ::google::cloud::support::common::IssueTaxonomy* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::support::common::IssueTaxonomy>> AsyncGetIssueTaxonomy(::grpc::ClientContext* context, const ::google::cloud::support::v1alpha1::GetIssueTaxonomyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::support::common::IssueTaxonomy>>(AsyncGetIssueTaxonomyRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::support::common::IssueTaxonomy>> PrepareAsyncGetIssueTaxonomy(::grpc::ClientContext* context, const ::google::cloud::support::v1alpha1::GetIssueTaxonomyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::support::common::IssueTaxonomy>>(PrepareAsyncGetIssueTaxonomyRaw(context, request, cq));
    }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::support::common::SupportAccount>* AsyncGetSupportAccountRaw(::grpc::ClientContext* context, const ::google::cloud::support::v1alpha1::GetSupportAccountRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::support::common::SupportAccount>* PrepareAsyncGetSupportAccountRaw(::grpc::ClientContext* context, const ::google::cloud::support::v1alpha1::GetSupportAccountRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::support::v1alpha1::ListSupportAccountsResponse>* AsyncListSupportAccountsRaw(::grpc::ClientContext* context, const ::google::cloud::support::v1alpha1::ListSupportAccountsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::support::v1alpha1::ListSupportAccountsResponse>* PrepareAsyncListSupportAccountsRaw(::grpc::ClientContext* context, const ::google::cloud::support::v1alpha1::ListSupportAccountsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::support::common::Case>* AsyncGetCaseRaw(::grpc::ClientContext* context, const ::google::cloud::support::v1alpha1::GetCaseRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::support::common::Case>* PrepareAsyncGetCaseRaw(::grpc::ClientContext* context, const ::google::cloud::support::v1alpha1::GetCaseRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::support::v1alpha1::ListCasesResponse>* AsyncListCasesRaw(::grpc::ClientContext* context, const ::google::cloud::support::v1alpha1::ListCasesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::support::v1alpha1::ListCasesResponse>* PrepareAsyncListCasesRaw(::grpc::ClientContext* context, const ::google::cloud::support::v1alpha1::ListCasesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::support::v1alpha1::ListCommentsResponse>* AsyncListCommentsRaw(::grpc::ClientContext* context, const ::google::cloud::support::v1alpha1::ListCommentsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::support::v1alpha1::ListCommentsResponse>* PrepareAsyncListCommentsRaw(::grpc::ClientContext* context, const ::google::cloud::support::v1alpha1::ListCommentsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::support::common::Case>* AsyncCreateCaseRaw(::grpc::ClientContext* context, const ::google::cloud::support::v1alpha1::CreateCaseRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::support::common::Case>* PrepareAsyncCreateCaseRaw(::grpc::ClientContext* context, const ::google::cloud::support::v1alpha1::CreateCaseRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::support::common::Case>* AsyncUpdateCaseRaw(::grpc::ClientContext* context, const ::google::cloud::support::v1alpha1::UpdateCaseRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::support::common::Case>* PrepareAsyncUpdateCaseRaw(::grpc::ClientContext* context, const ::google::cloud::support::v1alpha1::UpdateCaseRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::support::common::Comment>* AsyncCreateCommentRaw(::grpc::ClientContext* context, const ::google::cloud::support::v1alpha1::CreateCommentRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::support::common::Comment>* PrepareAsyncCreateCommentRaw(::grpc::ClientContext* context, const ::google::cloud::support::v1alpha1::CreateCommentRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::support::common::IssueTaxonomy>* AsyncGetIssueTaxonomyRaw(::grpc::ClientContext* context, const ::google::cloud::support::v1alpha1::GetIssueTaxonomyRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::support::common::IssueTaxonomy>* PrepareAsyncGetIssueTaxonomyRaw(::grpc::ClientContext* context, const ::google::cloud::support::v1alpha1::GetIssueTaxonomyRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status GetSupportAccount(::grpc::ClientContext* context, const ::google::cloud::support::v1alpha1::GetSupportAccountRequest& request, ::google::cloud::support::common::SupportAccount* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::cloud::support::common::SupportAccount>> AsyncGetSupportAccount(::grpc::ClientContext* context, const ::google::cloud::support::v1alpha1::GetSupportAccountRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::cloud::support::common::SupportAccount>>(AsyncGetSupportAccountRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::cloud::support::common::SupportAccount>> PrepareAsyncGetSupportAccount(::grpc::ClientContext* context, const ::google::cloud::support::v1alpha1::GetSupportAccountRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::cloud::support::common::SupportAccount>>(PrepareAsyncGetSupportAccountRaw(context, request, cq));
    }
    ::grpc::Status ListSupportAccounts(::grpc::ClientContext* context, const ::google::cloud::support::v1alpha1::ListSupportAccountsRequest& request, ::google::cloud::support::v1alpha1::ListSupportAccountsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::cloud::support::v1alpha1::ListSupportAccountsResponse>> AsyncListSupportAccounts(::grpc::ClientContext* context, const ::google::cloud::support::v1alpha1::ListSupportAccountsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::cloud::support::v1alpha1::ListSupportAccountsResponse>>(AsyncListSupportAccountsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::cloud::support::v1alpha1::ListSupportAccountsResponse>> PrepareAsyncListSupportAccounts(::grpc::ClientContext* context, const ::google::cloud::support::v1alpha1::ListSupportAccountsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::cloud::support::v1alpha1::ListSupportAccountsResponse>>(PrepareAsyncListSupportAccountsRaw(context, request, cq));
    }
    ::grpc::Status GetCase(::grpc::ClientContext* context, const ::google::cloud::support::v1alpha1::GetCaseRequest& request, ::google::cloud::support::common::Case* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::cloud::support::common::Case>> AsyncGetCase(::grpc::ClientContext* context, const ::google::cloud::support::v1alpha1::GetCaseRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::cloud::support::common::Case>>(AsyncGetCaseRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::cloud::support::common::Case>> PrepareAsyncGetCase(::grpc::ClientContext* context, const ::google::cloud::support::v1alpha1::GetCaseRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::cloud::support::common::Case>>(PrepareAsyncGetCaseRaw(context, request, cq));
    }
    ::grpc::Status ListCases(::grpc::ClientContext* context, const ::google::cloud::support::v1alpha1::ListCasesRequest& request, ::google::cloud::support::v1alpha1::ListCasesResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::cloud::support::v1alpha1::ListCasesResponse>> AsyncListCases(::grpc::ClientContext* context, const ::google::cloud::support::v1alpha1::ListCasesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::cloud::support::v1alpha1::ListCasesResponse>>(AsyncListCasesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::cloud::support::v1alpha1::ListCasesResponse>> PrepareAsyncListCases(::grpc::ClientContext* context, const ::google::cloud::support::v1alpha1::ListCasesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::cloud::support::v1alpha1::ListCasesResponse>>(PrepareAsyncListCasesRaw(context, request, cq));
    }
    ::grpc::Status ListComments(::grpc::ClientContext* context, const ::google::cloud::support::v1alpha1::ListCommentsRequest& request, ::google::cloud::support::v1alpha1::ListCommentsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::cloud::support::v1alpha1::ListCommentsResponse>> AsyncListComments(::grpc::ClientContext* context, const ::google::cloud::support::v1alpha1::ListCommentsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::cloud::support::v1alpha1::ListCommentsResponse>>(AsyncListCommentsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::cloud::support::v1alpha1::ListCommentsResponse>> PrepareAsyncListComments(::grpc::ClientContext* context, const ::google::cloud::support::v1alpha1::ListCommentsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::cloud::support::v1alpha1::ListCommentsResponse>>(PrepareAsyncListCommentsRaw(context, request, cq));
    }
    ::grpc::Status CreateCase(::grpc::ClientContext* context, const ::google::cloud::support::v1alpha1::CreateCaseRequest& request, ::google::cloud::support::common::Case* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::cloud::support::common::Case>> AsyncCreateCase(::grpc::ClientContext* context, const ::google::cloud::support::v1alpha1::CreateCaseRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::cloud::support::common::Case>>(AsyncCreateCaseRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::cloud::support::common::Case>> PrepareAsyncCreateCase(::grpc::ClientContext* context, const ::google::cloud::support::v1alpha1::CreateCaseRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::cloud::support::common::Case>>(PrepareAsyncCreateCaseRaw(context, request, cq));
    }
    ::grpc::Status UpdateCase(::grpc::ClientContext* context, const ::google::cloud::support::v1alpha1::UpdateCaseRequest& request, ::google::cloud::support::common::Case* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::cloud::support::common::Case>> AsyncUpdateCase(::grpc::ClientContext* context, const ::google::cloud::support::v1alpha1::UpdateCaseRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::cloud::support::common::Case>>(AsyncUpdateCaseRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::cloud::support::common::Case>> PrepareAsyncUpdateCase(::grpc::ClientContext* context, const ::google::cloud::support::v1alpha1::UpdateCaseRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::cloud::support::common::Case>>(PrepareAsyncUpdateCaseRaw(context, request, cq));
    }
    ::grpc::Status CreateComment(::grpc::ClientContext* context, const ::google::cloud::support::v1alpha1::CreateCommentRequest& request, ::google::cloud::support::common::Comment* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::cloud::support::common::Comment>> AsyncCreateComment(::grpc::ClientContext* context, const ::google::cloud::support::v1alpha1::CreateCommentRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::cloud::support::common::Comment>>(AsyncCreateCommentRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::cloud::support::common::Comment>> PrepareAsyncCreateComment(::grpc::ClientContext* context, const ::google::cloud::support::v1alpha1::CreateCommentRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::cloud::support::common::Comment>>(PrepareAsyncCreateCommentRaw(context, request, cq));
    }
    ::grpc::Status GetIssueTaxonomy(::grpc::ClientContext* context, const ::google::cloud::support::v1alpha1::GetIssueTaxonomyRequest& request, ::google::cloud::support::common::IssueTaxonomy* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::cloud::support::common::IssueTaxonomy>> AsyncGetIssueTaxonomy(::grpc::ClientContext* context, const ::google::cloud::support::v1alpha1::GetIssueTaxonomyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::cloud::support::common::IssueTaxonomy>>(AsyncGetIssueTaxonomyRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::cloud::support::common::IssueTaxonomy>> PrepareAsyncGetIssueTaxonomy(::grpc::ClientContext* context, const ::google::cloud::support::v1alpha1::GetIssueTaxonomyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::cloud::support::common::IssueTaxonomy>>(PrepareAsyncGetIssueTaxonomyRaw(context, request, cq));
    }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    ::grpc::ClientAsyncResponseReader< ::google::cloud::support::common::SupportAccount>* AsyncGetSupportAccountRaw(::grpc::ClientContext* context, const ::google::cloud::support::v1alpha1::GetSupportAccountRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::cloud::support::common::SupportAccount>* PrepareAsyncGetSupportAccountRaw(::grpc::ClientContext* context, const ::google::cloud::support::v1alpha1::GetSupportAccountRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::cloud::support::v1alpha1::ListSupportAccountsResponse>* AsyncListSupportAccountsRaw(::grpc::ClientContext* context, const ::google::cloud::support::v1alpha1::ListSupportAccountsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::cloud::support::v1alpha1::ListSupportAccountsResponse>* PrepareAsyncListSupportAccountsRaw(::grpc::ClientContext* context, const ::google::cloud::support::v1alpha1::ListSupportAccountsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::cloud::support::common::Case>* AsyncGetCaseRaw(::grpc::ClientContext* context, const ::google::cloud::support::v1alpha1::GetCaseRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::cloud::support::common::Case>* PrepareAsyncGetCaseRaw(::grpc::ClientContext* context, const ::google::cloud::support::v1alpha1::GetCaseRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::cloud::support::v1alpha1::ListCasesResponse>* AsyncListCasesRaw(::grpc::ClientContext* context, const ::google::cloud::support::v1alpha1::ListCasesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::cloud::support::v1alpha1::ListCasesResponse>* PrepareAsyncListCasesRaw(::grpc::ClientContext* context, const ::google::cloud::support::v1alpha1::ListCasesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::cloud::support::v1alpha1::ListCommentsResponse>* AsyncListCommentsRaw(::grpc::ClientContext* context, const ::google::cloud::support::v1alpha1::ListCommentsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::cloud::support::v1alpha1::ListCommentsResponse>* PrepareAsyncListCommentsRaw(::grpc::ClientContext* context, const ::google::cloud::support::v1alpha1::ListCommentsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::cloud::support::common::Case>* AsyncCreateCaseRaw(::grpc::ClientContext* context, const ::google::cloud::support::v1alpha1::CreateCaseRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::cloud::support::common::Case>* PrepareAsyncCreateCaseRaw(::grpc::ClientContext* context, const ::google::cloud::support::v1alpha1::CreateCaseRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::cloud::support::common::Case>* AsyncUpdateCaseRaw(::grpc::ClientContext* context, const ::google::cloud::support::v1alpha1::UpdateCaseRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::cloud::support::common::Case>* PrepareAsyncUpdateCaseRaw(::grpc::ClientContext* context, const ::google::cloud::support::v1alpha1::UpdateCaseRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::cloud::support::common::Comment>* AsyncCreateCommentRaw(::grpc::ClientContext* context, const ::google::cloud::support::v1alpha1::CreateCommentRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::cloud::support::common::Comment>* PrepareAsyncCreateCommentRaw(::grpc::ClientContext* context, const ::google::cloud::support::v1alpha1::CreateCommentRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::cloud::support::common::IssueTaxonomy>* AsyncGetIssueTaxonomyRaw(::grpc::ClientContext* context, const ::google::cloud::support::v1alpha1::GetIssueTaxonomyRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::cloud::support::common::IssueTaxonomy>* PrepareAsyncGetIssueTaxonomyRaw(::grpc::ClientContext* context, const ::google::cloud::support::v1alpha1::GetIssueTaxonomyRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_GetSupportAccount_;
    const ::grpc::internal::RpcMethod rpcmethod_ListSupportAccounts_;
    const ::grpc::internal::RpcMethod rpcmethod_GetCase_;
    const ::grpc::internal::RpcMethod rpcmethod_ListCases_;
    const ::grpc::internal::RpcMethod rpcmethod_ListComments_;
    const ::grpc::internal::RpcMethod rpcmethod_CreateCase_;
    const ::grpc::internal::RpcMethod rpcmethod_UpdateCase_;
    const ::grpc::internal::RpcMethod rpcmethod_CreateComment_;
    const ::grpc::internal::RpcMethod rpcmethod_GetIssueTaxonomy_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Retrieves the support account details given an account identifier.
    // The authenticated user calling this method must be the account owner.
    virtual ::grpc::Status GetSupportAccount(::grpc::ServerContext* context, const ::google::cloud::support::v1alpha1::GetSupportAccountRequest* request, ::google::cloud::support::common::SupportAccount* response);
    // Retrieves the list of accounts the current authenticated user has access
    // to.
    virtual ::grpc::Status ListSupportAccounts(::grpc::ServerContext* context, const ::google::cloud::support::v1alpha1::ListSupportAccountsRequest* request, ::google::cloud::support::v1alpha1::ListSupportAccountsResponse* response);
    // Retrieves the details for a support case. The current authenticated user
    // calling this method must have permissions to view this case.
    virtual ::grpc::Status GetCase(::grpc::ServerContext* context, const ::google::cloud::support::v1alpha1::GetCaseRequest* request, ::google::cloud::support::common::Case* response);
    // Retrieves the list of support cases associated with an account. The current
    // authenticated user must have the permission to list and view these cases.
    virtual ::grpc::Status ListCases(::grpc::ServerContext* context, const ::google::cloud::support::v1alpha1::ListCasesRequest* request, ::google::cloud::support::v1alpha1::ListCasesResponse* response);
    // Lists all comments from a case.
    virtual ::grpc::Status ListComments(::grpc::ServerContext* context, const ::google::cloud::support::v1alpha1::ListCommentsRequest* request, ::google::cloud::support::v1alpha1::ListCommentsResponse* response);
    // Creates a case and associates it with a
    // [SupportAccount][google.cloud.support.v1alpha2.SupportAcccount]. The
    // authenticated user attempting this action must have permissions to create a
    // `Case` under that [SupportAccount].
    virtual ::grpc::Status CreateCase(::grpc::ServerContext* context, const ::google::cloud::support::v1alpha1::CreateCaseRequest* request, ::google::cloud::support::common::Case* response);
    // Updates a support case. Only a small set of details (priority, subject and
    // cc_address) can be update after a case is created.
    virtual ::grpc::Status UpdateCase(::grpc::ServerContext* context, const ::google::cloud::support::v1alpha1::UpdateCaseRequest* request, ::google::cloud::support::common::Case* response);
    // Adds a new comment to a case.
    virtual ::grpc::Status CreateComment(::grpc::ServerContext* context, const ::google::cloud::support::v1alpha1::CreateCommentRequest* request, ::google::cloud::support::common::Comment* response);
    // Retrieves the taxonomy of product categories and components to be used
    // while creating a support case.
    virtual ::grpc::Status GetIssueTaxonomy(::grpc::ServerContext* context, const ::google::cloud::support::v1alpha1::GetIssueTaxonomyRequest* request, ::google::cloud::support::common::IssueTaxonomy* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_GetSupportAccount : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_GetSupportAccount() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_GetSupportAccount() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetSupportAccount(::grpc::ServerContext* context, const ::google::cloud::support::v1alpha1::GetSupportAccountRequest* request, ::google::cloud::support::common::SupportAccount* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetSupportAccount(::grpc::ServerContext* context, ::google::cloud::support::v1alpha1::GetSupportAccountRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::cloud::support::common::SupportAccount>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ListSupportAccounts : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_ListSupportAccounts() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_ListSupportAccounts() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListSupportAccounts(::grpc::ServerContext* context, const ::google::cloud::support::v1alpha1::ListSupportAccountsRequest* request, ::google::cloud::support::v1alpha1::ListSupportAccountsResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListSupportAccounts(::grpc::ServerContext* context, ::google::cloud::support::v1alpha1::ListSupportAccountsRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::cloud::support::v1alpha1::ListSupportAccountsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetCase : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_GetCase() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_GetCase() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetCase(::grpc::ServerContext* context, const ::google::cloud::support::v1alpha1::GetCaseRequest* request, ::google::cloud::support::common::Case* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetCase(::grpc::ServerContext* context, ::google::cloud::support::v1alpha1::GetCaseRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::cloud::support::common::Case>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ListCases : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_ListCases() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_ListCases() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListCases(::grpc::ServerContext* context, const ::google::cloud::support::v1alpha1::ListCasesRequest* request, ::google::cloud::support::v1alpha1::ListCasesResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListCases(::grpc::ServerContext* context, ::google::cloud::support::v1alpha1::ListCasesRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::cloud::support::v1alpha1::ListCasesResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ListComments : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_ListComments() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_ListComments() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListComments(::grpc::ServerContext* context, const ::google::cloud::support::v1alpha1::ListCommentsRequest* request, ::google::cloud::support::v1alpha1::ListCommentsResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListComments(::grpc::ServerContext* context, ::google::cloud::support::v1alpha1::ListCommentsRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::cloud::support::v1alpha1::ListCommentsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_CreateCase : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_CreateCase() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_CreateCase() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateCase(::grpc::ServerContext* context, const ::google::cloud::support::v1alpha1::CreateCaseRequest* request, ::google::cloud::support::common::Case* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateCase(::grpc::ServerContext* context, ::google::cloud::support::v1alpha1::CreateCaseRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::cloud::support::common::Case>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_UpdateCase : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_UpdateCase() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_UpdateCase() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateCase(::grpc::ServerContext* context, const ::google::cloud::support::v1alpha1::UpdateCaseRequest* request, ::google::cloud::support::common::Case* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateCase(::grpc::ServerContext* context, ::google::cloud::support::v1alpha1::UpdateCaseRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::cloud::support::common::Case>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_CreateComment : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_CreateComment() {
      ::grpc::Service::MarkMethodAsync(7);
    }
    ~WithAsyncMethod_CreateComment() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateComment(::grpc::ServerContext* context, const ::google::cloud::support::v1alpha1::CreateCommentRequest* request, ::google::cloud::support::common::Comment* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateComment(::grpc::ServerContext* context, ::google::cloud::support::v1alpha1::CreateCommentRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::cloud::support::common::Comment>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetIssueTaxonomy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_GetIssueTaxonomy() {
      ::grpc::Service::MarkMethodAsync(8);
    }
    ~WithAsyncMethod_GetIssueTaxonomy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetIssueTaxonomy(::grpc::ServerContext* context, const ::google::cloud::support::v1alpha1::GetIssueTaxonomyRequest* request, ::google::cloud::support::common::IssueTaxonomy* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetIssueTaxonomy(::grpc::ServerContext* context, ::google::cloud::support::v1alpha1::GetIssueTaxonomyRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::cloud::support::common::IssueTaxonomy>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_GetSupportAccount<WithAsyncMethod_ListSupportAccounts<WithAsyncMethod_GetCase<WithAsyncMethod_ListCases<WithAsyncMethod_ListComments<WithAsyncMethod_CreateCase<WithAsyncMethod_UpdateCase<WithAsyncMethod_CreateComment<WithAsyncMethod_GetIssueTaxonomy<Service > > > > > > > > > AsyncService;
  template <class BaseClass>
  class WithGenericMethod_GetSupportAccount : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_GetSupportAccount() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_GetSupportAccount() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetSupportAccount(::grpc::ServerContext* context, const ::google::cloud::support::v1alpha1::GetSupportAccountRequest* request, ::google::cloud::support::common::SupportAccount* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ListSupportAccounts : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_ListSupportAccounts() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_ListSupportAccounts() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListSupportAccounts(::grpc::ServerContext* context, const ::google::cloud::support::v1alpha1::ListSupportAccountsRequest* request, ::google::cloud::support::v1alpha1::ListSupportAccountsResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetCase : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_GetCase() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_GetCase() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetCase(::grpc::ServerContext* context, const ::google::cloud::support::v1alpha1::GetCaseRequest* request, ::google::cloud::support::common::Case* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ListCases : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_ListCases() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_ListCases() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListCases(::grpc::ServerContext* context, const ::google::cloud::support::v1alpha1::ListCasesRequest* request, ::google::cloud::support::v1alpha1::ListCasesResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ListComments : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_ListComments() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_ListComments() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListComments(::grpc::ServerContext* context, const ::google::cloud::support::v1alpha1::ListCommentsRequest* request, ::google::cloud::support::v1alpha1::ListCommentsResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_CreateCase : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_CreateCase() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_CreateCase() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateCase(::grpc::ServerContext* context, const ::google::cloud::support::v1alpha1::CreateCaseRequest* request, ::google::cloud::support::common::Case* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_UpdateCase : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_UpdateCase() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_UpdateCase() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateCase(::grpc::ServerContext* context, const ::google::cloud::support::v1alpha1::UpdateCaseRequest* request, ::google::cloud::support::common::Case* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_CreateComment : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_CreateComment() {
      ::grpc::Service::MarkMethodGeneric(7);
    }
    ~WithGenericMethod_CreateComment() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateComment(::grpc::ServerContext* context, const ::google::cloud::support::v1alpha1::CreateCommentRequest* request, ::google::cloud::support::common::Comment* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetIssueTaxonomy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_GetIssueTaxonomy() {
      ::grpc::Service::MarkMethodGeneric(8);
    }
    ~WithGenericMethod_GetIssueTaxonomy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetIssueTaxonomy(::grpc::ServerContext* context, const ::google::cloud::support::v1alpha1::GetIssueTaxonomyRequest* request, ::google::cloud::support::common::IssueTaxonomy* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetSupportAccount : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_GetSupportAccount() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler< ::google::cloud::support::v1alpha1::GetSupportAccountRequest, ::google::cloud::support::common::SupportAccount>(std::bind(&WithStreamedUnaryMethod_GetSupportAccount<BaseClass>::StreamedGetSupportAccount, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetSupportAccount() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetSupportAccount(::grpc::ServerContext* context, const ::google::cloud::support::v1alpha1::GetSupportAccountRequest* request, ::google::cloud::support::common::SupportAccount* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetSupportAccount(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::cloud::support::v1alpha1::GetSupportAccountRequest,::google::cloud::support::common::SupportAccount>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ListSupportAccounts : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_ListSupportAccounts() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler< ::google::cloud::support::v1alpha1::ListSupportAccountsRequest, ::google::cloud::support::v1alpha1::ListSupportAccountsResponse>(std::bind(&WithStreamedUnaryMethod_ListSupportAccounts<BaseClass>::StreamedListSupportAccounts, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_ListSupportAccounts() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ListSupportAccounts(::grpc::ServerContext* context, const ::google::cloud::support::v1alpha1::ListSupportAccountsRequest* request, ::google::cloud::support::v1alpha1::ListSupportAccountsResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedListSupportAccounts(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::cloud::support::v1alpha1::ListSupportAccountsRequest,::google::cloud::support::v1alpha1::ListSupportAccountsResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetCase : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_GetCase() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler< ::google::cloud::support::v1alpha1::GetCaseRequest, ::google::cloud::support::common::Case>(std::bind(&WithStreamedUnaryMethod_GetCase<BaseClass>::StreamedGetCase, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetCase() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetCase(::grpc::ServerContext* context, const ::google::cloud::support::v1alpha1::GetCaseRequest* request, ::google::cloud::support::common::Case* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetCase(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::cloud::support::v1alpha1::GetCaseRequest,::google::cloud::support::common::Case>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ListCases : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_ListCases() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler< ::google::cloud::support::v1alpha1::ListCasesRequest, ::google::cloud::support::v1alpha1::ListCasesResponse>(std::bind(&WithStreamedUnaryMethod_ListCases<BaseClass>::StreamedListCases, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_ListCases() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ListCases(::grpc::ServerContext* context, const ::google::cloud::support::v1alpha1::ListCasesRequest* request, ::google::cloud::support::v1alpha1::ListCasesResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedListCases(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::cloud::support::v1alpha1::ListCasesRequest,::google::cloud::support::v1alpha1::ListCasesResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ListComments : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_ListComments() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler< ::google::cloud::support::v1alpha1::ListCommentsRequest, ::google::cloud::support::v1alpha1::ListCommentsResponse>(std::bind(&WithStreamedUnaryMethod_ListComments<BaseClass>::StreamedListComments, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_ListComments() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ListComments(::grpc::ServerContext* context, const ::google::cloud::support::v1alpha1::ListCommentsRequest* request, ::google::cloud::support::v1alpha1::ListCommentsResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedListComments(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::cloud::support::v1alpha1::ListCommentsRequest,::google::cloud::support::v1alpha1::ListCommentsResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CreateCase : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_CreateCase() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler< ::google::cloud::support::v1alpha1::CreateCaseRequest, ::google::cloud::support::common::Case>(std::bind(&WithStreamedUnaryMethod_CreateCase<BaseClass>::StreamedCreateCase, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_CreateCase() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CreateCase(::grpc::ServerContext* context, const ::google::cloud::support::v1alpha1::CreateCaseRequest* request, ::google::cloud::support::common::Case* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCreateCase(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::cloud::support::v1alpha1::CreateCaseRequest,::google::cloud::support::common::Case>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_UpdateCase : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_UpdateCase() {
      ::grpc::Service::MarkMethodStreamed(6,
        new ::grpc::internal::StreamedUnaryHandler< ::google::cloud::support::v1alpha1::UpdateCaseRequest, ::google::cloud::support::common::Case>(std::bind(&WithStreamedUnaryMethod_UpdateCase<BaseClass>::StreamedUpdateCase, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_UpdateCase() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status UpdateCase(::grpc::ServerContext* context, const ::google::cloud::support::v1alpha1::UpdateCaseRequest* request, ::google::cloud::support::common::Case* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedUpdateCase(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::cloud::support::v1alpha1::UpdateCaseRequest,::google::cloud::support::common::Case>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CreateComment : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_CreateComment() {
      ::grpc::Service::MarkMethodStreamed(7,
        new ::grpc::internal::StreamedUnaryHandler< ::google::cloud::support::v1alpha1::CreateCommentRequest, ::google::cloud::support::common::Comment>(std::bind(&WithStreamedUnaryMethod_CreateComment<BaseClass>::StreamedCreateComment, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_CreateComment() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CreateComment(::grpc::ServerContext* context, const ::google::cloud::support::v1alpha1::CreateCommentRequest* request, ::google::cloud::support::common::Comment* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCreateComment(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::cloud::support::v1alpha1::CreateCommentRequest,::google::cloud::support::common::Comment>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetIssueTaxonomy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_GetIssueTaxonomy() {
      ::grpc::Service::MarkMethodStreamed(8,
        new ::grpc::internal::StreamedUnaryHandler< ::google::cloud::support::v1alpha1::GetIssueTaxonomyRequest, ::google::cloud::support::common::IssueTaxonomy>(std::bind(&WithStreamedUnaryMethod_GetIssueTaxonomy<BaseClass>::StreamedGetIssueTaxonomy, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetIssueTaxonomy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetIssueTaxonomy(::grpc::ServerContext* context, const ::google::cloud::support::v1alpha1::GetIssueTaxonomyRequest* request, ::google::cloud::support::common::IssueTaxonomy* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetIssueTaxonomy(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::cloud::support::v1alpha1::GetIssueTaxonomyRequest,::google::cloud::support::common::IssueTaxonomy>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_GetSupportAccount<WithStreamedUnaryMethod_ListSupportAccounts<WithStreamedUnaryMethod_GetCase<WithStreamedUnaryMethod_ListCases<WithStreamedUnaryMethod_ListComments<WithStreamedUnaryMethod_CreateCase<WithStreamedUnaryMethod_UpdateCase<WithStreamedUnaryMethod_CreateComment<WithStreamedUnaryMethod_GetIssueTaxonomy<Service > > > > > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_GetSupportAccount<WithStreamedUnaryMethod_ListSupportAccounts<WithStreamedUnaryMethod_GetCase<WithStreamedUnaryMethod_ListCases<WithStreamedUnaryMethod_ListComments<WithStreamedUnaryMethod_CreateCase<WithStreamedUnaryMethod_UpdateCase<WithStreamedUnaryMethod_CreateComment<WithStreamedUnaryMethod_GetIssueTaxonomy<Service > > > > > > > > > StreamedService;
};

}  // namespace v1alpha1
}  // namespace support
}  // namespace cloud
}  // namespace google


#endif  // GRPC_google_2fcloud_2fsupport_2fv1alpha1_2fcloud_5fsupport_2eproto__INCLUDED
