// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: google/cloud/videointelligence/v1beta2/video_intelligence.proto

#include "google/cloud/videointelligence/v1beta2/video_intelligence.pb.h"
#include "google/cloud/videointelligence/v1beta2/video_intelligence.grpc.pb.h"

#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace google {
namespace cloud {
namespace videointelligence {
namespace v1beta2 {

static const char* VideoIntelligenceService_method_names[] = {
  "/google.cloud.videointelligence.v1beta2.VideoIntelligenceService/AnnotateVideo",
};

std::unique_ptr< VideoIntelligenceService::Stub> VideoIntelligenceService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< VideoIntelligenceService::Stub> stub(new VideoIntelligenceService::Stub(channel));
  return stub;
}

VideoIntelligenceService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_AnnotateVideo_(VideoIntelligenceService_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status VideoIntelligenceService::Stub::AnnotateVideo(::grpc::ClientContext* context, const ::google::cloud::videointelligence::v1beta2::AnnotateVideoRequest& request, ::google::longrunning::Operation* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_AnnotateVideo_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::google::longrunning::Operation>* VideoIntelligenceService::Stub::AsyncAnnotateVideoRaw(::grpc::ClientContext* context, const ::google::cloud::videointelligence::v1beta2::AnnotateVideoRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::longrunning::Operation>::Create(channel_.get(), cq, rpcmethod_AnnotateVideo_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::google::longrunning::Operation>* VideoIntelligenceService::Stub::PrepareAsyncAnnotateVideoRaw(::grpc::ClientContext* context, const ::google::cloud::videointelligence::v1beta2::AnnotateVideoRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::longrunning::Operation>::Create(channel_.get(), cq, rpcmethod_AnnotateVideo_, context, request, false);
}

VideoIntelligenceService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      VideoIntelligenceService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< VideoIntelligenceService::Service, ::google::cloud::videointelligence::v1beta2::AnnotateVideoRequest, ::google::longrunning::Operation>(
          std::mem_fn(&VideoIntelligenceService::Service::AnnotateVideo), this)));
}

VideoIntelligenceService::Service::~Service() {
}

::grpc::Status VideoIntelligenceService::Service::AnnotateVideo(::grpc::ServerContext* context, const ::google::cloud::videointelligence::v1beta2::AnnotateVideoRequest* request, ::google::longrunning::Operation* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace google
}  // namespace cloud
}  // namespace videointelligence
}  // namespace v1beta2

