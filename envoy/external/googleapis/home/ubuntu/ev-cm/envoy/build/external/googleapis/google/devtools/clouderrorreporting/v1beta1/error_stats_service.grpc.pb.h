// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: google/devtools/clouderrorreporting/v1beta1/error_stats_service.proto
// Original file comments:
// Copyright 2016 Google Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
#ifndef GRPC_google_2fdevtools_2fclouderrorreporting_2fv1beta1_2ferror_5fstats_5fservice_2eproto__INCLUDED
#define GRPC_google_2fdevtools_2fclouderrorreporting_2fv1beta1_2ferror_5fstats_5fservice_2eproto__INCLUDED

#include "google/devtools/clouderrorreporting/v1beta1/error_stats_service.pb.h"

#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace grpc {
class CompletionQueue;
class Channel;
class ServerCompletionQueue;
class ServerContext;
}  // namespace grpc

namespace google {
namespace devtools {
namespace clouderrorreporting {
namespace v1beta1 {

// An API for retrieving and managing error statistics as well as data for
// individual events.
class ErrorStatsService final {
 public:
  static constexpr char const* service_full_name() {
    return "google.devtools.clouderrorreporting.v1beta1.ErrorStatsService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Lists the specified groups.
    virtual ::grpc::Status ListGroupStats(::grpc::ClientContext* context, const ::google::devtools::clouderrorreporting::v1beta1::ListGroupStatsRequest& request, ::google::devtools::clouderrorreporting::v1beta1::ListGroupStatsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::devtools::clouderrorreporting::v1beta1::ListGroupStatsResponse>> AsyncListGroupStats(::grpc::ClientContext* context, const ::google::devtools::clouderrorreporting::v1beta1::ListGroupStatsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::devtools::clouderrorreporting::v1beta1::ListGroupStatsResponse>>(AsyncListGroupStatsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::devtools::clouderrorreporting::v1beta1::ListGroupStatsResponse>> PrepareAsyncListGroupStats(::grpc::ClientContext* context, const ::google::devtools::clouderrorreporting::v1beta1::ListGroupStatsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::devtools::clouderrorreporting::v1beta1::ListGroupStatsResponse>>(PrepareAsyncListGroupStatsRaw(context, request, cq));
    }
    // Lists the specified events.
    virtual ::grpc::Status ListEvents(::grpc::ClientContext* context, const ::google::devtools::clouderrorreporting::v1beta1::ListEventsRequest& request, ::google::devtools::clouderrorreporting::v1beta1::ListEventsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::devtools::clouderrorreporting::v1beta1::ListEventsResponse>> AsyncListEvents(::grpc::ClientContext* context, const ::google::devtools::clouderrorreporting::v1beta1::ListEventsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::devtools::clouderrorreporting::v1beta1::ListEventsResponse>>(AsyncListEventsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::devtools::clouderrorreporting::v1beta1::ListEventsResponse>> PrepareAsyncListEvents(::grpc::ClientContext* context, const ::google::devtools::clouderrorreporting::v1beta1::ListEventsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::devtools::clouderrorreporting::v1beta1::ListEventsResponse>>(PrepareAsyncListEventsRaw(context, request, cq));
    }
    // Deletes all error events of a given project.
    virtual ::grpc::Status DeleteEvents(::grpc::ClientContext* context, const ::google::devtools::clouderrorreporting::v1beta1::DeleteEventsRequest& request, ::google::devtools::clouderrorreporting::v1beta1::DeleteEventsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::devtools::clouderrorreporting::v1beta1::DeleteEventsResponse>> AsyncDeleteEvents(::grpc::ClientContext* context, const ::google::devtools::clouderrorreporting::v1beta1::DeleteEventsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::devtools::clouderrorreporting::v1beta1::DeleteEventsResponse>>(AsyncDeleteEventsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::devtools::clouderrorreporting::v1beta1::DeleteEventsResponse>> PrepareAsyncDeleteEvents(::grpc::ClientContext* context, const ::google::devtools::clouderrorreporting::v1beta1::DeleteEventsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::devtools::clouderrorreporting::v1beta1::DeleteEventsResponse>>(PrepareAsyncDeleteEventsRaw(context, request, cq));
    }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::devtools::clouderrorreporting::v1beta1::ListGroupStatsResponse>* AsyncListGroupStatsRaw(::grpc::ClientContext* context, const ::google::devtools::clouderrorreporting::v1beta1::ListGroupStatsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::devtools::clouderrorreporting::v1beta1::ListGroupStatsResponse>* PrepareAsyncListGroupStatsRaw(::grpc::ClientContext* context, const ::google::devtools::clouderrorreporting::v1beta1::ListGroupStatsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::devtools::clouderrorreporting::v1beta1::ListEventsResponse>* AsyncListEventsRaw(::grpc::ClientContext* context, const ::google::devtools::clouderrorreporting::v1beta1::ListEventsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::devtools::clouderrorreporting::v1beta1::ListEventsResponse>* PrepareAsyncListEventsRaw(::grpc::ClientContext* context, const ::google::devtools::clouderrorreporting::v1beta1::ListEventsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::devtools::clouderrorreporting::v1beta1::DeleteEventsResponse>* AsyncDeleteEventsRaw(::grpc::ClientContext* context, const ::google::devtools::clouderrorreporting::v1beta1::DeleteEventsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::devtools::clouderrorreporting::v1beta1::DeleteEventsResponse>* PrepareAsyncDeleteEventsRaw(::grpc::ClientContext* context, const ::google::devtools::clouderrorreporting::v1beta1::DeleteEventsRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status ListGroupStats(::grpc::ClientContext* context, const ::google::devtools::clouderrorreporting::v1beta1::ListGroupStatsRequest& request, ::google::devtools::clouderrorreporting::v1beta1::ListGroupStatsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::devtools::clouderrorreporting::v1beta1::ListGroupStatsResponse>> AsyncListGroupStats(::grpc::ClientContext* context, const ::google::devtools::clouderrorreporting::v1beta1::ListGroupStatsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::devtools::clouderrorreporting::v1beta1::ListGroupStatsResponse>>(AsyncListGroupStatsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::devtools::clouderrorreporting::v1beta1::ListGroupStatsResponse>> PrepareAsyncListGroupStats(::grpc::ClientContext* context, const ::google::devtools::clouderrorreporting::v1beta1::ListGroupStatsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::devtools::clouderrorreporting::v1beta1::ListGroupStatsResponse>>(PrepareAsyncListGroupStatsRaw(context, request, cq));
    }
    ::grpc::Status ListEvents(::grpc::ClientContext* context, const ::google::devtools::clouderrorreporting::v1beta1::ListEventsRequest& request, ::google::devtools::clouderrorreporting::v1beta1::ListEventsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::devtools::clouderrorreporting::v1beta1::ListEventsResponse>> AsyncListEvents(::grpc::ClientContext* context, const ::google::devtools::clouderrorreporting::v1beta1::ListEventsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::devtools::clouderrorreporting::v1beta1::ListEventsResponse>>(AsyncListEventsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::devtools::clouderrorreporting::v1beta1::ListEventsResponse>> PrepareAsyncListEvents(::grpc::ClientContext* context, const ::google::devtools::clouderrorreporting::v1beta1::ListEventsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::devtools::clouderrorreporting::v1beta1::ListEventsResponse>>(PrepareAsyncListEventsRaw(context, request, cq));
    }
    ::grpc::Status DeleteEvents(::grpc::ClientContext* context, const ::google::devtools::clouderrorreporting::v1beta1::DeleteEventsRequest& request, ::google::devtools::clouderrorreporting::v1beta1::DeleteEventsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::devtools::clouderrorreporting::v1beta1::DeleteEventsResponse>> AsyncDeleteEvents(::grpc::ClientContext* context, const ::google::devtools::clouderrorreporting::v1beta1::DeleteEventsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::devtools::clouderrorreporting::v1beta1::DeleteEventsResponse>>(AsyncDeleteEventsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::devtools::clouderrorreporting::v1beta1::DeleteEventsResponse>> PrepareAsyncDeleteEvents(::grpc::ClientContext* context, const ::google::devtools::clouderrorreporting::v1beta1::DeleteEventsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::devtools::clouderrorreporting::v1beta1::DeleteEventsResponse>>(PrepareAsyncDeleteEventsRaw(context, request, cq));
    }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    ::grpc::ClientAsyncResponseReader< ::google::devtools::clouderrorreporting::v1beta1::ListGroupStatsResponse>* AsyncListGroupStatsRaw(::grpc::ClientContext* context, const ::google::devtools::clouderrorreporting::v1beta1::ListGroupStatsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::devtools::clouderrorreporting::v1beta1::ListGroupStatsResponse>* PrepareAsyncListGroupStatsRaw(::grpc::ClientContext* context, const ::google::devtools::clouderrorreporting::v1beta1::ListGroupStatsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::devtools::clouderrorreporting::v1beta1::ListEventsResponse>* AsyncListEventsRaw(::grpc::ClientContext* context, const ::google::devtools::clouderrorreporting::v1beta1::ListEventsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::devtools::clouderrorreporting::v1beta1::ListEventsResponse>* PrepareAsyncListEventsRaw(::grpc::ClientContext* context, const ::google::devtools::clouderrorreporting::v1beta1::ListEventsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::devtools::clouderrorreporting::v1beta1::DeleteEventsResponse>* AsyncDeleteEventsRaw(::grpc::ClientContext* context, const ::google::devtools::clouderrorreporting::v1beta1::DeleteEventsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::devtools::clouderrorreporting::v1beta1::DeleteEventsResponse>* PrepareAsyncDeleteEventsRaw(::grpc::ClientContext* context, const ::google::devtools::clouderrorreporting::v1beta1::DeleteEventsRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_ListGroupStats_;
    const ::grpc::internal::RpcMethod rpcmethod_ListEvents_;
    const ::grpc::internal::RpcMethod rpcmethod_DeleteEvents_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Lists the specified groups.
    virtual ::grpc::Status ListGroupStats(::grpc::ServerContext* context, const ::google::devtools::clouderrorreporting::v1beta1::ListGroupStatsRequest* request, ::google::devtools::clouderrorreporting::v1beta1::ListGroupStatsResponse* response);
    // Lists the specified events.
    virtual ::grpc::Status ListEvents(::grpc::ServerContext* context, const ::google::devtools::clouderrorreporting::v1beta1::ListEventsRequest* request, ::google::devtools::clouderrorreporting::v1beta1::ListEventsResponse* response);
    // Deletes all error events of a given project.
    virtual ::grpc::Status DeleteEvents(::grpc::ServerContext* context, const ::google::devtools::clouderrorreporting::v1beta1::DeleteEventsRequest* request, ::google::devtools::clouderrorreporting::v1beta1::DeleteEventsResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_ListGroupStats : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_ListGroupStats() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_ListGroupStats() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListGroupStats(::grpc::ServerContext* context, const ::google::devtools::clouderrorreporting::v1beta1::ListGroupStatsRequest* request, ::google::devtools::clouderrorreporting::v1beta1::ListGroupStatsResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListGroupStats(::grpc::ServerContext* context, ::google::devtools::clouderrorreporting::v1beta1::ListGroupStatsRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::devtools::clouderrorreporting::v1beta1::ListGroupStatsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ListEvents : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_ListEvents() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_ListEvents() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListEvents(::grpc::ServerContext* context, const ::google::devtools::clouderrorreporting::v1beta1::ListEventsRequest* request, ::google::devtools::clouderrorreporting::v1beta1::ListEventsResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListEvents(::grpc::ServerContext* context, ::google::devtools::clouderrorreporting::v1beta1::ListEventsRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::devtools::clouderrorreporting::v1beta1::ListEventsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DeleteEvents : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_DeleteEvents() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_DeleteEvents() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteEvents(::grpc::ServerContext* context, const ::google::devtools::clouderrorreporting::v1beta1::DeleteEventsRequest* request, ::google::devtools::clouderrorreporting::v1beta1::DeleteEventsResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteEvents(::grpc::ServerContext* context, ::google::devtools::clouderrorreporting::v1beta1::DeleteEventsRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::devtools::clouderrorreporting::v1beta1::DeleteEventsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_ListGroupStats<WithAsyncMethod_ListEvents<WithAsyncMethod_DeleteEvents<Service > > > AsyncService;
  template <class BaseClass>
  class WithGenericMethod_ListGroupStats : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_ListGroupStats() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_ListGroupStats() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListGroupStats(::grpc::ServerContext* context, const ::google::devtools::clouderrorreporting::v1beta1::ListGroupStatsRequest* request, ::google::devtools::clouderrorreporting::v1beta1::ListGroupStatsResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ListEvents : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_ListEvents() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_ListEvents() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListEvents(::grpc::ServerContext* context, const ::google::devtools::clouderrorreporting::v1beta1::ListEventsRequest* request, ::google::devtools::clouderrorreporting::v1beta1::ListEventsResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DeleteEvents : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_DeleteEvents() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_DeleteEvents() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteEvents(::grpc::ServerContext* context, const ::google::devtools::clouderrorreporting::v1beta1::DeleteEventsRequest* request, ::google::devtools::clouderrorreporting::v1beta1::DeleteEventsResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ListGroupStats : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_ListGroupStats() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler< ::google::devtools::clouderrorreporting::v1beta1::ListGroupStatsRequest, ::google::devtools::clouderrorreporting::v1beta1::ListGroupStatsResponse>(std::bind(&WithStreamedUnaryMethod_ListGroupStats<BaseClass>::StreamedListGroupStats, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_ListGroupStats() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ListGroupStats(::grpc::ServerContext* context, const ::google::devtools::clouderrorreporting::v1beta1::ListGroupStatsRequest* request, ::google::devtools::clouderrorreporting::v1beta1::ListGroupStatsResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedListGroupStats(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::devtools::clouderrorreporting::v1beta1::ListGroupStatsRequest,::google::devtools::clouderrorreporting::v1beta1::ListGroupStatsResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ListEvents : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_ListEvents() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler< ::google::devtools::clouderrorreporting::v1beta1::ListEventsRequest, ::google::devtools::clouderrorreporting::v1beta1::ListEventsResponse>(std::bind(&WithStreamedUnaryMethod_ListEvents<BaseClass>::StreamedListEvents, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_ListEvents() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ListEvents(::grpc::ServerContext* context, const ::google::devtools::clouderrorreporting::v1beta1::ListEventsRequest* request, ::google::devtools::clouderrorreporting::v1beta1::ListEventsResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedListEvents(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::devtools::clouderrorreporting::v1beta1::ListEventsRequest,::google::devtools::clouderrorreporting::v1beta1::ListEventsResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DeleteEvents : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_DeleteEvents() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler< ::google::devtools::clouderrorreporting::v1beta1::DeleteEventsRequest, ::google::devtools::clouderrorreporting::v1beta1::DeleteEventsResponse>(std::bind(&WithStreamedUnaryMethod_DeleteEvents<BaseClass>::StreamedDeleteEvents, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_DeleteEvents() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DeleteEvents(::grpc::ServerContext* context, const ::google::devtools::clouderrorreporting::v1beta1::DeleteEventsRequest* request, ::google::devtools::clouderrorreporting::v1beta1::DeleteEventsResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDeleteEvents(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::devtools::clouderrorreporting::v1beta1::DeleteEventsRequest,::google::devtools::clouderrorreporting::v1beta1::DeleteEventsResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_ListGroupStats<WithStreamedUnaryMethod_ListEvents<WithStreamedUnaryMethod_DeleteEvents<Service > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_ListGroupStats<WithStreamedUnaryMethod_ListEvents<WithStreamedUnaryMethod_DeleteEvents<Service > > > StreamedService;
};

}  // namespace v1beta1
}  // namespace clouderrorreporting
}  // namespace devtools
}  // namespace google


#endif  // GRPC_google_2fdevtools_2fclouderrorreporting_2fv1beta1_2ferror_5fstats_5fservice_2eproto__INCLUDED
