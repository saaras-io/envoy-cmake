// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/monitoring/v3/common.proto

#ifndef PROTOBUF_google_2fmonitoring_2fv3_2fcommon_2eproto__INCLUDED
#define PROTOBUF_google_2fmonitoring_2fv3_2fcommon_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "google/api/distribution.pb.h"
#include <google/protobuf/duration.pb.h>
#include <google/protobuf/timestamp.pb.h>
// @@protoc_insertion_point(includes)

namespace protobuf_google_2fmonitoring_2fv3_2fcommon_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[3];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsTypedValueImpl();
void InitDefaultsTypedValue();
void InitDefaultsTimeIntervalImpl();
void InitDefaultsTimeInterval();
void InitDefaultsAggregationImpl();
void InitDefaultsAggregation();
inline void InitDefaults() {
  InitDefaultsTypedValue();
  InitDefaultsTimeInterval();
  InitDefaultsAggregation();
}
}  // namespace protobuf_google_2fmonitoring_2fv3_2fcommon_2eproto
namespace google {
namespace monitoring {
namespace v3 {
class Aggregation;
class AggregationDefaultTypeInternal;
extern AggregationDefaultTypeInternal _Aggregation_default_instance_;
class TimeInterval;
class TimeIntervalDefaultTypeInternal;
extern TimeIntervalDefaultTypeInternal _TimeInterval_default_instance_;
class TypedValue;
class TypedValueDefaultTypeInternal;
extern TypedValueDefaultTypeInternal _TypedValue_default_instance_;
}  // namespace v3
}  // namespace monitoring
}  // namespace google
namespace google {
namespace monitoring {
namespace v3 {

enum Aggregation_Aligner {
  Aggregation_Aligner_ALIGN_NONE = 0,
  Aggregation_Aligner_ALIGN_DELTA = 1,
  Aggregation_Aligner_ALIGN_RATE = 2,
  Aggregation_Aligner_ALIGN_INTERPOLATE = 3,
  Aggregation_Aligner_ALIGN_NEXT_OLDER = 4,
  Aggregation_Aligner_ALIGN_MIN = 10,
  Aggregation_Aligner_ALIGN_MAX = 11,
  Aggregation_Aligner_ALIGN_MEAN = 12,
  Aggregation_Aligner_ALIGN_COUNT = 13,
  Aggregation_Aligner_ALIGN_SUM = 14,
  Aggregation_Aligner_ALIGN_STDDEV = 15,
  Aggregation_Aligner_ALIGN_COUNT_TRUE = 16,
  Aggregation_Aligner_ALIGN_FRACTION_TRUE = 17,
  Aggregation_Aligner_ALIGN_PERCENTILE_99 = 18,
  Aggregation_Aligner_ALIGN_PERCENTILE_95 = 19,
  Aggregation_Aligner_ALIGN_PERCENTILE_50 = 20,
  Aggregation_Aligner_ALIGN_PERCENTILE_05 = 21,
  Aggregation_Aligner_Aggregation_Aligner_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  Aggregation_Aligner_Aggregation_Aligner_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool Aggregation_Aligner_IsValid(int value);
const Aggregation_Aligner Aggregation_Aligner_Aligner_MIN = Aggregation_Aligner_ALIGN_NONE;
const Aggregation_Aligner Aggregation_Aligner_Aligner_MAX = Aggregation_Aligner_ALIGN_PERCENTILE_05;
const int Aggregation_Aligner_Aligner_ARRAYSIZE = Aggregation_Aligner_Aligner_MAX + 1;

const ::google::protobuf::EnumDescriptor* Aggregation_Aligner_descriptor();
inline const ::std::string& Aggregation_Aligner_Name(Aggregation_Aligner value) {
  return ::google::protobuf::internal::NameOfEnum(
    Aggregation_Aligner_descriptor(), value);
}
inline bool Aggregation_Aligner_Parse(
    const ::std::string& name, Aggregation_Aligner* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Aggregation_Aligner>(
    Aggregation_Aligner_descriptor(), name, value);
}
enum Aggregation_Reducer {
  Aggregation_Reducer_REDUCE_NONE = 0,
  Aggregation_Reducer_REDUCE_MEAN = 1,
  Aggregation_Reducer_REDUCE_MIN = 2,
  Aggregation_Reducer_REDUCE_MAX = 3,
  Aggregation_Reducer_REDUCE_SUM = 4,
  Aggregation_Reducer_REDUCE_STDDEV = 5,
  Aggregation_Reducer_REDUCE_COUNT = 6,
  Aggregation_Reducer_REDUCE_COUNT_TRUE = 7,
  Aggregation_Reducer_REDUCE_FRACTION_TRUE = 8,
  Aggregation_Reducer_REDUCE_PERCENTILE_99 = 9,
  Aggregation_Reducer_REDUCE_PERCENTILE_95 = 10,
  Aggregation_Reducer_REDUCE_PERCENTILE_50 = 11,
  Aggregation_Reducer_REDUCE_PERCENTILE_05 = 12,
  Aggregation_Reducer_Aggregation_Reducer_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  Aggregation_Reducer_Aggregation_Reducer_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool Aggregation_Reducer_IsValid(int value);
const Aggregation_Reducer Aggregation_Reducer_Reducer_MIN = Aggregation_Reducer_REDUCE_NONE;
const Aggregation_Reducer Aggregation_Reducer_Reducer_MAX = Aggregation_Reducer_REDUCE_PERCENTILE_05;
const int Aggregation_Reducer_Reducer_ARRAYSIZE = Aggregation_Reducer_Reducer_MAX + 1;

const ::google::protobuf::EnumDescriptor* Aggregation_Reducer_descriptor();
inline const ::std::string& Aggregation_Reducer_Name(Aggregation_Reducer value) {
  return ::google::protobuf::internal::NameOfEnum(
    Aggregation_Reducer_descriptor(), value);
}
inline bool Aggregation_Reducer_Parse(
    const ::std::string& name, Aggregation_Reducer* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Aggregation_Reducer>(
    Aggregation_Reducer_descriptor(), name, value);
}
// ===================================================================

class TypedValue : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.monitoring.v3.TypedValue) */ {
 public:
  TypedValue();
  virtual ~TypedValue();

  TypedValue(const TypedValue& from);

  inline TypedValue& operator=(const TypedValue& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TypedValue(TypedValue&& from) noexcept
    : TypedValue() {
    *this = ::std::move(from);
  }

  inline TypedValue& operator=(TypedValue&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const TypedValue& default_instance();

  enum ValueCase {
    kBoolValue = 1,
    kInt64Value = 2,
    kDoubleValue = 3,
    kStringValue = 4,
    kDistributionValue = 5,
    VALUE_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TypedValue* internal_default_instance() {
    return reinterpret_cast<const TypedValue*>(
               &_TypedValue_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(TypedValue* other);
  friend void swap(TypedValue& a, TypedValue& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TypedValue* New() const PROTOBUF_FINAL { return New(NULL); }

  TypedValue* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const TypedValue& from);
  void MergeFrom(const TypedValue& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TypedValue* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bool bool_value = 1;
  private:
  bool has_bool_value() const;
  public:
  void clear_bool_value();
  static const int kBoolValueFieldNumber = 1;
  bool bool_value() const;
  void set_bool_value(bool value);

  // int64 int64_value = 2;
  private:
  bool has_int64_value() const;
  public:
  void clear_int64_value();
  static const int kInt64ValueFieldNumber = 2;
  ::google::protobuf::int64 int64_value() const;
  void set_int64_value(::google::protobuf::int64 value);

  // double double_value = 3;
  private:
  bool has_double_value() const;
  public:
  void clear_double_value();
  static const int kDoubleValueFieldNumber = 3;
  double double_value() const;
  void set_double_value(double value);

  // string string_value = 4;
  private:
  bool has_string_value() const;
  public:
  void clear_string_value();
  static const int kStringValueFieldNumber = 4;
  const ::std::string& string_value() const;
  void set_string_value(const ::std::string& value);
  #if LANG_CXX11
  void set_string_value(::std::string&& value);
  #endif
  void set_string_value(const char* value);
  void set_string_value(const char* value, size_t size);
  ::std::string* mutable_string_value();
  ::std::string* release_string_value();
  void set_allocated_string_value(::std::string* string_value);

  // .google.api.Distribution distribution_value = 5;
  bool has_distribution_value() const;
  void clear_distribution_value();
  static const int kDistributionValueFieldNumber = 5;
  const ::google::api::Distribution& distribution_value() const;
  ::google::api::Distribution* release_distribution_value();
  ::google::api::Distribution* mutable_distribution_value();
  void set_allocated_distribution_value(::google::api::Distribution* distribution_value);

  ValueCase value_case() const;
  // @@protoc_insertion_point(class_scope:google.monitoring.v3.TypedValue)
 private:
  void set_has_bool_value();
  void set_has_int64_value();
  void set_has_double_value();
  void set_has_string_value();
  void set_has_distribution_value();

  inline bool has_value() const;
  void clear_value();
  inline void clear_has_value();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  union ValueUnion {
    ValueUnion() {}
    bool bool_value_;
    ::google::protobuf::int64 int64_value_;
    double double_value_;
    ::google::protobuf::internal::ArenaStringPtr string_value_;
    ::google::api::Distribution* distribution_value_;
  } value_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::protobuf_google_2fmonitoring_2fv3_2fcommon_2eproto::TableStruct;
  friend void ::protobuf_google_2fmonitoring_2fv3_2fcommon_2eproto::InitDefaultsTypedValueImpl();
};
// -------------------------------------------------------------------

class TimeInterval : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.monitoring.v3.TimeInterval) */ {
 public:
  TimeInterval();
  virtual ~TimeInterval();

  TimeInterval(const TimeInterval& from);

  inline TimeInterval& operator=(const TimeInterval& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TimeInterval(TimeInterval&& from) noexcept
    : TimeInterval() {
    *this = ::std::move(from);
  }

  inline TimeInterval& operator=(TimeInterval&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const TimeInterval& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TimeInterval* internal_default_instance() {
    return reinterpret_cast<const TimeInterval*>(
               &_TimeInterval_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(TimeInterval* other);
  friend void swap(TimeInterval& a, TimeInterval& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TimeInterval* New() const PROTOBUF_FINAL { return New(NULL); }

  TimeInterval* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const TimeInterval& from);
  void MergeFrom(const TimeInterval& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TimeInterval* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.protobuf.Timestamp start_time = 1;
  bool has_start_time() const;
  void clear_start_time();
  static const int kStartTimeFieldNumber = 1;
  const ::google::protobuf::Timestamp& start_time() const;
  ::google::protobuf::Timestamp* release_start_time();
  ::google::protobuf::Timestamp* mutable_start_time();
  void set_allocated_start_time(::google::protobuf::Timestamp* start_time);

  // .google.protobuf.Timestamp end_time = 2;
  bool has_end_time() const;
  void clear_end_time();
  static const int kEndTimeFieldNumber = 2;
  const ::google::protobuf::Timestamp& end_time() const;
  ::google::protobuf::Timestamp* release_end_time();
  ::google::protobuf::Timestamp* mutable_end_time();
  void set_allocated_end_time(::google::protobuf::Timestamp* end_time);

  // @@protoc_insertion_point(class_scope:google.monitoring.v3.TimeInterval)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::Timestamp* start_time_;
  ::google::protobuf::Timestamp* end_time_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fmonitoring_2fv3_2fcommon_2eproto::TableStruct;
  friend void ::protobuf_google_2fmonitoring_2fv3_2fcommon_2eproto::InitDefaultsTimeIntervalImpl();
};
// -------------------------------------------------------------------

class Aggregation : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.monitoring.v3.Aggregation) */ {
 public:
  Aggregation();
  virtual ~Aggregation();

  Aggregation(const Aggregation& from);

  inline Aggregation& operator=(const Aggregation& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Aggregation(Aggregation&& from) noexcept
    : Aggregation() {
    *this = ::std::move(from);
  }

  inline Aggregation& operator=(Aggregation&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Aggregation& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Aggregation* internal_default_instance() {
    return reinterpret_cast<const Aggregation*>(
               &_Aggregation_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(Aggregation* other);
  friend void swap(Aggregation& a, Aggregation& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Aggregation* New() const PROTOBUF_FINAL { return New(NULL); }

  Aggregation* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Aggregation& from);
  void MergeFrom(const Aggregation& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Aggregation* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef Aggregation_Aligner Aligner;
  static const Aligner ALIGN_NONE =
    Aggregation_Aligner_ALIGN_NONE;
  static const Aligner ALIGN_DELTA =
    Aggregation_Aligner_ALIGN_DELTA;
  static const Aligner ALIGN_RATE =
    Aggregation_Aligner_ALIGN_RATE;
  static const Aligner ALIGN_INTERPOLATE =
    Aggregation_Aligner_ALIGN_INTERPOLATE;
  static const Aligner ALIGN_NEXT_OLDER =
    Aggregation_Aligner_ALIGN_NEXT_OLDER;
  static const Aligner ALIGN_MIN =
    Aggregation_Aligner_ALIGN_MIN;
  static const Aligner ALIGN_MAX =
    Aggregation_Aligner_ALIGN_MAX;
  static const Aligner ALIGN_MEAN =
    Aggregation_Aligner_ALIGN_MEAN;
  static const Aligner ALIGN_COUNT =
    Aggregation_Aligner_ALIGN_COUNT;
  static const Aligner ALIGN_SUM =
    Aggregation_Aligner_ALIGN_SUM;
  static const Aligner ALIGN_STDDEV =
    Aggregation_Aligner_ALIGN_STDDEV;
  static const Aligner ALIGN_COUNT_TRUE =
    Aggregation_Aligner_ALIGN_COUNT_TRUE;
  static const Aligner ALIGN_FRACTION_TRUE =
    Aggregation_Aligner_ALIGN_FRACTION_TRUE;
  static const Aligner ALIGN_PERCENTILE_99 =
    Aggregation_Aligner_ALIGN_PERCENTILE_99;
  static const Aligner ALIGN_PERCENTILE_95 =
    Aggregation_Aligner_ALIGN_PERCENTILE_95;
  static const Aligner ALIGN_PERCENTILE_50 =
    Aggregation_Aligner_ALIGN_PERCENTILE_50;
  static const Aligner ALIGN_PERCENTILE_05 =
    Aggregation_Aligner_ALIGN_PERCENTILE_05;
  static inline bool Aligner_IsValid(int value) {
    return Aggregation_Aligner_IsValid(value);
  }
  static const Aligner Aligner_MIN =
    Aggregation_Aligner_Aligner_MIN;
  static const Aligner Aligner_MAX =
    Aggregation_Aligner_Aligner_MAX;
  static const int Aligner_ARRAYSIZE =
    Aggregation_Aligner_Aligner_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Aligner_descriptor() {
    return Aggregation_Aligner_descriptor();
  }
  static inline const ::std::string& Aligner_Name(Aligner value) {
    return Aggregation_Aligner_Name(value);
  }
  static inline bool Aligner_Parse(const ::std::string& name,
      Aligner* value) {
    return Aggregation_Aligner_Parse(name, value);
  }

  typedef Aggregation_Reducer Reducer;
  static const Reducer REDUCE_NONE =
    Aggregation_Reducer_REDUCE_NONE;
  static const Reducer REDUCE_MEAN =
    Aggregation_Reducer_REDUCE_MEAN;
  static const Reducer REDUCE_MIN =
    Aggregation_Reducer_REDUCE_MIN;
  static const Reducer REDUCE_MAX =
    Aggregation_Reducer_REDUCE_MAX;
  static const Reducer REDUCE_SUM =
    Aggregation_Reducer_REDUCE_SUM;
  static const Reducer REDUCE_STDDEV =
    Aggregation_Reducer_REDUCE_STDDEV;
  static const Reducer REDUCE_COUNT =
    Aggregation_Reducer_REDUCE_COUNT;
  static const Reducer REDUCE_COUNT_TRUE =
    Aggregation_Reducer_REDUCE_COUNT_TRUE;
  static const Reducer REDUCE_FRACTION_TRUE =
    Aggregation_Reducer_REDUCE_FRACTION_TRUE;
  static const Reducer REDUCE_PERCENTILE_99 =
    Aggregation_Reducer_REDUCE_PERCENTILE_99;
  static const Reducer REDUCE_PERCENTILE_95 =
    Aggregation_Reducer_REDUCE_PERCENTILE_95;
  static const Reducer REDUCE_PERCENTILE_50 =
    Aggregation_Reducer_REDUCE_PERCENTILE_50;
  static const Reducer REDUCE_PERCENTILE_05 =
    Aggregation_Reducer_REDUCE_PERCENTILE_05;
  static inline bool Reducer_IsValid(int value) {
    return Aggregation_Reducer_IsValid(value);
  }
  static const Reducer Reducer_MIN =
    Aggregation_Reducer_Reducer_MIN;
  static const Reducer Reducer_MAX =
    Aggregation_Reducer_Reducer_MAX;
  static const int Reducer_ARRAYSIZE =
    Aggregation_Reducer_Reducer_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Reducer_descriptor() {
    return Aggregation_Reducer_descriptor();
  }
  static inline const ::std::string& Reducer_Name(Reducer value) {
    return Aggregation_Reducer_Name(value);
  }
  static inline bool Reducer_Parse(const ::std::string& name,
      Reducer* value) {
    return Aggregation_Reducer_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated string group_by_fields = 5;
  int group_by_fields_size() const;
  void clear_group_by_fields();
  static const int kGroupByFieldsFieldNumber = 5;
  const ::std::string& group_by_fields(int index) const;
  ::std::string* mutable_group_by_fields(int index);
  void set_group_by_fields(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_group_by_fields(int index, ::std::string&& value);
  #endif
  void set_group_by_fields(int index, const char* value);
  void set_group_by_fields(int index, const char* value, size_t size);
  ::std::string* add_group_by_fields();
  void add_group_by_fields(const ::std::string& value);
  #if LANG_CXX11
  void add_group_by_fields(::std::string&& value);
  #endif
  void add_group_by_fields(const char* value);
  void add_group_by_fields(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& group_by_fields() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_group_by_fields();

  // .google.protobuf.Duration alignment_period = 1;
  bool has_alignment_period() const;
  void clear_alignment_period();
  static const int kAlignmentPeriodFieldNumber = 1;
  const ::google::protobuf::Duration& alignment_period() const;
  ::google::protobuf::Duration* release_alignment_period();
  ::google::protobuf::Duration* mutable_alignment_period();
  void set_allocated_alignment_period(::google::protobuf::Duration* alignment_period);

  // .google.monitoring.v3.Aggregation.Aligner per_series_aligner = 2;
  void clear_per_series_aligner();
  static const int kPerSeriesAlignerFieldNumber = 2;
  ::google::monitoring::v3::Aggregation_Aligner per_series_aligner() const;
  void set_per_series_aligner(::google::monitoring::v3::Aggregation_Aligner value);

  // .google.monitoring.v3.Aggregation.Reducer cross_series_reducer = 4;
  void clear_cross_series_reducer();
  static const int kCrossSeriesReducerFieldNumber = 4;
  ::google::monitoring::v3::Aggregation_Reducer cross_series_reducer() const;
  void set_cross_series_reducer(::google::monitoring::v3::Aggregation_Reducer value);

  // @@protoc_insertion_point(class_scope:google.monitoring.v3.Aggregation)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> group_by_fields_;
  ::google::protobuf::Duration* alignment_period_;
  int per_series_aligner_;
  int cross_series_reducer_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fmonitoring_2fv3_2fcommon_2eproto::TableStruct;
  friend void ::protobuf_google_2fmonitoring_2fv3_2fcommon_2eproto::InitDefaultsAggregationImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TypedValue

// bool bool_value = 1;
inline bool TypedValue::has_bool_value() const {
  return value_case() == kBoolValue;
}
inline void TypedValue::set_has_bool_value() {
  _oneof_case_[0] = kBoolValue;
}
inline void TypedValue::clear_bool_value() {
  if (has_bool_value()) {
    value_.bool_value_ = false;
    clear_has_value();
  }
}
inline bool TypedValue::bool_value() const {
  // @@protoc_insertion_point(field_get:google.monitoring.v3.TypedValue.bool_value)
  if (has_bool_value()) {
    return value_.bool_value_;
  }
  return false;
}
inline void TypedValue::set_bool_value(bool value) {
  if (!has_bool_value()) {
    clear_value();
    set_has_bool_value();
  }
  value_.bool_value_ = value;
  // @@protoc_insertion_point(field_set:google.monitoring.v3.TypedValue.bool_value)
}

// int64 int64_value = 2;
inline bool TypedValue::has_int64_value() const {
  return value_case() == kInt64Value;
}
inline void TypedValue::set_has_int64_value() {
  _oneof_case_[0] = kInt64Value;
}
inline void TypedValue::clear_int64_value() {
  if (has_int64_value()) {
    value_.int64_value_ = GOOGLE_LONGLONG(0);
    clear_has_value();
  }
}
inline ::google::protobuf::int64 TypedValue::int64_value() const {
  // @@protoc_insertion_point(field_get:google.monitoring.v3.TypedValue.int64_value)
  if (has_int64_value()) {
    return value_.int64_value_;
  }
  return GOOGLE_LONGLONG(0);
}
inline void TypedValue::set_int64_value(::google::protobuf::int64 value) {
  if (!has_int64_value()) {
    clear_value();
    set_has_int64_value();
  }
  value_.int64_value_ = value;
  // @@protoc_insertion_point(field_set:google.monitoring.v3.TypedValue.int64_value)
}

// double double_value = 3;
inline bool TypedValue::has_double_value() const {
  return value_case() == kDoubleValue;
}
inline void TypedValue::set_has_double_value() {
  _oneof_case_[0] = kDoubleValue;
}
inline void TypedValue::clear_double_value() {
  if (has_double_value()) {
    value_.double_value_ = 0;
    clear_has_value();
  }
}
inline double TypedValue::double_value() const {
  // @@protoc_insertion_point(field_get:google.monitoring.v3.TypedValue.double_value)
  if (has_double_value()) {
    return value_.double_value_;
  }
  return 0;
}
inline void TypedValue::set_double_value(double value) {
  if (!has_double_value()) {
    clear_value();
    set_has_double_value();
  }
  value_.double_value_ = value;
  // @@protoc_insertion_point(field_set:google.monitoring.v3.TypedValue.double_value)
}

// string string_value = 4;
inline bool TypedValue::has_string_value() const {
  return value_case() == kStringValue;
}
inline void TypedValue::set_has_string_value() {
  _oneof_case_[0] = kStringValue;
}
inline void TypedValue::clear_string_value() {
  if (has_string_value()) {
    value_.string_value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_value();
  }
}
inline const ::std::string& TypedValue::string_value() const {
  // @@protoc_insertion_point(field_get:google.monitoring.v3.TypedValue.string_value)
  if (has_string_value()) {
    return value_.string_value_.GetNoArena();
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
inline void TypedValue::set_string_value(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:google.monitoring.v3.TypedValue.string_value)
  if (!has_string_value()) {
    clear_value();
    set_has_string_value();
    value_.string_value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  value_.string_value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.monitoring.v3.TypedValue.string_value)
}
#if LANG_CXX11
inline void TypedValue::set_string_value(::std::string&& value) {
  // @@protoc_insertion_point(field_set:google.monitoring.v3.TypedValue.string_value)
  if (!has_string_value()) {
    clear_value();
    set_has_string_value();
    value_.string_value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  value_.string_value_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.monitoring.v3.TypedValue.string_value)
}
#endif
inline void TypedValue::set_string_value(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  if (!has_string_value()) {
    clear_value();
    set_has_string_value();
    value_.string_value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  value_.string_value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.monitoring.v3.TypedValue.string_value)
}
inline void TypedValue::set_string_value(const char* value, size_t size) {
  if (!has_string_value()) {
    clear_value();
    set_has_string_value();
    value_.string_value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  value_.string_value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.monitoring.v3.TypedValue.string_value)
}
inline ::std::string* TypedValue::mutable_string_value() {
  if (!has_string_value()) {
    clear_value();
    set_has_string_value();
    value_.string_value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:google.monitoring.v3.TypedValue.string_value)
  return value_.string_value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TypedValue::release_string_value() {
  // @@protoc_insertion_point(field_release:google.monitoring.v3.TypedValue.string_value)
  if (has_string_value()) {
    clear_has_value();
    return value_.string_value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
inline void TypedValue::set_allocated_string_value(::std::string* string_value) {
  if (!has_string_value()) {
    value_.string_value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_value();
  if (string_value != NULL) {
    set_has_string_value();
    value_.string_value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        string_value);
  }
  // @@protoc_insertion_point(field_set_allocated:google.monitoring.v3.TypedValue.string_value)
}

// .google.api.Distribution distribution_value = 5;
inline bool TypedValue::has_distribution_value() const {
  return value_case() == kDistributionValue;
}
inline void TypedValue::set_has_distribution_value() {
  _oneof_case_[0] = kDistributionValue;
}
inline ::google::api::Distribution* TypedValue::release_distribution_value() {
  // @@protoc_insertion_point(field_release:google.monitoring.v3.TypedValue.distribution_value)
  if (has_distribution_value()) {
    clear_has_value();
      ::google::api::Distribution* temp = value_.distribution_value_;
    value_.distribution_value_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::api::Distribution& TypedValue::distribution_value() const {
  // @@protoc_insertion_point(field_get:google.monitoring.v3.TypedValue.distribution_value)
  return has_distribution_value()
      ? *value_.distribution_value_
      : *reinterpret_cast< ::google::api::Distribution*>(&::google::api::_Distribution_default_instance_);
}
inline ::google::api::Distribution* TypedValue::mutable_distribution_value() {
  if (!has_distribution_value()) {
    clear_value();
    set_has_distribution_value();
    value_.distribution_value_ = new ::google::api::Distribution;
  }
  // @@protoc_insertion_point(field_mutable:google.monitoring.v3.TypedValue.distribution_value)
  return value_.distribution_value_;
}

inline bool TypedValue::has_value() const {
  return value_case() != VALUE_NOT_SET;
}
inline void TypedValue::clear_has_value() {
  _oneof_case_[0] = VALUE_NOT_SET;
}
inline TypedValue::ValueCase TypedValue::value_case() const {
  return TypedValue::ValueCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// TimeInterval

// .google.protobuf.Timestamp end_time = 2;
inline bool TimeInterval::has_end_time() const {
  return this != internal_default_instance() && end_time_ != NULL;
}
inline const ::google::protobuf::Timestamp& TimeInterval::end_time() const {
  const ::google::protobuf::Timestamp* p = end_time_;
  // @@protoc_insertion_point(field_get:google.monitoring.v3.TimeInterval.end_time)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::Timestamp*>(
      &::google::protobuf::_Timestamp_default_instance_);
}
inline ::google::protobuf::Timestamp* TimeInterval::release_end_time() {
  // @@protoc_insertion_point(field_release:google.monitoring.v3.TimeInterval.end_time)
  
  ::google::protobuf::Timestamp* temp = end_time_;
  end_time_ = NULL;
  return temp;
}
inline ::google::protobuf::Timestamp* TimeInterval::mutable_end_time() {
  
  if (end_time_ == NULL) {
    end_time_ = new ::google::protobuf::Timestamp;
  }
  // @@protoc_insertion_point(field_mutable:google.monitoring.v3.TimeInterval.end_time)
  return end_time_;
}
inline void TimeInterval::set_allocated_end_time(::google::protobuf::Timestamp* end_time) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(end_time_);
  }
  if (end_time) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast< ::google::protobuf::MessageLite*>(end_time)->GetArena();
    if (message_arena != submessage_arena) {
      end_time = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, end_time, submessage_arena);
    }
    
  } else {
    
  }
  end_time_ = end_time;
  // @@protoc_insertion_point(field_set_allocated:google.monitoring.v3.TimeInterval.end_time)
}

// .google.protobuf.Timestamp start_time = 1;
inline bool TimeInterval::has_start_time() const {
  return this != internal_default_instance() && start_time_ != NULL;
}
inline const ::google::protobuf::Timestamp& TimeInterval::start_time() const {
  const ::google::protobuf::Timestamp* p = start_time_;
  // @@protoc_insertion_point(field_get:google.monitoring.v3.TimeInterval.start_time)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::Timestamp*>(
      &::google::protobuf::_Timestamp_default_instance_);
}
inline ::google::protobuf::Timestamp* TimeInterval::release_start_time() {
  // @@protoc_insertion_point(field_release:google.monitoring.v3.TimeInterval.start_time)
  
  ::google::protobuf::Timestamp* temp = start_time_;
  start_time_ = NULL;
  return temp;
}
inline ::google::protobuf::Timestamp* TimeInterval::mutable_start_time() {
  
  if (start_time_ == NULL) {
    start_time_ = new ::google::protobuf::Timestamp;
  }
  // @@protoc_insertion_point(field_mutable:google.monitoring.v3.TimeInterval.start_time)
  return start_time_;
}
inline void TimeInterval::set_allocated_start_time(::google::protobuf::Timestamp* start_time) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(start_time_);
  }
  if (start_time) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast< ::google::protobuf::MessageLite*>(start_time)->GetArena();
    if (message_arena != submessage_arena) {
      start_time = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, start_time, submessage_arena);
    }
    
  } else {
    
  }
  start_time_ = start_time;
  // @@protoc_insertion_point(field_set_allocated:google.monitoring.v3.TimeInterval.start_time)
}

// -------------------------------------------------------------------

// Aggregation

// .google.protobuf.Duration alignment_period = 1;
inline bool Aggregation::has_alignment_period() const {
  return this != internal_default_instance() && alignment_period_ != NULL;
}
inline const ::google::protobuf::Duration& Aggregation::alignment_period() const {
  const ::google::protobuf::Duration* p = alignment_period_;
  // @@protoc_insertion_point(field_get:google.monitoring.v3.Aggregation.alignment_period)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::Duration*>(
      &::google::protobuf::_Duration_default_instance_);
}
inline ::google::protobuf::Duration* Aggregation::release_alignment_period() {
  // @@protoc_insertion_point(field_release:google.monitoring.v3.Aggregation.alignment_period)
  
  ::google::protobuf::Duration* temp = alignment_period_;
  alignment_period_ = NULL;
  return temp;
}
inline ::google::protobuf::Duration* Aggregation::mutable_alignment_period() {
  
  if (alignment_period_ == NULL) {
    alignment_period_ = new ::google::protobuf::Duration;
  }
  // @@protoc_insertion_point(field_mutable:google.monitoring.v3.Aggregation.alignment_period)
  return alignment_period_;
}
inline void Aggregation::set_allocated_alignment_period(::google::protobuf::Duration* alignment_period) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(alignment_period_);
  }
  if (alignment_period) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast< ::google::protobuf::MessageLite*>(alignment_period)->GetArena();
    if (message_arena != submessage_arena) {
      alignment_period = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, alignment_period, submessage_arena);
    }
    
  } else {
    
  }
  alignment_period_ = alignment_period;
  // @@protoc_insertion_point(field_set_allocated:google.monitoring.v3.Aggregation.alignment_period)
}

// .google.monitoring.v3.Aggregation.Aligner per_series_aligner = 2;
inline void Aggregation::clear_per_series_aligner() {
  per_series_aligner_ = 0;
}
inline ::google::monitoring::v3::Aggregation_Aligner Aggregation::per_series_aligner() const {
  // @@protoc_insertion_point(field_get:google.monitoring.v3.Aggregation.per_series_aligner)
  return static_cast< ::google::monitoring::v3::Aggregation_Aligner >(per_series_aligner_);
}
inline void Aggregation::set_per_series_aligner(::google::monitoring::v3::Aggregation_Aligner value) {
  
  per_series_aligner_ = value;
  // @@protoc_insertion_point(field_set:google.monitoring.v3.Aggregation.per_series_aligner)
}

// .google.monitoring.v3.Aggregation.Reducer cross_series_reducer = 4;
inline void Aggregation::clear_cross_series_reducer() {
  cross_series_reducer_ = 0;
}
inline ::google::monitoring::v3::Aggregation_Reducer Aggregation::cross_series_reducer() const {
  // @@protoc_insertion_point(field_get:google.monitoring.v3.Aggregation.cross_series_reducer)
  return static_cast< ::google::monitoring::v3::Aggregation_Reducer >(cross_series_reducer_);
}
inline void Aggregation::set_cross_series_reducer(::google::monitoring::v3::Aggregation_Reducer value) {
  
  cross_series_reducer_ = value;
  // @@protoc_insertion_point(field_set:google.monitoring.v3.Aggregation.cross_series_reducer)
}

// repeated string group_by_fields = 5;
inline int Aggregation::group_by_fields_size() const {
  return group_by_fields_.size();
}
inline void Aggregation::clear_group_by_fields() {
  group_by_fields_.Clear();
}
inline const ::std::string& Aggregation::group_by_fields(int index) const {
  // @@protoc_insertion_point(field_get:google.monitoring.v3.Aggregation.group_by_fields)
  return group_by_fields_.Get(index);
}
inline ::std::string* Aggregation::mutable_group_by_fields(int index) {
  // @@protoc_insertion_point(field_mutable:google.monitoring.v3.Aggregation.group_by_fields)
  return group_by_fields_.Mutable(index);
}
inline void Aggregation::set_group_by_fields(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:google.monitoring.v3.Aggregation.group_by_fields)
  group_by_fields_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void Aggregation::set_group_by_fields(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:google.monitoring.v3.Aggregation.group_by_fields)
  group_by_fields_.Mutable(index)->assign(std::move(value));
}
#endif
inline void Aggregation::set_group_by_fields(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  group_by_fields_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:google.monitoring.v3.Aggregation.group_by_fields)
}
inline void Aggregation::set_group_by_fields(int index, const char* value, size_t size) {
  group_by_fields_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:google.monitoring.v3.Aggregation.group_by_fields)
}
inline ::std::string* Aggregation::add_group_by_fields() {
  // @@protoc_insertion_point(field_add_mutable:google.monitoring.v3.Aggregation.group_by_fields)
  return group_by_fields_.Add();
}
inline void Aggregation::add_group_by_fields(const ::std::string& value) {
  group_by_fields_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:google.monitoring.v3.Aggregation.group_by_fields)
}
#if LANG_CXX11
inline void Aggregation::add_group_by_fields(::std::string&& value) {
  group_by_fields_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:google.monitoring.v3.Aggregation.group_by_fields)
}
#endif
inline void Aggregation::add_group_by_fields(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  group_by_fields_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:google.monitoring.v3.Aggregation.group_by_fields)
}
inline void Aggregation::add_group_by_fields(const char* value, size_t size) {
  group_by_fields_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:google.monitoring.v3.Aggregation.group_by_fields)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Aggregation::group_by_fields() const {
  // @@protoc_insertion_point(field_list:google.monitoring.v3.Aggregation.group_by_fields)
  return group_by_fields_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Aggregation::mutable_group_by_fields() {
  // @@protoc_insertion_point(field_mutable_list:google.monitoring.v3.Aggregation.group_by_fields)
  return &group_by_fields_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v3
}  // namespace monitoring
}  // namespace google

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::google::monitoring::v3::Aggregation_Aligner> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::google::monitoring::v3::Aggregation_Aligner>() {
  return ::google::monitoring::v3::Aggregation_Aligner_descriptor();
}
template <> struct is_proto_enum< ::google::monitoring::v3::Aggregation_Reducer> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::google::monitoring::v3::Aggregation_Reducer>() {
  return ::google::monitoring::v3::Aggregation_Reducer_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_google_2fmonitoring_2fv3_2fcommon_2eproto__INCLUDED
