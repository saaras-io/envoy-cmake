// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: google/spanner/v1/spanner.proto
// Original file comments:
// Copyright 2017 Google Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
#ifndef GRPC_google_2fspanner_2fv1_2fspanner_2eproto__INCLUDED
#define GRPC_google_2fspanner_2fv1_2fspanner_2eproto__INCLUDED

#include "google/spanner/v1/spanner.pb.h"

#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace grpc {
class CompletionQueue;
class Channel;
class ServerCompletionQueue;
class ServerContext;
}  // namespace grpc

namespace google {
namespace spanner {
namespace v1 {

// Cloud Spanner API
//
// The Cloud Spanner API can be used to manage sessions and execute
// transactions on data stored in Cloud Spanner databases.
class Spanner final {
 public:
  static constexpr char const* service_full_name() {
    return "google.spanner.v1.Spanner";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Creates a new session. A session can be used to perform
    // transactions that read and/or modify data in a Cloud Spanner database.
    // Sessions are meant to be reused for many consecutive
    // transactions.
    //
    // Sessions can only execute one transaction at a time. To execute
    // multiple concurrent read-write/write-only transactions, create
    // multiple sessions. Note that standalone reads and queries use a
    // transaction internally, and count toward the one transaction
    // limit.
    //
    // Cloud Spanner limits the number of sessions that can exist at any given
    // time; thus, it is a good idea to delete idle and/or unneeded sessions.
    // Aside from explicit deletes, Cloud Spanner can delete sessions for which no
    // operations are sent for more than an hour. If a session is deleted,
    // requests to it return `NOT_FOUND`.
    //
    // Idle sessions can be kept alive by sending a trivial SQL query
    // periodically, e.g., `"SELECT 1"`.
    virtual ::grpc::Status CreateSession(::grpc::ClientContext* context, const ::google::spanner::v1::CreateSessionRequest& request, ::google::spanner::v1::Session* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::spanner::v1::Session>> AsyncCreateSession(::grpc::ClientContext* context, const ::google::spanner::v1::CreateSessionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::spanner::v1::Session>>(AsyncCreateSessionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::spanner::v1::Session>> PrepareAsyncCreateSession(::grpc::ClientContext* context, const ::google::spanner::v1::CreateSessionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::spanner::v1::Session>>(PrepareAsyncCreateSessionRaw(context, request, cq));
    }
    // Gets a session. Returns `NOT_FOUND` if the session does not exist.
    // This is mainly useful for determining whether a session is still
    // alive.
    virtual ::grpc::Status GetSession(::grpc::ClientContext* context, const ::google::spanner::v1::GetSessionRequest& request, ::google::spanner::v1::Session* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::spanner::v1::Session>> AsyncGetSession(::grpc::ClientContext* context, const ::google::spanner::v1::GetSessionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::spanner::v1::Session>>(AsyncGetSessionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::spanner::v1::Session>> PrepareAsyncGetSession(::grpc::ClientContext* context, const ::google::spanner::v1::GetSessionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::spanner::v1::Session>>(PrepareAsyncGetSessionRaw(context, request, cq));
    }
    // Ends a session, releasing server resources associated with it.
    virtual ::grpc::Status DeleteSession(::grpc::ClientContext* context, const ::google::spanner::v1::DeleteSessionRequest& request, ::google::protobuf::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> AsyncDeleteSession(::grpc::ClientContext* context, const ::google::spanner::v1::DeleteSessionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(AsyncDeleteSessionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> PrepareAsyncDeleteSession(::grpc::ClientContext* context, const ::google::spanner::v1::DeleteSessionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(PrepareAsyncDeleteSessionRaw(context, request, cq));
    }
    // Executes an SQL query, returning all rows in a single reply. This
    // method cannot be used to return a result set larger than 10 MiB;
    // if the query yields more data than that, the query fails with
    // a `FAILED_PRECONDITION` error.
    //
    // Queries inside read-write transactions might return `ABORTED`. If
    // this occurs, the application should restart the transaction from
    // the beginning. See [Transaction][google.spanner.v1.Transaction] for more details.
    //
    // Larger result sets can be fetched in streaming fashion by calling
    // [ExecuteStreamingSql][google.spanner.v1.Spanner.ExecuteStreamingSql] instead.
    virtual ::grpc::Status ExecuteSql(::grpc::ClientContext* context, const ::google::spanner::v1::ExecuteSqlRequest& request, ::google::spanner::v1::ResultSet* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::spanner::v1::ResultSet>> AsyncExecuteSql(::grpc::ClientContext* context, const ::google::spanner::v1::ExecuteSqlRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::spanner::v1::ResultSet>>(AsyncExecuteSqlRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::spanner::v1::ResultSet>> PrepareAsyncExecuteSql(::grpc::ClientContext* context, const ::google::spanner::v1::ExecuteSqlRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::spanner::v1::ResultSet>>(PrepareAsyncExecuteSqlRaw(context, request, cq));
    }
    // Like [ExecuteSql][google.spanner.v1.Spanner.ExecuteSql], except returns the result
    // set as a stream. Unlike [ExecuteSql][google.spanner.v1.Spanner.ExecuteSql], there
    // is no limit on the size of the returned result set. However, no
    // individual row in the result set can exceed 100 MiB, and no
    // column value can exceed 10 MiB.
    std::unique_ptr< ::grpc::ClientReaderInterface< ::google::spanner::v1::PartialResultSet>> ExecuteStreamingSql(::grpc::ClientContext* context, const ::google::spanner::v1::ExecuteSqlRequest& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::google::spanner::v1::PartialResultSet>>(ExecuteStreamingSqlRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::google::spanner::v1::PartialResultSet>> AsyncExecuteStreamingSql(::grpc::ClientContext* context, const ::google::spanner::v1::ExecuteSqlRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::google::spanner::v1::PartialResultSet>>(AsyncExecuteStreamingSqlRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::google::spanner::v1::PartialResultSet>> PrepareAsyncExecuteStreamingSql(::grpc::ClientContext* context, const ::google::spanner::v1::ExecuteSqlRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::google::spanner::v1::PartialResultSet>>(PrepareAsyncExecuteStreamingSqlRaw(context, request, cq));
    }
    // Reads rows from the database using key lookups and scans, as a
    // simple key/value style alternative to
    // [ExecuteSql][google.spanner.v1.Spanner.ExecuteSql].  This method cannot be used to
    // return a result set larger than 10 MiB; if the read matches more
    // data than that, the read fails with a `FAILED_PRECONDITION`
    // error.
    //
    // Reads inside read-write transactions might return `ABORTED`. If
    // this occurs, the application should restart the transaction from
    // the beginning. See [Transaction][google.spanner.v1.Transaction] for more details.
    //
    // Larger result sets can be yielded in streaming fashion by calling
    // [StreamingRead][google.spanner.v1.Spanner.StreamingRead] instead.
    virtual ::grpc::Status Read(::grpc::ClientContext* context, const ::google::spanner::v1::ReadRequest& request, ::google::spanner::v1::ResultSet* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::spanner::v1::ResultSet>> AsyncRead(::grpc::ClientContext* context, const ::google::spanner::v1::ReadRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::spanner::v1::ResultSet>>(AsyncReadRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::spanner::v1::ResultSet>> PrepareAsyncRead(::grpc::ClientContext* context, const ::google::spanner::v1::ReadRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::spanner::v1::ResultSet>>(PrepareAsyncReadRaw(context, request, cq));
    }
    // Like [Read][google.spanner.v1.Spanner.Read], except returns the result set as a
    // stream. Unlike [Read][google.spanner.v1.Spanner.Read], there is no limit on the
    // size of the returned result set. However, no individual row in
    // the result set can exceed 100 MiB, and no column value can exceed
    // 10 MiB.
    std::unique_ptr< ::grpc::ClientReaderInterface< ::google::spanner::v1::PartialResultSet>> StreamingRead(::grpc::ClientContext* context, const ::google::spanner::v1::ReadRequest& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::google::spanner::v1::PartialResultSet>>(StreamingReadRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::google::spanner::v1::PartialResultSet>> AsyncStreamingRead(::grpc::ClientContext* context, const ::google::spanner::v1::ReadRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::google::spanner::v1::PartialResultSet>>(AsyncStreamingReadRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::google::spanner::v1::PartialResultSet>> PrepareAsyncStreamingRead(::grpc::ClientContext* context, const ::google::spanner::v1::ReadRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::google::spanner::v1::PartialResultSet>>(PrepareAsyncStreamingReadRaw(context, request, cq));
    }
    // Begins a new transaction. This step can often be skipped:
    // [Read][google.spanner.v1.Spanner.Read], [ExecuteSql][google.spanner.v1.Spanner.ExecuteSql] and
    // [Commit][google.spanner.v1.Spanner.Commit] can begin a new transaction as a
    // side-effect.
    virtual ::grpc::Status BeginTransaction(::grpc::ClientContext* context, const ::google::spanner::v1::BeginTransactionRequest& request, ::google::spanner::v1::Transaction* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::spanner::v1::Transaction>> AsyncBeginTransaction(::grpc::ClientContext* context, const ::google::spanner::v1::BeginTransactionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::spanner::v1::Transaction>>(AsyncBeginTransactionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::spanner::v1::Transaction>> PrepareAsyncBeginTransaction(::grpc::ClientContext* context, const ::google::spanner::v1::BeginTransactionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::spanner::v1::Transaction>>(PrepareAsyncBeginTransactionRaw(context, request, cq));
    }
    // Commits a transaction. The request includes the mutations to be
    // applied to rows in the database.
    //
    // `Commit` might return an `ABORTED` error. This can occur at any time;
    // commonly, the cause is conflicts with concurrent
    // transactions. However, it can also happen for a variety of other
    // reasons. If `Commit` returns `ABORTED`, the caller should re-attempt
    // the transaction from the beginning, re-using the same session.
    virtual ::grpc::Status Commit(::grpc::ClientContext* context, const ::google::spanner::v1::CommitRequest& request, ::google::spanner::v1::CommitResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::spanner::v1::CommitResponse>> AsyncCommit(::grpc::ClientContext* context, const ::google::spanner::v1::CommitRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::spanner::v1::CommitResponse>>(AsyncCommitRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::spanner::v1::CommitResponse>> PrepareAsyncCommit(::grpc::ClientContext* context, const ::google::spanner::v1::CommitRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::spanner::v1::CommitResponse>>(PrepareAsyncCommitRaw(context, request, cq));
    }
    // Rolls back a transaction, releasing any locks it holds. It is a good
    // idea to call this for any transaction that includes one or more
    // [Read][google.spanner.v1.Spanner.Read] or [ExecuteSql][google.spanner.v1.Spanner.ExecuteSql] requests and
    // ultimately decides not to commit.
    //
    // `Rollback` returns `OK` if it successfully aborts the transaction, the
    // transaction was already aborted, or the transaction is not
    // found. `Rollback` never returns `ABORTED`.
    virtual ::grpc::Status Rollback(::grpc::ClientContext* context, const ::google::spanner::v1::RollbackRequest& request, ::google::protobuf::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> AsyncRollback(::grpc::ClientContext* context, const ::google::spanner::v1::RollbackRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(AsyncRollbackRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> PrepareAsyncRollback(::grpc::ClientContext* context, const ::google::spanner::v1::RollbackRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(PrepareAsyncRollbackRaw(context, request, cq));
    }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::spanner::v1::Session>* AsyncCreateSessionRaw(::grpc::ClientContext* context, const ::google::spanner::v1::CreateSessionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::spanner::v1::Session>* PrepareAsyncCreateSessionRaw(::grpc::ClientContext* context, const ::google::spanner::v1::CreateSessionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::spanner::v1::Session>* AsyncGetSessionRaw(::grpc::ClientContext* context, const ::google::spanner::v1::GetSessionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::spanner::v1::Session>* PrepareAsyncGetSessionRaw(::grpc::ClientContext* context, const ::google::spanner::v1::GetSessionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* AsyncDeleteSessionRaw(::grpc::ClientContext* context, const ::google::spanner::v1::DeleteSessionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* PrepareAsyncDeleteSessionRaw(::grpc::ClientContext* context, const ::google::spanner::v1::DeleteSessionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::spanner::v1::ResultSet>* AsyncExecuteSqlRaw(::grpc::ClientContext* context, const ::google::spanner::v1::ExecuteSqlRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::spanner::v1::ResultSet>* PrepareAsyncExecuteSqlRaw(::grpc::ClientContext* context, const ::google::spanner::v1::ExecuteSqlRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::google::spanner::v1::PartialResultSet>* ExecuteStreamingSqlRaw(::grpc::ClientContext* context, const ::google::spanner::v1::ExecuteSqlRequest& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::google::spanner::v1::PartialResultSet>* AsyncExecuteStreamingSqlRaw(::grpc::ClientContext* context, const ::google::spanner::v1::ExecuteSqlRequest& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::google::spanner::v1::PartialResultSet>* PrepareAsyncExecuteStreamingSqlRaw(::grpc::ClientContext* context, const ::google::spanner::v1::ExecuteSqlRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::spanner::v1::ResultSet>* AsyncReadRaw(::grpc::ClientContext* context, const ::google::spanner::v1::ReadRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::spanner::v1::ResultSet>* PrepareAsyncReadRaw(::grpc::ClientContext* context, const ::google::spanner::v1::ReadRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::google::spanner::v1::PartialResultSet>* StreamingReadRaw(::grpc::ClientContext* context, const ::google::spanner::v1::ReadRequest& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::google::spanner::v1::PartialResultSet>* AsyncStreamingReadRaw(::grpc::ClientContext* context, const ::google::spanner::v1::ReadRequest& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::google::spanner::v1::PartialResultSet>* PrepareAsyncStreamingReadRaw(::grpc::ClientContext* context, const ::google::spanner::v1::ReadRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::spanner::v1::Transaction>* AsyncBeginTransactionRaw(::grpc::ClientContext* context, const ::google::spanner::v1::BeginTransactionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::spanner::v1::Transaction>* PrepareAsyncBeginTransactionRaw(::grpc::ClientContext* context, const ::google::spanner::v1::BeginTransactionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::spanner::v1::CommitResponse>* AsyncCommitRaw(::grpc::ClientContext* context, const ::google::spanner::v1::CommitRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::spanner::v1::CommitResponse>* PrepareAsyncCommitRaw(::grpc::ClientContext* context, const ::google::spanner::v1::CommitRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* AsyncRollbackRaw(::grpc::ClientContext* context, const ::google::spanner::v1::RollbackRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* PrepareAsyncRollbackRaw(::grpc::ClientContext* context, const ::google::spanner::v1::RollbackRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status CreateSession(::grpc::ClientContext* context, const ::google::spanner::v1::CreateSessionRequest& request, ::google::spanner::v1::Session* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::spanner::v1::Session>> AsyncCreateSession(::grpc::ClientContext* context, const ::google::spanner::v1::CreateSessionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::spanner::v1::Session>>(AsyncCreateSessionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::spanner::v1::Session>> PrepareAsyncCreateSession(::grpc::ClientContext* context, const ::google::spanner::v1::CreateSessionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::spanner::v1::Session>>(PrepareAsyncCreateSessionRaw(context, request, cq));
    }
    ::grpc::Status GetSession(::grpc::ClientContext* context, const ::google::spanner::v1::GetSessionRequest& request, ::google::spanner::v1::Session* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::spanner::v1::Session>> AsyncGetSession(::grpc::ClientContext* context, const ::google::spanner::v1::GetSessionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::spanner::v1::Session>>(AsyncGetSessionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::spanner::v1::Session>> PrepareAsyncGetSession(::grpc::ClientContext* context, const ::google::spanner::v1::GetSessionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::spanner::v1::Session>>(PrepareAsyncGetSessionRaw(context, request, cq));
    }
    ::grpc::Status DeleteSession(::grpc::ClientContext* context, const ::google::spanner::v1::DeleteSessionRequest& request, ::google::protobuf::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> AsyncDeleteSession(::grpc::ClientContext* context, const ::google::spanner::v1::DeleteSessionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(AsyncDeleteSessionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> PrepareAsyncDeleteSession(::grpc::ClientContext* context, const ::google::spanner::v1::DeleteSessionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(PrepareAsyncDeleteSessionRaw(context, request, cq));
    }
    ::grpc::Status ExecuteSql(::grpc::ClientContext* context, const ::google::spanner::v1::ExecuteSqlRequest& request, ::google::spanner::v1::ResultSet* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::spanner::v1::ResultSet>> AsyncExecuteSql(::grpc::ClientContext* context, const ::google::spanner::v1::ExecuteSqlRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::spanner::v1::ResultSet>>(AsyncExecuteSqlRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::spanner::v1::ResultSet>> PrepareAsyncExecuteSql(::grpc::ClientContext* context, const ::google::spanner::v1::ExecuteSqlRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::spanner::v1::ResultSet>>(PrepareAsyncExecuteSqlRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::google::spanner::v1::PartialResultSet>> ExecuteStreamingSql(::grpc::ClientContext* context, const ::google::spanner::v1::ExecuteSqlRequest& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::google::spanner::v1::PartialResultSet>>(ExecuteStreamingSqlRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::google::spanner::v1::PartialResultSet>> AsyncExecuteStreamingSql(::grpc::ClientContext* context, const ::google::spanner::v1::ExecuteSqlRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::google::spanner::v1::PartialResultSet>>(AsyncExecuteStreamingSqlRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::google::spanner::v1::PartialResultSet>> PrepareAsyncExecuteStreamingSql(::grpc::ClientContext* context, const ::google::spanner::v1::ExecuteSqlRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::google::spanner::v1::PartialResultSet>>(PrepareAsyncExecuteStreamingSqlRaw(context, request, cq));
    }
    ::grpc::Status Read(::grpc::ClientContext* context, const ::google::spanner::v1::ReadRequest& request, ::google::spanner::v1::ResultSet* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::spanner::v1::ResultSet>> AsyncRead(::grpc::ClientContext* context, const ::google::spanner::v1::ReadRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::spanner::v1::ResultSet>>(AsyncReadRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::spanner::v1::ResultSet>> PrepareAsyncRead(::grpc::ClientContext* context, const ::google::spanner::v1::ReadRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::spanner::v1::ResultSet>>(PrepareAsyncReadRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::google::spanner::v1::PartialResultSet>> StreamingRead(::grpc::ClientContext* context, const ::google::spanner::v1::ReadRequest& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::google::spanner::v1::PartialResultSet>>(StreamingReadRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::google::spanner::v1::PartialResultSet>> AsyncStreamingRead(::grpc::ClientContext* context, const ::google::spanner::v1::ReadRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::google::spanner::v1::PartialResultSet>>(AsyncStreamingReadRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::google::spanner::v1::PartialResultSet>> PrepareAsyncStreamingRead(::grpc::ClientContext* context, const ::google::spanner::v1::ReadRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::google::spanner::v1::PartialResultSet>>(PrepareAsyncStreamingReadRaw(context, request, cq));
    }
    ::grpc::Status BeginTransaction(::grpc::ClientContext* context, const ::google::spanner::v1::BeginTransactionRequest& request, ::google::spanner::v1::Transaction* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::spanner::v1::Transaction>> AsyncBeginTransaction(::grpc::ClientContext* context, const ::google::spanner::v1::BeginTransactionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::spanner::v1::Transaction>>(AsyncBeginTransactionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::spanner::v1::Transaction>> PrepareAsyncBeginTransaction(::grpc::ClientContext* context, const ::google::spanner::v1::BeginTransactionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::spanner::v1::Transaction>>(PrepareAsyncBeginTransactionRaw(context, request, cq));
    }
    ::grpc::Status Commit(::grpc::ClientContext* context, const ::google::spanner::v1::CommitRequest& request, ::google::spanner::v1::CommitResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::spanner::v1::CommitResponse>> AsyncCommit(::grpc::ClientContext* context, const ::google::spanner::v1::CommitRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::spanner::v1::CommitResponse>>(AsyncCommitRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::spanner::v1::CommitResponse>> PrepareAsyncCommit(::grpc::ClientContext* context, const ::google::spanner::v1::CommitRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::spanner::v1::CommitResponse>>(PrepareAsyncCommitRaw(context, request, cq));
    }
    ::grpc::Status Rollback(::grpc::ClientContext* context, const ::google::spanner::v1::RollbackRequest& request, ::google::protobuf::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> AsyncRollback(::grpc::ClientContext* context, const ::google::spanner::v1::RollbackRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(AsyncRollbackRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> PrepareAsyncRollback(::grpc::ClientContext* context, const ::google::spanner::v1::RollbackRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(PrepareAsyncRollbackRaw(context, request, cq));
    }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    ::grpc::ClientAsyncResponseReader< ::google::spanner::v1::Session>* AsyncCreateSessionRaw(::grpc::ClientContext* context, const ::google::spanner::v1::CreateSessionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::spanner::v1::Session>* PrepareAsyncCreateSessionRaw(::grpc::ClientContext* context, const ::google::spanner::v1::CreateSessionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::spanner::v1::Session>* AsyncGetSessionRaw(::grpc::ClientContext* context, const ::google::spanner::v1::GetSessionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::spanner::v1::Session>* PrepareAsyncGetSessionRaw(::grpc::ClientContext* context, const ::google::spanner::v1::GetSessionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* AsyncDeleteSessionRaw(::grpc::ClientContext* context, const ::google::spanner::v1::DeleteSessionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* PrepareAsyncDeleteSessionRaw(::grpc::ClientContext* context, const ::google::spanner::v1::DeleteSessionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::spanner::v1::ResultSet>* AsyncExecuteSqlRaw(::grpc::ClientContext* context, const ::google::spanner::v1::ExecuteSqlRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::spanner::v1::ResultSet>* PrepareAsyncExecuteSqlRaw(::grpc::ClientContext* context, const ::google::spanner::v1::ExecuteSqlRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::google::spanner::v1::PartialResultSet>* ExecuteStreamingSqlRaw(::grpc::ClientContext* context, const ::google::spanner::v1::ExecuteSqlRequest& request) override;
    ::grpc::ClientAsyncReader< ::google::spanner::v1::PartialResultSet>* AsyncExecuteStreamingSqlRaw(::grpc::ClientContext* context, const ::google::spanner::v1::ExecuteSqlRequest& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::google::spanner::v1::PartialResultSet>* PrepareAsyncExecuteStreamingSqlRaw(::grpc::ClientContext* context, const ::google::spanner::v1::ExecuteSqlRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::spanner::v1::ResultSet>* AsyncReadRaw(::grpc::ClientContext* context, const ::google::spanner::v1::ReadRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::spanner::v1::ResultSet>* PrepareAsyncReadRaw(::grpc::ClientContext* context, const ::google::spanner::v1::ReadRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::google::spanner::v1::PartialResultSet>* StreamingReadRaw(::grpc::ClientContext* context, const ::google::spanner::v1::ReadRequest& request) override;
    ::grpc::ClientAsyncReader< ::google::spanner::v1::PartialResultSet>* AsyncStreamingReadRaw(::grpc::ClientContext* context, const ::google::spanner::v1::ReadRequest& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::google::spanner::v1::PartialResultSet>* PrepareAsyncStreamingReadRaw(::grpc::ClientContext* context, const ::google::spanner::v1::ReadRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::spanner::v1::Transaction>* AsyncBeginTransactionRaw(::grpc::ClientContext* context, const ::google::spanner::v1::BeginTransactionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::spanner::v1::Transaction>* PrepareAsyncBeginTransactionRaw(::grpc::ClientContext* context, const ::google::spanner::v1::BeginTransactionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::spanner::v1::CommitResponse>* AsyncCommitRaw(::grpc::ClientContext* context, const ::google::spanner::v1::CommitRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::spanner::v1::CommitResponse>* PrepareAsyncCommitRaw(::grpc::ClientContext* context, const ::google::spanner::v1::CommitRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* AsyncRollbackRaw(::grpc::ClientContext* context, const ::google::spanner::v1::RollbackRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* PrepareAsyncRollbackRaw(::grpc::ClientContext* context, const ::google::spanner::v1::RollbackRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_CreateSession_;
    const ::grpc::internal::RpcMethod rpcmethod_GetSession_;
    const ::grpc::internal::RpcMethod rpcmethod_DeleteSession_;
    const ::grpc::internal::RpcMethod rpcmethod_ExecuteSql_;
    const ::grpc::internal::RpcMethod rpcmethod_ExecuteStreamingSql_;
    const ::grpc::internal::RpcMethod rpcmethod_Read_;
    const ::grpc::internal::RpcMethod rpcmethod_StreamingRead_;
    const ::grpc::internal::RpcMethod rpcmethod_BeginTransaction_;
    const ::grpc::internal::RpcMethod rpcmethod_Commit_;
    const ::grpc::internal::RpcMethod rpcmethod_Rollback_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Creates a new session. A session can be used to perform
    // transactions that read and/or modify data in a Cloud Spanner database.
    // Sessions are meant to be reused for many consecutive
    // transactions.
    //
    // Sessions can only execute one transaction at a time. To execute
    // multiple concurrent read-write/write-only transactions, create
    // multiple sessions. Note that standalone reads and queries use a
    // transaction internally, and count toward the one transaction
    // limit.
    //
    // Cloud Spanner limits the number of sessions that can exist at any given
    // time; thus, it is a good idea to delete idle and/or unneeded sessions.
    // Aside from explicit deletes, Cloud Spanner can delete sessions for which no
    // operations are sent for more than an hour. If a session is deleted,
    // requests to it return `NOT_FOUND`.
    //
    // Idle sessions can be kept alive by sending a trivial SQL query
    // periodically, e.g., `"SELECT 1"`.
    virtual ::grpc::Status CreateSession(::grpc::ServerContext* context, const ::google::spanner::v1::CreateSessionRequest* request, ::google::spanner::v1::Session* response);
    // Gets a session. Returns `NOT_FOUND` if the session does not exist.
    // This is mainly useful for determining whether a session is still
    // alive.
    virtual ::grpc::Status GetSession(::grpc::ServerContext* context, const ::google::spanner::v1::GetSessionRequest* request, ::google::spanner::v1::Session* response);
    // Ends a session, releasing server resources associated with it.
    virtual ::grpc::Status DeleteSession(::grpc::ServerContext* context, const ::google::spanner::v1::DeleteSessionRequest* request, ::google::protobuf::Empty* response);
    // Executes an SQL query, returning all rows in a single reply. This
    // method cannot be used to return a result set larger than 10 MiB;
    // if the query yields more data than that, the query fails with
    // a `FAILED_PRECONDITION` error.
    //
    // Queries inside read-write transactions might return `ABORTED`. If
    // this occurs, the application should restart the transaction from
    // the beginning. See [Transaction][google.spanner.v1.Transaction] for more details.
    //
    // Larger result sets can be fetched in streaming fashion by calling
    // [ExecuteStreamingSql][google.spanner.v1.Spanner.ExecuteStreamingSql] instead.
    virtual ::grpc::Status ExecuteSql(::grpc::ServerContext* context, const ::google::spanner::v1::ExecuteSqlRequest* request, ::google::spanner::v1::ResultSet* response);
    // Like [ExecuteSql][google.spanner.v1.Spanner.ExecuteSql], except returns the result
    // set as a stream. Unlike [ExecuteSql][google.spanner.v1.Spanner.ExecuteSql], there
    // is no limit on the size of the returned result set. However, no
    // individual row in the result set can exceed 100 MiB, and no
    // column value can exceed 10 MiB.
    virtual ::grpc::Status ExecuteStreamingSql(::grpc::ServerContext* context, const ::google::spanner::v1::ExecuteSqlRequest* request, ::grpc::ServerWriter< ::google::spanner::v1::PartialResultSet>* writer);
    // Reads rows from the database using key lookups and scans, as a
    // simple key/value style alternative to
    // [ExecuteSql][google.spanner.v1.Spanner.ExecuteSql].  This method cannot be used to
    // return a result set larger than 10 MiB; if the read matches more
    // data than that, the read fails with a `FAILED_PRECONDITION`
    // error.
    //
    // Reads inside read-write transactions might return `ABORTED`. If
    // this occurs, the application should restart the transaction from
    // the beginning. See [Transaction][google.spanner.v1.Transaction] for more details.
    //
    // Larger result sets can be yielded in streaming fashion by calling
    // [StreamingRead][google.spanner.v1.Spanner.StreamingRead] instead.
    virtual ::grpc::Status Read(::grpc::ServerContext* context, const ::google::spanner::v1::ReadRequest* request, ::google::spanner::v1::ResultSet* response);
    // Like [Read][google.spanner.v1.Spanner.Read], except returns the result set as a
    // stream. Unlike [Read][google.spanner.v1.Spanner.Read], there is no limit on the
    // size of the returned result set. However, no individual row in
    // the result set can exceed 100 MiB, and no column value can exceed
    // 10 MiB.
    virtual ::grpc::Status StreamingRead(::grpc::ServerContext* context, const ::google::spanner::v1::ReadRequest* request, ::grpc::ServerWriter< ::google::spanner::v1::PartialResultSet>* writer);
    // Begins a new transaction. This step can often be skipped:
    // [Read][google.spanner.v1.Spanner.Read], [ExecuteSql][google.spanner.v1.Spanner.ExecuteSql] and
    // [Commit][google.spanner.v1.Spanner.Commit] can begin a new transaction as a
    // side-effect.
    virtual ::grpc::Status BeginTransaction(::grpc::ServerContext* context, const ::google::spanner::v1::BeginTransactionRequest* request, ::google::spanner::v1::Transaction* response);
    // Commits a transaction. The request includes the mutations to be
    // applied to rows in the database.
    //
    // `Commit` might return an `ABORTED` error. This can occur at any time;
    // commonly, the cause is conflicts with concurrent
    // transactions. However, it can also happen for a variety of other
    // reasons. If `Commit` returns `ABORTED`, the caller should re-attempt
    // the transaction from the beginning, re-using the same session.
    virtual ::grpc::Status Commit(::grpc::ServerContext* context, const ::google::spanner::v1::CommitRequest* request, ::google::spanner::v1::CommitResponse* response);
    // Rolls back a transaction, releasing any locks it holds. It is a good
    // idea to call this for any transaction that includes one or more
    // [Read][google.spanner.v1.Spanner.Read] or [ExecuteSql][google.spanner.v1.Spanner.ExecuteSql] requests and
    // ultimately decides not to commit.
    //
    // `Rollback` returns `OK` if it successfully aborts the transaction, the
    // transaction was already aborted, or the transaction is not
    // found. `Rollback` never returns `ABORTED`.
    virtual ::grpc::Status Rollback(::grpc::ServerContext* context, const ::google::spanner::v1::RollbackRequest* request, ::google::protobuf::Empty* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_CreateSession : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_CreateSession() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_CreateSession() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateSession(::grpc::ServerContext* context, const ::google::spanner::v1::CreateSessionRequest* request, ::google::spanner::v1::Session* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateSession(::grpc::ServerContext* context, ::google::spanner::v1::CreateSessionRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::spanner::v1::Session>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetSession : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_GetSession() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_GetSession() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetSession(::grpc::ServerContext* context, const ::google::spanner::v1::GetSessionRequest* request, ::google::spanner::v1::Session* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetSession(::grpc::ServerContext* context, ::google::spanner::v1::GetSessionRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::spanner::v1::Session>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DeleteSession : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_DeleteSession() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_DeleteSession() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteSession(::grpc::ServerContext* context, const ::google::spanner::v1::DeleteSessionRequest* request, ::google::protobuf::Empty* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteSession(::grpc::ServerContext* context, ::google::spanner::v1::DeleteSessionRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::protobuf::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ExecuteSql : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_ExecuteSql() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_ExecuteSql() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ExecuteSql(::grpc::ServerContext* context, const ::google::spanner::v1::ExecuteSqlRequest* request, ::google::spanner::v1::ResultSet* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestExecuteSql(::grpc::ServerContext* context, ::google::spanner::v1::ExecuteSqlRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::spanner::v1::ResultSet>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ExecuteStreamingSql : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_ExecuteStreamingSql() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_ExecuteStreamingSql() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ExecuteStreamingSql(::grpc::ServerContext* context, const ::google::spanner::v1::ExecuteSqlRequest* request, ::grpc::ServerWriter< ::google::spanner::v1::PartialResultSet>* writer) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestExecuteStreamingSql(::grpc::ServerContext* context, ::google::spanner::v1::ExecuteSqlRequest* request, ::grpc::ServerAsyncWriter< ::google::spanner::v1::PartialResultSet>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(4, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Read : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_Read() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_Read() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Read(::grpc::ServerContext* context, const ::google::spanner::v1::ReadRequest* request, ::google::spanner::v1::ResultSet* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRead(::grpc::ServerContext* context, ::google::spanner::v1::ReadRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::spanner::v1::ResultSet>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_StreamingRead : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_StreamingRead() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_StreamingRead() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StreamingRead(::grpc::ServerContext* context, const ::google::spanner::v1::ReadRequest* request, ::grpc::ServerWriter< ::google::spanner::v1::PartialResultSet>* writer) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStreamingRead(::grpc::ServerContext* context, ::google::spanner::v1::ReadRequest* request, ::grpc::ServerAsyncWriter< ::google::spanner::v1::PartialResultSet>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(6, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_BeginTransaction : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_BeginTransaction() {
      ::grpc::Service::MarkMethodAsync(7);
    }
    ~WithAsyncMethod_BeginTransaction() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status BeginTransaction(::grpc::ServerContext* context, const ::google::spanner::v1::BeginTransactionRequest* request, ::google::spanner::v1::Transaction* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestBeginTransaction(::grpc::ServerContext* context, ::google::spanner::v1::BeginTransactionRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::spanner::v1::Transaction>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Commit : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_Commit() {
      ::grpc::Service::MarkMethodAsync(8);
    }
    ~WithAsyncMethod_Commit() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Commit(::grpc::ServerContext* context, const ::google::spanner::v1::CommitRequest* request, ::google::spanner::v1::CommitResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCommit(::grpc::ServerContext* context, ::google::spanner::v1::CommitRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::spanner::v1::CommitResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Rollback : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_Rollback() {
      ::grpc::Service::MarkMethodAsync(9);
    }
    ~WithAsyncMethod_Rollback() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Rollback(::grpc::ServerContext* context, const ::google::spanner::v1::RollbackRequest* request, ::google::protobuf::Empty* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRollback(::grpc::ServerContext* context, ::google::spanner::v1::RollbackRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::protobuf::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(9, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_CreateSession<WithAsyncMethod_GetSession<WithAsyncMethod_DeleteSession<WithAsyncMethod_ExecuteSql<WithAsyncMethod_ExecuteStreamingSql<WithAsyncMethod_Read<WithAsyncMethod_StreamingRead<WithAsyncMethod_BeginTransaction<WithAsyncMethod_Commit<WithAsyncMethod_Rollback<Service > > > > > > > > > > AsyncService;
  template <class BaseClass>
  class WithGenericMethod_CreateSession : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_CreateSession() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_CreateSession() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateSession(::grpc::ServerContext* context, const ::google::spanner::v1::CreateSessionRequest* request, ::google::spanner::v1::Session* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetSession : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_GetSession() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_GetSession() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetSession(::grpc::ServerContext* context, const ::google::spanner::v1::GetSessionRequest* request, ::google::spanner::v1::Session* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DeleteSession : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_DeleteSession() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_DeleteSession() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteSession(::grpc::ServerContext* context, const ::google::spanner::v1::DeleteSessionRequest* request, ::google::protobuf::Empty* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ExecuteSql : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_ExecuteSql() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_ExecuteSql() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ExecuteSql(::grpc::ServerContext* context, const ::google::spanner::v1::ExecuteSqlRequest* request, ::google::spanner::v1::ResultSet* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ExecuteStreamingSql : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_ExecuteStreamingSql() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_ExecuteStreamingSql() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ExecuteStreamingSql(::grpc::ServerContext* context, const ::google::spanner::v1::ExecuteSqlRequest* request, ::grpc::ServerWriter< ::google::spanner::v1::PartialResultSet>* writer) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Read : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_Read() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_Read() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Read(::grpc::ServerContext* context, const ::google::spanner::v1::ReadRequest* request, ::google::spanner::v1::ResultSet* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_StreamingRead : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_StreamingRead() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_StreamingRead() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StreamingRead(::grpc::ServerContext* context, const ::google::spanner::v1::ReadRequest* request, ::grpc::ServerWriter< ::google::spanner::v1::PartialResultSet>* writer) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_BeginTransaction : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_BeginTransaction() {
      ::grpc::Service::MarkMethodGeneric(7);
    }
    ~WithGenericMethod_BeginTransaction() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status BeginTransaction(::grpc::ServerContext* context, const ::google::spanner::v1::BeginTransactionRequest* request, ::google::spanner::v1::Transaction* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Commit : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_Commit() {
      ::grpc::Service::MarkMethodGeneric(8);
    }
    ~WithGenericMethod_Commit() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Commit(::grpc::ServerContext* context, const ::google::spanner::v1::CommitRequest* request, ::google::spanner::v1::CommitResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Rollback : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_Rollback() {
      ::grpc::Service::MarkMethodGeneric(9);
    }
    ~WithGenericMethod_Rollback() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Rollback(::grpc::ServerContext* context, const ::google::spanner::v1::RollbackRequest* request, ::google::protobuf::Empty* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CreateSession : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_CreateSession() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler< ::google::spanner::v1::CreateSessionRequest, ::google::spanner::v1::Session>(std::bind(&WithStreamedUnaryMethod_CreateSession<BaseClass>::StreamedCreateSession, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_CreateSession() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CreateSession(::grpc::ServerContext* context, const ::google::spanner::v1::CreateSessionRequest* request, ::google::spanner::v1::Session* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCreateSession(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::spanner::v1::CreateSessionRequest,::google::spanner::v1::Session>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetSession : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_GetSession() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler< ::google::spanner::v1::GetSessionRequest, ::google::spanner::v1::Session>(std::bind(&WithStreamedUnaryMethod_GetSession<BaseClass>::StreamedGetSession, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetSession() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetSession(::grpc::ServerContext* context, const ::google::spanner::v1::GetSessionRequest* request, ::google::spanner::v1::Session* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetSession(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::spanner::v1::GetSessionRequest,::google::spanner::v1::Session>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DeleteSession : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_DeleteSession() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler< ::google::spanner::v1::DeleteSessionRequest, ::google::protobuf::Empty>(std::bind(&WithStreamedUnaryMethod_DeleteSession<BaseClass>::StreamedDeleteSession, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_DeleteSession() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DeleteSession(::grpc::ServerContext* context, const ::google::spanner::v1::DeleteSessionRequest* request, ::google::protobuf::Empty* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDeleteSession(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::spanner::v1::DeleteSessionRequest,::google::protobuf::Empty>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ExecuteSql : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_ExecuteSql() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler< ::google::spanner::v1::ExecuteSqlRequest, ::google::spanner::v1::ResultSet>(std::bind(&WithStreamedUnaryMethod_ExecuteSql<BaseClass>::StreamedExecuteSql, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_ExecuteSql() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ExecuteSql(::grpc::ServerContext* context, const ::google::spanner::v1::ExecuteSqlRequest* request, ::google::spanner::v1::ResultSet* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedExecuteSql(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::spanner::v1::ExecuteSqlRequest,::google::spanner::v1::ResultSet>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Read : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_Read() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler< ::google::spanner::v1::ReadRequest, ::google::spanner::v1::ResultSet>(std::bind(&WithStreamedUnaryMethod_Read<BaseClass>::StreamedRead, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_Read() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Read(::grpc::ServerContext* context, const ::google::spanner::v1::ReadRequest* request, ::google::spanner::v1::ResultSet* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedRead(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::spanner::v1::ReadRequest,::google::spanner::v1::ResultSet>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_BeginTransaction : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_BeginTransaction() {
      ::grpc::Service::MarkMethodStreamed(7,
        new ::grpc::internal::StreamedUnaryHandler< ::google::spanner::v1::BeginTransactionRequest, ::google::spanner::v1::Transaction>(std::bind(&WithStreamedUnaryMethod_BeginTransaction<BaseClass>::StreamedBeginTransaction, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_BeginTransaction() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status BeginTransaction(::grpc::ServerContext* context, const ::google::spanner::v1::BeginTransactionRequest* request, ::google::spanner::v1::Transaction* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedBeginTransaction(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::spanner::v1::BeginTransactionRequest,::google::spanner::v1::Transaction>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Commit : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_Commit() {
      ::grpc::Service::MarkMethodStreamed(8,
        new ::grpc::internal::StreamedUnaryHandler< ::google::spanner::v1::CommitRequest, ::google::spanner::v1::CommitResponse>(std::bind(&WithStreamedUnaryMethod_Commit<BaseClass>::StreamedCommit, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_Commit() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Commit(::grpc::ServerContext* context, const ::google::spanner::v1::CommitRequest* request, ::google::spanner::v1::CommitResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCommit(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::spanner::v1::CommitRequest,::google::spanner::v1::CommitResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Rollback : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_Rollback() {
      ::grpc::Service::MarkMethodStreamed(9,
        new ::grpc::internal::StreamedUnaryHandler< ::google::spanner::v1::RollbackRequest, ::google::protobuf::Empty>(std::bind(&WithStreamedUnaryMethod_Rollback<BaseClass>::StreamedRollback, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_Rollback() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Rollback(::grpc::ServerContext* context, const ::google::spanner::v1::RollbackRequest* request, ::google::protobuf::Empty* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedRollback(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::spanner::v1::RollbackRequest,::google::protobuf::Empty>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_CreateSession<WithStreamedUnaryMethod_GetSession<WithStreamedUnaryMethod_DeleteSession<WithStreamedUnaryMethod_ExecuteSql<WithStreamedUnaryMethod_Read<WithStreamedUnaryMethod_BeginTransaction<WithStreamedUnaryMethod_Commit<WithStreamedUnaryMethod_Rollback<Service > > > > > > > > StreamedUnaryService;
  template <class BaseClass>
  class WithSplitStreamingMethod_ExecuteStreamingSql : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithSplitStreamingMethod_ExecuteStreamingSql() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::SplitServerStreamingHandler< ::google::spanner::v1::ExecuteSqlRequest, ::google::spanner::v1::PartialResultSet>(std::bind(&WithSplitStreamingMethod_ExecuteStreamingSql<BaseClass>::StreamedExecuteStreamingSql, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithSplitStreamingMethod_ExecuteStreamingSql() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ExecuteStreamingSql(::grpc::ServerContext* context, const ::google::spanner::v1::ExecuteSqlRequest* request, ::grpc::ServerWriter< ::google::spanner::v1::PartialResultSet>* writer) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedExecuteStreamingSql(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::google::spanner::v1::ExecuteSqlRequest,::google::spanner::v1::PartialResultSet>* server_split_streamer) = 0;
  };
  template <class BaseClass>
  class WithSplitStreamingMethod_StreamingRead : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithSplitStreamingMethod_StreamingRead() {
      ::grpc::Service::MarkMethodStreamed(6,
        new ::grpc::internal::SplitServerStreamingHandler< ::google::spanner::v1::ReadRequest, ::google::spanner::v1::PartialResultSet>(std::bind(&WithSplitStreamingMethod_StreamingRead<BaseClass>::StreamedStreamingRead, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithSplitStreamingMethod_StreamingRead() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status StreamingRead(::grpc::ServerContext* context, const ::google::spanner::v1::ReadRequest* request, ::grpc::ServerWriter< ::google::spanner::v1::PartialResultSet>* writer) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedStreamingRead(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::google::spanner::v1::ReadRequest,::google::spanner::v1::PartialResultSet>* server_split_streamer) = 0;
  };
  typedef WithSplitStreamingMethod_ExecuteStreamingSql<WithSplitStreamingMethod_StreamingRead<Service > > SplitStreamedService;
  typedef WithStreamedUnaryMethod_CreateSession<WithStreamedUnaryMethod_GetSession<WithStreamedUnaryMethod_DeleteSession<WithStreamedUnaryMethod_ExecuteSql<WithSplitStreamingMethod_ExecuteStreamingSql<WithStreamedUnaryMethod_Read<WithSplitStreamingMethod_StreamingRead<WithStreamedUnaryMethod_BeginTransaction<WithStreamedUnaryMethod_Commit<WithStreamedUnaryMethod_Rollback<Service > > > > > > > > > > StreamedService;
};

}  // namespace v1
}  // namespace spanner
}  // namespace google


#endif  // GRPC_google_2fspanner_2fv1_2fspanner_2eproto__INCLUDED
