// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: google/pubsub/v1/pubsub.proto
// Original file comments:
// Copyright 2017 Google Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
#ifndef GRPC_google_2fpubsub_2fv1_2fpubsub_2eproto__INCLUDED
#define GRPC_google_2fpubsub_2fv1_2fpubsub_2eproto__INCLUDED

#include "google/pubsub/v1/pubsub.pb.h"

#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace grpc {
class CompletionQueue;
class Channel;
class ServerCompletionQueue;
class ServerContext;
}  // namespace grpc

namespace google {
namespace pubsub {
namespace v1 {

// The service that an application uses to manipulate subscriptions and to
// consume messages from a subscription via the `Pull` method.
class Subscriber final {
 public:
  static constexpr char const* service_full_name() {
    return "google.pubsub.v1.Subscriber";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Creates a subscription to a given topic.
    // If the subscription already exists, returns `ALREADY_EXISTS`.
    // If the corresponding topic doesn't exist, returns `NOT_FOUND`.
    //
    // If the name is not provided in the request, the server will assign a random
    // name for this subscription on the same project as the topic, conforming
    // to the
    // [resource name format](https://cloud.google.com/pubsub/docs/overview#names).
    // The generated name is populated in the returned Subscription object.
    // Note that for REST API requests, you must specify a name in the request.
    virtual ::grpc::Status CreateSubscription(::grpc::ClientContext* context, const ::google::pubsub::v1::Subscription& request, ::google::pubsub::v1::Subscription* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::pubsub::v1::Subscription>> AsyncCreateSubscription(::grpc::ClientContext* context, const ::google::pubsub::v1::Subscription& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::pubsub::v1::Subscription>>(AsyncCreateSubscriptionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::pubsub::v1::Subscription>> PrepareAsyncCreateSubscription(::grpc::ClientContext* context, const ::google::pubsub::v1::Subscription& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::pubsub::v1::Subscription>>(PrepareAsyncCreateSubscriptionRaw(context, request, cq));
    }
    // Gets the configuration details of a subscription.
    virtual ::grpc::Status GetSubscription(::grpc::ClientContext* context, const ::google::pubsub::v1::GetSubscriptionRequest& request, ::google::pubsub::v1::Subscription* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::pubsub::v1::Subscription>> AsyncGetSubscription(::grpc::ClientContext* context, const ::google::pubsub::v1::GetSubscriptionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::pubsub::v1::Subscription>>(AsyncGetSubscriptionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::pubsub::v1::Subscription>> PrepareAsyncGetSubscription(::grpc::ClientContext* context, const ::google::pubsub::v1::GetSubscriptionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::pubsub::v1::Subscription>>(PrepareAsyncGetSubscriptionRaw(context, request, cq));
    }
    // Updates an existing subscription. Note that certain properties of a
    // subscription, such as its topic, are not modifiable.
    // NOTE:  The style guide requires body: "subscription" instead of body: "*".
    // Keeping the latter for internal consistency in V1, however it should be
    // corrected in V2.  See
    // https://cloud.google.com/apis/design/standard_methods#update for details.
    virtual ::grpc::Status UpdateSubscription(::grpc::ClientContext* context, const ::google::pubsub::v1::UpdateSubscriptionRequest& request, ::google::pubsub::v1::Subscription* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::pubsub::v1::Subscription>> AsyncUpdateSubscription(::grpc::ClientContext* context, const ::google::pubsub::v1::UpdateSubscriptionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::pubsub::v1::Subscription>>(AsyncUpdateSubscriptionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::pubsub::v1::Subscription>> PrepareAsyncUpdateSubscription(::grpc::ClientContext* context, const ::google::pubsub::v1::UpdateSubscriptionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::pubsub::v1::Subscription>>(PrepareAsyncUpdateSubscriptionRaw(context, request, cq));
    }
    // Lists matching subscriptions.
    virtual ::grpc::Status ListSubscriptions(::grpc::ClientContext* context, const ::google::pubsub::v1::ListSubscriptionsRequest& request, ::google::pubsub::v1::ListSubscriptionsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::pubsub::v1::ListSubscriptionsResponse>> AsyncListSubscriptions(::grpc::ClientContext* context, const ::google::pubsub::v1::ListSubscriptionsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::pubsub::v1::ListSubscriptionsResponse>>(AsyncListSubscriptionsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::pubsub::v1::ListSubscriptionsResponse>> PrepareAsyncListSubscriptions(::grpc::ClientContext* context, const ::google::pubsub::v1::ListSubscriptionsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::pubsub::v1::ListSubscriptionsResponse>>(PrepareAsyncListSubscriptionsRaw(context, request, cq));
    }
    // Deletes an existing subscription. All messages retained in the subscription
    // are immediately dropped. Calls to `Pull` after deletion will return
    // `NOT_FOUND`. After a subscription is deleted, a new one may be created with
    // the same name, but the new one has no association with the old
    // subscription or its topic unless the same topic is specified.
    virtual ::grpc::Status DeleteSubscription(::grpc::ClientContext* context, const ::google::pubsub::v1::DeleteSubscriptionRequest& request, ::google::protobuf::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> AsyncDeleteSubscription(::grpc::ClientContext* context, const ::google::pubsub::v1::DeleteSubscriptionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(AsyncDeleteSubscriptionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> PrepareAsyncDeleteSubscription(::grpc::ClientContext* context, const ::google::pubsub::v1::DeleteSubscriptionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(PrepareAsyncDeleteSubscriptionRaw(context, request, cq));
    }
    // Modifies the ack deadline for a specific message. This method is useful
    // to indicate that more time is needed to process a message by the
    // subscriber, or to make the message available for redelivery if the
    // processing was interrupted. Note that this does not modify the
    // subscription-level `ackDeadlineSeconds` used for subsequent messages.
    virtual ::grpc::Status ModifyAckDeadline(::grpc::ClientContext* context, const ::google::pubsub::v1::ModifyAckDeadlineRequest& request, ::google::protobuf::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> AsyncModifyAckDeadline(::grpc::ClientContext* context, const ::google::pubsub::v1::ModifyAckDeadlineRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(AsyncModifyAckDeadlineRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> PrepareAsyncModifyAckDeadline(::grpc::ClientContext* context, const ::google::pubsub::v1::ModifyAckDeadlineRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(PrepareAsyncModifyAckDeadlineRaw(context, request, cq));
    }
    // Acknowledges the messages associated with the `ack_ids` in the
    // `AcknowledgeRequest`. The Pub/Sub system can remove the relevant messages
    // from the subscription.
    //
    // Acknowledging a message whose ack deadline has expired may succeed,
    // but such a message may be redelivered later. Acknowledging a message more
    // than once will not result in an error.
    virtual ::grpc::Status Acknowledge(::grpc::ClientContext* context, const ::google::pubsub::v1::AcknowledgeRequest& request, ::google::protobuf::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> AsyncAcknowledge(::grpc::ClientContext* context, const ::google::pubsub::v1::AcknowledgeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(AsyncAcknowledgeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> PrepareAsyncAcknowledge(::grpc::ClientContext* context, const ::google::pubsub::v1::AcknowledgeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(PrepareAsyncAcknowledgeRaw(context, request, cq));
    }
    // Pulls messages from the server. Returns an empty list if there are no
    // messages available in the backlog. The server may return `UNAVAILABLE` if
    // there are too many concurrent pull requests pending for the given
    // subscription.
    virtual ::grpc::Status Pull(::grpc::ClientContext* context, const ::google::pubsub::v1::PullRequest& request, ::google::pubsub::v1::PullResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::pubsub::v1::PullResponse>> AsyncPull(::grpc::ClientContext* context, const ::google::pubsub::v1::PullRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::pubsub::v1::PullResponse>>(AsyncPullRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::pubsub::v1::PullResponse>> PrepareAsyncPull(::grpc::ClientContext* context, const ::google::pubsub::v1::PullRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::pubsub::v1::PullResponse>>(PrepareAsyncPullRaw(context, request, cq));
    }
    // (EXPERIMENTAL) StreamingPull is an experimental feature. This RPC will
    // respond with UNIMPLEMENTED errors unless you have been invited to test
    // this feature. Contact cloud-pubsub@google.com with any questions.
    //
    // Establishes a stream with the server, which sends messages down to the
    // client. The client streams acknowledgements and ack deadline modifications
    // back to the server. The server will close the stream and return the status
    // on any error. The server may close the stream with status `OK` to reassign
    // server-side resources, in which case, the client should re-establish the
    // stream. `UNAVAILABLE` may also be returned in the case of a transient error
    // (e.g., a server restart). These should also be retried by the client. Flow
    // control can be achieved by configuring the underlying RPC channel.
    std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::google::pubsub::v1::StreamingPullRequest, ::google::pubsub::v1::StreamingPullResponse>> StreamingPull(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::google::pubsub::v1::StreamingPullRequest, ::google::pubsub::v1::StreamingPullResponse>>(StreamingPullRaw(context));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::google::pubsub::v1::StreamingPullRequest, ::google::pubsub::v1::StreamingPullResponse>> AsyncStreamingPull(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::google::pubsub::v1::StreamingPullRequest, ::google::pubsub::v1::StreamingPullResponse>>(AsyncStreamingPullRaw(context, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::google::pubsub::v1::StreamingPullRequest, ::google::pubsub::v1::StreamingPullResponse>> PrepareAsyncStreamingPull(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::google::pubsub::v1::StreamingPullRequest, ::google::pubsub::v1::StreamingPullResponse>>(PrepareAsyncStreamingPullRaw(context, cq));
    }
    // Modifies the `PushConfig` for a specified subscription.
    //
    // This may be used to change a push subscription to a pull one (signified by
    // an empty `PushConfig`) or vice versa, or change the endpoint URL and other
    // attributes of a push subscription. Messages will accumulate for delivery
    // continuously through the call regardless of changes to the `PushConfig`.
    virtual ::grpc::Status ModifyPushConfig(::grpc::ClientContext* context, const ::google::pubsub::v1::ModifyPushConfigRequest& request, ::google::protobuf::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> AsyncModifyPushConfig(::grpc::ClientContext* context, const ::google::pubsub::v1::ModifyPushConfigRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(AsyncModifyPushConfigRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> PrepareAsyncModifyPushConfig(::grpc::ClientContext* context, const ::google::pubsub::v1::ModifyPushConfigRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(PrepareAsyncModifyPushConfigRaw(context, request, cq));
    }
    // Lists the existing snapshots.
    virtual ::grpc::Status ListSnapshots(::grpc::ClientContext* context, const ::google::pubsub::v1::ListSnapshotsRequest& request, ::google::pubsub::v1::ListSnapshotsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::pubsub::v1::ListSnapshotsResponse>> AsyncListSnapshots(::grpc::ClientContext* context, const ::google::pubsub::v1::ListSnapshotsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::pubsub::v1::ListSnapshotsResponse>>(AsyncListSnapshotsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::pubsub::v1::ListSnapshotsResponse>> PrepareAsyncListSnapshots(::grpc::ClientContext* context, const ::google::pubsub::v1::ListSnapshotsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::pubsub::v1::ListSnapshotsResponse>>(PrepareAsyncListSnapshotsRaw(context, request, cq));
    }
    // Creates a snapshot from the requested subscription.
    // If the snapshot already exists, returns `ALREADY_EXISTS`.
    // If the requested subscription doesn't exist, returns `NOT_FOUND`.
    //
    // If the name is not provided in the request, the server will assign a random
    // name for this snapshot on the same project as the subscription, conforming
    // to the
    // [resource name format](https://cloud.google.com/pubsub/docs/overview#names).
    // The generated name is populated in the returned Snapshot object.
    // Note that for REST API requests, you must specify a name in the request.
    virtual ::grpc::Status CreateSnapshot(::grpc::ClientContext* context, const ::google::pubsub::v1::CreateSnapshotRequest& request, ::google::pubsub::v1::Snapshot* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::pubsub::v1::Snapshot>> AsyncCreateSnapshot(::grpc::ClientContext* context, const ::google::pubsub::v1::CreateSnapshotRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::pubsub::v1::Snapshot>>(AsyncCreateSnapshotRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::pubsub::v1::Snapshot>> PrepareAsyncCreateSnapshot(::grpc::ClientContext* context, const ::google::pubsub::v1::CreateSnapshotRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::pubsub::v1::Snapshot>>(PrepareAsyncCreateSnapshotRaw(context, request, cq));
    }
    // Updates an existing snapshot. Note that certain properties of a snapshot
    // are not modifiable.
    // NOTE:  The style guide requires body: "snapshot" instead of body: "*".
    // Keeping the latter for internal consistency in V1, however it should be
    // corrected in V2.  See
    // https://cloud.google.com/apis/design/standard_methods#update for details.
    virtual ::grpc::Status UpdateSnapshot(::grpc::ClientContext* context, const ::google::pubsub::v1::UpdateSnapshotRequest& request, ::google::pubsub::v1::Snapshot* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::pubsub::v1::Snapshot>> AsyncUpdateSnapshot(::grpc::ClientContext* context, const ::google::pubsub::v1::UpdateSnapshotRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::pubsub::v1::Snapshot>>(AsyncUpdateSnapshotRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::pubsub::v1::Snapshot>> PrepareAsyncUpdateSnapshot(::grpc::ClientContext* context, const ::google::pubsub::v1::UpdateSnapshotRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::pubsub::v1::Snapshot>>(PrepareAsyncUpdateSnapshotRaw(context, request, cq));
    }
    // Removes an existing snapshot. All messages retained in the snapshot
    // are immediately dropped. After a snapshot is deleted, a new one may be
    // created with the same name, but the new one has no association with the old
    // snapshot or its subscription, unless the same subscription is specified.
    virtual ::grpc::Status DeleteSnapshot(::grpc::ClientContext* context, const ::google::pubsub::v1::DeleteSnapshotRequest& request, ::google::protobuf::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> AsyncDeleteSnapshot(::grpc::ClientContext* context, const ::google::pubsub::v1::DeleteSnapshotRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(AsyncDeleteSnapshotRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> PrepareAsyncDeleteSnapshot(::grpc::ClientContext* context, const ::google::pubsub::v1::DeleteSnapshotRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(PrepareAsyncDeleteSnapshotRaw(context, request, cq));
    }
    // Seeks an existing subscription to a point in time or to a given snapshot,
    // whichever is provided in the request.
    virtual ::grpc::Status Seek(::grpc::ClientContext* context, const ::google::pubsub::v1::SeekRequest& request, ::google::pubsub::v1::SeekResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::pubsub::v1::SeekResponse>> AsyncSeek(::grpc::ClientContext* context, const ::google::pubsub::v1::SeekRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::pubsub::v1::SeekResponse>>(AsyncSeekRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::pubsub::v1::SeekResponse>> PrepareAsyncSeek(::grpc::ClientContext* context, const ::google::pubsub::v1::SeekRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::pubsub::v1::SeekResponse>>(PrepareAsyncSeekRaw(context, request, cq));
    }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::pubsub::v1::Subscription>* AsyncCreateSubscriptionRaw(::grpc::ClientContext* context, const ::google::pubsub::v1::Subscription& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::pubsub::v1::Subscription>* PrepareAsyncCreateSubscriptionRaw(::grpc::ClientContext* context, const ::google::pubsub::v1::Subscription& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::pubsub::v1::Subscription>* AsyncGetSubscriptionRaw(::grpc::ClientContext* context, const ::google::pubsub::v1::GetSubscriptionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::pubsub::v1::Subscription>* PrepareAsyncGetSubscriptionRaw(::grpc::ClientContext* context, const ::google::pubsub::v1::GetSubscriptionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::pubsub::v1::Subscription>* AsyncUpdateSubscriptionRaw(::grpc::ClientContext* context, const ::google::pubsub::v1::UpdateSubscriptionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::pubsub::v1::Subscription>* PrepareAsyncUpdateSubscriptionRaw(::grpc::ClientContext* context, const ::google::pubsub::v1::UpdateSubscriptionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::pubsub::v1::ListSubscriptionsResponse>* AsyncListSubscriptionsRaw(::grpc::ClientContext* context, const ::google::pubsub::v1::ListSubscriptionsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::pubsub::v1::ListSubscriptionsResponse>* PrepareAsyncListSubscriptionsRaw(::grpc::ClientContext* context, const ::google::pubsub::v1::ListSubscriptionsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* AsyncDeleteSubscriptionRaw(::grpc::ClientContext* context, const ::google::pubsub::v1::DeleteSubscriptionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* PrepareAsyncDeleteSubscriptionRaw(::grpc::ClientContext* context, const ::google::pubsub::v1::DeleteSubscriptionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* AsyncModifyAckDeadlineRaw(::grpc::ClientContext* context, const ::google::pubsub::v1::ModifyAckDeadlineRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* PrepareAsyncModifyAckDeadlineRaw(::grpc::ClientContext* context, const ::google::pubsub::v1::ModifyAckDeadlineRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* AsyncAcknowledgeRaw(::grpc::ClientContext* context, const ::google::pubsub::v1::AcknowledgeRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* PrepareAsyncAcknowledgeRaw(::grpc::ClientContext* context, const ::google::pubsub::v1::AcknowledgeRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::pubsub::v1::PullResponse>* AsyncPullRaw(::grpc::ClientContext* context, const ::google::pubsub::v1::PullRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::pubsub::v1::PullResponse>* PrepareAsyncPullRaw(::grpc::ClientContext* context, const ::google::pubsub::v1::PullRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderWriterInterface< ::google::pubsub::v1::StreamingPullRequest, ::google::pubsub::v1::StreamingPullResponse>* StreamingPullRaw(::grpc::ClientContext* context) = 0;
    virtual ::grpc::ClientAsyncReaderWriterInterface< ::google::pubsub::v1::StreamingPullRequest, ::google::pubsub::v1::StreamingPullResponse>* AsyncStreamingPullRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderWriterInterface< ::google::pubsub::v1::StreamingPullRequest, ::google::pubsub::v1::StreamingPullResponse>* PrepareAsyncStreamingPullRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* AsyncModifyPushConfigRaw(::grpc::ClientContext* context, const ::google::pubsub::v1::ModifyPushConfigRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* PrepareAsyncModifyPushConfigRaw(::grpc::ClientContext* context, const ::google::pubsub::v1::ModifyPushConfigRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::pubsub::v1::ListSnapshotsResponse>* AsyncListSnapshotsRaw(::grpc::ClientContext* context, const ::google::pubsub::v1::ListSnapshotsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::pubsub::v1::ListSnapshotsResponse>* PrepareAsyncListSnapshotsRaw(::grpc::ClientContext* context, const ::google::pubsub::v1::ListSnapshotsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::pubsub::v1::Snapshot>* AsyncCreateSnapshotRaw(::grpc::ClientContext* context, const ::google::pubsub::v1::CreateSnapshotRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::pubsub::v1::Snapshot>* PrepareAsyncCreateSnapshotRaw(::grpc::ClientContext* context, const ::google::pubsub::v1::CreateSnapshotRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::pubsub::v1::Snapshot>* AsyncUpdateSnapshotRaw(::grpc::ClientContext* context, const ::google::pubsub::v1::UpdateSnapshotRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::pubsub::v1::Snapshot>* PrepareAsyncUpdateSnapshotRaw(::grpc::ClientContext* context, const ::google::pubsub::v1::UpdateSnapshotRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* AsyncDeleteSnapshotRaw(::grpc::ClientContext* context, const ::google::pubsub::v1::DeleteSnapshotRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* PrepareAsyncDeleteSnapshotRaw(::grpc::ClientContext* context, const ::google::pubsub::v1::DeleteSnapshotRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::pubsub::v1::SeekResponse>* AsyncSeekRaw(::grpc::ClientContext* context, const ::google::pubsub::v1::SeekRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::pubsub::v1::SeekResponse>* PrepareAsyncSeekRaw(::grpc::ClientContext* context, const ::google::pubsub::v1::SeekRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status CreateSubscription(::grpc::ClientContext* context, const ::google::pubsub::v1::Subscription& request, ::google::pubsub::v1::Subscription* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::pubsub::v1::Subscription>> AsyncCreateSubscription(::grpc::ClientContext* context, const ::google::pubsub::v1::Subscription& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::pubsub::v1::Subscription>>(AsyncCreateSubscriptionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::pubsub::v1::Subscription>> PrepareAsyncCreateSubscription(::grpc::ClientContext* context, const ::google::pubsub::v1::Subscription& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::pubsub::v1::Subscription>>(PrepareAsyncCreateSubscriptionRaw(context, request, cq));
    }
    ::grpc::Status GetSubscription(::grpc::ClientContext* context, const ::google::pubsub::v1::GetSubscriptionRequest& request, ::google::pubsub::v1::Subscription* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::pubsub::v1::Subscription>> AsyncGetSubscription(::grpc::ClientContext* context, const ::google::pubsub::v1::GetSubscriptionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::pubsub::v1::Subscription>>(AsyncGetSubscriptionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::pubsub::v1::Subscription>> PrepareAsyncGetSubscription(::grpc::ClientContext* context, const ::google::pubsub::v1::GetSubscriptionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::pubsub::v1::Subscription>>(PrepareAsyncGetSubscriptionRaw(context, request, cq));
    }
    ::grpc::Status UpdateSubscription(::grpc::ClientContext* context, const ::google::pubsub::v1::UpdateSubscriptionRequest& request, ::google::pubsub::v1::Subscription* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::pubsub::v1::Subscription>> AsyncUpdateSubscription(::grpc::ClientContext* context, const ::google::pubsub::v1::UpdateSubscriptionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::pubsub::v1::Subscription>>(AsyncUpdateSubscriptionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::pubsub::v1::Subscription>> PrepareAsyncUpdateSubscription(::grpc::ClientContext* context, const ::google::pubsub::v1::UpdateSubscriptionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::pubsub::v1::Subscription>>(PrepareAsyncUpdateSubscriptionRaw(context, request, cq));
    }
    ::grpc::Status ListSubscriptions(::grpc::ClientContext* context, const ::google::pubsub::v1::ListSubscriptionsRequest& request, ::google::pubsub::v1::ListSubscriptionsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::pubsub::v1::ListSubscriptionsResponse>> AsyncListSubscriptions(::grpc::ClientContext* context, const ::google::pubsub::v1::ListSubscriptionsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::pubsub::v1::ListSubscriptionsResponse>>(AsyncListSubscriptionsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::pubsub::v1::ListSubscriptionsResponse>> PrepareAsyncListSubscriptions(::grpc::ClientContext* context, const ::google::pubsub::v1::ListSubscriptionsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::pubsub::v1::ListSubscriptionsResponse>>(PrepareAsyncListSubscriptionsRaw(context, request, cq));
    }
    ::grpc::Status DeleteSubscription(::grpc::ClientContext* context, const ::google::pubsub::v1::DeleteSubscriptionRequest& request, ::google::protobuf::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> AsyncDeleteSubscription(::grpc::ClientContext* context, const ::google::pubsub::v1::DeleteSubscriptionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(AsyncDeleteSubscriptionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> PrepareAsyncDeleteSubscription(::grpc::ClientContext* context, const ::google::pubsub::v1::DeleteSubscriptionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(PrepareAsyncDeleteSubscriptionRaw(context, request, cq));
    }
    ::grpc::Status ModifyAckDeadline(::grpc::ClientContext* context, const ::google::pubsub::v1::ModifyAckDeadlineRequest& request, ::google::protobuf::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> AsyncModifyAckDeadline(::grpc::ClientContext* context, const ::google::pubsub::v1::ModifyAckDeadlineRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(AsyncModifyAckDeadlineRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> PrepareAsyncModifyAckDeadline(::grpc::ClientContext* context, const ::google::pubsub::v1::ModifyAckDeadlineRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(PrepareAsyncModifyAckDeadlineRaw(context, request, cq));
    }
    ::grpc::Status Acknowledge(::grpc::ClientContext* context, const ::google::pubsub::v1::AcknowledgeRequest& request, ::google::protobuf::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> AsyncAcknowledge(::grpc::ClientContext* context, const ::google::pubsub::v1::AcknowledgeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(AsyncAcknowledgeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> PrepareAsyncAcknowledge(::grpc::ClientContext* context, const ::google::pubsub::v1::AcknowledgeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(PrepareAsyncAcknowledgeRaw(context, request, cq));
    }
    ::grpc::Status Pull(::grpc::ClientContext* context, const ::google::pubsub::v1::PullRequest& request, ::google::pubsub::v1::PullResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::pubsub::v1::PullResponse>> AsyncPull(::grpc::ClientContext* context, const ::google::pubsub::v1::PullRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::pubsub::v1::PullResponse>>(AsyncPullRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::pubsub::v1::PullResponse>> PrepareAsyncPull(::grpc::ClientContext* context, const ::google::pubsub::v1::PullRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::pubsub::v1::PullResponse>>(PrepareAsyncPullRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderWriter< ::google::pubsub::v1::StreamingPullRequest, ::google::pubsub::v1::StreamingPullResponse>> StreamingPull(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriter< ::google::pubsub::v1::StreamingPullRequest, ::google::pubsub::v1::StreamingPullResponse>>(StreamingPullRaw(context));
    }
    std::unique_ptr<  ::grpc::ClientAsyncReaderWriter< ::google::pubsub::v1::StreamingPullRequest, ::google::pubsub::v1::StreamingPullResponse>> AsyncStreamingPull(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriter< ::google::pubsub::v1::StreamingPullRequest, ::google::pubsub::v1::StreamingPullResponse>>(AsyncStreamingPullRaw(context, cq, tag));
    }
    std::unique_ptr<  ::grpc::ClientAsyncReaderWriter< ::google::pubsub::v1::StreamingPullRequest, ::google::pubsub::v1::StreamingPullResponse>> PrepareAsyncStreamingPull(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriter< ::google::pubsub::v1::StreamingPullRequest, ::google::pubsub::v1::StreamingPullResponse>>(PrepareAsyncStreamingPullRaw(context, cq));
    }
    ::grpc::Status ModifyPushConfig(::grpc::ClientContext* context, const ::google::pubsub::v1::ModifyPushConfigRequest& request, ::google::protobuf::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> AsyncModifyPushConfig(::grpc::ClientContext* context, const ::google::pubsub::v1::ModifyPushConfigRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(AsyncModifyPushConfigRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> PrepareAsyncModifyPushConfig(::grpc::ClientContext* context, const ::google::pubsub::v1::ModifyPushConfigRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(PrepareAsyncModifyPushConfigRaw(context, request, cq));
    }
    ::grpc::Status ListSnapshots(::grpc::ClientContext* context, const ::google::pubsub::v1::ListSnapshotsRequest& request, ::google::pubsub::v1::ListSnapshotsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::pubsub::v1::ListSnapshotsResponse>> AsyncListSnapshots(::grpc::ClientContext* context, const ::google::pubsub::v1::ListSnapshotsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::pubsub::v1::ListSnapshotsResponse>>(AsyncListSnapshotsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::pubsub::v1::ListSnapshotsResponse>> PrepareAsyncListSnapshots(::grpc::ClientContext* context, const ::google::pubsub::v1::ListSnapshotsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::pubsub::v1::ListSnapshotsResponse>>(PrepareAsyncListSnapshotsRaw(context, request, cq));
    }
    ::grpc::Status CreateSnapshot(::grpc::ClientContext* context, const ::google::pubsub::v1::CreateSnapshotRequest& request, ::google::pubsub::v1::Snapshot* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::pubsub::v1::Snapshot>> AsyncCreateSnapshot(::grpc::ClientContext* context, const ::google::pubsub::v1::CreateSnapshotRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::pubsub::v1::Snapshot>>(AsyncCreateSnapshotRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::pubsub::v1::Snapshot>> PrepareAsyncCreateSnapshot(::grpc::ClientContext* context, const ::google::pubsub::v1::CreateSnapshotRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::pubsub::v1::Snapshot>>(PrepareAsyncCreateSnapshotRaw(context, request, cq));
    }
    ::grpc::Status UpdateSnapshot(::grpc::ClientContext* context, const ::google::pubsub::v1::UpdateSnapshotRequest& request, ::google::pubsub::v1::Snapshot* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::pubsub::v1::Snapshot>> AsyncUpdateSnapshot(::grpc::ClientContext* context, const ::google::pubsub::v1::UpdateSnapshotRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::pubsub::v1::Snapshot>>(AsyncUpdateSnapshotRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::pubsub::v1::Snapshot>> PrepareAsyncUpdateSnapshot(::grpc::ClientContext* context, const ::google::pubsub::v1::UpdateSnapshotRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::pubsub::v1::Snapshot>>(PrepareAsyncUpdateSnapshotRaw(context, request, cq));
    }
    ::grpc::Status DeleteSnapshot(::grpc::ClientContext* context, const ::google::pubsub::v1::DeleteSnapshotRequest& request, ::google::protobuf::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> AsyncDeleteSnapshot(::grpc::ClientContext* context, const ::google::pubsub::v1::DeleteSnapshotRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(AsyncDeleteSnapshotRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> PrepareAsyncDeleteSnapshot(::grpc::ClientContext* context, const ::google::pubsub::v1::DeleteSnapshotRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(PrepareAsyncDeleteSnapshotRaw(context, request, cq));
    }
    ::grpc::Status Seek(::grpc::ClientContext* context, const ::google::pubsub::v1::SeekRequest& request, ::google::pubsub::v1::SeekResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::pubsub::v1::SeekResponse>> AsyncSeek(::grpc::ClientContext* context, const ::google::pubsub::v1::SeekRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::pubsub::v1::SeekResponse>>(AsyncSeekRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::pubsub::v1::SeekResponse>> PrepareAsyncSeek(::grpc::ClientContext* context, const ::google::pubsub::v1::SeekRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::pubsub::v1::SeekResponse>>(PrepareAsyncSeekRaw(context, request, cq));
    }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    ::grpc::ClientAsyncResponseReader< ::google::pubsub::v1::Subscription>* AsyncCreateSubscriptionRaw(::grpc::ClientContext* context, const ::google::pubsub::v1::Subscription& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::pubsub::v1::Subscription>* PrepareAsyncCreateSubscriptionRaw(::grpc::ClientContext* context, const ::google::pubsub::v1::Subscription& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::pubsub::v1::Subscription>* AsyncGetSubscriptionRaw(::grpc::ClientContext* context, const ::google::pubsub::v1::GetSubscriptionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::pubsub::v1::Subscription>* PrepareAsyncGetSubscriptionRaw(::grpc::ClientContext* context, const ::google::pubsub::v1::GetSubscriptionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::pubsub::v1::Subscription>* AsyncUpdateSubscriptionRaw(::grpc::ClientContext* context, const ::google::pubsub::v1::UpdateSubscriptionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::pubsub::v1::Subscription>* PrepareAsyncUpdateSubscriptionRaw(::grpc::ClientContext* context, const ::google::pubsub::v1::UpdateSubscriptionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::pubsub::v1::ListSubscriptionsResponse>* AsyncListSubscriptionsRaw(::grpc::ClientContext* context, const ::google::pubsub::v1::ListSubscriptionsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::pubsub::v1::ListSubscriptionsResponse>* PrepareAsyncListSubscriptionsRaw(::grpc::ClientContext* context, const ::google::pubsub::v1::ListSubscriptionsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* AsyncDeleteSubscriptionRaw(::grpc::ClientContext* context, const ::google::pubsub::v1::DeleteSubscriptionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* PrepareAsyncDeleteSubscriptionRaw(::grpc::ClientContext* context, const ::google::pubsub::v1::DeleteSubscriptionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* AsyncModifyAckDeadlineRaw(::grpc::ClientContext* context, const ::google::pubsub::v1::ModifyAckDeadlineRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* PrepareAsyncModifyAckDeadlineRaw(::grpc::ClientContext* context, const ::google::pubsub::v1::ModifyAckDeadlineRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* AsyncAcknowledgeRaw(::grpc::ClientContext* context, const ::google::pubsub::v1::AcknowledgeRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* PrepareAsyncAcknowledgeRaw(::grpc::ClientContext* context, const ::google::pubsub::v1::AcknowledgeRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::pubsub::v1::PullResponse>* AsyncPullRaw(::grpc::ClientContext* context, const ::google::pubsub::v1::PullRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::pubsub::v1::PullResponse>* PrepareAsyncPullRaw(::grpc::ClientContext* context, const ::google::pubsub::v1::PullRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReaderWriter< ::google::pubsub::v1::StreamingPullRequest, ::google::pubsub::v1::StreamingPullResponse>* StreamingPullRaw(::grpc::ClientContext* context) override;
    ::grpc::ClientAsyncReaderWriter< ::google::pubsub::v1::StreamingPullRequest, ::google::pubsub::v1::StreamingPullResponse>* AsyncStreamingPullRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReaderWriter< ::google::pubsub::v1::StreamingPullRequest, ::google::pubsub::v1::StreamingPullResponse>* PrepareAsyncStreamingPullRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* AsyncModifyPushConfigRaw(::grpc::ClientContext* context, const ::google::pubsub::v1::ModifyPushConfigRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* PrepareAsyncModifyPushConfigRaw(::grpc::ClientContext* context, const ::google::pubsub::v1::ModifyPushConfigRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::pubsub::v1::ListSnapshotsResponse>* AsyncListSnapshotsRaw(::grpc::ClientContext* context, const ::google::pubsub::v1::ListSnapshotsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::pubsub::v1::ListSnapshotsResponse>* PrepareAsyncListSnapshotsRaw(::grpc::ClientContext* context, const ::google::pubsub::v1::ListSnapshotsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::pubsub::v1::Snapshot>* AsyncCreateSnapshotRaw(::grpc::ClientContext* context, const ::google::pubsub::v1::CreateSnapshotRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::pubsub::v1::Snapshot>* PrepareAsyncCreateSnapshotRaw(::grpc::ClientContext* context, const ::google::pubsub::v1::CreateSnapshotRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::pubsub::v1::Snapshot>* AsyncUpdateSnapshotRaw(::grpc::ClientContext* context, const ::google::pubsub::v1::UpdateSnapshotRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::pubsub::v1::Snapshot>* PrepareAsyncUpdateSnapshotRaw(::grpc::ClientContext* context, const ::google::pubsub::v1::UpdateSnapshotRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* AsyncDeleteSnapshotRaw(::grpc::ClientContext* context, const ::google::pubsub::v1::DeleteSnapshotRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* PrepareAsyncDeleteSnapshotRaw(::grpc::ClientContext* context, const ::google::pubsub::v1::DeleteSnapshotRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::pubsub::v1::SeekResponse>* AsyncSeekRaw(::grpc::ClientContext* context, const ::google::pubsub::v1::SeekRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::pubsub::v1::SeekResponse>* PrepareAsyncSeekRaw(::grpc::ClientContext* context, const ::google::pubsub::v1::SeekRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_CreateSubscription_;
    const ::grpc::internal::RpcMethod rpcmethod_GetSubscription_;
    const ::grpc::internal::RpcMethod rpcmethod_UpdateSubscription_;
    const ::grpc::internal::RpcMethod rpcmethod_ListSubscriptions_;
    const ::grpc::internal::RpcMethod rpcmethod_DeleteSubscription_;
    const ::grpc::internal::RpcMethod rpcmethod_ModifyAckDeadline_;
    const ::grpc::internal::RpcMethod rpcmethod_Acknowledge_;
    const ::grpc::internal::RpcMethod rpcmethod_Pull_;
    const ::grpc::internal::RpcMethod rpcmethod_StreamingPull_;
    const ::grpc::internal::RpcMethod rpcmethod_ModifyPushConfig_;
    const ::grpc::internal::RpcMethod rpcmethod_ListSnapshots_;
    const ::grpc::internal::RpcMethod rpcmethod_CreateSnapshot_;
    const ::grpc::internal::RpcMethod rpcmethod_UpdateSnapshot_;
    const ::grpc::internal::RpcMethod rpcmethod_DeleteSnapshot_;
    const ::grpc::internal::RpcMethod rpcmethod_Seek_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Creates a subscription to a given topic.
    // If the subscription already exists, returns `ALREADY_EXISTS`.
    // If the corresponding topic doesn't exist, returns `NOT_FOUND`.
    //
    // If the name is not provided in the request, the server will assign a random
    // name for this subscription on the same project as the topic, conforming
    // to the
    // [resource name format](https://cloud.google.com/pubsub/docs/overview#names).
    // The generated name is populated in the returned Subscription object.
    // Note that for REST API requests, you must specify a name in the request.
    virtual ::grpc::Status CreateSubscription(::grpc::ServerContext* context, const ::google::pubsub::v1::Subscription* request, ::google::pubsub::v1::Subscription* response);
    // Gets the configuration details of a subscription.
    virtual ::grpc::Status GetSubscription(::grpc::ServerContext* context, const ::google::pubsub::v1::GetSubscriptionRequest* request, ::google::pubsub::v1::Subscription* response);
    // Updates an existing subscription. Note that certain properties of a
    // subscription, such as its topic, are not modifiable.
    // NOTE:  The style guide requires body: "subscription" instead of body: "*".
    // Keeping the latter for internal consistency in V1, however it should be
    // corrected in V2.  See
    // https://cloud.google.com/apis/design/standard_methods#update for details.
    virtual ::grpc::Status UpdateSubscription(::grpc::ServerContext* context, const ::google::pubsub::v1::UpdateSubscriptionRequest* request, ::google::pubsub::v1::Subscription* response);
    // Lists matching subscriptions.
    virtual ::grpc::Status ListSubscriptions(::grpc::ServerContext* context, const ::google::pubsub::v1::ListSubscriptionsRequest* request, ::google::pubsub::v1::ListSubscriptionsResponse* response);
    // Deletes an existing subscription. All messages retained in the subscription
    // are immediately dropped. Calls to `Pull` after deletion will return
    // `NOT_FOUND`. After a subscription is deleted, a new one may be created with
    // the same name, but the new one has no association with the old
    // subscription or its topic unless the same topic is specified.
    virtual ::grpc::Status DeleteSubscription(::grpc::ServerContext* context, const ::google::pubsub::v1::DeleteSubscriptionRequest* request, ::google::protobuf::Empty* response);
    // Modifies the ack deadline for a specific message. This method is useful
    // to indicate that more time is needed to process a message by the
    // subscriber, or to make the message available for redelivery if the
    // processing was interrupted. Note that this does not modify the
    // subscription-level `ackDeadlineSeconds` used for subsequent messages.
    virtual ::grpc::Status ModifyAckDeadline(::grpc::ServerContext* context, const ::google::pubsub::v1::ModifyAckDeadlineRequest* request, ::google::protobuf::Empty* response);
    // Acknowledges the messages associated with the `ack_ids` in the
    // `AcknowledgeRequest`. The Pub/Sub system can remove the relevant messages
    // from the subscription.
    //
    // Acknowledging a message whose ack deadline has expired may succeed,
    // but such a message may be redelivered later. Acknowledging a message more
    // than once will not result in an error.
    virtual ::grpc::Status Acknowledge(::grpc::ServerContext* context, const ::google::pubsub::v1::AcknowledgeRequest* request, ::google::protobuf::Empty* response);
    // Pulls messages from the server. Returns an empty list if there are no
    // messages available in the backlog. The server may return `UNAVAILABLE` if
    // there are too many concurrent pull requests pending for the given
    // subscription.
    virtual ::grpc::Status Pull(::grpc::ServerContext* context, const ::google::pubsub::v1::PullRequest* request, ::google::pubsub::v1::PullResponse* response);
    // (EXPERIMENTAL) StreamingPull is an experimental feature. This RPC will
    // respond with UNIMPLEMENTED errors unless you have been invited to test
    // this feature. Contact cloud-pubsub@google.com with any questions.
    //
    // Establishes a stream with the server, which sends messages down to the
    // client. The client streams acknowledgements and ack deadline modifications
    // back to the server. The server will close the stream and return the status
    // on any error. The server may close the stream with status `OK` to reassign
    // server-side resources, in which case, the client should re-establish the
    // stream. `UNAVAILABLE` may also be returned in the case of a transient error
    // (e.g., a server restart). These should also be retried by the client. Flow
    // control can be achieved by configuring the underlying RPC channel.
    virtual ::grpc::Status StreamingPull(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::google::pubsub::v1::StreamingPullResponse, ::google::pubsub::v1::StreamingPullRequest>* stream);
    // Modifies the `PushConfig` for a specified subscription.
    //
    // This may be used to change a push subscription to a pull one (signified by
    // an empty `PushConfig`) or vice versa, or change the endpoint URL and other
    // attributes of a push subscription. Messages will accumulate for delivery
    // continuously through the call regardless of changes to the `PushConfig`.
    virtual ::grpc::Status ModifyPushConfig(::grpc::ServerContext* context, const ::google::pubsub::v1::ModifyPushConfigRequest* request, ::google::protobuf::Empty* response);
    // Lists the existing snapshots.
    virtual ::grpc::Status ListSnapshots(::grpc::ServerContext* context, const ::google::pubsub::v1::ListSnapshotsRequest* request, ::google::pubsub::v1::ListSnapshotsResponse* response);
    // Creates a snapshot from the requested subscription.
    // If the snapshot already exists, returns `ALREADY_EXISTS`.
    // If the requested subscription doesn't exist, returns `NOT_FOUND`.
    //
    // If the name is not provided in the request, the server will assign a random
    // name for this snapshot on the same project as the subscription, conforming
    // to the
    // [resource name format](https://cloud.google.com/pubsub/docs/overview#names).
    // The generated name is populated in the returned Snapshot object.
    // Note that for REST API requests, you must specify a name in the request.
    virtual ::grpc::Status CreateSnapshot(::grpc::ServerContext* context, const ::google::pubsub::v1::CreateSnapshotRequest* request, ::google::pubsub::v1::Snapshot* response);
    // Updates an existing snapshot. Note that certain properties of a snapshot
    // are not modifiable.
    // NOTE:  The style guide requires body: "snapshot" instead of body: "*".
    // Keeping the latter for internal consistency in V1, however it should be
    // corrected in V2.  See
    // https://cloud.google.com/apis/design/standard_methods#update for details.
    virtual ::grpc::Status UpdateSnapshot(::grpc::ServerContext* context, const ::google::pubsub::v1::UpdateSnapshotRequest* request, ::google::pubsub::v1::Snapshot* response);
    // Removes an existing snapshot. All messages retained in the snapshot
    // are immediately dropped. After a snapshot is deleted, a new one may be
    // created with the same name, but the new one has no association with the old
    // snapshot or its subscription, unless the same subscription is specified.
    virtual ::grpc::Status DeleteSnapshot(::grpc::ServerContext* context, const ::google::pubsub::v1::DeleteSnapshotRequest* request, ::google::protobuf::Empty* response);
    // Seeks an existing subscription to a point in time or to a given snapshot,
    // whichever is provided in the request.
    virtual ::grpc::Status Seek(::grpc::ServerContext* context, const ::google::pubsub::v1::SeekRequest* request, ::google::pubsub::v1::SeekResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_CreateSubscription : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_CreateSubscription() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_CreateSubscription() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateSubscription(::grpc::ServerContext* context, const ::google::pubsub::v1::Subscription* request, ::google::pubsub::v1::Subscription* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateSubscription(::grpc::ServerContext* context, ::google::pubsub::v1::Subscription* request, ::grpc::ServerAsyncResponseWriter< ::google::pubsub::v1::Subscription>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetSubscription : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_GetSubscription() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_GetSubscription() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetSubscription(::grpc::ServerContext* context, const ::google::pubsub::v1::GetSubscriptionRequest* request, ::google::pubsub::v1::Subscription* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetSubscription(::grpc::ServerContext* context, ::google::pubsub::v1::GetSubscriptionRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::pubsub::v1::Subscription>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_UpdateSubscription : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_UpdateSubscription() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_UpdateSubscription() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateSubscription(::grpc::ServerContext* context, const ::google::pubsub::v1::UpdateSubscriptionRequest* request, ::google::pubsub::v1::Subscription* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateSubscription(::grpc::ServerContext* context, ::google::pubsub::v1::UpdateSubscriptionRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::pubsub::v1::Subscription>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ListSubscriptions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_ListSubscriptions() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_ListSubscriptions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListSubscriptions(::grpc::ServerContext* context, const ::google::pubsub::v1::ListSubscriptionsRequest* request, ::google::pubsub::v1::ListSubscriptionsResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListSubscriptions(::grpc::ServerContext* context, ::google::pubsub::v1::ListSubscriptionsRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::pubsub::v1::ListSubscriptionsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DeleteSubscription : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_DeleteSubscription() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_DeleteSubscription() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteSubscription(::grpc::ServerContext* context, const ::google::pubsub::v1::DeleteSubscriptionRequest* request, ::google::protobuf::Empty* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteSubscription(::grpc::ServerContext* context, ::google::pubsub::v1::DeleteSubscriptionRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::protobuf::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ModifyAckDeadline : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_ModifyAckDeadline() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_ModifyAckDeadline() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ModifyAckDeadline(::grpc::ServerContext* context, const ::google::pubsub::v1::ModifyAckDeadlineRequest* request, ::google::protobuf::Empty* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestModifyAckDeadline(::grpc::ServerContext* context, ::google::pubsub::v1::ModifyAckDeadlineRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::protobuf::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Acknowledge : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_Acknowledge() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_Acknowledge() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Acknowledge(::grpc::ServerContext* context, const ::google::pubsub::v1::AcknowledgeRequest* request, ::google::protobuf::Empty* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAcknowledge(::grpc::ServerContext* context, ::google::pubsub::v1::AcknowledgeRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::protobuf::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Pull : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_Pull() {
      ::grpc::Service::MarkMethodAsync(7);
    }
    ~WithAsyncMethod_Pull() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Pull(::grpc::ServerContext* context, const ::google::pubsub::v1::PullRequest* request, ::google::pubsub::v1::PullResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPull(::grpc::ServerContext* context, ::google::pubsub::v1::PullRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::pubsub::v1::PullResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_StreamingPull : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_StreamingPull() {
      ::grpc::Service::MarkMethodAsync(8);
    }
    ~WithAsyncMethod_StreamingPull() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StreamingPull(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::google::pubsub::v1::StreamingPullResponse, ::google::pubsub::v1::StreamingPullRequest>* stream) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStreamingPull(::grpc::ServerContext* context, ::grpc::ServerAsyncReaderWriter< ::google::pubsub::v1::StreamingPullResponse, ::google::pubsub::v1::StreamingPullRequest>* stream, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncBidiStreaming(8, context, stream, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ModifyPushConfig : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_ModifyPushConfig() {
      ::grpc::Service::MarkMethodAsync(9);
    }
    ~WithAsyncMethod_ModifyPushConfig() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ModifyPushConfig(::grpc::ServerContext* context, const ::google::pubsub::v1::ModifyPushConfigRequest* request, ::google::protobuf::Empty* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestModifyPushConfig(::grpc::ServerContext* context, ::google::pubsub::v1::ModifyPushConfigRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::protobuf::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(9, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ListSnapshots : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_ListSnapshots() {
      ::grpc::Service::MarkMethodAsync(10);
    }
    ~WithAsyncMethod_ListSnapshots() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListSnapshots(::grpc::ServerContext* context, const ::google::pubsub::v1::ListSnapshotsRequest* request, ::google::pubsub::v1::ListSnapshotsResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListSnapshots(::grpc::ServerContext* context, ::google::pubsub::v1::ListSnapshotsRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::pubsub::v1::ListSnapshotsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(10, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_CreateSnapshot : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_CreateSnapshot() {
      ::grpc::Service::MarkMethodAsync(11);
    }
    ~WithAsyncMethod_CreateSnapshot() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateSnapshot(::grpc::ServerContext* context, const ::google::pubsub::v1::CreateSnapshotRequest* request, ::google::pubsub::v1::Snapshot* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateSnapshot(::grpc::ServerContext* context, ::google::pubsub::v1::CreateSnapshotRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::pubsub::v1::Snapshot>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(11, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_UpdateSnapshot : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_UpdateSnapshot() {
      ::grpc::Service::MarkMethodAsync(12);
    }
    ~WithAsyncMethod_UpdateSnapshot() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateSnapshot(::grpc::ServerContext* context, const ::google::pubsub::v1::UpdateSnapshotRequest* request, ::google::pubsub::v1::Snapshot* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateSnapshot(::grpc::ServerContext* context, ::google::pubsub::v1::UpdateSnapshotRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::pubsub::v1::Snapshot>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(12, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DeleteSnapshot : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_DeleteSnapshot() {
      ::grpc::Service::MarkMethodAsync(13);
    }
    ~WithAsyncMethod_DeleteSnapshot() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteSnapshot(::grpc::ServerContext* context, const ::google::pubsub::v1::DeleteSnapshotRequest* request, ::google::protobuf::Empty* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteSnapshot(::grpc::ServerContext* context, ::google::pubsub::v1::DeleteSnapshotRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::protobuf::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(13, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Seek : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_Seek() {
      ::grpc::Service::MarkMethodAsync(14);
    }
    ~WithAsyncMethod_Seek() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Seek(::grpc::ServerContext* context, const ::google::pubsub::v1::SeekRequest* request, ::google::pubsub::v1::SeekResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSeek(::grpc::ServerContext* context, ::google::pubsub::v1::SeekRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::pubsub::v1::SeekResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(14, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_CreateSubscription<WithAsyncMethod_GetSubscription<WithAsyncMethod_UpdateSubscription<WithAsyncMethod_ListSubscriptions<WithAsyncMethod_DeleteSubscription<WithAsyncMethod_ModifyAckDeadline<WithAsyncMethod_Acknowledge<WithAsyncMethod_Pull<WithAsyncMethod_StreamingPull<WithAsyncMethod_ModifyPushConfig<WithAsyncMethod_ListSnapshots<WithAsyncMethod_CreateSnapshot<WithAsyncMethod_UpdateSnapshot<WithAsyncMethod_DeleteSnapshot<WithAsyncMethod_Seek<Service > > > > > > > > > > > > > > > AsyncService;
  template <class BaseClass>
  class WithGenericMethod_CreateSubscription : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_CreateSubscription() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_CreateSubscription() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateSubscription(::grpc::ServerContext* context, const ::google::pubsub::v1::Subscription* request, ::google::pubsub::v1::Subscription* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetSubscription : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_GetSubscription() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_GetSubscription() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetSubscription(::grpc::ServerContext* context, const ::google::pubsub::v1::GetSubscriptionRequest* request, ::google::pubsub::v1::Subscription* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_UpdateSubscription : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_UpdateSubscription() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_UpdateSubscription() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateSubscription(::grpc::ServerContext* context, const ::google::pubsub::v1::UpdateSubscriptionRequest* request, ::google::pubsub::v1::Subscription* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ListSubscriptions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_ListSubscriptions() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_ListSubscriptions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListSubscriptions(::grpc::ServerContext* context, const ::google::pubsub::v1::ListSubscriptionsRequest* request, ::google::pubsub::v1::ListSubscriptionsResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DeleteSubscription : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_DeleteSubscription() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_DeleteSubscription() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteSubscription(::grpc::ServerContext* context, const ::google::pubsub::v1::DeleteSubscriptionRequest* request, ::google::protobuf::Empty* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ModifyAckDeadline : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_ModifyAckDeadline() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_ModifyAckDeadline() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ModifyAckDeadline(::grpc::ServerContext* context, const ::google::pubsub::v1::ModifyAckDeadlineRequest* request, ::google::protobuf::Empty* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Acknowledge : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_Acknowledge() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_Acknowledge() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Acknowledge(::grpc::ServerContext* context, const ::google::pubsub::v1::AcknowledgeRequest* request, ::google::protobuf::Empty* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Pull : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_Pull() {
      ::grpc::Service::MarkMethodGeneric(7);
    }
    ~WithGenericMethod_Pull() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Pull(::grpc::ServerContext* context, const ::google::pubsub::v1::PullRequest* request, ::google::pubsub::v1::PullResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_StreamingPull : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_StreamingPull() {
      ::grpc::Service::MarkMethodGeneric(8);
    }
    ~WithGenericMethod_StreamingPull() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StreamingPull(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::google::pubsub::v1::StreamingPullResponse, ::google::pubsub::v1::StreamingPullRequest>* stream) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ModifyPushConfig : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_ModifyPushConfig() {
      ::grpc::Service::MarkMethodGeneric(9);
    }
    ~WithGenericMethod_ModifyPushConfig() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ModifyPushConfig(::grpc::ServerContext* context, const ::google::pubsub::v1::ModifyPushConfigRequest* request, ::google::protobuf::Empty* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ListSnapshots : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_ListSnapshots() {
      ::grpc::Service::MarkMethodGeneric(10);
    }
    ~WithGenericMethod_ListSnapshots() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListSnapshots(::grpc::ServerContext* context, const ::google::pubsub::v1::ListSnapshotsRequest* request, ::google::pubsub::v1::ListSnapshotsResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_CreateSnapshot : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_CreateSnapshot() {
      ::grpc::Service::MarkMethodGeneric(11);
    }
    ~WithGenericMethod_CreateSnapshot() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateSnapshot(::grpc::ServerContext* context, const ::google::pubsub::v1::CreateSnapshotRequest* request, ::google::pubsub::v1::Snapshot* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_UpdateSnapshot : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_UpdateSnapshot() {
      ::grpc::Service::MarkMethodGeneric(12);
    }
    ~WithGenericMethod_UpdateSnapshot() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateSnapshot(::grpc::ServerContext* context, const ::google::pubsub::v1::UpdateSnapshotRequest* request, ::google::pubsub::v1::Snapshot* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DeleteSnapshot : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_DeleteSnapshot() {
      ::grpc::Service::MarkMethodGeneric(13);
    }
    ~WithGenericMethod_DeleteSnapshot() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteSnapshot(::grpc::ServerContext* context, const ::google::pubsub::v1::DeleteSnapshotRequest* request, ::google::protobuf::Empty* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Seek : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_Seek() {
      ::grpc::Service::MarkMethodGeneric(14);
    }
    ~WithGenericMethod_Seek() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Seek(::grpc::ServerContext* context, const ::google::pubsub::v1::SeekRequest* request, ::google::pubsub::v1::SeekResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CreateSubscription : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_CreateSubscription() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler< ::google::pubsub::v1::Subscription, ::google::pubsub::v1::Subscription>(std::bind(&WithStreamedUnaryMethod_CreateSubscription<BaseClass>::StreamedCreateSubscription, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_CreateSubscription() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CreateSubscription(::grpc::ServerContext* context, const ::google::pubsub::v1::Subscription* request, ::google::pubsub::v1::Subscription* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCreateSubscription(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::pubsub::v1::Subscription,::google::pubsub::v1::Subscription>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetSubscription : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_GetSubscription() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler< ::google::pubsub::v1::GetSubscriptionRequest, ::google::pubsub::v1::Subscription>(std::bind(&WithStreamedUnaryMethod_GetSubscription<BaseClass>::StreamedGetSubscription, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetSubscription() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetSubscription(::grpc::ServerContext* context, const ::google::pubsub::v1::GetSubscriptionRequest* request, ::google::pubsub::v1::Subscription* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetSubscription(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::pubsub::v1::GetSubscriptionRequest,::google::pubsub::v1::Subscription>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_UpdateSubscription : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_UpdateSubscription() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler< ::google::pubsub::v1::UpdateSubscriptionRequest, ::google::pubsub::v1::Subscription>(std::bind(&WithStreamedUnaryMethod_UpdateSubscription<BaseClass>::StreamedUpdateSubscription, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_UpdateSubscription() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status UpdateSubscription(::grpc::ServerContext* context, const ::google::pubsub::v1::UpdateSubscriptionRequest* request, ::google::pubsub::v1::Subscription* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedUpdateSubscription(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::pubsub::v1::UpdateSubscriptionRequest,::google::pubsub::v1::Subscription>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ListSubscriptions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_ListSubscriptions() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler< ::google::pubsub::v1::ListSubscriptionsRequest, ::google::pubsub::v1::ListSubscriptionsResponse>(std::bind(&WithStreamedUnaryMethod_ListSubscriptions<BaseClass>::StreamedListSubscriptions, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_ListSubscriptions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ListSubscriptions(::grpc::ServerContext* context, const ::google::pubsub::v1::ListSubscriptionsRequest* request, ::google::pubsub::v1::ListSubscriptionsResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedListSubscriptions(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::pubsub::v1::ListSubscriptionsRequest,::google::pubsub::v1::ListSubscriptionsResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DeleteSubscription : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_DeleteSubscription() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler< ::google::pubsub::v1::DeleteSubscriptionRequest, ::google::protobuf::Empty>(std::bind(&WithStreamedUnaryMethod_DeleteSubscription<BaseClass>::StreamedDeleteSubscription, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_DeleteSubscription() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DeleteSubscription(::grpc::ServerContext* context, const ::google::pubsub::v1::DeleteSubscriptionRequest* request, ::google::protobuf::Empty* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDeleteSubscription(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::pubsub::v1::DeleteSubscriptionRequest,::google::protobuf::Empty>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ModifyAckDeadline : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_ModifyAckDeadline() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler< ::google::pubsub::v1::ModifyAckDeadlineRequest, ::google::protobuf::Empty>(std::bind(&WithStreamedUnaryMethod_ModifyAckDeadline<BaseClass>::StreamedModifyAckDeadline, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_ModifyAckDeadline() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ModifyAckDeadline(::grpc::ServerContext* context, const ::google::pubsub::v1::ModifyAckDeadlineRequest* request, ::google::protobuf::Empty* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedModifyAckDeadline(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::pubsub::v1::ModifyAckDeadlineRequest,::google::protobuf::Empty>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Acknowledge : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_Acknowledge() {
      ::grpc::Service::MarkMethodStreamed(6,
        new ::grpc::internal::StreamedUnaryHandler< ::google::pubsub::v1::AcknowledgeRequest, ::google::protobuf::Empty>(std::bind(&WithStreamedUnaryMethod_Acknowledge<BaseClass>::StreamedAcknowledge, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_Acknowledge() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Acknowledge(::grpc::ServerContext* context, const ::google::pubsub::v1::AcknowledgeRequest* request, ::google::protobuf::Empty* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedAcknowledge(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::pubsub::v1::AcknowledgeRequest,::google::protobuf::Empty>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Pull : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_Pull() {
      ::grpc::Service::MarkMethodStreamed(7,
        new ::grpc::internal::StreamedUnaryHandler< ::google::pubsub::v1::PullRequest, ::google::pubsub::v1::PullResponse>(std::bind(&WithStreamedUnaryMethod_Pull<BaseClass>::StreamedPull, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_Pull() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Pull(::grpc::ServerContext* context, const ::google::pubsub::v1::PullRequest* request, ::google::pubsub::v1::PullResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedPull(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::pubsub::v1::PullRequest,::google::pubsub::v1::PullResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ModifyPushConfig : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_ModifyPushConfig() {
      ::grpc::Service::MarkMethodStreamed(9,
        new ::grpc::internal::StreamedUnaryHandler< ::google::pubsub::v1::ModifyPushConfigRequest, ::google::protobuf::Empty>(std::bind(&WithStreamedUnaryMethod_ModifyPushConfig<BaseClass>::StreamedModifyPushConfig, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_ModifyPushConfig() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ModifyPushConfig(::grpc::ServerContext* context, const ::google::pubsub::v1::ModifyPushConfigRequest* request, ::google::protobuf::Empty* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedModifyPushConfig(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::pubsub::v1::ModifyPushConfigRequest,::google::protobuf::Empty>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ListSnapshots : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_ListSnapshots() {
      ::grpc::Service::MarkMethodStreamed(10,
        new ::grpc::internal::StreamedUnaryHandler< ::google::pubsub::v1::ListSnapshotsRequest, ::google::pubsub::v1::ListSnapshotsResponse>(std::bind(&WithStreamedUnaryMethod_ListSnapshots<BaseClass>::StreamedListSnapshots, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_ListSnapshots() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ListSnapshots(::grpc::ServerContext* context, const ::google::pubsub::v1::ListSnapshotsRequest* request, ::google::pubsub::v1::ListSnapshotsResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedListSnapshots(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::pubsub::v1::ListSnapshotsRequest,::google::pubsub::v1::ListSnapshotsResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CreateSnapshot : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_CreateSnapshot() {
      ::grpc::Service::MarkMethodStreamed(11,
        new ::grpc::internal::StreamedUnaryHandler< ::google::pubsub::v1::CreateSnapshotRequest, ::google::pubsub::v1::Snapshot>(std::bind(&WithStreamedUnaryMethod_CreateSnapshot<BaseClass>::StreamedCreateSnapshot, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_CreateSnapshot() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CreateSnapshot(::grpc::ServerContext* context, const ::google::pubsub::v1::CreateSnapshotRequest* request, ::google::pubsub::v1::Snapshot* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCreateSnapshot(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::pubsub::v1::CreateSnapshotRequest,::google::pubsub::v1::Snapshot>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_UpdateSnapshot : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_UpdateSnapshot() {
      ::grpc::Service::MarkMethodStreamed(12,
        new ::grpc::internal::StreamedUnaryHandler< ::google::pubsub::v1::UpdateSnapshotRequest, ::google::pubsub::v1::Snapshot>(std::bind(&WithStreamedUnaryMethod_UpdateSnapshot<BaseClass>::StreamedUpdateSnapshot, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_UpdateSnapshot() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status UpdateSnapshot(::grpc::ServerContext* context, const ::google::pubsub::v1::UpdateSnapshotRequest* request, ::google::pubsub::v1::Snapshot* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedUpdateSnapshot(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::pubsub::v1::UpdateSnapshotRequest,::google::pubsub::v1::Snapshot>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DeleteSnapshot : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_DeleteSnapshot() {
      ::grpc::Service::MarkMethodStreamed(13,
        new ::grpc::internal::StreamedUnaryHandler< ::google::pubsub::v1::DeleteSnapshotRequest, ::google::protobuf::Empty>(std::bind(&WithStreamedUnaryMethod_DeleteSnapshot<BaseClass>::StreamedDeleteSnapshot, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_DeleteSnapshot() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DeleteSnapshot(::grpc::ServerContext* context, const ::google::pubsub::v1::DeleteSnapshotRequest* request, ::google::protobuf::Empty* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDeleteSnapshot(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::pubsub::v1::DeleteSnapshotRequest,::google::protobuf::Empty>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Seek : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_Seek() {
      ::grpc::Service::MarkMethodStreamed(14,
        new ::grpc::internal::StreamedUnaryHandler< ::google::pubsub::v1::SeekRequest, ::google::pubsub::v1::SeekResponse>(std::bind(&WithStreamedUnaryMethod_Seek<BaseClass>::StreamedSeek, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_Seek() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Seek(::grpc::ServerContext* context, const ::google::pubsub::v1::SeekRequest* request, ::google::pubsub::v1::SeekResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSeek(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::pubsub::v1::SeekRequest,::google::pubsub::v1::SeekResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_CreateSubscription<WithStreamedUnaryMethod_GetSubscription<WithStreamedUnaryMethod_UpdateSubscription<WithStreamedUnaryMethod_ListSubscriptions<WithStreamedUnaryMethod_DeleteSubscription<WithStreamedUnaryMethod_ModifyAckDeadline<WithStreamedUnaryMethod_Acknowledge<WithStreamedUnaryMethod_Pull<WithStreamedUnaryMethod_ModifyPushConfig<WithStreamedUnaryMethod_ListSnapshots<WithStreamedUnaryMethod_CreateSnapshot<WithStreamedUnaryMethod_UpdateSnapshot<WithStreamedUnaryMethod_DeleteSnapshot<WithStreamedUnaryMethod_Seek<Service > > > > > > > > > > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_CreateSubscription<WithStreamedUnaryMethod_GetSubscription<WithStreamedUnaryMethod_UpdateSubscription<WithStreamedUnaryMethod_ListSubscriptions<WithStreamedUnaryMethod_DeleteSubscription<WithStreamedUnaryMethod_ModifyAckDeadline<WithStreamedUnaryMethod_Acknowledge<WithStreamedUnaryMethod_Pull<WithStreamedUnaryMethod_ModifyPushConfig<WithStreamedUnaryMethod_ListSnapshots<WithStreamedUnaryMethod_CreateSnapshot<WithStreamedUnaryMethod_UpdateSnapshot<WithStreamedUnaryMethod_DeleteSnapshot<WithStreamedUnaryMethod_Seek<Service > > > > > > > > > > > > > > StreamedService;
};

// The service that an application uses to manipulate topics, and to send
// messages to a topic.
class Publisher final {
 public:
  static constexpr char const* service_full_name() {
    return "google.pubsub.v1.Publisher";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Creates the given topic with the given name.
    virtual ::grpc::Status CreateTopic(::grpc::ClientContext* context, const ::google::pubsub::v1::Topic& request, ::google::pubsub::v1::Topic* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::pubsub::v1::Topic>> AsyncCreateTopic(::grpc::ClientContext* context, const ::google::pubsub::v1::Topic& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::pubsub::v1::Topic>>(AsyncCreateTopicRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::pubsub::v1::Topic>> PrepareAsyncCreateTopic(::grpc::ClientContext* context, const ::google::pubsub::v1::Topic& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::pubsub::v1::Topic>>(PrepareAsyncCreateTopicRaw(context, request, cq));
    }
    // Updates an existing topic. Note that certain properties of a topic are not
    // modifiable.  Options settings follow the style guide:
    // NOTE:  The style guide requires body: "topic" instead of body: "*".
    // Keeping the latter for internal consistency in V1, however it should be
    // corrected in V2.  See
    // https://cloud.google.com/apis/design/standard_methods#update for details.
    virtual ::grpc::Status UpdateTopic(::grpc::ClientContext* context, const ::google::pubsub::v1::UpdateTopicRequest& request, ::google::pubsub::v1::Topic* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::pubsub::v1::Topic>> AsyncUpdateTopic(::grpc::ClientContext* context, const ::google::pubsub::v1::UpdateTopicRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::pubsub::v1::Topic>>(AsyncUpdateTopicRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::pubsub::v1::Topic>> PrepareAsyncUpdateTopic(::grpc::ClientContext* context, const ::google::pubsub::v1::UpdateTopicRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::pubsub::v1::Topic>>(PrepareAsyncUpdateTopicRaw(context, request, cq));
    }
    // Adds one or more messages to the topic. Returns `NOT_FOUND` if the topic
    // does not exist. The message payload must not be empty; it must contain
    //  either a non-empty data field, or at least one attribute.
    virtual ::grpc::Status Publish(::grpc::ClientContext* context, const ::google::pubsub::v1::PublishRequest& request, ::google::pubsub::v1::PublishResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::pubsub::v1::PublishResponse>> AsyncPublish(::grpc::ClientContext* context, const ::google::pubsub::v1::PublishRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::pubsub::v1::PublishResponse>>(AsyncPublishRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::pubsub::v1::PublishResponse>> PrepareAsyncPublish(::grpc::ClientContext* context, const ::google::pubsub::v1::PublishRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::pubsub::v1::PublishResponse>>(PrepareAsyncPublishRaw(context, request, cq));
    }
    // Gets the configuration of a topic.
    virtual ::grpc::Status GetTopic(::grpc::ClientContext* context, const ::google::pubsub::v1::GetTopicRequest& request, ::google::pubsub::v1::Topic* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::pubsub::v1::Topic>> AsyncGetTopic(::grpc::ClientContext* context, const ::google::pubsub::v1::GetTopicRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::pubsub::v1::Topic>>(AsyncGetTopicRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::pubsub::v1::Topic>> PrepareAsyncGetTopic(::grpc::ClientContext* context, const ::google::pubsub::v1::GetTopicRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::pubsub::v1::Topic>>(PrepareAsyncGetTopicRaw(context, request, cq));
    }
    // Lists matching topics.
    virtual ::grpc::Status ListTopics(::grpc::ClientContext* context, const ::google::pubsub::v1::ListTopicsRequest& request, ::google::pubsub::v1::ListTopicsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::pubsub::v1::ListTopicsResponse>> AsyncListTopics(::grpc::ClientContext* context, const ::google::pubsub::v1::ListTopicsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::pubsub::v1::ListTopicsResponse>>(AsyncListTopicsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::pubsub::v1::ListTopicsResponse>> PrepareAsyncListTopics(::grpc::ClientContext* context, const ::google::pubsub::v1::ListTopicsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::pubsub::v1::ListTopicsResponse>>(PrepareAsyncListTopicsRaw(context, request, cq));
    }
    // Lists the name of the subscriptions for this topic.
    virtual ::grpc::Status ListTopicSubscriptions(::grpc::ClientContext* context, const ::google::pubsub::v1::ListTopicSubscriptionsRequest& request, ::google::pubsub::v1::ListTopicSubscriptionsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::pubsub::v1::ListTopicSubscriptionsResponse>> AsyncListTopicSubscriptions(::grpc::ClientContext* context, const ::google::pubsub::v1::ListTopicSubscriptionsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::pubsub::v1::ListTopicSubscriptionsResponse>>(AsyncListTopicSubscriptionsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::pubsub::v1::ListTopicSubscriptionsResponse>> PrepareAsyncListTopicSubscriptions(::grpc::ClientContext* context, const ::google::pubsub::v1::ListTopicSubscriptionsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::pubsub::v1::ListTopicSubscriptionsResponse>>(PrepareAsyncListTopicSubscriptionsRaw(context, request, cq));
    }
    // Deletes the topic with the given name. Returns `NOT_FOUND` if the topic
    // does not exist. After a topic is deleted, a new topic may be created with
    // the same name; this is an entirely new topic with none of the old
    // configuration or subscriptions. Existing subscriptions to this topic are
    // not deleted, but their `topic` field is set to `_deleted-topic_`.
    virtual ::grpc::Status DeleteTopic(::grpc::ClientContext* context, const ::google::pubsub::v1::DeleteTopicRequest& request, ::google::protobuf::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> AsyncDeleteTopic(::grpc::ClientContext* context, const ::google::pubsub::v1::DeleteTopicRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(AsyncDeleteTopicRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> PrepareAsyncDeleteTopic(::grpc::ClientContext* context, const ::google::pubsub::v1::DeleteTopicRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(PrepareAsyncDeleteTopicRaw(context, request, cq));
    }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::pubsub::v1::Topic>* AsyncCreateTopicRaw(::grpc::ClientContext* context, const ::google::pubsub::v1::Topic& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::pubsub::v1::Topic>* PrepareAsyncCreateTopicRaw(::grpc::ClientContext* context, const ::google::pubsub::v1::Topic& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::pubsub::v1::Topic>* AsyncUpdateTopicRaw(::grpc::ClientContext* context, const ::google::pubsub::v1::UpdateTopicRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::pubsub::v1::Topic>* PrepareAsyncUpdateTopicRaw(::grpc::ClientContext* context, const ::google::pubsub::v1::UpdateTopicRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::pubsub::v1::PublishResponse>* AsyncPublishRaw(::grpc::ClientContext* context, const ::google::pubsub::v1::PublishRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::pubsub::v1::PublishResponse>* PrepareAsyncPublishRaw(::grpc::ClientContext* context, const ::google::pubsub::v1::PublishRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::pubsub::v1::Topic>* AsyncGetTopicRaw(::grpc::ClientContext* context, const ::google::pubsub::v1::GetTopicRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::pubsub::v1::Topic>* PrepareAsyncGetTopicRaw(::grpc::ClientContext* context, const ::google::pubsub::v1::GetTopicRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::pubsub::v1::ListTopicsResponse>* AsyncListTopicsRaw(::grpc::ClientContext* context, const ::google::pubsub::v1::ListTopicsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::pubsub::v1::ListTopicsResponse>* PrepareAsyncListTopicsRaw(::grpc::ClientContext* context, const ::google::pubsub::v1::ListTopicsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::pubsub::v1::ListTopicSubscriptionsResponse>* AsyncListTopicSubscriptionsRaw(::grpc::ClientContext* context, const ::google::pubsub::v1::ListTopicSubscriptionsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::pubsub::v1::ListTopicSubscriptionsResponse>* PrepareAsyncListTopicSubscriptionsRaw(::grpc::ClientContext* context, const ::google::pubsub::v1::ListTopicSubscriptionsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* AsyncDeleteTopicRaw(::grpc::ClientContext* context, const ::google::pubsub::v1::DeleteTopicRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* PrepareAsyncDeleteTopicRaw(::grpc::ClientContext* context, const ::google::pubsub::v1::DeleteTopicRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status CreateTopic(::grpc::ClientContext* context, const ::google::pubsub::v1::Topic& request, ::google::pubsub::v1::Topic* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::pubsub::v1::Topic>> AsyncCreateTopic(::grpc::ClientContext* context, const ::google::pubsub::v1::Topic& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::pubsub::v1::Topic>>(AsyncCreateTopicRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::pubsub::v1::Topic>> PrepareAsyncCreateTopic(::grpc::ClientContext* context, const ::google::pubsub::v1::Topic& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::pubsub::v1::Topic>>(PrepareAsyncCreateTopicRaw(context, request, cq));
    }
    ::grpc::Status UpdateTopic(::grpc::ClientContext* context, const ::google::pubsub::v1::UpdateTopicRequest& request, ::google::pubsub::v1::Topic* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::pubsub::v1::Topic>> AsyncUpdateTopic(::grpc::ClientContext* context, const ::google::pubsub::v1::UpdateTopicRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::pubsub::v1::Topic>>(AsyncUpdateTopicRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::pubsub::v1::Topic>> PrepareAsyncUpdateTopic(::grpc::ClientContext* context, const ::google::pubsub::v1::UpdateTopicRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::pubsub::v1::Topic>>(PrepareAsyncUpdateTopicRaw(context, request, cq));
    }
    ::grpc::Status Publish(::grpc::ClientContext* context, const ::google::pubsub::v1::PublishRequest& request, ::google::pubsub::v1::PublishResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::pubsub::v1::PublishResponse>> AsyncPublish(::grpc::ClientContext* context, const ::google::pubsub::v1::PublishRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::pubsub::v1::PublishResponse>>(AsyncPublishRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::pubsub::v1::PublishResponse>> PrepareAsyncPublish(::grpc::ClientContext* context, const ::google::pubsub::v1::PublishRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::pubsub::v1::PublishResponse>>(PrepareAsyncPublishRaw(context, request, cq));
    }
    ::grpc::Status GetTopic(::grpc::ClientContext* context, const ::google::pubsub::v1::GetTopicRequest& request, ::google::pubsub::v1::Topic* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::pubsub::v1::Topic>> AsyncGetTopic(::grpc::ClientContext* context, const ::google::pubsub::v1::GetTopicRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::pubsub::v1::Topic>>(AsyncGetTopicRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::pubsub::v1::Topic>> PrepareAsyncGetTopic(::grpc::ClientContext* context, const ::google::pubsub::v1::GetTopicRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::pubsub::v1::Topic>>(PrepareAsyncGetTopicRaw(context, request, cq));
    }
    ::grpc::Status ListTopics(::grpc::ClientContext* context, const ::google::pubsub::v1::ListTopicsRequest& request, ::google::pubsub::v1::ListTopicsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::pubsub::v1::ListTopicsResponse>> AsyncListTopics(::grpc::ClientContext* context, const ::google::pubsub::v1::ListTopicsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::pubsub::v1::ListTopicsResponse>>(AsyncListTopicsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::pubsub::v1::ListTopicsResponse>> PrepareAsyncListTopics(::grpc::ClientContext* context, const ::google::pubsub::v1::ListTopicsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::pubsub::v1::ListTopicsResponse>>(PrepareAsyncListTopicsRaw(context, request, cq));
    }
    ::grpc::Status ListTopicSubscriptions(::grpc::ClientContext* context, const ::google::pubsub::v1::ListTopicSubscriptionsRequest& request, ::google::pubsub::v1::ListTopicSubscriptionsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::pubsub::v1::ListTopicSubscriptionsResponse>> AsyncListTopicSubscriptions(::grpc::ClientContext* context, const ::google::pubsub::v1::ListTopicSubscriptionsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::pubsub::v1::ListTopicSubscriptionsResponse>>(AsyncListTopicSubscriptionsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::pubsub::v1::ListTopicSubscriptionsResponse>> PrepareAsyncListTopicSubscriptions(::grpc::ClientContext* context, const ::google::pubsub::v1::ListTopicSubscriptionsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::pubsub::v1::ListTopicSubscriptionsResponse>>(PrepareAsyncListTopicSubscriptionsRaw(context, request, cq));
    }
    ::grpc::Status DeleteTopic(::grpc::ClientContext* context, const ::google::pubsub::v1::DeleteTopicRequest& request, ::google::protobuf::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> AsyncDeleteTopic(::grpc::ClientContext* context, const ::google::pubsub::v1::DeleteTopicRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(AsyncDeleteTopicRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> PrepareAsyncDeleteTopic(::grpc::ClientContext* context, const ::google::pubsub::v1::DeleteTopicRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(PrepareAsyncDeleteTopicRaw(context, request, cq));
    }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    ::grpc::ClientAsyncResponseReader< ::google::pubsub::v1::Topic>* AsyncCreateTopicRaw(::grpc::ClientContext* context, const ::google::pubsub::v1::Topic& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::pubsub::v1::Topic>* PrepareAsyncCreateTopicRaw(::grpc::ClientContext* context, const ::google::pubsub::v1::Topic& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::pubsub::v1::Topic>* AsyncUpdateTopicRaw(::grpc::ClientContext* context, const ::google::pubsub::v1::UpdateTopicRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::pubsub::v1::Topic>* PrepareAsyncUpdateTopicRaw(::grpc::ClientContext* context, const ::google::pubsub::v1::UpdateTopicRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::pubsub::v1::PublishResponse>* AsyncPublishRaw(::grpc::ClientContext* context, const ::google::pubsub::v1::PublishRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::pubsub::v1::PublishResponse>* PrepareAsyncPublishRaw(::grpc::ClientContext* context, const ::google::pubsub::v1::PublishRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::pubsub::v1::Topic>* AsyncGetTopicRaw(::grpc::ClientContext* context, const ::google::pubsub::v1::GetTopicRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::pubsub::v1::Topic>* PrepareAsyncGetTopicRaw(::grpc::ClientContext* context, const ::google::pubsub::v1::GetTopicRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::pubsub::v1::ListTopicsResponse>* AsyncListTopicsRaw(::grpc::ClientContext* context, const ::google::pubsub::v1::ListTopicsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::pubsub::v1::ListTopicsResponse>* PrepareAsyncListTopicsRaw(::grpc::ClientContext* context, const ::google::pubsub::v1::ListTopicsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::pubsub::v1::ListTopicSubscriptionsResponse>* AsyncListTopicSubscriptionsRaw(::grpc::ClientContext* context, const ::google::pubsub::v1::ListTopicSubscriptionsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::pubsub::v1::ListTopicSubscriptionsResponse>* PrepareAsyncListTopicSubscriptionsRaw(::grpc::ClientContext* context, const ::google::pubsub::v1::ListTopicSubscriptionsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* AsyncDeleteTopicRaw(::grpc::ClientContext* context, const ::google::pubsub::v1::DeleteTopicRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* PrepareAsyncDeleteTopicRaw(::grpc::ClientContext* context, const ::google::pubsub::v1::DeleteTopicRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_CreateTopic_;
    const ::grpc::internal::RpcMethod rpcmethod_UpdateTopic_;
    const ::grpc::internal::RpcMethod rpcmethod_Publish_;
    const ::grpc::internal::RpcMethod rpcmethod_GetTopic_;
    const ::grpc::internal::RpcMethod rpcmethod_ListTopics_;
    const ::grpc::internal::RpcMethod rpcmethod_ListTopicSubscriptions_;
    const ::grpc::internal::RpcMethod rpcmethod_DeleteTopic_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Creates the given topic with the given name.
    virtual ::grpc::Status CreateTopic(::grpc::ServerContext* context, const ::google::pubsub::v1::Topic* request, ::google::pubsub::v1::Topic* response);
    // Updates an existing topic. Note that certain properties of a topic are not
    // modifiable.  Options settings follow the style guide:
    // NOTE:  The style guide requires body: "topic" instead of body: "*".
    // Keeping the latter for internal consistency in V1, however it should be
    // corrected in V2.  See
    // https://cloud.google.com/apis/design/standard_methods#update for details.
    virtual ::grpc::Status UpdateTopic(::grpc::ServerContext* context, const ::google::pubsub::v1::UpdateTopicRequest* request, ::google::pubsub::v1::Topic* response);
    // Adds one or more messages to the topic. Returns `NOT_FOUND` if the topic
    // does not exist. The message payload must not be empty; it must contain
    //  either a non-empty data field, or at least one attribute.
    virtual ::grpc::Status Publish(::grpc::ServerContext* context, const ::google::pubsub::v1::PublishRequest* request, ::google::pubsub::v1::PublishResponse* response);
    // Gets the configuration of a topic.
    virtual ::grpc::Status GetTopic(::grpc::ServerContext* context, const ::google::pubsub::v1::GetTopicRequest* request, ::google::pubsub::v1::Topic* response);
    // Lists matching topics.
    virtual ::grpc::Status ListTopics(::grpc::ServerContext* context, const ::google::pubsub::v1::ListTopicsRequest* request, ::google::pubsub::v1::ListTopicsResponse* response);
    // Lists the name of the subscriptions for this topic.
    virtual ::grpc::Status ListTopicSubscriptions(::grpc::ServerContext* context, const ::google::pubsub::v1::ListTopicSubscriptionsRequest* request, ::google::pubsub::v1::ListTopicSubscriptionsResponse* response);
    // Deletes the topic with the given name. Returns `NOT_FOUND` if the topic
    // does not exist. After a topic is deleted, a new topic may be created with
    // the same name; this is an entirely new topic with none of the old
    // configuration or subscriptions. Existing subscriptions to this topic are
    // not deleted, but their `topic` field is set to `_deleted-topic_`.
    virtual ::grpc::Status DeleteTopic(::grpc::ServerContext* context, const ::google::pubsub::v1::DeleteTopicRequest* request, ::google::protobuf::Empty* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_CreateTopic : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_CreateTopic() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_CreateTopic() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateTopic(::grpc::ServerContext* context, const ::google::pubsub::v1::Topic* request, ::google::pubsub::v1::Topic* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateTopic(::grpc::ServerContext* context, ::google::pubsub::v1::Topic* request, ::grpc::ServerAsyncResponseWriter< ::google::pubsub::v1::Topic>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_UpdateTopic : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_UpdateTopic() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_UpdateTopic() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateTopic(::grpc::ServerContext* context, const ::google::pubsub::v1::UpdateTopicRequest* request, ::google::pubsub::v1::Topic* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateTopic(::grpc::ServerContext* context, ::google::pubsub::v1::UpdateTopicRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::pubsub::v1::Topic>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Publish : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_Publish() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_Publish() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Publish(::grpc::ServerContext* context, const ::google::pubsub::v1::PublishRequest* request, ::google::pubsub::v1::PublishResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPublish(::grpc::ServerContext* context, ::google::pubsub::v1::PublishRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::pubsub::v1::PublishResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetTopic : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_GetTopic() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_GetTopic() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTopic(::grpc::ServerContext* context, const ::google::pubsub::v1::GetTopicRequest* request, ::google::pubsub::v1::Topic* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetTopic(::grpc::ServerContext* context, ::google::pubsub::v1::GetTopicRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::pubsub::v1::Topic>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ListTopics : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_ListTopics() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_ListTopics() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListTopics(::grpc::ServerContext* context, const ::google::pubsub::v1::ListTopicsRequest* request, ::google::pubsub::v1::ListTopicsResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListTopics(::grpc::ServerContext* context, ::google::pubsub::v1::ListTopicsRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::pubsub::v1::ListTopicsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ListTopicSubscriptions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_ListTopicSubscriptions() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_ListTopicSubscriptions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListTopicSubscriptions(::grpc::ServerContext* context, const ::google::pubsub::v1::ListTopicSubscriptionsRequest* request, ::google::pubsub::v1::ListTopicSubscriptionsResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListTopicSubscriptions(::grpc::ServerContext* context, ::google::pubsub::v1::ListTopicSubscriptionsRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::pubsub::v1::ListTopicSubscriptionsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DeleteTopic : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_DeleteTopic() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_DeleteTopic() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteTopic(::grpc::ServerContext* context, const ::google::pubsub::v1::DeleteTopicRequest* request, ::google::protobuf::Empty* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteTopic(::grpc::ServerContext* context, ::google::pubsub::v1::DeleteTopicRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::protobuf::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_CreateTopic<WithAsyncMethod_UpdateTopic<WithAsyncMethod_Publish<WithAsyncMethod_GetTopic<WithAsyncMethod_ListTopics<WithAsyncMethod_ListTopicSubscriptions<WithAsyncMethod_DeleteTopic<Service > > > > > > > AsyncService;
  template <class BaseClass>
  class WithGenericMethod_CreateTopic : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_CreateTopic() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_CreateTopic() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateTopic(::grpc::ServerContext* context, const ::google::pubsub::v1::Topic* request, ::google::pubsub::v1::Topic* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_UpdateTopic : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_UpdateTopic() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_UpdateTopic() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateTopic(::grpc::ServerContext* context, const ::google::pubsub::v1::UpdateTopicRequest* request, ::google::pubsub::v1::Topic* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Publish : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_Publish() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_Publish() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Publish(::grpc::ServerContext* context, const ::google::pubsub::v1::PublishRequest* request, ::google::pubsub::v1::PublishResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetTopic : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_GetTopic() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_GetTopic() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTopic(::grpc::ServerContext* context, const ::google::pubsub::v1::GetTopicRequest* request, ::google::pubsub::v1::Topic* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ListTopics : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_ListTopics() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_ListTopics() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListTopics(::grpc::ServerContext* context, const ::google::pubsub::v1::ListTopicsRequest* request, ::google::pubsub::v1::ListTopicsResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ListTopicSubscriptions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_ListTopicSubscriptions() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_ListTopicSubscriptions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListTopicSubscriptions(::grpc::ServerContext* context, const ::google::pubsub::v1::ListTopicSubscriptionsRequest* request, ::google::pubsub::v1::ListTopicSubscriptionsResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DeleteTopic : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_DeleteTopic() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_DeleteTopic() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteTopic(::grpc::ServerContext* context, const ::google::pubsub::v1::DeleteTopicRequest* request, ::google::protobuf::Empty* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CreateTopic : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_CreateTopic() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler< ::google::pubsub::v1::Topic, ::google::pubsub::v1::Topic>(std::bind(&WithStreamedUnaryMethod_CreateTopic<BaseClass>::StreamedCreateTopic, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_CreateTopic() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CreateTopic(::grpc::ServerContext* context, const ::google::pubsub::v1::Topic* request, ::google::pubsub::v1::Topic* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCreateTopic(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::pubsub::v1::Topic,::google::pubsub::v1::Topic>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_UpdateTopic : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_UpdateTopic() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler< ::google::pubsub::v1::UpdateTopicRequest, ::google::pubsub::v1::Topic>(std::bind(&WithStreamedUnaryMethod_UpdateTopic<BaseClass>::StreamedUpdateTopic, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_UpdateTopic() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status UpdateTopic(::grpc::ServerContext* context, const ::google::pubsub::v1::UpdateTopicRequest* request, ::google::pubsub::v1::Topic* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedUpdateTopic(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::pubsub::v1::UpdateTopicRequest,::google::pubsub::v1::Topic>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Publish : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_Publish() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler< ::google::pubsub::v1::PublishRequest, ::google::pubsub::v1::PublishResponse>(std::bind(&WithStreamedUnaryMethod_Publish<BaseClass>::StreamedPublish, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_Publish() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Publish(::grpc::ServerContext* context, const ::google::pubsub::v1::PublishRequest* request, ::google::pubsub::v1::PublishResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedPublish(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::pubsub::v1::PublishRequest,::google::pubsub::v1::PublishResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetTopic : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_GetTopic() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler< ::google::pubsub::v1::GetTopicRequest, ::google::pubsub::v1::Topic>(std::bind(&WithStreamedUnaryMethod_GetTopic<BaseClass>::StreamedGetTopic, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetTopic() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetTopic(::grpc::ServerContext* context, const ::google::pubsub::v1::GetTopicRequest* request, ::google::pubsub::v1::Topic* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetTopic(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::pubsub::v1::GetTopicRequest,::google::pubsub::v1::Topic>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ListTopics : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_ListTopics() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler< ::google::pubsub::v1::ListTopicsRequest, ::google::pubsub::v1::ListTopicsResponse>(std::bind(&WithStreamedUnaryMethod_ListTopics<BaseClass>::StreamedListTopics, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_ListTopics() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ListTopics(::grpc::ServerContext* context, const ::google::pubsub::v1::ListTopicsRequest* request, ::google::pubsub::v1::ListTopicsResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedListTopics(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::pubsub::v1::ListTopicsRequest,::google::pubsub::v1::ListTopicsResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ListTopicSubscriptions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_ListTopicSubscriptions() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler< ::google::pubsub::v1::ListTopicSubscriptionsRequest, ::google::pubsub::v1::ListTopicSubscriptionsResponse>(std::bind(&WithStreamedUnaryMethod_ListTopicSubscriptions<BaseClass>::StreamedListTopicSubscriptions, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_ListTopicSubscriptions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ListTopicSubscriptions(::grpc::ServerContext* context, const ::google::pubsub::v1::ListTopicSubscriptionsRequest* request, ::google::pubsub::v1::ListTopicSubscriptionsResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedListTopicSubscriptions(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::pubsub::v1::ListTopicSubscriptionsRequest,::google::pubsub::v1::ListTopicSubscriptionsResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DeleteTopic : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_DeleteTopic() {
      ::grpc::Service::MarkMethodStreamed(6,
        new ::grpc::internal::StreamedUnaryHandler< ::google::pubsub::v1::DeleteTopicRequest, ::google::protobuf::Empty>(std::bind(&WithStreamedUnaryMethod_DeleteTopic<BaseClass>::StreamedDeleteTopic, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_DeleteTopic() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DeleteTopic(::grpc::ServerContext* context, const ::google::pubsub::v1::DeleteTopicRequest* request, ::google::protobuf::Empty* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDeleteTopic(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::pubsub::v1::DeleteTopicRequest,::google::protobuf::Empty>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_CreateTopic<WithStreamedUnaryMethod_UpdateTopic<WithStreamedUnaryMethod_Publish<WithStreamedUnaryMethod_GetTopic<WithStreamedUnaryMethod_ListTopics<WithStreamedUnaryMethod_ListTopicSubscriptions<WithStreamedUnaryMethod_DeleteTopic<Service > > > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_CreateTopic<WithStreamedUnaryMethod_UpdateTopic<WithStreamedUnaryMethod_Publish<WithStreamedUnaryMethod_GetTopic<WithStreamedUnaryMethod_ListTopics<WithStreamedUnaryMethod_ListTopicSubscriptions<WithStreamedUnaryMethod_DeleteTopic<Service > > > > > > > StreamedService;
};

}  // namespace v1
}  // namespace pubsub
}  // namespace google


#endif  // GRPC_google_2fpubsub_2fv1_2fpubsub_2eproto__INCLUDED
