// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: google/devtools/clouddebugger/v2/debugger.proto
// Original file comments:
// Copyright 2017 Google Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
#ifndef GRPC_google_2fdevtools_2fclouddebugger_2fv2_2fdebugger_2eproto__INCLUDED
#define GRPC_google_2fdevtools_2fclouddebugger_2fv2_2fdebugger_2eproto__INCLUDED

#include "google/devtools/clouddebugger/v2/debugger.pb.h"

#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace grpc {
class CompletionQueue;
class Channel;
class ServerCompletionQueue;
class ServerContext;
}  // namespace grpc

namespace google {
namespace devtools {
namespace clouddebugger {
namespace v2 {

// The Debugger service provides the API that allows users to collect run-time
// information from a running application, without stopping or slowing it down
// and without modifying its state.  An application may include one or
// more replicated processes performing the same work.
//
// A debugged application is represented using the Debuggee concept. The
// Debugger service provides a way to query for available debuggees, but does
// not provide a way to create one.  A debuggee is created using the Controller
// service, usually by running a debugger agent with the application.
//
// The Debugger service enables the client to set one or more Breakpoints on a
// Debuggee and collect the results of the set Breakpoints.
class Debugger2 final {
 public:
  static constexpr char const* service_full_name() {
    return "google.devtools.clouddebugger.v2.Debugger2";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Sets the breakpoint to the debuggee.
    virtual ::grpc::Status SetBreakpoint(::grpc::ClientContext* context, const ::google::devtools::clouddebugger::v2::SetBreakpointRequest& request, ::google::devtools::clouddebugger::v2::SetBreakpointResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::devtools::clouddebugger::v2::SetBreakpointResponse>> AsyncSetBreakpoint(::grpc::ClientContext* context, const ::google::devtools::clouddebugger::v2::SetBreakpointRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::devtools::clouddebugger::v2::SetBreakpointResponse>>(AsyncSetBreakpointRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::devtools::clouddebugger::v2::SetBreakpointResponse>> PrepareAsyncSetBreakpoint(::grpc::ClientContext* context, const ::google::devtools::clouddebugger::v2::SetBreakpointRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::devtools::clouddebugger::v2::SetBreakpointResponse>>(PrepareAsyncSetBreakpointRaw(context, request, cq));
    }
    // Gets breakpoint information.
    virtual ::grpc::Status GetBreakpoint(::grpc::ClientContext* context, const ::google::devtools::clouddebugger::v2::GetBreakpointRequest& request, ::google::devtools::clouddebugger::v2::GetBreakpointResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::devtools::clouddebugger::v2::GetBreakpointResponse>> AsyncGetBreakpoint(::grpc::ClientContext* context, const ::google::devtools::clouddebugger::v2::GetBreakpointRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::devtools::clouddebugger::v2::GetBreakpointResponse>>(AsyncGetBreakpointRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::devtools::clouddebugger::v2::GetBreakpointResponse>> PrepareAsyncGetBreakpoint(::grpc::ClientContext* context, const ::google::devtools::clouddebugger::v2::GetBreakpointRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::devtools::clouddebugger::v2::GetBreakpointResponse>>(PrepareAsyncGetBreakpointRaw(context, request, cq));
    }
    // Deletes the breakpoint from the debuggee.
    virtual ::grpc::Status DeleteBreakpoint(::grpc::ClientContext* context, const ::google::devtools::clouddebugger::v2::DeleteBreakpointRequest& request, ::google::protobuf::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> AsyncDeleteBreakpoint(::grpc::ClientContext* context, const ::google::devtools::clouddebugger::v2::DeleteBreakpointRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(AsyncDeleteBreakpointRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> PrepareAsyncDeleteBreakpoint(::grpc::ClientContext* context, const ::google::devtools::clouddebugger::v2::DeleteBreakpointRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(PrepareAsyncDeleteBreakpointRaw(context, request, cq));
    }
    // Lists all breakpoints for the debuggee.
    virtual ::grpc::Status ListBreakpoints(::grpc::ClientContext* context, const ::google::devtools::clouddebugger::v2::ListBreakpointsRequest& request, ::google::devtools::clouddebugger::v2::ListBreakpointsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::devtools::clouddebugger::v2::ListBreakpointsResponse>> AsyncListBreakpoints(::grpc::ClientContext* context, const ::google::devtools::clouddebugger::v2::ListBreakpointsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::devtools::clouddebugger::v2::ListBreakpointsResponse>>(AsyncListBreakpointsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::devtools::clouddebugger::v2::ListBreakpointsResponse>> PrepareAsyncListBreakpoints(::grpc::ClientContext* context, const ::google::devtools::clouddebugger::v2::ListBreakpointsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::devtools::clouddebugger::v2::ListBreakpointsResponse>>(PrepareAsyncListBreakpointsRaw(context, request, cq));
    }
    // Lists all the debuggees that the user has access to.
    virtual ::grpc::Status ListDebuggees(::grpc::ClientContext* context, const ::google::devtools::clouddebugger::v2::ListDebuggeesRequest& request, ::google::devtools::clouddebugger::v2::ListDebuggeesResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::devtools::clouddebugger::v2::ListDebuggeesResponse>> AsyncListDebuggees(::grpc::ClientContext* context, const ::google::devtools::clouddebugger::v2::ListDebuggeesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::devtools::clouddebugger::v2::ListDebuggeesResponse>>(AsyncListDebuggeesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::devtools::clouddebugger::v2::ListDebuggeesResponse>> PrepareAsyncListDebuggees(::grpc::ClientContext* context, const ::google::devtools::clouddebugger::v2::ListDebuggeesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::devtools::clouddebugger::v2::ListDebuggeesResponse>>(PrepareAsyncListDebuggeesRaw(context, request, cq));
    }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::devtools::clouddebugger::v2::SetBreakpointResponse>* AsyncSetBreakpointRaw(::grpc::ClientContext* context, const ::google::devtools::clouddebugger::v2::SetBreakpointRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::devtools::clouddebugger::v2::SetBreakpointResponse>* PrepareAsyncSetBreakpointRaw(::grpc::ClientContext* context, const ::google::devtools::clouddebugger::v2::SetBreakpointRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::devtools::clouddebugger::v2::GetBreakpointResponse>* AsyncGetBreakpointRaw(::grpc::ClientContext* context, const ::google::devtools::clouddebugger::v2::GetBreakpointRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::devtools::clouddebugger::v2::GetBreakpointResponse>* PrepareAsyncGetBreakpointRaw(::grpc::ClientContext* context, const ::google::devtools::clouddebugger::v2::GetBreakpointRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* AsyncDeleteBreakpointRaw(::grpc::ClientContext* context, const ::google::devtools::clouddebugger::v2::DeleteBreakpointRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* PrepareAsyncDeleteBreakpointRaw(::grpc::ClientContext* context, const ::google::devtools::clouddebugger::v2::DeleteBreakpointRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::devtools::clouddebugger::v2::ListBreakpointsResponse>* AsyncListBreakpointsRaw(::grpc::ClientContext* context, const ::google::devtools::clouddebugger::v2::ListBreakpointsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::devtools::clouddebugger::v2::ListBreakpointsResponse>* PrepareAsyncListBreakpointsRaw(::grpc::ClientContext* context, const ::google::devtools::clouddebugger::v2::ListBreakpointsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::devtools::clouddebugger::v2::ListDebuggeesResponse>* AsyncListDebuggeesRaw(::grpc::ClientContext* context, const ::google::devtools::clouddebugger::v2::ListDebuggeesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::devtools::clouddebugger::v2::ListDebuggeesResponse>* PrepareAsyncListDebuggeesRaw(::grpc::ClientContext* context, const ::google::devtools::clouddebugger::v2::ListDebuggeesRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status SetBreakpoint(::grpc::ClientContext* context, const ::google::devtools::clouddebugger::v2::SetBreakpointRequest& request, ::google::devtools::clouddebugger::v2::SetBreakpointResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::devtools::clouddebugger::v2::SetBreakpointResponse>> AsyncSetBreakpoint(::grpc::ClientContext* context, const ::google::devtools::clouddebugger::v2::SetBreakpointRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::devtools::clouddebugger::v2::SetBreakpointResponse>>(AsyncSetBreakpointRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::devtools::clouddebugger::v2::SetBreakpointResponse>> PrepareAsyncSetBreakpoint(::grpc::ClientContext* context, const ::google::devtools::clouddebugger::v2::SetBreakpointRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::devtools::clouddebugger::v2::SetBreakpointResponse>>(PrepareAsyncSetBreakpointRaw(context, request, cq));
    }
    ::grpc::Status GetBreakpoint(::grpc::ClientContext* context, const ::google::devtools::clouddebugger::v2::GetBreakpointRequest& request, ::google::devtools::clouddebugger::v2::GetBreakpointResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::devtools::clouddebugger::v2::GetBreakpointResponse>> AsyncGetBreakpoint(::grpc::ClientContext* context, const ::google::devtools::clouddebugger::v2::GetBreakpointRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::devtools::clouddebugger::v2::GetBreakpointResponse>>(AsyncGetBreakpointRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::devtools::clouddebugger::v2::GetBreakpointResponse>> PrepareAsyncGetBreakpoint(::grpc::ClientContext* context, const ::google::devtools::clouddebugger::v2::GetBreakpointRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::devtools::clouddebugger::v2::GetBreakpointResponse>>(PrepareAsyncGetBreakpointRaw(context, request, cq));
    }
    ::grpc::Status DeleteBreakpoint(::grpc::ClientContext* context, const ::google::devtools::clouddebugger::v2::DeleteBreakpointRequest& request, ::google::protobuf::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> AsyncDeleteBreakpoint(::grpc::ClientContext* context, const ::google::devtools::clouddebugger::v2::DeleteBreakpointRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(AsyncDeleteBreakpointRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> PrepareAsyncDeleteBreakpoint(::grpc::ClientContext* context, const ::google::devtools::clouddebugger::v2::DeleteBreakpointRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(PrepareAsyncDeleteBreakpointRaw(context, request, cq));
    }
    ::grpc::Status ListBreakpoints(::grpc::ClientContext* context, const ::google::devtools::clouddebugger::v2::ListBreakpointsRequest& request, ::google::devtools::clouddebugger::v2::ListBreakpointsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::devtools::clouddebugger::v2::ListBreakpointsResponse>> AsyncListBreakpoints(::grpc::ClientContext* context, const ::google::devtools::clouddebugger::v2::ListBreakpointsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::devtools::clouddebugger::v2::ListBreakpointsResponse>>(AsyncListBreakpointsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::devtools::clouddebugger::v2::ListBreakpointsResponse>> PrepareAsyncListBreakpoints(::grpc::ClientContext* context, const ::google::devtools::clouddebugger::v2::ListBreakpointsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::devtools::clouddebugger::v2::ListBreakpointsResponse>>(PrepareAsyncListBreakpointsRaw(context, request, cq));
    }
    ::grpc::Status ListDebuggees(::grpc::ClientContext* context, const ::google::devtools::clouddebugger::v2::ListDebuggeesRequest& request, ::google::devtools::clouddebugger::v2::ListDebuggeesResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::devtools::clouddebugger::v2::ListDebuggeesResponse>> AsyncListDebuggees(::grpc::ClientContext* context, const ::google::devtools::clouddebugger::v2::ListDebuggeesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::devtools::clouddebugger::v2::ListDebuggeesResponse>>(AsyncListDebuggeesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::devtools::clouddebugger::v2::ListDebuggeesResponse>> PrepareAsyncListDebuggees(::grpc::ClientContext* context, const ::google::devtools::clouddebugger::v2::ListDebuggeesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::devtools::clouddebugger::v2::ListDebuggeesResponse>>(PrepareAsyncListDebuggeesRaw(context, request, cq));
    }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    ::grpc::ClientAsyncResponseReader< ::google::devtools::clouddebugger::v2::SetBreakpointResponse>* AsyncSetBreakpointRaw(::grpc::ClientContext* context, const ::google::devtools::clouddebugger::v2::SetBreakpointRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::devtools::clouddebugger::v2::SetBreakpointResponse>* PrepareAsyncSetBreakpointRaw(::grpc::ClientContext* context, const ::google::devtools::clouddebugger::v2::SetBreakpointRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::devtools::clouddebugger::v2::GetBreakpointResponse>* AsyncGetBreakpointRaw(::grpc::ClientContext* context, const ::google::devtools::clouddebugger::v2::GetBreakpointRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::devtools::clouddebugger::v2::GetBreakpointResponse>* PrepareAsyncGetBreakpointRaw(::grpc::ClientContext* context, const ::google::devtools::clouddebugger::v2::GetBreakpointRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* AsyncDeleteBreakpointRaw(::grpc::ClientContext* context, const ::google::devtools::clouddebugger::v2::DeleteBreakpointRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* PrepareAsyncDeleteBreakpointRaw(::grpc::ClientContext* context, const ::google::devtools::clouddebugger::v2::DeleteBreakpointRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::devtools::clouddebugger::v2::ListBreakpointsResponse>* AsyncListBreakpointsRaw(::grpc::ClientContext* context, const ::google::devtools::clouddebugger::v2::ListBreakpointsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::devtools::clouddebugger::v2::ListBreakpointsResponse>* PrepareAsyncListBreakpointsRaw(::grpc::ClientContext* context, const ::google::devtools::clouddebugger::v2::ListBreakpointsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::devtools::clouddebugger::v2::ListDebuggeesResponse>* AsyncListDebuggeesRaw(::grpc::ClientContext* context, const ::google::devtools::clouddebugger::v2::ListDebuggeesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::devtools::clouddebugger::v2::ListDebuggeesResponse>* PrepareAsyncListDebuggeesRaw(::grpc::ClientContext* context, const ::google::devtools::clouddebugger::v2::ListDebuggeesRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_SetBreakpoint_;
    const ::grpc::internal::RpcMethod rpcmethod_GetBreakpoint_;
    const ::grpc::internal::RpcMethod rpcmethod_DeleteBreakpoint_;
    const ::grpc::internal::RpcMethod rpcmethod_ListBreakpoints_;
    const ::grpc::internal::RpcMethod rpcmethod_ListDebuggees_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Sets the breakpoint to the debuggee.
    virtual ::grpc::Status SetBreakpoint(::grpc::ServerContext* context, const ::google::devtools::clouddebugger::v2::SetBreakpointRequest* request, ::google::devtools::clouddebugger::v2::SetBreakpointResponse* response);
    // Gets breakpoint information.
    virtual ::grpc::Status GetBreakpoint(::grpc::ServerContext* context, const ::google::devtools::clouddebugger::v2::GetBreakpointRequest* request, ::google::devtools::clouddebugger::v2::GetBreakpointResponse* response);
    // Deletes the breakpoint from the debuggee.
    virtual ::grpc::Status DeleteBreakpoint(::grpc::ServerContext* context, const ::google::devtools::clouddebugger::v2::DeleteBreakpointRequest* request, ::google::protobuf::Empty* response);
    // Lists all breakpoints for the debuggee.
    virtual ::grpc::Status ListBreakpoints(::grpc::ServerContext* context, const ::google::devtools::clouddebugger::v2::ListBreakpointsRequest* request, ::google::devtools::clouddebugger::v2::ListBreakpointsResponse* response);
    // Lists all the debuggees that the user has access to.
    virtual ::grpc::Status ListDebuggees(::grpc::ServerContext* context, const ::google::devtools::clouddebugger::v2::ListDebuggeesRequest* request, ::google::devtools::clouddebugger::v2::ListDebuggeesResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_SetBreakpoint : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_SetBreakpoint() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_SetBreakpoint() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetBreakpoint(::grpc::ServerContext* context, const ::google::devtools::clouddebugger::v2::SetBreakpointRequest* request, ::google::devtools::clouddebugger::v2::SetBreakpointResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetBreakpoint(::grpc::ServerContext* context, ::google::devtools::clouddebugger::v2::SetBreakpointRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::devtools::clouddebugger::v2::SetBreakpointResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetBreakpoint : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_GetBreakpoint() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_GetBreakpoint() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetBreakpoint(::grpc::ServerContext* context, const ::google::devtools::clouddebugger::v2::GetBreakpointRequest* request, ::google::devtools::clouddebugger::v2::GetBreakpointResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetBreakpoint(::grpc::ServerContext* context, ::google::devtools::clouddebugger::v2::GetBreakpointRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::devtools::clouddebugger::v2::GetBreakpointResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DeleteBreakpoint : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_DeleteBreakpoint() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_DeleteBreakpoint() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteBreakpoint(::grpc::ServerContext* context, const ::google::devtools::clouddebugger::v2::DeleteBreakpointRequest* request, ::google::protobuf::Empty* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteBreakpoint(::grpc::ServerContext* context, ::google::devtools::clouddebugger::v2::DeleteBreakpointRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::protobuf::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ListBreakpoints : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_ListBreakpoints() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_ListBreakpoints() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListBreakpoints(::grpc::ServerContext* context, const ::google::devtools::clouddebugger::v2::ListBreakpointsRequest* request, ::google::devtools::clouddebugger::v2::ListBreakpointsResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListBreakpoints(::grpc::ServerContext* context, ::google::devtools::clouddebugger::v2::ListBreakpointsRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::devtools::clouddebugger::v2::ListBreakpointsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ListDebuggees : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_ListDebuggees() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_ListDebuggees() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListDebuggees(::grpc::ServerContext* context, const ::google::devtools::clouddebugger::v2::ListDebuggeesRequest* request, ::google::devtools::clouddebugger::v2::ListDebuggeesResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListDebuggees(::grpc::ServerContext* context, ::google::devtools::clouddebugger::v2::ListDebuggeesRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::devtools::clouddebugger::v2::ListDebuggeesResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_SetBreakpoint<WithAsyncMethod_GetBreakpoint<WithAsyncMethod_DeleteBreakpoint<WithAsyncMethod_ListBreakpoints<WithAsyncMethod_ListDebuggees<Service > > > > > AsyncService;
  template <class BaseClass>
  class WithGenericMethod_SetBreakpoint : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_SetBreakpoint() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_SetBreakpoint() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetBreakpoint(::grpc::ServerContext* context, const ::google::devtools::clouddebugger::v2::SetBreakpointRequest* request, ::google::devtools::clouddebugger::v2::SetBreakpointResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetBreakpoint : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_GetBreakpoint() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_GetBreakpoint() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetBreakpoint(::grpc::ServerContext* context, const ::google::devtools::clouddebugger::v2::GetBreakpointRequest* request, ::google::devtools::clouddebugger::v2::GetBreakpointResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DeleteBreakpoint : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_DeleteBreakpoint() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_DeleteBreakpoint() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteBreakpoint(::grpc::ServerContext* context, const ::google::devtools::clouddebugger::v2::DeleteBreakpointRequest* request, ::google::protobuf::Empty* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ListBreakpoints : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_ListBreakpoints() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_ListBreakpoints() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListBreakpoints(::grpc::ServerContext* context, const ::google::devtools::clouddebugger::v2::ListBreakpointsRequest* request, ::google::devtools::clouddebugger::v2::ListBreakpointsResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ListDebuggees : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_ListDebuggees() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_ListDebuggees() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListDebuggees(::grpc::ServerContext* context, const ::google::devtools::clouddebugger::v2::ListDebuggeesRequest* request, ::google::devtools::clouddebugger::v2::ListDebuggeesResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SetBreakpoint : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_SetBreakpoint() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler< ::google::devtools::clouddebugger::v2::SetBreakpointRequest, ::google::devtools::clouddebugger::v2::SetBreakpointResponse>(std::bind(&WithStreamedUnaryMethod_SetBreakpoint<BaseClass>::StreamedSetBreakpoint, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_SetBreakpoint() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SetBreakpoint(::grpc::ServerContext* context, const ::google::devtools::clouddebugger::v2::SetBreakpointRequest* request, ::google::devtools::clouddebugger::v2::SetBreakpointResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSetBreakpoint(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::devtools::clouddebugger::v2::SetBreakpointRequest,::google::devtools::clouddebugger::v2::SetBreakpointResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetBreakpoint : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_GetBreakpoint() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler< ::google::devtools::clouddebugger::v2::GetBreakpointRequest, ::google::devtools::clouddebugger::v2::GetBreakpointResponse>(std::bind(&WithStreamedUnaryMethod_GetBreakpoint<BaseClass>::StreamedGetBreakpoint, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetBreakpoint() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetBreakpoint(::grpc::ServerContext* context, const ::google::devtools::clouddebugger::v2::GetBreakpointRequest* request, ::google::devtools::clouddebugger::v2::GetBreakpointResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetBreakpoint(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::devtools::clouddebugger::v2::GetBreakpointRequest,::google::devtools::clouddebugger::v2::GetBreakpointResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DeleteBreakpoint : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_DeleteBreakpoint() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler< ::google::devtools::clouddebugger::v2::DeleteBreakpointRequest, ::google::protobuf::Empty>(std::bind(&WithStreamedUnaryMethod_DeleteBreakpoint<BaseClass>::StreamedDeleteBreakpoint, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_DeleteBreakpoint() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DeleteBreakpoint(::grpc::ServerContext* context, const ::google::devtools::clouddebugger::v2::DeleteBreakpointRequest* request, ::google::protobuf::Empty* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDeleteBreakpoint(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::devtools::clouddebugger::v2::DeleteBreakpointRequest,::google::protobuf::Empty>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ListBreakpoints : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_ListBreakpoints() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler< ::google::devtools::clouddebugger::v2::ListBreakpointsRequest, ::google::devtools::clouddebugger::v2::ListBreakpointsResponse>(std::bind(&WithStreamedUnaryMethod_ListBreakpoints<BaseClass>::StreamedListBreakpoints, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_ListBreakpoints() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ListBreakpoints(::grpc::ServerContext* context, const ::google::devtools::clouddebugger::v2::ListBreakpointsRequest* request, ::google::devtools::clouddebugger::v2::ListBreakpointsResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedListBreakpoints(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::devtools::clouddebugger::v2::ListBreakpointsRequest,::google::devtools::clouddebugger::v2::ListBreakpointsResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ListDebuggees : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_ListDebuggees() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler< ::google::devtools::clouddebugger::v2::ListDebuggeesRequest, ::google::devtools::clouddebugger::v2::ListDebuggeesResponse>(std::bind(&WithStreamedUnaryMethod_ListDebuggees<BaseClass>::StreamedListDebuggees, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_ListDebuggees() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ListDebuggees(::grpc::ServerContext* context, const ::google::devtools::clouddebugger::v2::ListDebuggeesRequest* request, ::google::devtools::clouddebugger::v2::ListDebuggeesResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedListDebuggees(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::devtools::clouddebugger::v2::ListDebuggeesRequest,::google::devtools::clouddebugger::v2::ListDebuggeesResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_SetBreakpoint<WithStreamedUnaryMethod_GetBreakpoint<WithStreamedUnaryMethod_DeleteBreakpoint<WithStreamedUnaryMethod_ListBreakpoints<WithStreamedUnaryMethod_ListDebuggees<Service > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_SetBreakpoint<WithStreamedUnaryMethod_GetBreakpoint<WithStreamedUnaryMethod_DeleteBreakpoint<WithStreamedUnaryMethod_ListBreakpoints<WithStreamedUnaryMethod_ListDebuggees<Service > > > > > StreamedService;
};

}  // namespace v2
}  // namespace clouddebugger
}  // namespace devtools
}  // namespace google


#endif  // GRPC_google_2fdevtools_2fclouddebugger_2fv2_2fdebugger_2eproto__INCLUDED
