// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/bigtable/admin/table/v1/bigtable_table_service_messages.proto

#ifndef PROTOBUF_google_2fbigtable_2fadmin_2ftable_2fv1_2fbigtable_5ftable_5fservice_5fmessages_2eproto__INCLUDED
#define PROTOBUF_google_2fbigtable_2fadmin_2ftable_2fv1_2fbigtable_5ftable_5fservice_5fmessages_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "google/bigtable/admin/table/v1/bigtable_table_data.pb.h"
// @@protoc_insertion_point(includes)

namespace protobuf_google_2fbigtable_2fadmin_2ftable_2fv1_2fbigtable_5ftable_5fservice_5fmessages_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[9];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsCreateTableRequestImpl();
void InitDefaultsCreateTableRequest();
void InitDefaultsListTablesRequestImpl();
void InitDefaultsListTablesRequest();
void InitDefaultsListTablesResponseImpl();
void InitDefaultsListTablesResponse();
void InitDefaultsGetTableRequestImpl();
void InitDefaultsGetTableRequest();
void InitDefaultsDeleteTableRequestImpl();
void InitDefaultsDeleteTableRequest();
void InitDefaultsRenameTableRequestImpl();
void InitDefaultsRenameTableRequest();
void InitDefaultsCreateColumnFamilyRequestImpl();
void InitDefaultsCreateColumnFamilyRequest();
void InitDefaultsDeleteColumnFamilyRequestImpl();
void InitDefaultsDeleteColumnFamilyRequest();
void InitDefaultsBulkDeleteRowsRequestImpl();
void InitDefaultsBulkDeleteRowsRequest();
inline void InitDefaults() {
  InitDefaultsCreateTableRequest();
  InitDefaultsListTablesRequest();
  InitDefaultsListTablesResponse();
  InitDefaultsGetTableRequest();
  InitDefaultsDeleteTableRequest();
  InitDefaultsRenameTableRequest();
  InitDefaultsCreateColumnFamilyRequest();
  InitDefaultsDeleteColumnFamilyRequest();
  InitDefaultsBulkDeleteRowsRequest();
}
}  // namespace protobuf_google_2fbigtable_2fadmin_2ftable_2fv1_2fbigtable_5ftable_5fservice_5fmessages_2eproto
namespace google {
namespace bigtable {
namespace admin {
namespace table {
namespace v1 {
class BulkDeleteRowsRequest;
class BulkDeleteRowsRequestDefaultTypeInternal;
extern BulkDeleteRowsRequestDefaultTypeInternal _BulkDeleteRowsRequest_default_instance_;
class CreateColumnFamilyRequest;
class CreateColumnFamilyRequestDefaultTypeInternal;
extern CreateColumnFamilyRequestDefaultTypeInternal _CreateColumnFamilyRequest_default_instance_;
class CreateTableRequest;
class CreateTableRequestDefaultTypeInternal;
extern CreateTableRequestDefaultTypeInternal _CreateTableRequest_default_instance_;
class DeleteColumnFamilyRequest;
class DeleteColumnFamilyRequestDefaultTypeInternal;
extern DeleteColumnFamilyRequestDefaultTypeInternal _DeleteColumnFamilyRequest_default_instance_;
class DeleteTableRequest;
class DeleteTableRequestDefaultTypeInternal;
extern DeleteTableRequestDefaultTypeInternal _DeleteTableRequest_default_instance_;
class GetTableRequest;
class GetTableRequestDefaultTypeInternal;
extern GetTableRequestDefaultTypeInternal _GetTableRequest_default_instance_;
class ListTablesRequest;
class ListTablesRequestDefaultTypeInternal;
extern ListTablesRequestDefaultTypeInternal _ListTablesRequest_default_instance_;
class ListTablesResponse;
class ListTablesResponseDefaultTypeInternal;
extern ListTablesResponseDefaultTypeInternal _ListTablesResponse_default_instance_;
class RenameTableRequest;
class RenameTableRequestDefaultTypeInternal;
extern RenameTableRequestDefaultTypeInternal _RenameTableRequest_default_instance_;
}  // namespace v1
}  // namespace table
}  // namespace admin
}  // namespace bigtable
}  // namespace google
namespace google {
namespace bigtable {
namespace admin {
namespace table {
namespace v1 {

// ===================================================================

class CreateTableRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.bigtable.admin.table.v1.CreateTableRequest) */ {
 public:
  CreateTableRequest();
  virtual ~CreateTableRequest();

  CreateTableRequest(const CreateTableRequest& from);

  inline CreateTableRequest& operator=(const CreateTableRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CreateTableRequest(CreateTableRequest&& from) noexcept
    : CreateTableRequest() {
    *this = ::std::move(from);
  }

  inline CreateTableRequest& operator=(CreateTableRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CreateTableRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreateTableRequest* internal_default_instance() {
    return reinterpret_cast<const CreateTableRequest*>(
               &_CreateTableRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(CreateTableRequest* other);
  friend void swap(CreateTableRequest& a, CreateTableRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CreateTableRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  CreateTableRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CreateTableRequest& from);
  void MergeFrom(const CreateTableRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CreateTableRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string initial_split_keys = 4;
  int initial_split_keys_size() const;
  void clear_initial_split_keys();
  static const int kInitialSplitKeysFieldNumber = 4;
  const ::std::string& initial_split_keys(int index) const;
  ::std::string* mutable_initial_split_keys(int index);
  void set_initial_split_keys(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_initial_split_keys(int index, ::std::string&& value);
  #endif
  void set_initial_split_keys(int index, const char* value);
  void set_initial_split_keys(int index, const char* value, size_t size);
  ::std::string* add_initial_split_keys();
  void add_initial_split_keys(const ::std::string& value);
  #if LANG_CXX11
  void add_initial_split_keys(::std::string&& value);
  #endif
  void add_initial_split_keys(const char* value);
  void add_initial_split_keys(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& initial_split_keys() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_initial_split_keys();

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // string table_id = 2;
  void clear_table_id();
  static const int kTableIdFieldNumber = 2;
  const ::std::string& table_id() const;
  void set_table_id(const ::std::string& value);
  #if LANG_CXX11
  void set_table_id(::std::string&& value);
  #endif
  void set_table_id(const char* value);
  void set_table_id(const char* value, size_t size);
  ::std::string* mutable_table_id();
  ::std::string* release_table_id();
  void set_allocated_table_id(::std::string* table_id);

  // .google.bigtable.admin.table.v1.Table table = 3;
  bool has_table() const;
  void clear_table();
  static const int kTableFieldNumber = 3;
  const ::google::bigtable::admin::table::v1::Table& table() const;
  ::google::bigtable::admin::table::v1::Table* release_table();
  ::google::bigtable::admin::table::v1::Table* mutable_table();
  void set_allocated_table(::google::bigtable::admin::table::v1::Table* table);

  // @@protoc_insertion_point(class_scope:google.bigtable.admin.table.v1.CreateTableRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> initial_split_keys_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr table_id_;
  ::google::bigtable::admin::table::v1::Table* table_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fbigtable_2fadmin_2ftable_2fv1_2fbigtable_5ftable_5fservice_5fmessages_2eproto::TableStruct;
  friend void ::protobuf_google_2fbigtable_2fadmin_2ftable_2fv1_2fbigtable_5ftable_5fservice_5fmessages_2eproto::InitDefaultsCreateTableRequestImpl();
};
// -------------------------------------------------------------------

class ListTablesRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.bigtable.admin.table.v1.ListTablesRequest) */ {
 public:
  ListTablesRequest();
  virtual ~ListTablesRequest();

  ListTablesRequest(const ListTablesRequest& from);

  inline ListTablesRequest& operator=(const ListTablesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ListTablesRequest(ListTablesRequest&& from) noexcept
    : ListTablesRequest() {
    *this = ::std::move(from);
  }

  inline ListTablesRequest& operator=(ListTablesRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ListTablesRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListTablesRequest* internal_default_instance() {
    return reinterpret_cast<const ListTablesRequest*>(
               &_ListTablesRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(ListTablesRequest* other);
  friend void swap(ListTablesRequest& a, ListTablesRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ListTablesRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  ListTablesRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ListTablesRequest& from);
  void MergeFrom(const ListTablesRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ListTablesRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:google.bigtable.admin.table.v1.ListTablesRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fbigtable_2fadmin_2ftable_2fv1_2fbigtable_5ftable_5fservice_5fmessages_2eproto::TableStruct;
  friend void ::protobuf_google_2fbigtable_2fadmin_2ftable_2fv1_2fbigtable_5ftable_5fservice_5fmessages_2eproto::InitDefaultsListTablesRequestImpl();
};
// -------------------------------------------------------------------

class ListTablesResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.bigtable.admin.table.v1.ListTablesResponse) */ {
 public:
  ListTablesResponse();
  virtual ~ListTablesResponse();

  ListTablesResponse(const ListTablesResponse& from);

  inline ListTablesResponse& operator=(const ListTablesResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ListTablesResponse(ListTablesResponse&& from) noexcept
    : ListTablesResponse() {
    *this = ::std::move(from);
  }

  inline ListTablesResponse& operator=(ListTablesResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ListTablesResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListTablesResponse* internal_default_instance() {
    return reinterpret_cast<const ListTablesResponse*>(
               &_ListTablesResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(ListTablesResponse* other);
  friend void swap(ListTablesResponse& a, ListTablesResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ListTablesResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  ListTablesResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ListTablesResponse& from);
  void MergeFrom(const ListTablesResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ListTablesResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .google.bigtable.admin.table.v1.Table tables = 1;
  int tables_size() const;
  void clear_tables();
  static const int kTablesFieldNumber = 1;
  const ::google::bigtable::admin::table::v1::Table& tables(int index) const;
  ::google::bigtable::admin::table::v1::Table* mutable_tables(int index);
  ::google::bigtable::admin::table::v1::Table* add_tables();
  ::google::protobuf::RepeatedPtrField< ::google::bigtable::admin::table::v1::Table >*
      mutable_tables();
  const ::google::protobuf::RepeatedPtrField< ::google::bigtable::admin::table::v1::Table >&
      tables() const;

  // @@protoc_insertion_point(class_scope:google.bigtable.admin.table.v1.ListTablesResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::google::bigtable::admin::table::v1::Table > tables_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fbigtable_2fadmin_2ftable_2fv1_2fbigtable_5ftable_5fservice_5fmessages_2eproto::TableStruct;
  friend void ::protobuf_google_2fbigtable_2fadmin_2ftable_2fv1_2fbigtable_5ftable_5fservice_5fmessages_2eproto::InitDefaultsListTablesResponseImpl();
};
// -------------------------------------------------------------------

class GetTableRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.bigtable.admin.table.v1.GetTableRequest) */ {
 public:
  GetTableRequest();
  virtual ~GetTableRequest();

  GetTableRequest(const GetTableRequest& from);

  inline GetTableRequest& operator=(const GetTableRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetTableRequest(GetTableRequest&& from) noexcept
    : GetTableRequest() {
    *this = ::std::move(from);
  }

  inline GetTableRequest& operator=(GetTableRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetTableRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetTableRequest* internal_default_instance() {
    return reinterpret_cast<const GetTableRequest*>(
               &_GetTableRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(GetTableRequest* other);
  friend void swap(GetTableRequest& a, GetTableRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetTableRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  GetTableRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GetTableRequest& from);
  void MergeFrom(const GetTableRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GetTableRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:google.bigtable.admin.table.v1.GetTableRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fbigtable_2fadmin_2ftable_2fv1_2fbigtable_5ftable_5fservice_5fmessages_2eproto::TableStruct;
  friend void ::protobuf_google_2fbigtable_2fadmin_2ftable_2fv1_2fbigtable_5ftable_5fservice_5fmessages_2eproto::InitDefaultsGetTableRequestImpl();
};
// -------------------------------------------------------------------

class DeleteTableRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.bigtable.admin.table.v1.DeleteTableRequest) */ {
 public:
  DeleteTableRequest();
  virtual ~DeleteTableRequest();

  DeleteTableRequest(const DeleteTableRequest& from);

  inline DeleteTableRequest& operator=(const DeleteTableRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DeleteTableRequest(DeleteTableRequest&& from) noexcept
    : DeleteTableRequest() {
    *this = ::std::move(from);
  }

  inline DeleteTableRequest& operator=(DeleteTableRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DeleteTableRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeleteTableRequest* internal_default_instance() {
    return reinterpret_cast<const DeleteTableRequest*>(
               &_DeleteTableRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(DeleteTableRequest* other);
  friend void swap(DeleteTableRequest& a, DeleteTableRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DeleteTableRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  DeleteTableRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DeleteTableRequest& from);
  void MergeFrom(const DeleteTableRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DeleteTableRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:google.bigtable.admin.table.v1.DeleteTableRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fbigtable_2fadmin_2ftable_2fv1_2fbigtable_5ftable_5fservice_5fmessages_2eproto::TableStruct;
  friend void ::protobuf_google_2fbigtable_2fadmin_2ftable_2fv1_2fbigtable_5ftable_5fservice_5fmessages_2eproto::InitDefaultsDeleteTableRequestImpl();
};
// -------------------------------------------------------------------

class RenameTableRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.bigtable.admin.table.v1.RenameTableRequest) */ {
 public:
  RenameTableRequest();
  virtual ~RenameTableRequest();

  RenameTableRequest(const RenameTableRequest& from);

  inline RenameTableRequest& operator=(const RenameTableRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RenameTableRequest(RenameTableRequest&& from) noexcept
    : RenameTableRequest() {
    *this = ::std::move(from);
  }

  inline RenameTableRequest& operator=(RenameTableRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RenameTableRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RenameTableRequest* internal_default_instance() {
    return reinterpret_cast<const RenameTableRequest*>(
               &_RenameTableRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    5;

  void Swap(RenameTableRequest* other);
  friend void swap(RenameTableRequest& a, RenameTableRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RenameTableRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  RenameTableRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const RenameTableRequest& from);
  void MergeFrom(const RenameTableRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(RenameTableRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // string new_id = 2;
  void clear_new_id();
  static const int kNewIdFieldNumber = 2;
  const ::std::string& new_id() const;
  void set_new_id(const ::std::string& value);
  #if LANG_CXX11
  void set_new_id(::std::string&& value);
  #endif
  void set_new_id(const char* value);
  void set_new_id(const char* value, size_t size);
  ::std::string* mutable_new_id();
  ::std::string* release_new_id();
  void set_allocated_new_id(::std::string* new_id);

  // @@protoc_insertion_point(class_scope:google.bigtable.admin.table.v1.RenameTableRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr new_id_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fbigtable_2fadmin_2ftable_2fv1_2fbigtable_5ftable_5fservice_5fmessages_2eproto::TableStruct;
  friend void ::protobuf_google_2fbigtable_2fadmin_2ftable_2fv1_2fbigtable_5ftable_5fservice_5fmessages_2eproto::InitDefaultsRenameTableRequestImpl();
};
// -------------------------------------------------------------------

class CreateColumnFamilyRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.bigtable.admin.table.v1.CreateColumnFamilyRequest) */ {
 public:
  CreateColumnFamilyRequest();
  virtual ~CreateColumnFamilyRequest();

  CreateColumnFamilyRequest(const CreateColumnFamilyRequest& from);

  inline CreateColumnFamilyRequest& operator=(const CreateColumnFamilyRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CreateColumnFamilyRequest(CreateColumnFamilyRequest&& from) noexcept
    : CreateColumnFamilyRequest() {
    *this = ::std::move(from);
  }

  inline CreateColumnFamilyRequest& operator=(CreateColumnFamilyRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CreateColumnFamilyRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreateColumnFamilyRequest* internal_default_instance() {
    return reinterpret_cast<const CreateColumnFamilyRequest*>(
               &_CreateColumnFamilyRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    6;

  void Swap(CreateColumnFamilyRequest* other);
  friend void swap(CreateColumnFamilyRequest& a, CreateColumnFamilyRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CreateColumnFamilyRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  CreateColumnFamilyRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CreateColumnFamilyRequest& from);
  void MergeFrom(const CreateColumnFamilyRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CreateColumnFamilyRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // string column_family_id = 2;
  void clear_column_family_id();
  static const int kColumnFamilyIdFieldNumber = 2;
  const ::std::string& column_family_id() const;
  void set_column_family_id(const ::std::string& value);
  #if LANG_CXX11
  void set_column_family_id(::std::string&& value);
  #endif
  void set_column_family_id(const char* value);
  void set_column_family_id(const char* value, size_t size);
  ::std::string* mutable_column_family_id();
  ::std::string* release_column_family_id();
  void set_allocated_column_family_id(::std::string* column_family_id);

  // .google.bigtable.admin.table.v1.ColumnFamily column_family = 3;
  bool has_column_family() const;
  void clear_column_family();
  static const int kColumnFamilyFieldNumber = 3;
  const ::google::bigtable::admin::table::v1::ColumnFamily& column_family() const;
  ::google::bigtable::admin::table::v1::ColumnFamily* release_column_family();
  ::google::bigtable::admin::table::v1::ColumnFamily* mutable_column_family();
  void set_allocated_column_family(::google::bigtable::admin::table::v1::ColumnFamily* column_family);

  // @@protoc_insertion_point(class_scope:google.bigtable.admin.table.v1.CreateColumnFamilyRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr column_family_id_;
  ::google::bigtable::admin::table::v1::ColumnFamily* column_family_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fbigtable_2fadmin_2ftable_2fv1_2fbigtable_5ftable_5fservice_5fmessages_2eproto::TableStruct;
  friend void ::protobuf_google_2fbigtable_2fadmin_2ftable_2fv1_2fbigtable_5ftable_5fservice_5fmessages_2eproto::InitDefaultsCreateColumnFamilyRequestImpl();
};
// -------------------------------------------------------------------

class DeleteColumnFamilyRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.bigtable.admin.table.v1.DeleteColumnFamilyRequest) */ {
 public:
  DeleteColumnFamilyRequest();
  virtual ~DeleteColumnFamilyRequest();

  DeleteColumnFamilyRequest(const DeleteColumnFamilyRequest& from);

  inline DeleteColumnFamilyRequest& operator=(const DeleteColumnFamilyRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DeleteColumnFamilyRequest(DeleteColumnFamilyRequest&& from) noexcept
    : DeleteColumnFamilyRequest() {
    *this = ::std::move(from);
  }

  inline DeleteColumnFamilyRequest& operator=(DeleteColumnFamilyRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DeleteColumnFamilyRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeleteColumnFamilyRequest* internal_default_instance() {
    return reinterpret_cast<const DeleteColumnFamilyRequest*>(
               &_DeleteColumnFamilyRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    7;

  void Swap(DeleteColumnFamilyRequest* other);
  friend void swap(DeleteColumnFamilyRequest& a, DeleteColumnFamilyRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DeleteColumnFamilyRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  DeleteColumnFamilyRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DeleteColumnFamilyRequest& from);
  void MergeFrom(const DeleteColumnFamilyRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DeleteColumnFamilyRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:google.bigtable.admin.table.v1.DeleteColumnFamilyRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fbigtable_2fadmin_2ftable_2fv1_2fbigtable_5ftable_5fservice_5fmessages_2eproto::TableStruct;
  friend void ::protobuf_google_2fbigtable_2fadmin_2ftable_2fv1_2fbigtable_5ftable_5fservice_5fmessages_2eproto::InitDefaultsDeleteColumnFamilyRequestImpl();
};
// -------------------------------------------------------------------

class BulkDeleteRowsRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.bigtable.admin.table.v1.BulkDeleteRowsRequest) */ {
 public:
  BulkDeleteRowsRequest();
  virtual ~BulkDeleteRowsRequest();

  BulkDeleteRowsRequest(const BulkDeleteRowsRequest& from);

  inline BulkDeleteRowsRequest& operator=(const BulkDeleteRowsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  BulkDeleteRowsRequest(BulkDeleteRowsRequest&& from) noexcept
    : BulkDeleteRowsRequest() {
    *this = ::std::move(from);
  }

  inline BulkDeleteRowsRequest& operator=(BulkDeleteRowsRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const BulkDeleteRowsRequest& default_instance();

  enum TargetCase {
    kRowKeyPrefix = 2,
    kDeleteAllDataFromTable = 3,
    TARGET_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BulkDeleteRowsRequest* internal_default_instance() {
    return reinterpret_cast<const BulkDeleteRowsRequest*>(
               &_BulkDeleteRowsRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    8;

  void Swap(BulkDeleteRowsRequest* other);
  friend void swap(BulkDeleteRowsRequest& a, BulkDeleteRowsRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BulkDeleteRowsRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  BulkDeleteRowsRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const BulkDeleteRowsRequest& from);
  void MergeFrom(const BulkDeleteRowsRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(BulkDeleteRowsRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string table_name = 1;
  void clear_table_name();
  static const int kTableNameFieldNumber = 1;
  const ::std::string& table_name() const;
  void set_table_name(const ::std::string& value);
  #if LANG_CXX11
  void set_table_name(::std::string&& value);
  #endif
  void set_table_name(const char* value);
  void set_table_name(const char* value, size_t size);
  ::std::string* mutable_table_name();
  ::std::string* release_table_name();
  void set_allocated_table_name(::std::string* table_name);

  // bytes row_key_prefix = 2;
  private:
  bool has_row_key_prefix() const;
  public:
  void clear_row_key_prefix();
  static const int kRowKeyPrefixFieldNumber = 2;
  const ::std::string& row_key_prefix() const;
  void set_row_key_prefix(const ::std::string& value);
  #if LANG_CXX11
  void set_row_key_prefix(::std::string&& value);
  #endif
  void set_row_key_prefix(const char* value);
  void set_row_key_prefix(const void* value, size_t size);
  ::std::string* mutable_row_key_prefix();
  ::std::string* release_row_key_prefix();
  void set_allocated_row_key_prefix(::std::string* row_key_prefix);

  // bool delete_all_data_from_table = 3;
  private:
  bool has_delete_all_data_from_table() const;
  public:
  void clear_delete_all_data_from_table();
  static const int kDeleteAllDataFromTableFieldNumber = 3;
  bool delete_all_data_from_table() const;
  void set_delete_all_data_from_table(bool value);

  TargetCase target_case() const;
  // @@protoc_insertion_point(class_scope:google.bigtable.admin.table.v1.BulkDeleteRowsRequest)
 private:
  void set_has_row_key_prefix();
  void set_has_delete_all_data_from_table();

  inline bool has_target() const;
  void clear_target();
  inline void clear_has_target();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr table_name_;
  union TargetUnion {
    TargetUnion() {}
    ::google::protobuf::internal::ArenaStringPtr row_key_prefix_;
    bool delete_all_data_from_table_;
  } target_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::protobuf_google_2fbigtable_2fadmin_2ftable_2fv1_2fbigtable_5ftable_5fservice_5fmessages_2eproto::TableStruct;
  friend void ::protobuf_google_2fbigtable_2fadmin_2ftable_2fv1_2fbigtable_5ftable_5fservice_5fmessages_2eproto::InitDefaultsBulkDeleteRowsRequestImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CreateTableRequest

// string name = 1;
inline void CreateTableRequest::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CreateTableRequest::name() const {
  // @@protoc_insertion_point(field_get:google.bigtable.admin.table.v1.CreateTableRequest.name)
  return name_.GetNoArena();
}
inline void CreateTableRequest::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.bigtable.admin.table.v1.CreateTableRequest.name)
}
#if LANG_CXX11
inline void CreateTableRequest::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.bigtable.admin.table.v1.CreateTableRequest.name)
}
#endif
inline void CreateTableRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.bigtable.admin.table.v1.CreateTableRequest.name)
}
inline void CreateTableRequest::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.bigtable.admin.table.v1.CreateTableRequest.name)
}
inline ::std::string* CreateTableRequest::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:google.bigtable.admin.table.v1.CreateTableRequest.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CreateTableRequest::release_name() {
  // @@protoc_insertion_point(field_release:google.bigtable.admin.table.v1.CreateTableRequest.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CreateTableRequest::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.admin.table.v1.CreateTableRequest.name)
}

// string table_id = 2;
inline void CreateTableRequest::clear_table_id() {
  table_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CreateTableRequest::table_id() const {
  // @@protoc_insertion_point(field_get:google.bigtable.admin.table.v1.CreateTableRequest.table_id)
  return table_id_.GetNoArena();
}
inline void CreateTableRequest::set_table_id(const ::std::string& value) {
  
  table_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.bigtable.admin.table.v1.CreateTableRequest.table_id)
}
#if LANG_CXX11
inline void CreateTableRequest::set_table_id(::std::string&& value) {
  
  table_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.bigtable.admin.table.v1.CreateTableRequest.table_id)
}
#endif
inline void CreateTableRequest::set_table_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  table_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.bigtable.admin.table.v1.CreateTableRequest.table_id)
}
inline void CreateTableRequest::set_table_id(const char* value, size_t size) {
  
  table_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.bigtable.admin.table.v1.CreateTableRequest.table_id)
}
inline ::std::string* CreateTableRequest::mutable_table_id() {
  
  // @@protoc_insertion_point(field_mutable:google.bigtable.admin.table.v1.CreateTableRequest.table_id)
  return table_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CreateTableRequest::release_table_id() {
  // @@protoc_insertion_point(field_release:google.bigtable.admin.table.v1.CreateTableRequest.table_id)
  
  return table_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CreateTableRequest::set_allocated_table_id(::std::string* table_id) {
  if (table_id != NULL) {
    
  } else {
    
  }
  table_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), table_id);
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.admin.table.v1.CreateTableRequest.table_id)
}

// .google.bigtable.admin.table.v1.Table table = 3;
inline bool CreateTableRequest::has_table() const {
  return this != internal_default_instance() && table_ != NULL;
}
inline const ::google::bigtable::admin::table::v1::Table& CreateTableRequest::table() const {
  const ::google::bigtable::admin::table::v1::Table* p = table_;
  // @@protoc_insertion_point(field_get:google.bigtable.admin.table.v1.CreateTableRequest.table)
  return p != NULL ? *p : *reinterpret_cast<const ::google::bigtable::admin::table::v1::Table*>(
      &::google::bigtable::admin::table::v1::_Table_default_instance_);
}
inline ::google::bigtable::admin::table::v1::Table* CreateTableRequest::release_table() {
  // @@protoc_insertion_point(field_release:google.bigtable.admin.table.v1.CreateTableRequest.table)
  
  ::google::bigtable::admin::table::v1::Table* temp = table_;
  table_ = NULL;
  return temp;
}
inline ::google::bigtable::admin::table::v1::Table* CreateTableRequest::mutable_table() {
  
  if (table_ == NULL) {
    table_ = new ::google::bigtable::admin::table::v1::Table;
  }
  // @@protoc_insertion_point(field_mutable:google.bigtable.admin.table.v1.CreateTableRequest.table)
  return table_;
}
inline void CreateTableRequest::set_allocated_table(::google::bigtable::admin::table::v1::Table* table) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(table_);
  }
  if (table) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      table = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, table, submessage_arena);
    }
    
  } else {
    
  }
  table_ = table;
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.admin.table.v1.CreateTableRequest.table)
}

// repeated string initial_split_keys = 4;
inline int CreateTableRequest::initial_split_keys_size() const {
  return initial_split_keys_.size();
}
inline void CreateTableRequest::clear_initial_split_keys() {
  initial_split_keys_.Clear();
}
inline const ::std::string& CreateTableRequest::initial_split_keys(int index) const {
  // @@protoc_insertion_point(field_get:google.bigtable.admin.table.v1.CreateTableRequest.initial_split_keys)
  return initial_split_keys_.Get(index);
}
inline ::std::string* CreateTableRequest::mutable_initial_split_keys(int index) {
  // @@protoc_insertion_point(field_mutable:google.bigtable.admin.table.v1.CreateTableRequest.initial_split_keys)
  return initial_split_keys_.Mutable(index);
}
inline void CreateTableRequest::set_initial_split_keys(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:google.bigtable.admin.table.v1.CreateTableRequest.initial_split_keys)
  initial_split_keys_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void CreateTableRequest::set_initial_split_keys(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:google.bigtable.admin.table.v1.CreateTableRequest.initial_split_keys)
  initial_split_keys_.Mutable(index)->assign(std::move(value));
}
#endif
inline void CreateTableRequest::set_initial_split_keys(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  initial_split_keys_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:google.bigtable.admin.table.v1.CreateTableRequest.initial_split_keys)
}
inline void CreateTableRequest::set_initial_split_keys(int index, const char* value, size_t size) {
  initial_split_keys_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:google.bigtable.admin.table.v1.CreateTableRequest.initial_split_keys)
}
inline ::std::string* CreateTableRequest::add_initial_split_keys() {
  // @@protoc_insertion_point(field_add_mutable:google.bigtable.admin.table.v1.CreateTableRequest.initial_split_keys)
  return initial_split_keys_.Add();
}
inline void CreateTableRequest::add_initial_split_keys(const ::std::string& value) {
  initial_split_keys_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:google.bigtable.admin.table.v1.CreateTableRequest.initial_split_keys)
}
#if LANG_CXX11
inline void CreateTableRequest::add_initial_split_keys(::std::string&& value) {
  initial_split_keys_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:google.bigtable.admin.table.v1.CreateTableRequest.initial_split_keys)
}
#endif
inline void CreateTableRequest::add_initial_split_keys(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  initial_split_keys_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:google.bigtable.admin.table.v1.CreateTableRequest.initial_split_keys)
}
inline void CreateTableRequest::add_initial_split_keys(const char* value, size_t size) {
  initial_split_keys_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:google.bigtable.admin.table.v1.CreateTableRequest.initial_split_keys)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
CreateTableRequest::initial_split_keys() const {
  // @@protoc_insertion_point(field_list:google.bigtable.admin.table.v1.CreateTableRequest.initial_split_keys)
  return initial_split_keys_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
CreateTableRequest::mutable_initial_split_keys() {
  // @@protoc_insertion_point(field_mutable_list:google.bigtable.admin.table.v1.CreateTableRequest.initial_split_keys)
  return &initial_split_keys_;
}

// -------------------------------------------------------------------

// ListTablesRequest

// string name = 1;
inline void ListTablesRequest::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ListTablesRequest::name() const {
  // @@protoc_insertion_point(field_get:google.bigtable.admin.table.v1.ListTablesRequest.name)
  return name_.GetNoArena();
}
inline void ListTablesRequest::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.bigtable.admin.table.v1.ListTablesRequest.name)
}
#if LANG_CXX11
inline void ListTablesRequest::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.bigtable.admin.table.v1.ListTablesRequest.name)
}
#endif
inline void ListTablesRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.bigtable.admin.table.v1.ListTablesRequest.name)
}
inline void ListTablesRequest::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.bigtable.admin.table.v1.ListTablesRequest.name)
}
inline ::std::string* ListTablesRequest::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:google.bigtable.admin.table.v1.ListTablesRequest.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ListTablesRequest::release_name() {
  // @@protoc_insertion_point(field_release:google.bigtable.admin.table.v1.ListTablesRequest.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ListTablesRequest::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.admin.table.v1.ListTablesRequest.name)
}

// -------------------------------------------------------------------

// ListTablesResponse

// repeated .google.bigtable.admin.table.v1.Table tables = 1;
inline int ListTablesResponse::tables_size() const {
  return tables_.size();
}
inline const ::google::bigtable::admin::table::v1::Table& ListTablesResponse::tables(int index) const {
  // @@protoc_insertion_point(field_get:google.bigtable.admin.table.v1.ListTablesResponse.tables)
  return tables_.Get(index);
}
inline ::google::bigtable::admin::table::v1::Table* ListTablesResponse::mutable_tables(int index) {
  // @@protoc_insertion_point(field_mutable:google.bigtable.admin.table.v1.ListTablesResponse.tables)
  return tables_.Mutable(index);
}
inline ::google::bigtable::admin::table::v1::Table* ListTablesResponse::add_tables() {
  // @@protoc_insertion_point(field_add:google.bigtable.admin.table.v1.ListTablesResponse.tables)
  return tables_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::google::bigtable::admin::table::v1::Table >*
ListTablesResponse::mutable_tables() {
  // @@protoc_insertion_point(field_mutable_list:google.bigtable.admin.table.v1.ListTablesResponse.tables)
  return &tables_;
}
inline const ::google::protobuf::RepeatedPtrField< ::google::bigtable::admin::table::v1::Table >&
ListTablesResponse::tables() const {
  // @@protoc_insertion_point(field_list:google.bigtable.admin.table.v1.ListTablesResponse.tables)
  return tables_;
}

// -------------------------------------------------------------------

// GetTableRequest

// string name = 1;
inline void GetTableRequest::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetTableRequest::name() const {
  // @@protoc_insertion_point(field_get:google.bigtable.admin.table.v1.GetTableRequest.name)
  return name_.GetNoArena();
}
inline void GetTableRequest::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.bigtable.admin.table.v1.GetTableRequest.name)
}
#if LANG_CXX11
inline void GetTableRequest::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.bigtable.admin.table.v1.GetTableRequest.name)
}
#endif
inline void GetTableRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.bigtable.admin.table.v1.GetTableRequest.name)
}
inline void GetTableRequest::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.bigtable.admin.table.v1.GetTableRequest.name)
}
inline ::std::string* GetTableRequest::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:google.bigtable.admin.table.v1.GetTableRequest.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetTableRequest::release_name() {
  // @@protoc_insertion_point(field_release:google.bigtable.admin.table.v1.GetTableRequest.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetTableRequest::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.admin.table.v1.GetTableRequest.name)
}

// -------------------------------------------------------------------

// DeleteTableRequest

// string name = 1;
inline void DeleteTableRequest::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DeleteTableRequest::name() const {
  // @@protoc_insertion_point(field_get:google.bigtable.admin.table.v1.DeleteTableRequest.name)
  return name_.GetNoArena();
}
inline void DeleteTableRequest::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.bigtable.admin.table.v1.DeleteTableRequest.name)
}
#if LANG_CXX11
inline void DeleteTableRequest::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.bigtable.admin.table.v1.DeleteTableRequest.name)
}
#endif
inline void DeleteTableRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.bigtable.admin.table.v1.DeleteTableRequest.name)
}
inline void DeleteTableRequest::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.bigtable.admin.table.v1.DeleteTableRequest.name)
}
inline ::std::string* DeleteTableRequest::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:google.bigtable.admin.table.v1.DeleteTableRequest.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DeleteTableRequest::release_name() {
  // @@protoc_insertion_point(field_release:google.bigtable.admin.table.v1.DeleteTableRequest.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DeleteTableRequest::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.admin.table.v1.DeleteTableRequest.name)
}

// -------------------------------------------------------------------

// RenameTableRequest

// string name = 1;
inline void RenameTableRequest::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RenameTableRequest::name() const {
  // @@protoc_insertion_point(field_get:google.bigtable.admin.table.v1.RenameTableRequest.name)
  return name_.GetNoArena();
}
inline void RenameTableRequest::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.bigtable.admin.table.v1.RenameTableRequest.name)
}
#if LANG_CXX11
inline void RenameTableRequest::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.bigtable.admin.table.v1.RenameTableRequest.name)
}
#endif
inline void RenameTableRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.bigtable.admin.table.v1.RenameTableRequest.name)
}
inline void RenameTableRequest::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.bigtable.admin.table.v1.RenameTableRequest.name)
}
inline ::std::string* RenameTableRequest::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:google.bigtable.admin.table.v1.RenameTableRequest.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RenameTableRequest::release_name() {
  // @@protoc_insertion_point(field_release:google.bigtable.admin.table.v1.RenameTableRequest.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RenameTableRequest::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.admin.table.v1.RenameTableRequest.name)
}

// string new_id = 2;
inline void RenameTableRequest::clear_new_id() {
  new_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RenameTableRequest::new_id() const {
  // @@protoc_insertion_point(field_get:google.bigtable.admin.table.v1.RenameTableRequest.new_id)
  return new_id_.GetNoArena();
}
inline void RenameTableRequest::set_new_id(const ::std::string& value) {
  
  new_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.bigtable.admin.table.v1.RenameTableRequest.new_id)
}
#if LANG_CXX11
inline void RenameTableRequest::set_new_id(::std::string&& value) {
  
  new_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.bigtable.admin.table.v1.RenameTableRequest.new_id)
}
#endif
inline void RenameTableRequest::set_new_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  new_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.bigtable.admin.table.v1.RenameTableRequest.new_id)
}
inline void RenameTableRequest::set_new_id(const char* value, size_t size) {
  
  new_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.bigtable.admin.table.v1.RenameTableRequest.new_id)
}
inline ::std::string* RenameTableRequest::mutable_new_id() {
  
  // @@protoc_insertion_point(field_mutable:google.bigtable.admin.table.v1.RenameTableRequest.new_id)
  return new_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RenameTableRequest::release_new_id() {
  // @@protoc_insertion_point(field_release:google.bigtable.admin.table.v1.RenameTableRequest.new_id)
  
  return new_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RenameTableRequest::set_allocated_new_id(::std::string* new_id) {
  if (new_id != NULL) {
    
  } else {
    
  }
  new_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), new_id);
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.admin.table.v1.RenameTableRequest.new_id)
}

// -------------------------------------------------------------------

// CreateColumnFamilyRequest

// string name = 1;
inline void CreateColumnFamilyRequest::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CreateColumnFamilyRequest::name() const {
  // @@protoc_insertion_point(field_get:google.bigtable.admin.table.v1.CreateColumnFamilyRequest.name)
  return name_.GetNoArena();
}
inline void CreateColumnFamilyRequest::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.bigtable.admin.table.v1.CreateColumnFamilyRequest.name)
}
#if LANG_CXX11
inline void CreateColumnFamilyRequest::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.bigtable.admin.table.v1.CreateColumnFamilyRequest.name)
}
#endif
inline void CreateColumnFamilyRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.bigtable.admin.table.v1.CreateColumnFamilyRequest.name)
}
inline void CreateColumnFamilyRequest::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.bigtable.admin.table.v1.CreateColumnFamilyRequest.name)
}
inline ::std::string* CreateColumnFamilyRequest::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:google.bigtable.admin.table.v1.CreateColumnFamilyRequest.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CreateColumnFamilyRequest::release_name() {
  // @@protoc_insertion_point(field_release:google.bigtable.admin.table.v1.CreateColumnFamilyRequest.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CreateColumnFamilyRequest::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.admin.table.v1.CreateColumnFamilyRequest.name)
}

// string column_family_id = 2;
inline void CreateColumnFamilyRequest::clear_column_family_id() {
  column_family_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CreateColumnFamilyRequest::column_family_id() const {
  // @@protoc_insertion_point(field_get:google.bigtable.admin.table.v1.CreateColumnFamilyRequest.column_family_id)
  return column_family_id_.GetNoArena();
}
inline void CreateColumnFamilyRequest::set_column_family_id(const ::std::string& value) {
  
  column_family_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.bigtable.admin.table.v1.CreateColumnFamilyRequest.column_family_id)
}
#if LANG_CXX11
inline void CreateColumnFamilyRequest::set_column_family_id(::std::string&& value) {
  
  column_family_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.bigtable.admin.table.v1.CreateColumnFamilyRequest.column_family_id)
}
#endif
inline void CreateColumnFamilyRequest::set_column_family_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  column_family_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.bigtable.admin.table.v1.CreateColumnFamilyRequest.column_family_id)
}
inline void CreateColumnFamilyRequest::set_column_family_id(const char* value, size_t size) {
  
  column_family_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.bigtable.admin.table.v1.CreateColumnFamilyRequest.column_family_id)
}
inline ::std::string* CreateColumnFamilyRequest::mutable_column_family_id() {
  
  // @@protoc_insertion_point(field_mutable:google.bigtable.admin.table.v1.CreateColumnFamilyRequest.column_family_id)
  return column_family_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CreateColumnFamilyRequest::release_column_family_id() {
  // @@protoc_insertion_point(field_release:google.bigtable.admin.table.v1.CreateColumnFamilyRequest.column_family_id)
  
  return column_family_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CreateColumnFamilyRequest::set_allocated_column_family_id(::std::string* column_family_id) {
  if (column_family_id != NULL) {
    
  } else {
    
  }
  column_family_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), column_family_id);
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.admin.table.v1.CreateColumnFamilyRequest.column_family_id)
}

// .google.bigtable.admin.table.v1.ColumnFamily column_family = 3;
inline bool CreateColumnFamilyRequest::has_column_family() const {
  return this != internal_default_instance() && column_family_ != NULL;
}
inline const ::google::bigtable::admin::table::v1::ColumnFamily& CreateColumnFamilyRequest::column_family() const {
  const ::google::bigtable::admin::table::v1::ColumnFamily* p = column_family_;
  // @@protoc_insertion_point(field_get:google.bigtable.admin.table.v1.CreateColumnFamilyRequest.column_family)
  return p != NULL ? *p : *reinterpret_cast<const ::google::bigtable::admin::table::v1::ColumnFamily*>(
      &::google::bigtable::admin::table::v1::_ColumnFamily_default_instance_);
}
inline ::google::bigtable::admin::table::v1::ColumnFamily* CreateColumnFamilyRequest::release_column_family() {
  // @@protoc_insertion_point(field_release:google.bigtable.admin.table.v1.CreateColumnFamilyRequest.column_family)
  
  ::google::bigtable::admin::table::v1::ColumnFamily* temp = column_family_;
  column_family_ = NULL;
  return temp;
}
inline ::google::bigtable::admin::table::v1::ColumnFamily* CreateColumnFamilyRequest::mutable_column_family() {
  
  if (column_family_ == NULL) {
    column_family_ = new ::google::bigtable::admin::table::v1::ColumnFamily;
  }
  // @@protoc_insertion_point(field_mutable:google.bigtable.admin.table.v1.CreateColumnFamilyRequest.column_family)
  return column_family_;
}
inline void CreateColumnFamilyRequest::set_allocated_column_family(::google::bigtable::admin::table::v1::ColumnFamily* column_family) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(column_family_);
  }
  if (column_family) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      column_family = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, column_family, submessage_arena);
    }
    
  } else {
    
  }
  column_family_ = column_family;
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.admin.table.v1.CreateColumnFamilyRequest.column_family)
}

// -------------------------------------------------------------------

// DeleteColumnFamilyRequest

// string name = 1;
inline void DeleteColumnFamilyRequest::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DeleteColumnFamilyRequest::name() const {
  // @@protoc_insertion_point(field_get:google.bigtable.admin.table.v1.DeleteColumnFamilyRequest.name)
  return name_.GetNoArena();
}
inline void DeleteColumnFamilyRequest::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.bigtable.admin.table.v1.DeleteColumnFamilyRequest.name)
}
#if LANG_CXX11
inline void DeleteColumnFamilyRequest::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.bigtable.admin.table.v1.DeleteColumnFamilyRequest.name)
}
#endif
inline void DeleteColumnFamilyRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.bigtable.admin.table.v1.DeleteColumnFamilyRequest.name)
}
inline void DeleteColumnFamilyRequest::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.bigtable.admin.table.v1.DeleteColumnFamilyRequest.name)
}
inline ::std::string* DeleteColumnFamilyRequest::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:google.bigtable.admin.table.v1.DeleteColumnFamilyRequest.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DeleteColumnFamilyRequest::release_name() {
  // @@protoc_insertion_point(field_release:google.bigtable.admin.table.v1.DeleteColumnFamilyRequest.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DeleteColumnFamilyRequest::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.admin.table.v1.DeleteColumnFamilyRequest.name)
}

// -------------------------------------------------------------------

// BulkDeleteRowsRequest

// string table_name = 1;
inline void BulkDeleteRowsRequest::clear_table_name() {
  table_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& BulkDeleteRowsRequest::table_name() const {
  // @@protoc_insertion_point(field_get:google.bigtable.admin.table.v1.BulkDeleteRowsRequest.table_name)
  return table_name_.GetNoArena();
}
inline void BulkDeleteRowsRequest::set_table_name(const ::std::string& value) {
  
  table_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.bigtable.admin.table.v1.BulkDeleteRowsRequest.table_name)
}
#if LANG_CXX11
inline void BulkDeleteRowsRequest::set_table_name(::std::string&& value) {
  
  table_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.bigtable.admin.table.v1.BulkDeleteRowsRequest.table_name)
}
#endif
inline void BulkDeleteRowsRequest::set_table_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  table_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.bigtable.admin.table.v1.BulkDeleteRowsRequest.table_name)
}
inline void BulkDeleteRowsRequest::set_table_name(const char* value, size_t size) {
  
  table_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.bigtable.admin.table.v1.BulkDeleteRowsRequest.table_name)
}
inline ::std::string* BulkDeleteRowsRequest::mutable_table_name() {
  
  // @@protoc_insertion_point(field_mutable:google.bigtable.admin.table.v1.BulkDeleteRowsRequest.table_name)
  return table_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BulkDeleteRowsRequest::release_table_name() {
  // @@protoc_insertion_point(field_release:google.bigtable.admin.table.v1.BulkDeleteRowsRequest.table_name)
  
  return table_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BulkDeleteRowsRequest::set_allocated_table_name(::std::string* table_name) {
  if (table_name != NULL) {
    
  } else {
    
  }
  table_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), table_name);
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.admin.table.v1.BulkDeleteRowsRequest.table_name)
}

// bytes row_key_prefix = 2;
inline bool BulkDeleteRowsRequest::has_row_key_prefix() const {
  return target_case() == kRowKeyPrefix;
}
inline void BulkDeleteRowsRequest::set_has_row_key_prefix() {
  _oneof_case_[0] = kRowKeyPrefix;
}
inline void BulkDeleteRowsRequest::clear_row_key_prefix() {
  if (has_row_key_prefix()) {
    target_.row_key_prefix_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_target();
  }
}
inline const ::std::string& BulkDeleteRowsRequest::row_key_prefix() const {
  // @@protoc_insertion_point(field_get:google.bigtable.admin.table.v1.BulkDeleteRowsRequest.row_key_prefix)
  if (has_row_key_prefix()) {
    return target_.row_key_prefix_.GetNoArena();
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
inline void BulkDeleteRowsRequest::set_row_key_prefix(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:google.bigtable.admin.table.v1.BulkDeleteRowsRequest.row_key_prefix)
  if (!has_row_key_prefix()) {
    clear_target();
    set_has_row_key_prefix();
    target_.row_key_prefix_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  target_.row_key_prefix_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.bigtable.admin.table.v1.BulkDeleteRowsRequest.row_key_prefix)
}
#if LANG_CXX11
inline void BulkDeleteRowsRequest::set_row_key_prefix(::std::string&& value) {
  // @@protoc_insertion_point(field_set:google.bigtable.admin.table.v1.BulkDeleteRowsRequest.row_key_prefix)
  if (!has_row_key_prefix()) {
    clear_target();
    set_has_row_key_prefix();
    target_.row_key_prefix_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  target_.row_key_prefix_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.bigtable.admin.table.v1.BulkDeleteRowsRequest.row_key_prefix)
}
#endif
inline void BulkDeleteRowsRequest::set_row_key_prefix(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  if (!has_row_key_prefix()) {
    clear_target();
    set_has_row_key_prefix();
    target_.row_key_prefix_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  target_.row_key_prefix_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.bigtable.admin.table.v1.BulkDeleteRowsRequest.row_key_prefix)
}
inline void BulkDeleteRowsRequest::set_row_key_prefix(const void* value, size_t size) {
  if (!has_row_key_prefix()) {
    clear_target();
    set_has_row_key_prefix();
    target_.row_key_prefix_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  target_.row_key_prefix_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.bigtable.admin.table.v1.BulkDeleteRowsRequest.row_key_prefix)
}
inline ::std::string* BulkDeleteRowsRequest::mutable_row_key_prefix() {
  if (!has_row_key_prefix()) {
    clear_target();
    set_has_row_key_prefix();
    target_.row_key_prefix_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:google.bigtable.admin.table.v1.BulkDeleteRowsRequest.row_key_prefix)
  return target_.row_key_prefix_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BulkDeleteRowsRequest::release_row_key_prefix() {
  // @@protoc_insertion_point(field_release:google.bigtable.admin.table.v1.BulkDeleteRowsRequest.row_key_prefix)
  if (has_row_key_prefix()) {
    clear_has_target();
    return target_.row_key_prefix_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
inline void BulkDeleteRowsRequest::set_allocated_row_key_prefix(::std::string* row_key_prefix) {
  if (!has_row_key_prefix()) {
    target_.row_key_prefix_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_target();
  if (row_key_prefix != NULL) {
    set_has_row_key_prefix();
    target_.row_key_prefix_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        row_key_prefix);
  }
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.admin.table.v1.BulkDeleteRowsRequest.row_key_prefix)
}

// bool delete_all_data_from_table = 3;
inline bool BulkDeleteRowsRequest::has_delete_all_data_from_table() const {
  return target_case() == kDeleteAllDataFromTable;
}
inline void BulkDeleteRowsRequest::set_has_delete_all_data_from_table() {
  _oneof_case_[0] = kDeleteAllDataFromTable;
}
inline void BulkDeleteRowsRequest::clear_delete_all_data_from_table() {
  if (has_delete_all_data_from_table()) {
    target_.delete_all_data_from_table_ = false;
    clear_has_target();
  }
}
inline bool BulkDeleteRowsRequest::delete_all_data_from_table() const {
  // @@protoc_insertion_point(field_get:google.bigtable.admin.table.v1.BulkDeleteRowsRequest.delete_all_data_from_table)
  if (has_delete_all_data_from_table()) {
    return target_.delete_all_data_from_table_;
  }
  return false;
}
inline void BulkDeleteRowsRequest::set_delete_all_data_from_table(bool value) {
  if (!has_delete_all_data_from_table()) {
    clear_target();
    set_has_delete_all_data_from_table();
  }
  target_.delete_all_data_from_table_ = value;
  // @@protoc_insertion_point(field_set:google.bigtable.admin.table.v1.BulkDeleteRowsRequest.delete_all_data_from_table)
}

inline bool BulkDeleteRowsRequest::has_target() const {
  return target_case() != TARGET_NOT_SET;
}
inline void BulkDeleteRowsRequest::clear_has_target() {
  _oneof_case_[0] = TARGET_NOT_SET;
}
inline BulkDeleteRowsRequest::TargetCase BulkDeleteRowsRequest::target_case() const {
  return BulkDeleteRowsRequest::TargetCase(_oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace table
}  // namespace admin
}  // namespace bigtable
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_google_2fbigtable_2fadmin_2ftable_2fv1_2fbigtable_5ftable_5fservice_5fmessages_2eproto__INCLUDED
