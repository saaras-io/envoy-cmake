// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: google/devtools/build/v1/publish_build_event.proto

#include "google/devtools/build/v1/publish_build_event.pb.h"
#include "google/devtools/build/v1/publish_build_event.grpc.pb.h"

#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace google {
namespace devtools {
namespace build {
namespace v1 {

static const char* PublishBuildEvent_method_names[] = {
  "/google.devtools.build.v1.PublishBuildEvent/PublishLifecycleEvent",
  "/google.devtools.build.v1.PublishBuildEvent/PublishBuildToolEventStream",
};

std::unique_ptr< PublishBuildEvent::Stub> PublishBuildEvent::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< PublishBuildEvent::Stub> stub(new PublishBuildEvent::Stub(channel));
  return stub;
}

PublishBuildEvent::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_PublishLifecycleEvent_(PublishBuildEvent_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_PublishBuildToolEventStream_(PublishBuildEvent_method_names[1], ::grpc::internal::RpcMethod::BIDI_STREAMING, channel)
  {}

::grpc::Status PublishBuildEvent::Stub::PublishLifecycleEvent(::grpc::ClientContext* context, const ::google::devtools::build::v1::PublishLifecycleEventRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_PublishLifecycleEvent_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* PublishBuildEvent::Stub::AsyncPublishLifecycleEventRaw(::grpc::ClientContext* context, const ::google::devtools::build::v1::PublishLifecycleEventRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::protobuf::Empty>::Create(channel_.get(), cq, rpcmethod_PublishLifecycleEvent_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* PublishBuildEvent::Stub::PrepareAsyncPublishLifecycleEventRaw(::grpc::ClientContext* context, const ::google::devtools::build::v1::PublishLifecycleEventRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::protobuf::Empty>::Create(channel_.get(), cq, rpcmethod_PublishLifecycleEvent_, context, request, false);
}

::grpc::ClientReaderWriter< ::google::devtools::build::v1::OrderedBuildEvent, ::google::devtools::build::v1::PublishBuildToolEventStreamResponse>* PublishBuildEvent::Stub::PublishBuildToolEventStreamRaw(::grpc::ClientContext* context) {
  return ::grpc::internal::ClientReaderWriterFactory< ::google::devtools::build::v1::OrderedBuildEvent, ::google::devtools::build::v1::PublishBuildToolEventStreamResponse>::Create(channel_.get(), rpcmethod_PublishBuildToolEventStream_, context);
}

::grpc::ClientAsyncReaderWriter< ::google::devtools::build::v1::OrderedBuildEvent, ::google::devtools::build::v1::PublishBuildToolEventStreamResponse>* PublishBuildEvent::Stub::AsyncPublishBuildToolEventStreamRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderWriterFactory< ::google::devtools::build::v1::OrderedBuildEvent, ::google::devtools::build::v1::PublishBuildToolEventStreamResponse>::Create(channel_.get(), cq, rpcmethod_PublishBuildToolEventStream_, context, true, tag);
}

::grpc::ClientAsyncReaderWriter< ::google::devtools::build::v1::OrderedBuildEvent, ::google::devtools::build::v1::PublishBuildToolEventStreamResponse>* PublishBuildEvent::Stub::PrepareAsyncPublishBuildToolEventStreamRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderWriterFactory< ::google::devtools::build::v1::OrderedBuildEvent, ::google::devtools::build::v1::PublishBuildToolEventStreamResponse>::Create(channel_.get(), cq, rpcmethod_PublishBuildToolEventStream_, context, false, nullptr);
}

PublishBuildEvent::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      PublishBuildEvent_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< PublishBuildEvent::Service, ::google::devtools::build::v1::PublishLifecycleEventRequest, ::google::protobuf::Empty>(
          std::mem_fn(&PublishBuildEvent::Service::PublishLifecycleEvent), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      PublishBuildEvent_method_names[1],
      ::grpc::internal::RpcMethod::BIDI_STREAMING,
      new ::grpc::internal::BidiStreamingHandler< PublishBuildEvent::Service, ::google::devtools::build::v1::OrderedBuildEvent, ::google::devtools::build::v1::PublishBuildToolEventStreamResponse>(
          std::mem_fn(&PublishBuildEvent::Service::PublishBuildToolEventStream), this)));
}

PublishBuildEvent::Service::~Service() {
}

::grpc::Status PublishBuildEvent::Service::PublishLifecycleEvent(::grpc::ServerContext* context, const ::google::devtools::build::v1::PublishLifecycleEventRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status PublishBuildEvent::Service::PublishBuildToolEventStream(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::google::devtools::build::v1::PublishBuildToolEventStreamResponse, ::google::devtools::build::v1::OrderedBuildEvent>* stream) {
  (void) context;
  (void) stream;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace google
}  // namespace devtools
}  // namespace build
}  // namespace v1

