// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: google/genomics/v1/datasets.proto

#include "google/genomics/v1/datasets.pb.h"
#include "google/genomics/v1/datasets.grpc.pb.h"

#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace google {
namespace genomics {
namespace v1 {

static const char* DatasetServiceV1_method_names[] = {
  "/google.genomics.v1.DatasetServiceV1/ListDatasets",
  "/google.genomics.v1.DatasetServiceV1/CreateDataset",
  "/google.genomics.v1.DatasetServiceV1/GetDataset",
  "/google.genomics.v1.DatasetServiceV1/UpdateDataset",
  "/google.genomics.v1.DatasetServiceV1/DeleteDataset",
  "/google.genomics.v1.DatasetServiceV1/UndeleteDataset",
  "/google.genomics.v1.DatasetServiceV1/SetIamPolicy",
  "/google.genomics.v1.DatasetServiceV1/GetIamPolicy",
  "/google.genomics.v1.DatasetServiceV1/TestIamPermissions",
};

std::unique_ptr< DatasetServiceV1::Stub> DatasetServiceV1::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< DatasetServiceV1::Stub> stub(new DatasetServiceV1::Stub(channel));
  return stub;
}

DatasetServiceV1::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_ListDatasets_(DatasetServiceV1_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CreateDataset_(DatasetServiceV1_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetDataset_(DatasetServiceV1_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UpdateDataset_(DatasetServiceV1_method_names[3], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DeleteDataset_(DatasetServiceV1_method_names[4], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UndeleteDataset_(DatasetServiceV1_method_names[5], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetIamPolicy_(DatasetServiceV1_method_names[6], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetIamPolicy_(DatasetServiceV1_method_names[7], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_TestIamPermissions_(DatasetServiceV1_method_names[8], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status DatasetServiceV1::Stub::ListDatasets(::grpc::ClientContext* context, const ::google::genomics::v1::ListDatasetsRequest& request, ::google::genomics::v1::ListDatasetsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_ListDatasets_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::google::genomics::v1::ListDatasetsResponse>* DatasetServiceV1::Stub::AsyncListDatasetsRaw(::grpc::ClientContext* context, const ::google::genomics::v1::ListDatasetsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::genomics::v1::ListDatasetsResponse>::Create(channel_.get(), cq, rpcmethod_ListDatasets_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::google::genomics::v1::ListDatasetsResponse>* DatasetServiceV1::Stub::PrepareAsyncListDatasetsRaw(::grpc::ClientContext* context, const ::google::genomics::v1::ListDatasetsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::genomics::v1::ListDatasetsResponse>::Create(channel_.get(), cq, rpcmethod_ListDatasets_, context, request, false);
}

::grpc::Status DatasetServiceV1::Stub::CreateDataset(::grpc::ClientContext* context, const ::google::genomics::v1::CreateDatasetRequest& request, ::google::genomics::v1::Dataset* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_CreateDataset_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::google::genomics::v1::Dataset>* DatasetServiceV1::Stub::AsyncCreateDatasetRaw(::grpc::ClientContext* context, const ::google::genomics::v1::CreateDatasetRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::genomics::v1::Dataset>::Create(channel_.get(), cq, rpcmethod_CreateDataset_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::google::genomics::v1::Dataset>* DatasetServiceV1::Stub::PrepareAsyncCreateDatasetRaw(::grpc::ClientContext* context, const ::google::genomics::v1::CreateDatasetRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::genomics::v1::Dataset>::Create(channel_.get(), cq, rpcmethod_CreateDataset_, context, request, false);
}

::grpc::Status DatasetServiceV1::Stub::GetDataset(::grpc::ClientContext* context, const ::google::genomics::v1::GetDatasetRequest& request, ::google::genomics::v1::Dataset* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetDataset_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::google::genomics::v1::Dataset>* DatasetServiceV1::Stub::AsyncGetDatasetRaw(::grpc::ClientContext* context, const ::google::genomics::v1::GetDatasetRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::genomics::v1::Dataset>::Create(channel_.get(), cq, rpcmethod_GetDataset_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::google::genomics::v1::Dataset>* DatasetServiceV1::Stub::PrepareAsyncGetDatasetRaw(::grpc::ClientContext* context, const ::google::genomics::v1::GetDatasetRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::genomics::v1::Dataset>::Create(channel_.get(), cq, rpcmethod_GetDataset_, context, request, false);
}

::grpc::Status DatasetServiceV1::Stub::UpdateDataset(::grpc::ClientContext* context, const ::google::genomics::v1::UpdateDatasetRequest& request, ::google::genomics::v1::Dataset* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_UpdateDataset_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::google::genomics::v1::Dataset>* DatasetServiceV1::Stub::AsyncUpdateDatasetRaw(::grpc::ClientContext* context, const ::google::genomics::v1::UpdateDatasetRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::genomics::v1::Dataset>::Create(channel_.get(), cq, rpcmethod_UpdateDataset_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::google::genomics::v1::Dataset>* DatasetServiceV1::Stub::PrepareAsyncUpdateDatasetRaw(::grpc::ClientContext* context, const ::google::genomics::v1::UpdateDatasetRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::genomics::v1::Dataset>::Create(channel_.get(), cq, rpcmethod_UpdateDataset_, context, request, false);
}

::grpc::Status DatasetServiceV1::Stub::DeleteDataset(::grpc::ClientContext* context, const ::google::genomics::v1::DeleteDatasetRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_DeleteDataset_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* DatasetServiceV1::Stub::AsyncDeleteDatasetRaw(::grpc::ClientContext* context, const ::google::genomics::v1::DeleteDatasetRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::protobuf::Empty>::Create(channel_.get(), cq, rpcmethod_DeleteDataset_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* DatasetServiceV1::Stub::PrepareAsyncDeleteDatasetRaw(::grpc::ClientContext* context, const ::google::genomics::v1::DeleteDatasetRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::protobuf::Empty>::Create(channel_.get(), cq, rpcmethod_DeleteDataset_, context, request, false);
}

::grpc::Status DatasetServiceV1::Stub::UndeleteDataset(::grpc::ClientContext* context, const ::google::genomics::v1::UndeleteDatasetRequest& request, ::google::genomics::v1::Dataset* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_UndeleteDataset_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::google::genomics::v1::Dataset>* DatasetServiceV1::Stub::AsyncUndeleteDatasetRaw(::grpc::ClientContext* context, const ::google::genomics::v1::UndeleteDatasetRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::genomics::v1::Dataset>::Create(channel_.get(), cq, rpcmethod_UndeleteDataset_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::google::genomics::v1::Dataset>* DatasetServiceV1::Stub::PrepareAsyncUndeleteDatasetRaw(::grpc::ClientContext* context, const ::google::genomics::v1::UndeleteDatasetRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::genomics::v1::Dataset>::Create(channel_.get(), cq, rpcmethod_UndeleteDataset_, context, request, false);
}

::grpc::Status DatasetServiceV1::Stub::SetIamPolicy(::grpc::ClientContext* context, const ::google::iam::v1::SetIamPolicyRequest& request, ::google::iam::v1::Policy* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_SetIamPolicy_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::google::iam::v1::Policy>* DatasetServiceV1::Stub::AsyncSetIamPolicyRaw(::grpc::ClientContext* context, const ::google::iam::v1::SetIamPolicyRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::iam::v1::Policy>::Create(channel_.get(), cq, rpcmethod_SetIamPolicy_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::google::iam::v1::Policy>* DatasetServiceV1::Stub::PrepareAsyncSetIamPolicyRaw(::grpc::ClientContext* context, const ::google::iam::v1::SetIamPolicyRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::iam::v1::Policy>::Create(channel_.get(), cq, rpcmethod_SetIamPolicy_, context, request, false);
}

::grpc::Status DatasetServiceV1::Stub::GetIamPolicy(::grpc::ClientContext* context, const ::google::iam::v1::GetIamPolicyRequest& request, ::google::iam::v1::Policy* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetIamPolicy_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::google::iam::v1::Policy>* DatasetServiceV1::Stub::AsyncGetIamPolicyRaw(::grpc::ClientContext* context, const ::google::iam::v1::GetIamPolicyRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::iam::v1::Policy>::Create(channel_.get(), cq, rpcmethod_GetIamPolicy_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::google::iam::v1::Policy>* DatasetServiceV1::Stub::PrepareAsyncGetIamPolicyRaw(::grpc::ClientContext* context, const ::google::iam::v1::GetIamPolicyRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::iam::v1::Policy>::Create(channel_.get(), cq, rpcmethod_GetIamPolicy_, context, request, false);
}

::grpc::Status DatasetServiceV1::Stub::TestIamPermissions(::grpc::ClientContext* context, const ::google::iam::v1::TestIamPermissionsRequest& request, ::google::iam::v1::TestIamPermissionsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_TestIamPermissions_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::google::iam::v1::TestIamPermissionsResponse>* DatasetServiceV1::Stub::AsyncTestIamPermissionsRaw(::grpc::ClientContext* context, const ::google::iam::v1::TestIamPermissionsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::iam::v1::TestIamPermissionsResponse>::Create(channel_.get(), cq, rpcmethod_TestIamPermissions_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::google::iam::v1::TestIamPermissionsResponse>* DatasetServiceV1::Stub::PrepareAsyncTestIamPermissionsRaw(::grpc::ClientContext* context, const ::google::iam::v1::TestIamPermissionsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::iam::v1::TestIamPermissionsResponse>::Create(channel_.get(), cq, rpcmethod_TestIamPermissions_, context, request, false);
}

DatasetServiceV1::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DatasetServiceV1_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DatasetServiceV1::Service, ::google::genomics::v1::ListDatasetsRequest, ::google::genomics::v1::ListDatasetsResponse>(
          std::mem_fn(&DatasetServiceV1::Service::ListDatasets), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DatasetServiceV1_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DatasetServiceV1::Service, ::google::genomics::v1::CreateDatasetRequest, ::google::genomics::v1::Dataset>(
          std::mem_fn(&DatasetServiceV1::Service::CreateDataset), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DatasetServiceV1_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DatasetServiceV1::Service, ::google::genomics::v1::GetDatasetRequest, ::google::genomics::v1::Dataset>(
          std::mem_fn(&DatasetServiceV1::Service::GetDataset), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DatasetServiceV1_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DatasetServiceV1::Service, ::google::genomics::v1::UpdateDatasetRequest, ::google::genomics::v1::Dataset>(
          std::mem_fn(&DatasetServiceV1::Service::UpdateDataset), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DatasetServiceV1_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DatasetServiceV1::Service, ::google::genomics::v1::DeleteDatasetRequest, ::google::protobuf::Empty>(
          std::mem_fn(&DatasetServiceV1::Service::DeleteDataset), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DatasetServiceV1_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DatasetServiceV1::Service, ::google::genomics::v1::UndeleteDatasetRequest, ::google::genomics::v1::Dataset>(
          std::mem_fn(&DatasetServiceV1::Service::UndeleteDataset), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DatasetServiceV1_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DatasetServiceV1::Service, ::google::iam::v1::SetIamPolicyRequest, ::google::iam::v1::Policy>(
          std::mem_fn(&DatasetServiceV1::Service::SetIamPolicy), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DatasetServiceV1_method_names[7],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DatasetServiceV1::Service, ::google::iam::v1::GetIamPolicyRequest, ::google::iam::v1::Policy>(
          std::mem_fn(&DatasetServiceV1::Service::GetIamPolicy), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DatasetServiceV1_method_names[8],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DatasetServiceV1::Service, ::google::iam::v1::TestIamPermissionsRequest, ::google::iam::v1::TestIamPermissionsResponse>(
          std::mem_fn(&DatasetServiceV1::Service::TestIamPermissions), this)));
}

DatasetServiceV1::Service::~Service() {
}

::grpc::Status DatasetServiceV1::Service::ListDatasets(::grpc::ServerContext* context, const ::google::genomics::v1::ListDatasetsRequest* request, ::google::genomics::v1::ListDatasetsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DatasetServiceV1::Service::CreateDataset(::grpc::ServerContext* context, const ::google::genomics::v1::CreateDatasetRequest* request, ::google::genomics::v1::Dataset* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DatasetServiceV1::Service::GetDataset(::grpc::ServerContext* context, const ::google::genomics::v1::GetDatasetRequest* request, ::google::genomics::v1::Dataset* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DatasetServiceV1::Service::UpdateDataset(::grpc::ServerContext* context, const ::google::genomics::v1::UpdateDatasetRequest* request, ::google::genomics::v1::Dataset* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DatasetServiceV1::Service::DeleteDataset(::grpc::ServerContext* context, const ::google::genomics::v1::DeleteDatasetRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DatasetServiceV1::Service::UndeleteDataset(::grpc::ServerContext* context, const ::google::genomics::v1::UndeleteDatasetRequest* request, ::google::genomics::v1::Dataset* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DatasetServiceV1::Service::SetIamPolicy(::grpc::ServerContext* context, const ::google::iam::v1::SetIamPolicyRequest* request, ::google::iam::v1::Policy* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DatasetServiceV1::Service::GetIamPolicy(::grpc::ServerContext* context, const ::google::iam::v1::GetIamPolicyRequest* request, ::google::iam::v1::Policy* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DatasetServiceV1::Service::TestIamPermissions(::grpc::ServerContext* context, const ::google::iam::v1::TestIamPermissionsRequest* request, ::google::iam::v1::TestIamPermissionsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace google
}  // namespace genomics
}  // namespace v1

