// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/cloud/dataproc/v1/clusters.proto

#ifndef PROTOBUF_google_2fcloud_2fdataproc_2fv1_2fclusters_2eproto__INCLUDED
#define PROTOBUF_google_2fcloud_2fdataproc_2fv1_2fclusters_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "google/api/annotations.pb.h"
#include "google/cloud/dataproc/v1/operations.pb.h"
#include "google/longrunning/operations.pb.h"
#include <google/protobuf/duration.pb.h>
#include <google/protobuf/field_mask.pb.h>
#include <google/protobuf/timestamp.pb.h>
// @@protoc_insertion_point(includes)

namespace protobuf_google_2fcloud_2fdataproc_2fv1_2fclusters_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[19];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsClusterImpl();
void InitDefaultsCluster();
void InitDefaultsClusterConfigImpl();
void InitDefaultsClusterConfig();
void InitDefaultsGceClusterConfig_MetadataEntry_DoNotUseImpl();
void InitDefaultsGceClusterConfig_MetadataEntry_DoNotUse();
void InitDefaultsGceClusterConfigImpl();
void InitDefaultsGceClusterConfig();
void InitDefaultsInstanceGroupConfigImpl();
void InitDefaultsInstanceGroupConfig();
void InitDefaultsManagedGroupConfigImpl();
void InitDefaultsManagedGroupConfig();
void InitDefaultsDiskConfigImpl();
void InitDefaultsDiskConfig();
void InitDefaultsNodeInitializationActionImpl();
void InitDefaultsNodeInitializationAction();
void InitDefaultsClusterStatusImpl();
void InitDefaultsClusterStatus();
void InitDefaultsSoftwareConfig_PropertiesEntry_DoNotUseImpl();
void InitDefaultsSoftwareConfig_PropertiesEntry_DoNotUse();
void InitDefaultsSoftwareConfigImpl();
void InitDefaultsSoftwareConfig();
void InitDefaultsCreateClusterRequestImpl();
void InitDefaultsCreateClusterRequest();
void InitDefaultsUpdateClusterRequestImpl();
void InitDefaultsUpdateClusterRequest();
void InitDefaultsDeleteClusterRequestImpl();
void InitDefaultsDeleteClusterRequest();
void InitDefaultsGetClusterRequestImpl();
void InitDefaultsGetClusterRequest();
void InitDefaultsListClustersRequestImpl();
void InitDefaultsListClustersRequest();
void InitDefaultsListClustersResponseImpl();
void InitDefaultsListClustersResponse();
void InitDefaultsDiagnoseClusterRequestImpl();
void InitDefaultsDiagnoseClusterRequest();
void InitDefaultsDiagnoseClusterResultsImpl();
void InitDefaultsDiagnoseClusterResults();
inline void InitDefaults() {
  InitDefaultsCluster();
  InitDefaultsClusterConfig();
  InitDefaultsGceClusterConfig_MetadataEntry_DoNotUse();
  InitDefaultsGceClusterConfig();
  InitDefaultsInstanceGroupConfig();
  InitDefaultsManagedGroupConfig();
  InitDefaultsDiskConfig();
  InitDefaultsNodeInitializationAction();
  InitDefaultsClusterStatus();
  InitDefaultsSoftwareConfig_PropertiesEntry_DoNotUse();
  InitDefaultsSoftwareConfig();
  InitDefaultsCreateClusterRequest();
  InitDefaultsUpdateClusterRequest();
  InitDefaultsDeleteClusterRequest();
  InitDefaultsGetClusterRequest();
  InitDefaultsListClustersRequest();
  InitDefaultsListClustersResponse();
  InitDefaultsDiagnoseClusterRequest();
  InitDefaultsDiagnoseClusterResults();
}
}  // namespace protobuf_google_2fcloud_2fdataproc_2fv1_2fclusters_2eproto
namespace google {
namespace cloud {
namespace dataproc {
namespace v1 {
class Cluster;
class ClusterDefaultTypeInternal;
extern ClusterDefaultTypeInternal _Cluster_default_instance_;
class ClusterConfig;
class ClusterConfigDefaultTypeInternal;
extern ClusterConfigDefaultTypeInternal _ClusterConfig_default_instance_;
class ClusterStatus;
class ClusterStatusDefaultTypeInternal;
extern ClusterStatusDefaultTypeInternal _ClusterStatus_default_instance_;
class CreateClusterRequest;
class CreateClusterRequestDefaultTypeInternal;
extern CreateClusterRequestDefaultTypeInternal _CreateClusterRequest_default_instance_;
class DeleteClusterRequest;
class DeleteClusterRequestDefaultTypeInternal;
extern DeleteClusterRequestDefaultTypeInternal _DeleteClusterRequest_default_instance_;
class DiagnoseClusterRequest;
class DiagnoseClusterRequestDefaultTypeInternal;
extern DiagnoseClusterRequestDefaultTypeInternal _DiagnoseClusterRequest_default_instance_;
class DiagnoseClusterResults;
class DiagnoseClusterResultsDefaultTypeInternal;
extern DiagnoseClusterResultsDefaultTypeInternal _DiagnoseClusterResults_default_instance_;
class DiskConfig;
class DiskConfigDefaultTypeInternal;
extern DiskConfigDefaultTypeInternal _DiskConfig_default_instance_;
class GceClusterConfig;
class GceClusterConfigDefaultTypeInternal;
extern GceClusterConfigDefaultTypeInternal _GceClusterConfig_default_instance_;
class GceClusterConfig_MetadataEntry_DoNotUse;
class GceClusterConfig_MetadataEntry_DoNotUseDefaultTypeInternal;
extern GceClusterConfig_MetadataEntry_DoNotUseDefaultTypeInternal _GceClusterConfig_MetadataEntry_DoNotUse_default_instance_;
class GetClusterRequest;
class GetClusterRequestDefaultTypeInternal;
extern GetClusterRequestDefaultTypeInternal _GetClusterRequest_default_instance_;
class InstanceGroupConfig;
class InstanceGroupConfigDefaultTypeInternal;
extern InstanceGroupConfigDefaultTypeInternal _InstanceGroupConfig_default_instance_;
class ListClustersRequest;
class ListClustersRequestDefaultTypeInternal;
extern ListClustersRequestDefaultTypeInternal _ListClustersRequest_default_instance_;
class ListClustersResponse;
class ListClustersResponseDefaultTypeInternal;
extern ListClustersResponseDefaultTypeInternal _ListClustersResponse_default_instance_;
class ManagedGroupConfig;
class ManagedGroupConfigDefaultTypeInternal;
extern ManagedGroupConfigDefaultTypeInternal _ManagedGroupConfig_default_instance_;
class NodeInitializationAction;
class NodeInitializationActionDefaultTypeInternal;
extern NodeInitializationActionDefaultTypeInternal _NodeInitializationAction_default_instance_;
class SoftwareConfig;
class SoftwareConfigDefaultTypeInternal;
extern SoftwareConfigDefaultTypeInternal _SoftwareConfig_default_instance_;
class SoftwareConfig_PropertiesEntry_DoNotUse;
class SoftwareConfig_PropertiesEntry_DoNotUseDefaultTypeInternal;
extern SoftwareConfig_PropertiesEntry_DoNotUseDefaultTypeInternal _SoftwareConfig_PropertiesEntry_DoNotUse_default_instance_;
class UpdateClusterRequest;
class UpdateClusterRequestDefaultTypeInternal;
extern UpdateClusterRequestDefaultTypeInternal _UpdateClusterRequest_default_instance_;
}  // namespace v1
}  // namespace dataproc
}  // namespace cloud
}  // namespace google
namespace google {
namespace cloud {
namespace dataproc {
namespace v1 {

enum ClusterStatus_State {
  ClusterStatus_State_UNKNOWN = 0,
  ClusterStatus_State_CREATING = 1,
  ClusterStatus_State_RUNNING = 2,
  ClusterStatus_State_ERROR = 3,
  ClusterStatus_State_DELETING = 4,
  ClusterStatus_State_UPDATING = 5,
  ClusterStatus_State_ClusterStatus_State_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  ClusterStatus_State_ClusterStatus_State_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool ClusterStatus_State_IsValid(int value);
const ClusterStatus_State ClusterStatus_State_State_MIN = ClusterStatus_State_UNKNOWN;
const ClusterStatus_State ClusterStatus_State_State_MAX = ClusterStatus_State_UPDATING;
const int ClusterStatus_State_State_ARRAYSIZE = ClusterStatus_State_State_MAX + 1;

const ::google::protobuf::EnumDescriptor* ClusterStatus_State_descriptor();
inline const ::std::string& ClusterStatus_State_Name(ClusterStatus_State value) {
  return ::google::protobuf::internal::NameOfEnum(
    ClusterStatus_State_descriptor(), value);
}
inline bool ClusterStatus_State_Parse(
    const ::std::string& name, ClusterStatus_State* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ClusterStatus_State>(
    ClusterStatus_State_descriptor(), name, value);
}
// ===================================================================

class Cluster : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.cloud.dataproc.v1.Cluster) */ {
 public:
  Cluster();
  virtual ~Cluster();

  Cluster(const Cluster& from);

  inline Cluster& operator=(const Cluster& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Cluster(Cluster&& from) noexcept
    : Cluster() {
    *this = ::std::move(from);
  }

  inline Cluster& operator=(Cluster&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Cluster& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Cluster* internal_default_instance() {
    return reinterpret_cast<const Cluster*>(
               &_Cluster_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(Cluster* other);
  friend void swap(Cluster& a, Cluster& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Cluster* New() const PROTOBUF_FINAL { return New(NULL); }

  Cluster* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Cluster& from);
  void MergeFrom(const Cluster& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Cluster* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .google.cloud.dataproc.v1.ClusterStatus status_history = 7;
  int status_history_size() const;
  void clear_status_history();
  static const int kStatusHistoryFieldNumber = 7;
  const ::google::cloud::dataproc::v1::ClusterStatus& status_history(int index) const;
  ::google::cloud::dataproc::v1::ClusterStatus* mutable_status_history(int index);
  ::google::cloud::dataproc::v1::ClusterStatus* add_status_history();
  ::google::protobuf::RepeatedPtrField< ::google::cloud::dataproc::v1::ClusterStatus >*
      mutable_status_history();
  const ::google::protobuf::RepeatedPtrField< ::google::cloud::dataproc::v1::ClusterStatus >&
      status_history() const;

  // string project_id = 1;
  void clear_project_id();
  static const int kProjectIdFieldNumber = 1;
  const ::std::string& project_id() const;
  void set_project_id(const ::std::string& value);
  #if LANG_CXX11
  void set_project_id(::std::string&& value);
  #endif
  void set_project_id(const char* value);
  void set_project_id(const char* value, size_t size);
  ::std::string* mutable_project_id();
  ::std::string* release_project_id();
  void set_allocated_project_id(::std::string* project_id);

  // string cluster_name = 2;
  void clear_cluster_name();
  static const int kClusterNameFieldNumber = 2;
  const ::std::string& cluster_name() const;
  void set_cluster_name(const ::std::string& value);
  #if LANG_CXX11
  void set_cluster_name(::std::string&& value);
  #endif
  void set_cluster_name(const char* value);
  void set_cluster_name(const char* value, size_t size);
  ::std::string* mutable_cluster_name();
  ::std::string* release_cluster_name();
  void set_allocated_cluster_name(::std::string* cluster_name);

  // string cluster_uuid = 6;
  void clear_cluster_uuid();
  static const int kClusterUuidFieldNumber = 6;
  const ::std::string& cluster_uuid() const;
  void set_cluster_uuid(const ::std::string& value);
  #if LANG_CXX11
  void set_cluster_uuid(::std::string&& value);
  #endif
  void set_cluster_uuid(const char* value);
  void set_cluster_uuid(const char* value, size_t size);
  ::std::string* mutable_cluster_uuid();
  ::std::string* release_cluster_uuid();
  void set_allocated_cluster_uuid(::std::string* cluster_uuid);

  // .google.cloud.dataproc.v1.ClusterConfig config = 3;
  bool has_config() const;
  void clear_config();
  static const int kConfigFieldNumber = 3;
  const ::google::cloud::dataproc::v1::ClusterConfig& config() const;
  ::google::cloud::dataproc::v1::ClusterConfig* release_config();
  ::google::cloud::dataproc::v1::ClusterConfig* mutable_config();
  void set_allocated_config(::google::cloud::dataproc::v1::ClusterConfig* config);

  // .google.cloud.dataproc.v1.ClusterStatus status = 4;
  bool has_status() const;
  void clear_status();
  static const int kStatusFieldNumber = 4;
  const ::google::cloud::dataproc::v1::ClusterStatus& status() const;
  ::google::cloud::dataproc::v1::ClusterStatus* release_status();
  ::google::cloud::dataproc::v1::ClusterStatus* mutable_status();
  void set_allocated_status(::google::cloud::dataproc::v1::ClusterStatus* status);

  // @@protoc_insertion_point(class_scope:google.cloud.dataproc.v1.Cluster)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::google::cloud::dataproc::v1::ClusterStatus > status_history_;
  ::google::protobuf::internal::ArenaStringPtr project_id_;
  ::google::protobuf::internal::ArenaStringPtr cluster_name_;
  ::google::protobuf::internal::ArenaStringPtr cluster_uuid_;
  ::google::cloud::dataproc::v1::ClusterConfig* config_;
  ::google::cloud::dataproc::v1::ClusterStatus* status_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fcloud_2fdataproc_2fv1_2fclusters_2eproto::TableStruct;
  friend void ::protobuf_google_2fcloud_2fdataproc_2fv1_2fclusters_2eproto::InitDefaultsClusterImpl();
};
// -------------------------------------------------------------------

class ClusterConfig : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.cloud.dataproc.v1.ClusterConfig) */ {
 public:
  ClusterConfig();
  virtual ~ClusterConfig();

  ClusterConfig(const ClusterConfig& from);

  inline ClusterConfig& operator=(const ClusterConfig& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ClusterConfig(ClusterConfig&& from) noexcept
    : ClusterConfig() {
    *this = ::std::move(from);
  }

  inline ClusterConfig& operator=(ClusterConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ClusterConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ClusterConfig* internal_default_instance() {
    return reinterpret_cast<const ClusterConfig*>(
               &_ClusterConfig_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(ClusterConfig* other);
  friend void swap(ClusterConfig& a, ClusterConfig& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ClusterConfig* New() const PROTOBUF_FINAL { return New(NULL); }

  ClusterConfig* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ClusterConfig& from);
  void MergeFrom(const ClusterConfig& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ClusterConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .google.cloud.dataproc.v1.NodeInitializationAction initialization_actions = 11;
  int initialization_actions_size() const;
  void clear_initialization_actions();
  static const int kInitializationActionsFieldNumber = 11;
  const ::google::cloud::dataproc::v1::NodeInitializationAction& initialization_actions(int index) const;
  ::google::cloud::dataproc::v1::NodeInitializationAction* mutable_initialization_actions(int index);
  ::google::cloud::dataproc::v1::NodeInitializationAction* add_initialization_actions();
  ::google::protobuf::RepeatedPtrField< ::google::cloud::dataproc::v1::NodeInitializationAction >*
      mutable_initialization_actions();
  const ::google::protobuf::RepeatedPtrField< ::google::cloud::dataproc::v1::NodeInitializationAction >&
      initialization_actions() const;

  // string config_bucket = 1;
  void clear_config_bucket();
  static const int kConfigBucketFieldNumber = 1;
  const ::std::string& config_bucket() const;
  void set_config_bucket(const ::std::string& value);
  #if LANG_CXX11
  void set_config_bucket(::std::string&& value);
  #endif
  void set_config_bucket(const char* value);
  void set_config_bucket(const char* value, size_t size);
  ::std::string* mutable_config_bucket();
  ::std::string* release_config_bucket();
  void set_allocated_config_bucket(::std::string* config_bucket);

  // .google.cloud.dataproc.v1.GceClusterConfig gce_cluster_config = 8;
  bool has_gce_cluster_config() const;
  void clear_gce_cluster_config();
  static const int kGceClusterConfigFieldNumber = 8;
  const ::google::cloud::dataproc::v1::GceClusterConfig& gce_cluster_config() const;
  ::google::cloud::dataproc::v1::GceClusterConfig* release_gce_cluster_config();
  ::google::cloud::dataproc::v1::GceClusterConfig* mutable_gce_cluster_config();
  void set_allocated_gce_cluster_config(::google::cloud::dataproc::v1::GceClusterConfig* gce_cluster_config);

  // .google.cloud.dataproc.v1.InstanceGroupConfig master_config = 9;
  bool has_master_config() const;
  void clear_master_config();
  static const int kMasterConfigFieldNumber = 9;
  const ::google::cloud::dataproc::v1::InstanceGroupConfig& master_config() const;
  ::google::cloud::dataproc::v1::InstanceGroupConfig* release_master_config();
  ::google::cloud::dataproc::v1::InstanceGroupConfig* mutable_master_config();
  void set_allocated_master_config(::google::cloud::dataproc::v1::InstanceGroupConfig* master_config);

  // .google.cloud.dataproc.v1.InstanceGroupConfig worker_config = 10;
  bool has_worker_config() const;
  void clear_worker_config();
  static const int kWorkerConfigFieldNumber = 10;
  const ::google::cloud::dataproc::v1::InstanceGroupConfig& worker_config() const;
  ::google::cloud::dataproc::v1::InstanceGroupConfig* release_worker_config();
  ::google::cloud::dataproc::v1::InstanceGroupConfig* mutable_worker_config();
  void set_allocated_worker_config(::google::cloud::dataproc::v1::InstanceGroupConfig* worker_config);

  // .google.cloud.dataproc.v1.InstanceGroupConfig secondary_worker_config = 12;
  bool has_secondary_worker_config() const;
  void clear_secondary_worker_config();
  static const int kSecondaryWorkerConfigFieldNumber = 12;
  const ::google::cloud::dataproc::v1::InstanceGroupConfig& secondary_worker_config() const;
  ::google::cloud::dataproc::v1::InstanceGroupConfig* release_secondary_worker_config();
  ::google::cloud::dataproc::v1::InstanceGroupConfig* mutable_secondary_worker_config();
  void set_allocated_secondary_worker_config(::google::cloud::dataproc::v1::InstanceGroupConfig* secondary_worker_config);

  // .google.cloud.dataproc.v1.SoftwareConfig software_config = 13;
  bool has_software_config() const;
  void clear_software_config();
  static const int kSoftwareConfigFieldNumber = 13;
  const ::google::cloud::dataproc::v1::SoftwareConfig& software_config() const;
  ::google::cloud::dataproc::v1::SoftwareConfig* release_software_config();
  ::google::cloud::dataproc::v1::SoftwareConfig* mutable_software_config();
  void set_allocated_software_config(::google::cloud::dataproc::v1::SoftwareConfig* software_config);

  // @@protoc_insertion_point(class_scope:google.cloud.dataproc.v1.ClusterConfig)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::google::cloud::dataproc::v1::NodeInitializationAction > initialization_actions_;
  ::google::protobuf::internal::ArenaStringPtr config_bucket_;
  ::google::cloud::dataproc::v1::GceClusterConfig* gce_cluster_config_;
  ::google::cloud::dataproc::v1::InstanceGroupConfig* master_config_;
  ::google::cloud::dataproc::v1::InstanceGroupConfig* worker_config_;
  ::google::cloud::dataproc::v1::InstanceGroupConfig* secondary_worker_config_;
  ::google::cloud::dataproc::v1::SoftwareConfig* software_config_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fcloud_2fdataproc_2fv1_2fclusters_2eproto::TableStruct;
  friend void ::protobuf_google_2fcloud_2fdataproc_2fv1_2fclusters_2eproto::InitDefaultsClusterConfigImpl();
};
// -------------------------------------------------------------------

class GceClusterConfig_MetadataEntry_DoNotUse : public ::google::protobuf::internal::MapEntry<GceClusterConfig_MetadataEntry_DoNotUse, 
    ::std::string, ::std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    0 > {
public:
  typedef ::google::protobuf::internal::MapEntry<GceClusterConfig_MetadataEntry_DoNotUse, 
    ::std::string, ::std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    0 > SuperType;
  GceClusterConfig_MetadataEntry_DoNotUse();
  GceClusterConfig_MetadataEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const GceClusterConfig_MetadataEntry_DoNotUse& other);
  static const GceClusterConfig_MetadataEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const GceClusterConfig_MetadataEntry_DoNotUse*>(&_GceClusterConfig_MetadataEntry_DoNotUse_default_instance_); }
  void MergeFrom(const ::google::protobuf::Message& other) PROTOBUF_FINAL;
  ::google::protobuf::Metadata GetMetadata() const;
};

// -------------------------------------------------------------------

class GceClusterConfig : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.cloud.dataproc.v1.GceClusterConfig) */ {
 public:
  GceClusterConfig();
  virtual ~GceClusterConfig();

  GceClusterConfig(const GceClusterConfig& from);

  inline GceClusterConfig& operator=(const GceClusterConfig& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GceClusterConfig(GceClusterConfig&& from) noexcept
    : GceClusterConfig() {
    *this = ::std::move(from);
  }

  inline GceClusterConfig& operator=(GceClusterConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GceClusterConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GceClusterConfig* internal_default_instance() {
    return reinterpret_cast<const GceClusterConfig*>(
               &_GceClusterConfig_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(GceClusterConfig* other);
  friend void swap(GceClusterConfig& a, GceClusterConfig& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GceClusterConfig* New() const PROTOBUF_FINAL { return New(NULL); }

  GceClusterConfig* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GceClusterConfig& from);
  void MergeFrom(const GceClusterConfig& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GceClusterConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // repeated string service_account_scopes = 3;
  int service_account_scopes_size() const;
  void clear_service_account_scopes();
  static const int kServiceAccountScopesFieldNumber = 3;
  const ::std::string& service_account_scopes(int index) const;
  ::std::string* mutable_service_account_scopes(int index);
  void set_service_account_scopes(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_service_account_scopes(int index, ::std::string&& value);
  #endif
  void set_service_account_scopes(int index, const char* value);
  void set_service_account_scopes(int index, const char* value, size_t size);
  ::std::string* add_service_account_scopes();
  void add_service_account_scopes(const ::std::string& value);
  #if LANG_CXX11
  void add_service_account_scopes(::std::string&& value);
  #endif
  void add_service_account_scopes(const char* value);
  void add_service_account_scopes(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& service_account_scopes() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_service_account_scopes();

  // repeated string tags = 4;
  int tags_size() const;
  void clear_tags();
  static const int kTagsFieldNumber = 4;
  const ::std::string& tags(int index) const;
  ::std::string* mutable_tags(int index);
  void set_tags(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_tags(int index, ::std::string&& value);
  #endif
  void set_tags(int index, const char* value);
  void set_tags(int index, const char* value, size_t size);
  ::std::string* add_tags();
  void add_tags(const ::std::string& value);
  #if LANG_CXX11
  void add_tags(::std::string&& value);
  #endif
  void add_tags(const char* value);
  void add_tags(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& tags() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_tags();

  // map<string, string> metadata = 5;
  int metadata_size() const;
  void clear_metadata();
  static const int kMetadataFieldNumber = 5;
  const ::google::protobuf::Map< ::std::string, ::std::string >&
      metadata() const;
  ::google::protobuf::Map< ::std::string, ::std::string >*
      mutable_metadata();

  // string zone_uri = 1;
  void clear_zone_uri();
  static const int kZoneUriFieldNumber = 1;
  const ::std::string& zone_uri() const;
  void set_zone_uri(const ::std::string& value);
  #if LANG_CXX11
  void set_zone_uri(::std::string&& value);
  #endif
  void set_zone_uri(const char* value);
  void set_zone_uri(const char* value, size_t size);
  ::std::string* mutable_zone_uri();
  ::std::string* release_zone_uri();
  void set_allocated_zone_uri(::std::string* zone_uri);

  // string network_uri = 2;
  void clear_network_uri();
  static const int kNetworkUriFieldNumber = 2;
  const ::std::string& network_uri() const;
  void set_network_uri(const ::std::string& value);
  #if LANG_CXX11
  void set_network_uri(::std::string&& value);
  #endif
  void set_network_uri(const char* value);
  void set_network_uri(const char* value, size_t size);
  ::std::string* mutable_network_uri();
  ::std::string* release_network_uri();
  void set_allocated_network_uri(::std::string* network_uri);

  // string subnetwork_uri = 6;
  void clear_subnetwork_uri();
  static const int kSubnetworkUriFieldNumber = 6;
  const ::std::string& subnetwork_uri() const;
  void set_subnetwork_uri(const ::std::string& value);
  #if LANG_CXX11
  void set_subnetwork_uri(::std::string&& value);
  #endif
  void set_subnetwork_uri(const char* value);
  void set_subnetwork_uri(const char* value, size_t size);
  ::std::string* mutable_subnetwork_uri();
  ::std::string* release_subnetwork_uri();
  void set_allocated_subnetwork_uri(::std::string* subnetwork_uri);

  // bool internal_ip_only = 7;
  void clear_internal_ip_only();
  static const int kInternalIpOnlyFieldNumber = 7;
  bool internal_ip_only() const;
  void set_internal_ip_only(bool value);

  // @@protoc_insertion_point(class_scope:google.cloud.dataproc.v1.GceClusterConfig)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> service_account_scopes_;
  ::google::protobuf::RepeatedPtrField< ::std::string> tags_;
  ::google::protobuf::internal::MapField<
      GceClusterConfig_MetadataEntry_DoNotUse,
      ::std::string, ::std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      0 > metadata_;
  ::google::protobuf::internal::ArenaStringPtr zone_uri_;
  ::google::protobuf::internal::ArenaStringPtr network_uri_;
  ::google::protobuf::internal::ArenaStringPtr subnetwork_uri_;
  bool internal_ip_only_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fcloud_2fdataproc_2fv1_2fclusters_2eproto::TableStruct;
  friend void ::protobuf_google_2fcloud_2fdataproc_2fv1_2fclusters_2eproto::InitDefaultsGceClusterConfigImpl();
};
// -------------------------------------------------------------------

class InstanceGroupConfig : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.cloud.dataproc.v1.InstanceGroupConfig) */ {
 public:
  InstanceGroupConfig();
  virtual ~InstanceGroupConfig();

  InstanceGroupConfig(const InstanceGroupConfig& from);

  inline InstanceGroupConfig& operator=(const InstanceGroupConfig& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  InstanceGroupConfig(InstanceGroupConfig&& from) noexcept
    : InstanceGroupConfig() {
    *this = ::std::move(from);
  }

  inline InstanceGroupConfig& operator=(InstanceGroupConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const InstanceGroupConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const InstanceGroupConfig* internal_default_instance() {
    return reinterpret_cast<const InstanceGroupConfig*>(
               &_InstanceGroupConfig_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(InstanceGroupConfig* other);
  friend void swap(InstanceGroupConfig& a, InstanceGroupConfig& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline InstanceGroupConfig* New() const PROTOBUF_FINAL { return New(NULL); }

  InstanceGroupConfig* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const InstanceGroupConfig& from);
  void MergeFrom(const InstanceGroupConfig& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(InstanceGroupConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string instance_names = 2;
  int instance_names_size() const;
  void clear_instance_names();
  static const int kInstanceNamesFieldNumber = 2;
  const ::std::string& instance_names(int index) const;
  ::std::string* mutable_instance_names(int index);
  void set_instance_names(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_instance_names(int index, ::std::string&& value);
  #endif
  void set_instance_names(int index, const char* value);
  void set_instance_names(int index, const char* value, size_t size);
  ::std::string* add_instance_names();
  void add_instance_names(const ::std::string& value);
  #if LANG_CXX11
  void add_instance_names(::std::string&& value);
  #endif
  void add_instance_names(const char* value);
  void add_instance_names(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& instance_names() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_instance_names();

  // string image_uri = 3;
  void clear_image_uri();
  static const int kImageUriFieldNumber = 3;
  const ::std::string& image_uri() const;
  void set_image_uri(const ::std::string& value);
  #if LANG_CXX11
  void set_image_uri(::std::string&& value);
  #endif
  void set_image_uri(const char* value);
  void set_image_uri(const char* value, size_t size);
  ::std::string* mutable_image_uri();
  ::std::string* release_image_uri();
  void set_allocated_image_uri(::std::string* image_uri);

  // string machine_type_uri = 4;
  void clear_machine_type_uri();
  static const int kMachineTypeUriFieldNumber = 4;
  const ::std::string& machine_type_uri() const;
  void set_machine_type_uri(const ::std::string& value);
  #if LANG_CXX11
  void set_machine_type_uri(::std::string&& value);
  #endif
  void set_machine_type_uri(const char* value);
  void set_machine_type_uri(const char* value, size_t size);
  ::std::string* mutable_machine_type_uri();
  ::std::string* release_machine_type_uri();
  void set_allocated_machine_type_uri(::std::string* machine_type_uri);

  // .google.cloud.dataproc.v1.DiskConfig disk_config = 5;
  bool has_disk_config() const;
  void clear_disk_config();
  static const int kDiskConfigFieldNumber = 5;
  const ::google::cloud::dataproc::v1::DiskConfig& disk_config() const;
  ::google::cloud::dataproc::v1::DiskConfig* release_disk_config();
  ::google::cloud::dataproc::v1::DiskConfig* mutable_disk_config();
  void set_allocated_disk_config(::google::cloud::dataproc::v1::DiskConfig* disk_config);

  // .google.cloud.dataproc.v1.ManagedGroupConfig managed_group_config = 7;
  bool has_managed_group_config() const;
  void clear_managed_group_config();
  static const int kManagedGroupConfigFieldNumber = 7;
  const ::google::cloud::dataproc::v1::ManagedGroupConfig& managed_group_config() const;
  ::google::cloud::dataproc::v1::ManagedGroupConfig* release_managed_group_config();
  ::google::cloud::dataproc::v1::ManagedGroupConfig* mutable_managed_group_config();
  void set_allocated_managed_group_config(::google::cloud::dataproc::v1::ManagedGroupConfig* managed_group_config);

  // int32 num_instances = 1;
  void clear_num_instances();
  static const int kNumInstancesFieldNumber = 1;
  ::google::protobuf::int32 num_instances() const;
  void set_num_instances(::google::protobuf::int32 value);

  // bool is_preemptible = 6;
  void clear_is_preemptible();
  static const int kIsPreemptibleFieldNumber = 6;
  bool is_preemptible() const;
  void set_is_preemptible(bool value);

  // @@protoc_insertion_point(class_scope:google.cloud.dataproc.v1.InstanceGroupConfig)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> instance_names_;
  ::google::protobuf::internal::ArenaStringPtr image_uri_;
  ::google::protobuf::internal::ArenaStringPtr machine_type_uri_;
  ::google::cloud::dataproc::v1::DiskConfig* disk_config_;
  ::google::cloud::dataproc::v1::ManagedGroupConfig* managed_group_config_;
  ::google::protobuf::int32 num_instances_;
  bool is_preemptible_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fcloud_2fdataproc_2fv1_2fclusters_2eproto::TableStruct;
  friend void ::protobuf_google_2fcloud_2fdataproc_2fv1_2fclusters_2eproto::InitDefaultsInstanceGroupConfigImpl();
};
// -------------------------------------------------------------------

class ManagedGroupConfig : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.cloud.dataproc.v1.ManagedGroupConfig) */ {
 public:
  ManagedGroupConfig();
  virtual ~ManagedGroupConfig();

  ManagedGroupConfig(const ManagedGroupConfig& from);

  inline ManagedGroupConfig& operator=(const ManagedGroupConfig& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ManagedGroupConfig(ManagedGroupConfig&& from) noexcept
    : ManagedGroupConfig() {
    *this = ::std::move(from);
  }

  inline ManagedGroupConfig& operator=(ManagedGroupConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ManagedGroupConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ManagedGroupConfig* internal_default_instance() {
    return reinterpret_cast<const ManagedGroupConfig*>(
               &_ManagedGroupConfig_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    5;

  void Swap(ManagedGroupConfig* other);
  friend void swap(ManagedGroupConfig& a, ManagedGroupConfig& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ManagedGroupConfig* New() const PROTOBUF_FINAL { return New(NULL); }

  ManagedGroupConfig* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ManagedGroupConfig& from);
  void MergeFrom(const ManagedGroupConfig& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ManagedGroupConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string instance_template_name = 1;
  void clear_instance_template_name();
  static const int kInstanceTemplateNameFieldNumber = 1;
  const ::std::string& instance_template_name() const;
  void set_instance_template_name(const ::std::string& value);
  #if LANG_CXX11
  void set_instance_template_name(::std::string&& value);
  #endif
  void set_instance_template_name(const char* value);
  void set_instance_template_name(const char* value, size_t size);
  ::std::string* mutable_instance_template_name();
  ::std::string* release_instance_template_name();
  void set_allocated_instance_template_name(::std::string* instance_template_name);

  // string instance_group_manager_name = 2;
  void clear_instance_group_manager_name();
  static const int kInstanceGroupManagerNameFieldNumber = 2;
  const ::std::string& instance_group_manager_name() const;
  void set_instance_group_manager_name(const ::std::string& value);
  #if LANG_CXX11
  void set_instance_group_manager_name(::std::string&& value);
  #endif
  void set_instance_group_manager_name(const char* value);
  void set_instance_group_manager_name(const char* value, size_t size);
  ::std::string* mutable_instance_group_manager_name();
  ::std::string* release_instance_group_manager_name();
  void set_allocated_instance_group_manager_name(::std::string* instance_group_manager_name);

  // @@protoc_insertion_point(class_scope:google.cloud.dataproc.v1.ManagedGroupConfig)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr instance_template_name_;
  ::google::protobuf::internal::ArenaStringPtr instance_group_manager_name_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fcloud_2fdataproc_2fv1_2fclusters_2eproto::TableStruct;
  friend void ::protobuf_google_2fcloud_2fdataproc_2fv1_2fclusters_2eproto::InitDefaultsManagedGroupConfigImpl();
};
// -------------------------------------------------------------------

class DiskConfig : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.cloud.dataproc.v1.DiskConfig) */ {
 public:
  DiskConfig();
  virtual ~DiskConfig();

  DiskConfig(const DiskConfig& from);

  inline DiskConfig& operator=(const DiskConfig& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DiskConfig(DiskConfig&& from) noexcept
    : DiskConfig() {
    *this = ::std::move(from);
  }

  inline DiskConfig& operator=(DiskConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DiskConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DiskConfig* internal_default_instance() {
    return reinterpret_cast<const DiskConfig*>(
               &_DiskConfig_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    6;

  void Swap(DiskConfig* other);
  friend void swap(DiskConfig& a, DiskConfig& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DiskConfig* New() const PROTOBUF_FINAL { return New(NULL); }

  DiskConfig* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DiskConfig& from);
  void MergeFrom(const DiskConfig& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DiskConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 boot_disk_size_gb = 1;
  void clear_boot_disk_size_gb();
  static const int kBootDiskSizeGbFieldNumber = 1;
  ::google::protobuf::int32 boot_disk_size_gb() const;
  void set_boot_disk_size_gb(::google::protobuf::int32 value);

  // int32 num_local_ssds = 2;
  void clear_num_local_ssds();
  static const int kNumLocalSsdsFieldNumber = 2;
  ::google::protobuf::int32 num_local_ssds() const;
  void set_num_local_ssds(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:google.cloud.dataproc.v1.DiskConfig)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 boot_disk_size_gb_;
  ::google::protobuf::int32 num_local_ssds_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fcloud_2fdataproc_2fv1_2fclusters_2eproto::TableStruct;
  friend void ::protobuf_google_2fcloud_2fdataproc_2fv1_2fclusters_2eproto::InitDefaultsDiskConfigImpl();
};
// -------------------------------------------------------------------

class NodeInitializationAction : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.cloud.dataproc.v1.NodeInitializationAction) */ {
 public:
  NodeInitializationAction();
  virtual ~NodeInitializationAction();

  NodeInitializationAction(const NodeInitializationAction& from);

  inline NodeInitializationAction& operator=(const NodeInitializationAction& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  NodeInitializationAction(NodeInitializationAction&& from) noexcept
    : NodeInitializationAction() {
    *this = ::std::move(from);
  }

  inline NodeInitializationAction& operator=(NodeInitializationAction&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const NodeInitializationAction& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NodeInitializationAction* internal_default_instance() {
    return reinterpret_cast<const NodeInitializationAction*>(
               &_NodeInitializationAction_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    7;

  void Swap(NodeInitializationAction* other);
  friend void swap(NodeInitializationAction& a, NodeInitializationAction& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline NodeInitializationAction* New() const PROTOBUF_FINAL { return New(NULL); }

  NodeInitializationAction* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const NodeInitializationAction& from);
  void MergeFrom(const NodeInitializationAction& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(NodeInitializationAction* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string executable_file = 1;
  void clear_executable_file();
  static const int kExecutableFileFieldNumber = 1;
  const ::std::string& executable_file() const;
  void set_executable_file(const ::std::string& value);
  #if LANG_CXX11
  void set_executable_file(::std::string&& value);
  #endif
  void set_executable_file(const char* value);
  void set_executable_file(const char* value, size_t size);
  ::std::string* mutable_executable_file();
  ::std::string* release_executable_file();
  void set_allocated_executable_file(::std::string* executable_file);

  // .google.protobuf.Duration execution_timeout = 2;
  bool has_execution_timeout() const;
  void clear_execution_timeout();
  static const int kExecutionTimeoutFieldNumber = 2;
  const ::google::protobuf::Duration& execution_timeout() const;
  ::google::protobuf::Duration* release_execution_timeout();
  ::google::protobuf::Duration* mutable_execution_timeout();
  void set_allocated_execution_timeout(::google::protobuf::Duration* execution_timeout);

  // @@protoc_insertion_point(class_scope:google.cloud.dataproc.v1.NodeInitializationAction)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr executable_file_;
  ::google::protobuf::Duration* execution_timeout_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fcloud_2fdataproc_2fv1_2fclusters_2eproto::TableStruct;
  friend void ::protobuf_google_2fcloud_2fdataproc_2fv1_2fclusters_2eproto::InitDefaultsNodeInitializationActionImpl();
};
// -------------------------------------------------------------------

class ClusterStatus : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.cloud.dataproc.v1.ClusterStatus) */ {
 public:
  ClusterStatus();
  virtual ~ClusterStatus();

  ClusterStatus(const ClusterStatus& from);

  inline ClusterStatus& operator=(const ClusterStatus& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ClusterStatus(ClusterStatus&& from) noexcept
    : ClusterStatus() {
    *this = ::std::move(from);
  }

  inline ClusterStatus& operator=(ClusterStatus&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ClusterStatus& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ClusterStatus* internal_default_instance() {
    return reinterpret_cast<const ClusterStatus*>(
               &_ClusterStatus_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    8;

  void Swap(ClusterStatus* other);
  friend void swap(ClusterStatus& a, ClusterStatus& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ClusterStatus* New() const PROTOBUF_FINAL { return New(NULL); }

  ClusterStatus* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ClusterStatus& from);
  void MergeFrom(const ClusterStatus& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ClusterStatus* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef ClusterStatus_State State;
  static const State UNKNOWN =
    ClusterStatus_State_UNKNOWN;
  static const State CREATING =
    ClusterStatus_State_CREATING;
  static const State RUNNING =
    ClusterStatus_State_RUNNING;
  static const State ERROR =
    ClusterStatus_State_ERROR;
  static const State DELETING =
    ClusterStatus_State_DELETING;
  static const State UPDATING =
    ClusterStatus_State_UPDATING;
  static inline bool State_IsValid(int value) {
    return ClusterStatus_State_IsValid(value);
  }
  static const State State_MIN =
    ClusterStatus_State_State_MIN;
  static const State State_MAX =
    ClusterStatus_State_State_MAX;
  static const int State_ARRAYSIZE =
    ClusterStatus_State_State_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  State_descriptor() {
    return ClusterStatus_State_descriptor();
  }
  static inline const ::std::string& State_Name(State value) {
    return ClusterStatus_State_Name(value);
  }
  static inline bool State_Parse(const ::std::string& name,
      State* value) {
    return ClusterStatus_State_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // string detail = 2;
  void clear_detail();
  static const int kDetailFieldNumber = 2;
  const ::std::string& detail() const;
  void set_detail(const ::std::string& value);
  #if LANG_CXX11
  void set_detail(::std::string&& value);
  #endif
  void set_detail(const char* value);
  void set_detail(const char* value, size_t size);
  ::std::string* mutable_detail();
  ::std::string* release_detail();
  void set_allocated_detail(::std::string* detail);

  // .google.protobuf.Timestamp state_start_time = 3;
  bool has_state_start_time() const;
  void clear_state_start_time();
  static const int kStateStartTimeFieldNumber = 3;
  const ::google::protobuf::Timestamp& state_start_time() const;
  ::google::protobuf::Timestamp* release_state_start_time();
  ::google::protobuf::Timestamp* mutable_state_start_time();
  void set_allocated_state_start_time(::google::protobuf::Timestamp* state_start_time);

  // .google.cloud.dataproc.v1.ClusterStatus.State state = 1;
  void clear_state();
  static const int kStateFieldNumber = 1;
  ::google::cloud::dataproc::v1::ClusterStatus_State state() const;
  void set_state(::google::cloud::dataproc::v1::ClusterStatus_State value);

  // @@protoc_insertion_point(class_scope:google.cloud.dataproc.v1.ClusterStatus)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr detail_;
  ::google::protobuf::Timestamp* state_start_time_;
  int state_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fcloud_2fdataproc_2fv1_2fclusters_2eproto::TableStruct;
  friend void ::protobuf_google_2fcloud_2fdataproc_2fv1_2fclusters_2eproto::InitDefaultsClusterStatusImpl();
};
// -------------------------------------------------------------------

class SoftwareConfig_PropertiesEntry_DoNotUse : public ::google::protobuf::internal::MapEntry<SoftwareConfig_PropertiesEntry_DoNotUse, 
    ::std::string, ::std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    0 > {
public:
  typedef ::google::protobuf::internal::MapEntry<SoftwareConfig_PropertiesEntry_DoNotUse, 
    ::std::string, ::std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    0 > SuperType;
  SoftwareConfig_PropertiesEntry_DoNotUse();
  SoftwareConfig_PropertiesEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const SoftwareConfig_PropertiesEntry_DoNotUse& other);
  static const SoftwareConfig_PropertiesEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const SoftwareConfig_PropertiesEntry_DoNotUse*>(&_SoftwareConfig_PropertiesEntry_DoNotUse_default_instance_); }
  void MergeFrom(const ::google::protobuf::Message& other) PROTOBUF_FINAL;
  ::google::protobuf::Metadata GetMetadata() const;
};

// -------------------------------------------------------------------

class SoftwareConfig : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.cloud.dataproc.v1.SoftwareConfig) */ {
 public:
  SoftwareConfig();
  virtual ~SoftwareConfig();

  SoftwareConfig(const SoftwareConfig& from);

  inline SoftwareConfig& operator=(const SoftwareConfig& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SoftwareConfig(SoftwareConfig&& from) noexcept
    : SoftwareConfig() {
    *this = ::std::move(from);
  }

  inline SoftwareConfig& operator=(SoftwareConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SoftwareConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SoftwareConfig* internal_default_instance() {
    return reinterpret_cast<const SoftwareConfig*>(
               &_SoftwareConfig_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    10;

  void Swap(SoftwareConfig* other);
  friend void swap(SoftwareConfig& a, SoftwareConfig& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SoftwareConfig* New() const PROTOBUF_FINAL { return New(NULL); }

  SoftwareConfig* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SoftwareConfig& from);
  void MergeFrom(const SoftwareConfig& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SoftwareConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // map<string, string> properties = 2;
  int properties_size() const;
  void clear_properties();
  static const int kPropertiesFieldNumber = 2;
  const ::google::protobuf::Map< ::std::string, ::std::string >&
      properties() const;
  ::google::protobuf::Map< ::std::string, ::std::string >*
      mutable_properties();

  // string image_version = 1;
  void clear_image_version();
  static const int kImageVersionFieldNumber = 1;
  const ::std::string& image_version() const;
  void set_image_version(const ::std::string& value);
  #if LANG_CXX11
  void set_image_version(::std::string&& value);
  #endif
  void set_image_version(const char* value);
  void set_image_version(const char* value, size_t size);
  ::std::string* mutable_image_version();
  ::std::string* release_image_version();
  void set_allocated_image_version(::std::string* image_version);

  // @@protoc_insertion_point(class_scope:google.cloud.dataproc.v1.SoftwareConfig)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::MapField<
      SoftwareConfig_PropertiesEntry_DoNotUse,
      ::std::string, ::std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      0 > properties_;
  ::google::protobuf::internal::ArenaStringPtr image_version_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fcloud_2fdataproc_2fv1_2fclusters_2eproto::TableStruct;
  friend void ::protobuf_google_2fcloud_2fdataproc_2fv1_2fclusters_2eproto::InitDefaultsSoftwareConfigImpl();
};
// -------------------------------------------------------------------

class CreateClusterRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.cloud.dataproc.v1.CreateClusterRequest) */ {
 public:
  CreateClusterRequest();
  virtual ~CreateClusterRequest();

  CreateClusterRequest(const CreateClusterRequest& from);

  inline CreateClusterRequest& operator=(const CreateClusterRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CreateClusterRequest(CreateClusterRequest&& from) noexcept
    : CreateClusterRequest() {
    *this = ::std::move(from);
  }

  inline CreateClusterRequest& operator=(CreateClusterRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CreateClusterRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreateClusterRequest* internal_default_instance() {
    return reinterpret_cast<const CreateClusterRequest*>(
               &_CreateClusterRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    11;

  void Swap(CreateClusterRequest* other);
  friend void swap(CreateClusterRequest& a, CreateClusterRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CreateClusterRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  CreateClusterRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CreateClusterRequest& from);
  void MergeFrom(const CreateClusterRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CreateClusterRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string project_id = 1;
  void clear_project_id();
  static const int kProjectIdFieldNumber = 1;
  const ::std::string& project_id() const;
  void set_project_id(const ::std::string& value);
  #if LANG_CXX11
  void set_project_id(::std::string&& value);
  #endif
  void set_project_id(const char* value);
  void set_project_id(const char* value, size_t size);
  ::std::string* mutable_project_id();
  ::std::string* release_project_id();
  void set_allocated_project_id(::std::string* project_id);

  // string region = 3;
  void clear_region();
  static const int kRegionFieldNumber = 3;
  const ::std::string& region() const;
  void set_region(const ::std::string& value);
  #if LANG_CXX11
  void set_region(::std::string&& value);
  #endif
  void set_region(const char* value);
  void set_region(const char* value, size_t size);
  ::std::string* mutable_region();
  ::std::string* release_region();
  void set_allocated_region(::std::string* region);

  // .google.cloud.dataproc.v1.Cluster cluster = 2;
  bool has_cluster() const;
  void clear_cluster();
  static const int kClusterFieldNumber = 2;
  const ::google::cloud::dataproc::v1::Cluster& cluster() const;
  ::google::cloud::dataproc::v1::Cluster* release_cluster();
  ::google::cloud::dataproc::v1::Cluster* mutable_cluster();
  void set_allocated_cluster(::google::cloud::dataproc::v1::Cluster* cluster);

  // @@protoc_insertion_point(class_scope:google.cloud.dataproc.v1.CreateClusterRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr project_id_;
  ::google::protobuf::internal::ArenaStringPtr region_;
  ::google::cloud::dataproc::v1::Cluster* cluster_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fcloud_2fdataproc_2fv1_2fclusters_2eproto::TableStruct;
  friend void ::protobuf_google_2fcloud_2fdataproc_2fv1_2fclusters_2eproto::InitDefaultsCreateClusterRequestImpl();
};
// -------------------------------------------------------------------

class UpdateClusterRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.cloud.dataproc.v1.UpdateClusterRequest) */ {
 public:
  UpdateClusterRequest();
  virtual ~UpdateClusterRequest();

  UpdateClusterRequest(const UpdateClusterRequest& from);

  inline UpdateClusterRequest& operator=(const UpdateClusterRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UpdateClusterRequest(UpdateClusterRequest&& from) noexcept
    : UpdateClusterRequest() {
    *this = ::std::move(from);
  }

  inline UpdateClusterRequest& operator=(UpdateClusterRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const UpdateClusterRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UpdateClusterRequest* internal_default_instance() {
    return reinterpret_cast<const UpdateClusterRequest*>(
               &_UpdateClusterRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    12;

  void Swap(UpdateClusterRequest* other);
  friend void swap(UpdateClusterRequest& a, UpdateClusterRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UpdateClusterRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  UpdateClusterRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const UpdateClusterRequest& from);
  void MergeFrom(const UpdateClusterRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(UpdateClusterRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string project_id = 1;
  void clear_project_id();
  static const int kProjectIdFieldNumber = 1;
  const ::std::string& project_id() const;
  void set_project_id(const ::std::string& value);
  #if LANG_CXX11
  void set_project_id(::std::string&& value);
  #endif
  void set_project_id(const char* value);
  void set_project_id(const char* value, size_t size);
  ::std::string* mutable_project_id();
  ::std::string* release_project_id();
  void set_allocated_project_id(::std::string* project_id);

  // string cluster_name = 2;
  void clear_cluster_name();
  static const int kClusterNameFieldNumber = 2;
  const ::std::string& cluster_name() const;
  void set_cluster_name(const ::std::string& value);
  #if LANG_CXX11
  void set_cluster_name(::std::string&& value);
  #endif
  void set_cluster_name(const char* value);
  void set_cluster_name(const char* value, size_t size);
  ::std::string* mutable_cluster_name();
  ::std::string* release_cluster_name();
  void set_allocated_cluster_name(::std::string* cluster_name);

  // string region = 5;
  void clear_region();
  static const int kRegionFieldNumber = 5;
  const ::std::string& region() const;
  void set_region(const ::std::string& value);
  #if LANG_CXX11
  void set_region(::std::string&& value);
  #endif
  void set_region(const char* value);
  void set_region(const char* value, size_t size);
  ::std::string* mutable_region();
  ::std::string* release_region();
  void set_allocated_region(::std::string* region);

  // .google.cloud.dataproc.v1.Cluster cluster = 3;
  bool has_cluster() const;
  void clear_cluster();
  static const int kClusterFieldNumber = 3;
  const ::google::cloud::dataproc::v1::Cluster& cluster() const;
  ::google::cloud::dataproc::v1::Cluster* release_cluster();
  ::google::cloud::dataproc::v1::Cluster* mutable_cluster();
  void set_allocated_cluster(::google::cloud::dataproc::v1::Cluster* cluster);

  // .google.protobuf.FieldMask update_mask = 4;
  bool has_update_mask() const;
  void clear_update_mask();
  static const int kUpdateMaskFieldNumber = 4;
  const ::google::protobuf::FieldMask& update_mask() const;
  ::google::protobuf::FieldMask* release_update_mask();
  ::google::protobuf::FieldMask* mutable_update_mask();
  void set_allocated_update_mask(::google::protobuf::FieldMask* update_mask);

  // @@protoc_insertion_point(class_scope:google.cloud.dataproc.v1.UpdateClusterRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr project_id_;
  ::google::protobuf::internal::ArenaStringPtr cluster_name_;
  ::google::protobuf::internal::ArenaStringPtr region_;
  ::google::cloud::dataproc::v1::Cluster* cluster_;
  ::google::protobuf::FieldMask* update_mask_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fcloud_2fdataproc_2fv1_2fclusters_2eproto::TableStruct;
  friend void ::protobuf_google_2fcloud_2fdataproc_2fv1_2fclusters_2eproto::InitDefaultsUpdateClusterRequestImpl();
};
// -------------------------------------------------------------------

class DeleteClusterRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.cloud.dataproc.v1.DeleteClusterRequest) */ {
 public:
  DeleteClusterRequest();
  virtual ~DeleteClusterRequest();

  DeleteClusterRequest(const DeleteClusterRequest& from);

  inline DeleteClusterRequest& operator=(const DeleteClusterRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DeleteClusterRequest(DeleteClusterRequest&& from) noexcept
    : DeleteClusterRequest() {
    *this = ::std::move(from);
  }

  inline DeleteClusterRequest& operator=(DeleteClusterRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DeleteClusterRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeleteClusterRequest* internal_default_instance() {
    return reinterpret_cast<const DeleteClusterRequest*>(
               &_DeleteClusterRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    13;

  void Swap(DeleteClusterRequest* other);
  friend void swap(DeleteClusterRequest& a, DeleteClusterRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DeleteClusterRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  DeleteClusterRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DeleteClusterRequest& from);
  void MergeFrom(const DeleteClusterRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DeleteClusterRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string project_id = 1;
  void clear_project_id();
  static const int kProjectIdFieldNumber = 1;
  const ::std::string& project_id() const;
  void set_project_id(const ::std::string& value);
  #if LANG_CXX11
  void set_project_id(::std::string&& value);
  #endif
  void set_project_id(const char* value);
  void set_project_id(const char* value, size_t size);
  ::std::string* mutable_project_id();
  ::std::string* release_project_id();
  void set_allocated_project_id(::std::string* project_id);

  // string cluster_name = 2;
  void clear_cluster_name();
  static const int kClusterNameFieldNumber = 2;
  const ::std::string& cluster_name() const;
  void set_cluster_name(const ::std::string& value);
  #if LANG_CXX11
  void set_cluster_name(::std::string&& value);
  #endif
  void set_cluster_name(const char* value);
  void set_cluster_name(const char* value, size_t size);
  ::std::string* mutable_cluster_name();
  ::std::string* release_cluster_name();
  void set_allocated_cluster_name(::std::string* cluster_name);

  // string region = 3;
  void clear_region();
  static const int kRegionFieldNumber = 3;
  const ::std::string& region() const;
  void set_region(const ::std::string& value);
  #if LANG_CXX11
  void set_region(::std::string&& value);
  #endif
  void set_region(const char* value);
  void set_region(const char* value, size_t size);
  ::std::string* mutable_region();
  ::std::string* release_region();
  void set_allocated_region(::std::string* region);

  // @@protoc_insertion_point(class_scope:google.cloud.dataproc.v1.DeleteClusterRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr project_id_;
  ::google::protobuf::internal::ArenaStringPtr cluster_name_;
  ::google::protobuf::internal::ArenaStringPtr region_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fcloud_2fdataproc_2fv1_2fclusters_2eproto::TableStruct;
  friend void ::protobuf_google_2fcloud_2fdataproc_2fv1_2fclusters_2eproto::InitDefaultsDeleteClusterRequestImpl();
};
// -------------------------------------------------------------------

class GetClusterRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.cloud.dataproc.v1.GetClusterRequest) */ {
 public:
  GetClusterRequest();
  virtual ~GetClusterRequest();

  GetClusterRequest(const GetClusterRequest& from);

  inline GetClusterRequest& operator=(const GetClusterRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetClusterRequest(GetClusterRequest&& from) noexcept
    : GetClusterRequest() {
    *this = ::std::move(from);
  }

  inline GetClusterRequest& operator=(GetClusterRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetClusterRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetClusterRequest* internal_default_instance() {
    return reinterpret_cast<const GetClusterRequest*>(
               &_GetClusterRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    14;

  void Swap(GetClusterRequest* other);
  friend void swap(GetClusterRequest& a, GetClusterRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetClusterRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  GetClusterRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GetClusterRequest& from);
  void MergeFrom(const GetClusterRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GetClusterRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string project_id = 1;
  void clear_project_id();
  static const int kProjectIdFieldNumber = 1;
  const ::std::string& project_id() const;
  void set_project_id(const ::std::string& value);
  #if LANG_CXX11
  void set_project_id(::std::string&& value);
  #endif
  void set_project_id(const char* value);
  void set_project_id(const char* value, size_t size);
  ::std::string* mutable_project_id();
  ::std::string* release_project_id();
  void set_allocated_project_id(::std::string* project_id);

  // string cluster_name = 2;
  void clear_cluster_name();
  static const int kClusterNameFieldNumber = 2;
  const ::std::string& cluster_name() const;
  void set_cluster_name(const ::std::string& value);
  #if LANG_CXX11
  void set_cluster_name(::std::string&& value);
  #endif
  void set_cluster_name(const char* value);
  void set_cluster_name(const char* value, size_t size);
  ::std::string* mutable_cluster_name();
  ::std::string* release_cluster_name();
  void set_allocated_cluster_name(::std::string* cluster_name);

  // string region = 3;
  void clear_region();
  static const int kRegionFieldNumber = 3;
  const ::std::string& region() const;
  void set_region(const ::std::string& value);
  #if LANG_CXX11
  void set_region(::std::string&& value);
  #endif
  void set_region(const char* value);
  void set_region(const char* value, size_t size);
  ::std::string* mutable_region();
  ::std::string* release_region();
  void set_allocated_region(::std::string* region);

  // @@protoc_insertion_point(class_scope:google.cloud.dataproc.v1.GetClusterRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr project_id_;
  ::google::protobuf::internal::ArenaStringPtr cluster_name_;
  ::google::protobuf::internal::ArenaStringPtr region_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fcloud_2fdataproc_2fv1_2fclusters_2eproto::TableStruct;
  friend void ::protobuf_google_2fcloud_2fdataproc_2fv1_2fclusters_2eproto::InitDefaultsGetClusterRequestImpl();
};
// -------------------------------------------------------------------

class ListClustersRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.cloud.dataproc.v1.ListClustersRequest) */ {
 public:
  ListClustersRequest();
  virtual ~ListClustersRequest();

  ListClustersRequest(const ListClustersRequest& from);

  inline ListClustersRequest& operator=(const ListClustersRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ListClustersRequest(ListClustersRequest&& from) noexcept
    : ListClustersRequest() {
    *this = ::std::move(from);
  }

  inline ListClustersRequest& operator=(ListClustersRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ListClustersRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListClustersRequest* internal_default_instance() {
    return reinterpret_cast<const ListClustersRequest*>(
               &_ListClustersRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    15;

  void Swap(ListClustersRequest* other);
  friend void swap(ListClustersRequest& a, ListClustersRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ListClustersRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  ListClustersRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ListClustersRequest& from);
  void MergeFrom(const ListClustersRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ListClustersRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string project_id = 1;
  void clear_project_id();
  static const int kProjectIdFieldNumber = 1;
  const ::std::string& project_id() const;
  void set_project_id(const ::std::string& value);
  #if LANG_CXX11
  void set_project_id(::std::string&& value);
  #endif
  void set_project_id(const char* value);
  void set_project_id(const char* value, size_t size);
  ::std::string* mutable_project_id();
  ::std::string* release_project_id();
  void set_allocated_project_id(::std::string* project_id);

  // string page_token = 3;
  void clear_page_token();
  static const int kPageTokenFieldNumber = 3;
  const ::std::string& page_token() const;
  void set_page_token(const ::std::string& value);
  #if LANG_CXX11
  void set_page_token(::std::string&& value);
  #endif
  void set_page_token(const char* value);
  void set_page_token(const char* value, size_t size);
  ::std::string* mutable_page_token();
  ::std::string* release_page_token();
  void set_allocated_page_token(::std::string* page_token);

  // string region = 4;
  void clear_region();
  static const int kRegionFieldNumber = 4;
  const ::std::string& region() const;
  void set_region(const ::std::string& value);
  #if LANG_CXX11
  void set_region(::std::string&& value);
  #endif
  void set_region(const char* value);
  void set_region(const char* value, size_t size);
  ::std::string* mutable_region();
  ::std::string* release_region();
  void set_allocated_region(::std::string* region);

  // int32 page_size = 2;
  void clear_page_size();
  static const int kPageSizeFieldNumber = 2;
  ::google::protobuf::int32 page_size() const;
  void set_page_size(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:google.cloud.dataproc.v1.ListClustersRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr project_id_;
  ::google::protobuf::internal::ArenaStringPtr page_token_;
  ::google::protobuf::internal::ArenaStringPtr region_;
  ::google::protobuf::int32 page_size_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fcloud_2fdataproc_2fv1_2fclusters_2eproto::TableStruct;
  friend void ::protobuf_google_2fcloud_2fdataproc_2fv1_2fclusters_2eproto::InitDefaultsListClustersRequestImpl();
};
// -------------------------------------------------------------------

class ListClustersResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.cloud.dataproc.v1.ListClustersResponse) */ {
 public:
  ListClustersResponse();
  virtual ~ListClustersResponse();

  ListClustersResponse(const ListClustersResponse& from);

  inline ListClustersResponse& operator=(const ListClustersResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ListClustersResponse(ListClustersResponse&& from) noexcept
    : ListClustersResponse() {
    *this = ::std::move(from);
  }

  inline ListClustersResponse& operator=(ListClustersResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ListClustersResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListClustersResponse* internal_default_instance() {
    return reinterpret_cast<const ListClustersResponse*>(
               &_ListClustersResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    16;

  void Swap(ListClustersResponse* other);
  friend void swap(ListClustersResponse& a, ListClustersResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ListClustersResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  ListClustersResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ListClustersResponse& from);
  void MergeFrom(const ListClustersResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ListClustersResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .google.cloud.dataproc.v1.Cluster clusters = 1;
  int clusters_size() const;
  void clear_clusters();
  static const int kClustersFieldNumber = 1;
  const ::google::cloud::dataproc::v1::Cluster& clusters(int index) const;
  ::google::cloud::dataproc::v1::Cluster* mutable_clusters(int index);
  ::google::cloud::dataproc::v1::Cluster* add_clusters();
  ::google::protobuf::RepeatedPtrField< ::google::cloud::dataproc::v1::Cluster >*
      mutable_clusters();
  const ::google::protobuf::RepeatedPtrField< ::google::cloud::dataproc::v1::Cluster >&
      clusters() const;

  // string next_page_token = 2;
  void clear_next_page_token();
  static const int kNextPageTokenFieldNumber = 2;
  const ::std::string& next_page_token() const;
  void set_next_page_token(const ::std::string& value);
  #if LANG_CXX11
  void set_next_page_token(::std::string&& value);
  #endif
  void set_next_page_token(const char* value);
  void set_next_page_token(const char* value, size_t size);
  ::std::string* mutable_next_page_token();
  ::std::string* release_next_page_token();
  void set_allocated_next_page_token(::std::string* next_page_token);

  // @@protoc_insertion_point(class_scope:google.cloud.dataproc.v1.ListClustersResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::google::cloud::dataproc::v1::Cluster > clusters_;
  ::google::protobuf::internal::ArenaStringPtr next_page_token_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fcloud_2fdataproc_2fv1_2fclusters_2eproto::TableStruct;
  friend void ::protobuf_google_2fcloud_2fdataproc_2fv1_2fclusters_2eproto::InitDefaultsListClustersResponseImpl();
};
// -------------------------------------------------------------------

class DiagnoseClusterRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.cloud.dataproc.v1.DiagnoseClusterRequest) */ {
 public:
  DiagnoseClusterRequest();
  virtual ~DiagnoseClusterRequest();

  DiagnoseClusterRequest(const DiagnoseClusterRequest& from);

  inline DiagnoseClusterRequest& operator=(const DiagnoseClusterRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DiagnoseClusterRequest(DiagnoseClusterRequest&& from) noexcept
    : DiagnoseClusterRequest() {
    *this = ::std::move(from);
  }

  inline DiagnoseClusterRequest& operator=(DiagnoseClusterRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DiagnoseClusterRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DiagnoseClusterRequest* internal_default_instance() {
    return reinterpret_cast<const DiagnoseClusterRequest*>(
               &_DiagnoseClusterRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    17;

  void Swap(DiagnoseClusterRequest* other);
  friend void swap(DiagnoseClusterRequest& a, DiagnoseClusterRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DiagnoseClusterRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  DiagnoseClusterRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DiagnoseClusterRequest& from);
  void MergeFrom(const DiagnoseClusterRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DiagnoseClusterRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string project_id = 1;
  void clear_project_id();
  static const int kProjectIdFieldNumber = 1;
  const ::std::string& project_id() const;
  void set_project_id(const ::std::string& value);
  #if LANG_CXX11
  void set_project_id(::std::string&& value);
  #endif
  void set_project_id(const char* value);
  void set_project_id(const char* value, size_t size);
  ::std::string* mutable_project_id();
  ::std::string* release_project_id();
  void set_allocated_project_id(::std::string* project_id);

  // string cluster_name = 2;
  void clear_cluster_name();
  static const int kClusterNameFieldNumber = 2;
  const ::std::string& cluster_name() const;
  void set_cluster_name(const ::std::string& value);
  #if LANG_CXX11
  void set_cluster_name(::std::string&& value);
  #endif
  void set_cluster_name(const char* value);
  void set_cluster_name(const char* value, size_t size);
  ::std::string* mutable_cluster_name();
  ::std::string* release_cluster_name();
  void set_allocated_cluster_name(::std::string* cluster_name);

  // string region = 3;
  void clear_region();
  static const int kRegionFieldNumber = 3;
  const ::std::string& region() const;
  void set_region(const ::std::string& value);
  #if LANG_CXX11
  void set_region(::std::string&& value);
  #endif
  void set_region(const char* value);
  void set_region(const char* value, size_t size);
  ::std::string* mutable_region();
  ::std::string* release_region();
  void set_allocated_region(::std::string* region);

  // @@protoc_insertion_point(class_scope:google.cloud.dataproc.v1.DiagnoseClusterRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr project_id_;
  ::google::protobuf::internal::ArenaStringPtr cluster_name_;
  ::google::protobuf::internal::ArenaStringPtr region_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fcloud_2fdataproc_2fv1_2fclusters_2eproto::TableStruct;
  friend void ::protobuf_google_2fcloud_2fdataproc_2fv1_2fclusters_2eproto::InitDefaultsDiagnoseClusterRequestImpl();
};
// -------------------------------------------------------------------

class DiagnoseClusterResults : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.cloud.dataproc.v1.DiagnoseClusterResults) */ {
 public:
  DiagnoseClusterResults();
  virtual ~DiagnoseClusterResults();

  DiagnoseClusterResults(const DiagnoseClusterResults& from);

  inline DiagnoseClusterResults& operator=(const DiagnoseClusterResults& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DiagnoseClusterResults(DiagnoseClusterResults&& from) noexcept
    : DiagnoseClusterResults() {
    *this = ::std::move(from);
  }

  inline DiagnoseClusterResults& operator=(DiagnoseClusterResults&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DiagnoseClusterResults& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DiagnoseClusterResults* internal_default_instance() {
    return reinterpret_cast<const DiagnoseClusterResults*>(
               &_DiagnoseClusterResults_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    18;

  void Swap(DiagnoseClusterResults* other);
  friend void swap(DiagnoseClusterResults& a, DiagnoseClusterResults& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DiagnoseClusterResults* New() const PROTOBUF_FINAL { return New(NULL); }

  DiagnoseClusterResults* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DiagnoseClusterResults& from);
  void MergeFrom(const DiagnoseClusterResults& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DiagnoseClusterResults* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string output_uri = 1;
  void clear_output_uri();
  static const int kOutputUriFieldNumber = 1;
  const ::std::string& output_uri() const;
  void set_output_uri(const ::std::string& value);
  #if LANG_CXX11
  void set_output_uri(::std::string&& value);
  #endif
  void set_output_uri(const char* value);
  void set_output_uri(const char* value, size_t size);
  ::std::string* mutable_output_uri();
  ::std::string* release_output_uri();
  void set_allocated_output_uri(::std::string* output_uri);

  // @@protoc_insertion_point(class_scope:google.cloud.dataproc.v1.DiagnoseClusterResults)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr output_uri_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fcloud_2fdataproc_2fv1_2fclusters_2eproto::TableStruct;
  friend void ::protobuf_google_2fcloud_2fdataproc_2fv1_2fclusters_2eproto::InitDefaultsDiagnoseClusterResultsImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Cluster

// string project_id = 1;
inline void Cluster::clear_project_id() {
  project_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Cluster::project_id() const {
  // @@protoc_insertion_point(field_get:google.cloud.dataproc.v1.Cluster.project_id)
  return project_id_.GetNoArena();
}
inline void Cluster::set_project_id(const ::std::string& value) {
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.cloud.dataproc.v1.Cluster.project_id)
}
#if LANG_CXX11
inline void Cluster::set_project_id(::std::string&& value) {
  
  project_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.dataproc.v1.Cluster.project_id)
}
#endif
inline void Cluster::set_project_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.cloud.dataproc.v1.Cluster.project_id)
}
inline void Cluster::set_project_id(const char* value, size_t size) {
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.cloud.dataproc.v1.Cluster.project_id)
}
inline ::std::string* Cluster::mutable_project_id() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.dataproc.v1.Cluster.project_id)
  return project_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Cluster::release_project_id() {
  // @@protoc_insertion_point(field_release:google.cloud.dataproc.v1.Cluster.project_id)
  
  return project_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Cluster::set_allocated_project_id(::std::string* project_id) {
  if (project_id != NULL) {
    
  } else {
    
  }
  project_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), project_id);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dataproc.v1.Cluster.project_id)
}

// string cluster_name = 2;
inline void Cluster::clear_cluster_name() {
  cluster_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Cluster::cluster_name() const {
  // @@protoc_insertion_point(field_get:google.cloud.dataproc.v1.Cluster.cluster_name)
  return cluster_name_.GetNoArena();
}
inline void Cluster::set_cluster_name(const ::std::string& value) {
  
  cluster_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.cloud.dataproc.v1.Cluster.cluster_name)
}
#if LANG_CXX11
inline void Cluster::set_cluster_name(::std::string&& value) {
  
  cluster_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.dataproc.v1.Cluster.cluster_name)
}
#endif
inline void Cluster::set_cluster_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  cluster_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.cloud.dataproc.v1.Cluster.cluster_name)
}
inline void Cluster::set_cluster_name(const char* value, size_t size) {
  
  cluster_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.cloud.dataproc.v1.Cluster.cluster_name)
}
inline ::std::string* Cluster::mutable_cluster_name() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.dataproc.v1.Cluster.cluster_name)
  return cluster_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Cluster::release_cluster_name() {
  // @@protoc_insertion_point(field_release:google.cloud.dataproc.v1.Cluster.cluster_name)
  
  return cluster_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Cluster::set_allocated_cluster_name(::std::string* cluster_name) {
  if (cluster_name != NULL) {
    
  } else {
    
  }
  cluster_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cluster_name);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dataproc.v1.Cluster.cluster_name)
}

// .google.cloud.dataproc.v1.ClusterConfig config = 3;
inline bool Cluster::has_config() const {
  return this != internal_default_instance() && config_ != NULL;
}
inline void Cluster::clear_config() {
  if (GetArenaNoVirtual() == NULL && config_ != NULL) {
    delete config_;
  }
  config_ = NULL;
}
inline const ::google::cloud::dataproc::v1::ClusterConfig& Cluster::config() const {
  const ::google::cloud::dataproc::v1::ClusterConfig* p = config_;
  // @@protoc_insertion_point(field_get:google.cloud.dataproc.v1.Cluster.config)
  return p != NULL ? *p : *reinterpret_cast<const ::google::cloud::dataproc::v1::ClusterConfig*>(
      &::google::cloud::dataproc::v1::_ClusterConfig_default_instance_);
}
inline ::google::cloud::dataproc::v1::ClusterConfig* Cluster::release_config() {
  // @@protoc_insertion_point(field_release:google.cloud.dataproc.v1.Cluster.config)
  
  ::google::cloud::dataproc::v1::ClusterConfig* temp = config_;
  config_ = NULL;
  return temp;
}
inline ::google::cloud::dataproc::v1::ClusterConfig* Cluster::mutable_config() {
  
  if (config_ == NULL) {
    config_ = new ::google::cloud::dataproc::v1::ClusterConfig;
  }
  // @@protoc_insertion_point(field_mutable:google.cloud.dataproc.v1.Cluster.config)
  return config_;
}
inline void Cluster::set_allocated_config(::google::cloud::dataproc::v1::ClusterConfig* config) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete config_;
  }
  if (config) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      config = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, config, submessage_arena);
    }
    
  } else {
    
  }
  config_ = config;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dataproc.v1.Cluster.config)
}

// .google.cloud.dataproc.v1.ClusterStatus status = 4;
inline bool Cluster::has_status() const {
  return this != internal_default_instance() && status_ != NULL;
}
inline void Cluster::clear_status() {
  if (GetArenaNoVirtual() == NULL && status_ != NULL) {
    delete status_;
  }
  status_ = NULL;
}
inline const ::google::cloud::dataproc::v1::ClusterStatus& Cluster::status() const {
  const ::google::cloud::dataproc::v1::ClusterStatus* p = status_;
  // @@protoc_insertion_point(field_get:google.cloud.dataproc.v1.Cluster.status)
  return p != NULL ? *p : *reinterpret_cast<const ::google::cloud::dataproc::v1::ClusterStatus*>(
      &::google::cloud::dataproc::v1::_ClusterStatus_default_instance_);
}
inline ::google::cloud::dataproc::v1::ClusterStatus* Cluster::release_status() {
  // @@protoc_insertion_point(field_release:google.cloud.dataproc.v1.Cluster.status)
  
  ::google::cloud::dataproc::v1::ClusterStatus* temp = status_;
  status_ = NULL;
  return temp;
}
inline ::google::cloud::dataproc::v1::ClusterStatus* Cluster::mutable_status() {
  
  if (status_ == NULL) {
    status_ = new ::google::cloud::dataproc::v1::ClusterStatus;
  }
  // @@protoc_insertion_point(field_mutable:google.cloud.dataproc.v1.Cluster.status)
  return status_;
}
inline void Cluster::set_allocated_status(::google::cloud::dataproc::v1::ClusterStatus* status) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete status_;
  }
  if (status) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      status = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dataproc.v1.Cluster.status)
}

// repeated .google.cloud.dataproc.v1.ClusterStatus status_history = 7;
inline int Cluster::status_history_size() const {
  return status_history_.size();
}
inline void Cluster::clear_status_history() {
  status_history_.Clear();
}
inline const ::google::cloud::dataproc::v1::ClusterStatus& Cluster::status_history(int index) const {
  // @@protoc_insertion_point(field_get:google.cloud.dataproc.v1.Cluster.status_history)
  return status_history_.Get(index);
}
inline ::google::cloud::dataproc::v1::ClusterStatus* Cluster::mutable_status_history(int index) {
  // @@protoc_insertion_point(field_mutable:google.cloud.dataproc.v1.Cluster.status_history)
  return status_history_.Mutable(index);
}
inline ::google::cloud::dataproc::v1::ClusterStatus* Cluster::add_status_history() {
  // @@protoc_insertion_point(field_add:google.cloud.dataproc.v1.Cluster.status_history)
  return status_history_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::google::cloud::dataproc::v1::ClusterStatus >*
Cluster::mutable_status_history() {
  // @@protoc_insertion_point(field_mutable_list:google.cloud.dataproc.v1.Cluster.status_history)
  return &status_history_;
}
inline const ::google::protobuf::RepeatedPtrField< ::google::cloud::dataproc::v1::ClusterStatus >&
Cluster::status_history() const {
  // @@protoc_insertion_point(field_list:google.cloud.dataproc.v1.Cluster.status_history)
  return status_history_;
}

// string cluster_uuid = 6;
inline void Cluster::clear_cluster_uuid() {
  cluster_uuid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Cluster::cluster_uuid() const {
  // @@protoc_insertion_point(field_get:google.cloud.dataproc.v1.Cluster.cluster_uuid)
  return cluster_uuid_.GetNoArena();
}
inline void Cluster::set_cluster_uuid(const ::std::string& value) {
  
  cluster_uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.cloud.dataproc.v1.Cluster.cluster_uuid)
}
#if LANG_CXX11
inline void Cluster::set_cluster_uuid(::std::string&& value) {
  
  cluster_uuid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.dataproc.v1.Cluster.cluster_uuid)
}
#endif
inline void Cluster::set_cluster_uuid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  cluster_uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.cloud.dataproc.v1.Cluster.cluster_uuid)
}
inline void Cluster::set_cluster_uuid(const char* value, size_t size) {
  
  cluster_uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.cloud.dataproc.v1.Cluster.cluster_uuid)
}
inline ::std::string* Cluster::mutable_cluster_uuid() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.dataproc.v1.Cluster.cluster_uuid)
  return cluster_uuid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Cluster::release_cluster_uuid() {
  // @@protoc_insertion_point(field_release:google.cloud.dataproc.v1.Cluster.cluster_uuid)
  
  return cluster_uuid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Cluster::set_allocated_cluster_uuid(::std::string* cluster_uuid) {
  if (cluster_uuid != NULL) {
    
  } else {
    
  }
  cluster_uuid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cluster_uuid);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dataproc.v1.Cluster.cluster_uuid)
}

// -------------------------------------------------------------------

// ClusterConfig

// string config_bucket = 1;
inline void ClusterConfig::clear_config_bucket() {
  config_bucket_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ClusterConfig::config_bucket() const {
  // @@protoc_insertion_point(field_get:google.cloud.dataproc.v1.ClusterConfig.config_bucket)
  return config_bucket_.GetNoArena();
}
inline void ClusterConfig::set_config_bucket(const ::std::string& value) {
  
  config_bucket_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.cloud.dataproc.v1.ClusterConfig.config_bucket)
}
#if LANG_CXX11
inline void ClusterConfig::set_config_bucket(::std::string&& value) {
  
  config_bucket_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.dataproc.v1.ClusterConfig.config_bucket)
}
#endif
inline void ClusterConfig::set_config_bucket(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  config_bucket_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.cloud.dataproc.v1.ClusterConfig.config_bucket)
}
inline void ClusterConfig::set_config_bucket(const char* value, size_t size) {
  
  config_bucket_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.cloud.dataproc.v1.ClusterConfig.config_bucket)
}
inline ::std::string* ClusterConfig::mutable_config_bucket() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.dataproc.v1.ClusterConfig.config_bucket)
  return config_bucket_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ClusterConfig::release_config_bucket() {
  // @@protoc_insertion_point(field_release:google.cloud.dataproc.v1.ClusterConfig.config_bucket)
  
  return config_bucket_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ClusterConfig::set_allocated_config_bucket(::std::string* config_bucket) {
  if (config_bucket != NULL) {
    
  } else {
    
  }
  config_bucket_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), config_bucket);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dataproc.v1.ClusterConfig.config_bucket)
}

// .google.cloud.dataproc.v1.GceClusterConfig gce_cluster_config = 8;
inline bool ClusterConfig::has_gce_cluster_config() const {
  return this != internal_default_instance() && gce_cluster_config_ != NULL;
}
inline void ClusterConfig::clear_gce_cluster_config() {
  if (GetArenaNoVirtual() == NULL && gce_cluster_config_ != NULL) {
    delete gce_cluster_config_;
  }
  gce_cluster_config_ = NULL;
}
inline const ::google::cloud::dataproc::v1::GceClusterConfig& ClusterConfig::gce_cluster_config() const {
  const ::google::cloud::dataproc::v1::GceClusterConfig* p = gce_cluster_config_;
  // @@protoc_insertion_point(field_get:google.cloud.dataproc.v1.ClusterConfig.gce_cluster_config)
  return p != NULL ? *p : *reinterpret_cast<const ::google::cloud::dataproc::v1::GceClusterConfig*>(
      &::google::cloud::dataproc::v1::_GceClusterConfig_default_instance_);
}
inline ::google::cloud::dataproc::v1::GceClusterConfig* ClusterConfig::release_gce_cluster_config() {
  // @@protoc_insertion_point(field_release:google.cloud.dataproc.v1.ClusterConfig.gce_cluster_config)
  
  ::google::cloud::dataproc::v1::GceClusterConfig* temp = gce_cluster_config_;
  gce_cluster_config_ = NULL;
  return temp;
}
inline ::google::cloud::dataproc::v1::GceClusterConfig* ClusterConfig::mutable_gce_cluster_config() {
  
  if (gce_cluster_config_ == NULL) {
    gce_cluster_config_ = new ::google::cloud::dataproc::v1::GceClusterConfig;
  }
  // @@protoc_insertion_point(field_mutable:google.cloud.dataproc.v1.ClusterConfig.gce_cluster_config)
  return gce_cluster_config_;
}
inline void ClusterConfig::set_allocated_gce_cluster_config(::google::cloud::dataproc::v1::GceClusterConfig* gce_cluster_config) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete gce_cluster_config_;
  }
  if (gce_cluster_config) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      gce_cluster_config = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, gce_cluster_config, submessage_arena);
    }
    
  } else {
    
  }
  gce_cluster_config_ = gce_cluster_config;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dataproc.v1.ClusterConfig.gce_cluster_config)
}

// .google.cloud.dataproc.v1.InstanceGroupConfig master_config = 9;
inline bool ClusterConfig::has_master_config() const {
  return this != internal_default_instance() && master_config_ != NULL;
}
inline void ClusterConfig::clear_master_config() {
  if (GetArenaNoVirtual() == NULL && master_config_ != NULL) {
    delete master_config_;
  }
  master_config_ = NULL;
}
inline const ::google::cloud::dataproc::v1::InstanceGroupConfig& ClusterConfig::master_config() const {
  const ::google::cloud::dataproc::v1::InstanceGroupConfig* p = master_config_;
  // @@protoc_insertion_point(field_get:google.cloud.dataproc.v1.ClusterConfig.master_config)
  return p != NULL ? *p : *reinterpret_cast<const ::google::cloud::dataproc::v1::InstanceGroupConfig*>(
      &::google::cloud::dataproc::v1::_InstanceGroupConfig_default_instance_);
}
inline ::google::cloud::dataproc::v1::InstanceGroupConfig* ClusterConfig::release_master_config() {
  // @@protoc_insertion_point(field_release:google.cloud.dataproc.v1.ClusterConfig.master_config)
  
  ::google::cloud::dataproc::v1::InstanceGroupConfig* temp = master_config_;
  master_config_ = NULL;
  return temp;
}
inline ::google::cloud::dataproc::v1::InstanceGroupConfig* ClusterConfig::mutable_master_config() {
  
  if (master_config_ == NULL) {
    master_config_ = new ::google::cloud::dataproc::v1::InstanceGroupConfig;
  }
  // @@protoc_insertion_point(field_mutable:google.cloud.dataproc.v1.ClusterConfig.master_config)
  return master_config_;
}
inline void ClusterConfig::set_allocated_master_config(::google::cloud::dataproc::v1::InstanceGroupConfig* master_config) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete master_config_;
  }
  if (master_config) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      master_config = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, master_config, submessage_arena);
    }
    
  } else {
    
  }
  master_config_ = master_config;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dataproc.v1.ClusterConfig.master_config)
}

// .google.cloud.dataproc.v1.InstanceGroupConfig worker_config = 10;
inline bool ClusterConfig::has_worker_config() const {
  return this != internal_default_instance() && worker_config_ != NULL;
}
inline void ClusterConfig::clear_worker_config() {
  if (GetArenaNoVirtual() == NULL && worker_config_ != NULL) {
    delete worker_config_;
  }
  worker_config_ = NULL;
}
inline const ::google::cloud::dataproc::v1::InstanceGroupConfig& ClusterConfig::worker_config() const {
  const ::google::cloud::dataproc::v1::InstanceGroupConfig* p = worker_config_;
  // @@protoc_insertion_point(field_get:google.cloud.dataproc.v1.ClusterConfig.worker_config)
  return p != NULL ? *p : *reinterpret_cast<const ::google::cloud::dataproc::v1::InstanceGroupConfig*>(
      &::google::cloud::dataproc::v1::_InstanceGroupConfig_default_instance_);
}
inline ::google::cloud::dataproc::v1::InstanceGroupConfig* ClusterConfig::release_worker_config() {
  // @@protoc_insertion_point(field_release:google.cloud.dataproc.v1.ClusterConfig.worker_config)
  
  ::google::cloud::dataproc::v1::InstanceGroupConfig* temp = worker_config_;
  worker_config_ = NULL;
  return temp;
}
inline ::google::cloud::dataproc::v1::InstanceGroupConfig* ClusterConfig::mutable_worker_config() {
  
  if (worker_config_ == NULL) {
    worker_config_ = new ::google::cloud::dataproc::v1::InstanceGroupConfig;
  }
  // @@protoc_insertion_point(field_mutable:google.cloud.dataproc.v1.ClusterConfig.worker_config)
  return worker_config_;
}
inline void ClusterConfig::set_allocated_worker_config(::google::cloud::dataproc::v1::InstanceGroupConfig* worker_config) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete worker_config_;
  }
  if (worker_config) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      worker_config = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, worker_config, submessage_arena);
    }
    
  } else {
    
  }
  worker_config_ = worker_config;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dataproc.v1.ClusterConfig.worker_config)
}

// .google.cloud.dataproc.v1.InstanceGroupConfig secondary_worker_config = 12;
inline bool ClusterConfig::has_secondary_worker_config() const {
  return this != internal_default_instance() && secondary_worker_config_ != NULL;
}
inline void ClusterConfig::clear_secondary_worker_config() {
  if (GetArenaNoVirtual() == NULL && secondary_worker_config_ != NULL) {
    delete secondary_worker_config_;
  }
  secondary_worker_config_ = NULL;
}
inline const ::google::cloud::dataproc::v1::InstanceGroupConfig& ClusterConfig::secondary_worker_config() const {
  const ::google::cloud::dataproc::v1::InstanceGroupConfig* p = secondary_worker_config_;
  // @@protoc_insertion_point(field_get:google.cloud.dataproc.v1.ClusterConfig.secondary_worker_config)
  return p != NULL ? *p : *reinterpret_cast<const ::google::cloud::dataproc::v1::InstanceGroupConfig*>(
      &::google::cloud::dataproc::v1::_InstanceGroupConfig_default_instance_);
}
inline ::google::cloud::dataproc::v1::InstanceGroupConfig* ClusterConfig::release_secondary_worker_config() {
  // @@protoc_insertion_point(field_release:google.cloud.dataproc.v1.ClusterConfig.secondary_worker_config)
  
  ::google::cloud::dataproc::v1::InstanceGroupConfig* temp = secondary_worker_config_;
  secondary_worker_config_ = NULL;
  return temp;
}
inline ::google::cloud::dataproc::v1::InstanceGroupConfig* ClusterConfig::mutable_secondary_worker_config() {
  
  if (secondary_worker_config_ == NULL) {
    secondary_worker_config_ = new ::google::cloud::dataproc::v1::InstanceGroupConfig;
  }
  // @@protoc_insertion_point(field_mutable:google.cloud.dataproc.v1.ClusterConfig.secondary_worker_config)
  return secondary_worker_config_;
}
inline void ClusterConfig::set_allocated_secondary_worker_config(::google::cloud::dataproc::v1::InstanceGroupConfig* secondary_worker_config) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete secondary_worker_config_;
  }
  if (secondary_worker_config) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      secondary_worker_config = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, secondary_worker_config, submessage_arena);
    }
    
  } else {
    
  }
  secondary_worker_config_ = secondary_worker_config;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dataproc.v1.ClusterConfig.secondary_worker_config)
}

// .google.cloud.dataproc.v1.SoftwareConfig software_config = 13;
inline bool ClusterConfig::has_software_config() const {
  return this != internal_default_instance() && software_config_ != NULL;
}
inline void ClusterConfig::clear_software_config() {
  if (GetArenaNoVirtual() == NULL && software_config_ != NULL) {
    delete software_config_;
  }
  software_config_ = NULL;
}
inline const ::google::cloud::dataproc::v1::SoftwareConfig& ClusterConfig::software_config() const {
  const ::google::cloud::dataproc::v1::SoftwareConfig* p = software_config_;
  // @@protoc_insertion_point(field_get:google.cloud.dataproc.v1.ClusterConfig.software_config)
  return p != NULL ? *p : *reinterpret_cast<const ::google::cloud::dataproc::v1::SoftwareConfig*>(
      &::google::cloud::dataproc::v1::_SoftwareConfig_default_instance_);
}
inline ::google::cloud::dataproc::v1::SoftwareConfig* ClusterConfig::release_software_config() {
  // @@protoc_insertion_point(field_release:google.cloud.dataproc.v1.ClusterConfig.software_config)
  
  ::google::cloud::dataproc::v1::SoftwareConfig* temp = software_config_;
  software_config_ = NULL;
  return temp;
}
inline ::google::cloud::dataproc::v1::SoftwareConfig* ClusterConfig::mutable_software_config() {
  
  if (software_config_ == NULL) {
    software_config_ = new ::google::cloud::dataproc::v1::SoftwareConfig;
  }
  // @@protoc_insertion_point(field_mutable:google.cloud.dataproc.v1.ClusterConfig.software_config)
  return software_config_;
}
inline void ClusterConfig::set_allocated_software_config(::google::cloud::dataproc::v1::SoftwareConfig* software_config) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete software_config_;
  }
  if (software_config) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      software_config = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, software_config, submessage_arena);
    }
    
  } else {
    
  }
  software_config_ = software_config;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dataproc.v1.ClusterConfig.software_config)
}

// repeated .google.cloud.dataproc.v1.NodeInitializationAction initialization_actions = 11;
inline int ClusterConfig::initialization_actions_size() const {
  return initialization_actions_.size();
}
inline void ClusterConfig::clear_initialization_actions() {
  initialization_actions_.Clear();
}
inline const ::google::cloud::dataproc::v1::NodeInitializationAction& ClusterConfig::initialization_actions(int index) const {
  // @@protoc_insertion_point(field_get:google.cloud.dataproc.v1.ClusterConfig.initialization_actions)
  return initialization_actions_.Get(index);
}
inline ::google::cloud::dataproc::v1::NodeInitializationAction* ClusterConfig::mutable_initialization_actions(int index) {
  // @@protoc_insertion_point(field_mutable:google.cloud.dataproc.v1.ClusterConfig.initialization_actions)
  return initialization_actions_.Mutable(index);
}
inline ::google::cloud::dataproc::v1::NodeInitializationAction* ClusterConfig::add_initialization_actions() {
  // @@protoc_insertion_point(field_add:google.cloud.dataproc.v1.ClusterConfig.initialization_actions)
  return initialization_actions_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::google::cloud::dataproc::v1::NodeInitializationAction >*
ClusterConfig::mutable_initialization_actions() {
  // @@protoc_insertion_point(field_mutable_list:google.cloud.dataproc.v1.ClusterConfig.initialization_actions)
  return &initialization_actions_;
}
inline const ::google::protobuf::RepeatedPtrField< ::google::cloud::dataproc::v1::NodeInitializationAction >&
ClusterConfig::initialization_actions() const {
  // @@protoc_insertion_point(field_list:google.cloud.dataproc.v1.ClusterConfig.initialization_actions)
  return initialization_actions_;
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// GceClusterConfig

// string zone_uri = 1;
inline void GceClusterConfig::clear_zone_uri() {
  zone_uri_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GceClusterConfig::zone_uri() const {
  // @@protoc_insertion_point(field_get:google.cloud.dataproc.v1.GceClusterConfig.zone_uri)
  return zone_uri_.GetNoArena();
}
inline void GceClusterConfig::set_zone_uri(const ::std::string& value) {
  
  zone_uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.cloud.dataproc.v1.GceClusterConfig.zone_uri)
}
#if LANG_CXX11
inline void GceClusterConfig::set_zone_uri(::std::string&& value) {
  
  zone_uri_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.dataproc.v1.GceClusterConfig.zone_uri)
}
#endif
inline void GceClusterConfig::set_zone_uri(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  zone_uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.cloud.dataproc.v1.GceClusterConfig.zone_uri)
}
inline void GceClusterConfig::set_zone_uri(const char* value, size_t size) {
  
  zone_uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.cloud.dataproc.v1.GceClusterConfig.zone_uri)
}
inline ::std::string* GceClusterConfig::mutable_zone_uri() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.dataproc.v1.GceClusterConfig.zone_uri)
  return zone_uri_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GceClusterConfig::release_zone_uri() {
  // @@protoc_insertion_point(field_release:google.cloud.dataproc.v1.GceClusterConfig.zone_uri)
  
  return zone_uri_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GceClusterConfig::set_allocated_zone_uri(::std::string* zone_uri) {
  if (zone_uri != NULL) {
    
  } else {
    
  }
  zone_uri_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), zone_uri);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dataproc.v1.GceClusterConfig.zone_uri)
}

// string network_uri = 2;
inline void GceClusterConfig::clear_network_uri() {
  network_uri_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GceClusterConfig::network_uri() const {
  // @@protoc_insertion_point(field_get:google.cloud.dataproc.v1.GceClusterConfig.network_uri)
  return network_uri_.GetNoArena();
}
inline void GceClusterConfig::set_network_uri(const ::std::string& value) {
  
  network_uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.cloud.dataproc.v1.GceClusterConfig.network_uri)
}
#if LANG_CXX11
inline void GceClusterConfig::set_network_uri(::std::string&& value) {
  
  network_uri_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.dataproc.v1.GceClusterConfig.network_uri)
}
#endif
inline void GceClusterConfig::set_network_uri(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  network_uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.cloud.dataproc.v1.GceClusterConfig.network_uri)
}
inline void GceClusterConfig::set_network_uri(const char* value, size_t size) {
  
  network_uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.cloud.dataproc.v1.GceClusterConfig.network_uri)
}
inline ::std::string* GceClusterConfig::mutable_network_uri() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.dataproc.v1.GceClusterConfig.network_uri)
  return network_uri_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GceClusterConfig::release_network_uri() {
  // @@protoc_insertion_point(field_release:google.cloud.dataproc.v1.GceClusterConfig.network_uri)
  
  return network_uri_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GceClusterConfig::set_allocated_network_uri(::std::string* network_uri) {
  if (network_uri != NULL) {
    
  } else {
    
  }
  network_uri_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), network_uri);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dataproc.v1.GceClusterConfig.network_uri)
}

// string subnetwork_uri = 6;
inline void GceClusterConfig::clear_subnetwork_uri() {
  subnetwork_uri_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GceClusterConfig::subnetwork_uri() const {
  // @@protoc_insertion_point(field_get:google.cloud.dataproc.v1.GceClusterConfig.subnetwork_uri)
  return subnetwork_uri_.GetNoArena();
}
inline void GceClusterConfig::set_subnetwork_uri(const ::std::string& value) {
  
  subnetwork_uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.cloud.dataproc.v1.GceClusterConfig.subnetwork_uri)
}
#if LANG_CXX11
inline void GceClusterConfig::set_subnetwork_uri(::std::string&& value) {
  
  subnetwork_uri_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.dataproc.v1.GceClusterConfig.subnetwork_uri)
}
#endif
inline void GceClusterConfig::set_subnetwork_uri(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  subnetwork_uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.cloud.dataproc.v1.GceClusterConfig.subnetwork_uri)
}
inline void GceClusterConfig::set_subnetwork_uri(const char* value, size_t size) {
  
  subnetwork_uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.cloud.dataproc.v1.GceClusterConfig.subnetwork_uri)
}
inline ::std::string* GceClusterConfig::mutable_subnetwork_uri() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.dataproc.v1.GceClusterConfig.subnetwork_uri)
  return subnetwork_uri_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GceClusterConfig::release_subnetwork_uri() {
  // @@protoc_insertion_point(field_release:google.cloud.dataproc.v1.GceClusterConfig.subnetwork_uri)
  
  return subnetwork_uri_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GceClusterConfig::set_allocated_subnetwork_uri(::std::string* subnetwork_uri) {
  if (subnetwork_uri != NULL) {
    
  } else {
    
  }
  subnetwork_uri_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), subnetwork_uri);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dataproc.v1.GceClusterConfig.subnetwork_uri)
}

// bool internal_ip_only = 7;
inline void GceClusterConfig::clear_internal_ip_only() {
  internal_ip_only_ = false;
}
inline bool GceClusterConfig::internal_ip_only() const {
  // @@protoc_insertion_point(field_get:google.cloud.dataproc.v1.GceClusterConfig.internal_ip_only)
  return internal_ip_only_;
}
inline void GceClusterConfig::set_internal_ip_only(bool value) {
  
  internal_ip_only_ = value;
  // @@protoc_insertion_point(field_set:google.cloud.dataproc.v1.GceClusterConfig.internal_ip_only)
}

// repeated string service_account_scopes = 3;
inline int GceClusterConfig::service_account_scopes_size() const {
  return service_account_scopes_.size();
}
inline void GceClusterConfig::clear_service_account_scopes() {
  service_account_scopes_.Clear();
}
inline const ::std::string& GceClusterConfig::service_account_scopes(int index) const {
  // @@protoc_insertion_point(field_get:google.cloud.dataproc.v1.GceClusterConfig.service_account_scopes)
  return service_account_scopes_.Get(index);
}
inline ::std::string* GceClusterConfig::mutable_service_account_scopes(int index) {
  // @@protoc_insertion_point(field_mutable:google.cloud.dataproc.v1.GceClusterConfig.service_account_scopes)
  return service_account_scopes_.Mutable(index);
}
inline void GceClusterConfig::set_service_account_scopes(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:google.cloud.dataproc.v1.GceClusterConfig.service_account_scopes)
  service_account_scopes_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void GceClusterConfig::set_service_account_scopes(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:google.cloud.dataproc.v1.GceClusterConfig.service_account_scopes)
  service_account_scopes_.Mutable(index)->assign(std::move(value));
}
#endif
inline void GceClusterConfig::set_service_account_scopes(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  service_account_scopes_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:google.cloud.dataproc.v1.GceClusterConfig.service_account_scopes)
}
inline void GceClusterConfig::set_service_account_scopes(int index, const char* value, size_t size) {
  service_account_scopes_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:google.cloud.dataproc.v1.GceClusterConfig.service_account_scopes)
}
inline ::std::string* GceClusterConfig::add_service_account_scopes() {
  // @@protoc_insertion_point(field_add_mutable:google.cloud.dataproc.v1.GceClusterConfig.service_account_scopes)
  return service_account_scopes_.Add();
}
inline void GceClusterConfig::add_service_account_scopes(const ::std::string& value) {
  service_account_scopes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:google.cloud.dataproc.v1.GceClusterConfig.service_account_scopes)
}
#if LANG_CXX11
inline void GceClusterConfig::add_service_account_scopes(::std::string&& value) {
  service_account_scopes_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:google.cloud.dataproc.v1.GceClusterConfig.service_account_scopes)
}
#endif
inline void GceClusterConfig::add_service_account_scopes(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  service_account_scopes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:google.cloud.dataproc.v1.GceClusterConfig.service_account_scopes)
}
inline void GceClusterConfig::add_service_account_scopes(const char* value, size_t size) {
  service_account_scopes_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:google.cloud.dataproc.v1.GceClusterConfig.service_account_scopes)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
GceClusterConfig::service_account_scopes() const {
  // @@protoc_insertion_point(field_list:google.cloud.dataproc.v1.GceClusterConfig.service_account_scopes)
  return service_account_scopes_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
GceClusterConfig::mutable_service_account_scopes() {
  // @@protoc_insertion_point(field_mutable_list:google.cloud.dataproc.v1.GceClusterConfig.service_account_scopes)
  return &service_account_scopes_;
}

// repeated string tags = 4;
inline int GceClusterConfig::tags_size() const {
  return tags_.size();
}
inline void GceClusterConfig::clear_tags() {
  tags_.Clear();
}
inline const ::std::string& GceClusterConfig::tags(int index) const {
  // @@protoc_insertion_point(field_get:google.cloud.dataproc.v1.GceClusterConfig.tags)
  return tags_.Get(index);
}
inline ::std::string* GceClusterConfig::mutable_tags(int index) {
  // @@protoc_insertion_point(field_mutable:google.cloud.dataproc.v1.GceClusterConfig.tags)
  return tags_.Mutable(index);
}
inline void GceClusterConfig::set_tags(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:google.cloud.dataproc.v1.GceClusterConfig.tags)
  tags_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void GceClusterConfig::set_tags(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:google.cloud.dataproc.v1.GceClusterConfig.tags)
  tags_.Mutable(index)->assign(std::move(value));
}
#endif
inline void GceClusterConfig::set_tags(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  tags_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:google.cloud.dataproc.v1.GceClusterConfig.tags)
}
inline void GceClusterConfig::set_tags(int index, const char* value, size_t size) {
  tags_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:google.cloud.dataproc.v1.GceClusterConfig.tags)
}
inline ::std::string* GceClusterConfig::add_tags() {
  // @@protoc_insertion_point(field_add_mutable:google.cloud.dataproc.v1.GceClusterConfig.tags)
  return tags_.Add();
}
inline void GceClusterConfig::add_tags(const ::std::string& value) {
  tags_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:google.cloud.dataproc.v1.GceClusterConfig.tags)
}
#if LANG_CXX11
inline void GceClusterConfig::add_tags(::std::string&& value) {
  tags_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:google.cloud.dataproc.v1.GceClusterConfig.tags)
}
#endif
inline void GceClusterConfig::add_tags(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  tags_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:google.cloud.dataproc.v1.GceClusterConfig.tags)
}
inline void GceClusterConfig::add_tags(const char* value, size_t size) {
  tags_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:google.cloud.dataproc.v1.GceClusterConfig.tags)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
GceClusterConfig::tags() const {
  // @@protoc_insertion_point(field_list:google.cloud.dataproc.v1.GceClusterConfig.tags)
  return tags_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
GceClusterConfig::mutable_tags() {
  // @@protoc_insertion_point(field_mutable_list:google.cloud.dataproc.v1.GceClusterConfig.tags)
  return &tags_;
}

// map<string, string> metadata = 5;
inline int GceClusterConfig::metadata_size() const {
  return metadata_.size();
}
inline void GceClusterConfig::clear_metadata() {
  metadata_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::std::string >&
GceClusterConfig::metadata() const {
  // @@protoc_insertion_point(field_map:google.cloud.dataproc.v1.GceClusterConfig.metadata)
  return metadata_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::std::string >*
GceClusterConfig::mutable_metadata() {
  // @@protoc_insertion_point(field_mutable_map:google.cloud.dataproc.v1.GceClusterConfig.metadata)
  return metadata_.MutableMap();
}

// -------------------------------------------------------------------

// InstanceGroupConfig

// int32 num_instances = 1;
inline void InstanceGroupConfig::clear_num_instances() {
  num_instances_ = 0;
}
inline ::google::protobuf::int32 InstanceGroupConfig::num_instances() const {
  // @@protoc_insertion_point(field_get:google.cloud.dataproc.v1.InstanceGroupConfig.num_instances)
  return num_instances_;
}
inline void InstanceGroupConfig::set_num_instances(::google::protobuf::int32 value) {
  
  num_instances_ = value;
  // @@protoc_insertion_point(field_set:google.cloud.dataproc.v1.InstanceGroupConfig.num_instances)
}

// repeated string instance_names = 2;
inline int InstanceGroupConfig::instance_names_size() const {
  return instance_names_.size();
}
inline void InstanceGroupConfig::clear_instance_names() {
  instance_names_.Clear();
}
inline const ::std::string& InstanceGroupConfig::instance_names(int index) const {
  // @@protoc_insertion_point(field_get:google.cloud.dataproc.v1.InstanceGroupConfig.instance_names)
  return instance_names_.Get(index);
}
inline ::std::string* InstanceGroupConfig::mutable_instance_names(int index) {
  // @@protoc_insertion_point(field_mutable:google.cloud.dataproc.v1.InstanceGroupConfig.instance_names)
  return instance_names_.Mutable(index);
}
inline void InstanceGroupConfig::set_instance_names(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:google.cloud.dataproc.v1.InstanceGroupConfig.instance_names)
  instance_names_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void InstanceGroupConfig::set_instance_names(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:google.cloud.dataproc.v1.InstanceGroupConfig.instance_names)
  instance_names_.Mutable(index)->assign(std::move(value));
}
#endif
inline void InstanceGroupConfig::set_instance_names(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  instance_names_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:google.cloud.dataproc.v1.InstanceGroupConfig.instance_names)
}
inline void InstanceGroupConfig::set_instance_names(int index, const char* value, size_t size) {
  instance_names_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:google.cloud.dataproc.v1.InstanceGroupConfig.instance_names)
}
inline ::std::string* InstanceGroupConfig::add_instance_names() {
  // @@protoc_insertion_point(field_add_mutable:google.cloud.dataproc.v1.InstanceGroupConfig.instance_names)
  return instance_names_.Add();
}
inline void InstanceGroupConfig::add_instance_names(const ::std::string& value) {
  instance_names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:google.cloud.dataproc.v1.InstanceGroupConfig.instance_names)
}
#if LANG_CXX11
inline void InstanceGroupConfig::add_instance_names(::std::string&& value) {
  instance_names_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:google.cloud.dataproc.v1.InstanceGroupConfig.instance_names)
}
#endif
inline void InstanceGroupConfig::add_instance_names(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  instance_names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:google.cloud.dataproc.v1.InstanceGroupConfig.instance_names)
}
inline void InstanceGroupConfig::add_instance_names(const char* value, size_t size) {
  instance_names_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:google.cloud.dataproc.v1.InstanceGroupConfig.instance_names)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
InstanceGroupConfig::instance_names() const {
  // @@protoc_insertion_point(field_list:google.cloud.dataproc.v1.InstanceGroupConfig.instance_names)
  return instance_names_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
InstanceGroupConfig::mutable_instance_names() {
  // @@protoc_insertion_point(field_mutable_list:google.cloud.dataproc.v1.InstanceGroupConfig.instance_names)
  return &instance_names_;
}

// string image_uri = 3;
inline void InstanceGroupConfig::clear_image_uri() {
  image_uri_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& InstanceGroupConfig::image_uri() const {
  // @@protoc_insertion_point(field_get:google.cloud.dataproc.v1.InstanceGroupConfig.image_uri)
  return image_uri_.GetNoArena();
}
inline void InstanceGroupConfig::set_image_uri(const ::std::string& value) {
  
  image_uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.cloud.dataproc.v1.InstanceGroupConfig.image_uri)
}
#if LANG_CXX11
inline void InstanceGroupConfig::set_image_uri(::std::string&& value) {
  
  image_uri_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.dataproc.v1.InstanceGroupConfig.image_uri)
}
#endif
inline void InstanceGroupConfig::set_image_uri(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  image_uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.cloud.dataproc.v1.InstanceGroupConfig.image_uri)
}
inline void InstanceGroupConfig::set_image_uri(const char* value, size_t size) {
  
  image_uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.cloud.dataproc.v1.InstanceGroupConfig.image_uri)
}
inline ::std::string* InstanceGroupConfig::mutable_image_uri() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.dataproc.v1.InstanceGroupConfig.image_uri)
  return image_uri_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* InstanceGroupConfig::release_image_uri() {
  // @@protoc_insertion_point(field_release:google.cloud.dataproc.v1.InstanceGroupConfig.image_uri)
  
  return image_uri_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void InstanceGroupConfig::set_allocated_image_uri(::std::string* image_uri) {
  if (image_uri != NULL) {
    
  } else {
    
  }
  image_uri_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), image_uri);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dataproc.v1.InstanceGroupConfig.image_uri)
}

// string machine_type_uri = 4;
inline void InstanceGroupConfig::clear_machine_type_uri() {
  machine_type_uri_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& InstanceGroupConfig::machine_type_uri() const {
  // @@protoc_insertion_point(field_get:google.cloud.dataproc.v1.InstanceGroupConfig.machine_type_uri)
  return machine_type_uri_.GetNoArena();
}
inline void InstanceGroupConfig::set_machine_type_uri(const ::std::string& value) {
  
  machine_type_uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.cloud.dataproc.v1.InstanceGroupConfig.machine_type_uri)
}
#if LANG_CXX11
inline void InstanceGroupConfig::set_machine_type_uri(::std::string&& value) {
  
  machine_type_uri_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.dataproc.v1.InstanceGroupConfig.machine_type_uri)
}
#endif
inline void InstanceGroupConfig::set_machine_type_uri(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  machine_type_uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.cloud.dataproc.v1.InstanceGroupConfig.machine_type_uri)
}
inline void InstanceGroupConfig::set_machine_type_uri(const char* value, size_t size) {
  
  machine_type_uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.cloud.dataproc.v1.InstanceGroupConfig.machine_type_uri)
}
inline ::std::string* InstanceGroupConfig::mutable_machine_type_uri() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.dataproc.v1.InstanceGroupConfig.machine_type_uri)
  return machine_type_uri_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* InstanceGroupConfig::release_machine_type_uri() {
  // @@protoc_insertion_point(field_release:google.cloud.dataproc.v1.InstanceGroupConfig.machine_type_uri)
  
  return machine_type_uri_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void InstanceGroupConfig::set_allocated_machine_type_uri(::std::string* machine_type_uri) {
  if (machine_type_uri != NULL) {
    
  } else {
    
  }
  machine_type_uri_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), machine_type_uri);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dataproc.v1.InstanceGroupConfig.machine_type_uri)
}

// .google.cloud.dataproc.v1.DiskConfig disk_config = 5;
inline bool InstanceGroupConfig::has_disk_config() const {
  return this != internal_default_instance() && disk_config_ != NULL;
}
inline void InstanceGroupConfig::clear_disk_config() {
  if (GetArenaNoVirtual() == NULL && disk_config_ != NULL) {
    delete disk_config_;
  }
  disk_config_ = NULL;
}
inline const ::google::cloud::dataproc::v1::DiskConfig& InstanceGroupConfig::disk_config() const {
  const ::google::cloud::dataproc::v1::DiskConfig* p = disk_config_;
  // @@protoc_insertion_point(field_get:google.cloud.dataproc.v1.InstanceGroupConfig.disk_config)
  return p != NULL ? *p : *reinterpret_cast<const ::google::cloud::dataproc::v1::DiskConfig*>(
      &::google::cloud::dataproc::v1::_DiskConfig_default_instance_);
}
inline ::google::cloud::dataproc::v1::DiskConfig* InstanceGroupConfig::release_disk_config() {
  // @@protoc_insertion_point(field_release:google.cloud.dataproc.v1.InstanceGroupConfig.disk_config)
  
  ::google::cloud::dataproc::v1::DiskConfig* temp = disk_config_;
  disk_config_ = NULL;
  return temp;
}
inline ::google::cloud::dataproc::v1::DiskConfig* InstanceGroupConfig::mutable_disk_config() {
  
  if (disk_config_ == NULL) {
    disk_config_ = new ::google::cloud::dataproc::v1::DiskConfig;
  }
  // @@protoc_insertion_point(field_mutable:google.cloud.dataproc.v1.InstanceGroupConfig.disk_config)
  return disk_config_;
}
inline void InstanceGroupConfig::set_allocated_disk_config(::google::cloud::dataproc::v1::DiskConfig* disk_config) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete disk_config_;
  }
  if (disk_config) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      disk_config = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, disk_config, submessage_arena);
    }
    
  } else {
    
  }
  disk_config_ = disk_config;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dataproc.v1.InstanceGroupConfig.disk_config)
}

// bool is_preemptible = 6;
inline void InstanceGroupConfig::clear_is_preemptible() {
  is_preemptible_ = false;
}
inline bool InstanceGroupConfig::is_preemptible() const {
  // @@protoc_insertion_point(field_get:google.cloud.dataproc.v1.InstanceGroupConfig.is_preemptible)
  return is_preemptible_;
}
inline void InstanceGroupConfig::set_is_preemptible(bool value) {
  
  is_preemptible_ = value;
  // @@protoc_insertion_point(field_set:google.cloud.dataproc.v1.InstanceGroupConfig.is_preemptible)
}

// .google.cloud.dataproc.v1.ManagedGroupConfig managed_group_config = 7;
inline bool InstanceGroupConfig::has_managed_group_config() const {
  return this != internal_default_instance() && managed_group_config_ != NULL;
}
inline void InstanceGroupConfig::clear_managed_group_config() {
  if (GetArenaNoVirtual() == NULL && managed_group_config_ != NULL) {
    delete managed_group_config_;
  }
  managed_group_config_ = NULL;
}
inline const ::google::cloud::dataproc::v1::ManagedGroupConfig& InstanceGroupConfig::managed_group_config() const {
  const ::google::cloud::dataproc::v1::ManagedGroupConfig* p = managed_group_config_;
  // @@protoc_insertion_point(field_get:google.cloud.dataproc.v1.InstanceGroupConfig.managed_group_config)
  return p != NULL ? *p : *reinterpret_cast<const ::google::cloud::dataproc::v1::ManagedGroupConfig*>(
      &::google::cloud::dataproc::v1::_ManagedGroupConfig_default_instance_);
}
inline ::google::cloud::dataproc::v1::ManagedGroupConfig* InstanceGroupConfig::release_managed_group_config() {
  // @@protoc_insertion_point(field_release:google.cloud.dataproc.v1.InstanceGroupConfig.managed_group_config)
  
  ::google::cloud::dataproc::v1::ManagedGroupConfig* temp = managed_group_config_;
  managed_group_config_ = NULL;
  return temp;
}
inline ::google::cloud::dataproc::v1::ManagedGroupConfig* InstanceGroupConfig::mutable_managed_group_config() {
  
  if (managed_group_config_ == NULL) {
    managed_group_config_ = new ::google::cloud::dataproc::v1::ManagedGroupConfig;
  }
  // @@protoc_insertion_point(field_mutable:google.cloud.dataproc.v1.InstanceGroupConfig.managed_group_config)
  return managed_group_config_;
}
inline void InstanceGroupConfig::set_allocated_managed_group_config(::google::cloud::dataproc::v1::ManagedGroupConfig* managed_group_config) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete managed_group_config_;
  }
  if (managed_group_config) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      managed_group_config = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, managed_group_config, submessage_arena);
    }
    
  } else {
    
  }
  managed_group_config_ = managed_group_config;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dataproc.v1.InstanceGroupConfig.managed_group_config)
}

// -------------------------------------------------------------------

// ManagedGroupConfig

// string instance_template_name = 1;
inline void ManagedGroupConfig::clear_instance_template_name() {
  instance_template_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ManagedGroupConfig::instance_template_name() const {
  // @@protoc_insertion_point(field_get:google.cloud.dataproc.v1.ManagedGroupConfig.instance_template_name)
  return instance_template_name_.GetNoArena();
}
inline void ManagedGroupConfig::set_instance_template_name(const ::std::string& value) {
  
  instance_template_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.cloud.dataproc.v1.ManagedGroupConfig.instance_template_name)
}
#if LANG_CXX11
inline void ManagedGroupConfig::set_instance_template_name(::std::string&& value) {
  
  instance_template_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.dataproc.v1.ManagedGroupConfig.instance_template_name)
}
#endif
inline void ManagedGroupConfig::set_instance_template_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  instance_template_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.cloud.dataproc.v1.ManagedGroupConfig.instance_template_name)
}
inline void ManagedGroupConfig::set_instance_template_name(const char* value, size_t size) {
  
  instance_template_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.cloud.dataproc.v1.ManagedGroupConfig.instance_template_name)
}
inline ::std::string* ManagedGroupConfig::mutable_instance_template_name() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.dataproc.v1.ManagedGroupConfig.instance_template_name)
  return instance_template_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ManagedGroupConfig::release_instance_template_name() {
  // @@protoc_insertion_point(field_release:google.cloud.dataproc.v1.ManagedGroupConfig.instance_template_name)
  
  return instance_template_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ManagedGroupConfig::set_allocated_instance_template_name(::std::string* instance_template_name) {
  if (instance_template_name != NULL) {
    
  } else {
    
  }
  instance_template_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), instance_template_name);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dataproc.v1.ManagedGroupConfig.instance_template_name)
}

// string instance_group_manager_name = 2;
inline void ManagedGroupConfig::clear_instance_group_manager_name() {
  instance_group_manager_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ManagedGroupConfig::instance_group_manager_name() const {
  // @@protoc_insertion_point(field_get:google.cloud.dataproc.v1.ManagedGroupConfig.instance_group_manager_name)
  return instance_group_manager_name_.GetNoArena();
}
inline void ManagedGroupConfig::set_instance_group_manager_name(const ::std::string& value) {
  
  instance_group_manager_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.cloud.dataproc.v1.ManagedGroupConfig.instance_group_manager_name)
}
#if LANG_CXX11
inline void ManagedGroupConfig::set_instance_group_manager_name(::std::string&& value) {
  
  instance_group_manager_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.dataproc.v1.ManagedGroupConfig.instance_group_manager_name)
}
#endif
inline void ManagedGroupConfig::set_instance_group_manager_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  instance_group_manager_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.cloud.dataproc.v1.ManagedGroupConfig.instance_group_manager_name)
}
inline void ManagedGroupConfig::set_instance_group_manager_name(const char* value, size_t size) {
  
  instance_group_manager_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.cloud.dataproc.v1.ManagedGroupConfig.instance_group_manager_name)
}
inline ::std::string* ManagedGroupConfig::mutable_instance_group_manager_name() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.dataproc.v1.ManagedGroupConfig.instance_group_manager_name)
  return instance_group_manager_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ManagedGroupConfig::release_instance_group_manager_name() {
  // @@protoc_insertion_point(field_release:google.cloud.dataproc.v1.ManagedGroupConfig.instance_group_manager_name)
  
  return instance_group_manager_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ManagedGroupConfig::set_allocated_instance_group_manager_name(::std::string* instance_group_manager_name) {
  if (instance_group_manager_name != NULL) {
    
  } else {
    
  }
  instance_group_manager_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), instance_group_manager_name);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dataproc.v1.ManagedGroupConfig.instance_group_manager_name)
}

// -------------------------------------------------------------------

// DiskConfig

// int32 boot_disk_size_gb = 1;
inline void DiskConfig::clear_boot_disk_size_gb() {
  boot_disk_size_gb_ = 0;
}
inline ::google::protobuf::int32 DiskConfig::boot_disk_size_gb() const {
  // @@protoc_insertion_point(field_get:google.cloud.dataproc.v1.DiskConfig.boot_disk_size_gb)
  return boot_disk_size_gb_;
}
inline void DiskConfig::set_boot_disk_size_gb(::google::protobuf::int32 value) {
  
  boot_disk_size_gb_ = value;
  // @@protoc_insertion_point(field_set:google.cloud.dataproc.v1.DiskConfig.boot_disk_size_gb)
}

// int32 num_local_ssds = 2;
inline void DiskConfig::clear_num_local_ssds() {
  num_local_ssds_ = 0;
}
inline ::google::protobuf::int32 DiskConfig::num_local_ssds() const {
  // @@protoc_insertion_point(field_get:google.cloud.dataproc.v1.DiskConfig.num_local_ssds)
  return num_local_ssds_;
}
inline void DiskConfig::set_num_local_ssds(::google::protobuf::int32 value) {
  
  num_local_ssds_ = value;
  // @@protoc_insertion_point(field_set:google.cloud.dataproc.v1.DiskConfig.num_local_ssds)
}

// -------------------------------------------------------------------

// NodeInitializationAction

// string executable_file = 1;
inline void NodeInitializationAction::clear_executable_file() {
  executable_file_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& NodeInitializationAction::executable_file() const {
  // @@protoc_insertion_point(field_get:google.cloud.dataproc.v1.NodeInitializationAction.executable_file)
  return executable_file_.GetNoArena();
}
inline void NodeInitializationAction::set_executable_file(const ::std::string& value) {
  
  executable_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.cloud.dataproc.v1.NodeInitializationAction.executable_file)
}
#if LANG_CXX11
inline void NodeInitializationAction::set_executable_file(::std::string&& value) {
  
  executable_file_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.dataproc.v1.NodeInitializationAction.executable_file)
}
#endif
inline void NodeInitializationAction::set_executable_file(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  executable_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.cloud.dataproc.v1.NodeInitializationAction.executable_file)
}
inline void NodeInitializationAction::set_executable_file(const char* value, size_t size) {
  
  executable_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.cloud.dataproc.v1.NodeInitializationAction.executable_file)
}
inline ::std::string* NodeInitializationAction::mutable_executable_file() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.dataproc.v1.NodeInitializationAction.executable_file)
  return executable_file_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NodeInitializationAction::release_executable_file() {
  // @@protoc_insertion_point(field_release:google.cloud.dataproc.v1.NodeInitializationAction.executable_file)
  
  return executable_file_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NodeInitializationAction::set_allocated_executable_file(::std::string* executable_file) {
  if (executable_file != NULL) {
    
  } else {
    
  }
  executable_file_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), executable_file);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dataproc.v1.NodeInitializationAction.executable_file)
}

// .google.protobuf.Duration execution_timeout = 2;
inline bool NodeInitializationAction::has_execution_timeout() const {
  return this != internal_default_instance() && execution_timeout_ != NULL;
}
inline const ::google::protobuf::Duration& NodeInitializationAction::execution_timeout() const {
  const ::google::protobuf::Duration* p = execution_timeout_;
  // @@protoc_insertion_point(field_get:google.cloud.dataproc.v1.NodeInitializationAction.execution_timeout)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::Duration*>(
      &::google::protobuf::_Duration_default_instance_);
}
inline ::google::protobuf::Duration* NodeInitializationAction::release_execution_timeout() {
  // @@protoc_insertion_point(field_release:google.cloud.dataproc.v1.NodeInitializationAction.execution_timeout)
  
  ::google::protobuf::Duration* temp = execution_timeout_;
  execution_timeout_ = NULL;
  return temp;
}
inline ::google::protobuf::Duration* NodeInitializationAction::mutable_execution_timeout() {
  
  if (execution_timeout_ == NULL) {
    execution_timeout_ = new ::google::protobuf::Duration;
  }
  // @@protoc_insertion_point(field_mutable:google.cloud.dataproc.v1.NodeInitializationAction.execution_timeout)
  return execution_timeout_;
}
inline void NodeInitializationAction::set_allocated_execution_timeout(::google::protobuf::Duration* execution_timeout) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(execution_timeout_);
  }
  if (execution_timeout) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast< ::google::protobuf::MessageLite*>(execution_timeout)->GetArena();
    if (message_arena != submessage_arena) {
      execution_timeout = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, execution_timeout, submessage_arena);
    }
    
  } else {
    
  }
  execution_timeout_ = execution_timeout;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dataproc.v1.NodeInitializationAction.execution_timeout)
}

// -------------------------------------------------------------------

// ClusterStatus

// .google.cloud.dataproc.v1.ClusterStatus.State state = 1;
inline void ClusterStatus::clear_state() {
  state_ = 0;
}
inline ::google::cloud::dataproc::v1::ClusterStatus_State ClusterStatus::state() const {
  // @@protoc_insertion_point(field_get:google.cloud.dataproc.v1.ClusterStatus.state)
  return static_cast< ::google::cloud::dataproc::v1::ClusterStatus_State >(state_);
}
inline void ClusterStatus::set_state(::google::cloud::dataproc::v1::ClusterStatus_State value) {
  
  state_ = value;
  // @@protoc_insertion_point(field_set:google.cloud.dataproc.v1.ClusterStatus.state)
}

// string detail = 2;
inline void ClusterStatus::clear_detail() {
  detail_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ClusterStatus::detail() const {
  // @@protoc_insertion_point(field_get:google.cloud.dataproc.v1.ClusterStatus.detail)
  return detail_.GetNoArena();
}
inline void ClusterStatus::set_detail(const ::std::string& value) {
  
  detail_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.cloud.dataproc.v1.ClusterStatus.detail)
}
#if LANG_CXX11
inline void ClusterStatus::set_detail(::std::string&& value) {
  
  detail_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.dataproc.v1.ClusterStatus.detail)
}
#endif
inline void ClusterStatus::set_detail(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  detail_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.cloud.dataproc.v1.ClusterStatus.detail)
}
inline void ClusterStatus::set_detail(const char* value, size_t size) {
  
  detail_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.cloud.dataproc.v1.ClusterStatus.detail)
}
inline ::std::string* ClusterStatus::mutable_detail() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.dataproc.v1.ClusterStatus.detail)
  return detail_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ClusterStatus::release_detail() {
  // @@protoc_insertion_point(field_release:google.cloud.dataproc.v1.ClusterStatus.detail)
  
  return detail_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ClusterStatus::set_allocated_detail(::std::string* detail) {
  if (detail != NULL) {
    
  } else {
    
  }
  detail_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), detail);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dataproc.v1.ClusterStatus.detail)
}

// .google.protobuf.Timestamp state_start_time = 3;
inline bool ClusterStatus::has_state_start_time() const {
  return this != internal_default_instance() && state_start_time_ != NULL;
}
inline const ::google::protobuf::Timestamp& ClusterStatus::state_start_time() const {
  const ::google::protobuf::Timestamp* p = state_start_time_;
  // @@protoc_insertion_point(field_get:google.cloud.dataproc.v1.ClusterStatus.state_start_time)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::Timestamp*>(
      &::google::protobuf::_Timestamp_default_instance_);
}
inline ::google::protobuf::Timestamp* ClusterStatus::release_state_start_time() {
  // @@protoc_insertion_point(field_release:google.cloud.dataproc.v1.ClusterStatus.state_start_time)
  
  ::google::protobuf::Timestamp* temp = state_start_time_;
  state_start_time_ = NULL;
  return temp;
}
inline ::google::protobuf::Timestamp* ClusterStatus::mutable_state_start_time() {
  
  if (state_start_time_ == NULL) {
    state_start_time_ = new ::google::protobuf::Timestamp;
  }
  // @@protoc_insertion_point(field_mutable:google.cloud.dataproc.v1.ClusterStatus.state_start_time)
  return state_start_time_;
}
inline void ClusterStatus::set_allocated_state_start_time(::google::protobuf::Timestamp* state_start_time) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(state_start_time_);
  }
  if (state_start_time) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast< ::google::protobuf::MessageLite*>(state_start_time)->GetArena();
    if (message_arena != submessage_arena) {
      state_start_time = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, state_start_time, submessage_arena);
    }
    
  } else {
    
  }
  state_start_time_ = state_start_time;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dataproc.v1.ClusterStatus.state_start_time)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// SoftwareConfig

// string image_version = 1;
inline void SoftwareConfig::clear_image_version() {
  image_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SoftwareConfig::image_version() const {
  // @@protoc_insertion_point(field_get:google.cloud.dataproc.v1.SoftwareConfig.image_version)
  return image_version_.GetNoArena();
}
inline void SoftwareConfig::set_image_version(const ::std::string& value) {
  
  image_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.cloud.dataproc.v1.SoftwareConfig.image_version)
}
#if LANG_CXX11
inline void SoftwareConfig::set_image_version(::std::string&& value) {
  
  image_version_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.dataproc.v1.SoftwareConfig.image_version)
}
#endif
inline void SoftwareConfig::set_image_version(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  image_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.cloud.dataproc.v1.SoftwareConfig.image_version)
}
inline void SoftwareConfig::set_image_version(const char* value, size_t size) {
  
  image_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.cloud.dataproc.v1.SoftwareConfig.image_version)
}
inline ::std::string* SoftwareConfig::mutable_image_version() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.dataproc.v1.SoftwareConfig.image_version)
  return image_version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SoftwareConfig::release_image_version() {
  // @@protoc_insertion_point(field_release:google.cloud.dataproc.v1.SoftwareConfig.image_version)
  
  return image_version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SoftwareConfig::set_allocated_image_version(::std::string* image_version) {
  if (image_version != NULL) {
    
  } else {
    
  }
  image_version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), image_version);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dataproc.v1.SoftwareConfig.image_version)
}

// map<string, string> properties = 2;
inline int SoftwareConfig::properties_size() const {
  return properties_.size();
}
inline void SoftwareConfig::clear_properties() {
  properties_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::std::string >&
SoftwareConfig::properties() const {
  // @@protoc_insertion_point(field_map:google.cloud.dataproc.v1.SoftwareConfig.properties)
  return properties_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::std::string >*
SoftwareConfig::mutable_properties() {
  // @@protoc_insertion_point(field_mutable_map:google.cloud.dataproc.v1.SoftwareConfig.properties)
  return properties_.MutableMap();
}

// -------------------------------------------------------------------

// CreateClusterRequest

// string project_id = 1;
inline void CreateClusterRequest::clear_project_id() {
  project_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CreateClusterRequest::project_id() const {
  // @@protoc_insertion_point(field_get:google.cloud.dataproc.v1.CreateClusterRequest.project_id)
  return project_id_.GetNoArena();
}
inline void CreateClusterRequest::set_project_id(const ::std::string& value) {
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.cloud.dataproc.v1.CreateClusterRequest.project_id)
}
#if LANG_CXX11
inline void CreateClusterRequest::set_project_id(::std::string&& value) {
  
  project_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.dataproc.v1.CreateClusterRequest.project_id)
}
#endif
inline void CreateClusterRequest::set_project_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.cloud.dataproc.v1.CreateClusterRequest.project_id)
}
inline void CreateClusterRequest::set_project_id(const char* value, size_t size) {
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.cloud.dataproc.v1.CreateClusterRequest.project_id)
}
inline ::std::string* CreateClusterRequest::mutable_project_id() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.dataproc.v1.CreateClusterRequest.project_id)
  return project_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CreateClusterRequest::release_project_id() {
  // @@protoc_insertion_point(field_release:google.cloud.dataproc.v1.CreateClusterRequest.project_id)
  
  return project_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CreateClusterRequest::set_allocated_project_id(::std::string* project_id) {
  if (project_id != NULL) {
    
  } else {
    
  }
  project_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), project_id);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dataproc.v1.CreateClusterRequest.project_id)
}

// string region = 3;
inline void CreateClusterRequest::clear_region() {
  region_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CreateClusterRequest::region() const {
  // @@protoc_insertion_point(field_get:google.cloud.dataproc.v1.CreateClusterRequest.region)
  return region_.GetNoArena();
}
inline void CreateClusterRequest::set_region(const ::std::string& value) {
  
  region_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.cloud.dataproc.v1.CreateClusterRequest.region)
}
#if LANG_CXX11
inline void CreateClusterRequest::set_region(::std::string&& value) {
  
  region_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.dataproc.v1.CreateClusterRequest.region)
}
#endif
inline void CreateClusterRequest::set_region(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  region_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.cloud.dataproc.v1.CreateClusterRequest.region)
}
inline void CreateClusterRequest::set_region(const char* value, size_t size) {
  
  region_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.cloud.dataproc.v1.CreateClusterRequest.region)
}
inline ::std::string* CreateClusterRequest::mutable_region() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.dataproc.v1.CreateClusterRequest.region)
  return region_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CreateClusterRequest::release_region() {
  // @@protoc_insertion_point(field_release:google.cloud.dataproc.v1.CreateClusterRequest.region)
  
  return region_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CreateClusterRequest::set_allocated_region(::std::string* region) {
  if (region != NULL) {
    
  } else {
    
  }
  region_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), region);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dataproc.v1.CreateClusterRequest.region)
}

// .google.cloud.dataproc.v1.Cluster cluster = 2;
inline bool CreateClusterRequest::has_cluster() const {
  return this != internal_default_instance() && cluster_ != NULL;
}
inline void CreateClusterRequest::clear_cluster() {
  if (GetArenaNoVirtual() == NULL && cluster_ != NULL) {
    delete cluster_;
  }
  cluster_ = NULL;
}
inline const ::google::cloud::dataproc::v1::Cluster& CreateClusterRequest::cluster() const {
  const ::google::cloud::dataproc::v1::Cluster* p = cluster_;
  // @@protoc_insertion_point(field_get:google.cloud.dataproc.v1.CreateClusterRequest.cluster)
  return p != NULL ? *p : *reinterpret_cast<const ::google::cloud::dataproc::v1::Cluster*>(
      &::google::cloud::dataproc::v1::_Cluster_default_instance_);
}
inline ::google::cloud::dataproc::v1::Cluster* CreateClusterRequest::release_cluster() {
  // @@protoc_insertion_point(field_release:google.cloud.dataproc.v1.CreateClusterRequest.cluster)
  
  ::google::cloud::dataproc::v1::Cluster* temp = cluster_;
  cluster_ = NULL;
  return temp;
}
inline ::google::cloud::dataproc::v1::Cluster* CreateClusterRequest::mutable_cluster() {
  
  if (cluster_ == NULL) {
    cluster_ = new ::google::cloud::dataproc::v1::Cluster;
  }
  // @@protoc_insertion_point(field_mutable:google.cloud.dataproc.v1.CreateClusterRequest.cluster)
  return cluster_;
}
inline void CreateClusterRequest::set_allocated_cluster(::google::cloud::dataproc::v1::Cluster* cluster) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete cluster_;
  }
  if (cluster) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      cluster = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, cluster, submessage_arena);
    }
    
  } else {
    
  }
  cluster_ = cluster;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dataproc.v1.CreateClusterRequest.cluster)
}

// -------------------------------------------------------------------

// UpdateClusterRequest

// string project_id = 1;
inline void UpdateClusterRequest::clear_project_id() {
  project_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UpdateClusterRequest::project_id() const {
  // @@protoc_insertion_point(field_get:google.cloud.dataproc.v1.UpdateClusterRequest.project_id)
  return project_id_.GetNoArena();
}
inline void UpdateClusterRequest::set_project_id(const ::std::string& value) {
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.cloud.dataproc.v1.UpdateClusterRequest.project_id)
}
#if LANG_CXX11
inline void UpdateClusterRequest::set_project_id(::std::string&& value) {
  
  project_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.dataproc.v1.UpdateClusterRequest.project_id)
}
#endif
inline void UpdateClusterRequest::set_project_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.cloud.dataproc.v1.UpdateClusterRequest.project_id)
}
inline void UpdateClusterRequest::set_project_id(const char* value, size_t size) {
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.cloud.dataproc.v1.UpdateClusterRequest.project_id)
}
inline ::std::string* UpdateClusterRequest::mutable_project_id() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.dataproc.v1.UpdateClusterRequest.project_id)
  return project_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UpdateClusterRequest::release_project_id() {
  // @@protoc_insertion_point(field_release:google.cloud.dataproc.v1.UpdateClusterRequest.project_id)
  
  return project_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UpdateClusterRequest::set_allocated_project_id(::std::string* project_id) {
  if (project_id != NULL) {
    
  } else {
    
  }
  project_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), project_id);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dataproc.v1.UpdateClusterRequest.project_id)
}

// string region = 5;
inline void UpdateClusterRequest::clear_region() {
  region_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UpdateClusterRequest::region() const {
  // @@protoc_insertion_point(field_get:google.cloud.dataproc.v1.UpdateClusterRequest.region)
  return region_.GetNoArena();
}
inline void UpdateClusterRequest::set_region(const ::std::string& value) {
  
  region_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.cloud.dataproc.v1.UpdateClusterRequest.region)
}
#if LANG_CXX11
inline void UpdateClusterRequest::set_region(::std::string&& value) {
  
  region_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.dataproc.v1.UpdateClusterRequest.region)
}
#endif
inline void UpdateClusterRequest::set_region(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  region_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.cloud.dataproc.v1.UpdateClusterRequest.region)
}
inline void UpdateClusterRequest::set_region(const char* value, size_t size) {
  
  region_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.cloud.dataproc.v1.UpdateClusterRequest.region)
}
inline ::std::string* UpdateClusterRequest::mutable_region() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.dataproc.v1.UpdateClusterRequest.region)
  return region_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UpdateClusterRequest::release_region() {
  // @@protoc_insertion_point(field_release:google.cloud.dataproc.v1.UpdateClusterRequest.region)
  
  return region_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UpdateClusterRequest::set_allocated_region(::std::string* region) {
  if (region != NULL) {
    
  } else {
    
  }
  region_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), region);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dataproc.v1.UpdateClusterRequest.region)
}

// string cluster_name = 2;
inline void UpdateClusterRequest::clear_cluster_name() {
  cluster_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UpdateClusterRequest::cluster_name() const {
  // @@protoc_insertion_point(field_get:google.cloud.dataproc.v1.UpdateClusterRequest.cluster_name)
  return cluster_name_.GetNoArena();
}
inline void UpdateClusterRequest::set_cluster_name(const ::std::string& value) {
  
  cluster_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.cloud.dataproc.v1.UpdateClusterRequest.cluster_name)
}
#if LANG_CXX11
inline void UpdateClusterRequest::set_cluster_name(::std::string&& value) {
  
  cluster_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.dataproc.v1.UpdateClusterRequest.cluster_name)
}
#endif
inline void UpdateClusterRequest::set_cluster_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  cluster_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.cloud.dataproc.v1.UpdateClusterRequest.cluster_name)
}
inline void UpdateClusterRequest::set_cluster_name(const char* value, size_t size) {
  
  cluster_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.cloud.dataproc.v1.UpdateClusterRequest.cluster_name)
}
inline ::std::string* UpdateClusterRequest::mutable_cluster_name() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.dataproc.v1.UpdateClusterRequest.cluster_name)
  return cluster_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UpdateClusterRequest::release_cluster_name() {
  // @@protoc_insertion_point(field_release:google.cloud.dataproc.v1.UpdateClusterRequest.cluster_name)
  
  return cluster_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UpdateClusterRequest::set_allocated_cluster_name(::std::string* cluster_name) {
  if (cluster_name != NULL) {
    
  } else {
    
  }
  cluster_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cluster_name);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dataproc.v1.UpdateClusterRequest.cluster_name)
}

// .google.cloud.dataproc.v1.Cluster cluster = 3;
inline bool UpdateClusterRequest::has_cluster() const {
  return this != internal_default_instance() && cluster_ != NULL;
}
inline void UpdateClusterRequest::clear_cluster() {
  if (GetArenaNoVirtual() == NULL && cluster_ != NULL) {
    delete cluster_;
  }
  cluster_ = NULL;
}
inline const ::google::cloud::dataproc::v1::Cluster& UpdateClusterRequest::cluster() const {
  const ::google::cloud::dataproc::v1::Cluster* p = cluster_;
  // @@protoc_insertion_point(field_get:google.cloud.dataproc.v1.UpdateClusterRequest.cluster)
  return p != NULL ? *p : *reinterpret_cast<const ::google::cloud::dataproc::v1::Cluster*>(
      &::google::cloud::dataproc::v1::_Cluster_default_instance_);
}
inline ::google::cloud::dataproc::v1::Cluster* UpdateClusterRequest::release_cluster() {
  // @@protoc_insertion_point(field_release:google.cloud.dataproc.v1.UpdateClusterRequest.cluster)
  
  ::google::cloud::dataproc::v1::Cluster* temp = cluster_;
  cluster_ = NULL;
  return temp;
}
inline ::google::cloud::dataproc::v1::Cluster* UpdateClusterRequest::mutable_cluster() {
  
  if (cluster_ == NULL) {
    cluster_ = new ::google::cloud::dataproc::v1::Cluster;
  }
  // @@protoc_insertion_point(field_mutable:google.cloud.dataproc.v1.UpdateClusterRequest.cluster)
  return cluster_;
}
inline void UpdateClusterRequest::set_allocated_cluster(::google::cloud::dataproc::v1::Cluster* cluster) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete cluster_;
  }
  if (cluster) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      cluster = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, cluster, submessage_arena);
    }
    
  } else {
    
  }
  cluster_ = cluster;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dataproc.v1.UpdateClusterRequest.cluster)
}

// .google.protobuf.FieldMask update_mask = 4;
inline bool UpdateClusterRequest::has_update_mask() const {
  return this != internal_default_instance() && update_mask_ != NULL;
}
inline const ::google::protobuf::FieldMask& UpdateClusterRequest::update_mask() const {
  const ::google::protobuf::FieldMask* p = update_mask_;
  // @@protoc_insertion_point(field_get:google.cloud.dataproc.v1.UpdateClusterRequest.update_mask)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::FieldMask*>(
      &::google::protobuf::_FieldMask_default_instance_);
}
inline ::google::protobuf::FieldMask* UpdateClusterRequest::release_update_mask() {
  // @@protoc_insertion_point(field_release:google.cloud.dataproc.v1.UpdateClusterRequest.update_mask)
  
  ::google::protobuf::FieldMask* temp = update_mask_;
  update_mask_ = NULL;
  return temp;
}
inline ::google::protobuf::FieldMask* UpdateClusterRequest::mutable_update_mask() {
  
  if (update_mask_ == NULL) {
    update_mask_ = new ::google::protobuf::FieldMask;
  }
  // @@protoc_insertion_point(field_mutable:google.cloud.dataproc.v1.UpdateClusterRequest.update_mask)
  return update_mask_;
}
inline void UpdateClusterRequest::set_allocated_update_mask(::google::protobuf::FieldMask* update_mask) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(update_mask_);
  }
  if (update_mask) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      update_mask = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, update_mask, submessage_arena);
    }
    
  } else {
    
  }
  update_mask_ = update_mask;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dataproc.v1.UpdateClusterRequest.update_mask)
}

// -------------------------------------------------------------------

// DeleteClusterRequest

// string project_id = 1;
inline void DeleteClusterRequest::clear_project_id() {
  project_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DeleteClusterRequest::project_id() const {
  // @@protoc_insertion_point(field_get:google.cloud.dataproc.v1.DeleteClusterRequest.project_id)
  return project_id_.GetNoArena();
}
inline void DeleteClusterRequest::set_project_id(const ::std::string& value) {
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.cloud.dataproc.v1.DeleteClusterRequest.project_id)
}
#if LANG_CXX11
inline void DeleteClusterRequest::set_project_id(::std::string&& value) {
  
  project_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.dataproc.v1.DeleteClusterRequest.project_id)
}
#endif
inline void DeleteClusterRequest::set_project_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.cloud.dataproc.v1.DeleteClusterRequest.project_id)
}
inline void DeleteClusterRequest::set_project_id(const char* value, size_t size) {
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.cloud.dataproc.v1.DeleteClusterRequest.project_id)
}
inline ::std::string* DeleteClusterRequest::mutable_project_id() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.dataproc.v1.DeleteClusterRequest.project_id)
  return project_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DeleteClusterRequest::release_project_id() {
  // @@protoc_insertion_point(field_release:google.cloud.dataproc.v1.DeleteClusterRequest.project_id)
  
  return project_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DeleteClusterRequest::set_allocated_project_id(::std::string* project_id) {
  if (project_id != NULL) {
    
  } else {
    
  }
  project_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), project_id);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dataproc.v1.DeleteClusterRequest.project_id)
}

// string region = 3;
inline void DeleteClusterRequest::clear_region() {
  region_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DeleteClusterRequest::region() const {
  // @@protoc_insertion_point(field_get:google.cloud.dataproc.v1.DeleteClusterRequest.region)
  return region_.GetNoArena();
}
inline void DeleteClusterRequest::set_region(const ::std::string& value) {
  
  region_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.cloud.dataproc.v1.DeleteClusterRequest.region)
}
#if LANG_CXX11
inline void DeleteClusterRequest::set_region(::std::string&& value) {
  
  region_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.dataproc.v1.DeleteClusterRequest.region)
}
#endif
inline void DeleteClusterRequest::set_region(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  region_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.cloud.dataproc.v1.DeleteClusterRequest.region)
}
inline void DeleteClusterRequest::set_region(const char* value, size_t size) {
  
  region_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.cloud.dataproc.v1.DeleteClusterRequest.region)
}
inline ::std::string* DeleteClusterRequest::mutable_region() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.dataproc.v1.DeleteClusterRequest.region)
  return region_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DeleteClusterRequest::release_region() {
  // @@protoc_insertion_point(field_release:google.cloud.dataproc.v1.DeleteClusterRequest.region)
  
  return region_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DeleteClusterRequest::set_allocated_region(::std::string* region) {
  if (region != NULL) {
    
  } else {
    
  }
  region_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), region);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dataproc.v1.DeleteClusterRequest.region)
}

// string cluster_name = 2;
inline void DeleteClusterRequest::clear_cluster_name() {
  cluster_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DeleteClusterRequest::cluster_name() const {
  // @@protoc_insertion_point(field_get:google.cloud.dataproc.v1.DeleteClusterRequest.cluster_name)
  return cluster_name_.GetNoArena();
}
inline void DeleteClusterRequest::set_cluster_name(const ::std::string& value) {
  
  cluster_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.cloud.dataproc.v1.DeleteClusterRequest.cluster_name)
}
#if LANG_CXX11
inline void DeleteClusterRequest::set_cluster_name(::std::string&& value) {
  
  cluster_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.dataproc.v1.DeleteClusterRequest.cluster_name)
}
#endif
inline void DeleteClusterRequest::set_cluster_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  cluster_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.cloud.dataproc.v1.DeleteClusterRequest.cluster_name)
}
inline void DeleteClusterRequest::set_cluster_name(const char* value, size_t size) {
  
  cluster_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.cloud.dataproc.v1.DeleteClusterRequest.cluster_name)
}
inline ::std::string* DeleteClusterRequest::mutable_cluster_name() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.dataproc.v1.DeleteClusterRequest.cluster_name)
  return cluster_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DeleteClusterRequest::release_cluster_name() {
  // @@protoc_insertion_point(field_release:google.cloud.dataproc.v1.DeleteClusterRequest.cluster_name)
  
  return cluster_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DeleteClusterRequest::set_allocated_cluster_name(::std::string* cluster_name) {
  if (cluster_name != NULL) {
    
  } else {
    
  }
  cluster_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cluster_name);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dataproc.v1.DeleteClusterRequest.cluster_name)
}

// -------------------------------------------------------------------

// GetClusterRequest

// string project_id = 1;
inline void GetClusterRequest::clear_project_id() {
  project_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetClusterRequest::project_id() const {
  // @@protoc_insertion_point(field_get:google.cloud.dataproc.v1.GetClusterRequest.project_id)
  return project_id_.GetNoArena();
}
inline void GetClusterRequest::set_project_id(const ::std::string& value) {
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.cloud.dataproc.v1.GetClusterRequest.project_id)
}
#if LANG_CXX11
inline void GetClusterRequest::set_project_id(::std::string&& value) {
  
  project_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.dataproc.v1.GetClusterRequest.project_id)
}
#endif
inline void GetClusterRequest::set_project_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.cloud.dataproc.v1.GetClusterRequest.project_id)
}
inline void GetClusterRequest::set_project_id(const char* value, size_t size) {
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.cloud.dataproc.v1.GetClusterRequest.project_id)
}
inline ::std::string* GetClusterRequest::mutable_project_id() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.dataproc.v1.GetClusterRequest.project_id)
  return project_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetClusterRequest::release_project_id() {
  // @@protoc_insertion_point(field_release:google.cloud.dataproc.v1.GetClusterRequest.project_id)
  
  return project_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetClusterRequest::set_allocated_project_id(::std::string* project_id) {
  if (project_id != NULL) {
    
  } else {
    
  }
  project_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), project_id);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dataproc.v1.GetClusterRequest.project_id)
}

// string region = 3;
inline void GetClusterRequest::clear_region() {
  region_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetClusterRequest::region() const {
  // @@protoc_insertion_point(field_get:google.cloud.dataproc.v1.GetClusterRequest.region)
  return region_.GetNoArena();
}
inline void GetClusterRequest::set_region(const ::std::string& value) {
  
  region_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.cloud.dataproc.v1.GetClusterRequest.region)
}
#if LANG_CXX11
inline void GetClusterRequest::set_region(::std::string&& value) {
  
  region_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.dataproc.v1.GetClusterRequest.region)
}
#endif
inline void GetClusterRequest::set_region(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  region_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.cloud.dataproc.v1.GetClusterRequest.region)
}
inline void GetClusterRequest::set_region(const char* value, size_t size) {
  
  region_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.cloud.dataproc.v1.GetClusterRequest.region)
}
inline ::std::string* GetClusterRequest::mutable_region() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.dataproc.v1.GetClusterRequest.region)
  return region_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetClusterRequest::release_region() {
  // @@protoc_insertion_point(field_release:google.cloud.dataproc.v1.GetClusterRequest.region)
  
  return region_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetClusterRequest::set_allocated_region(::std::string* region) {
  if (region != NULL) {
    
  } else {
    
  }
  region_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), region);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dataproc.v1.GetClusterRequest.region)
}

// string cluster_name = 2;
inline void GetClusterRequest::clear_cluster_name() {
  cluster_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetClusterRequest::cluster_name() const {
  // @@protoc_insertion_point(field_get:google.cloud.dataproc.v1.GetClusterRequest.cluster_name)
  return cluster_name_.GetNoArena();
}
inline void GetClusterRequest::set_cluster_name(const ::std::string& value) {
  
  cluster_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.cloud.dataproc.v1.GetClusterRequest.cluster_name)
}
#if LANG_CXX11
inline void GetClusterRequest::set_cluster_name(::std::string&& value) {
  
  cluster_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.dataproc.v1.GetClusterRequest.cluster_name)
}
#endif
inline void GetClusterRequest::set_cluster_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  cluster_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.cloud.dataproc.v1.GetClusterRequest.cluster_name)
}
inline void GetClusterRequest::set_cluster_name(const char* value, size_t size) {
  
  cluster_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.cloud.dataproc.v1.GetClusterRequest.cluster_name)
}
inline ::std::string* GetClusterRequest::mutable_cluster_name() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.dataproc.v1.GetClusterRequest.cluster_name)
  return cluster_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetClusterRequest::release_cluster_name() {
  // @@protoc_insertion_point(field_release:google.cloud.dataproc.v1.GetClusterRequest.cluster_name)
  
  return cluster_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetClusterRequest::set_allocated_cluster_name(::std::string* cluster_name) {
  if (cluster_name != NULL) {
    
  } else {
    
  }
  cluster_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cluster_name);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dataproc.v1.GetClusterRequest.cluster_name)
}

// -------------------------------------------------------------------

// ListClustersRequest

// string project_id = 1;
inline void ListClustersRequest::clear_project_id() {
  project_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ListClustersRequest::project_id() const {
  // @@protoc_insertion_point(field_get:google.cloud.dataproc.v1.ListClustersRequest.project_id)
  return project_id_.GetNoArena();
}
inline void ListClustersRequest::set_project_id(const ::std::string& value) {
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.cloud.dataproc.v1.ListClustersRequest.project_id)
}
#if LANG_CXX11
inline void ListClustersRequest::set_project_id(::std::string&& value) {
  
  project_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.dataproc.v1.ListClustersRequest.project_id)
}
#endif
inline void ListClustersRequest::set_project_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.cloud.dataproc.v1.ListClustersRequest.project_id)
}
inline void ListClustersRequest::set_project_id(const char* value, size_t size) {
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.cloud.dataproc.v1.ListClustersRequest.project_id)
}
inline ::std::string* ListClustersRequest::mutable_project_id() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.dataproc.v1.ListClustersRequest.project_id)
  return project_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ListClustersRequest::release_project_id() {
  // @@protoc_insertion_point(field_release:google.cloud.dataproc.v1.ListClustersRequest.project_id)
  
  return project_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ListClustersRequest::set_allocated_project_id(::std::string* project_id) {
  if (project_id != NULL) {
    
  } else {
    
  }
  project_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), project_id);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dataproc.v1.ListClustersRequest.project_id)
}

// string region = 4;
inline void ListClustersRequest::clear_region() {
  region_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ListClustersRequest::region() const {
  // @@protoc_insertion_point(field_get:google.cloud.dataproc.v1.ListClustersRequest.region)
  return region_.GetNoArena();
}
inline void ListClustersRequest::set_region(const ::std::string& value) {
  
  region_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.cloud.dataproc.v1.ListClustersRequest.region)
}
#if LANG_CXX11
inline void ListClustersRequest::set_region(::std::string&& value) {
  
  region_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.dataproc.v1.ListClustersRequest.region)
}
#endif
inline void ListClustersRequest::set_region(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  region_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.cloud.dataproc.v1.ListClustersRequest.region)
}
inline void ListClustersRequest::set_region(const char* value, size_t size) {
  
  region_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.cloud.dataproc.v1.ListClustersRequest.region)
}
inline ::std::string* ListClustersRequest::mutable_region() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.dataproc.v1.ListClustersRequest.region)
  return region_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ListClustersRequest::release_region() {
  // @@protoc_insertion_point(field_release:google.cloud.dataproc.v1.ListClustersRequest.region)
  
  return region_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ListClustersRequest::set_allocated_region(::std::string* region) {
  if (region != NULL) {
    
  } else {
    
  }
  region_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), region);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dataproc.v1.ListClustersRequest.region)
}

// int32 page_size = 2;
inline void ListClustersRequest::clear_page_size() {
  page_size_ = 0;
}
inline ::google::protobuf::int32 ListClustersRequest::page_size() const {
  // @@protoc_insertion_point(field_get:google.cloud.dataproc.v1.ListClustersRequest.page_size)
  return page_size_;
}
inline void ListClustersRequest::set_page_size(::google::protobuf::int32 value) {
  
  page_size_ = value;
  // @@protoc_insertion_point(field_set:google.cloud.dataproc.v1.ListClustersRequest.page_size)
}

// string page_token = 3;
inline void ListClustersRequest::clear_page_token() {
  page_token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ListClustersRequest::page_token() const {
  // @@protoc_insertion_point(field_get:google.cloud.dataproc.v1.ListClustersRequest.page_token)
  return page_token_.GetNoArena();
}
inline void ListClustersRequest::set_page_token(const ::std::string& value) {
  
  page_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.cloud.dataproc.v1.ListClustersRequest.page_token)
}
#if LANG_CXX11
inline void ListClustersRequest::set_page_token(::std::string&& value) {
  
  page_token_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.dataproc.v1.ListClustersRequest.page_token)
}
#endif
inline void ListClustersRequest::set_page_token(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  page_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.cloud.dataproc.v1.ListClustersRequest.page_token)
}
inline void ListClustersRequest::set_page_token(const char* value, size_t size) {
  
  page_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.cloud.dataproc.v1.ListClustersRequest.page_token)
}
inline ::std::string* ListClustersRequest::mutable_page_token() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.dataproc.v1.ListClustersRequest.page_token)
  return page_token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ListClustersRequest::release_page_token() {
  // @@protoc_insertion_point(field_release:google.cloud.dataproc.v1.ListClustersRequest.page_token)
  
  return page_token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ListClustersRequest::set_allocated_page_token(::std::string* page_token) {
  if (page_token != NULL) {
    
  } else {
    
  }
  page_token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), page_token);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dataproc.v1.ListClustersRequest.page_token)
}

// -------------------------------------------------------------------

// ListClustersResponse

// repeated .google.cloud.dataproc.v1.Cluster clusters = 1;
inline int ListClustersResponse::clusters_size() const {
  return clusters_.size();
}
inline void ListClustersResponse::clear_clusters() {
  clusters_.Clear();
}
inline const ::google::cloud::dataproc::v1::Cluster& ListClustersResponse::clusters(int index) const {
  // @@protoc_insertion_point(field_get:google.cloud.dataproc.v1.ListClustersResponse.clusters)
  return clusters_.Get(index);
}
inline ::google::cloud::dataproc::v1::Cluster* ListClustersResponse::mutable_clusters(int index) {
  // @@protoc_insertion_point(field_mutable:google.cloud.dataproc.v1.ListClustersResponse.clusters)
  return clusters_.Mutable(index);
}
inline ::google::cloud::dataproc::v1::Cluster* ListClustersResponse::add_clusters() {
  // @@protoc_insertion_point(field_add:google.cloud.dataproc.v1.ListClustersResponse.clusters)
  return clusters_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::google::cloud::dataproc::v1::Cluster >*
ListClustersResponse::mutable_clusters() {
  // @@protoc_insertion_point(field_mutable_list:google.cloud.dataproc.v1.ListClustersResponse.clusters)
  return &clusters_;
}
inline const ::google::protobuf::RepeatedPtrField< ::google::cloud::dataproc::v1::Cluster >&
ListClustersResponse::clusters() const {
  // @@protoc_insertion_point(field_list:google.cloud.dataproc.v1.ListClustersResponse.clusters)
  return clusters_;
}

// string next_page_token = 2;
inline void ListClustersResponse::clear_next_page_token() {
  next_page_token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ListClustersResponse::next_page_token() const {
  // @@protoc_insertion_point(field_get:google.cloud.dataproc.v1.ListClustersResponse.next_page_token)
  return next_page_token_.GetNoArena();
}
inline void ListClustersResponse::set_next_page_token(const ::std::string& value) {
  
  next_page_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.cloud.dataproc.v1.ListClustersResponse.next_page_token)
}
#if LANG_CXX11
inline void ListClustersResponse::set_next_page_token(::std::string&& value) {
  
  next_page_token_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.dataproc.v1.ListClustersResponse.next_page_token)
}
#endif
inline void ListClustersResponse::set_next_page_token(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  next_page_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.cloud.dataproc.v1.ListClustersResponse.next_page_token)
}
inline void ListClustersResponse::set_next_page_token(const char* value, size_t size) {
  
  next_page_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.cloud.dataproc.v1.ListClustersResponse.next_page_token)
}
inline ::std::string* ListClustersResponse::mutable_next_page_token() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.dataproc.v1.ListClustersResponse.next_page_token)
  return next_page_token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ListClustersResponse::release_next_page_token() {
  // @@protoc_insertion_point(field_release:google.cloud.dataproc.v1.ListClustersResponse.next_page_token)
  
  return next_page_token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ListClustersResponse::set_allocated_next_page_token(::std::string* next_page_token) {
  if (next_page_token != NULL) {
    
  } else {
    
  }
  next_page_token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), next_page_token);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dataproc.v1.ListClustersResponse.next_page_token)
}

// -------------------------------------------------------------------

// DiagnoseClusterRequest

// string project_id = 1;
inline void DiagnoseClusterRequest::clear_project_id() {
  project_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DiagnoseClusterRequest::project_id() const {
  // @@protoc_insertion_point(field_get:google.cloud.dataproc.v1.DiagnoseClusterRequest.project_id)
  return project_id_.GetNoArena();
}
inline void DiagnoseClusterRequest::set_project_id(const ::std::string& value) {
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.cloud.dataproc.v1.DiagnoseClusterRequest.project_id)
}
#if LANG_CXX11
inline void DiagnoseClusterRequest::set_project_id(::std::string&& value) {
  
  project_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.dataproc.v1.DiagnoseClusterRequest.project_id)
}
#endif
inline void DiagnoseClusterRequest::set_project_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.cloud.dataproc.v1.DiagnoseClusterRequest.project_id)
}
inline void DiagnoseClusterRequest::set_project_id(const char* value, size_t size) {
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.cloud.dataproc.v1.DiagnoseClusterRequest.project_id)
}
inline ::std::string* DiagnoseClusterRequest::mutable_project_id() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.dataproc.v1.DiagnoseClusterRequest.project_id)
  return project_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DiagnoseClusterRequest::release_project_id() {
  // @@protoc_insertion_point(field_release:google.cloud.dataproc.v1.DiagnoseClusterRequest.project_id)
  
  return project_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DiagnoseClusterRequest::set_allocated_project_id(::std::string* project_id) {
  if (project_id != NULL) {
    
  } else {
    
  }
  project_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), project_id);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dataproc.v1.DiagnoseClusterRequest.project_id)
}

// string region = 3;
inline void DiagnoseClusterRequest::clear_region() {
  region_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DiagnoseClusterRequest::region() const {
  // @@protoc_insertion_point(field_get:google.cloud.dataproc.v1.DiagnoseClusterRequest.region)
  return region_.GetNoArena();
}
inline void DiagnoseClusterRequest::set_region(const ::std::string& value) {
  
  region_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.cloud.dataproc.v1.DiagnoseClusterRequest.region)
}
#if LANG_CXX11
inline void DiagnoseClusterRequest::set_region(::std::string&& value) {
  
  region_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.dataproc.v1.DiagnoseClusterRequest.region)
}
#endif
inline void DiagnoseClusterRequest::set_region(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  region_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.cloud.dataproc.v1.DiagnoseClusterRequest.region)
}
inline void DiagnoseClusterRequest::set_region(const char* value, size_t size) {
  
  region_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.cloud.dataproc.v1.DiagnoseClusterRequest.region)
}
inline ::std::string* DiagnoseClusterRequest::mutable_region() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.dataproc.v1.DiagnoseClusterRequest.region)
  return region_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DiagnoseClusterRequest::release_region() {
  // @@protoc_insertion_point(field_release:google.cloud.dataproc.v1.DiagnoseClusterRequest.region)
  
  return region_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DiagnoseClusterRequest::set_allocated_region(::std::string* region) {
  if (region != NULL) {
    
  } else {
    
  }
  region_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), region);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dataproc.v1.DiagnoseClusterRequest.region)
}

// string cluster_name = 2;
inline void DiagnoseClusterRequest::clear_cluster_name() {
  cluster_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DiagnoseClusterRequest::cluster_name() const {
  // @@protoc_insertion_point(field_get:google.cloud.dataproc.v1.DiagnoseClusterRequest.cluster_name)
  return cluster_name_.GetNoArena();
}
inline void DiagnoseClusterRequest::set_cluster_name(const ::std::string& value) {
  
  cluster_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.cloud.dataproc.v1.DiagnoseClusterRequest.cluster_name)
}
#if LANG_CXX11
inline void DiagnoseClusterRequest::set_cluster_name(::std::string&& value) {
  
  cluster_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.dataproc.v1.DiagnoseClusterRequest.cluster_name)
}
#endif
inline void DiagnoseClusterRequest::set_cluster_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  cluster_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.cloud.dataproc.v1.DiagnoseClusterRequest.cluster_name)
}
inline void DiagnoseClusterRequest::set_cluster_name(const char* value, size_t size) {
  
  cluster_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.cloud.dataproc.v1.DiagnoseClusterRequest.cluster_name)
}
inline ::std::string* DiagnoseClusterRequest::mutable_cluster_name() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.dataproc.v1.DiagnoseClusterRequest.cluster_name)
  return cluster_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DiagnoseClusterRequest::release_cluster_name() {
  // @@protoc_insertion_point(field_release:google.cloud.dataproc.v1.DiagnoseClusterRequest.cluster_name)
  
  return cluster_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DiagnoseClusterRequest::set_allocated_cluster_name(::std::string* cluster_name) {
  if (cluster_name != NULL) {
    
  } else {
    
  }
  cluster_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cluster_name);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dataproc.v1.DiagnoseClusterRequest.cluster_name)
}

// -------------------------------------------------------------------

// DiagnoseClusterResults

// string output_uri = 1;
inline void DiagnoseClusterResults::clear_output_uri() {
  output_uri_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DiagnoseClusterResults::output_uri() const {
  // @@protoc_insertion_point(field_get:google.cloud.dataproc.v1.DiagnoseClusterResults.output_uri)
  return output_uri_.GetNoArena();
}
inline void DiagnoseClusterResults::set_output_uri(const ::std::string& value) {
  
  output_uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.cloud.dataproc.v1.DiagnoseClusterResults.output_uri)
}
#if LANG_CXX11
inline void DiagnoseClusterResults::set_output_uri(::std::string&& value) {
  
  output_uri_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.dataproc.v1.DiagnoseClusterResults.output_uri)
}
#endif
inline void DiagnoseClusterResults::set_output_uri(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  output_uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.cloud.dataproc.v1.DiagnoseClusterResults.output_uri)
}
inline void DiagnoseClusterResults::set_output_uri(const char* value, size_t size) {
  
  output_uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.cloud.dataproc.v1.DiagnoseClusterResults.output_uri)
}
inline ::std::string* DiagnoseClusterResults::mutable_output_uri() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.dataproc.v1.DiagnoseClusterResults.output_uri)
  return output_uri_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DiagnoseClusterResults::release_output_uri() {
  // @@protoc_insertion_point(field_release:google.cloud.dataproc.v1.DiagnoseClusterResults.output_uri)
  
  return output_uri_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DiagnoseClusterResults::set_allocated_output_uri(::std::string* output_uri) {
  if (output_uri != NULL) {
    
  } else {
    
  }
  output_uri_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), output_uri);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dataproc.v1.DiagnoseClusterResults.output_uri)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace dataproc
}  // namespace cloud
}  // namespace google

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::google::cloud::dataproc::v1::ClusterStatus_State> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::google::cloud::dataproc::v1::ClusterStatus_State>() {
  return ::google::cloud::dataproc::v1::ClusterStatus_State_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_google_2fcloud_2fdataproc_2fv1_2fclusters_2eproto__INCLUDED
