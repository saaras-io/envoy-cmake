// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/tracing/trace.proto

#include "google/tracing/trace.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)
namespace google {
namespace tracing {
namespace v1 {
class TraceIdDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TraceId>
      _instance;
} _TraceId_default_instance_;
class ModuleDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Module>
      _instance;
} _Module_default_instance_;
class StackTrace_StackFrameDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<StackTrace_StackFrame>
      _instance;
} _StackTrace_StackFrame_default_instance_;
class StackTraceDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<StackTrace>
      _instance;
} _StackTrace_default_instance_;
class LabelValueDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LabelValue>
      _instance;
  ::google::protobuf::internal::ArenaStringPtr string_value_;
  ::google::protobuf::int64 int_value_;
  bool bool_value_;
} _LabelValue_default_instance_;
class Span_TimeEvent_Annotation_LabelsEntry_DoNotUseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Span_TimeEvent_Annotation_LabelsEntry_DoNotUse>
      _instance;
} _Span_TimeEvent_Annotation_LabelsEntry_DoNotUse_default_instance_;
class Span_TimeEvent_AnnotationDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Span_TimeEvent_Annotation>
      _instance;
} _Span_TimeEvent_Annotation_default_instance_;
class Span_TimeEvent_NetworkEventDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Span_TimeEvent_NetworkEvent>
      _instance;
} _Span_TimeEvent_NetworkEvent_default_instance_;
class Span_TimeEventDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Span_TimeEvent>
      _instance;
  const ::google::tracing::v1::Span_TimeEvent_Annotation* annotation_;
  const ::google::tracing::v1::Span_TimeEvent_NetworkEvent* network_event_;
} _Span_TimeEvent_default_instance_;
class Span_LinkDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Span_Link>
      _instance;
} _Span_Link_default_instance_;
class Span_LabelsEntry_DoNotUseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Span_LabelsEntry_DoNotUse>
      _instance;
} _Span_LabelsEntry_DoNotUse_default_instance_;
class SpanDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Span>
      _instance;
} _Span_default_instance_;
class TraceDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Trace>
      _instance;
} _Trace_default_instance_;
}  // namespace v1
}  // namespace tracing
}  // namespace google
namespace protobuf_google_2ftracing_2ftrace_2eproto {
void InitDefaultsTraceIdImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::google::tracing::v1::_TraceId_default_instance_;
    new (ptr) ::google::tracing::v1::TraceId();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::tracing::v1::TraceId::InitAsDefaultInstance();
}

void InitDefaultsTraceId() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsTraceIdImpl);
}

void InitDefaultsModuleImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::google::tracing::v1::_Module_default_instance_;
    new (ptr) ::google::tracing::v1::Module();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::tracing::v1::Module::InitAsDefaultInstance();
}

void InitDefaultsModule() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsModuleImpl);
}

void InitDefaultsStackTrace_StackFrameImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_google_2ftracing_2ftrace_2eproto::InitDefaultsModule();
  {
    void* ptr = &::google::tracing::v1::_StackTrace_StackFrame_default_instance_;
    new (ptr) ::google::tracing::v1::StackTrace_StackFrame();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::tracing::v1::StackTrace_StackFrame::InitAsDefaultInstance();
}

void InitDefaultsStackTrace_StackFrame() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsStackTrace_StackFrameImpl);
}

void InitDefaultsStackTraceImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_google_2ftracing_2ftrace_2eproto::InitDefaultsStackTrace_StackFrame();
  {
    void* ptr = &::google::tracing::v1::_StackTrace_default_instance_;
    new (ptr) ::google::tracing::v1::StackTrace();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::tracing::v1::StackTrace::InitAsDefaultInstance();
}

void InitDefaultsStackTrace() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsStackTraceImpl);
}

void InitDefaultsLabelValueImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::google::tracing::v1::_LabelValue_default_instance_;
    new (ptr) ::google::tracing::v1::LabelValue();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::tracing::v1::LabelValue::InitAsDefaultInstance();
}

void InitDefaultsLabelValue() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsLabelValueImpl);
}

void InitDefaultsSpan_TimeEvent_Annotation_LabelsEntry_DoNotUseImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_google_2ftracing_2ftrace_2eproto::InitDefaultsLabelValue();
  {
    void* ptr = &::google::tracing::v1::_Span_TimeEvent_Annotation_LabelsEntry_DoNotUse_default_instance_;
    new (ptr) ::google::tracing::v1::Span_TimeEvent_Annotation_LabelsEntry_DoNotUse();
  }
  ::google::tracing::v1::Span_TimeEvent_Annotation_LabelsEntry_DoNotUse::InitAsDefaultInstance();
}

void InitDefaultsSpan_TimeEvent_Annotation_LabelsEntry_DoNotUse() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsSpan_TimeEvent_Annotation_LabelsEntry_DoNotUseImpl);
}

void InitDefaultsSpan_TimeEvent_AnnotationImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_google_2ftracing_2ftrace_2eproto::InitDefaultsSpan_TimeEvent_Annotation_LabelsEntry_DoNotUse();
  {
    void* ptr = &::google::tracing::v1::_Span_TimeEvent_Annotation_default_instance_;
    new (ptr) ::google::tracing::v1::Span_TimeEvent_Annotation();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::tracing::v1::Span_TimeEvent_Annotation::InitAsDefaultInstance();
}

void InitDefaultsSpan_TimeEvent_Annotation() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsSpan_TimeEvent_AnnotationImpl);
}

void InitDefaultsSpan_TimeEvent_NetworkEventImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_google_2fprotobuf_2ftimestamp_2eproto::InitDefaultsTimestamp();
  {
    void* ptr = &::google::tracing::v1::_Span_TimeEvent_NetworkEvent_default_instance_;
    new (ptr) ::google::tracing::v1::Span_TimeEvent_NetworkEvent();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::tracing::v1::Span_TimeEvent_NetworkEvent::InitAsDefaultInstance();
}

void InitDefaultsSpan_TimeEvent_NetworkEvent() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsSpan_TimeEvent_NetworkEventImpl);
}

void InitDefaultsSpan_TimeEventImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_google_2fprotobuf_2ftimestamp_2eproto::InitDefaultsTimestamp();
  protobuf_google_2ftracing_2ftrace_2eproto::InitDefaultsSpan_TimeEvent_Annotation();
  protobuf_google_2ftracing_2ftrace_2eproto::InitDefaultsSpan_TimeEvent_NetworkEvent();
  {
    void* ptr = &::google::tracing::v1::_Span_TimeEvent_default_instance_;
    new (ptr) ::google::tracing::v1::Span_TimeEvent();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::tracing::v1::Span_TimeEvent::InitAsDefaultInstance();
}

void InitDefaultsSpan_TimeEvent() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsSpan_TimeEventImpl);
}

void InitDefaultsSpan_LinkImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_google_2ftracing_2ftrace_2eproto::InitDefaultsTraceId();
  {
    void* ptr = &::google::tracing::v1::_Span_Link_default_instance_;
    new (ptr) ::google::tracing::v1::Span_Link();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::tracing::v1::Span_Link::InitAsDefaultInstance();
}

void InitDefaultsSpan_Link() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsSpan_LinkImpl);
}

void InitDefaultsSpan_LabelsEntry_DoNotUseImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_google_2ftracing_2ftrace_2eproto::InitDefaultsLabelValue();
  {
    void* ptr = &::google::tracing::v1::_Span_LabelsEntry_DoNotUse_default_instance_;
    new (ptr) ::google::tracing::v1::Span_LabelsEntry_DoNotUse();
  }
  ::google::tracing::v1::Span_LabelsEntry_DoNotUse::InitAsDefaultInstance();
}

void InitDefaultsSpan_LabelsEntry_DoNotUse() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsSpan_LabelsEntry_DoNotUseImpl);
}

void InitDefaultsSpanImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_google_2fprotobuf_2ftimestamp_2eproto::InitDefaultsTimestamp();
  protobuf_google_2ftracing_2ftrace_2eproto::InitDefaultsSpan_LabelsEntry_DoNotUse();
  protobuf_google_2ftracing_2ftrace_2eproto::InitDefaultsStackTrace();
  protobuf_google_2ftracing_2ftrace_2eproto::InitDefaultsSpan_TimeEvent();
  protobuf_google_2ftracing_2ftrace_2eproto::InitDefaultsSpan_Link();
  protobuf_google_2frpc_2fstatus_2eproto::InitDefaultsStatus();
  {
    void* ptr = &::google::tracing::v1::_Span_default_instance_;
    new (ptr) ::google::tracing::v1::Span();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::tracing::v1::Span::InitAsDefaultInstance();
}

void InitDefaultsSpan() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsSpanImpl);
}

void InitDefaultsTraceImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_google_2ftracing_2ftrace_2eproto::InitDefaultsTraceId();
  protobuf_google_2ftracing_2ftrace_2eproto::InitDefaultsSpan();
  {
    void* ptr = &::google::tracing::v1::_Trace_default_instance_;
    new (ptr) ::google::tracing::v1::Trace();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::tracing::v1::Trace::InitAsDefaultInstance();
}

void InitDefaultsTrace() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsTraceImpl);
}

::google::protobuf::Metadata file_level_metadata[13];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[2];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::tracing::v1::TraceId, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::tracing::v1::TraceId, hex_encoded_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::tracing::v1::Module, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::tracing::v1::Module, module_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::tracing::v1::Module, build_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::tracing::v1::StackTrace_StackFrame, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::tracing::v1::StackTrace_StackFrame, function_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::tracing::v1::StackTrace_StackFrame, orig_function_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::tracing::v1::StackTrace_StackFrame, file_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::tracing::v1::StackTrace_StackFrame, line_number_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::tracing::v1::StackTrace_StackFrame, column_number_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::tracing::v1::StackTrace_StackFrame, load_module_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::tracing::v1::StackTrace_StackFrame, source_version_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::tracing::v1::StackTrace, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::tracing::v1::StackTrace, stack_frame_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::tracing::v1::StackTrace, stack_trace_hash_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::tracing::v1::LabelValue, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::tracing::v1::LabelValue, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::google::tracing::v1::LabelValueDefaultTypeInternal, string_value_),
  offsetof(::google::tracing::v1::LabelValueDefaultTypeInternal, int_value_),
  offsetof(::google::tracing::v1::LabelValueDefaultTypeInternal, bool_value_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::tracing::v1::LabelValue, value_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::tracing::v1::Span_TimeEvent_Annotation_LabelsEntry_DoNotUse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::tracing::v1::Span_TimeEvent_Annotation_LabelsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::tracing::v1::Span_TimeEvent_Annotation_LabelsEntry_DoNotUse, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::tracing::v1::Span_TimeEvent_Annotation_LabelsEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::tracing::v1::Span_TimeEvent_Annotation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::tracing::v1::Span_TimeEvent_Annotation, description_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::tracing::v1::Span_TimeEvent_Annotation, labels_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::tracing::v1::Span_TimeEvent_NetworkEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::tracing::v1::Span_TimeEvent_NetworkEvent, kernel_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::tracing::v1::Span_TimeEvent_NetworkEvent, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::tracing::v1::Span_TimeEvent_NetworkEvent, message_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::tracing::v1::Span_TimeEvent_NetworkEvent, message_size_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::tracing::v1::Span_TimeEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::tracing::v1::Span_TimeEvent, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::tracing::v1::Span_TimeEvent, local_time_),
  offsetof(::google::tracing::v1::Span_TimeEventDefaultTypeInternal, annotation_),
  offsetof(::google::tracing::v1::Span_TimeEventDefaultTypeInternal, network_event_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::tracing::v1::Span_TimeEvent, value_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::tracing::v1::Span_Link, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::tracing::v1::Span_Link, trace_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::tracing::v1::Span_Link, span_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::tracing::v1::Span_Link, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::tracing::v1::Span_LabelsEntry_DoNotUse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::tracing::v1::Span_LabelsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::tracing::v1::Span_LabelsEntry_DoNotUse, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::tracing::v1::Span_LabelsEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::tracing::v1::Span, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::tracing::v1::Span, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::tracing::v1::Span, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::tracing::v1::Span, parent_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::tracing::v1::Span, local_start_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::tracing::v1::Span, local_end_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::tracing::v1::Span, labels_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::tracing::v1::Span, stack_trace_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::tracing::v1::Span, time_events_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::tracing::v1::Span, links_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::tracing::v1::Span, status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::tracing::v1::Span, has_remote_parent_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::tracing::v1::Trace, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::tracing::v1::Trace, trace_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::tracing::v1::Trace, spans_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::google::tracing::v1::TraceId)},
  { 6, -1, sizeof(::google::tracing::v1::Module)},
  { 13, -1, sizeof(::google::tracing::v1::StackTrace_StackFrame)},
  { 25, -1, sizeof(::google::tracing::v1::StackTrace)},
  { 32, -1, sizeof(::google::tracing::v1::LabelValue)},
  { 41, 48, sizeof(::google::tracing::v1::Span_TimeEvent_Annotation_LabelsEntry_DoNotUse)},
  { 50, -1, sizeof(::google::tracing::v1::Span_TimeEvent_Annotation)},
  { 57, -1, sizeof(::google::tracing::v1::Span_TimeEvent_NetworkEvent)},
  { 66, -1, sizeof(::google::tracing::v1::Span_TimeEvent)},
  { 75, -1, sizeof(::google::tracing::v1::Span_Link)},
  { 83, 90, sizeof(::google::tracing::v1::Span_LabelsEntry_DoNotUse)},
  { 92, -1, sizeof(::google::tracing::v1::Span)},
  { 108, -1, sizeof(::google::tracing::v1::Trace)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::tracing::v1::_TraceId_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::tracing::v1::_Module_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::tracing::v1::_StackTrace_StackFrame_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::tracing::v1::_StackTrace_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::tracing::v1::_LabelValue_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::tracing::v1::_Span_TimeEvent_Annotation_LabelsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::tracing::v1::_Span_TimeEvent_Annotation_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::tracing::v1::_Span_TimeEvent_NetworkEvent_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::tracing::v1::_Span_TimeEvent_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::tracing::v1::_Span_Link_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::tracing::v1::_Span_LabelsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::tracing::v1::_Span_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::tracing::v1::_Trace_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "google/tracing/trace.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 13);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\032google/tracing/trace.proto\022\021google.tra"
      "cing.v1\032\034google/api/annotations.proto\032\037g"
      "oogle/protobuf/timestamp.proto\032\027google/r"
      "pc/status.proto\"\036\n\007TraceId\022\023\n\013hex_encode"
      "d\030\001 \001(\t\"*\n\006Module\022\016\n\006module\030\001 \001(\t\022\020\n\010bui"
      "ld_id\030\002 \001(\t\"\261\002\n\nStackTrace\022=\n\013stack_fram"
      "e\030\001 \003(\0132(.google.tracing.v1.StackTrace.S"
      "tackFrame\022\033\n\023stack_trace_hash_id\030\002 \001(\004\032\306"
      "\001\n\nStackFrame\022\025\n\rfunction_name\030\001 \001(\t\022\032\n\022"
      "orig_function_name\030\002 \001(\t\022\021\n\tfile_name\030\003 "
      "\001(\t\022\023\n\013line_number\030\004 \001(\003\022\025\n\rcolumn_numbe"
      "r\030\005 \001(\003\022.\n\013load_module\030\006 \001(\0132\031.google.tr"
      "acing.v1.Module\022\026\n\016source_version\030\007 \001(\t\""
      "X\n\nLabelValue\022\026\n\014string_value\030\001 \001(\tH\000\022\023\n"
      "\tint_value\030\002 \001(\003H\000\022\024\n\nbool_value\030\003 \001(\010H\000"
      "B\007\n\005value\"\215\n\n\004Span\022\n\n\002id\030\001 \001(\006\022\014\n\004name\030\002"
      " \001(\t\022\021\n\tparent_id\030\003 \001(\006\0224\n\020local_start_t"
      "ime\030\004 \001(\0132\032.google.protobuf.Timestamp\0222\n"
      "\016local_end_time\030\005 \001(\0132\032.google.protobuf."
      "Timestamp\0223\n\006labels\030\006 \003(\0132#.google.traci"
      "ng.v1.Span.LabelsEntry\0222\n\013stack_trace\030\007 "
      "\001(\0132\035.google.tracing.v1.StackTrace\0226\n\013ti"
      "me_events\030\010 \003(\0132!.google.tracing.v1.Span"
      ".TimeEvent\022+\n\005links\030\t \003(\0132\034.google.traci"
      "ng.v1.Span.Link\022\"\n\006status\030\n \001(\0132\022.google"
      ".rpc.Status\022\031\n\021has_remote_parent\030\013 \001(\010\032\351"
      "\004\n\tTimeEvent\022.\n\nlocal_time\030\001 \001(\0132\032.googl"
      "e.protobuf.Timestamp\022B\n\nannotation\030\002 \001(\013"
      "2,.google.tracing.v1.Span.TimeEvent.Anno"
      "tationH\000\022G\n\rnetwork_event\030\003 \001(\0132..google"
      ".tracing.v1.Span.TimeEvent.NetworkEventH"
      "\000\032\271\001\n\nAnnotation\022\023\n\013description\030\001 \001(\t\022H\n"
      "\006labels\030\002 \003(\01328.google.tracing.v1.Span.T"
      "imeEvent.Annotation.LabelsEntry\032L\n\013Label"
      "sEntry\022\013\n\003key\030\001 \001(\t\022,\n\005value\030\002 \001(\0132\035.goo"
      "gle.tracing.v1.LabelValue:\0028\001\032\331\001\n\014Networ"
      "kEvent\022/\n\013kernel_time\030\001 \001(\0132\032.google.pro"
      "tobuf.Timestamp\022A\n\004type\030\002 \001(\01623.google.t"
      "racing.v1.Span.TimeEvent.NetworkEvent.Ty"
      "pe\022\022\n\nmessage_id\030\003 \001(\004\022\024\n\014message_size\030\004"
      " \001(\004\"+\n\004Type\022\017\n\013UNSPECIFIED\020\000\022\010\n\004SENT\020\001\022"
      "\010\n\004RECV\020\002B\007\n\005value\032\246\001\n\004Link\022,\n\010trace_id\030"
      "\001 \001(\0132\032.google.tracing.v1.TraceId\022\017\n\007spa"
      "n_id\030\002 \001(\006\022/\n\004type\030\003 \001(\0162!.google.tracin"
      "g.v1.Span.Link.Type\".\n\004Type\022\017\n\013UNSPECIFI"
      "ED\020\000\022\t\n\005CHILD\020\001\022\n\n\006PARENT\020\002\032L\n\013LabelsEnt"
      "ry\022\013\n\003key\030\001 \001(\t\022,\n\005value\030\002 \001(\0132\035.google."
      "tracing.v1.LabelValue:\0028\001\"]\n\005Trace\022,\n\010tr"
      "ace_id\030\001 \001(\0132\032.google.tracing.v1.TraceId"
      "\022&\n\005spans\030\002 \003(\0132\027.google.tracing.v1.Span"
      "B_\n\025com.google.tracing.v1B\nTraceProtoP\001Z"
      "8google.golang.org/genproto/googleapis/t"
      "racing/v1;tracingb\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 2105);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "google/tracing/trace.proto", &protobuf_RegisterTypes);
  ::protobuf_google_2fapi_2fannotations_2eproto::AddDescriptors();
  ::protobuf_google_2fprotobuf_2ftimestamp_2eproto::AddDescriptors();
  ::protobuf_google_2frpc_2fstatus_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_google_2ftracing_2ftrace_2eproto
namespace google {
namespace tracing {
namespace v1 {
const ::google::protobuf::EnumDescriptor* Span_TimeEvent_NetworkEvent_Type_descriptor() {
  protobuf_google_2ftracing_2ftrace_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2ftracing_2ftrace_2eproto::file_level_enum_descriptors[0];
}
bool Span_TimeEvent_NetworkEvent_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Span_TimeEvent_NetworkEvent_Type Span_TimeEvent_NetworkEvent::UNSPECIFIED;
const Span_TimeEvent_NetworkEvent_Type Span_TimeEvent_NetworkEvent::SENT;
const Span_TimeEvent_NetworkEvent_Type Span_TimeEvent_NetworkEvent::RECV;
const Span_TimeEvent_NetworkEvent_Type Span_TimeEvent_NetworkEvent::Type_MIN;
const Span_TimeEvent_NetworkEvent_Type Span_TimeEvent_NetworkEvent::Type_MAX;
const int Span_TimeEvent_NetworkEvent::Type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Span_Link_Type_descriptor() {
  protobuf_google_2ftracing_2ftrace_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2ftracing_2ftrace_2eproto::file_level_enum_descriptors[1];
}
bool Span_Link_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Span_Link_Type Span_Link::UNSPECIFIED;
const Span_Link_Type Span_Link::CHILD;
const Span_Link_Type Span_Link::PARENT;
const Span_Link_Type Span_Link::Type_MIN;
const Span_Link_Type Span_Link::Type_MAX;
const int Span_Link::Type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

void TraceId::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TraceId::kHexEncodedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TraceId::TraceId()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_google_2ftracing_2ftrace_2eproto::InitDefaultsTraceId();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.tracing.v1.TraceId)
}
TraceId::TraceId(const TraceId& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  hex_encoded_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.hex_encoded().size() > 0) {
    hex_encoded_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.hex_encoded_);
  }
  // @@protoc_insertion_point(copy_constructor:google.tracing.v1.TraceId)
}

void TraceId::SharedCtor() {
  hex_encoded_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

TraceId::~TraceId() {
  // @@protoc_insertion_point(destructor:google.tracing.v1.TraceId)
  SharedDtor();
}

void TraceId::SharedDtor() {
  hex_encoded_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void TraceId::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TraceId::descriptor() {
  ::protobuf_google_2ftracing_2ftrace_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2ftracing_2ftrace_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TraceId& TraceId::default_instance() {
  ::protobuf_google_2ftracing_2ftrace_2eproto::InitDefaultsTraceId();
  return *internal_default_instance();
}

TraceId* TraceId::New(::google::protobuf::Arena* arena) const {
  TraceId* n = new TraceId;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TraceId::Clear() {
// @@protoc_insertion_point(message_clear_start:google.tracing.v1.TraceId)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  hex_encoded_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool TraceId::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.tracing.v1.TraceId)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string hex_encoded = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_hex_encoded()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->hex_encoded().data(), static_cast<int>(this->hex_encoded().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.tracing.v1.TraceId.hex_encoded"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.tracing.v1.TraceId)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.tracing.v1.TraceId)
  return false;
#undef DO_
}

void TraceId::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.tracing.v1.TraceId)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string hex_encoded = 1;
  if (this->hex_encoded().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->hex_encoded().data(), static_cast<int>(this->hex_encoded().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.tracing.v1.TraceId.hex_encoded");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->hex_encoded(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:google.tracing.v1.TraceId)
}

::google::protobuf::uint8* TraceId::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.tracing.v1.TraceId)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string hex_encoded = 1;
  if (this->hex_encoded().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->hex_encoded().data(), static_cast<int>(this->hex_encoded().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.tracing.v1.TraceId.hex_encoded");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->hex_encoded(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.tracing.v1.TraceId)
  return target;
}

size_t TraceId::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.tracing.v1.TraceId)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string hex_encoded = 1;
  if (this->hex_encoded().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->hex_encoded());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TraceId::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.tracing.v1.TraceId)
  GOOGLE_DCHECK_NE(&from, this);
  const TraceId* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TraceId>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.tracing.v1.TraceId)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.tracing.v1.TraceId)
    MergeFrom(*source);
  }
}

void TraceId::MergeFrom(const TraceId& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.tracing.v1.TraceId)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.hex_encoded().size() > 0) {

    hex_encoded_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.hex_encoded_);
  }
}

void TraceId::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.tracing.v1.TraceId)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TraceId::CopyFrom(const TraceId& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.tracing.v1.TraceId)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TraceId::IsInitialized() const {
  return true;
}

void TraceId::Swap(TraceId* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TraceId::InternalSwap(TraceId* other) {
  using std::swap;
  hex_encoded_.Swap(&other->hex_encoded_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TraceId::GetMetadata() const {
  protobuf_google_2ftracing_2ftrace_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2ftracing_2ftrace_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Module::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Module::kModuleFieldNumber;
const int Module::kBuildIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Module::Module()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_google_2ftracing_2ftrace_2eproto::InitDefaultsModule();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.tracing.v1.Module)
}
Module::Module(const Module& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  module_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.module().size() > 0) {
    module_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.module_);
  }
  build_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.build_id().size() > 0) {
    build_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.build_id_);
  }
  // @@protoc_insertion_point(copy_constructor:google.tracing.v1.Module)
}

void Module::SharedCtor() {
  module_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  build_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

Module::~Module() {
  // @@protoc_insertion_point(destructor:google.tracing.v1.Module)
  SharedDtor();
}

void Module::SharedDtor() {
  module_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  build_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Module::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Module::descriptor() {
  ::protobuf_google_2ftracing_2ftrace_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2ftracing_2ftrace_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Module& Module::default_instance() {
  ::protobuf_google_2ftracing_2ftrace_2eproto::InitDefaultsModule();
  return *internal_default_instance();
}

Module* Module::New(::google::protobuf::Arena* arena) const {
  Module* n = new Module;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Module::Clear() {
// @@protoc_insertion_point(message_clear_start:google.tracing.v1.Module)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  module_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  build_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool Module::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.tracing.v1.Module)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string module = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_module()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->module().data(), static_cast<int>(this->module().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.tracing.v1.Module.module"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string build_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_build_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->build_id().data(), static_cast<int>(this->build_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.tracing.v1.Module.build_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.tracing.v1.Module)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.tracing.v1.Module)
  return false;
#undef DO_
}

void Module::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.tracing.v1.Module)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string module = 1;
  if (this->module().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->module().data(), static_cast<int>(this->module().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.tracing.v1.Module.module");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->module(), output);
  }

  // string build_id = 2;
  if (this->build_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->build_id().data(), static_cast<int>(this->build_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.tracing.v1.Module.build_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->build_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:google.tracing.v1.Module)
}

::google::protobuf::uint8* Module::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.tracing.v1.Module)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string module = 1;
  if (this->module().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->module().data(), static_cast<int>(this->module().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.tracing.v1.Module.module");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->module(), target);
  }

  // string build_id = 2;
  if (this->build_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->build_id().data(), static_cast<int>(this->build_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.tracing.v1.Module.build_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->build_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.tracing.v1.Module)
  return target;
}

size_t Module::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.tracing.v1.Module)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string module = 1;
  if (this->module().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->module());
  }

  // string build_id = 2;
  if (this->build_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->build_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Module::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.tracing.v1.Module)
  GOOGLE_DCHECK_NE(&from, this);
  const Module* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Module>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.tracing.v1.Module)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.tracing.v1.Module)
    MergeFrom(*source);
  }
}

void Module::MergeFrom(const Module& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.tracing.v1.Module)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.module().size() > 0) {

    module_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.module_);
  }
  if (from.build_id().size() > 0) {

    build_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.build_id_);
  }
}

void Module::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.tracing.v1.Module)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Module::CopyFrom(const Module& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.tracing.v1.Module)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Module::IsInitialized() const {
  return true;
}

void Module::Swap(Module* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Module::InternalSwap(Module* other) {
  using std::swap;
  module_.Swap(&other->module_);
  build_id_.Swap(&other->build_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Module::GetMetadata() const {
  protobuf_google_2ftracing_2ftrace_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2ftracing_2ftrace_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void StackTrace_StackFrame::InitAsDefaultInstance() {
  ::google::tracing::v1::_StackTrace_StackFrame_default_instance_._instance.get_mutable()->load_module_ = const_cast< ::google::tracing::v1::Module*>(
      ::google::tracing::v1::Module::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StackTrace_StackFrame::kFunctionNameFieldNumber;
const int StackTrace_StackFrame::kOrigFunctionNameFieldNumber;
const int StackTrace_StackFrame::kFileNameFieldNumber;
const int StackTrace_StackFrame::kLineNumberFieldNumber;
const int StackTrace_StackFrame::kColumnNumberFieldNumber;
const int StackTrace_StackFrame::kLoadModuleFieldNumber;
const int StackTrace_StackFrame::kSourceVersionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StackTrace_StackFrame::StackTrace_StackFrame()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_google_2ftracing_2ftrace_2eproto::InitDefaultsStackTrace_StackFrame();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.tracing.v1.StackTrace.StackFrame)
}
StackTrace_StackFrame::StackTrace_StackFrame(const StackTrace_StackFrame& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  function_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.function_name().size() > 0) {
    function_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.function_name_);
  }
  orig_function_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.orig_function_name().size() > 0) {
    orig_function_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.orig_function_name_);
  }
  file_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.file_name().size() > 0) {
    file_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.file_name_);
  }
  source_version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.source_version().size() > 0) {
    source_version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.source_version_);
  }
  if (from.has_load_module()) {
    load_module_ = new ::google::tracing::v1::Module(*from.load_module_);
  } else {
    load_module_ = NULL;
  }
  ::memcpy(&line_number_, &from.line_number_,
    static_cast<size_t>(reinterpret_cast<char*>(&column_number_) -
    reinterpret_cast<char*>(&line_number_)) + sizeof(column_number_));
  // @@protoc_insertion_point(copy_constructor:google.tracing.v1.StackTrace.StackFrame)
}

void StackTrace_StackFrame::SharedCtor() {
  function_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  orig_function_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  file_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  source_version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&load_module_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&column_number_) -
      reinterpret_cast<char*>(&load_module_)) + sizeof(column_number_));
  _cached_size_ = 0;
}

StackTrace_StackFrame::~StackTrace_StackFrame() {
  // @@protoc_insertion_point(destructor:google.tracing.v1.StackTrace.StackFrame)
  SharedDtor();
}

void StackTrace_StackFrame::SharedDtor() {
  function_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  orig_function_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  file_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  source_version_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete load_module_;
}

void StackTrace_StackFrame::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StackTrace_StackFrame::descriptor() {
  ::protobuf_google_2ftracing_2ftrace_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2ftracing_2ftrace_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const StackTrace_StackFrame& StackTrace_StackFrame::default_instance() {
  ::protobuf_google_2ftracing_2ftrace_2eproto::InitDefaultsStackTrace_StackFrame();
  return *internal_default_instance();
}

StackTrace_StackFrame* StackTrace_StackFrame::New(::google::protobuf::Arena* arena) const {
  StackTrace_StackFrame* n = new StackTrace_StackFrame;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void StackTrace_StackFrame::Clear() {
// @@protoc_insertion_point(message_clear_start:google.tracing.v1.StackTrace.StackFrame)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  function_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  orig_function_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  file_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  source_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && load_module_ != NULL) {
    delete load_module_;
  }
  load_module_ = NULL;
  ::memset(&line_number_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&column_number_) -
      reinterpret_cast<char*>(&line_number_)) + sizeof(column_number_));
  _internal_metadata_.Clear();
}

bool StackTrace_StackFrame::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.tracing.v1.StackTrace.StackFrame)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string function_name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_function_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->function_name().data(), static_cast<int>(this->function_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.tracing.v1.StackTrace.StackFrame.function_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string orig_function_name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_orig_function_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->orig_function_name().data(), static_cast<int>(this->orig_function_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.tracing.v1.StackTrace.StackFrame.orig_function_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string file_name = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_file_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->file_name().data(), static_cast<int>(this->file_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.tracing.v1.StackTrace.StackFrame.file_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 line_number = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &line_number_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 column_number = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &column_number_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.tracing.v1.Module load_module = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_load_module()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string source_version = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_source_version()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->source_version().data(), static_cast<int>(this->source_version().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.tracing.v1.StackTrace.StackFrame.source_version"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.tracing.v1.StackTrace.StackFrame)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.tracing.v1.StackTrace.StackFrame)
  return false;
#undef DO_
}

void StackTrace_StackFrame::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.tracing.v1.StackTrace.StackFrame)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string function_name = 1;
  if (this->function_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->function_name().data(), static_cast<int>(this->function_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.tracing.v1.StackTrace.StackFrame.function_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->function_name(), output);
  }

  // string orig_function_name = 2;
  if (this->orig_function_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->orig_function_name().data(), static_cast<int>(this->orig_function_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.tracing.v1.StackTrace.StackFrame.orig_function_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->orig_function_name(), output);
  }

  // string file_name = 3;
  if (this->file_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->file_name().data(), static_cast<int>(this->file_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.tracing.v1.StackTrace.StackFrame.file_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->file_name(), output);
  }

  // int64 line_number = 4;
  if (this->line_number() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->line_number(), output);
  }

  // int64 column_number = 5;
  if (this->column_number() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->column_number(), output);
  }

  // .google.tracing.v1.Module load_module = 6;
  if (this->has_load_module()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->load_module_, output);
  }

  // string source_version = 7;
  if (this->source_version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->source_version().data(), static_cast<int>(this->source_version().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.tracing.v1.StackTrace.StackFrame.source_version");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->source_version(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:google.tracing.v1.StackTrace.StackFrame)
}

::google::protobuf::uint8* StackTrace_StackFrame::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.tracing.v1.StackTrace.StackFrame)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string function_name = 1;
  if (this->function_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->function_name().data(), static_cast<int>(this->function_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.tracing.v1.StackTrace.StackFrame.function_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->function_name(), target);
  }

  // string orig_function_name = 2;
  if (this->orig_function_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->orig_function_name().data(), static_cast<int>(this->orig_function_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.tracing.v1.StackTrace.StackFrame.orig_function_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->orig_function_name(), target);
  }

  // string file_name = 3;
  if (this->file_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->file_name().data(), static_cast<int>(this->file_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.tracing.v1.StackTrace.StackFrame.file_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->file_name(), target);
  }

  // int64 line_number = 4;
  if (this->line_number() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->line_number(), target);
  }

  // int64 column_number = 5;
  if (this->column_number() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->column_number(), target);
  }

  // .google.tracing.v1.Module load_module = 6;
  if (this->has_load_module()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, *this->load_module_, deterministic, target);
  }

  // string source_version = 7;
  if (this->source_version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->source_version().data(), static_cast<int>(this->source_version().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.tracing.v1.StackTrace.StackFrame.source_version");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->source_version(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.tracing.v1.StackTrace.StackFrame)
  return target;
}

size_t StackTrace_StackFrame::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.tracing.v1.StackTrace.StackFrame)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string function_name = 1;
  if (this->function_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->function_name());
  }

  // string orig_function_name = 2;
  if (this->orig_function_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->orig_function_name());
  }

  // string file_name = 3;
  if (this->file_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->file_name());
  }

  // string source_version = 7;
  if (this->source_version().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->source_version());
  }

  // .google.tracing.v1.Module load_module = 6;
  if (this->has_load_module()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->load_module_);
  }

  // int64 line_number = 4;
  if (this->line_number() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->line_number());
  }

  // int64 column_number = 5;
  if (this->column_number() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->column_number());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StackTrace_StackFrame::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.tracing.v1.StackTrace.StackFrame)
  GOOGLE_DCHECK_NE(&from, this);
  const StackTrace_StackFrame* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const StackTrace_StackFrame>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.tracing.v1.StackTrace.StackFrame)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.tracing.v1.StackTrace.StackFrame)
    MergeFrom(*source);
  }
}

void StackTrace_StackFrame::MergeFrom(const StackTrace_StackFrame& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.tracing.v1.StackTrace.StackFrame)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.function_name().size() > 0) {

    function_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.function_name_);
  }
  if (from.orig_function_name().size() > 0) {

    orig_function_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.orig_function_name_);
  }
  if (from.file_name().size() > 0) {

    file_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.file_name_);
  }
  if (from.source_version().size() > 0) {

    source_version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.source_version_);
  }
  if (from.has_load_module()) {
    mutable_load_module()->::google::tracing::v1::Module::MergeFrom(from.load_module());
  }
  if (from.line_number() != 0) {
    set_line_number(from.line_number());
  }
  if (from.column_number() != 0) {
    set_column_number(from.column_number());
  }
}

void StackTrace_StackFrame::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.tracing.v1.StackTrace.StackFrame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StackTrace_StackFrame::CopyFrom(const StackTrace_StackFrame& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.tracing.v1.StackTrace.StackFrame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StackTrace_StackFrame::IsInitialized() const {
  return true;
}

void StackTrace_StackFrame::Swap(StackTrace_StackFrame* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StackTrace_StackFrame::InternalSwap(StackTrace_StackFrame* other) {
  using std::swap;
  function_name_.Swap(&other->function_name_);
  orig_function_name_.Swap(&other->orig_function_name_);
  file_name_.Swap(&other->file_name_);
  source_version_.Swap(&other->source_version_);
  swap(load_module_, other->load_module_);
  swap(line_number_, other->line_number_);
  swap(column_number_, other->column_number_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata StackTrace_StackFrame::GetMetadata() const {
  protobuf_google_2ftracing_2ftrace_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2ftracing_2ftrace_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void StackTrace::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StackTrace::kStackFrameFieldNumber;
const int StackTrace::kStackTraceHashIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StackTrace::StackTrace()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_google_2ftracing_2ftrace_2eproto::InitDefaultsStackTrace();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.tracing.v1.StackTrace)
}
StackTrace::StackTrace(const StackTrace& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      stack_frame_(from.stack_frame_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  stack_trace_hash_id_ = from.stack_trace_hash_id_;
  // @@protoc_insertion_point(copy_constructor:google.tracing.v1.StackTrace)
}

void StackTrace::SharedCtor() {
  stack_trace_hash_id_ = GOOGLE_ULONGLONG(0);
  _cached_size_ = 0;
}

StackTrace::~StackTrace() {
  // @@protoc_insertion_point(destructor:google.tracing.v1.StackTrace)
  SharedDtor();
}

void StackTrace::SharedDtor() {
}

void StackTrace::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StackTrace::descriptor() {
  ::protobuf_google_2ftracing_2ftrace_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2ftracing_2ftrace_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const StackTrace& StackTrace::default_instance() {
  ::protobuf_google_2ftracing_2ftrace_2eproto::InitDefaultsStackTrace();
  return *internal_default_instance();
}

StackTrace* StackTrace::New(::google::protobuf::Arena* arena) const {
  StackTrace* n = new StackTrace;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void StackTrace::Clear() {
// @@protoc_insertion_point(message_clear_start:google.tracing.v1.StackTrace)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  stack_frame_.Clear();
  stack_trace_hash_id_ = GOOGLE_ULONGLONG(0);
  _internal_metadata_.Clear();
}

bool StackTrace::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.tracing.v1.StackTrace)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .google.tracing.v1.StackTrace.StackFrame stack_frame = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_stack_frame()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 stack_trace_hash_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &stack_trace_hash_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.tracing.v1.StackTrace)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.tracing.v1.StackTrace)
  return false;
#undef DO_
}

void StackTrace::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.tracing.v1.StackTrace)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .google.tracing.v1.StackTrace.StackFrame stack_frame = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->stack_frame_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->stack_frame(static_cast<int>(i)), output);
  }

  // uint64 stack_trace_hash_id = 2;
  if (this->stack_trace_hash_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->stack_trace_hash_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:google.tracing.v1.StackTrace)
}

::google::protobuf::uint8* StackTrace::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.tracing.v1.StackTrace)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .google.tracing.v1.StackTrace.StackFrame stack_frame = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->stack_frame_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->stack_frame(static_cast<int>(i)), deterministic, target);
  }

  // uint64 stack_trace_hash_id = 2;
  if (this->stack_trace_hash_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->stack_trace_hash_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.tracing.v1.StackTrace)
  return target;
}

size_t StackTrace::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.tracing.v1.StackTrace)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .google.tracing.v1.StackTrace.StackFrame stack_frame = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->stack_frame_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->stack_frame(static_cast<int>(i)));
    }
  }

  // uint64 stack_trace_hash_id = 2;
  if (this->stack_trace_hash_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->stack_trace_hash_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StackTrace::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.tracing.v1.StackTrace)
  GOOGLE_DCHECK_NE(&from, this);
  const StackTrace* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const StackTrace>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.tracing.v1.StackTrace)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.tracing.v1.StackTrace)
    MergeFrom(*source);
  }
}

void StackTrace::MergeFrom(const StackTrace& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.tracing.v1.StackTrace)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  stack_frame_.MergeFrom(from.stack_frame_);
  if (from.stack_trace_hash_id() != 0) {
    set_stack_trace_hash_id(from.stack_trace_hash_id());
  }
}

void StackTrace::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.tracing.v1.StackTrace)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StackTrace::CopyFrom(const StackTrace& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.tracing.v1.StackTrace)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StackTrace::IsInitialized() const {
  return true;
}

void StackTrace::Swap(StackTrace* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StackTrace::InternalSwap(StackTrace* other) {
  using std::swap;
  stack_frame_.InternalSwap(&other->stack_frame_);
  swap(stack_trace_hash_id_, other->stack_trace_hash_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata StackTrace::GetMetadata() const {
  protobuf_google_2ftracing_2ftrace_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2ftracing_2ftrace_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void LabelValue::InitAsDefaultInstance() {
  ::google::tracing::v1::_LabelValue_default_instance_.string_value_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::google::tracing::v1::_LabelValue_default_instance_.int_value_ = GOOGLE_LONGLONG(0);
  ::google::tracing::v1::_LabelValue_default_instance_.bool_value_ = false;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LabelValue::kStringValueFieldNumber;
const int LabelValue::kIntValueFieldNumber;
const int LabelValue::kBoolValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LabelValue::LabelValue()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_google_2ftracing_2ftrace_2eproto::InitDefaultsLabelValue();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.tracing.v1.LabelValue)
}
LabelValue::LabelValue(const LabelValue& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_value();
  switch (from.value_case()) {
    case kStringValue: {
      set_string_value(from.string_value());
      break;
    }
    case kIntValue: {
      set_int_value(from.int_value());
      break;
    }
    case kBoolValue: {
      set_bool_value(from.bool_value());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:google.tracing.v1.LabelValue)
}

void LabelValue::SharedCtor() {
  clear_has_value();
  _cached_size_ = 0;
}

LabelValue::~LabelValue() {
  // @@protoc_insertion_point(destructor:google.tracing.v1.LabelValue)
  SharedDtor();
}

void LabelValue::SharedDtor() {
  if (has_value()) {
    clear_value();
  }
}

void LabelValue::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LabelValue::descriptor() {
  ::protobuf_google_2ftracing_2ftrace_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2ftracing_2ftrace_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LabelValue& LabelValue::default_instance() {
  ::protobuf_google_2ftracing_2ftrace_2eproto::InitDefaultsLabelValue();
  return *internal_default_instance();
}

LabelValue* LabelValue::New(::google::protobuf::Arena* arena) const {
  LabelValue* n = new LabelValue;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LabelValue::clear_value() {
// @@protoc_insertion_point(one_of_clear_start:google.tracing.v1.LabelValue)
  switch (value_case()) {
    case kStringValue: {
      value_.string_value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case kIntValue: {
      // No need to clear
      break;
    }
    case kBoolValue: {
      // No need to clear
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = VALUE_NOT_SET;
}


void LabelValue::Clear() {
// @@protoc_insertion_point(message_clear_start:google.tracing.v1.LabelValue)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_value();
  _internal_metadata_.Clear();
}

bool LabelValue::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.tracing.v1.LabelValue)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string string_value = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_string_value()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->string_value().data(), static_cast<int>(this->string_value().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.tracing.v1.LabelValue.string_value"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 int_value = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          clear_value();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &value_.int_value_)));
          set_has_int_value();
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool bool_value = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          clear_value();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &value_.bool_value_)));
          set_has_bool_value();
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.tracing.v1.LabelValue)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.tracing.v1.LabelValue)
  return false;
#undef DO_
}

void LabelValue::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.tracing.v1.LabelValue)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string string_value = 1;
  if (has_string_value()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->string_value().data(), static_cast<int>(this->string_value().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.tracing.v1.LabelValue.string_value");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->string_value(), output);
  }

  // int64 int_value = 2;
  if (has_int_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->int_value(), output);
  }

  // bool bool_value = 3;
  if (has_bool_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->bool_value(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:google.tracing.v1.LabelValue)
}

::google::protobuf::uint8* LabelValue::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.tracing.v1.LabelValue)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string string_value = 1;
  if (has_string_value()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->string_value().data(), static_cast<int>(this->string_value().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.tracing.v1.LabelValue.string_value");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->string_value(), target);
  }

  // int64 int_value = 2;
  if (has_int_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->int_value(), target);
  }

  // bool bool_value = 3;
  if (has_bool_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->bool_value(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.tracing.v1.LabelValue)
  return target;
}

size_t LabelValue::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.tracing.v1.LabelValue)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  switch (value_case()) {
    // string string_value = 1;
    case kStringValue: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->string_value());
      break;
    }
    // int64 int_value = 2;
    case kIntValue: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->int_value());
      break;
    }
    // bool bool_value = 3;
    case kBoolValue: {
      total_size += 1 + 1;
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LabelValue::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.tracing.v1.LabelValue)
  GOOGLE_DCHECK_NE(&from, this);
  const LabelValue* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LabelValue>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.tracing.v1.LabelValue)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.tracing.v1.LabelValue)
    MergeFrom(*source);
  }
}

void LabelValue::MergeFrom(const LabelValue& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.tracing.v1.LabelValue)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.value_case()) {
    case kStringValue: {
      set_string_value(from.string_value());
      break;
    }
    case kIntValue: {
      set_int_value(from.int_value());
      break;
    }
    case kBoolValue: {
      set_bool_value(from.bool_value());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
}

void LabelValue::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.tracing.v1.LabelValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LabelValue::CopyFrom(const LabelValue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.tracing.v1.LabelValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LabelValue::IsInitialized() const {
  return true;
}

void LabelValue::Swap(LabelValue* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LabelValue::InternalSwap(LabelValue* other) {
  using std::swap;
  swap(value_, other->value_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LabelValue::GetMetadata() const {
  protobuf_google_2ftracing_2ftrace_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2ftracing_2ftrace_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

Span_TimeEvent_Annotation_LabelsEntry_DoNotUse::Span_TimeEvent_Annotation_LabelsEntry_DoNotUse() {}
Span_TimeEvent_Annotation_LabelsEntry_DoNotUse::Span_TimeEvent_Annotation_LabelsEntry_DoNotUse(::google::protobuf::Arena* arena) : SuperType(arena) {}
void Span_TimeEvent_Annotation_LabelsEntry_DoNotUse::MergeFrom(const Span_TimeEvent_Annotation_LabelsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::google::protobuf::Metadata Span_TimeEvent_Annotation_LabelsEntry_DoNotUse::GetMetadata() const {
  ::protobuf_google_2ftracing_2ftrace_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2ftracing_2ftrace_2eproto::file_level_metadata[5];
}
void Span_TimeEvent_Annotation_LabelsEntry_DoNotUse::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}


// ===================================================================

void Span_TimeEvent_Annotation::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Span_TimeEvent_Annotation::kDescriptionFieldNumber;
const int Span_TimeEvent_Annotation::kLabelsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Span_TimeEvent_Annotation::Span_TimeEvent_Annotation()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_google_2ftracing_2ftrace_2eproto::InitDefaultsSpan_TimeEvent_Annotation();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.tracing.v1.Span.TimeEvent.Annotation)
}
Span_TimeEvent_Annotation::Span_TimeEvent_Annotation(const Span_TimeEvent_Annotation& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  labels_.MergeFrom(from.labels_);
  description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.description().size() > 0) {
    description_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.description_);
  }
  // @@protoc_insertion_point(copy_constructor:google.tracing.v1.Span.TimeEvent.Annotation)
}

void Span_TimeEvent_Annotation::SharedCtor() {
  description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

Span_TimeEvent_Annotation::~Span_TimeEvent_Annotation() {
  // @@protoc_insertion_point(destructor:google.tracing.v1.Span.TimeEvent.Annotation)
  SharedDtor();
}

void Span_TimeEvent_Annotation::SharedDtor() {
  description_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Span_TimeEvent_Annotation::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Span_TimeEvent_Annotation::descriptor() {
  ::protobuf_google_2ftracing_2ftrace_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2ftracing_2ftrace_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Span_TimeEvent_Annotation& Span_TimeEvent_Annotation::default_instance() {
  ::protobuf_google_2ftracing_2ftrace_2eproto::InitDefaultsSpan_TimeEvent_Annotation();
  return *internal_default_instance();
}

Span_TimeEvent_Annotation* Span_TimeEvent_Annotation::New(::google::protobuf::Arena* arena) const {
  Span_TimeEvent_Annotation* n = new Span_TimeEvent_Annotation;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Span_TimeEvent_Annotation::Clear() {
// @@protoc_insertion_point(message_clear_start:google.tracing.v1.Span.TimeEvent.Annotation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  labels_.Clear();
  description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool Span_TimeEvent_Annotation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.tracing.v1.Span.TimeEvent.Annotation)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string description = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_description()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->description().data(), static_cast<int>(this->description().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.tracing.v1.Span.TimeEvent.Annotation.description"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, .google.tracing.v1.LabelValue> labels = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          Span_TimeEvent_Annotation_LabelsEntry_DoNotUse::Parser< ::google::protobuf::internal::MapField<
              Span_TimeEvent_Annotation_LabelsEntry_DoNotUse,
              ::std::string, ::google::tracing::v1::LabelValue,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
              0 >,
            ::google::protobuf::Map< ::std::string, ::google::tracing::v1::LabelValue > > parser(&labels_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.tracing.v1.Span.TimeEvent.Annotation.LabelsEntry.key"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.tracing.v1.Span.TimeEvent.Annotation)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.tracing.v1.Span.TimeEvent.Annotation)
  return false;
#undef DO_
}

void Span_TimeEvent_Annotation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.tracing.v1.Span.TimeEvent.Annotation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string description = 1;
  if (this->description().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->description().data(), static_cast<int>(this->description().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.tracing.v1.Span.TimeEvent.Annotation.description");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->description(), output);
  }

  // map<string, .google.tracing.v1.LabelValue> labels = 2;
  if (!this->labels().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::google::tracing::v1::LabelValue >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "google.tracing.v1.Span.TimeEvent.Annotation.LabelsEntry.key");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->labels().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->labels().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::google::tracing::v1::LabelValue >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::google::tracing::v1::LabelValue >::const_iterator
          it = this->labels().begin();
          it != this->labels().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<Span_TimeEvent_Annotation_LabelsEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(labels_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            2, *entry, output);
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::google::protobuf::scoped_ptr<Span_TimeEvent_Annotation_LabelsEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::google::tracing::v1::LabelValue >::const_iterator
          it = this->labels().begin();
          it != this->labels().end(); ++it) {
        entry.reset(labels_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            2, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:google.tracing.v1.Span.TimeEvent.Annotation)
}

::google::protobuf::uint8* Span_TimeEvent_Annotation::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.tracing.v1.Span.TimeEvent.Annotation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string description = 1;
  if (this->description().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->description().data(), static_cast<int>(this->description().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.tracing.v1.Span.TimeEvent.Annotation.description");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->description(), target);
  }

  // map<string, .google.tracing.v1.LabelValue> labels = 2;
  if (!this->labels().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::google::tracing::v1::LabelValue >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "google.tracing.v1.Span.TimeEvent.Annotation.LabelsEntry.key");
      }
    };

    if (deterministic &&
        this->labels().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->labels().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::google::tracing::v1::LabelValue >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::google::tracing::v1::LabelValue >::const_iterator
          it = this->labels().begin();
          it != this->labels().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<Span_TimeEvent_Annotation_LabelsEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(labels_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       2, *entry, deterministic, target);
;
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::google::protobuf::scoped_ptr<Span_TimeEvent_Annotation_LabelsEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::google::tracing::v1::LabelValue >::const_iterator
          it = this->labels().begin();
          it != this->labels().end(); ++it) {
        entry.reset(labels_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       2, *entry, deterministic, target);
;
        Utf8Check::Check(&*it);
      }
    }
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.tracing.v1.Span.TimeEvent.Annotation)
  return target;
}

size_t Span_TimeEvent_Annotation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.tracing.v1.Span.TimeEvent.Annotation)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // map<string, .google.tracing.v1.LabelValue> labels = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->labels_size());
  {
    ::google::protobuf::scoped_ptr<Span_TimeEvent_Annotation_LabelsEntry_DoNotUse> entry;
    for (::google::protobuf::Map< ::std::string, ::google::tracing::v1::LabelValue >::const_iterator
        it = this->labels().begin();
        it != this->labels().end(); ++it) {
      entry.reset(labels_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // string description = 1;
  if (this->description().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->description());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Span_TimeEvent_Annotation::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.tracing.v1.Span.TimeEvent.Annotation)
  GOOGLE_DCHECK_NE(&from, this);
  const Span_TimeEvent_Annotation* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Span_TimeEvent_Annotation>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.tracing.v1.Span.TimeEvent.Annotation)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.tracing.v1.Span.TimeEvent.Annotation)
    MergeFrom(*source);
  }
}

void Span_TimeEvent_Annotation::MergeFrom(const Span_TimeEvent_Annotation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.tracing.v1.Span.TimeEvent.Annotation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  labels_.MergeFrom(from.labels_);
  if (from.description().size() > 0) {

    description_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.description_);
  }
}

void Span_TimeEvent_Annotation::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.tracing.v1.Span.TimeEvent.Annotation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Span_TimeEvent_Annotation::CopyFrom(const Span_TimeEvent_Annotation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.tracing.v1.Span.TimeEvent.Annotation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Span_TimeEvent_Annotation::IsInitialized() const {
  return true;
}

void Span_TimeEvent_Annotation::Swap(Span_TimeEvent_Annotation* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Span_TimeEvent_Annotation::InternalSwap(Span_TimeEvent_Annotation* other) {
  using std::swap;
  labels_.Swap(&other->labels_);
  description_.Swap(&other->description_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Span_TimeEvent_Annotation::GetMetadata() const {
  protobuf_google_2ftracing_2ftrace_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2ftracing_2ftrace_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Span_TimeEvent_NetworkEvent::InitAsDefaultInstance() {
  ::google::tracing::v1::_Span_TimeEvent_NetworkEvent_default_instance_._instance.get_mutable()->kernel_time_ = const_cast< ::google::protobuf::Timestamp*>(
      ::google::protobuf::Timestamp::internal_default_instance());
}
void Span_TimeEvent_NetworkEvent::clear_kernel_time() {
  if (GetArenaNoVirtual() == NULL && kernel_time_ != NULL) {
    delete kernel_time_;
  }
  kernel_time_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Span_TimeEvent_NetworkEvent::kKernelTimeFieldNumber;
const int Span_TimeEvent_NetworkEvent::kTypeFieldNumber;
const int Span_TimeEvent_NetworkEvent::kMessageIdFieldNumber;
const int Span_TimeEvent_NetworkEvent::kMessageSizeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Span_TimeEvent_NetworkEvent::Span_TimeEvent_NetworkEvent()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_google_2ftracing_2ftrace_2eproto::InitDefaultsSpan_TimeEvent_NetworkEvent();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.tracing.v1.Span.TimeEvent.NetworkEvent)
}
Span_TimeEvent_NetworkEvent::Span_TimeEvent_NetworkEvent(const Span_TimeEvent_NetworkEvent& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_kernel_time()) {
    kernel_time_ = new ::google::protobuf::Timestamp(*from.kernel_time_);
  } else {
    kernel_time_ = NULL;
  }
  ::memcpy(&message_id_, &from.message_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&message_id_)) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:google.tracing.v1.Span.TimeEvent.NetworkEvent)
}

void Span_TimeEvent_NetworkEvent::SharedCtor() {
  ::memset(&kernel_time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&kernel_time_)) + sizeof(type_));
  _cached_size_ = 0;
}

Span_TimeEvent_NetworkEvent::~Span_TimeEvent_NetworkEvent() {
  // @@protoc_insertion_point(destructor:google.tracing.v1.Span.TimeEvent.NetworkEvent)
  SharedDtor();
}

void Span_TimeEvent_NetworkEvent::SharedDtor() {
  if (this != internal_default_instance()) delete kernel_time_;
}

void Span_TimeEvent_NetworkEvent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Span_TimeEvent_NetworkEvent::descriptor() {
  ::protobuf_google_2ftracing_2ftrace_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2ftracing_2ftrace_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Span_TimeEvent_NetworkEvent& Span_TimeEvent_NetworkEvent::default_instance() {
  ::protobuf_google_2ftracing_2ftrace_2eproto::InitDefaultsSpan_TimeEvent_NetworkEvent();
  return *internal_default_instance();
}

Span_TimeEvent_NetworkEvent* Span_TimeEvent_NetworkEvent::New(::google::protobuf::Arena* arena) const {
  Span_TimeEvent_NetworkEvent* n = new Span_TimeEvent_NetworkEvent;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Span_TimeEvent_NetworkEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:google.tracing.v1.Span.TimeEvent.NetworkEvent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && kernel_time_ != NULL) {
    delete kernel_time_;
  }
  kernel_time_ = NULL;
  ::memset(&message_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&message_id_)) + sizeof(type_));
  _internal_metadata_.Clear();
}

bool Span_TimeEvent_NetworkEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.tracing.v1.Span.TimeEvent.NetworkEvent)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .google.protobuf.Timestamp kernel_time = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_kernel_time()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.tracing.v1.Span.TimeEvent.NetworkEvent.Type type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::google::tracing::v1::Span_TimeEvent_NetworkEvent_Type >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 message_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &message_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 message_size = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &message_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.tracing.v1.Span.TimeEvent.NetworkEvent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.tracing.v1.Span.TimeEvent.NetworkEvent)
  return false;
#undef DO_
}

void Span_TimeEvent_NetworkEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.tracing.v1.Span.TimeEvent.NetworkEvent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.Timestamp kernel_time = 1;
  if (this->has_kernel_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->kernel_time_, output);
  }

  // .google.tracing.v1.Span.TimeEvent.NetworkEvent.Type type = 2;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  // uint64 message_id = 3;
  if (this->message_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->message_id(), output);
  }

  // uint64 message_size = 4;
  if (this->message_size() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->message_size(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:google.tracing.v1.Span.TimeEvent.NetworkEvent)
}

::google::protobuf::uint8* Span_TimeEvent_NetworkEvent::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.tracing.v1.Span.TimeEvent.NetworkEvent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.Timestamp kernel_time = 1;
  if (this->has_kernel_time()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->kernel_time_, deterministic, target);
  }

  // .google.tracing.v1.Span.TimeEvent.NetworkEvent.Type type = 2;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }

  // uint64 message_id = 3;
  if (this->message_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->message_id(), target);
  }

  // uint64 message_size = 4;
  if (this->message_size() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->message_size(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.tracing.v1.Span.TimeEvent.NetworkEvent)
  return target;
}

size_t Span_TimeEvent_NetworkEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.tracing.v1.Span.TimeEvent.NetworkEvent)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .google.protobuf.Timestamp kernel_time = 1;
  if (this->has_kernel_time()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->kernel_time_);
  }

  // uint64 message_id = 3;
  if (this->message_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->message_id());
  }

  // uint64 message_size = 4;
  if (this->message_size() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->message_size());
  }

  // .google.tracing.v1.Span.TimeEvent.NetworkEvent.Type type = 2;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Span_TimeEvent_NetworkEvent::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.tracing.v1.Span.TimeEvent.NetworkEvent)
  GOOGLE_DCHECK_NE(&from, this);
  const Span_TimeEvent_NetworkEvent* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Span_TimeEvent_NetworkEvent>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.tracing.v1.Span.TimeEvent.NetworkEvent)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.tracing.v1.Span.TimeEvent.NetworkEvent)
    MergeFrom(*source);
  }
}

void Span_TimeEvent_NetworkEvent::MergeFrom(const Span_TimeEvent_NetworkEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.tracing.v1.Span.TimeEvent.NetworkEvent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_kernel_time()) {
    mutable_kernel_time()->::google::protobuf::Timestamp::MergeFrom(from.kernel_time());
  }
  if (from.message_id() != 0) {
    set_message_id(from.message_id());
  }
  if (from.message_size() != 0) {
    set_message_size(from.message_size());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
}

void Span_TimeEvent_NetworkEvent::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.tracing.v1.Span.TimeEvent.NetworkEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Span_TimeEvent_NetworkEvent::CopyFrom(const Span_TimeEvent_NetworkEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.tracing.v1.Span.TimeEvent.NetworkEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Span_TimeEvent_NetworkEvent::IsInitialized() const {
  return true;
}

void Span_TimeEvent_NetworkEvent::Swap(Span_TimeEvent_NetworkEvent* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Span_TimeEvent_NetworkEvent::InternalSwap(Span_TimeEvent_NetworkEvent* other) {
  using std::swap;
  swap(kernel_time_, other->kernel_time_);
  swap(message_id_, other->message_id_);
  swap(message_size_, other->message_size_);
  swap(type_, other->type_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Span_TimeEvent_NetworkEvent::GetMetadata() const {
  protobuf_google_2ftracing_2ftrace_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2ftracing_2ftrace_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Span_TimeEvent::InitAsDefaultInstance() {
  ::google::tracing::v1::_Span_TimeEvent_default_instance_._instance.get_mutable()->local_time_ = const_cast< ::google::protobuf::Timestamp*>(
      ::google::protobuf::Timestamp::internal_default_instance());
  ::google::tracing::v1::_Span_TimeEvent_default_instance_.annotation_ = const_cast< ::google::tracing::v1::Span_TimeEvent_Annotation*>(
      ::google::tracing::v1::Span_TimeEvent_Annotation::internal_default_instance());
  ::google::tracing::v1::_Span_TimeEvent_default_instance_.network_event_ = const_cast< ::google::tracing::v1::Span_TimeEvent_NetworkEvent*>(
      ::google::tracing::v1::Span_TimeEvent_NetworkEvent::internal_default_instance());
}
void Span_TimeEvent::clear_local_time() {
  if (GetArenaNoVirtual() == NULL && local_time_ != NULL) {
    delete local_time_;
  }
  local_time_ = NULL;
}
void Span_TimeEvent::set_allocated_annotation(::google::tracing::v1::Span_TimeEvent_Annotation* annotation) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_value();
  if (annotation) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      annotation = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, annotation, submessage_arena);
    }
    set_has_annotation();
    value_.annotation_ = annotation;
  }
  // @@protoc_insertion_point(field_set_allocated:google.tracing.v1.Span.TimeEvent.annotation)
}
void Span_TimeEvent::set_allocated_network_event(::google::tracing::v1::Span_TimeEvent_NetworkEvent* network_event) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_value();
  if (network_event) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      network_event = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, network_event, submessage_arena);
    }
    set_has_network_event();
    value_.network_event_ = network_event;
  }
  // @@protoc_insertion_point(field_set_allocated:google.tracing.v1.Span.TimeEvent.network_event)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Span_TimeEvent::kLocalTimeFieldNumber;
const int Span_TimeEvent::kAnnotationFieldNumber;
const int Span_TimeEvent::kNetworkEventFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Span_TimeEvent::Span_TimeEvent()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_google_2ftracing_2ftrace_2eproto::InitDefaultsSpan_TimeEvent();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.tracing.v1.Span.TimeEvent)
}
Span_TimeEvent::Span_TimeEvent(const Span_TimeEvent& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_local_time()) {
    local_time_ = new ::google::protobuf::Timestamp(*from.local_time_);
  } else {
    local_time_ = NULL;
  }
  clear_has_value();
  switch (from.value_case()) {
    case kAnnotation: {
      mutable_annotation()->::google::tracing::v1::Span_TimeEvent_Annotation::MergeFrom(from.annotation());
      break;
    }
    case kNetworkEvent: {
      mutable_network_event()->::google::tracing::v1::Span_TimeEvent_NetworkEvent::MergeFrom(from.network_event());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:google.tracing.v1.Span.TimeEvent)
}

void Span_TimeEvent::SharedCtor() {
  local_time_ = NULL;
  clear_has_value();
  _cached_size_ = 0;
}

Span_TimeEvent::~Span_TimeEvent() {
  // @@protoc_insertion_point(destructor:google.tracing.v1.Span.TimeEvent)
  SharedDtor();
}

void Span_TimeEvent::SharedDtor() {
  if (this != internal_default_instance()) delete local_time_;
  if (has_value()) {
    clear_value();
  }
}

void Span_TimeEvent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Span_TimeEvent::descriptor() {
  ::protobuf_google_2ftracing_2ftrace_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2ftracing_2ftrace_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Span_TimeEvent& Span_TimeEvent::default_instance() {
  ::protobuf_google_2ftracing_2ftrace_2eproto::InitDefaultsSpan_TimeEvent();
  return *internal_default_instance();
}

Span_TimeEvent* Span_TimeEvent::New(::google::protobuf::Arena* arena) const {
  Span_TimeEvent* n = new Span_TimeEvent;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Span_TimeEvent::clear_value() {
// @@protoc_insertion_point(one_of_clear_start:google.tracing.v1.Span.TimeEvent)
  switch (value_case()) {
    case kAnnotation: {
      delete value_.annotation_;
      break;
    }
    case kNetworkEvent: {
      delete value_.network_event_;
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = VALUE_NOT_SET;
}


void Span_TimeEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:google.tracing.v1.Span.TimeEvent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && local_time_ != NULL) {
    delete local_time_;
  }
  local_time_ = NULL;
  clear_value();
  _internal_metadata_.Clear();
}

bool Span_TimeEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.tracing.v1.Span.TimeEvent)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .google.protobuf.Timestamp local_time = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_local_time()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.tracing.v1.Span.TimeEvent.Annotation annotation = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_annotation()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.tracing.v1.Span.TimeEvent.NetworkEvent network_event = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_network_event()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.tracing.v1.Span.TimeEvent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.tracing.v1.Span.TimeEvent)
  return false;
#undef DO_
}

void Span_TimeEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.tracing.v1.Span.TimeEvent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.Timestamp local_time = 1;
  if (this->has_local_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->local_time_, output);
  }

  // .google.tracing.v1.Span.TimeEvent.Annotation annotation = 2;
  if (has_annotation()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *value_.annotation_, output);
  }

  // .google.tracing.v1.Span.TimeEvent.NetworkEvent network_event = 3;
  if (has_network_event()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *value_.network_event_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:google.tracing.v1.Span.TimeEvent)
}

::google::protobuf::uint8* Span_TimeEvent::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.tracing.v1.Span.TimeEvent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.Timestamp local_time = 1;
  if (this->has_local_time()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->local_time_, deterministic, target);
  }

  // .google.tracing.v1.Span.TimeEvent.Annotation annotation = 2;
  if (has_annotation()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, *value_.annotation_, deterministic, target);
  }

  // .google.tracing.v1.Span.TimeEvent.NetworkEvent network_event = 3;
  if (has_network_event()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, *value_.network_event_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.tracing.v1.Span.TimeEvent)
  return target;
}

size_t Span_TimeEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.tracing.v1.Span.TimeEvent)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .google.protobuf.Timestamp local_time = 1;
  if (this->has_local_time()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->local_time_);
  }

  switch (value_case()) {
    // .google.tracing.v1.Span.TimeEvent.Annotation annotation = 2;
    case kAnnotation: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *value_.annotation_);
      break;
    }
    // .google.tracing.v1.Span.TimeEvent.NetworkEvent network_event = 3;
    case kNetworkEvent: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *value_.network_event_);
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Span_TimeEvent::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.tracing.v1.Span.TimeEvent)
  GOOGLE_DCHECK_NE(&from, this);
  const Span_TimeEvent* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Span_TimeEvent>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.tracing.v1.Span.TimeEvent)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.tracing.v1.Span.TimeEvent)
    MergeFrom(*source);
  }
}

void Span_TimeEvent::MergeFrom(const Span_TimeEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.tracing.v1.Span.TimeEvent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_local_time()) {
    mutable_local_time()->::google::protobuf::Timestamp::MergeFrom(from.local_time());
  }
  switch (from.value_case()) {
    case kAnnotation: {
      mutable_annotation()->::google::tracing::v1::Span_TimeEvent_Annotation::MergeFrom(from.annotation());
      break;
    }
    case kNetworkEvent: {
      mutable_network_event()->::google::tracing::v1::Span_TimeEvent_NetworkEvent::MergeFrom(from.network_event());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
}

void Span_TimeEvent::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.tracing.v1.Span.TimeEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Span_TimeEvent::CopyFrom(const Span_TimeEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.tracing.v1.Span.TimeEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Span_TimeEvent::IsInitialized() const {
  return true;
}

void Span_TimeEvent::Swap(Span_TimeEvent* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Span_TimeEvent::InternalSwap(Span_TimeEvent* other) {
  using std::swap;
  swap(local_time_, other->local_time_);
  swap(value_, other->value_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Span_TimeEvent::GetMetadata() const {
  protobuf_google_2ftracing_2ftrace_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2ftracing_2ftrace_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Span_Link::InitAsDefaultInstance() {
  ::google::tracing::v1::_Span_Link_default_instance_._instance.get_mutable()->trace_id_ = const_cast< ::google::tracing::v1::TraceId*>(
      ::google::tracing::v1::TraceId::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Span_Link::kTraceIdFieldNumber;
const int Span_Link::kSpanIdFieldNumber;
const int Span_Link::kTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Span_Link::Span_Link()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_google_2ftracing_2ftrace_2eproto::InitDefaultsSpan_Link();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.tracing.v1.Span.Link)
}
Span_Link::Span_Link(const Span_Link& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_trace_id()) {
    trace_id_ = new ::google::tracing::v1::TraceId(*from.trace_id_);
  } else {
    trace_id_ = NULL;
  }
  ::memcpy(&span_id_, &from.span_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&span_id_)) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:google.tracing.v1.Span.Link)
}

void Span_Link::SharedCtor() {
  ::memset(&trace_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&trace_id_)) + sizeof(type_));
  _cached_size_ = 0;
}

Span_Link::~Span_Link() {
  // @@protoc_insertion_point(destructor:google.tracing.v1.Span.Link)
  SharedDtor();
}

void Span_Link::SharedDtor() {
  if (this != internal_default_instance()) delete trace_id_;
}

void Span_Link::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Span_Link::descriptor() {
  ::protobuf_google_2ftracing_2ftrace_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2ftracing_2ftrace_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Span_Link& Span_Link::default_instance() {
  ::protobuf_google_2ftracing_2ftrace_2eproto::InitDefaultsSpan_Link();
  return *internal_default_instance();
}

Span_Link* Span_Link::New(::google::protobuf::Arena* arena) const {
  Span_Link* n = new Span_Link;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Span_Link::Clear() {
// @@protoc_insertion_point(message_clear_start:google.tracing.v1.Span.Link)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && trace_id_ != NULL) {
    delete trace_id_;
  }
  trace_id_ = NULL;
  ::memset(&span_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&span_id_)) + sizeof(type_));
  _internal_metadata_.Clear();
}

bool Span_Link::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.tracing.v1.Span.Link)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .google.tracing.v1.TraceId trace_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_trace_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // fixed64 span_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &span_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.tracing.v1.Span.Link.Type type = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::google::tracing::v1::Span_Link_Type >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.tracing.v1.Span.Link)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.tracing.v1.Span.Link)
  return false;
#undef DO_
}

void Span_Link::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.tracing.v1.Span.Link)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.tracing.v1.TraceId trace_id = 1;
  if (this->has_trace_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->trace_id_, output);
  }

  // fixed64 span_id = 2;
  if (this->span_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->span_id(), output);
  }

  // .google.tracing.v1.Span.Link.Type type = 3;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->type(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:google.tracing.v1.Span.Link)
}

::google::protobuf::uint8* Span_Link::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.tracing.v1.Span.Link)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.tracing.v1.TraceId trace_id = 1;
  if (this->has_trace_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->trace_id_, deterministic, target);
  }

  // fixed64 span_id = 2;
  if (this->span_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->span_id(), target);
  }

  // .google.tracing.v1.Span.Link.Type type = 3;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->type(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.tracing.v1.Span.Link)
  return target;
}

size_t Span_Link::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.tracing.v1.Span.Link)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .google.tracing.v1.TraceId trace_id = 1;
  if (this->has_trace_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->trace_id_);
  }

  // fixed64 span_id = 2;
  if (this->span_id() != 0) {
    total_size += 1 + 8;
  }

  // .google.tracing.v1.Span.Link.Type type = 3;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Span_Link::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.tracing.v1.Span.Link)
  GOOGLE_DCHECK_NE(&from, this);
  const Span_Link* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Span_Link>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.tracing.v1.Span.Link)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.tracing.v1.Span.Link)
    MergeFrom(*source);
  }
}

void Span_Link::MergeFrom(const Span_Link& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.tracing.v1.Span.Link)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_trace_id()) {
    mutable_trace_id()->::google::tracing::v1::TraceId::MergeFrom(from.trace_id());
  }
  if (from.span_id() != 0) {
    set_span_id(from.span_id());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
}

void Span_Link::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.tracing.v1.Span.Link)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Span_Link::CopyFrom(const Span_Link& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.tracing.v1.Span.Link)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Span_Link::IsInitialized() const {
  return true;
}

void Span_Link::Swap(Span_Link* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Span_Link::InternalSwap(Span_Link* other) {
  using std::swap;
  swap(trace_id_, other->trace_id_);
  swap(span_id_, other->span_id_);
  swap(type_, other->type_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Span_Link::GetMetadata() const {
  protobuf_google_2ftracing_2ftrace_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2ftracing_2ftrace_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

Span_LabelsEntry_DoNotUse::Span_LabelsEntry_DoNotUse() {}
Span_LabelsEntry_DoNotUse::Span_LabelsEntry_DoNotUse(::google::protobuf::Arena* arena) : SuperType(arena) {}
void Span_LabelsEntry_DoNotUse::MergeFrom(const Span_LabelsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::google::protobuf::Metadata Span_LabelsEntry_DoNotUse::GetMetadata() const {
  ::protobuf_google_2ftracing_2ftrace_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2ftracing_2ftrace_2eproto::file_level_metadata[10];
}
void Span_LabelsEntry_DoNotUse::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}


// ===================================================================

void Span::InitAsDefaultInstance() {
  ::google::tracing::v1::_Span_default_instance_._instance.get_mutable()->local_start_time_ = const_cast< ::google::protobuf::Timestamp*>(
      ::google::protobuf::Timestamp::internal_default_instance());
  ::google::tracing::v1::_Span_default_instance_._instance.get_mutable()->local_end_time_ = const_cast< ::google::protobuf::Timestamp*>(
      ::google::protobuf::Timestamp::internal_default_instance());
  ::google::tracing::v1::_Span_default_instance_._instance.get_mutable()->stack_trace_ = const_cast< ::google::tracing::v1::StackTrace*>(
      ::google::tracing::v1::StackTrace::internal_default_instance());
  ::google::tracing::v1::_Span_default_instance_._instance.get_mutable()->status_ = const_cast< ::google::rpc::Status*>(
      ::google::rpc::Status::internal_default_instance());
}
void Span::clear_local_start_time() {
  if (GetArenaNoVirtual() == NULL && local_start_time_ != NULL) {
    delete local_start_time_;
  }
  local_start_time_ = NULL;
}
void Span::clear_local_end_time() {
  if (GetArenaNoVirtual() == NULL && local_end_time_ != NULL) {
    delete local_end_time_;
  }
  local_end_time_ = NULL;
}
void Span::clear_status() {
  if (GetArenaNoVirtual() == NULL && status_ != NULL) {
    delete status_;
  }
  status_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Span::kIdFieldNumber;
const int Span::kNameFieldNumber;
const int Span::kParentIdFieldNumber;
const int Span::kLocalStartTimeFieldNumber;
const int Span::kLocalEndTimeFieldNumber;
const int Span::kLabelsFieldNumber;
const int Span::kStackTraceFieldNumber;
const int Span::kTimeEventsFieldNumber;
const int Span::kLinksFieldNumber;
const int Span::kStatusFieldNumber;
const int Span::kHasRemoteParentFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Span::Span()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_google_2ftracing_2ftrace_2eproto::InitDefaultsSpan();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.tracing.v1.Span)
}
Span::Span(const Span& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      time_events_(from.time_events_),
      links_(from.links_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  labels_.MergeFrom(from.labels_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_local_start_time()) {
    local_start_time_ = new ::google::protobuf::Timestamp(*from.local_start_time_);
  } else {
    local_start_time_ = NULL;
  }
  if (from.has_local_end_time()) {
    local_end_time_ = new ::google::protobuf::Timestamp(*from.local_end_time_);
  } else {
    local_end_time_ = NULL;
  }
  if (from.has_stack_trace()) {
    stack_trace_ = new ::google::tracing::v1::StackTrace(*from.stack_trace_);
  } else {
    stack_trace_ = NULL;
  }
  if (from.has_status()) {
    status_ = new ::google::rpc::Status(*from.status_);
  } else {
    status_ = NULL;
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&has_remote_parent_) -
    reinterpret_cast<char*>(&id_)) + sizeof(has_remote_parent_));
  // @@protoc_insertion_point(copy_constructor:google.tracing.v1.Span)
}

void Span::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&local_start_time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&has_remote_parent_) -
      reinterpret_cast<char*>(&local_start_time_)) + sizeof(has_remote_parent_));
  _cached_size_ = 0;
}

Span::~Span() {
  // @@protoc_insertion_point(destructor:google.tracing.v1.Span)
  SharedDtor();
}

void Span::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete local_start_time_;
  if (this != internal_default_instance()) delete local_end_time_;
  if (this != internal_default_instance()) delete stack_trace_;
  if (this != internal_default_instance()) delete status_;
}

void Span::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Span::descriptor() {
  ::protobuf_google_2ftracing_2ftrace_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2ftracing_2ftrace_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Span& Span::default_instance() {
  ::protobuf_google_2ftracing_2ftrace_2eproto::InitDefaultsSpan();
  return *internal_default_instance();
}

Span* Span::New(::google::protobuf::Arena* arena) const {
  Span* n = new Span;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Span::Clear() {
// @@protoc_insertion_point(message_clear_start:google.tracing.v1.Span)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  labels_.Clear();
  time_events_.Clear();
  links_.Clear();
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && local_start_time_ != NULL) {
    delete local_start_time_;
  }
  local_start_time_ = NULL;
  if (GetArenaNoVirtual() == NULL && local_end_time_ != NULL) {
    delete local_end_time_;
  }
  local_end_time_ = NULL;
  if (GetArenaNoVirtual() == NULL && stack_trace_ != NULL) {
    delete stack_trace_;
  }
  stack_trace_ = NULL;
  if (GetArenaNoVirtual() == NULL && status_ != NULL) {
    delete status_;
  }
  status_ = NULL;
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&has_remote_parent_) -
      reinterpret_cast<char*>(&id_)) + sizeof(has_remote_parent_));
  _internal_metadata_.Clear();
}

bool Span::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.tracing.v1.Span)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // fixed64 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.tracing.v1.Span.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // fixed64 parent_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &parent_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Timestamp local_start_time = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_local_start_time()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Timestamp local_end_time = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_local_end_time()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, .google.tracing.v1.LabelValue> labels = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          Span_LabelsEntry_DoNotUse::Parser< ::google::protobuf::internal::MapField<
              Span_LabelsEntry_DoNotUse,
              ::std::string, ::google::tracing::v1::LabelValue,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
              0 >,
            ::google::protobuf::Map< ::std::string, ::google::tracing::v1::LabelValue > > parser(&labels_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.tracing.v1.Span.LabelsEntry.key"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.tracing.v1.StackTrace stack_trace = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_stack_trace()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .google.tracing.v1.Span.TimeEvent time_events = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_time_events()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .google.tracing.v1.Span.Link links = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_links()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.rpc.Status status = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_status()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool has_remote_parent = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &has_remote_parent_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.tracing.v1.Span)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.tracing.v1.Span)
  return false;
#undef DO_
}

void Span::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.tracing.v1.Span)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // fixed64 id = 1;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->id(), output);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.tracing.v1.Span.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // fixed64 parent_id = 3;
  if (this->parent_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(3, this->parent_id(), output);
  }

  // .google.protobuf.Timestamp local_start_time = 4;
  if (this->has_local_start_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->local_start_time_, output);
  }

  // .google.protobuf.Timestamp local_end_time = 5;
  if (this->has_local_end_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->local_end_time_, output);
  }

  // map<string, .google.tracing.v1.LabelValue> labels = 6;
  if (!this->labels().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::google::tracing::v1::LabelValue >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "google.tracing.v1.Span.LabelsEntry.key");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->labels().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->labels().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::google::tracing::v1::LabelValue >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::google::tracing::v1::LabelValue >::const_iterator
          it = this->labels().begin();
          it != this->labels().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<Span_LabelsEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(labels_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            6, *entry, output);
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::google::protobuf::scoped_ptr<Span_LabelsEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::google::tracing::v1::LabelValue >::const_iterator
          it = this->labels().begin();
          it != this->labels().end(); ++it) {
        entry.reset(labels_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            6, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  // .google.tracing.v1.StackTrace stack_trace = 7;
  if (this->has_stack_trace()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->stack_trace_, output);
  }

  // repeated .google.tracing.v1.Span.TimeEvent time_events = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->time_events_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->time_events(static_cast<int>(i)), output);
  }

  // repeated .google.tracing.v1.Span.Link links = 9;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->links_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->links(static_cast<int>(i)), output);
  }

  // .google.rpc.Status status = 10;
  if (this->has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, *this->status_, output);
  }

  // bool has_remote_parent = 11;
  if (this->has_remote_parent() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->has_remote_parent(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:google.tracing.v1.Span)
}

::google::protobuf::uint8* Span::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.tracing.v1.Span)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // fixed64 id = 1;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->id(), target);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.tracing.v1.Span.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // fixed64 parent_id = 3;
  if (this->parent_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(3, this->parent_id(), target);
  }

  // .google.protobuf.Timestamp local_start_time = 4;
  if (this->has_local_start_time()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, *this->local_start_time_, deterministic, target);
  }

  // .google.protobuf.Timestamp local_end_time = 5;
  if (this->has_local_end_time()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, *this->local_end_time_, deterministic, target);
  }

  // map<string, .google.tracing.v1.LabelValue> labels = 6;
  if (!this->labels().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::google::tracing::v1::LabelValue >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "google.tracing.v1.Span.LabelsEntry.key");
      }
    };

    if (deterministic &&
        this->labels().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->labels().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::google::tracing::v1::LabelValue >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::google::tracing::v1::LabelValue >::const_iterator
          it = this->labels().begin();
          it != this->labels().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<Span_LabelsEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(labels_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       6, *entry, deterministic, target);
;
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::google::protobuf::scoped_ptr<Span_LabelsEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::google::tracing::v1::LabelValue >::const_iterator
          it = this->labels().begin();
          it != this->labels().end(); ++it) {
        entry.reset(labels_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       6, *entry, deterministic, target);
;
        Utf8Check::Check(&*it);
      }
    }
  }

  // .google.tracing.v1.StackTrace stack_trace = 7;
  if (this->has_stack_trace()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, *this->stack_trace_, deterministic, target);
  }

  // repeated .google.tracing.v1.Span.TimeEvent time_events = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->time_events_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, this->time_events(static_cast<int>(i)), deterministic, target);
  }

  // repeated .google.tracing.v1.Span.Link links = 9;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->links_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        9, this->links(static_cast<int>(i)), deterministic, target);
  }

  // .google.rpc.Status status = 10;
  if (this->has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        10, *this->status_, deterministic, target);
  }

  // bool has_remote_parent = 11;
  if (this->has_remote_parent() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(11, this->has_remote_parent(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.tracing.v1.Span)
  return target;
}

size_t Span::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.tracing.v1.Span)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // map<string, .google.tracing.v1.LabelValue> labels = 6;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->labels_size());
  {
    ::google::protobuf::scoped_ptr<Span_LabelsEntry_DoNotUse> entry;
    for (::google::protobuf::Map< ::std::string, ::google::tracing::v1::LabelValue >::const_iterator
        it = this->labels().begin();
        it != this->labels().end(); ++it) {
      entry.reset(labels_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // repeated .google.tracing.v1.Span.TimeEvent time_events = 8;
  {
    unsigned int count = static_cast<unsigned int>(this->time_events_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->time_events(static_cast<int>(i)));
    }
  }

  // repeated .google.tracing.v1.Span.Link links = 9;
  {
    unsigned int count = static_cast<unsigned int>(this->links_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->links(static_cast<int>(i)));
    }
  }

  // string name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // .google.protobuf.Timestamp local_start_time = 4;
  if (this->has_local_start_time()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->local_start_time_);
  }

  // .google.protobuf.Timestamp local_end_time = 5;
  if (this->has_local_end_time()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->local_end_time_);
  }

  // .google.tracing.v1.StackTrace stack_trace = 7;
  if (this->has_stack_trace()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->stack_trace_);
  }

  // .google.rpc.Status status = 10;
  if (this->has_status()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->status_);
  }

  // fixed64 id = 1;
  if (this->id() != 0) {
    total_size += 1 + 8;
  }

  // fixed64 parent_id = 3;
  if (this->parent_id() != 0) {
    total_size += 1 + 8;
  }

  // bool has_remote_parent = 11;
  if (this->has_remote_parent() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Span::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.tracing.v1.Span)
  GOOGLE_DCHECK_NE(&from, this);
  const Span* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Span>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.tracing.v1.Span)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.tracing.v1.Span)
    MergeFrom(*source);
  }
}

void Span::MergeFrom(const Span& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.tracing.v1.Span)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  labels_.MergeFrom(from.labels_);
  time_events_.MergeFrom(from.time_events_);
  links_.MergeFrom(from.links_);
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_local_start_time()) {
    mutable_local_start_time()->::google::protobuf::Timestamp::MergeFrom(from.local_start_time());
  }
  if (from.has_local_end_time()) {
    mutable_local_end_time()->::google::protobuf::Timestamp::MergeFrom(from.local_end_time());
  }
  if (from.has_stack_trace()) {
    mutable_stack_trace()->::google::tracing::v1::StackTrace::MergeFrom(from.stack_trace());
  }
  if (from.has_status()) {
    mutable_status()->::google::rpc::Status::MergeFrom(from.status());
  }
  if (from.id() != 0) {
    set_id(from.id());
  }
  if (from.parent_id() != 0) {
    set_parent_id(from.parent_id());
  }
  if (from.has_remote_parent() != 0) {
    set_has_remote_parent(from.has_remote_parent());
  }
}

void Span::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.tracing.v1.Span)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Span::CopyFrom(const Span& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.tracing.v1.Span)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Span::IsInitialized() const {
  return true;
}

void Span::Swap(Span* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Span::InternalSwap(Span* other) {
  using std::swap;
  labels_.Swap(&other->labels_);
  time_events_.InternalSwap(&other->time_events_);
  links_.InternalSwap(&other->links_);
  name_.Swap(&other->name_);
  swap(local_start_time_, other->local_start_time_);
  swap(local_end_time_, other->local_end_time_);
  swap(stack_trace_, other->stack_trace_);
  swap(status_, other->status_);
  swap(id_, other->id_);
  swap(parent_id_, other->parent_id_);
  swap(has_remote_parent_, other->has_remote_parent_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Span::GetMetadata() const {
  protobuf_google_2ftracing_2ftrace_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2ftracing_2ftrace_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Trace::InitAsDefaultInstance() {
  ::google::tracing::v1::_Trace_default_instance_._instance.get_mutable()->trace_id_ = const_cast< ::google::tracing::v1::TraceId*>(
      ::google::tracing::v1::TraceId::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Trace::kTraceIdFieldNumber;
const int Trace::kSpansFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Trace::Trace()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_google_2ftracing_2ftrace_2eproto::InitDefaultsTrace();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.tracing.v1.Trace)
}
Trace::Trace(const Trace& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      spans_(from.spans_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_trace_id()) {
    trace_id_ = new ::google::tracing::v1::TraceId(*from.trace_id_);
  } else {
    trace_id_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:google.tracing.v1.Trace)
}

void Trace::SharedCtor() {
  trace_id_ = NULL;
  _cached_size_ = 0;
}

Trace::~Trace() {
  // @@protoc_insertion_point(destructor:google.tracing.v1.Trace)
  SharedDtor();
}

void Trace::SharedDtor() {
  if (this != internal_default_instance()) delete trace_id_;
}

void Trace::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Trace::descriptor() {
  ::protobuf_google_2ftracing_2ftrace_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2ftracing_2ftrace_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Trace& Trace::default_instance() {
  ::protobuf_google_2ftracing_2ftrace_2eproto::InitDefaultsTrace();
  return *internal_default_instance();
}

Trace* Trace::New(::google::protobuf::Arena* arena) const {
  Trace* n = new Trace;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Trace::Clear() {
// @@protoc_insertion_point(message_clear_start:google.tracing.v1.Trace)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  spans_.Clear();
  if (GetArenaNoVirtual() == NULL && trace_id_ != NULL) {
    delete trace_id_;
  }
  trace_id_ = NULL;
  _internal_metadata_.Clear();
}

bool Trace::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.tracing.v1.Trace)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .google.tracing.v1.TraceId trace_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_trace_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .google.tracing.v1.Span spans = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_spans()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.tracing.v1.Trace)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.tracing.v1.Trace)
  return false;
#undef DO_
}

void Trace::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.tracing.v1.Trace)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.tracing.v1.TraceId trace_id = 1;
  if (this->has_trace_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->trace_id_, output);
  }

  // repeated .google.tracing.v1.Span spans = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->spans_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->spans(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:google.tracing.v1.Trace)
}

::google::protobuf::uint8* Trace::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.tracing.v1.Trace)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.tracing.v1.TraceId trace_id = 1;
  if (this->has_trace_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->trace_id_, deterministic, target);
  }

  // repeated .google.tracing.v1.Span spans = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->spans_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->spans(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.tracing.v1.Trace)
  return target;
}

size_t Trace::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.tracing.v1.Trace)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .google.tracing.v1.Span spans = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->spans_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->spans(static_cast<int>(i)));
    }
  }

  // .google.tracing.v1.TraceId trace_id = 1;
  if (this->has_trace_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->trace_id_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Trace::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.tracing.v1.Trace)
  GOOGLE_DCHECK_NE(&from, this);
  const Trace* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Trace>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.tracing.v1.Trace)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.tracing.v1.Trace)
    MergeFrom(*source);
  }
}

void Trace::MergeFrom(const Trace& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.tracing.v1.Trace)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  spans_.MergeFrom(from.spans_);
  if (from.has_trace_id()) {
    mutable_trace_id()->::google::tracing::v1::TraceId::MergeFrom(from.trace_id());
  }
}

void Trace::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.tracing.v1.Trace)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Trace::CopyFrom(const Trace& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.tracing.v1.Trace)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Trace::IsInitialized() const {
  return true;
}

void Trace::Swap(Trace* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Trace::InternalSwap(Trace* other) {
  using std::swap;
  spans_.InternalSwap(&other->spans_);
  swap(trace_id_, other->trace_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Trace::GetMetadata() const {
  protobuf_google_2ftracing_2ftrace_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2ftracing_2ftrace_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace tracing
}  // namespace google

// @@protoc_insertion_point(global_scope)
