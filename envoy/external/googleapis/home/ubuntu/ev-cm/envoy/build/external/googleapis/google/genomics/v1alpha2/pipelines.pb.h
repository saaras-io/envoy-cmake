// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/genomics/v1alpha2/pipelines.proto

#ifndef PROTOBUF_google_2fgenomics_2fv1alpha2_2fpipelines_2eproto__INCLUDED
#define PROTOBUF_google_2fgenomics_2fv1alpha2_2fpipelines_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "google/api/annotations.pb.h"
#include "google/longrunning/operations.pb.h"
#include <google/protobuf/duration.pb.h>
#include <google/protobuf/empty.pb.h>
#include <google/protobuf/timestamp.pb.h>
#include "google/rpc/code.pb.h"
// @@protoc_insertion_point(includes)

namespace protobuf_google_2fgenomics_2fv1alpha2_2fpipelines_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[29];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsComputeEngineImpl();
void InitDefaultsComputeEngine();
void InitDefaultsRuntimeMetadataImpl();
void InitDefaultsRuntimeMetadata();
void InitDefaultsPipelineImpl();
void InitDefaultsPipeline();
void InitDefaultsCreatePipelineRequestImpl();
void InitDefaultsCreatePipelineRequest();
void InitDefaultsRunPipelineArgs_InputsEntry_DoNotUseImpl();
void InitDefaultsRunPipelineArgs_InputsEntry_DoNotUse();
void InitDefaultsRunPipelineArgs_OutputsEntry_DoNotUseImpl();
void InitDefaultsRunPipelineArgs_OutputsEntry_DoNotUse();
void InitDefaultsRunPipelineArgs_LabelsEntry_DoNotUseImpl();
void InitDefaultsRunPipelineArgs_LabelsEntry_DoNotUse();
void InitDefaultsRunPipelineArgsImpl();
void InitDefaultsRunPipelineArgs();
void InitDefaultsRunPipelineRequestImpl();
void InitDefaultsRunPipelineRequest();
void InitDefaultsGetPipelineRequestImpl();
void InitDefaultsGetPipelineRequest();
void InitDefaultsListPipelinesRequestImpl();
void InitDefaultsListPipelinesRequest();
void InitDefaultsListPipelinesResponseImpl();
void InitDefaultsListPipelinesResponse();
void InitDefaultsDeletePipelineRequestImpl();
void InitDefaultsDeletePipelineRequest();
void InitDefaultsGetControllerConfigRequestImpl();
void InitDefaultsGetControllerConfigRequest();
void InitDefaultsControllerConfig_RepeatedStringImpl();
void InitDefaultsControllerConfig_RepeatedString();
void InitDefaultsControllerConfig_VarsEntry_DoNotUseImpl();
void InitDefaultsControllerConfig_VarsEntry_DoNotUse();
void InitDefaultsControllerConfig_DisksEntry_DoNotUseImpl();
void InitDefaultsControllerConfig_DisksEntry_DoNotUse();
void InitDefaultsControllerConfig_GcsSourcesEntry_DoNotUseImpl();
void InitDefaultsControllerConfig_GcsSourcesEntry_DoNotUse();
void InitDefaultsControllerConfig_GcsSinksEntry_DoNotUseImpl();
void InitDefaultsControllerConfig_GcsSinksEntry_DoNotUse();
void InitDefaultsControllerConfigImpl();
void InitDefaultsControllerConfig();
void InitDefaultsTimestampEventImpl();
void InitDefaultsTimestampEvent();
void InitDefaultsSetOperationStatusRequestImpl();
void InitDefaultsSetOperationStatusRequest();
void InitDefaultsServiceAccountImpl();
void InitDefaultsServiceAccount();
void InitDefaultsLoggingOptionsImpl();
void InitDefaultsLoggingOptions();
void InitDefaultsPipelineResources_DiskImpl();
void InitDefaultsPipelineResources_Disk();
void InitDefaultsPipelineResourcesImpl();
void InitDefaultsPipelineResources();
void InitDefaultsPipelineParameter_LocalCopyImpl();
void InitDefaultsPipelineParameter_LocalCopy();
void InitDefaultsPipelineParameterImpl();
void InitDefaultsPipelineParameter();
void InitDefaultsDockerExecutorImpl();
void InitDefaultsDockerExecutor();
inline void InitDefaults() {
  InitDefaultsComputeEngine();
  InitDefaultsRuntimeMetadata();
  InitDefaultsPipeline();
  InitDefaultsCreatePipelineRequest();
  InitDefaultsRunPipelineArgs_InputsEntry_DoNotUse();
  InitDefaultsRunPipelineArgs_OutputsEntry_DoNotUse();
  InitDefaultsRunPipelineArgs_LabelsEntry_DoNotUse();
  InitDefaultsRunPipelineArgs();
  InitDefaultsRunPipelineRequest();
  InitDefaultsGetPipelineRequest();
  InitDefaultsListPipelinesRequest();
  InitDefaultsListPipelinesResponse();
  InitDefaultsDeletePipelineRequest();
  InitDefaultsGetControllerConfigRequest();
  InitDefaultsControllerConfig_RepeatedString();
  InitDefaultsControllerConfig_VarsEntry_DoNotUse();
  InitDefaultsControllerConfig_DisksEntry_DoNotUse();
  InitDefaultsControllerConfig_GcsSourcesEntry_DoNotUse();
  InitDefaultsControllerConfig_GcsSinksEntry_DoNotUse();
  InitDefaultsControllerConfig();
  InitDefaultsTimestampEvent();
  InitDefaultsSetOperationStatusRequest();
  InitDefaultsServiceAccount();
  InitDefaultsLoggingOptions();
  InitDefaultsPipelineResources_Disk();
  InitDefaultsPipelineResources();
  InitDefaultsPipelineParameter_LocalCopy();
  InitDefaultsPipelineParameter();
  InitDefaultsDockerExecutor();
}
}  // namespace protobuf_google_2fgenomics_2fv1alpha2_2fpipelines_2eproto
namespace google {
namespace genomics {
namespace v1alpha2 {
class ComputeEngine;
class ComputeEngineDefaultTypeInternal;
extern ComputeEngineDefaultTypeInternal _ComputeEngine_default_instance_;
class ControllerConfig;
class ControllerConfigDefaultTypeInternal;
extern ControllerConfigDefaultTypeInternal _ControllerConfig_default_instance_;
class ControllerConfig_DisksEntry_DoNotUse;
class ControllerConfig_DisksEntry_DoNotUseDefaultTypeInternal;
extern ControllerConfig_DisksEntry_DoNotUseDefaultTypeInternal _ControllerConfig_DisksEntry_DoNotUse_default_instance_;
class ControllerConfig_GcsSinksEntry_DoNotUse;
class ControllerConfig_GcsSinksEntry_DoNotUseDefaultTypeInternal;
extern ControllerConfig_GcsSinksEntry_DoNotUseDefaultTypeInternal _ControllerConfig_GcsSinksEntry_DoNotUse_default_instance_;
class ControllerConfig_GcsSourcesEntry_DoNotUse;
class ControllerConfig_GcsSourcesEntry_DoNotUseDefaultTypeInternal;
extern ControllerConfig_GcsSourcesEntry_DoNotUseDefaultTypeInternal _ControllerConfig_GcsSourcesEntry_DoNotUse_default_instance_;
class ControllerConfig_RepeatedString;
class ControllerConfig_RepeatedStringDefaultTypeInternal;
extern ControllerConfig_RepeatedStringDefaultTypeInternal _ControllerConfig_RepeatedString_default_instance_;
class ControllerConfig_VarsEntry_DoNotUse;
class ControllerConfig_VarsEntry_DoNotUseDefaultTypeInternal;
extern ControllerConfig_VarsEntry_DoNotUseDefaultTypeInternal _ControllerConfig_VarsEntry_DoNotUse_default_instance_;
class CreatePipelineRequest;
class CreatePipelineRequestDefaultTypeInternal;
extern CreatePipelineRequestDefaultTypeInternal _CreatePipelineRequest_default_instance_;
class DeletePipelineRequest;
class DeletePipelineRequestDefaultTypeInternal;
extern DeletePipelineRequestDefaultTypeInternal _DeletePipelineRequest_default_instance_;
class DockerExecutor;
class DockerExecutorDefaultTypeInternal;
extern DockerExecutorDefaultTypeInternal _DockerExecutor_default_instance_;
class GetControllerConfigRequest;
class GetControllerConfigRequestDefaultTypeInternal;
extern GetControllerConfigRequestDefaultTypeInternal _GetControllerConfigRequest_default_instance_;
class GetPipelineRequest;
class GetPipelineRequestDefaultTypeInternal;
extern GetPipelineRequestDefaultTypeInternal _GetPipelineRequest_default_instance_;
class ListPipelinesRequest;
class ListPipelinesRequestDefaultTypeInternal;
extern ListPipelinesRequestDefaultTypeInternal _ListPipelinesRequest_default_instance_;
class ListPipelinesResponse;
class ListPipelinesResponseDefaultTypeInternal;
extern ListPipelinesResponseDefaultTypeInternal _ListPipelinesResponse_default_instance_;
class LoggingOptions;
class LoggingOptionsDefaultTypeInternal;
extern LoggingOptionsDefaultTypeInternal _LoggingOptions_default_instance_;
class Pipeline;
class PipelineDefaultTypeInternal;
extern PipelineDefaultTypeInternal _Pipeline_default_instance_;
class PipelineParameter;
class PipelineParameterDefaultTypeInternal;
extern PipelineParameterDefaultTypeInternal _PipelineParameter_default_instance_;
class PipelineParameter_LocalCopy;
class PipelineParameter_LocalCopyDefaultTypeInternal;
extern PipelineParameter_LocalCopyDefaultTypeInternal _PipelineParameter_LocalCopy_default_instance_;
class PipelineResources;
class PipelineResourcesDefaultTypeInternal;
extern PipelineResourcesDefaultTypeInternal _PipelineResources_default_instance_;
class PipelineResources_Disk;
class PipelineResources_DiskDefaultTypeInternal;
extern PipelineResources_DiskDefaultTypeInternal _PipelineResources_Disk_default_instance_;
class RunPipelineArgs;
class RunPipelineArgsDefaultTypeInternal;
extern RunPipelineArgsDefaultTypeInternal _RunPipelineArgs_default_instance_;
class RunPipelineArgs_InputsEntry_DoNotUse;
class RunPipelineArgs_InputsEntry_DoNotUseDefaultTypeInternal;
extern RunPipelineArgs_InputsEntry_DoNotUseDefaultTypeInternal _RunPipelineArgs_InputsEntry_DoNotUse_default_instance_;
class RunPipelineArgs_LabelsEntry_DoNotUse;
class RunPipelineArgs_LabelsEntry_DoNotUseDefaultTypeInternal;
extern RunPipelineArgs_LabelsEntry_DoNotUseDefaultTypeInternal _RunPipelineArgs_LabelsEntry_DoNotUse_default_instance_;
class RunPipelineArgs_OutputsEntry_DoNotUse;
class RunPipelineArgs_OutputsEntry_DoNotUseDefaultTypeInternal;
extern RunPipelineArgs_OutputsEntry_DoNotUseDefaultTypeInternal _RunPipelineArgs_OutputsEntry_DoNotUse_default_instance_;
class RunPipelineRequest;
class RunPipelineRequestDefaultTypeInternal;
extern RunPipelineRequestDefaultTypeInternal _RunPipelineRequest_default_instance_;
class RuntimeMetadata;
class RuntimeMetadataDefaultTypeInternal;
extern RuntimeMetadataDefaultTypeInternal _RuntimeMetadata_default_instance_;
class ServiceAccount;
class ServiceAccountDefaultTypeInternal;
extern ServiceAccountDefaultTypeInternal _ServiceAccount_default_instance_;
class SetOperationStatusRequest;
class SetOperationStatusRequestDefaultTypeInternal;
extern SetOperationStatusRequestDefaultTypeInternal _SetOperationStatusRequest_default_instance_;
class TimestampEvent;
class TimestampEventDefaultTypeInternal;
extern TimestampEventDefaultTypeInternal _TimestampEvent_default_instance_;
}  // namespace v1alpha2
}  // namespace genomics
}  // namespace google
namespace google {
namespace genomics {
namespace v1alpha2 {

enum PipelineResources_Disk_Type {
  PipelineResources_Disk_Type_TYPE_UNSPECIFIED = 0,
  PipelineResources_Disk_Type_PERSISTENT_HDD = 1,
  PipelineResources_Disk_Type_PERSISTENT_SSD = 2,
  PipelineResources_Disk_Type_LOCAL_SSD = 3,
  PipelineResources_Disk_Type_PipelineResources_Disk_Type_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  PipelineResources_Disk_Type_PipelineResources_Disk_Type_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool PipelineResources_Disk_Type_IsValid(int value);
const PipelineResources_Disk_Type PipelineResources_Disk_Type_Type_MIN = PipelineResources_Disk_Type_TYPE_UNSPECIFIED;
const PipelineResources_Disk_Type PipelineResources_Disk_Type_Type_MAX = PipelineResources_Disk_Type_LOCAL_SSD;
const int PipelineResources_Disk_Type_Type_ARRAYSIZE = PipelineResources_Disk_Type_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* PipelineResources_Disk_Type_descriptor();
inline const ::std::string& PipelineResources_Disk_Type_Name(PipelineResources_Disk_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    PipelineResources_Disk_Type_descriptor(), value);
}
inline bool PipelineResources_Disk_Type_Parse(
    const ::std::string& name, PipelineResources_Disk_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<PipelineResources_Disk_Type>(
    PipelineResources_Disk_Type_descriptor(), name, value);
}
// ===================================================================

class ComputeEngine : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.genomics.v1alpha2.ComputeEngine) */ {
 public:
  ComputeEngine();
  virtual ~ComputeEngine();

  ComputeEngine(const ComputeEngine& from);

  inline ComputeEngine& operator=(const ComputeEngine& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ComputeEngine(ComputeEngine&& from) noexcept
    : ComputeEngine() {
    *this = ::std::move(from);
  }

  inline ComputeEngine& operator=(ComputeEngine&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const ComputeEngine& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ComputeEngine* internal_default_instance() {
    return reinterpret_cast<const ComputeEngine*>(
               &_ComputeEngine_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void UnsafeArenaSwap(ComputeEngine* other);
  void Swap(ComputeEngine* other);
  friend void swap(ComputeEngine& a, ComputeEngine& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ComputeEngine* New() const PROTOBUF_FINAL { return New(NULL); }

  ComputeEngine* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ComputeEngine& from);
  void MergeFrom(const ComputeEngine& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ComputeEngine* other);
  protected:
  explicit ComputeEngine(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string disk_names = 4;
  int disk_names_size() const;
  void clear_disk_names();
  static const int kDiskNamesFieldNumber = 4;
  const ::std::string& disk_names(int index) const;
  ::std::string* mutable_disk_names(int index);
  void set_disk_names(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_disk_names(int index, ::std::string&& value);
  #endif
  void set_disk_names(int index, const char* value);
  void set_disk_names(int index, const char* value, size_t size);
  ::std::string* add_disk_names();
  void add_disk_names(const ::std::string& value);
  #if LANG_CXX11
  void add_disk_names(::std::string&& value);
  #endif
  void add_disk_names(const char* value);
  void add_disk_names(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& disk_names() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_disk_names();

  // string instance_name = 1;
  void clear_instance_name();
  static const int kInstanceNameFieldNumber = 1;
  const ::std::string& instance_name() const;
  void set_instance_name(const ::std::string& value);
  #if LANG_CXX11
  void set_instance_name(::std::string&& value);
  #endif
  void set_instance_name(const char* value);
  void set_instance_name(const char* value, size_t size);
  ::std::string* mutable_instance_name();
  ::std::string* release_instance_name();
  void set_allocated_instance_name(::std::string* instance_name);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_instance_name();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_instance_name(
      ::std::string* instance_name);

  // string zone = 2;
  void clear_zone();
  static const int kZoneFieldNumber = 2;
  const ::std::string& zone() const;
  void set_zone(const ::std::string& value);
  #if LANG_CXX11
  void set_zone(::std::string&& value);
  #endif
  void set_zone(const char* value);
  void set_zone(const char* value, size_t size);
  ::std::string* mutable_zone();
  ::std::string* release_zone();
  void set_allocated_zone(::std::string* zone);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_zone();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_zone(
      ::std::string* zone);

  // string machine_type = 3;
  void clear_machine_type();
  static const int kMachineTypeFieldNumber = 3;
  const ::std::string& machine_type() const;
  void set_machine_type(const ::std::string& value);
  #if LANG_CXX11
  void set_machine_type(::std::string&& value);
  #endif
  void set_machine_type(const char* value);
  void set_machine_type(const char* value, size_t size);
  ::std::string* mutable_machine_type();
  ::std::string* release_machine_type();
  void set_allocated_machine_type(::std::string* machine_type);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_machine_type();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_machine_type(
      ::std::string* machine_type);

  // @@protoc_insertion_point(class_scope:google.genomics.v1alpha2.ComputeEngine)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::RepeatedPtrField< ::std::string> disk_names_;
  ::google::protobuf::internal::ArenaStringPtr instance_name_;
  ::google::protobuf::internal::ArenaStringPtr zone_;
  ::google::protobuf::internal::ArenaStringPtr machine_type_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fgenomics_2fv1alpha2_2fpipelines_2eproto::TableStruct;
  friend void ::protobuf_google_2fgenomics_2fv1alpha2_2fpipelines_2eproto::InitDefaultsComputeEngineImpl();
};
// -------------------------------------------------------------------

class RuntimeMetadata : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.genomics.v1alpha2.RuntimeMetadata) */ {
 public:
  RuntimeMetadata();
  virtual ~RuntimeMetadata();

  RuntimeMetadata(const RuntimeMetadata& from);

  inline RuntimeMetadata& operator=(const RuntimeMetadata& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RuntimeMetadata(RuntimeMetadata&& from) noexcept
    : RuntimeMetadata() {
    *this = ::std::move(from);
  }

  inline RuntimeMetadata& operator=(RuntimeMetadata&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const RuntimeMetadata& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RuntimeMetadata* internal_default_instance() {
    return reinterpret_cast<const RuntimeMetadata*>(
               &_RuntimeMetadata_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void UnsafeArenaSwap(RuntimeMetadata* other);
  void Swap(RuntimeMetadata* other);
  friend void swap(RuntimeMetadata& a, RuntimeMetadata& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RuntimeMetadata* New() const PROTOBUF_FINAL { return New(NULL); }

  RuntimeMetadata* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const RuntimeMetadata& from);
  void MergeFrom(const RuntimeMetadata& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(RuntimeMetadata* other);
  protected:
  explicit RuntimeMetadata(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.genomics.v1alpha2.ComputeEngine compute_engine = 1;
  bool has_compute_engine() const;
  void clear_compute_engine();
  static const int kComputeEngineFieldNumber = 1;
  private:
  void _slow_mutable_compute_engine();
  public:
  const ::google::genomics::v1alpha2::ComputeEngine& compute_engine() const;
  ::google::genomics::v1alpha2::ComputeEngine* release_compute_engine();
  ::google::genomics::v1alpha2::ComputeEngine* mutable_compute_engine();
  void set_allocated_compute_engine(::google::genomics::v1alpha2::ComputeEngine* compute_engine);
  void unsafe_arena_set_allocated_compute_engine(
      ::google::genomics::v1alpha2::ComputeEngine* compute_engine);
  ::google::genomics::v1alpha2::ComputeEngine* unsafe_arena_release_compute_engine();

  // @@protoc_insertion_point(class_scope:google.genomics.v1alpha2.RuntimeMetadata)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::genomics::v1alpha2::ComputeEngine* compute_engine_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fgenomics_2fv1alpha2_2fpipelines_2eproto::TableStruct;
  friend void ::protobuf_google_2fgenomics_2fv1alpha2_2fpipelines_2eproto::InitDefaultsRuntimeMetadataImpl();
};
// -------------------------------------------------------------------

class Pipeline : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.genomics.v1alpha2.Pipeline) */ {
 public:
  Pipeline();
  virtual ~Pipeline();

  Pipeline(const Pipeline& from);

  inline Pipeline& operator=(const Pipeline& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Pipeline(Pipeline&& from) noexcept
    : Pipeline() {
    *this = ::std::move(from);
  }

  inline Pipeline& operator=(Pipeline&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const Pipeline& default_instance();

  enum ExecutorCase {
    kDocker = 5,
    EXECUTOR_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Pipeline* internal_default_instance() {
    return reinterpret_cast<const Pipeline*>(
               &_Pipeline_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void UnsafeArenaSwap(Pipeline* other);
  void Swap(Pipeline* other);
  friend void swap(Pipeline& a, Pipeline& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Pipeline* New() const PROTOBUF_FINAL { return New(NULL); }

  Pipeline* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Pipeline& from);
  void MergeFrom(const Pipeline& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Pipeline* other);
  protected:
  explicit Pipeline(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .google.genomics.v1alpha2.PipelineParameter input_parameters = 8;
  int input_parameters_size() const;
  void clear_input_parameters();
  static const int kInputParametersFieldNumber = 8;
  const ::google::genomics::v1alpha2::PipelineParameter& input_parameters(int index) const;
  ::google::genomics::v1alpha2::PipelineParameter* mutable_input_parameters(int index);
  ::google::genomics::v1alpha2::PipelineParameter* add_input_parameters();
  ::google::protobuf::RepeatedPtrField< ::google::genomics::v1alpha2::PipelineParameter >*
      mutable_input_parameters();
  const ::google::protobuf::RepeatedPtrField< ::google::genomics::v1alpha2::PipelineParameter >&
      input_parameters() const;

  // repeated .google.genomics.v1alpha2.PipelineParameter output_parameters = 9;
  int output_parameters_size() const;
  void clear_output_parameters();
  static const int kOutputParametersFieldNumber = 9;
  const ::google::genomics::v1alpha2::PipelineParameter& output_parameters(int index) const;
  ::google::genomics::v1alpha2::PipelineParameter* mutable_output_parameters(int index);
  ::google::genomics::v1alpha2::PipelineParameter* add_output_parameters();
  ::google::protobuf::RepeatedPtrField< ::google::genomics::v1alpha2::PipelineParameter >*
      mutable_output_parameters();
  const ::google::protobuf::RepeatedPtrField< ::google::genomics::v1alpha2::PipelineParameter >&
      output_parameters() const;

  // string project_id = 1;
  void clear_project_id();
  static const int kProjectIdFieldNumber = 1;
  const ::std::string& project_id() const;
  void set_project_id(const ::std::string& value);
  #if LANG_CXX11
  void set_project_id(::std::string&& value);
  #endif
  void set_project_id(const char* value);
  void set_project_id(const char* value, size_t size);
  ::std::string* mutable_project_id();
  ::std::string* release_project_id();
  void set_allocated_project_id(::std::string* project_id);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_project_id();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_project_id(
      ::std::string* project_id);

  // string name = 2;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_name();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_name(
      ::std::string* name);

  // string description = 3;
  void clear_description();
  static const int kDescriptionFieldNumber = 3;
  const ::std::string& description() const;
  void set_description(const ::std::string& value);
  #if LANG_CXX11
  void set_description(::std::string&& value);
  #endif
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  ::std::string* mutable_description();
  ::std::string* release_description();
  void set_allocated_description(::std::string* description);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_description();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_description(
      ::std::string* description);

  // string pipeline_id = 7;
  void clear_pipeline_id();
  static const int kPipelineIdFieldNumber = 7;
  const ::std::string& pipeline_id() const;
  void set_pipeline_id(const ::std::string& value);
  #if LANG_CXX11
  void set_pipeline_id(::std::string&& value);
  #endif
  void set_pipeline_id(const char* value);
  void set_pipeline_id(const char* value, size_t size);
  ::std::string* mutable_pipeline_id();
  ::std::string* release_pipeline_id();
  void set_allocated_pipeline_id(::std::string* pipeline_id);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_pipeline_id();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_pipeline_id(
      ::std::string* pipeline_id);

  // .google.genomics.v1alpha2.PipelineResources resources = 6;
  bool has_resources() const;
  void clear_resources();
  static const int kResourcesFieldNumber = 6;
  private:
  void _slow_mutable_resources();
  public:
  const ::google::genomics::v1alpha2::PipelineResources& resources() const;
  ::google::genomics::v1alpha2::PipelineResources* release_resources();
  ::google::genomics::v1alpha2::PipelineResources* mutable_resources();
  void set_allocated_resources(::google::genomics::v1alpha2::PipelineResources* resources);
  void unsafe_arena_set_allocated_resources(
      ::google::genomics::v1alpha2::PipelineResources* resources);
  ::google::genomics::v1alpha2::PipelineResources* unsafe_arena_release_resources();

  // .google.genomics.v1alpha2.DockerExecutor docker = 5;
  bool has_docker() const;
  void clear_docker();
  static const int kDockerFieldNumber = 5;
  private:
  void _slow_mutable_docker();
  public:
  const ::google::genomics::v1alpha2::DockerExecutor& docker() const;
  ::google::genomics::v1alpha2::DockerExecutor* release_docker();
  ::google::genomics::v1alpha2::DockerExecutor* mutable_docker();
  void set_allocated_docker(::google::genomics::v1alpha2::DockerExecutor* docker);
  void unsafe_arena_set_allocated_docker(
      ::google::genomics::v1alpha2::DockerExecutor* docker);
  ::google::genomics::v1alpha2::DockerExecutor* unsafe_arena_release_docker();

  ExecutorCase executor_case() const;
  // @@protoc_insertion_point(class_scope:google.genomics.v1alpha2.Pipeline)
 private:
  void set_has_docker();

  inline bool has_executor() const;
  void clear_executor();
  inline void clear_has_executor();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::RepeatedPtrField< ::google::genomics::v1alpha2::PipelineParameter > input_parameters_;
  ::google::protobuf::RepeatedPtrField< ::google::genomics::v1alpha2::PipelineParameter > output_parameters_;
  ::google::protobuf::internal::ArenaStringPtr project_id_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr description_;
  ::google::protobuf::internal::ArenaStringPtr pipeline_id_;
  ::google::genomics::v1alpha2::PipelineResources* resources_;
  union ExecutorUnion {
    ExecutorUnion() {}
    ::google::genomics::v1alpha2::DockerExecutor* docker_;
  } executor_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::protobuf_google_2fgenomics_2fv1alpha2_2fpipelines_2eproto::TableStruct;
  friend void ::protobuf_google_2fgenomics_2fv1alpha2_2fpipelines_2eproto::InitDefaultsPipelineImpl();
};
// -------------------------------------------------------------------

class CreatePipelineRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.genomics.v1alpha2.CreatePipelineRequest) */ {
 public:
  CreatePipelineRequest();
  virtual ~CreatePipelineRequest();

  CreatePipelineRequest(const CreatePipelineRequest& from);

  inline CreatePipelineRequest& operator=(const CreatePipelineRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CreatePipelineRequest(CreatePipelineRequest&& from) noexcept
    : CreatePipelineRequest() {
    *this = ::std::move(from);
  }

  inline CreatePipelineRequest& operator=(CreatePipelineRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const CreatePipelineRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreatePipelineRequest* internal_default_instance() {
    return reinterpret_cast<const CreatePipelineRequest*>(
               &_CreatePipelineRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void UnsafeArenaSwap(CreatePipelineRequest* other);
  void Swap(CreatePipelineRequest* other);
  friend void swap(CreatePipelineRequest& a, CreatePipelineRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CreatePipelineRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  CreatePipelineRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CreatePipelineRequest& from);
  void MergeFrom(const CreatePipelineRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CreatePipelineRequest* other);
  protected:
  explicit CreatePipelineRequest(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.genomics.v1alpha2.Pipeline pipeline = 1;
  bool has_pipeline() const;
  void clear_pipeline();
  static const int kPipelineFieldNumber = 1;
  private:
  void _slow_mutable_pipeline();
  public:
  const ::google::genomics::v1alpha2::Pipeline& pipeline() const;
  ::google::genomics::v1alpha2::Pipeline* release_pipeline();
  ::google::genomics::v1alpha2::Pipeline* mutable_pipeline();
  void set_allocated_pipeline(::google::genomics::v1alpha2::Pipeline* pipeline);
  void unsafe_arena_set_allocated_pipeline(
      ::google::genomics::v1alpha2::Pipeline* pipeline);
  ::google::genomics::v1alpha2::Pipeline* unsafe_arena_release_pipeline();

  // @@protoc_insertion_point(class_scope:google.genomics.v1alpha2.CreatePipelineRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::genomics::v1alpha2::Pipeline* pipeline_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fgenomics_2fv1alpha2_2fpipelines_2eproto::TableStruct;
  friend void ::protobuf_google_2fgenomics_2fv1alpha2_2fpipelines_2eproto::InitDefaultsCreatePipelineRequestImpl();
};
// -------------------------------------------------------------------

class RunPipelineArgs_InputsEntry_DoNotUse : public ::google::protobuf::internal::MapEntry<RunPipelineArgs_InputsEntry_DoNotUse, 
    ::std::string, ::std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    0 > {
public:
  typedef ::google::protobuf::internal::MapEntry<RunPipelineArgs_InputsEntry_DoNotUse, 
    ::std::string, ::std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    0 > SuperType;
  RunPipelineArgs_InputsEntry_DoNotUse();
  RunPipelineArgs_InputsEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const RunPipelineArgs_InputsEntry_DoNotUse& other);
  static const RunPipelineArgs_InputsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const RunPipelineArgs_InputsEntry_DoNotUse*>(&_RunPipelineArgs_InputsEntry_DoNotUse_default_instance_); }
  void MergeFrom(const ::google::protobuf::Message& other) PROTOBUF_FINAL;
  ::google::protobuf::Metadata GetMetadata() const;
};

// -------------------------------------------------------------------

class RunPipelineArgs_OutputsEntry_DoNotUse : public ::google::protobuf::internal::MapEntry<RunPipelineArgs_OutputsEntry_DoNotUse, 
    ::std::string, ::std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    0 > {
public:
  typedef ::google::protobuf::internal::MapEntry<RunPipelineArgs_OutputsEntry_DoNotUse, 
    ::std::string, ::std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    0 > SuperType;
  RunPipelineArgs_OutputsEntry_DoNotUse();
  RunPipelineArgs_OutputsEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const RunPipelineArgs_OutputsEntry_DoNotUse& other);
  static const RunPipelineArgs_OutputsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const RunPipelineArgs_OutputsEntry_DoNotUse*>(&_RunPipelineArgs_OutputsEntry_DoNotUse_default_instance_); }
  void MergeFrom(const ::google::protobuf::Message& other) PROTOBUF_FINAL;
  ::google::protobuf::Metadata GetMetadata() const;
};

// -------------------------------------------------------------------

class RunPipelineArgs_LabelsEntry_DoNotUse : public ::google::protobuf::internal::MapEntry<RunPipelineArgs_LabelsEntry_DoNotUse, 
    ::std::string, ::std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    0 > {
public:
  typedef ::google::protobuf::internal::MapEntry<RunPipelineArgs_LabelsEntry_DoNotUse, 
    ::std::string, ::std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    0 > SuperType;
  RunPipelineArgs_LabelsEntry_DoNotUse();
  RunPipelineArgs_LabelsEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const RunPipelineArgs_LabelsEntry_DoNotUse& other);
  static const RunPipelineArgs_LabelsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const RunPipelineArgs_LabelsEntry_DoNotUse*>(&_RunPipelineArgs_LabelsEntry_DoNotUse_default_instance_); }
  void MergeFrom(const ::google::protobuf::Message& other) PROTOBUF_FINAL;
  ::google::protobuf::Metadata GetMetadata() const;
};

// -------------------------------------------------------------------

class RunPipelineArgs : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.genomics.v1alpha2.RunPipelineArgs) */ {
 public:
  RunPipelineArgs();
  virtual ~RunPipelineArgs();

  RunPipelineArgs(const RunPipelineArgs& from);

  inline RunPipelineArgs& operator=(const RunPipelineArgs& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RunPipelineArgs(RunPipelineArgs&& from) noexcept
    : RunPipelineArgs() {
    *this = ::std::move(from);
  }

  inline RunPipelineArgs& operator=(RunPipelineArgs&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const RunPipelineArgs& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RunPipelineArgs* internal_default_instance() {
    return reinterpret_cast<const RunPipelineArgs*>(
               &_RunPipelineArgs_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    7;

  void UnsafeArenaSwap(RunPipelineArgs* other);
  void Swap(RunPipelineArgs* other);
  friend void swap(RunPipelineArgs& a, RunPipelineArgs& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RunPipelineArgs* New() const PROTOBUF_FINAL { return New(NULL); }

  RunPipelineArgs* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const RunPipelineArgs& from);
  void MergeFrom(const RunPipelineArgs& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(RunPipelineArgs* other);
  protected:
  explicit RunPipelineArgs(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // map<string, string> inputs = 2;
  int inputs_size() const;
  void clear_inputs();
  static const int kInputsFieldNumber = 2;
  const ::google::protobuf::Map< ::std::string, ::std::string >&
      inputs() const;
  ::google::protobuf::Map< ::std::string, ::std::string >*
      mutable_inputs();

  // map<string, string> outputs = 3;
  int outputs_size() const;
  void clear_outputs();
  static const int kOutputsFieldNumber = 3;
  const ::google::protobuf::Map< ::std::string, ::std::string >&
      outputs() const;
  ::google::protobuf::Map< ::std::string, ::std::string >*
      mutable_outputs();

  // map<string, string> labels = 9;
  int labels_size() const;
  void clear_labels();
  static const int kLabelsFieldNumber = 9;
  const ::google::protobuf::Map< ::std::string, ::std::string >&
      labels() const;
  ::google::protobuf::Map< ::std::string, ::std::string >*
      mutable_labels();

  // string project_id = 1;
  void clear_project_id();
  static const int kProjectIdFieldNumber = 1;
  const ::std::string& project_id() const;
  void set_project_id(const ::std::string& value);
  #if LANG_CXX11
  void set_project_id(::std::string&& value);
  #endif
  void set_project_id(const char* value);
  void set_project_id(const char* value, size_t size);
  ::std::string* mutable_project_id();
  ::std::string* release_project_id();
  void set_allocated_project_id(::std::string* project_id);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_project_id();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_project_id(
      ::std::string* project_id);

  // string client_id = 5;
  void clear_client_id();
  static const int kClientIdFieldNumber = 5;
  const ::std::string& client_id() const;
  void set_client_id(const ::std::string& value);
  #if LANG_CXX11
  void set_client_id(::std::string&& value);
  #endif
  void set_client_id(const char* value);
  void set_client_id(const char* value, size_t size);
  ::std::string* mutable_client_id();
  ::std::string* release_client_id();
  void set_allocated_client_id(::std::string* client_id);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_client_id();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_client_id(
      ::std::string* client_id);

  // .google.genomics.v1alpha2.ServiceAccount service_account = 4;
  bool has_service_account() const;
  void clear_service_account();
  static const int kServiceAccountFieldNumber = 4;
  private:
  void _slow_mutable_service_account();
  public:
  const ::google::genomics::v1alpha2::ServiceAccount& service_account() const;
  ::google::genomics::v1alpha2::ServiceAccount* release_service_account();
  ::google::genomics::v1alpha2::ServiceAccount* mutable_service_account();
  void set_allocated_service_account(::google::genomics::v1alpha2::ServiceAccount* service_account);
  void unsafe_arena_set_allocated_service_account(
      ::google::genomics::v1alpha2::ServiceAccount* service_account);
  ::google::genomics::v1alpha2::ServiceAccount* unsafe_arena_release_service_account();

  // .google.genomics.v1alpha2.PipelineResources resources = 6;
  bool has_resources() const;
  void clear_resources();
  static const int kResourcesFieldNumber = 6;
  private:
  void _slow_mutable_resources();
  public:
  const ::google::genomics::v1alpha2::PipelineResources& resources() const;
  ::google::genomics::v1alpha2::PipelineResources* release_resources();
  ::google::genomics::v1alpha2::PipelineResources* mutable_resources();
  void set_allocated_resources(::google::genomics::v1alpha2::PipelineResources* resources);
  void unsafe_arena_set_allocated_resources(
      ::google::genomics::v1alpha2::PipelineResources* resources);
  ::google::genomics::v1alpha2::PipelineResources* unsafe_arena_release_resources();

  // .google.genomics.v1alpha2.LoggingOptions logging = 7;
  bool has_logging() const;
  void clear_logging();
  static const int kLoggingFieldNumber = 7;
  private:
  void _slow_mutable_logging();
  public:
  const ::google::genomics::v1alpha2::LoggingOptions& logging() const;
  ::google::genomics::v1alpha2::LoggingOptions* release_logging();
  ::google::genomics::v1alpha2::LoggingOptions* mutable_logging();
  void set_allocated_logging(::google::genomics::v1alpha2::LoggingOptions* logging);
  void unsafe_arena_set_allocated_logging(
      ::google::genomics::v1alpha2::LoggingOptions* logging);
  ::google::genomics::v1alpha2::LoggingOptions* unsafe_arena_release_logging();

  // .google.protobuf.Duration keep_vm_alive_on_failure_duration = 8;
  bool has_keep_vm_alive_on_failure_duration() const;
  void clear_keep_vm_alive_on_failure_duration();
  static const int kKeepVmAliveOnFailureDurationFieldNumber = 8;
  private:
  void _slow_mutable_keep_vm_alive_on_failure_duration();
  public:
  const ::google::protobuf::Duration& keep_vm_alive_on_failure_duration() const;
  ::google::protobuf::Duration* release_keep_vm_alive_on_failure_duration();
  ::google::protobuf::Duration* mutable_keep_vm_alive_on_failure_duration();
  void set_allocated_keep_vm_alive_on_failure_duration(::google::protobuf::Duration* keep_vm_alive_on_failure_duration);
  void unsafe_arena_set_allocated_keep_vm_alive_on_failure_duration(
      ::google::protobuf::Duration* keep_vm_alive_on_failure_duration);
  ::google::protobuf::Duration* unsafe_arena_release_keep_vm_alive_on_failure_duration();

  // @@protoc_insertion_point(class_scope:google.genomics.v1alpha2.RunPipelineArgs)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::MapField<
      RunPipelineArgs_InputsEntry_DoNotUse,
      ::std::string, ::std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      0 > inputs_;
  ::google::protobuf::internal::MapField<
      RunPipelineArgs_OutputsEntry_DoNotUse,
      ::std::string, ::std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      0 > outputs_;
  ::google::protobuf::internal::MapField<
      RunPipelineArgs_LabelsEntry_DoNotUse,
      ::std::string, ::std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      0 > labels_;
  ::google::protobuf::internal::ArenaStringPtr project_id_;
  ::google::protobuf::internal::ArenaStringPtr client_id_;
  ::google::genomics::v1alpha2::ServiceAccount* service_account_;
  ::google::genomics::v1alpha2::PipelineResources* resources_;
  ::google::genomics::v1alpha2::LoggingOptions* logging_;
  ::google::protobuf::Duration* keep_vm_alive_on_failure_duration_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fgenomics_2fv1alpha2_2fpipelines_2eproto::TableStruct;
  friend void ::protobuf_google_2fgenomics_2fv1alpha2_2fpipelines_2eproto::InitDefaultsRunPipelineArgsImpl();
};
// -------------------------------------------------------------------

class RunPipelineRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.genomics.v1alpha2.RunPipelineRequest) */ {
 public:
  RunPipelineRequest();
  virtual ~RunPipelineRequest();

  RunPipelineRequest(const RunPipelineRequest& from);

  inline RunPipelineRequest& operator=(const RunPipelineRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RunPipelineRequest(RunPipelineRequest&& from) noexcept
    : RunPipelineRequest() {
    *this = ::std::move(from);
  }

  inline RunPipelineRequest& operator=(RunPipelineRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const RunPipelineRequest& default_instance();

  enum PipelineCase {
    kPipelineId = 1,
    kEphemeralPipeline = 2,
    PIPELINE_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RunPipelineRequest* internal_default_instance() {
    return reinterpret_cast<const RunPipelineRequest*>(
               &_RunPipelineRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    8;

  void UnsafeArenaSwap(RunPipelineRequest* other);
  void Swap(RunPipelineRequest* other);
  friend void swap(RunPipelineRequest& a, RunPipelineRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RunPipelineRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  RunPipelineRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const RunPipelineRequest& from);
  void MergeFrom(const RunPipelineRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(RunPipelineRequest* other);
  protected:
  explicit RunPipelineRequest(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.genomics.v1alpha2.RunPipelineArgs pipeline_args = 3;
  bool has_pipeline_args() const;
  void clear_pipeline_args();
  static const int kPipelineArgsFieldNumber = 3;
  private:
  void _slow_mutable_pipeline_args();
  public:
  const ::google::genomics::v1alpha2::RunPipelineArgs& pipeline_args() const;
  ::google::genomics::v1alpha2::RunPipelineArgs* release_pipeline_args();
  ::google::genomics::v1alpha2::RunPipelineArgs* mutable_pipeline_args();
  void set_allocated_pipeline_args(::google::genomics::v1alpha2::RunPipelineArgs* pipeline_args);
  void unsafe_arena_set_allocated_pipeline_args(
      ::google::genomics::v1alpha2::RunPipelineArgs* pipeline_args);
  ::google::genomics::v1alpha2::RunPipelineArgs* unsafe_arena_release_pipeline_args();

  // string pipeline_id = 1;
  private:
  bool has_pipeline_id() const;
  public:
  void clear_pipeline_id();
  static const int kPipelineIdFieldNumber = 1;
  const ::std::string& pipeline_id() const;
  void set_pipeline_id(const ::std::string& value);
  #if LANG_CXX11
  void set_pipeline_id(::std::string&& value);
  #endif
  void set_pipeline_id(const char* value);
  void set_pipeline_id(const char* value, size_t size);
  ::std::string* mutable_pipeline_id();
  ::std::string* release_pipeline_id();
  void set_allocated_pipeline_id(::std::string* pipeline_id);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_pipeline_id();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_pipeline_id(
      ::std::string* pipeline_id);

  // .google.genomics.v1alpha2.Pipeline ephemeral_pipeline = 2;
  bool has_ephemeral_pipeline() const;
  void clear_ephemeral_pipeline();
  static const int kEphemeralPipelineFieldNumber = 2;
  private:
  void _slow_mutable_ephemeral_pipeline();
  public:
  const ::google::genomics::v1alpha2::Pipeline& ephemeral_pipeline() const;
  ::google::genomics::v1alpha2::Pipeline* release_ephemeral_pipeline();
  ::google::genomics::v1alpha2::Pipeline* mutable_ephemeral_pipeline();
  void set_allocated_ephemeral_pipeline(::google::genomics::v1alpha2::Pipeline* ephemeral_pipeline);
  void unsafe_arena_set_allocated_ephemeral_pipeline(
      ::google::genomics::v1alpha2::Pipeline* ephemeral_pipeline);
  ::google::genomics::v1alpha2::Pipeline* unsafe_arena_release_ephemeral_pipeline();

  PipelineCase pipeline_case() const;
  // @@protoc_insertion_point(class_scope:google.genomics.v1alpha2.RunPipelineRequest)
 private:
  void set_has_pipeline_id();
  void set_has_ephemeral_pipeline();

  inline bool has_pipeline() const;
  void clear_pipeline();
  inline void clear_has_pipeline();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::genomics::v1alpha2::RunPipelineArgs* pipeline_args_;
  union PipelineUnion {
    PipelineUnion() {}
    ::google::protobuf::internal::ArenaStringPtr pipeline_id_;
    ::google::genomics::v1alpha2::Pipeline* ephemeral_pipeline_;
  } pipeline_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::protobuf_google_2fgenomics_2fv1alpha2_2fpipelines_2eproto::TableStruct;
  friend void ::protobuf_google_2fgenomics_2fv1alpha2_2fpipelines_2eproto::InitDefaultsRunPipelineRequestImpl();
};
// -------------------------------------------------------------------

class GetPipelineRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.genomics.v1alpha2.GetPipelineRequest) */ {
 public:
  GetPipelineRequest();
  virtual ~GetPipelineRequest();

  GetPipelineRequest(const GetPipelineRequest& from);

  inline GetPipelineRequest& operator=(const GetPipelineRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetPipelineRequest(GetPipelineRequest&& from) noexcept
    : GetPipelineRequest() {
    *this = ::std::move(from);
  }

  inline GetPipelineRequest& operator=(GetPipelineRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetPipelineRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetPipelineRequest* internal_default_instance() {
    return reinterpret_cast<const GetPipelineRequest*>(
               &_GetPipelineRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    9;

  void UnsafeArenaSwap(GetPipelineRequest* other);
  void Swap(GetPipelineRequest* other);
  friend void swap(GetPipelineRequest& a, GetPipelineRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetPipelineRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  GetPipelineRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GetPipelineRequest& from);
  void MergeFrom(const GetPipelineRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GetPipelineRequest* other);
  protected:
  explicit GetPipelineRequest(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string pipeline_id = 1;
  void clear_pipeline_id();
  static const int kPipelineIdFieldNumber = 1;
  const ::std::string& pipeline_id() const;
  void set_pipeline_id(const ::std::string& value);
  #if LANG_CXX11
  void set_pipeline_id(::std::string&& value);
  #endif
  void set_pipeline_id(const char* value);
  void set_pipeline_id(const char* value, size_t size);
  ::std::string* mutable_pipeline_id();
  ::std::string* release_pipeline_id();
  void set_allocated_pipeline_id(::std::string* pipeline_id);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_pipeline_id();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_pipeline_id(
      ::std::string* pipeline_id);

  // @@protoc_insertion_point(class_scope:google.genomics.v1alpha2.GetPipelineRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::ArenaStringPtr pipeline_id_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fgenomics_2fv1alpha2_2fpipelines_2eproto::TableStruct;
  friend void ::protobuf_google_2fgenomics_2fv1alpha2_2fpipelines_2eproto::InitDefaultsGetPipelineRequestImpl();
};
// -------------------------------------------------------------------

class ListPipelinesRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.genomics.v1alpha2.ListPipelinesRequest) */ {
 public:
  ListPipelinesRequest();
  virtual ~ListPipelinesRequest();

  ListPipelinesRequest(const ListPipelinesRequest& from);

  inline ListPipelinesRequest& operator=(const ListPipelinesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ListPipelinesRequest(ListPipelinesRequest&& from) noexcept
    : ListPipelinesRequest() {
    *this = ::std::move(from);
  }

  inline ListPipelinesRequest& operator=(ListPipelinesRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const ListPipelinesRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListPipelinesRequest* internal_default_instance() {
    return reinterpret_cast<const ListPipelinesRequest*>(
               &_ListPipelinesRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    10;

  void UnsafeArenaSwap(ListPipelinesRequest* other);
  void Swap(ListPipelinesRequest* other);
  friend void swap(ListPipelinesRequest& a, ListPipelinesRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ListPipelinesRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  ListPipelinesRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ListPipelinesRequest& from);
  void MergeFrom(const ListPipelinesRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ListPipelinesRequest* other);
  protected:
  explicit ListPipelinesRequest(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string project_id = 1;
  void clear_project_id();
  static const int kProjectIdFieldNumber = 1;
  const ::std::string& project_id() const;
  void set_project_id(const ::std::string& value);
  #if LANG_CXX11
  void set_project_id(::std::string&& value);
  #endif
  void set_project_id(const char* value);
  void set_project_id(const char* value, size_t size);
  ::std::string* mutable_project_id();
  ::std::string* release_project_id();
  void set_allocated_project_id(::std::string* project_id);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_project_id();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_project_id(
      ::std::string* project_id);

  // string name_prefix = 2;
  void clear_name_prefix();
  static const int kNamePrefixFieldNumber = 2;
  const ::std::string& name_prefix() const;
  void set_name_prefix(const ::std::string& value);
  #if LANG_CXX11
  void set_name_prefix(::std::string&& value);
  #endif
  void set_name_prefix(const char* value);
  void set_name_prefix(const char* value, size_t size);
  ::std::string* mutable_name_prefix();
  ::std::string* release_name_prefix();
  void set_allocated_name_prefix(::std::string* name_prefix);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_name_prefix();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_name_prefix(
      ::std::string* name_prefix);

  // string page_token = 4;
  void clear_page_token();
  static const int kPageTokenFieldNumber = 4;
  const ::std::string& page_token() const;
  void set_page_token(const ::std::string& value);
  #if LANG_CXX11
  void set_page_token(::std::string&& value);
  #endif
  void set_page_token(const char* value);
  void set_page_token(const char* value, size_t size);
  ::std::string* mutable_page_token();
  ::std::string* release_page_token();
  void set_allocated_page_token(::std::string* page_token);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_page_token();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_page_token(
      ::std::string* page_token);

  // int32 page_size = 3;
  void clear_page_size();
  static const int kPageSizeFieldNumber = 3;
  ::google::protobuf::int32 page_size() const;
  void set_page_size(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:google.genomics.v1alpha2.ListPipelinesRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::ArenaStringPtr project_id_;
  ::google::protobuf::internal::ArenaStringPtr name_prefix_;
  ::google::protobuf::internal::ArenaStringPtr page_token_;
  ::google::protobuf::int32 page_size_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fgenomics_2fv1alpha2_2fpipelines_2eproto::TableStruct;
  friend void ::protobuf_google_2fgenomics_2fv1alpha2_2fpipelines_2eproto::InitDefaultsListPipelinesRequestImpl();
};
// -------------------------------------------------------------------

class ListPipelinesResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.genomics.v1alpha2.ListPipelinesResponse) */ {
 public:
  ListPipelinesResponse();
  virtual ~ListPipelinesResponse();

  ListPipelinesResponse(const ListPipelinesResponse& from);

  inline ListPipelinesResponse& operator=(const ListPipelinesResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ListPipelinesResponse(ListPipelinesResponse&& from) noexcept
    : ListPipelinesResponse() {
    *this = ::std::move(from);
  }

  inline ListPipelinesResponse& operator=(ListPipelinesResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const ListPipelinesResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListPipelinesResponse* internal_default_instance() {
    return reinterpret_cast<const ListPipelinesResponse*>(
               &_ListPipelinesResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    11;

  void UnsafeArenaSwap(ListPipelinesResponse* other);
  void Swap(ListPipelinesResponse* other);
  friend void swap(ListPipelinesResponse& a, ListPipelinesResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ListPipelinesResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  ListPipelinesResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ListPipelinesResponse& from);
  void MergeFrom(const ListPipelinesResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ListPipelinesResponse* other);
  protected:
  explicit ListPipelinesResponse(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .google.genomics.v1alpha2.Pipeline pipelines = 1;
  int pipelines_size() const;
  void clear_pipelines();
  static const int kPipelinesFieldNumber = 1;
  const ::google::genomics::v1alpha2::Pipeline& pipelines(int index) const;
  ::google::genomics::v1alpha2::Pipeline* mutable_pipelines(int index);
  ::google::genomics::v1alpha2::Pipeline* add_pipelines();
  ::google::protobuf::RepeatedPtrField< ::google::genomics::v1alpha2::Pipeline >*
      mutable_pipelines();
  const ::google::protobuf::RepeatedPtrField< ::google::genomics::v1alpha2::Pipeline >&
      pipelines() const;

  // string next_page_token = 2;
  void clear_next_page_token();
  static const int kNextPageTokenFieldNumber = 2;
  const ::std::string& next_page_token() const;
  void set_next_page_token(const ::std::string& value);
  #if LANG_CXX11
  void set_next_page_token(::std::string&& value);
  #endif
  void set_next_page_token(const char* value);
  void set_next_page_token(const char* value, size_t size);
  ::std::string* mutable_next_page_token();
  ::std::string* release_next_page_token();
  void set_allocated_next_page_token(::std::string* next_page_token);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_next_page_token();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_next_page_token(
      ::std::string* next_page_token);

  // @@protoc_insertion_point(class_scope:google.genomics.v1alpha2.ListPipelinesResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::RepeatedPtrField< ::google::genomics::v1alpha2::Pipeline > pipelines_;
  ::google::protobuf::internal::ArenaStringPtr next_page_token_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fgenomics_2fv1alpha2_2fpipelines_2eproto::TableStruct;
  friend void ::protobuf_google_2fgenomics_2fv1alpha2_2fpipelines_2eproto::InitDefaultsListPipelinesResponseImpl();
};
// -------------------------------------------------------------------

class DeletePipelineRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.genomics.v1alpha2.DeletePipelineRequest) */ {
 public:
  DeletePipelineRequest();
  virtual ~DeletePipelineRequest();

  DeletePipelineRequest(const DeletePipelineRequest& from);

  inline DeletePipelineRequest& operator=(const DeletePipelineRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DeletePipelineRequest(DeletePipelineRequest&& from) noexcept
    : DeletePipelineRequest() {
    *this = ::std::move(from);
  }

  inline DeletePipelineRequest& operator=(DeletePipelineRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const DeletePipelineRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeletePipelineRequest* internal_default_instance() {
    return reinterpret_cast<const DeletePipelineRequest*>(
               &_DeletePipelineRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    12;

  void UnsafeArenaSwap(DeletePipelineRequest* other);
  void Swap(DeletePipelineRequest* other);
  friend void swap(DeletePipelineRequest& a, DeletePipelineRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DeletePipelineRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  DeletePipelineRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DeletePipelineRequest& from);
  void MergeFrom(const DeletePipelineRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DeletePipelineRequest* other);
  protected:
  explicit DeletePipelineRequest(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string pipeline_id = 1;
  void clear_pipeline_id();
  static const int kPipelineIdFieldNumber = 1;
  const ::std::string& pipeline_id() const;
  void set_pipeline_id(const ::std::string& value);
  #if LANG_CXX11
  void set_pipeline_id(::std::string&& value);
  #endif
  void set_pipeline_id(const char* value);
  void set_pipeline_id(const char* value, size_t size);
  ::std::string* mutable_pipeline_id();
  ::std::string* release_pipeline_id();
  void set_allocated_pipeline_id(::std::string* pipeline_id);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_pipeline_id();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_pipeline_id(
      ::std::string* pipeline_id);

  // @@protoc_insertion_point(class_scope:google.genomics.v1alpha2.DeletePipelineRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::ArenaStringPtr pipeline_id_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fgenomics_2fv1alpha2_2fpipelines_2eproto::TableStruct;
  friend void ::protobuf_google_2fgenomics_2fv1alpha2_2fpipelines_2eproto::InitDefaultsDeletePipelineRequestImpl();
};
// -------------------------------------------------------------------

class GetControllerConfigRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.genomics.v1alpha2.GetControllerConfigRequest) */ {
 public:
  GetControllerConfigRequest();
  virtual ~GetControllerConfigRequest();

  GetControllerConfigRequest(const GetControllerConfigRequest& from);

  inline GetControllerConfigRequest& operator=(const GetControllerConfigRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetControllerConfigRequest(GetControllerConfigRequest&& from) noexcept
    : GetControllerConfigRequest() {
    *this = ::std::move(from);
  }

  inline GetControllerConfigRequest& operator=(GetControllerConfigRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetControllerConfigRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetControllerConfigRequest* internal_default_instance() {
    return reinterpret_cast<const GetControllerConfigRequest*>(
               &_GetControllerConfigRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    13;

  void UnsafeArenaSwap(GetControllerConfigRequest* other);
  void Swap(GetControllerConfigRequest* other);
  friend void swap(GetControllerConfigRequest& a, GetControllerConfigRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetControllerConfigRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  GetControllerConfigRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GetControllerConfigRequest& from);
  void MergeFrom(const GetControllerConfigRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GetControllerConfigRequest* other);
  protected:
  explicit GetControllerConfigRequest(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string operation_id = 1;
  void clear_operation_id();
  static const int kOperationIdFieldNumber = 1;
  const ::std::string& operation_id() const;
  void set_operation_id(const ::std::string& value);
  #if LANG_CXX11
  void set_operation_id(::std::string&& value);
  #endif
  void set_operation_id(const char* value);
  void set_operation_id(const char* value, size_t size);
  ::std::string* mutable_operation_id();
  ::std::string* release_operation_id();
  void set_allocated_operation_id(::std::string* operation_id);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_operation_id();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_operation_id(
      ::std::string* operation_id);

  // uint64 validation_token = 2;
  void clear_validation_token();
  static const int kValidationTokenFieldNumber = 2;
  ::google::protobuf::uint64 validation_token() const;
  void set_validation_token(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:google.genomics.v1alpha2.GetControllerConfigRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::ArenaStringPtr operation_id_;
  ::google::protobuf::uint64 validation_token_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fgenomics_2fv1alpha2_2fpipelines_2eproto::TableStruct;
  friend void ::protobuf_google_2fgenomics_2fv1alpha2_2fpipelines_2eproto::InitDefaultsGetControllerConfigRequestImpl();
};
// -------------------------------------------------------------------

class ControllerConfig_RepeatedString : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.genomics.v1alpha2.ControllerConfig.RepeatedString) */ {
 public:
  ControllerConfig_RepeatedString();
  virtual ~ControllerConfig_RepeatedString();

  ControllerConfig_RepeatedString(const ControllerConfig_RepeatedString& from);

  inline ControllerConfig_RepeatedString& operator=(const ControllerConfig_RepeatedString& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ControllerConfig_RepeatedString(ControllerConfig_RepeatedString&& from) noexcept
    : ControllerConfig_RepeatedString() {
    *this = ::std::move(from);
  }

  inline ControllerConfig_RepeatedString& operator=(ControllerConfig_RepeatedString&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const ControllerConfig_RepeatedString& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ControllerConfig_RepeatedString* internal_default_instance() {
    return reinterpret_cast<const ControllerConfig_RepeatedString*>(
               &_ControllerConfig_RepeatedString_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    14;

  void UnsafeArenaSwap(ControllerConfig_RepeatedString* other);
  void Swap(ControllerConfig_RepeatedString* other);
  friend void swap(ControllerConfig_RepeatedString& a, ControllerConfig_RepeatedString& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ControllerConfig_RepeatedString* New() const PROTOBUF_FINAL { return New(NULL); }

  ControllerConfig_RepeatedString* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ControllerConfig_RepeatedString& from);
  void MergeFrom(const ControllerConfig_RepeatedString& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ControllerConfig_RepeatedString* other);
  protected:
  explicit ControllerConfig_RepeatedString(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string values = 1;
  int values_size() const;
  void clear_values();
  static const int kValuesFieldNumber = 1;
  const ::std::string& values(int index) const;
  ::std::string* mutable_values(int index);
  void set_values(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_values(int index, ::std::string&& value);
  #endif
  void set_values(int index, const char* value);
  void set_values(int index, const char* value, size_t size);
  ::std::string* add_values();
  void add_values(const ::std::string& value);
  #if LANG_CXX11
  void add_values(::std::string&& value);
  #endif
  void add_values(const char* value);
  void add_values(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& values() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_values();

  // @@protoc_insertion_point(class_scope:google.genomics.v1alpha2.ControllerConfig.RepeatedString)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::RepeatedPtrField< ::std::string> values_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fgenomics_2fv1alpha2_2fpipelines_2eproto::TableStruct;
  friend void ::protobuf_google_2fgenomics_2fv1alpha2_2fpipelines_2eproto::InitDefaultsControllerConfig_RepeatedStringImpl();
};
// -------------------------------------------------------------------

class ControllerConfig_VarsEntry_DoNotUse : public ::google::protobuf::internal::MapEntry<ControllerConfig_VarsEntry_DoNotUse, 
    ::std::string, ::std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    0 > {
public:
  typedef ::google::protobuf::internal::MapEntry<ControllerConfig_VarsEntry_DoNotUse, 
    ::std::string, ::std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    0 > SuperType;
  ControllerConfig_VarsEntry_DoNotUse();
  ControllerConfig_VarsEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const ControllerConfig_VarsEntry_DoNotUse& other);
  static const ControllerConfig_VarsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const ControllerConfig_VarsEntry_DoNotUse*>(&_ControllerConfig_VarsEntry_DoNotUse_default_instance_); }
  void MergeFrom(const ::google::protobuf::Message& other) PROTOBUF_FINAL;
  ::google::protobuf::Metadata GetMetadata() const;
};

// -------------------------------------------------------------------

class ControllerConfig_DisksEntry_DoNotUse : public ::google::protobuf::internal::MapEntry<ControllerConfig_DisksEntry_DoNotUse, 
    ::std::string, ::std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    0 > {
public:
  typedef ::google::protobuf::internal::MapEntry<ControllerConfig_DisksEntry_DoNotUse, 
    ::std::string, ::std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    0 > SuperType;
  ControllerConfig_DisksEntry_DoNotUse();
  ControllerConfig_DisksEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const ControllerConfig_DisksEntry_DoNotUse& other);
  static const ControllerConfig_DisksEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const ControllerConfig_DisksEntry_DoNotUse*>(&_ControllerConfig_DisksEntry_DoNotUse_default_instance_); }
  void MergeFrom(const ::google::protobuf::Message& other) PROTOBUF_FINAL;
  ::google::protobuf::Metadata GetMetadata() const;
};

// -------------------------------------------------------------------

class ControllerConfig_GcsSourcesEntry_DoNotUse : public ::google::protobuf::internal::MapEntry<ControllerConfig_GcsSourcesEntry_DoNotUse, 
    ::std::string, ::google::genomics::v1alpha2::ControllerConfig_RepeatedString,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
    0 > {
public:
  typedef ::google::protobuf::internal::MapEntry<ControllerConfig_GcsSourcesEntry_DoNotUse, 
    ::std::string, ::google::genomics::v1alpha2::ControllerConfig_RepeatedString,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
    0 > SuperType;
  ControllerConfig_GcsSourcesEntry_DoNotUse();
  ControllerConfig_GcsSourcesEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const ControllerConfig_GcsSourcesEntry_DoNotUse& other);
  static const ControllerConfig_GcsSourcesEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const ControllerConfig_GcsSourcesEntry_DoNotUse*>(&_ControllerConfig_GcsSourcesEntry_DoNotUse_default_instance_); }
  void MergeFrom(const ::google::protobuf::Message& other) PROTOBUF_FINAL;
  ::google::protobuf::Metadata GetMetadata() const;
};

// -------------------------------------------------------------------

class ControllerConfig_GcsSinksEntry_DoNotUse : public ::google::protobuf::internal::MapEntry<ControllerConfig_GcsSinksEntry_DoNotUse, 
    ::std::string, ::google::genomics::v1alpha2::ControllerConfig_RepeatedString,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
    0 > {
public:
  typedef ::google::protobuf::internal::MapEntry<ControllerConfig_GcsSinksEntry_DoNotUse, 
    ::std::string, ::google::genomics::v1alpha2::ControllerConfig_RepeatedString,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
    0 > SuperType;
  ControllerConfig_GcsSinksEntry_DoNotUse();
  ControllerConfig_GcsSinksEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const ControllerConfig_GcsSinksEntry_DoNotUse& other);
  static const ControllerConfig_GcsSinksEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const ControllerConfig_GcsSinksEntry_DoNotUse*>(&_ControllerConfig_GcsSinksEntry_DoNotUse_default_instance_); }
  void MergeFrom(const ::google::protobuf::Message& other) PROTOBUF_FINAL;
  ::google::protobuf::Metadata GetMetadata() const;
};

// -------------------------------------------------------------------

class ControllerConfig : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.genomics.v1alpha2.ControllerConfig) */ {
 public:
  ControllerConfig();
  virtual ~ControllerConfig();

  ControllerConfig(const ControllerConfig& from);

  inline ControllerConfig& operator=(const ControllerConfig& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ControllerConfig(ControllerConfig&& from) noexcept
    : ControllerConfig() {
    *this = ::std::move(from);
  }

  inline ControllerConfig& operator=(ControllerConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const ControllerConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ControllerConfig* internal_default_instance() {
    return reinterpret_cast<const ControllerConfig*>(
               &_ControllerConfig_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    19;

  void UnsafeArenaSwap(ControllerConfig* other);
  void Swap(ControllerConfig* other);
  friend void swap(ControllerConfig& a, ControllerConfig& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ControllerConfig* New() const PROTOBUF_FINAL { return New(NULL); }

  ControllerConfig* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ControllerConfig& from);
  void MergeFrom(const ControllerConfig& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ControllerConfig* other);
  protected:
  explicit ControllerConfig(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef ControllerConfig_RepeatedString RepeatedString;

  // accessors -------------------------------------------------------

  // map<string, string> vars = 5;
  int vars_size() const;
  void clear_vars();
  static const int kVarsFieldNumber = 5;
  const ::google::protobuf::Map< ::std::string, ::std::string >&
      vars() const;
  ::google::protobuf::Map< ::std::string, ::std::string >*
      mutable_vars();

  // map<string, string> disks = 6;
  int disks_size() const;
  void clear_disks();
  static const int kDisksFieldNumber = 6;
  const ::google::protobuf::Map< ::std::string, ::std::string >&
      disks() const;
  ::google::protobuf::Map< ::std::string, ::std::string >*
      mutable_disks();

  // map<string, .google.genomics.v1alpha2.ControllerConfig.RepeatedString> gcs_sources = 7;
  int gcs_sources_size() const;
  void clear_gcs_sources();
  static const int kGcsSourcesFieldNumber = 7;
  const ::google::protobuf::Map< ::std::string, ::google::genomics::v1alpha2::ControllerConfig_RepeatedString >&
      gcs_sources() const;
  ::google::protobuf::Map< ::std::string, ::google::genomics::v1alpha2::ControllerConfig_RepeatedString >*
      mutable_gcs_sources();

  // map<string, .google.genomics.v1alpha2.ControllerConfig.RepeatedString> gcs_sinks = 8;
  int gcs_sinks_size() const;
  void clear_gcs_sinks();
  static const int kGcsSinksFieldNumber = 8;
  const ::google::protobuf::Map< ::std::string, ::google::genomics::v1alpha2::ControllerConfig_RepeatedString >&
      gcs_sinks() const;
  ::google::protobuf::Map< ::std::string, ::google::genomics::v1alpha2::ControllerConfig_RepeatedString >*
      mutable_gcs_sinks();

  // string image = 1;
  void clear_image();
  static const int kImageFieldNumber = 1;
  const ::std::string& image() const;
  void set_image(const ::std::string& value);
  #if LANG_CXX11
  void set_image(::std::string&& value);
  #endif
  void set_image(const char* value);
  void set_image(const char* value, size_t size);
  ::std::string* mutable_image();
  ::std::string* release_image();
  void set_allocated_image(::std::string* image);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_image();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_image(
      ::std::string* image);

  // string cmd = 2;
  void clear_cmd();
  static const int kCmdFieldNumber = 2;
  const ::std::string& cmd() const;
  void set_cmd(const ::std::string& value);
  #if LANG_CXX11
  void set_cmd(::std::string&& value);
  #endif
  void set_cmd(const char* value);
  void set_cmd(const char* value, size_t size);
  ::std::string* mutable_cmd();
  ::std::string* release_cmd();
  void set_allocated_cmd(::std::string* cmd);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_cmd();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_cmd(
      ::std::string* cmd);

  // string gcs_log_path = 3;
  void clear_gcs_log_path();
  static const int kGcsLogPathFieldNumber = 3;
  const ::std::string& gcs_log_path() const;
  void set_gcs_log_path(const ::std::string& value);
  #if LANG_CXX11
  void set_gcs_log_path(::std::string&& value);
  #endif
  void set_gcs_log_path(const char* value);
  void set_gcs_log_path(const char* value, size_t size);
  ::std::string* mutable_gcs_log_path();
  ::std::string* release_gcs_log_path();
  void set_allocated_gcs_log_path(::std::string* gcs_log_path);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_gcs_log_path();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_gcs_log_path(
      ::std::string* gcs_log_path);

  // string machine_type = 4;
  void clear_machine_type();
  static const int kMachineTypeFieldNumber = 4;
  const ::std::string& machine_type() const;
  void set_machine_type(const ::std::string& value);
  #if LANG_CXX11
  void set_machine_type(::std::string&& value);
  #endif
  void set_machine_type(const char* value);
  void set_machine_type(const char* value, size_t size);
  ::std::string* mutable_machine_type();
  ::std::string* release_machine_type();
  void set_allocated_machine_type(::std::string* machine_type);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_machine_type();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_machine_type(
      ::std::string* machine_type);

  // @@protoc_insertion_point(class_scope:google.genomics.v1alpha2.ControllerConfig)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::MapField<
      ControllerConfig_VarsEntry_DoNotUse,
      ::std::string, ::std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      0 > vars_;
  ::google::protobuf::internal::MapField<
      ControllerConfig_DisksEntry_DoNotUse,
      ::std::string, ::std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      0 > disks_;
  ::google::protobuf::internal::MapField<
      ControllerConfig_GcsSourcesEntry_DoNotUse,
      ::std::string, ::google::genomics::v1alpha2::ControllerConfig_RepeatedString,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 > gcs_sources_;
  ::google::protobuf::internal::MapField<
      ControllerConfig_GcsSinksEntry_DoNotUse,
      ::std::string, ::google::genomics::v1alpha2::ControllerConfig_RepeatedString,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 > gcs_sinks_;
  ::google::protobuf::internal::ArenaStringPtr image_;
  ::google::protobuf::internal::ArenaStringPtr cmd_;
  ::google::protobuf::internal::ArenaStringPtr gcs_log_path_;
  ::google::protobuf::internal::ArenaStringPtr machine_type_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fgenomics_2fv1alpha2_2fpipelines_2eproto::TableStruct;
  friend void ::protobuf_google_2fgenomics_2fv1alpha2_2fpipelines_2eproto::InitDefaultsControllerConfigImpl();
};
// -------------------------------------------------------------------

class TimestampEvent : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.genomics.v1alpha2.TimestampEvent) */ {
 public:
  TimestampEvent();
  virtual ~TimestampEvent();

  TimestampEvent(const TimestampEvent& from);

  inline TimestampEvent& operator=(const TimestampEvent& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TimestampEvent(TimestampEvent&& from) noexcept
    : TimestampEvent() {
    *this = ::std::move(from);
  }

  inline TimestampEvent& operator=(TimestampEvent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const TimestampEvent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TimestampEvent* internal_default_instance() {
    return reinterpret_cast<const TimestampEvent*>(
               &_TimestampEvent_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    20;

  void UnsafeArenaSwap(TimestampEvent* other);
  void Swap(TimestampEvent* other);
  friend void swap(TimestampEvent& a, TimestampEvent& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TimestampEvent* New() const PROTOBUF_FINAL { return New(NULL); }

  TimestampEvent* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const TimestampEvent& from);
  void MergeFrom(const TimestampEvent& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TimestampEvent* other);
  protected:
  explicit TimestampEvent(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string description = 1;
  void clear_description();
  static const int kDescriptionFieldNumber = 1;
  const ::std::string& description() const;
  void set_description(const ::std::string& value);
  #if LANG_CXX11
  void set_description(::std::string&& value);
  #endif
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  ::std::string* mutable_description();
  ::std::string* release_description();
  void set_allocated_description(::std::string* description);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_description();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_description(
      ::std::string* description);

  // .google.protobuf.Timestamp timestamp = 2;
  bool has_timestamp() const;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 2;
  private:
  void _slow_mutable_timestamp();
  public:
  const ::google::protobuf::Timestamp& timestamp() const;
  ::google::protobuf::Timestamp* release_timestamp();
  ::google::protobuf::Timestamp* mutable_timestamp();
  void set_allocated_timestamp(::google::protobuf::Timestamp* timestamp);
  void unsafe_arena_set_allocated_timestamp(
      ::google::protobuf::Timestamp* timestamp);
  ::google::protobuf::Timestamp* unsafe_arena_release_timestamp();

  // @@protoc_insertion_point(class_scope:google.genomics.v1alpha2.TimestampEvent)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::ArenaStringPtr description_;
  ::google::protobuf::Timestamp* timestamp_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fgenomics_2fv1alpha2_2fpipelines_2eproto::TableStruct;
  friend void ::protobuf_google_2fgenomics_2fv1alpha2_2fpipelines_2eproto::InitDefaultsTimestampEventImpl();
};
// -------------------------------------------------------------------

class SetOperationStatusRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.genomics.v1alpha2.SetOperationStatusRequest) */ {
 public:
  SetOperationStatusRequest();
  virtual ~SetOperationStatusRequest();

  SetOperationStatusRequest(const SetOperationStatusRequest& from);

  inline SetOperationStatusRequest& operator=(const SetOperationStatusRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SetOperationStatusRequest(SetOperationStatusRequest&& from) noexcept
    : SetOperationStatusRequest() {
    *this = ::std::move(from);
  }

  inline SetOperationStatusRequest& operator=(SetOperationStatusRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const SetOperationStatusRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SetOperationStatusRequest* internal_default_instance() {
    return reinterpret_cast<const SetOperationStatusRequest*>(
               &_SetOperationStatusRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    21;

  void UnsafeArenaSwap(SetOperationStatusRequest* other);
  void Swap(SetOperationStatusRequest* other);
  friend void swap(SetOperationStatusRequest& a, SetOperationStatusRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SetOperationStatusRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  SetOperationStatusRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SetOperationStatusRequest& from);
  void MergeFrom(const SetOperationStatusRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SetOperationStatusRequest* other);
  protected:
  explicit SetOperationStatusRequest(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .google.genomics.v1alpha2.TimestampEvent timestamp_events = 2;
  int timestamp_events_size() const;
  void clear_timestamp_events();
  static const int kTimestampEventsFieldNumber = 2;
  const ::google::genomics::v1alpha2::TimestampEvent& timestamp_events(int index) const;
  ::google::genomics::v1alpha2::TimestampEvent* mutable_timestamp_events(int index);
  ::google::genomics::v1alpha2::TimestampEvent* add_timestamp_events();
  ::google::protobuf::RepeatedPtrField< ::google::genomics::v1alpha2::TimestampEvent >*
      mutable_timestamp_events();
  const ::google::protobuf::RepeatedPtrField< ::google::genomics::v1alpha2::TimestampEvent >&
      timestamp_events() const;

  // string operation_id = 1;
  void clear_operation_id();
  static const int kOperationIdFieldNumber = 1;
  const ::std::string& operation_id() const;
  void set_operation_id(const ::std::string& value);
  #if LANG_CXX11
  void set_operation_id(::std::string&& value);
  #endif
  void set_operation_id(const char* value);
  void set_operation_id(const char* value, size_t size);
  ::std::string* mutable_operation_id();
  ::std::string* release_operation_id();
  void set_allocated_operation_id(::std::string* operation_id);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_operation_id();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_operation_id(
      ::std::string* operation_id);

  // string error_message = 4;
  void clear_error_message();
  static const int kErrorMessageFieldNumber = 4;
  const ::std::string& error_message() const;
  void set_error_message(const ::std::string& value);
  #if LANG_CXX11
  void set_error_message(::std::string&& value);
  #endif
  void set_error_message(const char* value);
  void set_error_message(const char* value, size_t size);
  ::std::string* mutable_error_message();
  ::std::string* release_error_message();
  void set_allocated_error_message(::std::string* error_message);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_error_message();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_error_message(
      ::std::string* error_message);

  // uint64 validation_token = 5;
  void clear_validation_token();
  static const int kValidationTokenFieldNumber = 5;
  ::google::protobuf::uint64 validation_token() const;
  void set_validation_token(::google::protobuf::uint64 value);

  // .google.rpc.Code error_code = 3;
  void clear_error_code();
  static const int kErrorCodeFieldNumber = 3;
  ::google::rpc::Code error_code() const;
  void set_error_code(::google::rpc::Code value);

  // @@protoc_insertion_point(class_scope:google.genomics.v1alpha2.SetOperationStatusRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::RepeatedPtrField< ::google::genomics::v1alpha2::TimestampEvent > timestamp_events_;
  ::google::protobuf::internal::ArenaStringPtr operation_id_;
  ::google::protobuf::internal::ArenaStringPtr error_message_;
  ::google::protobuf::uint64 validation_token_;
  int error_code_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fgenomics_2fv1alpha2_2fpipelines_2eproto::TableStruct;
  friend void ::protobuf_google_2fgenomics_2fv1alpha2_2fpipelines_2eproto::InitDefaultsSetOperationStatusRequestImpl();
};
// -------------------------------------------------------------------

class ServiceAccount : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.genomics.v1alpha2.ServiceAccount) */ {
 public:
  ServiceAccount();
  virtual ~ServiceAccount();

  ServiceAccount(const ServiceAccount& from);

  inline ServiceAccount& operator=(const ServiceAccount& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ServiceAccount(ServiceAccount&& from) noexcept
    : ServiceAccount() {
    *this = ::std::move(from);
  }

  inline ServiceAccount& operator=(ServiceAccount&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const ServiceAccount& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ServiceAccount* internal_default_instance() {
    return reinterpret_cast<const ServiceAccount*>(
               &_ServiceAccount_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    22;

  void UnsafeArenaSwap(ServiceAccount* other);
  void Swap(ServiceAccount* other);
  friend void swap(ServiceAccount& a, ServiceAccount& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ServiceAccount* New() const PROTOBUF_FINAL { return New(NULL); }

  ServiceAccount* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ServiceAccount& from);
  void MergeFrom(const ServiceAccount& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ServiceAccount* other);
  protected:
  explicit ServiceAccount(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string scopes = 2;
  int scopes_size() const;
  void clear_scopes();
  static const int kScopesFieldNumber = 2;
  const ::std::string& scopes(int index) const;
  ::std::string* mutable_scopes(int index);
  void set_scopes(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_scopes(int index, ::std::string&& value);
  #endif
  void set_scopes(int index, const char* value);
  void set_scopes(int index, const char* value, size_t size);
  ::std::string* add_scopes();
  void add_scopes(const ::std::string& value);
  #if LANG_CXX11
  void add_scopes(::std::string&& value);
  #endif
  void add_scopes(const char* value);
  void add_scopes(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& scopes() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_scopes();

  // string email = 1;
  void clear_email();
  static const int kEmailFieldNumber = 1;
  const ::std::string& email() const;
  void set_email(const ::std::string& value);
  #if LANG_CXX11
  void set_email(::std::string&& value);
  #endif
  void set_email(const char* value);
  void set_email(const char* value, size_t size);
  ::std::string* mutable_email();
  ::std::string* release_email();
  void set_allocated_email(::std::string* email);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_email();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_email(
      ::std::string* email);

  // @@protoc_insertion_point(class_scope:google.genomics.v1alpha2.ServiceAccount)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::RepeatedPtrField< ::std::string> scopes_;
  ::google::protobuf::internal::ArenaStringPtr email_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fgenomics_2fv1alpha2_2fpipelines_2eproto::TableStruct;
  friend void ::protobuf_google_2fgenomics_2fv1alpha2_2fpipelines_2eproto::InitDefaultsServiceAccountImpl();
};
// -------------------------------------------------------------------

class LoggingOptions : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.genomics.v1alpha2.LoggingOptions) */ {
 public:
  LoggingOptions();
  virtual ~LoggingOptions();

  LoggingOptions(const LoggingOptions& from);

  inline LoggingOptions& operator=(const LoggingOptions& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LoggingOptions(LoggingOptions&& from) noexcept
    : LoggingOptions() {
    *this = ::std::move(from);
  }

  inline LoggingOptions& operator=(LoggingOptions&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const LoggingOptions& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LoggingOptions* internal_default_instance() {
    return reinterpret_cast<const LoggingOptions*>(
               &_LoggingOptions_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    23;

  void UnsafeArenaSwap(LoggingOptions* other);
  void Swap(LoggingOptions* other);
  friend void swap(LoggingOptions& a, LoggingOptions& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LoggingOptions* New() const PROTOBUF_FINAL { return New(NULL); }

  LoggingOptions* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const LoggingOptions& from);
  void MergeFrom(const LoggingOptions& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(LoggingOptions* other);
  protected:
  explicit LoggingOptions(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string gcs_path = 1;
  void clear_gcs_path();
  static const int kGcsPathFieldNumber = 1;
  const ::std::string& gcs_path() const;
  void set_gcs_path(const ::std::string& value);
  #if LANG_CXX11
  void set_gcs_path(::std::string&& value);
  #endif
  void set_gcs_path(const char* value);
  void set_gcs_path(const char* value, size_t size);
  ::std::string* mutable_gcs_path();
  ::std::string* release_gcs_path();
  void set_allocated_gcs_path(::std::string* gcs_path);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_gcs_path();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_gcs_path(
      ::std::string* gcs_path);

  // @@protoc_insertion_point(class_scope:google.genomics.v1alpha2.LoggingOptions)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::ArenaStringPtr gcs_path_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fgenomics_2fv1alpha2_2fpipelines_2eproto::TableStruct;
  friend void ::protobuf_google_2fgenomics_2fv1alpha2_2fpipelines_2eproto::InitDefaultsLoggingOptionsImpl();
};
// -------------------------------------------------------------------

class PipelineResources_Disk : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.genomics.v1alpha2.PipelineResources.Disk) */ {
 public:
  PipelineResources_Disk();
  virtual ~PipelineResources_Disk();

  PipelineResources_Disk(const PipelineResources_Disk& from);

  inline PipelineResources_Disk& operator=(const PipelineResources_Disk& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PipelineResources_Disk(PipelineResources_Disk&& from) noexcept
    : PipelineResources_Disk() {
    *this = ::std::move(from);
  }

  inline PipelineResources_Disk& operator=(PipelineResources_Disk&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const PipelineResources_Disk& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PipelineResources_Disk* internal_default_instance() {
    return reinterpret_cast<const PipelineResources_Disk*>(
               &_PipelineResources_Disk_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    24;

  void UnsafeArenaSwap(PipelineResources_Disk* other);
  void Swap(PipelineResources_Disk* other);
  friend void swap(PipelineResources_Disk& a, PipelineResources_Disk& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PipelineResources_Disk* New() const PROTOBUF_FINAL { return New(NULL); }

  PipelineResources_Disk* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const PipelineResources_Disk& from);
  void MergeFrom(const PipelineResources_Disk& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(PipelineResources_Disk* other);
  protected:
  explicit PipelineResources_Disk(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef PipelineResources_Disk_Type Type;
  static const Type TYPE_UNSPECIFIED =
    PipelineResources_Disk_Type_TYPE_UNSPECIFIED;
  static const Type PERSISTENT_HDD =
    PipelineResources_Disk_Type_PERSISTENT_HDD;
  static const Type PERSISTENT_SSD =
    PipelineResources_Disk_Type_PERSISTENT_SSD;
  static const Type LOCAL_SSD =
    PipelineResources_Disk_Type_LOCAL_SSD;
  static inline bool Type_IsValid(int value) {
    return PipelineResources_Disk_Type_IsValid(value);
  }
  static const Type Type_MIN =
    PipelineResources_Disk_Type_Type_MIN;
  static const Type Type_MAX =
    PipelineResources_Disk_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    PipelineResources_Disk_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Type_descriptor() {
    return PipelineResources_Disk_Type_descriptor();
  }
  static inline const ::std::string& Type_Name(Type value) {
    return PipelineResources_Disk_Type_Name(value);
  }
  static inline bool Type_Parse(const ::std::string& name,
      Type* value) {
    return PipelineResources_Disk_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_name();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_name(
      ::std::string* name);

  // string source = 4;
  void clear_source();
  static const int kSourceFieldNumber = 4;
  const ::std::string& source() const;
  void set_source(const ::std::string& value);
  #if LANG_CXX11
  void set_source(::std::string&& value);
  #endif
  void set_source(const char* value);
  void set_source(const char* value, size_t size);
  ::std::string* mutable_source();
  ::std::string* release_source();
  void set_allocated_source(::std::string* source);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_source();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_source(
      ::std::string* source);

  // string mount_point = 8;
  void clear_mount_point();
  static const int kMountPointFieldNumber = 8;
  const ::std::string& mount_point() const;
  void set_mount_point(const ::std::string& value);
  #if LANG_CXX11
  void set_mount_point(::std::string&& value);
  #endif
  void set_mount_point(const char* value);
  void set_mount_point(const char* value, size_t size);
  ::std::string* mutable_mount_point();
  ::std::string* release_mount_point();
  void set_allocated_mount_point(::std::string* mount_point);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_mount_point();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_mount_point(
      ::std::string* mount_point);

  // .google.genomics.v1alpha2.PipelineResources.Disk.Type type = 2;
  void clear_type();
  static const int kTypeFieldNumber = 2;
  ::google::genomics::v1alpha2::PipelineResources_Disk_Type type() const;
  void set_type(::google::genomics::v1alpha2::PipelineResources_Disk_Type value);

  // int32 size_gb = 3;
  void clear_size_gb();
  static const int kSizeGbFieldNumber = 3;
  ::google::protobuf::int32 size_gb() const;
  void set_size_gb(::google::protobuf::int32 value);

  // bool auto_delete = 6;
  void clear_auto_delete();
  static const int kAutoDeleteFieldNumber = 6;
  bool auto_delete() const;
  void set_auto_delete(bool value);

  // @@protoc_insertion_point(class_scope:google.genomics.v1alpha2.PipelineResources.Disk)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr source_;
  ::google::protobuf::internal::ArenaStringPtr mount_point_;
  int type_;
  ::google::protobuf::int32 size_gb_;
  bool auto_delete_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fgenomics_2fv1alpha2_2fpipelines_2eproto::TableStruct;
  friend void ::protobuf_google_2fgenomics_2fv1alpha2_2fpipelines_2eproto::InitDefaultsPipelineResources_DiskImpl();
};
// -------------------------------------------------------------------

class PipelineResources : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.genomics.v1alpha2.PipelineResources) */ {
 public:
  PipelineResources();
  virtual ~PipelineResources();

  PipelineResources(const PipelineResources& from);

  inline PipelineResources& operator=(const PipelineResources& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PipelineResources(PipelineResources&& from) noexcept
    : PipelineResources() {
    *this = ::std::move(from);
  }

  inline PipelineResources& operator=(PipelineResources&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const PipelineResources& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PipelineResources* internal_default_instance() {
    return reinterpret_cast<const PipelineResources*>(
               &_PipelineResources_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    25;

  void UnsafeArenaSwap(PipelineResources* other);
  void Swap(PipelineResources* other);
  friend void swap(PipelineResources& a, PipelineResources& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PipelineResources* New() const PROTOBUF_FINAL { return New(NULL); }

  PipelineResources* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const PipelineResources& from);
  void MergeFrom(const PipelineResources& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(PipelineResources* other);
  protected:
  explicit PipelineResources(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef PipelineResources_Disk Disk;

  // accessors -------------------------------------------------------

  // repeated .google.genomics.v1alpha2.PipelineResources.Disk disks = 4;
  int disks_size() const;
  void clear_disks();
  static const int kDisksFieldNumber = 4;
  const ::google::genomics::v1alpha2::PipelineResources_Disk& disks(int index) const;
  ::google::genomics::v1alpha2::PipelineResources_Disk* mutable_disks(int index);
  ::google::genomics::v1alpha2::PipelineResources_Disk* add_disks();
  ::google::protobuf::RepeatedPtrField< ::google::genomics::v1alpha2::PipelineResources_Disk >*
      mutable_disks();
  const ::google::protobuf::RepeatedPtrField< ::google::genomics::v1alpha2::PipelineResources_Disk >&
      disks() const;

  // repeated string zones = 5;
  int zones_size() const;
  void clear_zones();
  static const int kZonesFieldNumber = 5;
  const ::std::string& zones(int index) const;
  ::std::string* mutable_zones(int index);
  void set_zones(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_zones(int index, ::std::string&& value);
  #endif
  void set_zones(int index, const char* value);
  void set_zones(int index, const char* value, size_t size);
  ::std::string* add_zones();
  void add_zones(const ::std::string& value);
  #if LANG_CXX11
  void add_zones(::std::string&& value);
  #endif
  void add_zones(const char* value);
  void add_zones(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& zones() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_zones();

  // double minimum_ram_gb = 3;
  void clear_minimum_ram_gb();
  static const int kMinimumRamGbFieldNumber = 3;
  double minimum_ram_gb() const;
  void set_minimum_ram_gb(double value);

  // int32 minimum_cpu_cores = 1;
  void clear_minimum_cpu_cores();
  static const int kMinimumCpuCoresFieldNumber = 1;
  ::google::protobuf::int32 minimum_cpu_cores() const;
  void set_minimum_cpu_cores(::google::protobuf::int32 value);

  // bool preemptible = 2;
  void clear_preemptible();
  static const int kPreemptibleFieldNumber = 2;
  bool preemptible() const;
  void set_preemptible(bool value);

  // bool no_address = 7;
  void clear_no_address();
  static const int kNoAddressFieldNumber = 7;
  bool no_address() const;
  void set_no_address(bool value);

  // int32 boot_disk_size_gb = 6;
  void clear_boot_disk_size_gb();
  static const int kBootDiskSizeGbFieldNumber = 6;
  ::google::protobuf::int32 boot_disk_size_gb() const;
  void set_boot_disk_size_gb(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:google.genomics.v1alpha2.PipelineResources)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::RepeatedPtrField< ::google::genomics::v1alpha2::PipelineResources_Disk > disks_;
  ::google::protobuf::RepeatedPtrField< ::std::string> zones_;
  double minimum_ram_gb_;
  ::google::protobuf::int32 minimum_cpu_cores_;
  bool preemptible_;
  bool no_address_;
  ::google::protobuf::int32 boot_disk_size_gb_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fgenomics_2fv1alpha2_2fpipelines_2eproto::TableStruct;
  friend void ::protobuf_google_2fgenomics_2fv1alpha2_2fpipelines_2eproto::InitDefaultsPipelineResourcesImpl();
};
// -------------------------------------------------------------------

class PipelineParameter_LocalCopy : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.genomics.v1alpha2.PipelineParameter.LocalCopy) */ {
 public:
  PipelineParameter_LocalCopy();
  virtual ~PipelineParameter_LocalCopy();

  PipelineParameter_LocalCopy(const PipelineParameter_LocalCopy& from);

  inline PipelineParameter_LocalCopy& operator=(const PipelineParameter_LocalCopy& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PipelineParameter_LocalCopy(PipelineParameter_LocalCopy&& from) noexcept
    : PipelineParameter_LocalCopy() {
    *this = ::std::move(from);
  }

  inline PipelineParameter_LocalCopy& operator=(PipelineParameter_LocalCopy&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const PipelineParameter_LocalCopy& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PipelineParameter_LocalCopy* internal_default_instance() {
    return reinterpret_cast<const PipelineParameter_LocalCopy*>(
               &_PipelineParameter_LocalCopy_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    26;

  void UnsafeArenaSwap(PipelineParameter_LocalCopy* other);
  void Swap(PipelineParameter_LocalCopy* other);
  friend void swap(PipelineParameter_LocalCopy& a, PipelineParameter_LocalCopy& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PipelineParameter_LocalCopy* New() const PROTOBUF_FINAL { return New(NULL); }

  PipelineParameter_LocalCopy* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const PipelineParameter_LocalCopy& from);
  void MergeFrom(const PipelineParameter_LocalCopy& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(PipelineParameter_LocalCopy* other);
  protected:
  explicit PipelineParameter_LocalCopy(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string path = 1;
  void clear_path();
  static const int kPathFieldNumber = 1;
  const ::std::string& path() const;
  void set_path(const ::std::string& value);
  #if LANG_CXX11
  void set_path(::std::string&& value);
  #endif
  void set_path(const char* value);
  void set_path(const char* value, size_t size);
  ::std::string* mutable_path();
  ::std::string* release_path();
  void set_allocated_path(::std::string* path);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_path();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_path(
      ::std::string* path);

  // string disk = 2;
  void clear_disk();
  static const int kDiskFieldNumber = 2;
  const ::std::string& disk() const;
  void set_disk(const ::std::string& value);
  #if LANG_CXX11
  void set_disk(::std::string&& value);
  #endif
  void set_disk(const char* value);
  void set_disk(const char* value, size_t size);
  ::std::string* mutable_disk();
  ::std::string* release_disk();
  void set_allocated_disk(::std::string* disk);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_disk();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_disk(
      ::std::string* disk);

  // @@protoc_insertion_point(class_scope:google.genomics.v1alpha2.PipelineParameter.LocalCopy)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::ArenaStringPtr path_;
  ::google::protobuf::internal::ArenaStringPtr disk_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fgenomics_2fv1alpha2_2fpipelines_2eproto::TableStruct;
  friend void ::protobuf_google_2fgenomics_2fv1alpha2_2fpipelines_2eproto::InitDefaultsPipelineParameter_LocalCopyImpl();
};
// -------------------------------------------------------------------

class PipelineParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.genomics.v1alpha2.PipelineParameter) */ {
 public:
  PipelineParameter();
  virtual ~PipelineParameter();

  PipelineParameter(const PipelineParameter& from);

  inline PipelineParameter& operator=(const PipelineParameter& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PipelineParameter(PipelineParameter&& from) noexcept
    : PipelineParameter() {
    *this = ::std::move(from);
  }

  inline PipelineParameter& operator=(PipelineParameter&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const PipelineParameter& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PipelineParameter* internal_default_instance() {
    return reinterpret_cast<const PipelineParameter*>(
               &_PipelineParameter_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    27;

  void UnsafeArenaSwap(PipelineParameter* other);
  void Swap(PipelineParameter* other);
  friend void swap(PipelineParameter& a, PipelineParameter& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PipelineParameter* New() const PROTOBUF_FINAL { return New(NULL); }

  PipelineParameter* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const PipelineParameter& from);
  void MergeFrom(const PipelineParameter& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(PipelineParameter* other);
  protected:
  explicit PipelineParameter(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef PipelineParameter_LocalCopy LocalCopy;

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_name();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_name(
      ::std::string* name);

  // string description = 2;
  void clear_description();
  static const int kDescriptionFieldNumber = 2;
  const ::std::string& description() const;
  void set_description(const ::std::string& value);
  #if LANG_CXX11
  void set_description(::std::string&& value);
  #endif
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  ::std::string* mutable_description();
  ::std::string* release_description();
  void set_allocated_description(::std::string* description);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_description();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_description(
      ::std::string* description);

  // string default_value = 5;
  void clear_default_value();
  static const int kDefaultValueFieldNumber = 5;
  const ::std::string& default_value() const;
  void set_default_value(const ::std::string& value);
  #if LANG_CXX11
  void set_default_value(::std::string&& value);
  #endif
  void set_default_value(const char* value);
  void set_default_value(const char* value, size_t size);
  ::std::string* mutable_default_value();
  ::std::string* release_default_value();
  void set_allocated_default_value(::std::string* default_value);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_default_value();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_default_value(
      ::std::string* default_value);

  // .google.genomics.v1alpha2.PipelineParameter.LocalCopy local_copy = 6;
  bool has_local_copy() const;
  void clear_local_copy();
  static const int kLocalCopyFieldNumber = 6;
  private:
  void _slow_mutable_local_copy();
  public:
  const ::google::genomics::v1alpha2::PipelineParameter_LocalCopy& local_copy() const;
  ::google::genomics::v1alpha2::PipelineParameter_LocalCopy* release_local_copy();
  ::google::genomics::v1alpha2::PipelineParameter_LocalCopy* mutable_local_copy();
  void set_allocated_local_copy(::google::genomics::v1alpha2::PipelineParameter_LocalCopy* local_copy);
  void unsafe_arena_set_allocated_local_copy(
      ::google::genomics::v1alpha2::PipelineParameter_LocalCopy* local_copy);
  ::google::genomics::v1alpha2::PipelineParameter_LocalCopy* unsafe_arena_release_local_copy();

  // @@protoc_insertion_point(class_scope:google.genomics.v1alpha2.PipelineParameter)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr description_;
  ::google::protobuf::internal::ArenaStringPtr default_value_;
  ::google::genomics::v1alpha2::PipelineParameter_LocalCopy* local_copy_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fgenomics_2fv1alpha2_2fpipelines_2eproto::TableStruct;
  friend void ::protobuf_google_2fgenomics_2fv1alpha2_2fpipelines_2eproto::InitDefaultsPipelineParameterImpl();
};
// -------------------------------------------------------------------

class DockerExecutor : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.genomics.v1alpha2.DockerExecutor) */ {
 public:
  DockerExecutor();
  virtual ~DockerExecutor();

  DockerExecutor(const DockerExecutor& from);

  inline DockerExecutor& operator=(const DockerExecutor& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DockerExecutor(DockerExecutor&& from) noexcept
    : DockerExecutor() {
    *this = ::std::move(from);
  }

  inline DockerExecutor& operator=(DockerExecutor&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const DockerExecutor& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DockerExecutor* internal_default_instance() {
    return reinterpret_cast<const DockerExecutor*>(
               &_DockerExecutor_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    28;

  void UnsafeArenaSwap(DockerExecutor* other);
  void Swap(DockerExecutor* other);
  friend void swap(DockerExecutor& a, DockerExecutor& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DockerExecutor* New() const PROTOBUF_FINAL { return New(NULL); }

  DockerExecutor* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DockerExecutor& from);
  void MergeFrom(const DockerExecutor& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DockerExecutor* other);
  protected:
  explicit DockerExecutor(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string image_name = 1;
  void clear_image_name();
  static const int kImageNameFieldNumber = 1;
  const ::std::string& image_name() const;
  void set_image_name(const ::std::string& value);
  #if LANG_CXX11
  void set_image_name(::std::string&& value);
  #endif
  void set_image_name(const char* value);
  void set_image_name(const char* value, size_t size);
  ::std::string* mutable_image_name();
  ::std::string* release_image_name();
  void set_allocated_image_name(::std::string* image_name);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_image_name();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_image_name(
      ::std::string* image_name);

  // string cmd = 2;
  void clear_cmd();
  static const int kCmdFieldNumber = 2;
  const ::std::string& cmd() const;
  void set_cmd(const ::std::string& value);
  #if LANG_CXX11
  void set_cmd(::std::string&& value);
  #endif
  void set_cmd(const char* value);
  void set_cmd(const char* value, size_t size);
  ::std::string* mutable_cmd();
  ::std::string* release_cmd();
  void set_allocated_cmd(::std::string* cmd);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_cmd();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_cmd(
      ::std::string* cmd);

  // @@protoc_insertion_point(class_scope:google.genomics.v1alpha2.DockerExecutor)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::ArenaStringPtr image_name_;
  ::google::protobuf::internal::ArenaStringPtr cmd_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fgenomics_2fv1alpha2_2fpipelines_2eproto::TableStruct;
  friend void ::protobuf_google_2fgenomics_2fv1alpha2_2fpipelines_2eproto::InitDefaultsDockerExecutorImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ComputeEngine

// string instance_name = 1;
inline void ComputeEngine::clear_instance_name() {
  instance_name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& ComputeEngine::instance_name() const {
  // @@protoc_insertion_point(field_get:google.genomics.v1alpha2.ComputeEngine.instance_name)
  return instance_name_.Get();
}
inline void ComputeEngine::set_instance_name(const ::std::string& value) {
  
  instance_name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.genomics.v1alpha2.ComputeEngine.instance_name)
}
#if LANG_CXX11
inline void ComputeEngine::set_instance_name(::std::string&& value) {
  
  instance_name_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:google.genomics.v1alpha2.ComputeEngine.instance_name)
}
#endif
inline void ComputeEngine::set_instance_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  instance_name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.genomics.v1alpha2.ComputeEngine.instance_name)
}
inline void ComputeEngine::set_instance_name(const char* value,
    size_t size) {
  
  instance_name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.genomics.v1alpha2.ComputeEngine.instance_name)
}
inline ::std::string* ComputeEngine::mutable_instance_name() {
  
  // @@protoc_insertion_point(field_mutable:google.genomics.v1alpha2.ComputeEngine.instance_name)
  return instance_name_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ComputeEngine::release_instance_name() {
  // @@protoc_insertion_point(field_release:google.genomics.v1alpha2.ComputeEngine.instance_name)
  
  return instance_name_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ComputeEngine::set_allocated_instance_name(::std::string* instance_name) {
  if (instance_name != NULL) {
    
  } else {
    
  }
  instance_name_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), instance_name,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.genomics.v1alpha2.ComputeEngine.instance_name)
}
inline ::std::string* ComputeEngine::unsafe_arena_release_instance_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.genomics.v1alpha2.ComputeEngine.instance_name)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return instance_name_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ComputeEngine::unsafe_arena_set_allocated_instance_name(
    ::std::string* instance_name) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (instance_name != NULL) {
    
  } else {
    
  }
  instance_name_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      instance_name, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.genomics.v1alpha2.ComputeEngine.instance_name)
}

// string zone = 2;
inline void ComputeEngine::clear_zone() {
  zone_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& ComputeEngine::zone() const {
  // @@protoc_insertion_point(field_get:google.genomics.v1alpha2.ComputeEngine.zone)
  return zone_.Get();
}
inline void ComputeEngine::set_zone(const ::std::string& value) {
  
  zone_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.genomics.v1alpha2.ComputeEngine.zone)
}
#if LANG_CXX11
inline void ComputeEngine::set_zone(::std::string&& value) {
  
  zone_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:google.genomics.v1alpha2.ComputeEngine.zone)
}
#endif
inline void ComputeEngine::set_zone(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  zone_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.genomics.v1alpha2.ComputeEngine.zone)
}
inline void ComputeEngine::set_zone(const char* value,
    size_t size) {
  
  zone_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.genomics.v1alpha2.ComputeEngine.zone)
}
inline ::std::string* ComputeEngine::mutable_zone() {
  
  // @@protoc_insertion_point(field_mutable:google.genomics.v1alpha2.ComputeEngine.zone)
  return zone_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ComputeEngine::release_zone() {
  // @@protoc_insertion_point(field_release:google.genomics.v1alpha2.ComputeEngine.zone)
  
  return zone_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ComputeEngine::set_allocated_zone(::std::string* zone) {
  if (zone != NULL) {
    
  } else {
    
  }
  zone_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), zone,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.genomics.v1alpha2.ComputeEngine.zone)
}
inline ::std::string* ComputeEngine::unsafe_arena_release_zone() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.genomics.v1alpha2.ComputeEngine.zone)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return zone_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ComputeEngine::unsafe_arena_set_allocated_zone(
    ::std::string* zone) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (zone != NULL) {
    
  } else {
    
  }
  zone_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      zone, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.genomics.v1alpha2.ComputeEngine.zone)
}

// string machine_type = 3;
inline void ComputeEngine::clear_machine_type() {
  machine_type_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& ComputeEngine::machine_type() const {
  // @@protoc_insertion_point(field_get:google.genomics.v1alpha2.ComputeEngine.machine_type)
  return machine_type_.Get();
}
inline void ComputeEngine::set_machine_type(const ::std::string& value) {
  
  machine_type_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.genomics.v1alpha2.ComputeEngine.machine_type)
}
#if LANG_CXX11
inline void ComputeEngine::set_machine_type(::std::string&& value) {
  
  machine_type_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:google.genomics.v1alpha2.ComputeEngine.machine_type)
}
#endif
inline void ComputeEngine::set_machine_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  machine_type_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.genomics.v1alpha2.ComputeEngine.machine_type)
}
inline void ComputeEngine::set_machine_type(const char* value,
    size_t size) {
  
  machine_type_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.genomics.v1alpha2.ComputeEngine.machine_type)
}
inline ::std::string* ComputeEngine::mutable_machine_type() {
  
  // @@protoc_insertion_point(field_mutable:google.genomics.v1alpha2.ComputeEngine.machine_type)
  return machine_type_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ComputeEngine::release_machine_type() {
  // @@protoc_insertion_point(field_release:google.genomics.v1alpha2.ComputeEngine.machine_type)
  
  return machine_type_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ComputeEngine::set_allocated_machine_type(::std::string* machine_type) {
  if (machine_type != NULL) {
    
  } else {
    
  }
  machine_type_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), machine_type,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.genomics.v1alpha2.ComputeEngine.machine_type)
}
inline ::std::string* ComputeEngine::unsafe_arena_release_machine_type() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.genomics.v1alpha2.ComputeEngine.machine_type)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return machine_type_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ComputeEngine::unsafe_arena_set_allocated_machine_type(
    ::std::string* machine_type) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (machine_type != NULL) {
    
  } else {
    
  }
  machine_type_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      machine_type, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.genomics.v1alpha2.ComputeEngine.machine_type)
}

// repeated string disk_names = 4;
inline int ComputeEngine::disk_names_size() const {
  return disk_names_.size();
}
inline void ComputeEngine::clear_disk_names() {
  disk_names_.Clear();
}
inline const ::std::string& ComputeEngine::disk_names(int index) const {
  // @@protoc_insertion_point(field_get:google.genomics.v1alpha2.ComputeEngine.disk_names)
  return disk_names_.Get(index);
}
inline ::std::string* ComputeEngine::mutable_disk_names(int index) {
  // @@protoc_insertion_point(field_mutable:google.genomics.v1alpha2.ComputeEngine.disk_names)
  return disk_names_.Mutable(index);
}
inline void ComputeEngine::set_disk_names(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:google.genomics.v1alpha2.ComputeEngine.disk_names)
  disk_names_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void ComputeEngine::set_disk_names(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:google.genomics.v1alpha2.ComputeEngine.disk_names)
  disk_names_.Mutable(index)->assign(std::move(value));
}
#endif
inline void ComputeEngine::set_disk_names(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  disk_names_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:google.genomics.v1alpha2.ComputeEngine.disk_names)
}
inline void ComputeEngine::set_disk_names(int index, const char* value, size_t size) {
  disk_names_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:google.genomics.v1alpha2.ComputeEngine.disk_names)
}
inline ::std::string* ComputeEngine::add_disk_names() {
  // @@protoc_insertion_point(field_add_mutable:google.genomics.v1alpha2.ComputeEngine.disk_names)
  return disk_names_.Add();
}
inline void ComputeEngine::add_disk_names(const ::std::string& value) {
  disk_names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:google.genomics.v1alpha2.ComputeEngine.disk_names)
}
#if LANG_CXX11
inline void ComputeEngine::add_disk_names(::std::string&& value) {
  disk_names_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:google.genomics.v1alpha2.ComputeEngine.disk_names)
}
#endif
inline void ComputeEngine::add_disk_names(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  disk_names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:google.genomics.v1alpha2.ComputeEngine.disk_names)
}
inline void ComputeEngine::add_disk_names(const char* value, size_t size) {
  disk_names_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:google.genomics.v1alpha2.ComputeEngine.disk_names)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
ComputeEngine::disk_names() const {
  // @@protoc_insertion_point(field_list:google.genomics.v1alpha2.ComputeEngine.disk_names)
  return disk_names_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
ComputeEngine::mutable_disk_names() {
  // @@protoc_insertion_point(field_mutable_list:google.genomics.v1alpha2.ComputeEngine.disk_names)
  return &disk_names_;
}

// -------------------------------------------------------------------

// RuntimeMetadata

// .google.genomics.v1alpha2.ComputeEngine compute_engine = 1;
inline bool RuntimeMetadata::has_compute_engine() const {
  return this != internal_default_instance() && compute_engine_ != NULL;
}
inline void RuntimeMetadata::clear_compute_engine() {
  if (GetArenaNoVirtual() == NULL && compute_engine_ != NULL) {
    delete compute_engine_;
  }
  compute_engine_ = NULL;
}
inline const ::google::genomics::v1alpha2::ComputeEngine& RuntimeMetadata::compute_engine() const {
  const ::google::genomics::v1alpha2::ComputeEngine* p = compute_engine_;
  // @@protoc_insertion_point(field_get:google.genomics.v1alpha2.RuntimeMetadata.compute_engine)
  return p != NULL ? *p : *reinterpret_cast<const ::google::genomics::v1alpha2::ComputeEngine*>(
      &::google::genomics::v1alpha2::_ComputeEngine_default_instance_);
}
inline ::google::genomics::v1alpha2::ComputeEngine* RuntimeMetadata::release_compute_engine() {
  // @@protoc_insertion_point(field_release:google.genomics.v1alpha2.RuntimeMetadata.compute_engine)
  
  ::google::genomics::v1alpha2::ComputeEngine* temp = compute_engine_;
  if (GetArenaNoVirtual() != NULL) {
    temp = ::google::protobuf::internal::DuplicateIfNonNull(temp, NULL);
  }
  compute_engine_ = NULL;
  return temp;
}
inline ::google::genomics::v1alpha2::ComputeEngine* RuntimeMetadata::unsafe_arena_release_compute_engine() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.genomics.v1alpha2.RuntimeMetadata.compute_engine)
  
  ::google::genomics::v1alpha2::ComputeEngine* temp = compute_engine_;
  compute_engine_ = NULL;
  return temp;
}
inline ::google::genomics::v1alpha2::ComputeEngine* RuntimeMetadata::mutable_compute_engine() {
  
  if (compute_engine_ == NULL) {
    _slow_mutable_compute_engine();
  }
  // @@protoc_insertion_point(field_mutable:google.genomics.v1alpha2.RuntimeMetadata.compute_engine)
  return compute_engine_;
}
inline void RuntimeMetadata::set_allocated_compute_engine(::google::genomics::v1alpha2::ComputeEngine* compute_engine) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete compute_engine_;
  }
  if (compute_engine) {
    ::google::protobuf::Arena* submessage_arena =
      ::google::protobuf::Arena::GetArena(compute_engine);
    if (message_arena != submessage_arena) {
      compute_engine = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, compute_engine, submessage_arena);
    }
    
  } else {
    
  }
  compute_engine_ = compute_engine;
  // @@protoc_insertion_point(field_set_allocated:google.genomics.v1alpha2.RuntimeMetadata.compute_engine)
}

// -------------------------------------------------------------------

// Pipeline

// string project_id = 1;
inline void Pipeline::clear_project_id() {
  project_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& Pipeline::project_id() const {
  // @@protoc_insertion_point(field_get:google.genomics.v1alpha2.Pipeline.project_id)
  return project_id_.Get();
}
inline void Pipeline::set_project_id(const ::std::string& value) {
  
  project_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.genomics.v1alpha2.Pipeline.project_id)
}
#if LANG_CXX11
inline void Pipeline::set_project_id(::std::string&& value) {
  
  project_id_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:google.genomics.v1alpha2.Pipeline.project_id)
}
#endif
inline void Pipeline::set_project_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  project_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.genomics.v1alpha2.Pipeline.project_id)
}
inline void Pipeline::set_project_id(const char* value,
    size_t size) {
  
  project_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.genomics.v1alpha2.Pipeline.project_id)
}
inline ::std::string* Pipeline::mutable_project_id() {
  
  // @@protoc_insertion_point(field_mutable:google.genomics.v1alpha2.Pipeline.project_id)
  return project_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* Pipeline::release_project_id() {
  // @@protoc_insertion_point(field_release:google.genomics.v1alpha2.Pipeline.project_id)
  
  return project_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void Pipeline::set_allocated_project_id(::std::string* project_id) {
  if (project_id != NULL) {
    
  } else {
    
  }
  project_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), project_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.genomics.v1alpha2.Pipeline.project_id)
}
inline ::std::string* Pipeline::unsafe_arena_release_project_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.genomics.v1alpha2.Pipeline.project_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return project_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void Pipeline::unsafe_arena_set_allocated_project_id(
    ::std::string* project_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (project_id != NULL) {
    
  } else {
    
  }
  project_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      project_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.genomics.v1alpha2.Pipeline.project_id)
}

// string name = 2;
inline void Pipeline::clear_name() {
  name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& Pipeline::name() const {
  // @@protoc_insertion_point(field_get:google.genomics.v1alpha2.Pipeline.name)
  return name_.Get();
}
inline void Pipeline::set_name(const ::std::string& value) {
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.genomics.v1alpha2.Pipeline.name)
}
#if LANG_CXX11
inline void Pipeline::set_name(::std::string&& value) {
  
  name_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:google.genomics.v1alpha2.Pipeline.name)
}
#endif
inline void Pipeline::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.genomics.v1alpha2.Pipeline.name)
}
inline void Pipeline::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.genomics.v1alpha2.Pipeline.name)
}
inline ::std::string* Pipeline::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:google.genomics.v1alpha2.Pipeline.name)
  return name_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* Pipeline::release_name() {
  // @@protoc_insertion_point(field_release:google.genomics.v1alpha2.Pipeline.name)
  
  return name_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void Pipeline::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.genomics.v1alpha2.Pipeline.name)
}
inline ::std::string* Pipeline::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.genomics.v1alpha2.Pipeline.name)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return name_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void Pipeline::unsafe_arena_set_allocated_name(
    ::std::string* name) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (name != NULL) {
    
  } else {
    
  }
  name_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      name, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.genomics.v1alpha2.Pipeline.name)
}

// string description = 3;
inline void Pipeline::clear_description() {
  description_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& Pipeline::description() const {
  // @@protoc_insertion_point(field_get:google.genomics.v1alpha2.Pipeline.description)
  return description_.Get();
}
inline void Pipeline::set_description(const ::std::string& value) {
  
  description_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.genomics.v1alpha2.Pipeline.description)
}
#if LANG_CXX11
inline void Pipeline::set_description(::std::string&& value) {
  
  description_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:google.genomics.v1alpha2.Pipeline.description)
}
#endif
inline void Pipeline::set_description(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  description_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.genomics.v1alpha2.Pipeline.description)
}
inline void Pipeline::set_description(const char* value,
    size_t size) {
  
  description_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.genomics.v1alpha2.Pipeline.description)
}
inline ::std::string* Pipeline::mutable_description() {
  
  // @@protoc_insertion_point(field_mutable:google.genomics.v1alpha2.Pipeline.description)
  return description_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* Pipeline::release_description() {
  // @@protoc_insertion_point(field_release:google.genomics.v1alpha2.Pipeline.description)
  
  return description_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void Pipeline::set_allocated_description(::std::string* description) {
  if (description != NULL) {
    
  } else {
    
  }
  description_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), description,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.genomics.v1alpha2.Pipeline.description)
}
inline ::std::string* Pipeline::unsafe_arena_release_description() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.genomics.v1alpha2.Pipeline.description)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return description_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void Pipeline::unsafe_arena_set_allocated_description(
    ::std::string* description) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (description != NULL) {
    
  } else {
    
  }
  description_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      description, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.genomics.v1alpha2.Pipeline.description)
}

// repeated .google.genomics.v1alpha2.PipelineParameter input_parameters = 8;
inline int Pipeline::input_parameters_size() const {
  return input_parameters_.size();
}
inline void Pipeline::clear_input_parameters() {
  input_parameters_.Clear();
}
inline const ::google::genomics::v1alpha2::PipelineParameter& Pipeline::input_parameters(int index) const {
  // @@protoc_insertion_point(field_get:google.genomics.v1alpha2.Pipeline.input_parameters)
  return input_parameters_.Get(index);
}
inline ::google::genomics::v1alpha2::PipelineParameter* Pipeline::mutable_input_parameters(int index) {
  // @@protoc_insertion_point(field_mutable:google.genomics.v1alpha2.Pipeline.input_parameters)
  return input_parameters_.Mutable(index);
}
inline ::google::genomics::v1alpha2::PipelineParameter* Pipeline::add_input_parameters() {
  // @@protoc_insertion_point(field_add:google.genomics.v1alpha2.Pipeline.input_parameters)
  return input_parameters_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::google::genomics::v1alpha2::PipelineParameter >*
Pipeline::mutable_input_parameters() {
  // @@protoc_insertion_point(field_mutable_list:google.genomics.v1alpha2.Pipeline.input_parameters)
  return &input_parameters_;
}
inline const ::google::protobuf::RepeatedPtrField< ::google::genomics::v1alpha2::PipelineParameter >&
Pipeline::input_parameters() const {
  // @@protoc_insertion_point(field_list:google.genomics.v1alpha2.Pipeline.input_parameters)
  return input_parameters_;
}

// repeated .google.genomics.v1alpha2.PipelineParameter output_parameters = 9;
inline int Pipeline::output_parameters_size() const {
  return output_parameters_.size();
}
inline void Pipeline::clear_output_parameters() {
  output_parameters_.Clear();
}
inline const ::google::genomics::v1alpha2::PipelineParameter& Pipeline::output_parameters(int index) const {
  // @@protoc_insertion_point(field_get:google.genomics.v1alpha2.Pipeline.output_parameters)
  return output_parameters_.Get(index);
}
inline ::google::genomics::v1alpha2::PipelineParameter* Pipeline::mutable_output_parameters(int index) {
  // @@protoc_insertion_point(field_mutable:google.genomics.v1alpha2.Pipeline.output_parameters)
  return output_parameters_.Mutable(index);
}
inline ::google::genomics::v1alpha2::PipelineParameter* Pipeline::add_output_parameters() {
  // @@protoc_insertion_point(field_add:google.genomics.v1alpha2.Pipeline.output_parameters)
  return output_parameters_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::google::genomics::v1alpha2::PipelineParameter >*
Pipeline::mutable_output_parameters() {
  // @@protoc_insertion_point(field_mutable_list:google.genomics.v1alpha2.Pipeline.output_parameters)
  return &output_parameters_;
}
inline const ::google::protobuf::RepeatedPtrField< ::google::genomics::v1alpha2::PipelineParameter >&
Pipeline::output_parameters() const {
  // @@protoc_insertion_point(field_list:google.genomics.v1alpha2.Pipeline.output_parameters)
  return output_parameters_;
}

// .google.genomics.v1alpha2.DockerExecutor docker = 5;
inline bool Pipeline::has_docker() const {
  return executor_case() == kDocker;
}
inline void Pipeline::set_has_docker() {
  _oneof_case_[0] = kDocker;
}
inline void Pipeline::clear_docker() {
  if (has_docker()) {
    if (GetArenaNoVirtual() == NULL) {
      delete executor_.docker_;
    }
    clear_has_executor();
  }
}
inline ::google::genomics::v1alpha2::DockerExecutor* Pipeline::release_docker() {
  // @@protoc_insertion_point(field_release:google.genomics.v1alpha2.Pipeline.docker)
  if (has_docker()) {
    clear_has_executor();
      ::google::genomics::v1alpha2::DockerExecutor* temp = executor_.docker_;
    if (GetArenaNoVirtual() != NULL) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp, NULL);
    }
    executor_.docker_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::genomics::v1alpha2::DockerExecutor& Pipeline::docker() const {
  // @@protoc_insertion_point(field_get:google.genomics.v1alpha2.Pipeline.docker)
  return has_docker()
      ? *executor_.docker_
      : *reinterpret_cast< ::google::genomics::v1alpha2::DockerExecutor*>(&::google::genomics::v1alpha2::_DockerExecutor_default_instance_);
}
inline ::google::genomics::v1alpha2::DockerExecutor* Pipeline::unsafe_arena_release_docker() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.genomics.v1alpha2.Pipeline.docker)
  if (has_docker()) {
    clear_has_executor();
    ::google::genomics::v1alpha2::DockerExecutor* temp = executor_.docker_;
    executor_.docker_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void Pipeline::unsafe_arena_set_allocated_docker(::google::genomics::v1alpha2::DockerExecutor* docker) {
  clear_executor();
  if (docker) {
    set_has_docker();
    executor_.docker_ = docker;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.genomics.v1alpha2.Pipeline.docker)
}
inline ::google::genomics::v1alpha2::DockerExecutor* Pipeline::mutable_docker() {
  if (!has_docker()) {
    clear_executor();
    set_has_docker();
    executor_.docker_ = 
      ::google::protobuf::Arena::CreateMessage< ::google::genomics::v1alpha2::DockerExecutor >(
      GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:google.genomics.v1alpha2.Pipeline.docker)
  return executor_.docker_;
}

// .google.genomics.v1alpha2.PipelineResources resources = 6;
inline bool Pipeline::has_resources() const {
  return this != internal_default_instance() && resources_ != NULL;
}
inline void Pipeline::clear_resources() {
  if (GetArenaNoVirtual() == NULL && resources_ != NULL) {
    delete resources_;
  }
  resources_ = NULL;
}
inline const ::google::genomics::v1alpha2::PipelineResources& Pipeline::resources() const {
  const ::google::genomics::v1alpha2::PipelineResources* p = resources_;
  // @@protoc_insertion_point(field_get:google.genomics.v1alpha2.Pipeline.resources)
  return p != NULL ? *p : *reinterpret_cast<const ::google::genomics::v1alpha2::PipelineResources*>(
      &::google::genomics::v1alpha2::_PipelineResources_default_instance_);
}
inline ::google::genomics::v1alpha2::PipelineResources* Pipeline::release_resources() {
  // @@protoc_insertion_point(field_release:google.genomics.v1alpha2.Pipeline.resources)
  
  ::google::genomics::v1alpha2::PipelineResources* temp = resources_;
  if (GetArenaNoVirtual() != NULL) {
    temp = ::google::protobuf::internal::DuplicateIfNonNull(temp, NULL);
  }
  resources_ = NULL;
  return temp;
}
inline ::google::genomics::v1alpha2::PipelineResources* Pipeline::unsafe_arena_release_resources() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.genomics.v1alpha2.Pipeline.resources)
  
  ::google::genomics::v1alpha2::PipelineResources* temp = resources_;
  resources_ = NULL;
  return temp;
}
inline ::google::genomics::v1alpha2::PipelineResources* Pipeline::mutable_resources() {
  
  if (resources_ == NULL) {
    _slow_mutable_resources();
  }
  // @@protoc_insertion_point(field_mutable:google.genomics.v1alpha2.Pipeline.resources)
  return resources_;
}
inline void Pipeline::set_allocated_resources(::google::genomics::v1alpha2::PipelineResources* resources) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete resources_;
  }
  if (resources) {
    ::google::protobuf::Arena* submessage_arena =
      ::google::protobuf::Arena::GetArena(resources);
    if (message_arena != submessage_arena) {
      resources = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, resources, submessage_arena);
    }
    
  } else {
    
  }
  resources_ = resources;
  // @@protoc_insertion_point(field_set_allocated:google.genomics.v1alpha2.Pipeline.resources)
}

// string pipeline_id = 7;
inline void Pipeline::clear_pipeline_id() {
  pipeline_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& Pipeline::pipeline_id() const {
  // @@protoc_insertion_point(field_get:google.genomics.v1alpha2.Pipeline.pipeline_id)
  return pipeline_id_.Get();
}
inline void Pipeline::set_pipeline_id(const ::std::string& value) {
  
  pipeline_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.genomics.v1alpha2.Pipeline.pipeline_id)
}
#if LANG_CXX11
inline void Pipeline::set_pipeline_id(::std::string&& value) {
  
  pipeline_id_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:google.genomics.v1alpha2.Pipeline.pipeline_id)
}
#endif
inline void Pipeline::set_pipeline_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  pipeline_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.genomics.v1alpha2.Pipeline.pipeline_id)
}
inline void Pipeline::set_pipeline_id(const char* value,
    size_t size) {
  
  pipeline_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.genomics.v1alpha2.Pipeline.pipeline_id)
}
inline ::std::string* Pipeline::mutable_pipeline_id() {
  
  // @@protoc_insertion_point(field_mutable:google.genomics.v1alpha2.Pipeline.pipeline_id)
  return pipeline_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* Pipeline::release_pipeline_id() {
  // @@protoc_insertion_point(field_release:google.genomics.v1alpha2.Pipeline.pipeline_id)
  
  return pipeline_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void Pipeline::set_allocated_pipeline_id(::std::string* pipeline_id) {
  if (pipeline_id != NULL) {
    
  } else {
    
  }
  pipeline_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pipeline_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.genomics.v1alpha2.Pipeline.pipeline_id)
}
inline ::std::string* Pipeline::unsafe_arena_release_pipeline_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.genomics.v1alpha2.Pipeline.pipeline_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return pipeline_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void Pipeline::unsafe_arena_set_allocated_pipeline_id(
    ::std::string* pipeline_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (pipeline_id != NULL) {
    
  } else {
    
  }
  pipeline_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      pipeline_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.genomics.v1alpha2.Pipeline.pipeline_id)
}

inline bool Pipeline::has_executor() const {
  return executor_case() != EXECUTOR_NOT_SET;
}
inline void Pipeline::clear_has_executor() {
  _oneof_case_[0] = EXECUTOR_NOT_SET;
}
inline Pipeline::ExecutorCase Pipeline::executor_case() const {
  return Pipeline::ExecutorCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// CreatePipelineRequest

// .google.genomics.v1alpha2.Pipeline pipeline = 1;
inline bool CreatePipelineRequest::has_pipeline() const {
  return this != internal_default_instance() && pipeline_ != NULL;
}
inline void CreatePipelineRequest::clear_pipeline() {
  if (GetArenaNoVirtual() == NULL && pipeline_ != NULL) {
    delete pipeline_;
  }
  pipeline_ = NULL;
}
inline const ::google::genomics::v1alpha2::Pipeline& CreatePipelineRequest::pipeline() const {
  const ::google::genomics::v1alpha2::Pipeline* p = pipeline_;
  // @@protoc_insertion_point(field_get:google.genomics.v1alpha2.CreatePipelineRequest.pipeline)
  return p != NULL ? *p : *reinterpret_cast<const ::google::genomics::v1alpha2::Pipeline*>(
      &::google::genomics::v1alpha2::_Pipeline_default_instance_);
}
inline ::google::genomics::v1alpha2::Pipeline* CreatePipelineRequest::release_pipeline() {
  // @@protoc_insertion_point(field_release:google.genomics.v1alpha2.CreatePipelineRequest.pipeline)
  
  ::google::genomics::v1alpha2::Pipeline* temp = pipeline_;
  if (GetArenaNoVirtual() != NULL) {
    temp = ::google::protobuf::internal::DuplicateIfNonNull(temp, NULL);
  }
  pipeline_ = NULL;
  return temp;
}
inline ::google::genomics::v1alpha2::Pipeline* CreatePipelineRequest::unsafe_arena_release_pipeline() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.genomics.v1alpha2.CreatePipelineRequest.pipeline)
  
  ::google::genomics::v1alpha2::Pipeline* temp = pipeline_;
  pipeline_ = NULL;
  return temp;
}
inline ::google::genomics::v1alpha2::Pipeline* CreatePipelineRequest::mutable_pipeline() {
  
  if (pipeline_ == NULL) {
    _slow_mutable_pipeline();
  }
  // @@protoc_insertion_point(field_mutable:google.genomics.v1alpha2.CreatePipelineRequest.pipeline)
  return pipeline_;
}
inline void CreatePipelineRequest::set_allocated_pipeline(::google::genomics::v1alpha2::Pipeline* pipeline) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete pipeline_;
  }
  if (pipeline) {
    ::google::protobuf::Arena* submessage_arena =
      ::google::protobuf::Arena::GetArena(pipeline);
    if (message_arena != submessage_arena) {
      pipeline = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, pipeline, submessage_arena);
    }
    
  } else {
    
  }
  pipeline_ = pipeline;
  // @@protoc_insertion_point(field_set_allocated:google.genomics.v1alpha2.CreatePipelineRequest.pipeline)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// RunPipelineArgs

// string project_id = 1;
inline void RunPipelineArgs::clear_project_id() {
  project_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& RunPipelineArgs::project_id() const {
  // @@protoc_insertion_point(field_get:google.genomics.v1alpha2.RunPipelineArgs.project_id)
  return project_id_.Get();
}
inline void RunPipelineArgs::set_project_id(const ::std::string& value) {
  
  project_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.genomics.v1alpha2.RunPipelineArgs.project_id)
}
#if LANG_CXX11
inline void RunPipelineArgs::set_project_id(::std::string&& value) {
  
  project_id_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:google.genomics.v1alpha2.RunPipelineArgs.project_id)
}
#endif
inline void RunPipelineArgs::set_project_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  project_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.genomics.v1alpha2.RunPipelineArgs.project_id)
}
inline void RunPipelineArgs::set_project_id(const char* value,
    size_t size) {
  
  project_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.genomics.v1alpha2.RunPipelineArgs.project_id)
}
inline ::std::string* RunPipelineArgs::mutable_project_id() {
  
  // @@protoc_insertion_point(field_mutable:google.genomics.v1alpha2.RunPipelineArgs.project_id)
  return project_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* RunPipelineArgs::release_project_id() {
  // @@protoc_insertion_point(field_release:google.genomics.v1alpha2.RunPipelineArgs.project_id)
  
  return project_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void RunPipelineArgs::set_allocated_project_id(::std::string* project_id) {
  if (project_id != NULL) {
    
  } else {
    
  }
  project_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), project_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.genomics.v1alpha2.RunPipelineArgs.project_id)
}
inline ::std::string* RunPipelineArgs::unsafe_arena_release_project_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.genomics.v1alpha2.RunPipelineArgs.project_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return project_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void RunPipelineArgs::unsafe_arena_set_allocated_project_id(
    ::std::string* project_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (project_id != NULL) {
    
  } else {
    
  }
  project_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      project_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.genomics.v1alpha2.RunPipelineArgs.project_id)
}

// map<string, string> inputs = 2;
inline int RunPipelineArgs::inputs_size() const {
  return inputs_.size();
}
inline void RunPipelineArgs::clear_inputs() {
  inputs_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::std::string >&
RunPipelineArgs::inputs() const {
  // @@protoc_insertion_point(field_map:google.genomics.v1alpha2.RunPipelineArgs.inputs)
  return inputs_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::std::string >*
RunPipelineArgs::mutable_inputs() {
  // @@protoc_insertion_point(field_mutable_map:google.genomics.v1alpha2.RunPipelineArgs.inputs)
  return inputs_.MutableMap();
}

// map<string, string> outputs = 3;
inline int RunPipelineArgs::outputs_size() const {
  return outputs_.size();
}
inline void RunPipelineArgs::clear_outputs() {
  outputs_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::std::string >&
RunPipelineArgs::outputs() const {
  // @@protoc_insertion_point(field_map:google.genomics.v1alpha2.RunPipelineArgs.outputs)
  return outputs_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::std::string >*
RunPipelineArgs::mutable_outputs() {
  // @@protoc_insertion_point(field_mutable_map:google.genomics.v1alpha2.RunPipelineArgs.outputs)
  return outputs_.MutableMap();
}

// .google.genomics.v1alpha2.ServiceAccount service_account = 4;
inline bool RunPipelineArgs::has_service_account() const {
  return this != internal_default_instance() && service_account_ != NULL;
}
inline void RunPipelineArgs::clear_service_account() {
  if (GetArenaNoVirtual() == NULL && service_account_ != NULL) {
    delete service_account_;
  }
  service_account_ = NULL;
}
inline const ::google::genomics::v1alpha2::ServiceAccount& RunPipelineArgs::service_account() const {
  const ::google::genomics::v1alpha2::ServiceAccount* p = service_account_;
  // @@protoc_insertion_point(field_get:google.genomics.v1alpha2.RunPipelineArgs.service_account)
  return p != NULL ? *p : *reinterpret_cast<const ::google::genomics::v1alpha2::ServiceAccount*>(
      &::google::genomics::v1alpha2::_ServiceAccount_default_instance_);
}
inline ::google::genomics::v1alpha2::ServiceAccount* RunPipelineArgs::release_service_account() {
  // @@protoc_insertion_point(field_release:google.genomics.v1alpha2.RunPipelineArgs.service_account)
  
  ::google::genomics::v1alpha2::ServiceAccount* temp = service_account_;
  if (GetArenaNoVirtual() != NULL) {
    temp = ::google::protobuf::internal::DuplicateIfNonNull(temp, NULL);
  }
  service_account_ = NULL;
  return temp;
}
inline ::google::genomics::v1alpha2::ServiceAccount* RunPipelineArgs::unsafe_arena_release_service_account() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.genomics.v1alpha2.RunPipelineArgs.service_account)
  
  ::google::genomics::v1alpha2::ServiceAccount* temp = service_account_;
  service_account_ = NULL;
  return temp;
}
inline ::google::genomics::v1alpha2::ServiceAccount* RunPipelineArgs::mutable_service_account() {
  
  if (service_account_ == NULL) {
    _slow_mutable_service_account();
  }
  // @@protoc_insertion_point(field_mutable:google.genomics.v1alpha2.RunPipelineArgs.service_account)
  return service_account_;
}
inline void RunPipelineArgs::set_allocated_service_account(::google::genomics::v1alpha2::ServiceAccount* service_account) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete service_account_;
  }
  if (service_account) {
    ::google::protobuf::Arena* submessage_arena =
      ::google::protobuf::Arena::GetArena(service_account);
    if (message_arena != submessage_arena) {
      service_account = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, service_account, submessage_arena);
    }
    
  } else {
    
  }
  service_account_ = service_account;
  // @@protoc_insertion_point(field_set_allocated:google.genomics.v1alpha2.RunPipelineArgs.service_account)
}

// string client_id = 5;
inline void RunPipelineArgs::clear_client_id() {
  client_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& RunPipelineArgs::client_id() const {
  // @@protoc_insertion_point(field_get:google.genomics.v1alpha2.RunPipelineArgs.client_id)
  return client_id_.Get();
}
inline void RunPipelineArgs::set_client_id(const ::std::string& value) {
  
  client_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.genomics.v1alpha2.RunPipelineArgs.client_id)
}
#if LANG_CXX11
inline void RunPipelineArgs::set_client_id(::std::string&& value) {
  
  client_id_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:google.genomics.v1alpha2.RunPipelineArgs.client_id)
}
#endif
inline void RunPipelineArgs::set_client_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  client_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.genomics.v1alpha2.RunPipelineArgs.client_id)
}
inline void RunPipelineArgs::set_client_id(const char* value,
    size_t size) {
  
  client_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.genomics.v1alpha2.RunPipelineArgs.client_id)
}
inline ::std::string* RunPipelineArgs::mutable_client_id() {
  
  // @@protoc_insertion_point(field_mutable:google.genomics.v1alpha2.RunPipelineArgs.client_id)
  return client_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* RunPipelineArgs::release_client_id() {
  // @@protoc_insertion_point(field_release:google.genomics.v1alpha2.RunPipelineArgs.client_id)
  
  return client_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void RunPipelineArgs::set_allocated_client_id(::std::string* client_id) {
  if (client_id != NULL) {
    
  } else {
    
  }
  client_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), client_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.genomics.v1alpha2.RunPipelineArgs.client_id)
}
inline ::std::string* RunPipelineArgs::unsafe_arena_release_client_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.genomics.v1alpha2.RunPipelineArgs.client_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return client_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void RunPipelineArgs::unsafe_arena_set_allocated_client_id(
    ::std::string* client_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (client_id != NULL) {
    
  } else {
    
  }
  client_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      client_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.genomics.v1alpha2.RunPipelineArgs.client_id)
}

// .google.genomics.v1alpha2.PipelineResources resources = 6;
inline bool RunPipelineArgs::has_resources() const {
  return this != internal_default_instance() && resources_ != NULL;
}
inline void RunPipelineArgs::clear_resources() {
  if (GetArenaNoVirtual() == NULL && resources_ != NULL) {
    delete resources_;
  }
  resources_ = NULL;
}
inline const ::google::genomics::v1alpha2::PipelineResources& RunPipelineArgs::resources() const {
  const ::google::genomics::v1alpha2::PipelineResources* p = resources_;
  // @@protoc_insertion_point(field_get:google.genomics.v1alpha2.RunPipelineArgs.resources)
  return p != NULL ? *p : *reinterpret_cast<const ::google::genomics::v1alpha2::PipelineResources*>(
      &::google::genomics::v1alpha2::_PipelineResources_default_instance_);
}
inline ::google::genomics::v1alpha2::PipelineResources* RunPipelineArgs::release_resources() {
  // @@protoc_insertion_point(field_release:google.genomics.v1alpha2.RunPipelineArgs.resources)
  
  ::google::genomics::v1alpha2::PipelineResources* temp = resources_;
  if (GetArenaNoVirtual() != NULL) {
    temp = ::google::protobuf::internal::DuplicateIfNonNull(temp, NULL);
  }
  resources_ = NULL;
  return temp;
}
inline ::google::genomics::v1alpha2::PipelineResources* RunPipelineArgs::unsafe_arena_release_resources() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.genomics.v1alpha2.RunPipelineArgs.resources)
  
  ::google::genomics::v1alpha2::PipelineResources* temp = resources_;
  resources_ = NULL;
  return temp;
}
inline ::google::genomics::v1alpha2::PipelineResources* RunPipelineArgs::mutable_resources() {
  
  if (resources_ == NULL) {
    _slow_mutable_resources();
  }
  // @@protoc_insertion_point(field_mutable:google.genomics.v1alpha2.RunPipelineArgs.resources)
  return resources_;
}
inline void RunPipelineArgs::set_allocated_resources(::google::genomics::v1alpha2::PipelineResources* resources) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete resources_;
  }
  if (resources) {
    ::google::protobuf::Arena* submessage_arena =
      ::google::protobuf::Arena::GetArena(resources);
    if (message_arena != submessage_arena) {
      resources = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, resources, submessage_arena);
    }
    
  } else {
    
  }
  resources_ = resources;
  // @@protoc_insertion_point(field_set_allocated:google.genomics.v1alpha2.RunPipelineArgs.resources)
}

// .google.genomics.v1alpha2.LoggingOptions logging = 7;
inline bool RunPipelineArgs::has_logging() const {
  return this != internal_default_instance() && logging_ != NULL;
}
inline void RunPipelineArgs::clear_logging() {
  if (GetArenaNoVirtual() == NULL && logging_ != NULL) {
    delete logging_;
  }
  logging_ = NULL;
}
inline const ::google::genomics::v1alpha2::LoggingOptions& RunPipelineArgs::logging() const {
  const ::google::genomics::v1alpha2::LoggingOptions* p = logging_;
  // @@protoc_insertion_point(field_get:google.genomics.v1alpha2.RunPipelineArgs.logging)
  return p != NULL ? *p : *reinterpret_cast<const ::google::genomics::v1alpha2::LoggingOptions*>(
      &::google::genomics::v1alpha2::_LoggingOptions_default_instance_);
}
inline ::google::genomics::v1alpha2::LoggingOptions* RunPipelineArgs::release_logging() {
  // @@protoc_insertion_point(field_release:google.genomics.v1alpha2.RunPipelineArgs.logging)
  
  ::google::genomics::v1alpha2::LoggingOptions* temp = logging_;
  if (GetArenaNoVirtual() != NULL) {
    temp = ::google::protobuf::internal::DuplicateIfNonNull(temp, NULL);
  }
  logging_ = NULL;
  return temp;
}
inline ::google::genomics::v1alpha2::LoggingOptions* RunPipelineArgs::unsafe_arena_release_logging() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.genomics.v1alpha2.RunPipelineArgs.logging)
  
  ::google::genomics::v1alpha2::LoggingOptions* temp = logging_;
  logging_ = NULL;
  return temp;
}
inline ::google::genomics::v1alpha2::LoggingOptions* RunPipelineArgs::mutable_logging() {
  
  if (logging_ == NULL) {
    _slow_mutable_logging();
  }
  // @@protoc_insertion_point(field_mutable:google.genomics.v1alpha2.RunPipelineArgs.logging)
  return logging_;
}
inline void RunPipelineArgs::set_allocated_logging(::google::genomics::v1alpha2::LoggingOptions* logging) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete logging_;
  }
  if (logging) {
    ::google::protobuf::Arena* submessage_arena =
      ::google::protobuf::Arena::GetArena(logging);
    if (message_arena != submessage_arena) {
      logging = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, logging, submessage_arena);
    }
    
  } else {
    
  }
  logging_ = logging;
  // @@protoc_insertion_point(field_set_allocated:google.genomics.v1alpha2.RunPipelineArgs.logging)
}

// .google.protobuf.Duration keep_vm_alive_on_failure_duration = 8;
inline bool RunPipelineArgs::has_keep_vm_alive_on_failure_duration() const {
  return this != internal_default_instance() && keep_vm_alive_on_failure_duration_ != NULL;
}
inline const ::google::protobuf::Duration& RunPipelineArgs::keep_vm_alive_on_failure_duration() const {
  const ::google::protobuf::Duration* p = keep_vm_alive_on_failure_duration_;
  // @@protoc_insertion_point(field_get:google.genomics.v1alpha2.RunPipelineArgs.keep_vm_alive_on_failure_duration)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::Duration*>(
      &::google::protobuf::_Duration_default_instance_);
}
inline ::google::protobuf::Duration* RunPipelineArgs::release_keep_vm_alive_on_failure_duration() {
  // @@protoc_insertion_point(field_release:google.genomics.v1alpha2.RunPipelineArgs.keep_vm_alive_on_failure_duration)
  
  ::google::protobuf::Duration* temp = keep_vm_alive_on_failure_duration_;
  if (GetArenaNoVirtual() != NULL) {
    temp = ::google::protobuf::internal::DuplicateIfNonNull(temp, NULL);
  }
  keep_vm_alive_on_failure_duration_ = NULL;
  return temp;
}
inline ::google::protobuf::Duration* RunPipelineArgs::unsafe_arena_release_keep_vm_alive_on_failure_duration() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.genomics.v1alpha2.RunPipelineArgs.keep_vm_alive_on_failure_duration)
  
  ::google::protobuf::Duration* temp = keep_vm_alive_on_failure_duration_;
  keep_vm_alive_on_failure_duration_ = NULL;
  return temp;
}
inline ::google::protobuf::Duration* RunPipelineArgs::mutable_keep_vm_alive_on_failure_duration() {
  
  if (keep_vm_alive_on_failure_duration_ == NULL) {
    _slow_mutable_keep_vm_alive_on_failure_duration();
  }
  // @@protoc_insertion_point(field_mutable:google.genomics.v1alpha2.RunPipelineArgs.keep_vm_alive_on_failure_duration)
  return keep_vm_alive_on_failure_duration_;
}
inline void RunPipelineArgs::set_allocated_keep_vm_alive_on_failure_duration(::google::protobuf::Duration* keep_vm_alive_on_failure_duration) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(keep_vm_alive_on_failure_duration_);
  }
  if (keep_vm_alive_on_failure_duration) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast< ::google::protobuf::MessageLite*>(keep_vm_alive_on_failure_duration)->GetArena();
    if (message_arena != submessage_arena) {
      keep_vm_alive_on_failure_duration = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, keep_vm_alive_on_failure_duration, submessage_arena);
    }
    
  } else {
    
  }
  keep_vm_alive_on_failure_duration_ = keep_vm_alive_on_failure_duration;
  // @@protoc_insertion_point(field_set_allocated:google.genomics.v1alpha2.RunPipelineArgs.keep_vm_alive_on_failure_duration)
}

// map<string, string> labels = 9;
inline int RunPipelineArgs::labels_size() const {
  return labels_.size();
}
inline void RunPipelineArgs::clear_labels() {
  labels_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::std::string >&
RunPipelineArgs::labels() const {
  // @@protoc_insertion_point(field_map:google.genomics.v1alpha2.RunPipelineArgs.labels)
  return labels_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::std::string >*
RunPipelineArgs::mutable_labels() {
  // @@protoc_insertion_point(field_mutable_map:google.genomics.v1alpha2.RunPipelineArgs.labels)
  return labels_.MutableMap();
}

// -------------------------------------------------------------------

// RunPipelineRequest

// string pipeline_id = 1;
inline bool RunPipelineRequest::has_pipeline_id() const {
  return pipeline_case() == kPipelineId;
}
inline void RunPipelineRequest::set_has_pipeline_id() {
  _oneof_case_[0] = kPipelineId;
}
inline void RunPipelineRequest::clear_pipeline_id() {
  if (has_pipeline_id()) {
    pipeline_.pipeline_id_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        GetArenaNoVirtual());
    clear_has_pipeline();
  }
}
inline const ::std::string& RunPipelineRequest::pipeline_id() const {
  // @@protoc_insertion_point(field_get:google.genomics.v1alpha2.RunPipelineRequest.pipeline_id)
  if (has_pipeline_id()) {
    return pipeline_.pipeline_id_.Get();
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
inline void RunPipelineRequest::set_pipeline_id(const ::std::string& value) {
  if (!has_pipeline_id()) {
    clear_pipeline();
    set_has_pipeline_id();
    pipeline_.pipeline_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  pipeline_.pipeline_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.genomics.v1alpha2.RunPipelineRequest.pipeline_id)
}
#if LANG_CXX11
inline void RunPipelineRequest::set_pipeline_id(::std::string&& value) {
  // @@protoc_insertion_point(field_set:google.genomics.v1alpha2.RunPipelineRequest.pipeline_id)
  if (!has_pipeline_id()) {
    clear_pipeline();
    set_has_pipeline_id();
    pipeline_.pipeline_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  pipeline_.pipeline_id_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:google.genomics.v1alpha2.RunPipelineRequest.pipeline_id)
}
#endif
inline void RunPipelineRequest::set_pipeline_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  if (!has_pipeline_id()) {
    clear_pipeline();
    set_has_pipeline_id();
    pipeline_.pipeline_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  pipeline_.pipeline_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.genomics.v1alpha2.RunPipelineRequest.pipeline_id)
}
inline void RunPipelineRequest::set_pipeline_id(const char* value,
                             size_t size) {
  if (!has_pipeline_id()) {
    clear_pipeline();
    set_has_pipeline_id();
    pipeline_.pipeline_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  pipeline_.pipeline_id_.Set(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size),
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.genomics.v1alpha2.RunPipelineRequest.pipeline_id)
}
inline ::std::string* RunPipelineRequest::mutable_pipeline_id() {
  if (!has_pipeline_id()) {
    clear_pipeline();
    set_has_pipeline_id();
    pipeline_.pipeline_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  return pipeline_.pipeline_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_mutable:google.genomics.v1alpha2.RunPipelineRequest.pipeline_id)
}
inline ::std::string* RunPipelineRequest::release_pipeline_id() {
  // @@protoc_insertion_point(field_release:google.genomics.v1alpha2.RunPipelineRequest.pipeline_id)
  if (has_pipeline_id()) {
    clear_has_pipeline();
    return pipeline_.pipeline_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        GetArenaNoVirtual());
  } else {
    return NULL;
  }
}
inline void RunPipelineRequest::set_allocated_pipeline_id(::std::string* pipeline_id) {
  if (!has_pipeline_id()) {
    pipeline_.pipeline_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_pipeline();
  if (pipeline_id != NULL) {
    set_has_pipeline_id();
    pipeline_.pipeline_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pipeline_id,
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_set_allocated:google.genomics.v1alpha2.RunPipelineRequest.pipeline_id)
}
inline ::std::string* RunPipelineRequest::unsafe_arena_release_pipeline_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.genomics.v1alpha2.RunPipelineRequest.pipeline_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (has_pipeline_id()) {
    clear_has_pipeline();
    return pipeline_.pipeline_id_.UnsafeArenaRelease(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  } else {
    return NULL;
  }
}
inline void RunPipelineRequest::unsafe_arena_set_allocated_pipeline_id(::std::string* pipeline_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (!has_pipeline_id()) {
    pipeline_.pipeline_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_pipeline();
  if (pipeline_id) {
    set_has_pipeline_id();
    pipeline_.pipeline_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pipeline_id, GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.genomics.v1alpha2.RunPipelineRequest.pipeline_id)
}

// .google.genomics.v1alpha2.Pipeline ephemeral_pipeline = 2;
inline bool RunPipelineRequest::has_ephemeral_pipeline() const {
  return pipeline_case() == kEphemeralPipeline;
}
inline void RunPipelineRequest::set_has_ephemeral_pipeline() {
  _oneof_case_[0] = kEphemeralPipeline;
}
inline void RunPipelineRequest::clear_ephemeral_pipeline() {
  if (has_ephemeral_pipeline()) {
    if (GetArenaNoVirtual() == NULL) {
      delete pipeline_.ephemeral_pipeline_;
    }
    clear_has_pipeline();
  }
}
inline ::google::genomics::v1alpha2::Pipeline* RunPipelineRequest::release_ephemeral_pipeline() {
  // @@protoc_insertion_point(field_release:google.genomics.v1alpha2.RunPipelineRequest.ephemeral_pipeline)
  if (has_ephemeral_pipeline()) {
    clear_has_pipeline();
      ::google::genomics::v1alpha2::Pipeline* temp = pipeline_.ephemeral_pipeline_;
    if (GetArenaNoVirtual() != NULL) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp, NULL);
    }
    pipeline_.ephemeral_pipeline_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::genomics::v1alpha2::Pipeline& RunPipelineRequest::ephemeral_pipeline() const {
  // @@protoc_insertion_point(field_get:google.genomics.v1alpha2.RunPipelineRequest.ephemeral_pipeline)
  return has_ephemeral_pipeline()
      ? *pipeline_.ephemeral_pipeline_
      : *reinterpret_cast< ::google::genomics::v1alpha2::Pipeline*>(&::google::genomics::v1alpha2::_Pipeline_default_instance_);
}
inline ::google::genomics::v1alpha2::Pipeline* RunPipelineRequest::unsafe_arena_release_ephemeral_pipeline() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.genomics.v1alpha2.RunPipelineRequest.ephemeral_pipeline)
  if (has_ephemeral_pipeline()) {
    clear_has_pipeline();
    ::google::genomics::v1alpha2::Pipeline* temp = pipeline_.ephemeral_pipeline_;
    pipeline_.ephemeral_pipeline_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void RunPipelineRequest::unsafe_arena_set_allocated_ephemeral_pipeline(::google::genomics::v1alpha2::Pipeline* ephemeral_pipeline) {
  clear_pipeline();
  if (ephemeral_pipeline) {
    set_has_ephemeral_pipeline();
    pipeline_.ephemeral_pipeline_ = ephemeral_pipeline;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.genomics.v1alpha2.RunPipelineRequest.ephemeral_pipeline)
}
inline ::google::genomics::v1alpha2::Pipeline* RunPipelineRequest::mutable_ephemeral_pipeline() {
  if (!has_ephemeral_pipeline()) {
    clear_pipeline();
    set_has_ephemeral_pipeline();
    pipeline_.ephemeral_pipeline_ = 
      ::google::protobuf::Arena::CreateMessage< ::google::genomics::v1alpha2::Pipeline >(
      GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:google.genomics.v1alpha2.RunPipelineRequest.ephemeral_pipeline)
  return pipeline_.ephemeral_pipeline_;
}

// .google.genomics.v1alpha2.RunPipelineArgs pipeline_args = 3;
inline bool RunPipelineRequest::has_pipeline_args() const {
  return this != internal_default_instance() && pipeline_args_ != NULL;
}
inline void RunPipelineRequest::clear_pipeline_args() {
  if (GetArenaNoVirtual() == NULL && pipeline_args_ != NULL) {
    delete pipeline_args_;
  }
  pipeline_args_ = NULL;
}
inline const ::google::genomics::v1alpha2::RunPipelineArgs& RunPipelineRequest::pipeline_args() const {
  const ::google::genomics::v1alpha2::RunPipelineArgs* p = pipeline_args_;
  // @@protoc_insertion_point(field_get:google.genomics.v1alpha2.RunPipelineRequest.pipeline_args)
  return p != NULL ? *p : *reinterpret_cast<const ::google::genomics::v1alpha2::RunPipelineArgs*>(
      &::google::genomics::v1alpha2::_RunPipelineArgs_default_instance_);
}
inline ::google::genomics::v1alpha2::RunPipelineArgs* RunPipelineRequest::release_pipeline_args() {
  // @@protoc_insertion_point(field_release:google.genomics.v1alpha2.RunPipelineRequest.pipeline_args)
  
  ::google::genomics::v1alpha2::RunPipelineArgs* temp = pipeline_args_;
  if (GetArenaNoVirtual() != NULL) {
    temp = ::google::protobuf::internal::DuplicateIfNonNull(temp, NULL);
  }
  pipeline_args_ = NULL;
  return temp;
}
inline ::google::genomics::v1alpha2::RunPipelineArgs* RunPipelineRequest::unsafe_arena_release_pipeline_args() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.genomics.v1alpha2.RunPipelineRequest.pipeline_args)
  
  ::google::genomics::v1alpha2::RunPipelineArgs* temp = pipeline_args_;
  pipeline_args_ = NULL;
  return temp;
}
inline ::google::genomics::v1alpha2::RunPipelineArgs* RunPipelineRequest::mutable_pipeline_args() {
  
  if (pipeline_args_ == NULL) {
    _slow_mutable_pipeline_args();
  }
  // @@protoc_insertion_point(field_mutable:google.genomics.v1alpha2.RunPipelineRequest.pipeline_args)
  return pipeline_args_;
}
inline void RunPipelineRequest::set_allocated_pipeline_args(::google::genomics::v1alpha2::RunPipelineArgs* pipeline_args) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete pipeline_args_;
  }
  if (pipeline_args) {
    ::google::protobuf::Arena* submessage_arena =
      ::google::protobuf::Arena::GetArena(pipeline_args);
    if (message_arena != submessage_arena) {
      pipeline_args = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, pipeline_args, submessage_arena);
    }
    
  } else {
    
  }
  pipeline_args_ = pipeline_args;
  // @@protoc_insertion_point(field_set_allocated:google.genomics.v1alpha2.RunPipelineRequest.pipeline_args)
}

inline bool RunPipelineRequest::has_pipeline() const {
  return pipeline_case() != PIPELINE_NOT_SET;
}
inline void RunPipelineRequest::clear_has_pipeline() {
  _oneof_case_[0] = PIPELINE_NOT_SET;
}
inline RunPipelineRequest::PipelineCase RunPipelineRequest::pipeline_case() const {
  return RunPipelineRequest::PipelineCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// GetPipelineRequest

// string pipeline_id = 1;
inline void GetPipelineRequest::clear_pipeline_id() {
  pipeline_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& GetPipelineRequest::pipeline_id() const {
  // @@protoc_insertion_point(field_get:google.genomics.v1alpha2.GetPipelineRequest.pipeline_id)
  return pipeline_id_.Get();
}
inline void GetPipelineRequest::set_pipeline_id(const ::std::string& value) {
  
  pipeline_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.genomics.v1alpha2.GetPipelineRequest.pipeline_id)
}
#if LANG_CXX11
inline void GetPipelineRequest::set_pipeline_id(::std::string&& value) {
  
  pipeline_id_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:google.genomics.v1alpha2.GetPipelineRequest.pipeline_id)
}
#endif
inline void GetPipelineRequest::set_pipeline_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  pipeline_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.genomics.v1alpha2.GetPipelineRequest.pipeline_id)
}
inline void GetPipelineRequest::set_pipeline_id(const char* value,
    size_t size) {
  
  pipeline_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.genomics.v1alpha2.GetPipelineRequest.pipeline_id)
}
inline ::std::string* GetPipelineRequest::mutable_pipeline_id() {
  
  // @@protoc_insertion_point(field_mutable:google.genomics.v1alpha2.GetPipelineRequest.pipeline_id)
  return pipeline_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* GetPipelineRequest::release_pipeline_id() {
  // @@protoc_insertion_point(field_release:google.genomics.v1alpha2.GetPipelineRequest.pipeline_id)
  
  return pipeline_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void GetPipelineRequest::set_allocated_pipeline_id(::std::string* pipeline_id) {
  if (pipeline_id != NULL) {
    
  } else {
    
  }
  pipeline_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pipeline_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.genomics.v1alpha2.GetPipelineRequest.pipeline_id)
}
inline ::std::string* GetPipelineRequest::unsafe_arena_release_pipeline_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.genomics.v1alpha2.GetPipelineRequest.pipeline_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return pipeline_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void GetPipelineRequest::unsafe_arena_set_allocated_pipeline_id(
    ::std::string* pipeline_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (pipeline_id != NULL) {
    
  } else {
    
  }
  pipeline_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      pipeline_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.genomics.v1alpha2.GetPipelineRequest.pipeline_id)
}

// -------------------------------------------------------------------

// ListPipelinesRequest

// string project_id = 1;
inline void ListPipelinesRequest::clear_project_id() {
  project_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& ListPipelinesRequest::project_id() const {
  // @@protoc_insertion_point(field_get:google.genomics.v1alpha2.ListPipelinesRequest.project_id)
  return project_id_.Get();
}
inline void ListPipelinesRequest::set_project_id(const ::std::string& value) {
  
  project_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.genomics.v1alpha2.ListPipelinesRequest.project_id)
}
#if LANG_CXX11
inline void ListPipelinesRequest::set_project_id(::std::string&& value) {
  
  project_id_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:google.genomics.v1alpha2.ListPipelinesRequest.project_id)
}
#endif
inline void ListPipelinesRequest::set_project_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  project_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.genomics.v1alpha2.ListPipelinesRequest.project_id)
}
inline void ListPipelinesRequest::set_project_id(const char* value,
    size_t size) {
  
  project_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.genomics.v1alpha2.ListPipelinesRequest.project_id)
}
inline ::std::string* ListPipelinesRequest::mutable_project_id() {
  
  // @@protoc_insertion_point(field_mutable:google.genomics.v1alpha2.ListPipelinesRequest.project_id)
  return project_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ListPipelinesRequest::release_project_id() {
  // @@protoc_insertion_point(field_release:google.genomics.v1alpha2.ListPipelinesRequest.project_id)
  
  return project_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ListPipelinesRequest::set_allocated_project_id(::std::string* project_id) {
  if (project_id != NULL) {
    
  } else {
    
  }
  project_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), project_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.genomics.v1alpha2.ListPipelinesRequest.project_id)
}
inline ::std::string* ListPipelinesRequest::unsafe_arena_release_project_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.genomics.v1alpha2.ListPipelinesRequest.project_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return project_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ListPipelinesRequest::unsafe_arena_set_allocated_project_id(
    ::std::string* project_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (project_id != NULL) {
    
  } else {
    
  }
  project_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      project_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.genomics.v1alpha2.ListPipelinesRequest.project_id)
}

// string name_prefix = 2;
inline void ListPipelinesRequest::clear_name_prefix() {
  name_prefix_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& ListPipelinesRequest::name_prefix() const {
  // @@protoc_insertion_point(field_get:google.genomics.v1alpha2.ListPipelinesRequest.name_prefix)
  return name_prefix_.Get();
}
inline void ListPipelinesRequest::set_name_prefix(const ::std::string& value) {
  
  name_prefix_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.genomics.v1alpha2.ListPipelinesRequest.name_prefix)
}
#if LANG_CXX11
inline void ListPipelinesRequest::set_name_prefix(::std::string&& value) {
  
  name_prefix_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:google.genomics.v1alpha2.ListPipelinesRequest.name_prefix)
}
#endif
inline void ListPipelinesRequest::set_name_prefix(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_prefix_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.genomics.v1alpha2.ListPipelinesRequest.name_prefix)
}
inline void ListPipelinesRequest::set_name_prefix(const char* value,
    size_t size) {
  
  name_prefix_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.genomics.v1alpha2.ListPipelinesRequest.name_prefix)
}
inline ::std::string* ListPipelinesRequest::mutable_name_prefix() {
  
  // @@protoc_insertion_point(field_mutable:google.genomics.v1alpha2.ListPipelinesRequest.name_prefix)
  return name_prefix_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ListPipelinesRequest::release_name_prefix() {
  // @@protoc_insertion_point(field_release:google.genomics.v1alpha2.ListPipelinesRequest.name_prefix)
  
  return name_prefix_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ListPipelinesRequest::set_allocated_name_prefix(::std::string* name_prefix) {
  if (name_prefix != NULL) {
    
  } else {
    
  }
  name_prefix_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name_prefix,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.genomics.v1alpha2.ListPipelinesRequest.name_prefix)
}
inline ::std::string* ListPipelinesRequest::unsafe_arena_release_name_prefix() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.genomics.v1alpha2.ListPipelinesRequest.name_prefix)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return name_prefix_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ListPipelinesRequest::unsafe_arena_set_allocated_name_prefix(
    ::std::string* name_prefix) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (name_prefix != NULL) {
    
  } else {
    
  }
  name_prefix_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      name_prefix, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.genomics.v1alpha2.ListPipelinesRequest.name_prefix)
}

// int32 page_size = 3;
inline void ListPipelinesRequest::clear_page_size() {
  page_size_ = 0;
}
inline ::google::protobuf::int32 ListPipelinesRequest::page_size() const {
  // @@protoc_insertion_point(field_get:google.genomics.v1alpha2.ListPipelinesRequest.page_size)
  return page_size_;
}
inline void ListPipelinesRequest::set_page_size(::google::protobuf::int32 value) {
  
  page_size_ = value;
  // @@protoc_insertion_point(field_set:google.genomics.v1alpha2.ListPipelinesRequest.page_size)
}

// string page_token = 4;
inline void ListPipelinesRequest::clear_page_token() {
  page_token_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& ListPipelinesRequest::page_token() const {
  // @@protoc_insertion_point(field_get:google.genomics.v1alpha2.ListPipelinesRequest.page_token)
  return page_token_.Get();
}
inline void ListPipelinesRequest::set_page_token(const ::std::string& value) {
  
  page_token_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.genomics.v1alpha2.ListPipelinesRequest.page_token)
}
#if LANG_CXX11
inline void ListPipelinesRequest::set_page_token(::std::string&& value) {
  
  page_token_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:google.genomics.v1alpha2.ListPipelinesRequest.page_token)
}
#endif
inline void ListPipelinesRequest::set_page_token(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  page_token_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.genomics.v1alpha2.ListPipelinesRequest.page_token)
}
inline void ListPipelinesRequest::set_page_token(const char* value,
    size_t size) {
  
  page_token_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.genomics.v1alpha2.ListPipelinesRequest.page_token)
}
inline ::std::string* ListPipelinesRequest::mutable_page_token() {
  
  // @@protoc_insertion_point(field_mutable:google.genomics.v1alpha2.ListPipelinesRequest.page_token)
  return page_token_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ListPipelinesRequest::release_page_token() {
  // @@protoc_insertion_point(field_release:google.genomics.v1alpha2.ListPipelinesRequest.page_token)
  
  return page_token_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ListPipelinesRequest::set_allocated_page_token(::std::string* page_token) {
  if (page_token != NULL) {
    
  } else {
    
  }
  page_token_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), page_token,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.genomics.v1alpha2.ListPipelinesRequest.page_token)
}
inline ::std::string* ListPipelinesRequest::unsafe_arena_release_page_token() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.genomics.v1alpha2.ListPipelinesRequest.page_token)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return page_token_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ListPipelinesRequest::unsafe_arena_set_allocated_page_token(
    ::std::string* page_token) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (page_token != NULL) {
    
  } else {
    
  }
  page_token_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      page_token, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.genomics.v1alpha2.ListPipelinesRequest.page_token)
}

// -------------------------------------------------------------------

// ListPipelinesResponse

// repeated .google.genomics.v1alpha2.Pipeline pipelines = 1;
inline int ListPipelinesResponse::pipelines_size() const {
  return pipelines_.size();
}
inline void ListPipelinesResponse::clear_pipelines() {
  pipelines_.Clear();
}
inline const ::google::genomics::v1alpha2::Pipeline& ListPipelinesResponse::pipelines(int index) const {
  // @@protoc_insertion_point(field_get:google.genomics.v1alpha2.ListPipelinesResponse.pipelines)
  return pipelines_.Get(index);
}
inline ::google::genomics::v1alpha2::Pipeline* ListPipelinesResponse::mutable_pipelines(int index) {
  // @@protoc_insertion_point(field_mutable:google.genomics.v1alpha2.ListPipelinesResponse.pipelines)
  return pipelines_.Mutable(index);
}
inline ::google::genomics::v1alpha2::Pipeline* ListPipelinesResponse::add_pipelines() {
  // @@protoc_insertion_point(field_add:google.genomics.v1alpha2.ListPipelinesResponse.pipelines)
  return pipelines_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::google::genomics::v1alpha2::Pipeline >*
ListPipelinesResponse::mutable_pipelines() {
  // @@protoc_insertion_point(field_mutable_list:google.genomics.v1alpha2.ListPipelinesResponse.pipelines)
  return &pipelines_;
}
inline const ::google::protobuf::RepeatedPtrField< ::google::genomics::v1alpha2::Pipeline >&
ListPipelinesResponse::pipelines() const {
  // @@protoc_insertion_point(field_list:google.genomics.v1alpha2.ListPipelinesResponse.pipelines)
  return pipelines_;
}

// string next_page_token = 2;
inline void ListPipelinesResponse::clear_next_page_token() {
  next_page_token_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& ListPipelinesResponse::next_page_token() const {
  // @@protoc_insertion_point(field_get:google.genomics.v1alpha2.ListPipelinesResponse.next_page_token)
  return next_page_token_.Get();
}
inline void ListPipelinesResponse::set_next_page_token(const ::std::string& value) {
  
  next_page_token_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.genomics.v1alpha2.ListPipelinesResponse.next_page_token)
}
#if LANG_CXX11
inline void ListPipelinesResponse::set_next_page_token(::std::string&& value) {
  
  next_page_token_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:google.genomics.v1alpha2.ListPipelinesResponse.next_page_token)
}
#endif
inline void ListPipelinesResponse::set_next_page_token(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  next_page_token_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.genomics.v1alpha2.ListPipelinesResponse.next_page_token)
}
inline void ListPipelinesResponse::set_next_page_token(const char* value,
    size_t size) {
  
  next_page_token_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.genomics.v1alpha2.ListPipelinesResponse.next_page_token)
}
inline ::std::string* ListPipelinesResponse::mutable_next_page_token() {
  
  // @@protoc_insertion_point(field_mutable:google.genomics.v1alpha2.ListPipelinesResponse.next_page_token)
  return next_page_token_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ListPipelinesResponse::release_next_page_token() {
  // @@protoc_insertion_point(field_release:google.genomics.v1alpha2.ListPipelinesResponse.next_page_token)
  
  return next_page_token_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ListPipelinesResponse::set_allocated_next_page_token(::std::string* next_page_token) {
  if (next_page_token != NULL) {
    
  } else {
    
  }
  next_page_token_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), next_page_token,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.genomics.v1alpha2.ListPipelinesResponse.next_page_token)
}
inline ::std::string* ListPipelinesResponse::unsafe_arena_release_next_page_token() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.genomics.v1alpha2.ListPipelinesResponse.next_page_token)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return next_page_token_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ListPipelinesResponse::unsafe_arena_set_allocated_next_page_token(
    ::std::string* next_page_token) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (next_page_token != NULL) {
    
  } else {
    
  }
  next_page_token_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      next_page_token, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.genomics.v1alpha2.ListPipelinesResponse.next_page_token)
}

// -------------------------------------------------------------------

// DeletePipelineRequest

// string pipeline_id = 1;
inline void DeletePipelineRequest::clear_pipeline_id() {
  pipeline_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& DeletePipelineRequest::pipeline_id() const {
  // @@protoc_insertion_point(field_get:google.genomics.v1alpha2.DeletePipelineRequest.pipeline_id)
  return pipeline_id_.Get();
}
inline void DeletePipelineRequest::set_pipeline_id(const ::std::string& value) {
  
  pipeline_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.genomics.v1alpha2.DeletePipelineRequest.pipeline_id)
}
#if LANG_CXX11
inline void DeletePipelineRequest::set_pipeline_id(::std::string&& value) {
  
  pipeline_id_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:google.genomics.v1alpha2.DeletePipelineRequest.pipeline_id)
}
#endif
inline void DeletePipelineRequest::set_pipeline_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  pipeline_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.genomics.v1alpha2.DeletePipelineRequest.pipeline_id)
}
inline void DeletePipelineRequest::set_pipeline_id(const char* value,
    size_t size) {
  
  pipeline_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.genomics.v1alpha2.DeletePipelineRequest.pipeline_id)
}
inline ::std::string* DeletePipelineRequest::mutable_pipeline_id() {
  
  // @@protoc_insertion_point(field_mutable:google.genomics.v1alpha2.DeletePipelineRequest.pipeline_id)
  return pipeline_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* DeletePipelineRequest::release_pipeline_id() {
  // @@protoc_insertion_point(field_release:google.genomics.v1alpha2.DeletePipelineRequest.pipeline_id)
  
  return pipeline_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void DeletePipelineRequest::set_allocated_pipeline_id(::std::string* pipeline_id) {
  if (pipeline_id != NULL) {
    
  } else {
    
  }
  pipeline_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pipeline_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.genomics.v1alpha2.DeletePipelineRequest.pipeline_id)
}
inline ::std::string* DeletePipelineRequest::unsafe_arena_release_pipeline_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.genomics.v1alpha2.DeletePipelineRequest.pipeline_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return pipeline_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void DeletePipelineRequest::unsafe_arena_set_allocated_pipeline_id(
    ::std::string* pipeline_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (pipeline_id != NULL) {
    
  } else {
    
  }
  pipeline_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      pipeline_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.genomics.v1alpha2.DeletePipelineRequest.pipeline_id)
}

// -------------------------------------------------------------------

// GetControllerConfigRequest

// string operation_id = 1;
inline void GetControllerConfigRequest::clear_operation_id() {
  operation_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& GetControllerConfigRequest::operation_id() const {
  // @@protoc_insertion_point(field_get:google.genomics.v1alpha2.GetControllerConfigRequest.operation_id)
  return operation_id_.Get();
}
inline void GetControllerConfigRequest::set_operation_id(const ::std::string& value) {
  
  operation_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.genomics.v1alpha2.GetControllerConfigRequest.operation_id)
}
#if LANG_CXX11
inline void GetControllerConfigRequest::set_operation_id(::std::string&& value) {
  
  operation_id_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:google.genomics.v1alpha2.GetControllerConfigRequest.operation_id)
}
#endif
inline void GetControllerConfigRequest::set_operation_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  operation_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.genomics.v1alpha2.GetControllerConfigRequest.operation_id)
}
inline void GetControllerConfigRequest::set_operation_id(const char* value,
    size_t size) {
  
  operation_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.genomics.v1alpha2.GetControllerConfigRequest.operation_id)
}
inline ::std::string* GetControllerConfigRequest::mutable_operation_id() {
  
  // @@protoc_insertion_point(field_mutable:google.genomics.v1alpha2.GetControllerConfigRequest.operation_id)
  return operation_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* GetControllerConfigRequest::release_operation_id() {
  // @@protoc_insertion_point(field_release:google.genomics.v1alpha2.GetControllerConfigRequest.operation_id)
  
  return operation_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void GetControllerConfigRequest::set_allocated_operation_id(::std::string* operation_id) {
  if (operation_id != NULL) {
    
  } else {
    
  }
  operation_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), operation_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.genomics.v1alpha2.GetControllerConfigRequest.operation_id)
}
inline ::std::string* GetControllerConfigRequest::unsafe_arena_release_operation_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.genomics.v1alpha2.GetControllerConfigRequest.operation_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return operation_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void GetControllerConfigRequest::unsafe_arena_set_allocated_operation_id(
    ::std::string* operation_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (operation_id != NULL) {
    
  } else {
    
  }
  operation_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      operation_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.genomics.v1alpha2.GetControllerConfigRequest.operation_id)
}

// uint64 validation_token = 2;
inline void GetControllerConfigRequest::clear_validation_token() {
  validation_token_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 GetControllerConfigRequest::validation_token() const {
  // @@protoc_insertion_point(field_get:google.genomics.v1alpha2.GetControllerConfigRequest.validation_token)
  return validation_token_;
}
inline void GetControllerConfigRequest::set_validation_token(::google::protobuf::uint64 value) {
  
  validation_token_ = value;
  // @@protoc_insertion_point(field_set:google.genomics.v1alpha2.GetControllerConfigRequest.validation_token)
}

// -------------------------------------------------------------------

// ControllerConfig_RepeatedString

// repeated string values = 1;
inline int ControllerConfig_RepeatedString::values_size() const {
  return values_.size();
}
inline void ControllerConfig_RepeatedString::clear_values() {
  values_.Clear();
}
inline const ::std::string& ControllerConfig_RepeatedString::values(int index) const {
  // @@protoc_insertion_point(field_get:google.genomics.v1alpha2.ControllerConfig.RepeatedString.values)
  return values_.Get(index);
}
inline ::std::string* ControllerConfig_RepeatedString::mutable_values(int index) {
  // @@protoc_insertion_point(field_mutable:google.genomics.v1alpha2.ControllerConfig.RepeatedString.values)
  return values_.Mutable(index);
}
inline void ControllerConfig_RepeatedString::set_values(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:google.genomics.v1alpha2.ControllerConfig.RepeatedString.values)
  values_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void ControllerConfig_RepeatedString::set_values(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:google.genomics.v1alpha2.ControllerConfig.RepeatedString.values)
  values_.Mutable(index)->assign(std::move(value));
}
#endif
inline void ControllerConfig_RepeatedString::set_values(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  values_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:google.genomics.v1alpha2.ControllerConfig.RepeatedString.values)
}
inline void ControllerConfig_RepeatedString::set_values(int index, const char* value, size_t size) {
  values_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:google.genomics.v1alpha2.ControllerConfig.RepeatedString.values)
}
inline ::std::string* ControllerConfig_RepeatedString::add_values() {
  // @@protoc_insertion_point(field_add_mutable:google.genomics.v1alpha2.ControllerConfig.RepeatedString.values)
  return values_.Add();
}
inline void ControllerConfig_RepeatedString::add_values(const ::std::string& value) {
  values_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:google.genomics.v1alpha2.ControllerConfig.RepeatedString.values)
}
#if LANG_CXX11
inline void ControllerConfig_RepeatedString::add_values(::std::string&& value) {
  values_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:google.genomics.v1alpha2.ControllerConfig.RepeatedString.values)
}
#endif
inline void ControllerConfig_RepeatedString::add_values(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  values_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:google.genomics.v1alpha2.ControllerConfig.RepeatedString.values)
}
inline void ControllerConfig_RepeatedString::add_values(const char* value, size_t size) {
  values_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:google.genomics.v1alpha2.ControllerConfig.RepeatedString.values)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
ControllerConfig_RepeatedString::values() const {
  // @@protoc_insertion_point(field_list:google.genomics.v1alpha2.ControllerConfig.RepeatedString.values)
  return values_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
ControllerConfig_RepeatedString::mutable_values() {
  // @@protoc_insertion_point(field_mutable_list:google.genomics.v1alpha2.ControllerConfig.RepeatedString.values)
  return &values_;
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// ControllerConfig

// string image = 1;
inline void ControllerConfig::clear_image() {
  image_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& ControllerConfig::image() const {
  // @@protoc_insertion_point(field_get:google.genomics.v1alpha2.ControllerConfig.image)
  return image_.Get();
}
inline void ControllerConfig::set_image(const ::std::string& value) {
  
  image_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.genomics.v1alpha2.ControllerConfig.image)
}
#if LANG_CXX11
inline void ControllerConfig::set_image(::std::string&& value) {
  
  image_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:google.genomics.v1alpha2.ControllerConfig.image)
}
#endif
inline void ControllerConfig::set_image(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  image_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.genomics.v1alpha2.ControllerConfig.image)
}
inline void ControllerConfig::set_image(const char* value,
    size_t size) {
  
  image_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.genomics.v1alpha2.ControllerConfig.image)
}
inline ::std::string* ControllerConfig::mutable_image() {
  
  // @@protoc_insertion_point(field_mutable:google.genomics.v1alpha2.ControllerConfig.image)
  return image_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ControllerConfig::release_image() {
  // @@protoc_insertion_point(field_release:google.genomics.v1alpha2.ControllerConfig.image)
  
  return image_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ControllerConfig::set_allocated_image(::std::string* image) {
  if (image != NULL) {
    
  } else {
    
  }
  image_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), image,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.genomics.v1alpha2.ControllerConfig.image)
}
inline ::std::string* ControllerConfig::unsafe_arena_release_image() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.genomics.v1alpha2.ControllerConfig.image)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return image_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ControllerConfig::unsafe_arena_set_allocated_image(
    ::std::string* image) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (image != NULL) {
    
  } else {
    
  }
  image_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      image, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.genomics.v1alpha2.ControllerConfig.image)
}

// string cmd = 2;
inline void ControllerConfig::clear_cmd() {
  cmd_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& ControllerConfig::cmd() const {
  // @@protoc_insertion_point(field_get:google.genomics.v1alpha2.ControllerConfig.cmd)
  return cmd_.Get();
}
inline void ControllerConfig::set_cmd(const ::std::string& value) {
  
  cmd_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.genomics.v1alpha2.ControllerConfig.cmd)
}
#if LANG_CXX11
inline void ControllerConfig::set_cmd(::std::string&& value) {
  
  cmd_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:google.genomics.v1alpha2.ControllerConfig.cmd)
}
#endif
inline void ControllerConfig::set_cmd(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  cmd_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.genomics.v1alpha2.ControllerConfig.cmd)
}
inline void ControllerConfig::set_cmd(const char* value,
    size_t size) {
  
  cmd_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.genomics.v1alpha2.ControllerConfig.cmd)
}
inline ::std::string* ControllerConfig::mutable_cmd() {
  
  // @@protoc_insertion_point(field_mutable:google.genomics.v1alpha2.ControllerConfig.cmd)
  return cmd_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ControllerConfig::release_cmd() {
  // @@protoc_insertion_point(field_release:google.genomics.v1alpha2.ControllerConfig.cmd)
  
  return cmd_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ControllerConfig::set_allocated_cmd(::std::string* cmd) {
  if (cmd != NULL) {
    
  } else {
    
  }
  cmd_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cmd,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.genomics.v1alpha2.ControllerConfig.cmd)
}
inline ::std::string* ControllerConfig::unsafe_arena_release_cmd() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.genomics.v1alpha2.ControllerConfig.cmd)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return cmd_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ControllerConfig::unsafe_arena_set_allocated_cmd(
    ::std::string* cmd) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (cmd != NULL) {
    
  } else {
    
  }
  cmd_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      cmd, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.genomics.v1alpha2.ControllerConfig.cmd)
}

// string gcs_log_path = 3;
inline void ControllerConfig::clear_gcs_log_path() {
  gcs_log_path_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& ControllerConfig::gcs_log_path() const {
  // @@protoc_insertion_point(field_get:google.genomics.v1alpha2.ControllerConfig.gcs_log_path)
  return gcs_log_path_.Get();
}
inline void ControllerConfig::set_gcs_log_path(const ::std::string& value) {
  
  gcs_log_path_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.genomics.v1alpha2.ControllerConfig.gcs_log_path)
}
#if LANG_CXX11
inline void ControllerConfig::set_gcs_log_path(::std::string&& value) {
  
  gcs_log_path_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:google.genomics.v1alpha2.ControllerConfig.gcs_log_path)
}
#endif
inline void ControllerConfig::set_gcs_log_path(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  gcs_log_path_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.genomics.v1alpha2.ControllerConfig.gcs_log_path)
}
inline void ControllerConfig::set_gcs_log_path(const char* value,
    size_t size) {
  
  gcs_log_path_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.genomics.v1alpha2.ControllerConfig.gcs_log_path)
}
inline ::std::string* ControllerConfig::mutable_gcs_log_path() {
  
  // @@protoc_insertion_point(field_mutable:google.genomics.v1alpha2.ControllerConfig.gcs_log_path)
  return gcs_log_path_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ControllerConfig::release_gcs_log_path() {
  // @@protoc_insertion_point(field_release:google.genomics.v1alpha2.ControllerConfig.gcs_log_path)
  
  return gcs_log_path_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ControllerConfig::set_allocated_gcs_log_path(::std::string* gcs_log_path) {
  if (gcs_log_path != NULL) {
    
  } else {
    
  }
  gcs_log_path_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), gcs_log_path,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.genomics.v1alpha2.ControllerConfig.gcs_log_path)
}
inline ::std::string* ControllerConfig::unsafe_arena_release_gcs_log_path() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.genomics.v1alpha2.ControllerConfig.gcs_log_path)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return gcs_log_path_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ControllerConfig::unsafe_arena_set_allocated_gcs_log_path(
    ::std::string* gcs_log_path) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (gcs_log_path != NULL) {
    
  } else {
    
  }
  gcs_log_path_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      gcs_log_path, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.genomics.v1alpha2.ControllerConfig.gcs_log_path)
}

// string machine_type = 4;
inline void ControllerConfig::clear_machine_type() {
  machine_type_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& ControllerConfig::machine_type() const {
  // @@protoc_insertion_point(field_get:google.genomics.v1alpha2.ControllerConfig.machine_type)
  return machine_type_.Get();
}
inline void ControllerConfig::set_machine_type(const ::std::string& value) {
  
  machine_type_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.genomics.v1alpha2.ControllerConfig.machine_type)
}
#if LANG_CXX11
inline void ControllerConfig::set_machine_type(::std::string&& value) {
  
  machine_type_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:google.genomics.v1alpha2.ControllerConfig.machine_type)
}
#endif
inline void ControllerConfig::set_machine_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  machine_type_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.genomics.v1alpha2.ControllerConfig.machine_type)
}
inline void ControllerConfig::set_machine_type(const char* value,
    size_t size) {
  
  machine_type_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.genomics.v1alpha2.ControllerConfig.machine_type)
}
inline ::std::string* ControllerConfig::mutable_machine_type() {
  
  // @@protoc_insertion_point(field_mutable:google.genomics.v1alpha2.ControllerConfig.machine_type)
  return machine_type_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ControllerConfig::release_machine_type() {
  // @@protoc_insertion_point(field_release:google.genomics.v1alpha2.ControllerConfig.machine_type)
  
  return machine_type_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ControllerConfig::set_allocated_machine_type(::std::string* machine_type) {
  if (machine_type != NULL) {
    
  } else {
    
  }
  machine_type_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), machine_type,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.genomics.v1alpha2.ControllerConfig.machine_type)
}
inline ::std::string* ControllerConfig::unsafe_arena_release_machine_type() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.genomics.v1alpha2.ControllerConfig.machine_type)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return machine_type_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ControllerConfig::unsafe_arena_set_allocated_machine_type(
    ::std::string* machine_type) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (machine_type != NULL) {
    
  } else {
    
  }
  machine_type_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      machine_type, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.genomics.v1alpha2.ControllerConfig.machine_type)
}

// map<string, string> vars = 5;
inline int ControllerConfig::vars_size() const {
  return vars_.size();
}
inline void ControllerConfig::clear_vars() {
  vars_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::std::string >&
ControllerConfig::vars() const {
  // @@protoc_insertion_point(field_map:google.genomics.v1alpha2.ControllerConfig.vars)
  return vars_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::std::string >*
ControllerConfig::mutable_vars() {
  // @@protoc_insertion_point(field_mutable_map:google.genomics.v1alpha2.ControllerConfig.vars)
  return vars_.MutableMap();
}

// map<string, string> disks = 6;
inline int ControllerConfig::disks_size() const {
  return disks_.size();
}
inline void ControllerConfig::clear_disks() {
  disks_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::std::string >&
ControllerConfig::disks() const {
  // @@protoc_insertion_point(field_map:google.genomics.v1alpha2.ControllerConfig.disks)
  return disks_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::std::string >*
ControllerConfig::mutable_disks() {
  // @@protoc_insertion_point(field_mutable_map:google.genomics.v1alpha2.ControllerConfig.disks)
  return disks_.MutableMap();
}

// map<string, .google.genomics.v1alpha2.ControllerConfig.RepeatedString> gcs_sources = 7;
inline int ControllerConfig::gcs_sources_size() const {
  return gcs_sources_.size();
}
inline void ControllerConfig::clear_gcs_sources() {
  gcs_sources_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::google::genomics::v1alpha2::ControllerConfig_RepeatedString >&
ControllerConfig::gcs_sources() const {
  // @@protoc_insertion_point(field_map:google.genomics.v1alpha2.ControllerConfig.gcs_sources)
  return gcs_sources_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::google::genomics::v1alpha2::ControllerConfig_RepeatedString >*
ControllerConfig::mutable_gcs_sources() {
  // @@protoc_insertion_point(field_mutable_map:google.genomics.v1alpha2.ControllerConfig.gcs_sources)
  return gcs_sources_.MutableMap();
}

// map<string, .google.genomics.v1alpha2.ControllerConfig.RepeatedString> gcs_sinks = 8;
inline int ControllerConfig::gcs_sinks_size() const {
  return gcs_sinks_.size();
}
inline void ControllerConfig::clear_gcs_sinks() {
  gcs_sinks_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::google::genomics::v1alpha2::ControllerConfig_RepeatedString >&
ControllerConfig::gcs_sinks() const {
  // @@protoc_insertion_point(field_map:google.genomics.v1alpha2.ControllerConfig.gcs_sinks)
  return gcs_sinks_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::google::genomics::v1alpha2::ControllerConfig_RepeatedString >*
ControllerConfig::mutable_gcs_sinks() {
  // @@protoc_insertion_point(field_mutable_map:google.genomics.v1alpha2.ControllerConfig.gcs_sinks)
  return gcs_sinks_.MutableMap();
}

// -------------------------------------------------------------------

// TimestampEvent

// string description = 1;
inline void TimestampEvent::clear_description() {
  description_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& TimestampEvent::description() const {
  // @@protoc_insertion_point(field_get:google.genomics.v1alpha2.TimestampEvent.description)
  return description_.Get();
}
inline void TimestampEvent::set_description(const ::std::string& value) {
  
  description_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.genomics.v1alpha2.TimestampEvent.description)
}
#if LANG_CXX11
inline void TimestampEvent::set_description(::std::string&& value) {
  
  description_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:google.genomics.v1alpha2.TimestampEvent.description)
}
#endif
inline void TimestampEvent::set_description(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  description_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.genomics.v1alpha2.TimestampEvent.description)
}
inline void TimestampEvent::set_description(const char* value,
    size_t size) {
  
  description_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.genomics.v1alpha2.TimestampEvent.description)
}
inline ::std::string* TimestampEvent::mutable_description() {
  
  // @@protoc_insertion_point(field_mutable:google.genomics.v1alpha2.TimestampEvent.description)
  return description_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* TimestampEvent::release_description() {
  // @@protoc_insertion_point(field_release:google.genomics.v1alpha2.TimestampEvent.description)
  
  return description_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void TimestampEvent::set_allocated_description(::std::string* description) {
  if (description != NULL) {
    
  } else {
    
  }
  description_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), description,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.genomics.v1alpha2.TimestampEvent.description)
}
inline ::std::string* TimestampEvent::unsafe_arena_release_description() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.genomics.v1alpha2.TimestampEvent.description)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return description_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void TimestampEvent::unsafe_arena_set_allocated_description(
    ::std::string* description) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (description != NULL) {
    
  } else {
    
  }
  description_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      description, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.genomics.v1alpha2.TimestampEvent.description)
}

// .google.protobuf.Timestamp timestamp = 2;
inline bool TimestampEvent::has_timestamp() const {
  return this != internal_default_instance() && timestamp_ != NULL;
}
inline const ::google::protobuf::Timestamp& TimestampEvent::timestamp() const {
  const ::google::protobuf::Timestamp* p = timestamp_;
  // @@protoc_insertion_point(field_get:google.genomics.v1alpha2.TimestampEvent.timestamp)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::Timestamp*>(
      &::google::protobuf::_Timestamp_default_instance_);
}
inline ::google::protobuf::Timestamp* TimestampEvent::release_timestamp() {
  // @@protoc_insertion_point(field_release:google.genomics.v1alpha2.TimestampEvent.timestamp)
  
  ::google::protobuf::Timestamp* temp = timestamp_;
  if (GetArenaNoVirtual() != NULL) {
    temp = ::google::protobuf::internal::DuplicateIfNonNull(temp, NULL);
  }
  timestamp_ = NULL;
  return temp;
}
inline ::google::protobuf::Timestamp* TimestampEvent::unsafe_arena_release_timestamp() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.genomics.v1alpha2.TimestampEvent.timestamp)
  
  ::google::protobuf::Timestamp* temp = timestamp_;
  timestamp_ = NULL;
  return temp;
}
inline ::google::protobuf::Timestamp* TimestampEvent::mutable_timestamp() {
  
  if (timestamp_ == NULL) {
    _slow_mutable_timestamp();
  }
  // @@protoc_insertion_point(field_mutable:google.genomics.v1alpha2.TimestampEvent.timestamp)
  return timestamp_;
}
inline void TimestampEvent::set_allocated_timestamp(::google::protobuf::Timestamp* timestamp) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(timestamp_);
  }
  if (timestamp) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast< ::google::protobuf::MessageLite*>(timestamp)->GetArena();
    if (message_arena != submessage_arena) {
      timestamp = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, timestamp, submessage_arena);
    }
    
  } else {
    
  }
  timestamp_ = timestamp;
  // @@protoc_insertion_point(field_set_allocated:google.genomics.v1alpha2.TimestampEvent.timestamp)
}

// -------------------------------------------------------------------

// SetOperationStatusRequest

// string operation_id = 1;
inline void SetOperationStatusRequest::clear_operation_id() {
  operation_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& SetOperationStatusRequest::operation_id() const {
  // @@protoc_insertion_point(field_get:google.genomics.v1alpha2.SetOperationStatusRequest.operation_id)
  return operation_id_.Get();
}
inline void SetOperationStatusRequest::set_operation_id(const ::std::string& value) {
  
  operation_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.genomics.v1alpha2.SetOperationStatusRequest.operation_id)
}
#if LANG_CXX11
inline void SetOperationStatusRequest::set_operation_id(::std::string&& value) {
  
  operation_id_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:google.genomics.v1alpha2.SetOperationStatusRequest.operation_id)
}
#endif
inline void SetOperationStatusRequest::set_operation_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  operation_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.genomics.v1alpha2.SetOperationStatusRequest.operation_id)
}
inline void SetOperationStatusRequest::set_operation_id(const char* value,
    size_t size) {
  
  operation_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.genomics.v1alpha2.SetOperationStatusRequest.operation_id)
}
inline ::std::string* SetOperationStatusRequest::mutable_operation_id() {
  
  // @@protoc_insertion_point(field_mutable:google.genomics.v1alpha2.SetOperationStatusRequest.operation_id)
  return operation_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* SetOperationStatusRequest::release_operation_id() {
  // @@protoc_insertion_point(field_release:google.genomics.v1alpha2.SetOperationStatusRequest.operation_id)
  
  return operation_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void SetOperationStatusRequest::set_allocated_operation_id(::std::string* operation_id) {
  if (operation_id != NULL) {
    
  } else {
    
  }
  operation_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), operation_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.genomics.v1alpha2.SetOperationStatusRequest.operation_id)
}
inline ::std::string* SetOperationStatusRequest::unsafe_arena_release_operation_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.genomics.v1alpha2.SetOperationStatusRequest.operation_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return operation_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void SetOperationStatusRequest::unsafe_arena_set_allocated_operation_id(
    ::std::string* operation_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (operation_id != NULL) {
    
  } else {
    
  }
  operation_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      operation_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.genomics.v1alpha2.SetOperationStatusRequest.operation_id)
}

// repeated .google.genomics.v1alpha2.TimestampEvent timestamp_events = 2;
inline int SetOperationStatusRequest::timestamp_events_size() const {
  return timestamp_events_.size();
}
inline void SetOperationStatusRequest::clear_timestamp_events() {
  timestamp_events_.Clear();
}
inline const ::google::genomics::v1alpha2::TimestampEvent& SetOperationStatusRequest::timestamp_events(int index) const {
  // @@protoc_insertion_point(field_get:google.genomics.v1alpha2.SetOperationStatusRequest.timestamp_events)
  return timestamp_events_.Get(index);
}
inline ::google::genomics::v1alpha2::TimestampEvent* SetOperationStatusRequest::mutable_timestamp_events(int index) {
  // @@protoc_insertion_point(field_mutable:google.genomics.v1alpha2.SetOperationStatusRequest.timestamp_events)
  return timestamp_events_.Mutable(index);
}
inline ::google::genomics::v1alpha2::TimestampEvent* SetOperationStatusRequest::add_timestamp_events() {
  // @@protoc_insertion_point(field_add:google.genomics.v1alpha2.SetOperationStatusRequest.timestamp_events)
  return timestamp_events_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::google::genomics::v1alpha2::TimestampEvent >*
SetOperationStatusRequest::mutable_timestamp_events() {
  // @@protoc_insertion_point(field_mutable_list:google.genomics.v1alpha2.SetOperationStatusRequest.timestamp_events)
  return &timestamp_events_;
}
inline const ::google::protobuf::RepeatedPtrField< ::google::genomics::v1alpha2::TimestampEvent >&
SetOperationStatusRequest::timestamp_events() const {
  // @@protoc_insertion_point(field_list:google.genomics.v1alpha2.SetOperationStatusRequest.timestamp_events)
  return timestamp_events_;
}

// .google.rpc.Code error_code = 3;
inline void SetOperationStatusRequest::clear_error_code() {
  error_code_ = 0;
}
inline ::google::rpc::Code SetOperationStatusRequest::error_code() const {
  // @@protoc_insertion_point(field_get:google.genomics.v1alpha2.SetOperationStatusRequest.error_code)
  return static_cast< ::google::rpc::Code >(error_code_);
}
inline void SetOperationStatusRequest::set_error_code(::google::rpc::Code value) {
  
  error_code_ = value;
  // @@protoc_insertion_point(field_set:google.genomics.v1alpha2.SetOperationStatusRequest.error_code)
}

// string error_message = 4;
inline void SetOperationStatusRequest::clear_error_message() {
  error_message_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& SetOperationStatusRequest::error_message() const {
  // @@protoc_insertion_point(field_get:google.genomics.v1alpha2.SetOperationStatusRequest.error_message)
  return error_message_.Get();
}
inline void SetOperationStatusRequest::set_error_message(const ::std::string& value) {
  
  error_message_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.genomics.v1alpha2.SetOperationStatusRequest.error_message)
}
#if LANG_CXX11
inline void SetOperationStatusRequest::set_error_message(::std::string&& value) {
  
  error_message_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:google.genomics.v1alpha2.SetOperationStatusRequest.error_message)
}
#endif
inline void SetOperationStatusRequest::set_error_message(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  error_message_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.genomics.v1alpha2.SetOperationStatusRequest.error_message)
}
inline void SetOperationStatusRequest::set_error_message(const char* value,
    size_t size) {
  
  error_message_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.genomics.v1alpha2.SetOperationStatusRequest.error_message)
}
inline ::std::string* SetOperationStatusRequest::mutable_error_message() {
  
  // @@protoc_insertion_point(field_mutable:google.genomics.v1alpha2.SetOperationStatusRequest.error_message)
  return error_message_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* SetOperationStatusRequest::release_error_message() {
  // @@protoc_insertion_point(field_release:google.genomics.v1alpha2.SetOperationStatusRequest.error_message)
  
  return error_message_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void SetOperationStatusRequest::set_allocated_error_message(::std::string* error_message) {
  if (error_message != NULL) {
    
  } else {
    
  }
  error_message_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), error_message,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.genomics.v1alpha2.SetOperationStatusRequest.error_message)
}
inline ::std::string* SetOperationStatusRequest::unsafe_arena_release_error_message() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.genomics.v1alpha2.SetOperationStatusRequest.error_message)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return error_message_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void SetOperationStatusRequest::unsafe_arena_set_allocated_error_message(
    ::std::string* error_message) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (error_message != NULL) {
    
  } else {
    
  }
  error_message_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      error_message, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.genomics.v1alpha2.SetOperationStatusRequest.error_message)
}

// uint64 validation_token = 5;
inline void SetOperationStatusRequest::clear_validation_token() {
  validation_token_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 SetOperationStatusRequest::validation_token() const {
  // @@protoc_insertion_point(field_get:google.genomics.v1alpha2.SetOperationStatusRequest.validation_token)
  return validation_token_;
}
inline void SetOperationStatusRequest::set_validation_token(::google::protobuf::uint64 value) {
  
  validation_token_ = value;
  // @@protoc_insertion_point(field_set:google.genomics.v1alpha2.SetOperationStatusRequest.validation_token)
}

// -------------------------------------------------------------------

// ServiceAccount

// string email = 1;
inline void ServiceAccount::clear_email() {
  email_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& ServiceAccount::email() const {
  // @@protoc_insertion_point(field_get:google.genomics.v1alpha2.ServiceAccount.email)
  return email_.Get();
}
inline void ServiceAccount::set_email(const ::std::string& value) {
  
  email_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.genomics.v1alpha2.ServiceAccount.email)
}
#if LANG_CXX11
inline void ServiceAccount::set_email(::std::string&& value) {
  
  email_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:google.genomics.v1alpha2.ServiceAccount.email)
}
#endif
inline void ServiceAccount::set_email(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  email_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.genomics.v1alpha2.ServiceAccount.email)
}
inline void ServiceAccount::set_email(const char* value,
    size_t size) {
  
  email_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.genomics.v1alpha2.ServiceAccount.email)
}
inline ::std::string* ServiceAccount::mutable_email() {
  
  // @@protoc_insertion_point(field_mutable:google.genomics.v1alpha2.ServiceAccount.email)
  return email_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ServiceAccount::release_email() {
  // @@protoc_insertion_point(field_release:google.genomics.v1alpha2.ServiceAccount.email)
  
  return email_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ServiceAccount::set_allocated_email(::std::string* email) {
  if (email != NULL) {
    
  } else {
    
  }
  email_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), email,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.genomics.v1alpha2.ServiceAccount.email)
}
inline ::std::string* ServiceAccount::unsafe_arena_release_email() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.genomics.v1alpha2.ServiceAccount.email)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return email_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ServiceAccount::unsafe_arena_set_allocated_email(
    ::std::string* email) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (email != NULL) {
    
  } else {
    
  }
  email_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      email, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.genomics.v1alpha2.ServiceAccount.email)
}

// repeated string scopes = 2;
inline int ServiceAccount::scopes_size() const {
  return scopes_.size();
}
inline void ServiceAccount::clear_scopes() {
  scopes_.Clear();
}
inline const ::std::string& ServiceAccount::scopes(int index) const {
  // @@protoc_insertion_point(field_get:google.genomics.v1alpha2.ServiceAccount.scopes)
  return scopes_.Get(index);
}
inline ::std::string* ServiceAccount::mutable_scopes(int index) {
  // @@protoc_insertion_point(field_mutable:google.genomics.v1alpha2.ServiceAccount.scopes)
  return scopes_.Mutable(index);
}
inline void ServiceAccount::set_scopes(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:google.genomics.v1alpha2.ServiceAccount.scopes)
  scopes_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void ServiceAccount::set_scopes(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:google.genomics.v1alpha2.ServiceAccount.scopes)
  scopes_.Mutable(index)->assign(std::move(value));
}
#endif
inline void ServiceAccount::set_scopes(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  scopes_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:google.genomics.v1alpha2.ServiceAccount.scopes)
}
inline void ServiceAccount::set_scopes(int index, const char* value, size_t size) {
  scopes_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:google.genomics.v1alpha2.ServiceAccount.scopes)
}
inline ::std::string* ServiceAccount::add_scopes() {
  // @@protoc_insertion_point(field_add_mutable:google.genomics.v1alpha2.ServiceAccount.scopes)
  return scopes_.Add();
}
inline void ServiceAccount::add_scopes(const ::std::string& value) {
  scopes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:google.genomics.v1alpha2.ServiceAccount.scopes)
}
#if LANG_CXX11
inline void ServiceAccount::add_scopes(::std::string&& value) {
  scopes_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:google.genomics.v1alpha2.ServiceAccount.scopes)
}
#endif
inline void ServiceAccount::add_scopes(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  scopes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:google.genomics.v1alpha2.ServiceAccount.scopes)
}
inline void ServiceAccount::add_scopes(const char* value, size_t size) {
  scopes_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:google.genomics.v1alpha2.ServiceAccount.scopes)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
ServiceAccount::scopes() const {
  // @@protoc_insertion_point(field_list:google.genomics.v1alpha2.ServiceAccount.scopes)
  return scopes_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
ServiceAccount::mutable_scopes() {
  // @@protoc_insertion_point(field_mutable_list:google.genomics.v1alpha2.ServiceAccount.scopes)
  return &scopes_;
}

// -------------------------------------------------------------------

// LoggingOptions

// string gcs_path = 1;
inline void LoggingOptions::clear_gcs_path() {
  gcs_path_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& LoggingOptions::gcs_path() const {
  // @@protoc_insertion_point(field_get:google.genomics.v1alpha2.LoggingOptions.gcs_path)
  return gcs_path_.Get();
}
inline void LoggingOptions::set_gcs_path(const ::std::string& value) {
  
  gcs_path_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.genomics.v1alpha2.LoggingOptions.gcs_path)
}
#if LANG_CXX11
inline void LoggingOptions::set_gcs_path(::std::string&& value) {
  
  gcs_path_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:google.genomics.v1alpha2.LoggingOptions.gcs_path)
}
#endif
inline void LoggingOptions::set_gcs_path(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  gcs_path_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.genomics.v1alpha2.LoggingOptions.gcs_path)
}
inline void LoggingOptions::set_gcs_path(const char* value,
    size_t size) {
  
  gcs_path_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.genomics.v1alpha2.LoggingOptions.gcs_path)
}
inline ::std::string* LoggingOptions::mutable_gcs_path() {
  
  // @@protoc_insertion_point(field_mutable:google.genomics.v1alpha2.LoggingOptions.gcs_path)
  return gcs_path_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* LoggingOptions::release_gcs_path() {
  // @@protoc_insertion_point(field_release:google.genomics.v1alpha2.LoggingOptions.gcs_path)
  
  return gcs_path_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void LoggingOptions::set_allocated_gcs_path(::std::string* gcs_path) {
  if (gcs_path != NULL) {
    
  } else {
    
  }
  gcs_path_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), gcs_path,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.genomics.v1alpha2.LoggingOptions.gcs_path)
}
inline ::std::string* LoggingOptions::unsafe_arena_release_gcs_path() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.genomics.v1alpha2.LoggingOptions.gcs_path)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return gcs_path_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void LoggingOptions::unsafe_arena_set_allocated_gcs_path(
    ::std::string* gcs_path) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (gcs_path != NULL) {
    
  } else {
    
  }
  gcs_path_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      gcs_path, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.genomics.v1alpha2.LoggingOptions.gcs_path)
}

// -------------------------------------------------------------------

// PipelineResources_Disk

// string name = 1;
inline void PipelineResources_Disk::clear_name() {
  name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& PipelineResources_Disk::name() const {
  // @@protoc_insertion_point(field_get:google.genomics.v1alpha2.PipelineResources.Disk.name)
  return name_.Get();
}
inline void PipelineResources_Disk::set_name(const ::std::string& value) {
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.genomics.v1alpha2.PipelineResources.Disk.name)
}
#if LANG_CXX11
inline void PipelineResources_Disk::set_name(::std::string&& value) {
  
  name_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:google.genomics.v1alpha2.PipelineResources.Disk.name)
}
#endif
inline void PipelineResources_Disk::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.genomics.v1alpha2.PipelineResources.Disk.name)
}
inline void PipelineResources_Disk::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.genomics.v1alpha2.PipelineResources.Disk.name)
}
inline ::std::string* PipelineResources_Disk::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:google.genomics.v1alpha2.PipelineResources.Disk.name)
  return name_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* PipelineResources_Disk::release_name() {
  // @@protoc_insertion_point(field_release:google.genomics.v1alpha2.PipelineResources.Disk.name)
  
  return name_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void PipelineResources_Disk::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.genomics.v1alpha2.PipelineResources.Disk.name)
}
inline ::std::string* PipelineResources_Disk::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.genomics.v1alpha2.PipelineResources.Disk.name)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return name_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void PipelineResources_Disk::unsafe_arena_set_allocated_name(
    ::std::string* name) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (name != NULL) {
    
  } else {
    
  }
  name_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      name, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.genomics.v1alpha2.PipelineResources.Disk.name)
}

// .google.genomics.v1alpha2.PipelineResources.Disk.Type type = 2;
inline void PipelineResources_Disk::clear_type() {
  type_ = 0;
}
inline ::google::genomics::v1alpha2::PipelineResources_Disk_Type PipelineResources_Disk::type() const {
  // @@protoc_insertion_point(field_get:google.genomics.v1alpha2.PipelineResources.Disk.type)
  return static_cast< ::google::genomics::v1alpha2::PipelineResources_Disk_Type >(type_);
}
inline void PipelineResources_Disk::set_type(::google::genomics::v1alpha2::PipelineResources_Disk_Type value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:google.genomics.v1alpha2.PipelineResources.Disk.type)
}

// int32 size_gb = 3;
inline void PipelineResources_Disk::clear_size_gb() {
  size_gb_ = 0;
}
inline ::google::protobuf::int32 PipelineResources_Disk::size_gb() const {
  // @@protoc_insertion_point(field_get:google.genomics.v1alpha2.PipelineResources.Disk.size_gb)
  return size_gb_;
}
inline void PipelineResources_Disk::set_size_gb(::google::protobuf::int32 value) {
  
  size_gb_ = value;
  // @@protoc_insertion_point(field_set:google.genomics.v1alpha2.PipelineResources.Disk.size_gb)
}

// string source = 4;
inline void PipelineResources_Disk::clear_source() {
  source_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& PipelineResources_Disk::source() const {
  // @@protoc_insertion_point(field_get:google.genomics.v1alpha2.PipelineResources.Disk.source)
  return source_.Get();
}
inline void PipelineResources_Disk::set_source(const ::std::string& value) {
  
  source_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.genomics.v1alpha2.PipelineResources.Disk.source)
}
#if LANG_CXX11
inline void PipelineResources_Disk::set_source(::std::string&& value) {
  
  source_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:google.genomics.v1alpha2.PipelineResources.Disk.source)
}
#endif
inline void PipelineResources_Disk::set_source(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  source_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.genomics.v1alpha2.PipelineResources.Disk.source)
}
inline void PipelineResources_Disk::set_source(const char* value,
    size_t size) {
  
  source_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.genomics.v1alpha2.PipelineResources.Disk.source)
}
inline ::std::string* PipelineResources_Disk::mutable_source() {
  
  // @@protoc_insertion_point(field_mutable:google.genomics.v1alpha2.PipelineResources.Disk.source)
  return source_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* PipelineResources_Disk::release_source() {
  // @@protoc_insertion_point(field_release:google.genomics.v1alpha2.PipelineResources.Disk.source)
  
  return source_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void PipelineResources_Disk::set_allocated_source(::std::string* source) {
  if (source != NULL) {
    
  } else {
    
  }
  source_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), source,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.genomics.v1alpha2.PipelineResources.Disk.source)
}
inline ::std::string* PipelineResources_Disk::unsafe_arena_release_source() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.genomics.v1alpha2.PipelineResources.Disk.source)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return source_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void PipelineResources_Disk::unsafe_arena_set_allocated_source(
    ::std::string* source) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (source != NULL) {
    
  } else {
    
  }
  source_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      source, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.genomics.v1alpha2.PipelineResources.Disk.source)
}

// bool auto_delete = 6;
inline void PipelineResources_Disk::clear_auto_delete() {
  auto_delete_ = false;
}
inline bool PipelineResources_Disk::auto_delete() const {
  // @@protoc_insertion_point(field_get:google.genomics.v1alpha2.PipelineResources.Disk.auto_delete)
  return auto_delete_;
}
inline void PipelineResources_Disk::set_auto_delete(bool value) {
  
  auto_delete_ = value;
  // @@protoc_insertion_point(field_set:google.genomics.v1alpha2.PipelineResources.Disk.auto_delete)
}

// string mount_point = 8;
inline void PipelineResources_Disk::clear_mount_point() {
  mount_point_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& PipelineResources_Disk::mount_point() const {
  // @@protoc_insertion_point(field_get:google.genomics.v1alpha2.PipelineResources.Disk.mount_point)
  return mount_point_.Get();
}
inline void PipelineResources_Disk::set_mount_point(const ::std::string& value) {
  
  mount_point_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.genomics.v1alpha2.PipelineResources.Disk.mount_point)
}
#if LANG_CXX11
inline void PipelineResources_Disk::set_mount_point(::std::string&& value) {
  
  mount_point_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:google.genomics.v1alpha2.PipelineResources.Disk.mount_point)
}
#endif
inline void PipelineResources_Disk::set_mount_point(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  mount_point_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.genomics.v1alpha2.PipelineResources.Disk.mount_point)
}
inline void PipelineResources_Disk::set_mount_point(const char* value,
    size_t size) {
  
  mount_point_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.genomics.v1alpha2.PipelineResources.Disk.mount_point)
}
inline ::std::string* PipelineResources_Disk::mutable_mount_point() {
  
  // @@protoc_insertion_point(field_mutable:google.genomics.v1alpha2.PipelineResources.Disk.mount_point)
  return mount_point_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* PipelineResources_Disk::release_mount_point() {
  // @@protoc_insertion_point(field_release:google.genomics.v1alpha2.PipelineResources.Disk.mount_point)
  
  return mount_point_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void PipelineResources_Disk::set_allocated_mount_point(::std::string* mount_point) {
  if (mount_point != NULL) {
    
  } else {
    
  }
  mount_point_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), mount_point,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.genomics.v1alpha2.PipelineResources.Disk.mount_point)
}
inline ::std::string* PipelineResources_Disk::unsafe_arena_release_mount_point() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.genomics.v1alpha2.PipelineResources.Disk.mount_point)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return mount_point_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void PipelineResources_Disk::unsafe_arena_set_allocated_mount_point(
    ::std::string* mount_point) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (mount_point != NULL) {
    
  } else {
    
  }
  mount_point_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      mount_point, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.genomics.v1alpha2.PipelineResources.Disk.mount_point)
}

// -------------------------------------------------------------------

// PipelineResources

// int32 minimum_cpu_cores = 1;
inline void PipelineResources::clear_minimum_cpu_cores() {
  minimum_cpu_cores_ = 0;
}
inline ::google::protobuf::int32 PipelineResources::minimum_cpu_cores() const {
  // @@protoc_insertion_point(field_get:google.genomics.v1alpha2.PipelineResources.minimum_cpu_cores)
  return minimum_cpu_cores_;
}
inline void PipelineResources::set_minimum_cpu_cores(::google::protobuf::int32 value) {
  
  minimum_cpu_cores_ = value;
  // @@protoc_insertion_point(field_set:google.genomics.v1alpha2.PipelineResources.minimum_cpu_cores)
}

// bool preemptible = 2;
inline void PipelineResources::clear_preemptible() {
  preemptible_ = false;
}
inline bool PipelineResources::preemptible() const {
  // @@protoc_insertion_point(field_get:google.genomics.v1alpha2.PipelineResources.preemptible)
  return preemptible_;
}
inline void PipelineResources::set_preemptible(bool value) {
  
  preemptible_ = value;
  // @@protoc_insertion_point(field_set:google.genomics.v1alpha2.PipelineResources.preemptible)
}

// double minimum_ram_gb = 3;
inline void PipelineResources::clear_minimum_ram_gb() {
  minimum_ram_gb_ = 0;
}
inline double PipelineResources::minimum_ram_gb() const {
  // @@protoc_insertion_point(field_get:google.genomics.v1alpha2.PipelineResources.minimum_ram_gb)
  return minimum_ram_gb_;
}
inline void PipelineResources::set_minimum_ram_gb(double value) {
  
  minimum_ram_gb_ = value;
  // @@protoc_insertion_point(field_set:google.genomics.v1alpha2.PipelineResources.minimum_ram_gb)
}

// repeated .google.genomics.v1alpha2.PipelineResources.Disk disks = 4;
inline int PipelineResources::disks_size() const {
  return disks_.size();
}
inline void PipelineResources::clear_disks() {
  disks_.Clear();
}
inline const ::google::genomics::v1alpha2::PipelineResources_Disk& PipelineResources::disks(int index) const {
  // @@protoc_insertion_point(field_get:google.genomics.v1alpha2.PipelineResources.disks)
  return disks_.Get(index);
}
inline ::google::genomics::v1alpha2::PipelineResources_Disk* PipelineResources::mutable_disks(int index) {
  // @@protoc_insertion_point(field_mutable:google.genomics.v1alpha2.PipelineResources.disks)
  return disks_.Mutable(index);
}
inline ::google::genomics::v1alpha2::PipelineResources_Disk* PipelineResources::add_disks() {
  // @@protoc_insertion_point(field_add:google.genomics.v1alpha2.PipelineResources.disks)
  return disks_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::google::genomics::v1alpha2::PipelineResources_Disk >*
PipelineResources::mutable_disks() {
  // @@protoc_insertion_point(field_mutable_list:google.genomics.v1alpha2.PipelineResources.disks)
  return &disks_;
}
inline const ::google::protobuf::RepeatedPtrField< ::google::genomics::v1alpha2::PipelineResources_Disk >&
PipelineResources::disks() const {
  // @@protoc_insertion_point(field_list:google.genomics.v1alpha2.PipelineResources.disks)
  return disks_;
}

// repeated string zones = 5;
inline int PipelineResources::zones_size() const {
  return zones_.size();
}
inline void PipelineResources::clear_zones() {
  zones_.Clear();
}
inline const ::std::string& PipelineResources::zones(int index) const {
  // @@protoc_insertion_point(field_get:google.genomics.v1alpha2.PipelineResources.zones)
  return zones_.Get(index);
}
inline ::std::string* PipelineResources::mutable_zones(int index) {
  // @@protoc_insertion_point(field_mutable:google.genomics.v1alpha2.PipelineResources.zones)
  return zones_.Mutable(index);
}
inline void PipelineResources::set_zones(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:google.genomics.v1alpha2.PipelineResources.zones)
  zones_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void PipelineResources::set_zones(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:google.genomics.v1alpha2.PipelineResources.zones)
  zones_.Mutable(index)->assign(std::move(value));
}
#endif
inline void PipelineResources::set_zones(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  zones_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:google.genomics.v1alpha2.PipelineResources.zones)
}
inline void PipelineResources::set_zones(int index, const char* value, size_t size) {
  zones_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:google.genomics.v1alpha2.PipelineResources.zones)
}
inline ::std::string* PipelineResources::add_zones() {
  // @@protoc_insertion_point(field_add_mutable:google.genomics.v1alpha2.PipelineResources.zones)
  return zones_.Add();
}
inline void PipelineResources::add_zones(const ::std::string& value) {
  zones_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:google.genomics.v1alpha2.PipelineResources.zones)
}
#if LANG_CXX11
inline void PipelineResources::add_zones(::std::string&& value) {
  zones_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:google.genomics.v1alpha2.PipelineResources.zones)
}
#endif
inline void PipelineResources::add_zones(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  zones_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:google.genomics.v1alpha2.PipelineResources.zones)
}
inline void PipelineResources::add_zones(const char* value, size_t size) {
  zones_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:google.genomics.v1alpha2.PipelineResources.zones)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
PipelineResources::zones() const {
  // @@protoc_insertion_point(field_list:google.genomics.v1alpha2.PipelineResources.zones)
  return zones_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
PipelineResources::mutable_zones() {
  // @@protoc_insertion_point(field_mutable_list:google.genomics.v1alpha2.PipelineResources.zones)
  return &zones_;
}

// int32 boot_disk_size_gb = 6;
inline void PipelineResources::clear_boot_disk_size_gb() {
  boot_disk_size_gb_ = 0;
}
inline ::google::protobuf::int32 PipelineResources::boot_disk_size_gb() const {
  // @@protoc_insertion_point(field_get:google.genomics.v1alpha2.PipelineResources.boot_disk_size_gb)
  return boot_disk_size_gb_;
}
inline void PipelineResources::set_boot_disk_size_gb(::google::protobuf::int32 value) {
  
  boot_disk_size_gb_ = value;
  // @@protoc_insertion_point(field_set:google.genomics.v1alpha2.PipelineResources.boot_disk_size_gb)
}

// bool no_address = 7;
inline void PipelineResources::clear_no_address() {
  no_address_ = false;
}
inline bool PipelineResources::no_address() const {
  // @@protoc_insertion_point(field_get:google.genomics.v1alpha2.PipelineResources.no_address)
  return no_address_;
}
inline void PipelineResources::set_no_address(bool value) {
  
  no_address_ = value;
  // @@protoc_insertion_point(field_set:google.genomics.v1alpha2.PipelineResources.no_address)
}

// -------------------------------------------------------------------

// PipelineParameter_LocalCopy

// string path = 1;
inline void PipelineParameter_LocalCopy::clear_path() {
  path_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& PipelineParameter_LocalCopy::path() const {
  // @@protoc_insertion_point(field_get:google.genomics.v1alpha2.PipelineParameter.LocalCopy.path)
  return path_.Get();
}
inline void PipelineParameter_LocalCopy::set_path(const ::std::string& value) {
  
  path_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.genomics.v1alpha2.PipelineParameter.LocalCopy.path)
}
#if LANG_CXX11
inline void PipelineParameter_LocalCopy::set_path(::std::string&& value) {
  
  path_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:google.genomics.v1alpha2.PipelineParameter.LocalCopy.path)
}
#endif
inline void PipelineParameter_LocalCopy::set_path(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  path_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.genomics.v1alpha2.PipelineParameter.LocalCopy.path)
}
inline void PipelineParameter_LocalCopy::set_path(const char* value,
    size_t size) {
  
  path_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.genomics.v1alpha2.PipelineParameter.LocalCopy.path)
}
inline ::std::string* PipelineParameter_LocalCopy::mutable_path() {
  
  // @@protoc_insertion_point(field_mutable:google.genomics.v1alpha2.PipelineParameter.LocalCopy.path)
  return path_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* PipelineParameter_LocalCopy::release_path() {
  // @@protoc_insertion_point(field_release:google.genomics.v1alpha2.PipelineParameter.LocalCopy.path)
  
  return path_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void PipelineParameter_LocalCopy::set_allocated_path(::std::string* path) {
  if (path != NULL) {
    
  } else {
    
  }
  path_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), path,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.genomics.v1alpha2.PipelineParameter.LocalCopy.path)
}
inline ::std::string* PipelineParameter_LocalCopy::unsafe_arena_release_path() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.genomics.v1alpha2.PipelineParameter.LocalCopy.path)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return path_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void PipelineParameter_LocalCopy::unsafe_arena_set_allocated_path(
    ::std::string* path) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (path != NULL) {
    
  } else {
    
  }
  path_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      path, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.genomics.v1alpha2.PipelineParameter.LocalCopy.path)
}

// string disk = 2;
inline void PipelineParameter_LocalCopy::clear_disk() {
  disk_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& PipelineParameter_LocalCopy::disk() const {
  // @@protoc_insertion_point(field_get:google.genomics.v1alpha2.PipelineParameter.LocalCopy.disk)
  return disk_.Get();
}
inline void PipelineParameter_LocalCopy::set_disk(const ::std::string& value) {
  
  disk_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.genomics.v1alpha2.PipelineParameter.LocalCopy.disk)
}
#if LANG_CXX11
inline void PipelineParameter_LocalCopy::set_disk(::std::string&& value) {
  
  disk_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:google.genomics.v1alpha2.PipelineParameter.LocalCopy.disk)
}
#endif
inline void PipelineParameter_LocalCopy::set_disk(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  disk_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.genomics.v1alpha2.PipelineParameter.LocalCopy.disk)
}
inline void PipelineParameter_LocalCopy::set_disk(const char* value,
    size_t size) {
  
  disk_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.genomics.v1alpha2.PipelineParameter.LocalCopy.disk)
}
inline ::std::string* PipelineParameter_LocalCopy::mutable_disk() {
  
  // @@protoc_insertion_point(field_mutable:google.genomics.v1alpha2.PipelineParameter.LocalCopy.disk)
  return disk_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* PipelineParameter_LocalCopy::release_disk() {
  // @@protoc_insertion_point(field_release:google.genomics.v1alpha2.PipelineParameter.LocalCopy.disk)
  
  return disk_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void PipelineParameter_LocalCopy::set_allocated_disk(::std::string* disk) {
  if (disk != NULL) {
    
  } else {
    
  }
  disk_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), disk,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.genomics.v1alpha2.PipelineParameter.LocalCopy.disk)
}
inline ::std::string* PipelineParameter_LocalCopy::unsafe_arena_release_disk() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.genomics.v1alpha2.PipelineParameter.LocalCopy.disk)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return disk_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void PipelineParameter_LocalCopy::unsafe_arena_set_allocated_disk(
    ::std::string* disk) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (disk != NULL) {
    
  } else {
    
  }
  disk_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      disk, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.genomics.v1alpha2.PipelineParameter.LocalCopy.disk)
}

// -------------------------------------------------------------------

// PipelineParameter

// string name = 1;
inline void PipelineParameter::clear_name() {
  name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& PipelineParameter::name() const {
  // @@protoc_insertion_point(field_get:google.genomics.v1alpha2.PipelineParameter.name)
  return name_.Get();
}
inline void PipelineParameter::set_name(const ::std::string& value) {
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.genomics.v1alpha2.PipelineParameter.name)
}
#if LANG_CXX11
inline void PipelineParameter::set_name(::std::string&& value) {
  
  name_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:google.genomics.v1alpha2.PipelineParameter.name)
}
#endif
inline void PipelineParameter::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.genomics.v1alpha2.PipelineParameter.name)
}
inline void PipelineParameter::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.genomics.v1alpha2.PipelineParameter.name)
}
inline ::std::string* PipelineParameter::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:google.genomics.v1alpha2.PipelineParameter.name)
  return name_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* PipelineParameter::release_name() {
  // @@protoc_insertion_point(field_release:google.genomics.v1alpha2.PipelineParameter.name)
  
  return name_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void PipelineParameter::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.genomics.v1alpha2.PipelineParameter.name)
}
inline ::std::string* PipelineParameter::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.genomics.v1alpha2.PipelineParameter.name)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return name_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void PipelineParameter::unsafe_arena_set_allocated_name(
    ::std::string* name) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (name != NULL) {
    
  } else {
    
  }
  name_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      name, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.genomics.v1alpha2.PipelineParameter.name)
}

// string description = 2;
inline void PipelineParameter::clear_description() {
  description_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& PipelineParameter::description() const {
  // @@protoc_insertion_point(field_get:google.genomics.v1alpha2.PipelineParameter.description)
  return description_.Get();
}
inline void PipelineParameter::set_description(const ::std::string& value) {
  
  description_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.genomics.v1alpha2.PipelineParameter.description)
}
#if LANG_CXX11
inline void PipelineParameter::set_description(::std::string&& value) {
  
  description_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:google.genomics.v1alpha2.PipelineParameter.description)
}
#endif
inline void PipelineParameter::set_description(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  description_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.genomics.v1alpha2.PipelineParameter.description)
}
inline void PipelineParameter::set_description(const char* value,
    size_t size) {
  
  description_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.genomics.v1alpha2.PipelineParameter.description)
}
inline ::std::string* PipelineParameter::mutable_description() {
  
  // @@protoc_insertion_point(field_mutable:google.genomics.v1alpha2.PipelineParameter.description)
  return description_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* PipelineParameter::release_description() {
  // @@protoc_insertion_point(field_release:google.genomics.v1alpha2.PipelineParameter.description)
  
  return description_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void PipelineParameter::set_allocated_description(::std::string* description) {
  if (description != NULL) {
    
  } else {
    
  }
  description_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), description,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.genomics.v1alpha2.PipelineParameter.description)
}
inline ::std::string* PipelineParameter::unsafe_arena_release_description() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.genomics.v1alpha2.PipelineParameter.description)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return description_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void PipelineParameter::unsafe_arena_set_allocated_description(
    ::std::string* description) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (description != NULL) {
    
  } else {
    
  }
  description_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      description, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.genomics.v1alpha2.PipelineParameter.description)
}

// string default_value = 5;
inline void PipelineParameter::clear_default_value() {
  default_value_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& PipelineParameter::default_value() const {
  // @@protoc_insertion_point(field_get:google.genomics.v1alpha2.PipelineParameter.default_value)
  return default_value_.Get();
}
inline void PipelineParameter::set_default_value(const ::std::string& value) {
  
  default_value_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.genomics.v1alpha2.PipelineParameter.default_value)
}
#if LANG_CXX11
inline void PipelineParameter::set_default_value(::std::string&& value) {
  
  default_value_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:google.genomics.v1alpha2.PipelineParameter.default_value)
}
#endif
inline void PipelineParameter::set_default_value(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  default_value_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.genomics.v1alpha2.PipelineParameter.default_value)
}
inline void PipelineParameter::set_default_value(const char* value,
    size_t size) {
  
  default_value_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.genomics.v1alpha2.PipelineParameter.default_value)
}
inline ::std::string* PipelineParameter::mutable_default_value() {
  
  // @@protoc_insertion_point(field_mutable:google.genomics.v1alpha2.PipelineParameter.default_value)
  return default_value_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* PipelineParameter::release_default_value() {
  // @@protoc_insertion_point(field_release:google.genomics.v1alpha2.PipelineParameter.default_value)
  
  return default_value_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void PipelineParameter::set_allocated_default_value(::std::string* default_value) {
  if (default_value != NULL) {
    
  } else {
    
  }
  default_value_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), default_value,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.genomics.v1alpha2.PipelineParameter.default_value)
}
inline ::std::string* PipelineParameter::unsafe_arena_release_default_value() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.genomics.v1alpha2.PipelineParameter.default_value)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return default_value_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void PipelineParameter::unsafe_arena_set_allocated_default_value(
    ::std::string* default_value) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (default_value != NULL) {
    
  } else {
    
  }
  default_value_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      default_value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.genomics.v1alpha2.PipelineParameter.default_value)
}

// .google.genomics.v1alpha2.PipelineParameter.LocalCopy local_copy = 6;
inline bool PipelineParameter::has_local_copy() const {
  return this != internal_default_instance() && local_copy_ != NULL;
}
inline void PipelineParameter::clear_local_copy() {
  if (GetArenaNoVirtual() == NULL && local_copy_ != NULL) {
    delete local_copy_;
  }
  local_copy_ = NULL;
}
inline const ::google::genomics::v1alpha2::PipelineParameter_LocalCopy& PipelineParameter::local_copy() const {
  const ::google::genomics::v1alpha2::PipelineParameter_LocalCopy* p = local_copy_;
  // @@protoc_insertion_point(field_get:google.genomics.v1alpha2.PipelineParameter.local_copy)
  return p != NULL ? *p : *reinterpret_cast<const ::google::genomics::v1alpha2::PipelineParameter_LocalCopy*>(
      &::google::genomics::v1alpha2::_PipelineParameter_LocalCopy_default_instance_);
}
inline ::google::genomics::v1alpha2::PipelineParameter_LocalCopy* PipelineParameter::release_local_copy() {
  // @@protoc_insertion_point(field_release:google.genomics.v1alpha2.PipelineParameter.local_copy)
  
  ::google::genomics::v1alpha2::PipelineParameter_LocalCopy* temp = local_copy_;
  if (GetArenaNoVirtual() != NULL) {
    temp = ::google::protobuf::internal::DuplicateIfNonNull(temp, NULL);
  }
  local_copy_ = NULL;
  return temp;
}
inline ::google::genomics::v1alpha2::PipelineParameter_LocalCopy* PipelineParameter::unsafe_arena_release_local_copy() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.genomics.v1alpha2.PipelineParameter.local_copy)
  
  ::google::genomics::v1alpha2::PipelineParameter_LocalCopy* temp = local_copy_;
  local_copy_ = NULL;
  return temp;
}
inline ::google::genomics::v1alpha2::PipelineParameter_LocalCopy* PipelineParameter::mutable_local_copy() {
  
  if (local_copy_ == NULL) {
    _slow_mutable_local_copy();
  }
  // @@protoc_insertion_point(field_mutable:google.genomics.v1alpha2.PipelineParameter.local_copy)
  return local_copy_;
}
inline void PipelineParameter::set_allocated_local_copy(::google::genomics::v1alpha2::PipelineParameter_LocalCopy* local_copy) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete local_copy_;
  }
  if (local_copy) {
    ::google::protobuf::Arena* submessage_arena =
      ::google::protobuf::Arena::GetArena(local_copy);
    if (message_arena != submessage_arena) {
      local_copy = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, local_copy, submessage_arena);
    }
    
  } else {
    
  }
  local_copy_ = local_copy;
  // @@protoc_insertion_point(field_set_allocated:google.genomics.v1alpha2.PipelineParameter.local_copy)
}

// -------------------------------------------------------------------

// DockerExecutor

// string image_name = 1;
inline void DockerExecutor::clear_image_name() {
  image_name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& DockerExecutor::image_name() const {
  // @@protoc_insertion_point(field_get:google.genomics.v1alpha2.DockerExecutor.image_name)
  return image_name_.Get();
}
inline void DockerExecutor::set_image_name(const ::std::string& value) {
  
  image_name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.genomics.v1alpha2.DockerExecutor.image_name)
}
#if LANG_CXX11
inline void DockerExecutor::set_image_name(::std::string&& value) {
  
  image_name_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:google.genomics.v1alpha2.DockerExecutor.image_name)
}
#endif
inline void DockerExecutor::set_image_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  image_name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.genomics.v1alpha2.DockerExecutor.image_name)
}
inline void DockerExecutor::set_image_name(const char* value,
    size_t size) {
  
  image_name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.genomics.v1alpha2.DockerExecutor.image_name)
}
inline ::std::string* DockerExecutor::mutable_image_name() {
  
  // @@protoc_insertion_point(field_mutable:google.genomics.v1alpha2.DockerExecutor.image_name)
  return image_name_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* DockerExecutor::release_image_name() {
  // @@protoc_insertion_point(field_release:google.genomics.v1alpha2.DockerExecutor.image_name)
  
  return image_name_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void DockerExecutor::set_allocated_image_name(::std::string* image_name) {
  if (image_name != NULL) {
    
  } else {
    
  }
  image_name_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), image_name,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.genomics.v1alpha2.DockerExecutor.image_name)
}
inline ::std::string* DockerExecutor::unsafe_arena_release_image_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.genomics.v1alpha2.DockerExecutor.image_name)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return image_name_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void DockerExecutor::unsafe_arena_set_allocated_image_name(
    ::std::string* image_name) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (image_name != NULL) {
    
  } else {
    
  }
  image_name_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      image_name, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.genomics.v1alpha2.DockerExecutor.image_name)
}

// string cmd = 2;
inline void DockerExecutor::clear_cmd() {
  cmd_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& DockerExecutor::cmd() const {
  // @@protoc_insertion_point(field_get:google.genomics.v1alpha2.DockerExecutor.cmd)
  return cmd_.Get();
}
inline void DockerExecutor::set_cmd(const ::std::string& value) {
  
  cmd_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.genomics.v1alpha2.DockerExecutor.cmd)
}
#if LANG_CXX11
inline void DockerExecutor::set_cmd(::std::string&& value) {
  
  cmd_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:google.genomics.v1alpha2.DockerExecutor.cmd)
}
#endif
inline void DockerExecutor::set_cmd(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  cmd_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.genomics.v1alpha2.DockerExecutor.cmd)
}
inline void DockerExecutor::set_cmd(const char* value,
    size_t size) {
  
  cmd_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.genomics.v1alpha2.DockerExecutor.cmd)
}
inline ::std::string* DockerExecutor::mutable_cmd() {
  
  // @@protoc_insertion_point(field_mutable:google.genomics.v1alpha2.DockerExecutor.cmd)
  return cmd_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* DockerExecutor::release_cmd() {
  // @@protoc_insertion_point(field_release:google.genomics.v1alpha2.DockerExecutor.cmd)
  
  return cmd_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void DockerExecutor::set_allocated_cmd(::std::string* cmd) {
  if (cmd != NULL) {
    
  } else {
    
  }
  cmd_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cmd,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.genomics.v1alpha2.DockerExecutor.cmd)
}
inline ::std::string* DockerExecutor::unsafe_arena_release_cmd() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.genomics.v1alpha2.DockerExecutor.cmd)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return cmd_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void DockerExecutor::unsafe_arena_set_allocated_cmd(
    ::std::string* cmd) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (cmd != NULL) {
    
  } else {
    
  }
  cmd_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      cmd, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.genomics.v1alpha2.DockerExecutor.cmd)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1alpha2
}  // namespace genomics
}  // namespace google

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::google::genomics::v1alpha2::PipelineResources_Disk_Type> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::google::genomics::v1alpha2::PipelineResources_Disk_Type>() {
  return ::google::genomics::v1alpha2::PipelineResources_Disk_Type_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_google_2fgenomics_2fv1alpha2_2fpipelines_2eproto__INCLUDED
