// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: google/cloud/dataproc/v1/jobs.proto
// Original file comments:
// Copyright 2016 Google Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
#ifndef GRPC_google_2fcloud_2fdataproc_2fv1_2fjobs_2eproto__INCLUDED
#define GRPC_google_2fcloud_2fdataproc_2fv1_2fjobs_2eproto__INCLUDED

#include "google/cloud/dataproc/v1/jobs.pb.h"

#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace grpc {
class CompletionQueue;
class Channel;
class ServerCompletionQueue;
class ServerContext;
}  // namespace grpc

namespace google {
namespace cloud {
namespace dataproc {
namespace v1 {

// The JobController provides methods to manage jobs.
class JobController final {
 public:
  static constexpr char const* service_full_name() {
    return "google.cloud.dataproc.v1.JobController";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Submits a job to a cluster.
    virtual ::grpc::Status SubmitJob(::grpc::ClientContext* context, const ::google::cloud::dataproc::v1::SubmitJobRequest& request, ::google::cloud::dataproc::v1::Job* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::dataproc::v1::Job>> AsyncSubmitJob(::grpc::ClientContext* context, const ::google::cloud::dataproc::v1::SubmitJobRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::dataproc::v1::Job>>(AsyncSubmitJobRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::dataproc::v1::Job>> PrepareAsyncSubmitJob(::grpc::ClientContext* context, const ::google::cloud::dataproc::v1::SubmitJobRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::dataproc::v1::Job>>(PrepareAsyncSubmitJobRaw(context, request, cq));
    }
    // Gets the resource representation for a job in a project.
    virtual ::grpc::Status GetJob(::grpc::ClientContext* context, const ::google::cloud::dataproc::v1::GetJobRequest& request, ::google::cloud::dataproc::v1::Job* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::dataproc::v1::Job>> AsyncGetJob(::grpc::ClientContext* context, const ::google::cloud::dataproc::v1::GetJobRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::dataproc::v1::Job>>(AsyncGetJobRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::dataproc::v1::Job>> PrepareAsyncGetJob(::grpc::ClientContext* context, const ::google::cloud::dataproc::v1::GetJobRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::dataproc::v1::Job>>(PrepareAsyncGetJobRaw(context, request, cq));
    }
    // Lists regions/{region}/jobs in a project.
    virtual ::grpc::Status ListJobs(::grpc::ClientContext* context, const ::google::cloud::dataproc::v1::ListJobsRequest& request, ::google::cloud::dataproc::v1::ListJobsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::dataproc::v1::ListJobsResponse>> AsyncListJobs(::grpc::ClientContext* context, const ::google::cloud::dataproc::v1::ListJobsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::dataproc::v1::ListJobsResponse>>(AsyncListJobsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::dataproc::v1::ListJobsResponse>> PrepareAsyncListJobs(::grpc::ClientContext* context, const ::google::cloud::dataproc::v1::ListJobsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::dataproc::v1::ListJobsResponse>>(PrepareAsyncListJobsRaw(context, request, cq));
    }
    // Starts a job cancellation request. To access the job resource
    // after cancellation, call
    // [regions/{region}/jobs.list](/dataproc/reference/rest/v1/projects.regions.jobs/list) or
    // [regions/{region}/jobs.get](/dataproc/reference/rest/v1/projects.regions.jobs/get).
    virtual ::grpc::Status CancelJob(::grpc::ClientContext* context, const ::google::cloud::dataproc::v1::CancelJobRequest& request, ::google::cloud::dataproc::v1::Job* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::dataproc::v1::Job>> AsyncCancelJob(::grpc::ClientContext* context, const ::google::cloud::dataproc::v1::CancelJobRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::dataproc::v1::Job>>(AsyncCancelJobRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::dataproc::v1::Job>> PrepareAsyncCancelJob(::grpc::ClientContext* context, const ::google::cloud::dataproc::v1::CancelJobRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::dataproc::v1::Job>>(PrepareAsyncCancelJobRaw(context, request, cq));
    }
    // Deletes the job from the project. If the job is active, the delete fails,
    // and the response returns `FAILED_PRECONDITION`.
    virtual ::grpc::Status DeleteJob(::grpc::ClientContext* context, const ::google::cloud::dataproc::v1::DeleteJobRequest& request, ::google::protobuf::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> AsyncDeleteJob(::grpc::ClientContext* context, const ::google::cloud::dataproc::v1::DeleteJobRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(AsyncDeleteJobRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> PrepareAsyncDeleteJob(::grpc::ClientContext* context, const ::google::cloud::dataproc::v1::DeleteJobRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(PrepareAsyncDeleteJobRaw(context, request, cq));
    }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::dataproc::v1::Job>* AsyncSubmitJobRaw(::grpc::ClientContext* context, const ::google::cloud::dataproc::v1::SubmitJobRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::dataproc::v1::Job>* PrepareAsyncSubmitJobRaw(::grpc::ClientContext* context, const ::google::cloud::dataproc::v1::SubmitJobRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::dataproc::v1::Job>* AsyncGetJobRaw(::grpc::ClientContext* context, const ::google::cloud::dataproc::v1::GetJobRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::dataproc::v1::Job>* PrepareAsyncGetJobRaw(::grpc::ClientContext* context, const ::google::cloud::dataproc::v1::GetJobRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::dataproc::v1::ListJobsResponse>* AsyncListJobsRaw(::grpc::ClientContext* context, const ::google::cloud::dataproc::v1::ListJobsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::dataproc::v1::ListJobsResponse>* PrepareAsyncListJobsRaw(::grpc::ClientContext* context, const ::google::cloud::dataproc::v1::ListJobsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::dataproc::v1::Job>* AsyncCancelJobRaw(::grpc::ClientContext* context, const ::google::cloud::dataproc::v1::CancelJobRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::dataproc::v1::Job>* PrepareAsyncCancelJobRaw(::grpc::ClientContext* context, const ::google::cloud::dataproc::v1::CancelJobRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* AsyncDeleteJobRaw(::grpc::ClientContext* context, const ::google::cloud::dataproc::v1::DeleteJobRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* PrepareAsyncDeleteJobRaw(::grpc::ClientContext* context, const ::google::cloud::dataproc::v1::DeleteJobRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status SubmitJob(::grpc::ClientContext* context, const ::google::cloud::dataproc::v1::SubmitJobRequest& request, ::google::cloud::dataproc::v1::Job* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::cloud::dataproc::v1::Job>> AsyncSubmitJob(::grpc::ClientContext* context, const ::google::cloud::dataproc::v1::SubmitJobRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::cloud::dataproc::v1::Job>>(AsyncSubmitJobRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::cloud::dataproc::v1::Job>> PrepareAsyncSubmitJob(::grpc::ClientContext* context, const ::google::cloud::dataproc::v1::SubmitJobRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::cloud::dataproc::v1::Job>>(PrepareAsyncSubmitJobRaw(context, request, cq));
    }
    ::grpc::Status GetJob(::grpc::ClientContext* context, const ::google::cloud::dataproc::v1::GetJobRequest& request, ::google::cloud::dataproc::v1::Job* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::cloud::dataproc::v1::Job>> AsyncGetJob(::grpc::ClientContext* context, const ::google::cloud::dataproc::v1::GetJobRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::cloud::dataproc::v1::Job>>(AsyncGetJobRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::cloud::dataproc::v1::Job>> PrepareAsyncGetJob(::grpc::ClientContext* context, const ::google::cloud::dataproc::v1::GetJobRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::cloud::dataproc::v1::Job>>(PrepareAsyncGetJobRaw(context, request, cq));
    }
    ::grpc::Status ListJobs(::grpc::ClientContext* context, const ::google::cloud::dataproc::v1::ListJobsRequest& request, ::google::cloud::dataproc::v1::ListJobsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::cloud::dataproc::v1::ListJobsResponse>> AsyncListJobs(::grpc::ClientContext* context, const ::google::cloud::dataproc::v1::ListJobsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::cloud::dataproc::v1::ListJobsResponse>>(AsyncListJobsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::cloud::dataproc::v1::ListJobsResponse>> PrepareAsyncListJobs(::grpc::ClientContext* context, const ::google::cloud::dataproc::v1::ListJobsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::cloud::dataproc::v1::ListJobsResponse>>(PrepareAsyncListJobsRaw(context, request, cq));
    }
    ::grpc::Status CancelJob(::grpc::ClientContext* context, const ::google::cloud::dataproc::v1::CancelJobRequest& request, ::google::cloud::dataproc::v1::Job* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::cloud::dataproc::v1::Job>> AsyncCancelJob(::grpc::ClientContext* context, const ::google::cloud::dataproc::v1::CancelJobRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::cloud::dataproc::v1::Job>>(AsyncCancelJobRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::cloud::dataproc::v1::Job>> PrepareAsyncCancelJob(::grpc::ClientContext* context, const ::google::cloud::dataproc::v1::CancelJobRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::cloud::dataproc::v1::Job>>(PrepareAsyncCancelJobRaw(context, request, cq));
    }
    ::grpc::Status DeleteJob(::grpc::ClientContext* context, const ::google::cloud::dataproc::v1::DeleteJobRequest& request, ::google::protobuf::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> AsyncDeleteJob(::grpc::ClientContext* context, const ::google::cloud::dataproc::v1::DeleteJobRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(AsyncDeleteJobRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> PrepareAsyncDeleteJob(::grpc::ClientContext* context, const ::google::cloud::dataproc::v1::DeleteJobRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(PrepareAsyncDeleteJobRaw(context, request, cq));
    }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    ::grpc::ClientAsyncResponseReader< ::google::cloud::dataproc::v1::Job>* AsyncSubmitJobRaw(::grpc::ClientContext* context, const ::google::cloud::dataproc::v1::SubmitJobRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::cloud::dataproc::v1::Job>* PrepareAsyncSubmitJobRaw(::grpc::ClientContext* context, const ::google::cloud::dataproc::v1::SubmitJobRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::cloud::dataproc::v1::Job>* AsyncGetJobRaw(::grpc::ClientContext* context, const ::google::cloud::dataproc::v1::GetJobRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::cloud::dataproc::v1::Job>* PrepareAsyncGetJobRaw(::grpc::ClientContext* context, const ::google::cloud::dataproc::v1::GetJobRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::cloud::dataproc::v1::ListJobsResponse>* AsyncListJobsRaw(::grpc::ClientContext* context, const ::google::cloud::dataproc::v1::ListJobsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::cloud::dataproc::v1::ListJobsResponse>* PrepareAsyncListJobsRaw(::grpc::ClientContext* context, const ::google::cloud::dataproc::v1::ListJobsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::cloud::dataproc::v1::Job>* AsyncCancelJobRaw(::grpc::ClientContext* context, const ::google::cloud::dataproc::v1::CancelJobRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::cloud::dataproc::v1::Job>* PrepareAsyncCancelJobRaw(::grpc::ClientContext* context, const ::google::cloud::dataproc::v1::CancelJobRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* AsyncDeleteJobRaw(::grpc::ClientContext* context, const ::google::cloud::dataproc::v1::DeleteJobRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* PrepareAsyncDeleteJobRaw(::grpc::ClientContext* context, const ::google::cloud::dataproc::v1::DeleteJobRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_SubmitJob_;
    const ::grpc::internal::RpcMethod rpcmethod_GetJob_;
    const ::grpc::internal::RpcMethod rpcmethod_ListJobs_;
    const ::grpc::internal::RpcMethod rpcmethod_CancelJob_;
    const ::grpc::internal::RpcMethod rpcmethod_DeleteJob_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Submits a job to a cluster.
    virtual ::grpc::Status SubmitJob(::grpc::ServerContext* context, const ::google::cloud::dataproc::v1::SubmitJobRequest* request, ::google::cloud::dataproc::v1::Job* response);
    // Gets the resource representation for a job in a project.
    virtual ::grpc::Status GetJob(::grpc::ServerContext* context, const ::google::cloud::dataproc::v1::GetJobRequest* request, ::google::cloud::dataproc::v1::Job* response);
    // Lists regions/{region}/jobs in a project.
    virtual ::grpc::Status ListJobs(::grpc::ServerContext* context, const ::google::cloud::dataproc::v1::ListJobsRequest* request, ::google::cloud::dataproc::v1::ListJobsResponse* response);
    // Starts a job cancellation request. To access the job resource
    // after cancellation, call
    // [regions/{region}/jobs.list](/dataproc/reference/rest/v1/projects.regions.jobs/list) or
    // [regions/{region}/jobs.get](/dataproc/reference/rest/v1/projects.regions.jobs/get).
    virtual ::grpc::Status CancelJob(::grpc::ServerContext* context, const ::google::cloud::dataproc::v1::CancelJobRequest* request, ::google::cloud::dataproc::v1::Job* response);
    // Deletes the job from the project. If the job is active, the delete fails,
    // and the response returns `FAILED_PRECONDITION`.
    virtual ::grpc::Status DeleteJob(::grpc::ServerContext* context, const ::google::cloud::dataproc::v1::DeleteJobRequest* request, ::google::protobuf::Empty* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_SubmitJob : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_SubmitJob() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_SubmitJob() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubmitJob(::grpc::ServerContext* context, const ::google::cloud::dataproc::v1::SubmitJobRequest* request, ::google::cloud::dataproc::v1::Job* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSubmitJob(::grpc::ServerContext* context, ::google::cloud::dataproc::v1::SubmitJobRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::cloud::dataproc::v1::Job>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetJob : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_GetJob() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_GetJob() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetJob(::grpc::ServerContext* context, const ::google::cloud::dataproc::v1::GetJobRequest* request, ::google::cloud::dataproc::v1::Job* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetJob(::grpc::ServerContext* context, ::google::cloud::dataproc::v1::GetJobRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::cloud::dataproc::v1::Job>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ListJobs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_ListJobs() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_ListJobs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListJobs(::grpc::ServerContext* context, const ::google::cloud::dataproc::v1::ListJobsRequest* request, ::google::cloud::dataproc::v1::ListJobsResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListJobs(::grpc::ServerContext* context, ::google::cloud::dataproc::v1::ListJobsRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::cloud::dataproc::v1::ListJobsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_CancelJob : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_CancelJob() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_CancelJob() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CancelJob(::grpc::ServerContext* context, const ::google::cloud::dataproc::v1::CancelJobRequest* request, ::google::cloud::dataproc::v1::Job* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCancelJob(::grpc::ServerContext* context, ::google::cloud::dataproc::v1::CancelJobRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::cloud::dataproc::v1::Job>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DeleteJob : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_DeleteJob() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_DeleteJob() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteJob(::grpc::ServerContext* context, const ::google::cloud::dataproc::v1::DeleteJobRequest* request, ::google::protobuf::Empty* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteJob(::grpc::ServerContext* context, ::google::cloud::dataproc::v1::DeleteJobRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::protobuf::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_SubmitJob<WithAsyncMethod_GetJob<WithAsyncMethod_ListJobs<WithAsyncMethod_CancelJob<WithAsyncMethod_DeleteJob<Service > > > > > AsyncService;
  template <class BaseClass>
  class WithGenericMethod_SubmitJob : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_SubmitJob() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_SubmitJob() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubmitJob(::grpc::ServerContext* context, const ::google::cloud::dataproc::v1::SubmitJobRequest* request, ::google::cloud::dataproc::v1::Job* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetJob : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_GetJob() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_GetJob() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetJob(::grpc::ServerContext* context, const ::google::cloud::dataproc::v1::GetJobRequest* request, ::google::cloud::dataproc::v1::Job* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ListJobs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_ListJobs() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_ListJobs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListJobs(::grpc::ServerContext* context, const ::google::cloud::dataproc::v1::ListJobsRequest* request, ::google::cloud::dataproc::v1::ListJobsResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_CancelJob : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_CancelJob() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_CancelJob() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CancelJob(::grpc::ServerContext* context, const ::google::cloud::dataproc::v1::CancelJobRequest* request, ::google::cloud::dataproc::v1::Job* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DeleteJob : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_DeleteJob() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_DeleteJob() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteJob(::grpc::ServerContext* context, const ::google::cloud::dataproc::v1::DeleteJobRequest* request, ::google::protobuf::Empty* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SubmitJob : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_SubmitJob() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler< ::google::cloud::dataproc::v1::SubmitJobRequest, ::google::cloud::dataproc::v1::Job>(std::bind(&WithStreamedUnaryMethod_SubmitJob<BaseClass>::StreamedSubmitJob, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_SubmitJob() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SubmitJob(::grpc::ServerContext* context, const ::google::cloud::dataproc::v1::SubmitJobRequest* request, ::google::cloud::dataproc::v1::Job* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSubmitJob(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::cloud::dataproc::v1::SubmitJobRequest,::google::cloud::dataproc::v1::Job>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetJob : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_GetJob() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler< ::google::cloud::dataproc::v1::GetJobRequest, ::google::cloud::dataproc::v1::Job>(std::bind(&WithStreamedUnaryMethod_GetJob<BaseClass>::StreamedGetJob, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetJob() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetJob(::grpc::ServerContext* context, const ::google::cloud::dataproc::v1::GetJobRequest* request, ::google::cloud::dataproc::v1::Job* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetJob(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::cloud::dataproc::v1::GetJobRequest,::google::cloud::dataproc::v1::Job>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ListJobs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_ListJobs() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler< ::google::cloud::dataproc::v1::ListJobsRequest, ::google::cloud::dataproc::v1::ListJobsResponse>(std::bind(&WithStreamedUnaryMethod_ListJobs<BaseClass>::StreamedListJobs, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_ListJobs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ListJobs(::grpc::ServerContext* context, const ::google::cloud::dataproc::v1::ListJobsRequest* request, ::google::cloud::dataproc::v1::ListJobsResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedListJobs(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::cloud::dataproc::v1::ListJobsRequest,::google::cloud::dataproc::v1::ListJobsResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CancelJob : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_CancelJob() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler< ::google::cloud::dataproc::v1::CancelJobRequest, ::google::cloud::dataproc::v1::Job>(std::bind(&WithStreamedUnaryMethod_CancelJob<BaseClass>::StreamedCancelJob, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_CancelJob() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CancelJob(::grpc::ServerContext* context, const ::google::cloud::dataproc::v1::CancelJobRequest* request, ::google::cloud::dataproc::v1::Job* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCancelJob(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::cloud::dataproc::v1::CancelJobRequest,::google::cloud::dataproc::v1::Job>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DeleteJob : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_DeleteJob() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler< ::google::cloud::dataproc::v1::DeleteJobRequest, ::google::protobuf::Empty>(std::bind(&WithStreamedUnaryMethod_DeleteJob<BaseClass>::StreamedDeleteJob, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_DeleteJob() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DeleteJob(::grpc::ServerContext* context, const ::google::cloud::dataproc::v1::DeleteJobRequest* request, ::google::protobuf::Empty* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDeleteJob(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::cloud::dataproc::v1::DeleteJobRequest,::google::protobuf::Empty>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_SubmitJob<WithStreamedUnaryMethod_GetJob<WithStreamedUnaryMethod_ListJobs<WithStreamedUnaryMethod_CancelJob<WithStreamedUnaryMethod_DeleteJob<Service > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_SubmitJob<WithStreamedUnaryMethod_GetJob<WithStreamedUnaryMethod_ListJobs<WithStreamedUnaryMethod_CancelJob<WithStreamedUnaryMethod_DeleteJob<Service > > > > > StreamedService;
};

}  // namespace v1
}  // namespace dataproc
}  // namespace cloud
}  // namespace google


#endif  // GRPC_google_2fcloud_2fdataproc_2fv1_2fjobs_2eproto__INCLUDED
