// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: google/spanner/admin/instance/v1/spanner_instance_admin.proto

#include "google/spanner/admin/instance/v1/spanner_instance_admin.pb.h"
#include "google/spanner/admin/instance/v1/spanner_instance_admin.grpc.pb.h"

#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace google {
namespace spanner {
namespace admin {
namespace instance {
namespace v1 {

static const char* InstanceAdmin_method_names[] = {
  "/google.spanner.admin.instance.v1.InstanceAdmin/ListInstanceConfigs",
  "/google.spanner.admin.instance.v1.InstanceAdmin/GetInstanceConfig",
  "/google.spanner.admin.instance.v1.InstanceAdmin/ListInstances",
  "/google.spanner.admin.instance.v1.InstanceAdmin/GetInstance",
  "/google.spanner.admin.instance.v1.InstanceAdmin/CreateInstance",
  "/google.spanner.admin.instance.v1.InstanceAdmin/UpdateInstance",
  "/google.spanner.admin.instance.v1.InstanceAdmin/DeleteInstance",
  "/google.spanner.admin.instance.v1.InstanceAdmin/SetIamPolicy",
  "/google.spanner.admin.instance.v1.InstanceAdmin/GetIamPolicy",
  "/google.spanner.admin.instance.v1.InstanceAdmin/TestIamPermissions",
};

std::unique_ptr< InstanceAdmin::Stub> InstanceAdmin::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< InstanceAdmin::Stub> stub(new InstanceAdmin::Stub(channel));
  return stub;
}

InstanceAdmin::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_ListInstanceConfigs_(InstanceAdmin_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetInstanceConfig_(InstanceAdmin_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ListInstances_(InstanceAdmin_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetInstance_(InstanceAdmin_method_names[3], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CreateInstance_(InstanceAdmin_method_names[4], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UpdateInstance_(InstanceAdmin_method_names[5], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DeleteInstance_(InstanceAdmin_method_names[6], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetIamPolicy_(InstanceAdmin_method_names[7], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetIamPolicy_(InstanceAdmin_method_names[8], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_TestIamPermissions_(InstanceAdmin_method_names[9], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status InstanceAdmin::Stub::ListInstanceConfigs(::grpc::ClientContext* context, const ::google::spanner::admin::instance::v1::ListInstanceConfigsRequest& request, ::google::spanner::admin::instance::v1::ListInstanceConfigsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_ListInstanceConfigs_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::google::spanner::admin::instance::v1::ListInstanceConfigsResponse>* InstanceAdmin::Stub::AsyncListInstanceConfigsRaw(::grpc::ClientContext* context, const ::google::spanner::admin::instance::v1::ListInstanceConfigsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::spanner::admin::instance::v1::ListInstanceConfigsResponse>::Create(channel_.get(), cq, rpcmethod_ListInstanceConfigs_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::google::spanner::admin::instance::v1::ListInstanceConfigsResponse>* InstanceAdmin::Stub::PrepareAsyncListInstanceConfigsRaw(::grpc::ClientContext* context, const ::google::spanner::admin::instance::v1::ListInstanceConfigsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::spanner::admin::instance::v1::ListInstanceConfigsResponse>::Create(channel_.get(), cq, rpcmethod_ListInstanceConfigs_, context, request, false);
}

::grpc::Status InstanceAdmin::Stub::GetInstanceConfig(::grpc::ClientContext* context, const ::google::spanner::admin::instance::v1::GetInstanceConfigRequest& request, ::google::spanner::admin::instance::v1::InstanceConfig* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetInstanceConfig_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::google::spanner::admin::instance::v1::InstanceConfig>* InstanceAdmin::Stub::AsyncGetInstanceConfigRaw(::grpc::ClientContext* context, const ::google::spanner::admin::instance::v1::GetInstanceConfigRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::spanner::admin::instance::v1::InstanceConfig>::Create(channel_.get(), cq, rpcmethod_GetInstanceConfig_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::google::spanner::admin::instance::v1::InstanceConfig>* InstanceAdmin::Stub::PrepareAsyncGetInstanceConfigRaw(::grpc::ClientContext* context, const ::google::spanner::admin::instance::v1::GetInstanceConfigRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::spanner::admin::instance::v1::InstanceConfig>::Create(channel_.get(), cq, rpcmethod_GetInstanceConfig_, context, request, false);
}

::grpc::Status InstanceAdmin::Stub::ListInstances(::grpc::ClientContext* context, const ::google::spanner::admin::instance::v1::ListInstancesRequest& request, ::google::spanner::admin::instance::v1::ListInstancesResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_ListInstances_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::google::spanner::admin::instance::v1::ListInstancesResponse>* InstanceAdmin::Stub::AsyncListInstancesRaw(::grpc::ClientContext* context, const ::google::spanner::admin::instance::v1::ListInstancesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::spanner::admin::instance::v1::ListInstancesResponse>::Create(channel_.get(), cq, rpcmethod_ListInstances_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::google::spanner::admin::instance::v1::ListInstancesResponse>* InstanceAdmin::Stub::PrepareAsyncListInstancesRaw(::grpc::ClientContext* context, const ::google::spanner::admin::instance::v1::ListInstancesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::spanner::admin::instance::v1::ListInstancesResponse>::Create(channel_.get(), cq, rpcmethod_ListInstances_, context, request, false);
}

::grpc::Status InstanceAdmin::Stub::GetInstance(::grpc::ClientContext* context, const ::google::spanner::admin::instance::v1::GetInstanceRequest& request, ::google::spanner::admin::instance::v1::Instance* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetInstance_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::google::spanner::admin::instance::v1::Instance>* InstanceAdmin::Stub::AsyncGetInstanceRaw(::grpc::ClientContext* context, const ::google::spanner::admin::instance::v1::GetInstanceRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::spanner::admin::instance::v1::Instance>::Create(channel_.get(), cq, rpcmethod_GetInstance_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::google::spanner::admin::instance::v1::Instance>* InstanceAdmin::Stub::PrepareAsyncGetInstanceRaw(::grpc::ClientContext* context, const ::google::spanner::admin::instance::v1::GetInstanceRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::spanner::admin::instance::v1::Instance>::Create(channel_.get(), cq, rpcmethod_GetInstance_, context, request, false);
}

::grpc::Status InstanceAdmin::Stub::CreateInstance(::grpc::ClientContext* context, const ::google::spanner::admin::instance::v1::CreateInstanceRequest& request, ::google::longrunning::Operation* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_CreateInstance_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::google::longrunning::Operation>* InstanceAdmin::Stub::AsyncCreateInstanceRaw(::grpc::ClientContext* context, const ::google::spanner::admin::instance::v1::CreateInstanceRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::longrunning::Operation>::Create(channel_.get(), cq, rpcmethod_CreateInstance_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::google::longrunning::Operation>* InstanceAdmin::Stub::PrepareAsyncCreateInstanceRaw(::grpc::ClientContext* context, const ::google::spanner::admin::instance::v1::CreateInstanceRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::longrunning::Operation>::Create(channel_.get(), cq, rpcmethod_CreateInstance_, context, request, false);
}

::grpc::Status InstanceAdmin::Stub::UpdateInstance(::grpc::ClientContext* context, const ::google::spanner::admin::instance::v1::UpdateInstanceRequest& request, ::google::longrunning::Operation* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_UpdateInstance_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::google::longrunning::Operation>* InstanceAdmin::Stub::AsyncUpdateInstanceRaw(::grpc::ClientContext* context, const ::google::spanner::admin::instance::v1::UpdateInstanceRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::longrunning::Operation>::Create(channel_.get(), cq, rpcmethod_UpdateInstance_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::google::longrunning::Operation>* InstanceAdmin::Stub::PrepareAsyncUpdateInstanceRaw(::grpc::ClientContext* context, const ::google::spanner::admin::instance::v1::UpdateInstanceRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::longrunning::Operation>::Create(channel_.get(), cq, rpcmethod_UpdateInstance_, context, request, false);
}

::grpc::Status InstanceAdmin::Stub::DeleteInstance(::grpc::ClientContext* context, const ::google::spanner::admin::instance::v1::DeleteInstanceRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_DeleteInstance_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* InstanceAdmin::Stub::AsyncDeleteInstanceRaw(::grpc::ClientContext* context, const ::google::spanner::admin::instance::v1::DeleteInstanceRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::protobuf::Empty>::Create(channel_.get(), cq, rpcmethod_DeleteInstance_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* InstanceAdmin::Stub::PrepareAsyncDeleteInstanceRaw(::grpc::ClientContext* context, const ::google::spanner::admin::instance::v1::DeleteInstanceRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::protobuf::Empty>::Create(channel_.get(), cq, rpcmethod_DeleteInstance_, context, request, false);
}

::grpc::Status InstanceAdmin::Stub::SetIamPolicy(::grpc::ClientContext* context, const ::google::iam::v1::SetIamPolicyRequest& request, ::google::iam::v1::Policy* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_SetIamPolicy_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::google::iam::v1::Policy>* InstanceAdmin::Stub::AsyncSetIamPolicyRaw(::grpc::ClientContext* context, const ::google::iam::v1::SetIamPolicyRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::iam::v1::Policy>::Create(channel_.get(), cq, rpcmethod_SetIamPolicy_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::google::iam::v1::Policy>* InstanceAdmin::Stub::PrepareAsyncSetIamPolicyRaw(::grpc::ClientContext* context, const ::google::iam::v1::SetIamPolicyRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::iam::v1::Policy>::Create(channel_.get(), cq, rpcmethod_SetIamPolicy_, context, request, false);
}

::grpc::Status InstanceAdmin::Stub::GetIamPolicy(::grpc::ClientContext* context, const ::google::iam::v1::GetIamPolicyRequest& request, ::google::iam::v1::Policy* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetIamPolicy_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::google::iam::v1::Policy>* InstanceAdmin::Stub::AsyncGetIamPolicyRaw(::grpc::ClientContext* context, const ::google::iam::v1::GetIamPolicyRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::iam::v1::Policy>::Create(channel_.get(), cq, rpcmethod_GetIamPolicy_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::google::iam::v1::Policy>* InstanceAdmin::Stub::PrepareAsyncGetIamPolicyRaw(::grpc::ClientContext* context, const ::google::iam::v1::GetIamPolicyRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::iam::v1::Policy>::Create(channel_.get(), cq, rpcmethod_GetIamPolicy_, context, request, false);
}

::grpc::Status InstanceAdmin::Stub::TestIamPermissions(::grpc::ClientContext* context, const ::google::iam::v1::TestIamPermissionsRequest& request, ::google::iam::v1::TestIamPermissionsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_TestIamPermissions_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::google::iam::v1::TestIamPermissionsResponse>* InstanceAdmin::Stub::AsyncTestIamPermissionsRaw(::grpc::ClientContext* context, const ::google::iam::v1::TestIamPermissionsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::iam::v1::TestIamPermissionsResponse>::Create(channel_.get(), cq, rpcmethod_TestIamPermissions_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::google::iam::v1::TestIamPermissionsResponse>* InstanceAdmin::Stub::PrepareAsyncTestIamPermissionsRaw(::grpc::ClientContext* context, const ::google::iam::v1::TestIamPermissionsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::iam::v1::TestIamPermissionsResponse>::Create(channel_.get(), cq, rpcmethod_TestIamPermissions_, context, request, false);
}

InstanceAdmin::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      InstanceAdmin_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< InstanceAdmin::Service, ::google::spanner::admin::instance::v1::ListInstanceConfigsRequest, ::google::spanner::admin::instance::v1::ListInstanceConfigsResponse>(
          std::mem_fn(&InstanceAdmin::Service::ListInstanceConfigs), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      InstanceAdmin_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< InstanceAdmin::Service, ::google::spanner::admin::instance::v1::GetInstanceConfigRequest, ::google::spanner::admin::instance::v1::InstanceConfig>(
          std::mem_fn(&InstanceAdmin::Service::GetInstanceConfig), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      InstanceAdmin_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< InstanceAdmin::Service, ::google::spanner::admin::instance::v1::ListInstancesRequest, ::google::spanner::admin::instance::v1::ListInstancesResponse>(
          std::mem_fn(&InstanceAdmin::Service::ListInstances), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      InstanceAdmin_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< InstanceAdmin::Service, ::google::spanner::admin::instance::v1::GetInstanceRequest, ::google::spanner::admin::instance::v1::Instance>(
          std::mem_fn(&InstanceAdmin::Service::GetInstance), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      InstanceAdmin_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< InstanceAdmin::Service, ::google::spanner::admin::instance::v1::CreateInstanceRequest, ::google::longrunning::Operation>(
          std::mem_fn(&InstanceAdmin::Service::CreateInstance), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      InstanceAdmin_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< InstanceAdmin::Service, ::google::spanner::admin::instance::v1::UpdateInstanceRequest, ::google::longrunning::Operation>(
          std::mem_fn(&InstanceAdmin::Service::UpdateInstance), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      InstanceAdmin_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< InstanceAdmin::Service, ::google::spanner::admin::instance::v1::DeleteInstanceRequest, ::google::protobuf::Empty>(
          std::mem_fn(&InstanceAdmin::Service::DeleteInstance), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      InstanceAdmin_method_names[7],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< InstanceAdmin::Service, ::google::iam::v1::SetIamPolicyRequest, ::google::iam::v1::Policy>(
          std::mem_fn(&InstanceAdmin::Service::SetIamPolicy), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      InstanceAdmin_method_names[8],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< InstanceAdmin::Service, ::google::iam::v1::GetIamPolicyRequest, ::google::iam::v1::Policy>(
          std::mem_fn(&InstanceAdmin::Service::GetIamPolicy), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      InstanceAdmin_method_names[9],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< InstanceAdmin::Service, ::google::iam::v1::TestIamPermissionsRequest, ::google::iam::v1::TestIamPermissionsResponse>(
          std::mem_fn(&InstanceAdmin::Service::TestIamPermissions), this)));
}

InstanceAdmin::Service::~Service() {
}

::grpc::Status InstanceAdmin::Service::ListInstanceConfigs(::grpc::ServerContext* context, const ::google::spanner::admin::instance::v1::ListInstanceConfigsRequest* request, ::google::spanner::admin::instance::v1::ListInstanceConfigsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status InstanceAdmin::Service::GetInstanceConfig(::grpc::ServerContext* context, const ::google::spanner::admin::instance::v1::GetInstanceConfigRequest* request, ::google::spanner::admin::instance::v1::InstanceConfig* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status InstanceAdmin::Service::ListInstances(::grpc::ServerContext* context, const ::google::spanner::admin::instance::v1::ListInstancesRequest* request, ::google::spanner::admin::instance::v1::ListInstancesResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status InstanceAdmin::Service::GetInstance(::grpc::ServerContext* context, const ::google::spanner::admin::instance::v1::GetInstanceRequest* request, ::google::spanner::admin::instance::v1::Instance* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status InstanceAdmin::Service::CreateInstance(::grpc::ServerContext* context, const ::google::spanner::admin::instance::v1::CreateInstanceRequest* request, ::google::longrunning::Operation* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status InstanceAdmin::Service::UpdateInstance(::grpc::ServerContext* context, const ::google::spanner::admin::instance::v1::UpdateInstanceRequest* request, ::google::longrunning::Operation* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status InstanceAdmin::Service::DeleteInstance(::grpc::ServerContext* context, const ::google::spanner::admin::instance::v1::DeleteInstanceRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status InstanceAdmin::Service::SetIamPolicy(::grpc::ServerContext* context, const ::google::iam::v1::SetIamPolicyRequest* request, ::google::iam::v1::Policy* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status InstanceAdmin::Service::GetIamPolicy(::grpc::ServerContext* context, const ::google::iam::v1::GetIamPolicyRequest* request, ::google::iam::v1::Policy* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status InstanceAdmin::Service::TestIamPermissions(::grpc::ServerContext* context, const ::google::iam::v1::TestIamPermissionsRequest* request, ::google::iam::v1::TestIamPermissionsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace google
}  // namespace spanner
}  // namespace admin
}  // namespace instance
}  // namespace v1

