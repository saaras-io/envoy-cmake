// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/privacy/dlp/v2beta1/dlp.proto

#ifndef PROTOBUF_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto__INCLUDED
#define PROTOBUF_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "google/api/annotations.pb.h"
#include "google/longrunning/operations.pb.h"
#include "google/privacy/dlp/v2beta1/storage.pb.h"
#include <google/protobuf/empty.pb.h>
#include <google/protobuf/timestamp.pb.h>
#include "google/type/date.pb.h"
#include "google/type/timeofday.pb.h"
// @@protoc_insertion_point(includes)

namespace protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[82];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsInspectConfig_InfoTypeLimitImpl();
void InitDefaultsInspectConfig_InfoTypeLimit();
void InitDefaultsInspectConfigImpl();
void InitDefaultsInspectConfig();
void InitDefaultsOperationConfigImpl();
void InitDefaultsOperationConfig();
void InitDefaultsContentItemImpl();
void InitDefaultsContentItem();
void InitDefaultsTable_RowImpl();
void InitDefaultsTable_Row();
void InitDefaultsTableImpl();
void InitDefaultsTable();
void InitDefaultsInspectResultImpl();
void InitDefaultsInspectResult();
void InitDefaultsFindingImpl();
void InitDefaultsFinding();
void InitDefaultsLocationImpl();
void InitDefaultsLocation();
void InitDefaultsTableLocationImpl();
void InitDefaultsTableLocation();
void InitDefaultsRangeImpl();
void InitDefaultsRange();
void InitDefaultsImageLocationImpl();
void InitDefaultsImageLocation();
void InitDefaultsRedactContentRequest_ReplaceConfigImpl();
void InitDefaultsRedactContentRequest_ReplaceConfig();
void InitDefaultsRedactContentRequest_ImageRedactionConfigImpl();
void InitDefaultsRedactContentRequest_ImageRedactionConfig();
void InitDefaultsRedactContentRequestImpl();
void InitDefaultsRedactContentRequest();
void InitDefaultsColorImpl();
void InitDefaultsColor();
void InitDefaultsRedactContentResponseImpl();
void InitDefaultsRedactContentResponse();
void InitDefaultsDeidentifyContentRequestImpl();
void InitDefaultsDeidentifyContentRequest();
void InitDefaultsDeidentifyContentResponseImpl();
void InitDefaultsDeidentifyContentResponse();
void InitDefaultsInspectContentRequestImpl();
void InitDefaultsInspectContentRequest();
void InitDefaultsInspectContentResponseImpl();
void InitDefaultsInspectContentResponse();
void InitDefaultsCreateInspectOperationRequestImpl();
void InitDefaultsCreateInspectOperationRequest();
void InitDefaultsOutputStorageConfigImpl();
void InitDefaultsOutputStorageConfig();
void InitDefaultsInfoTypeStatisticsImpl();
void InitDefaultsInfoTypeStatistics();
void InitDefaultsInspectOperationMetadataImpl();
void InitDefaultsInspectOperationMetadata();
void InitDefaultsInspectOperationResultImpl();
void InitDefaultsInspectOperationResult();
void InitDefaultsListInspectFindingsRequestImpl();
void InitDefaultsListInspectFindingsRequest();
void InitDefaultsListInspectFindingsResponseImpl();
void InitDefaultsListInspectFindingsResponse();
void InitDefaultsInfoTypeDescriptionImpl();
void InitDefaultsInfoTypeDescription();
void InitDefaultsListInfoTypesRequestImpl();
void InitDefaultsListInfoTypesRequest();
void InitDefaultsListInfoTypesResponseImpl();
void InitDefaultsListInfoTypesResponse();
void InitDefaultsCategoryDescriptionImpl();
void InitDefaultsCategoryDescription();
void InitDefaultsListRootCategoriesRequestImpl();
void InitDefaultsListRootCategoriesRequest();
void InitDefaultsListRootCategoriesResponseImpl();
void InitDefaultsListRootCategoriesResponse();
void InitDefaultsAnalyzeDataSourceRiskRequestImpl();
void InitDefaultsAnalyzeDataSourceRiskRequest();
void InitDefaultsPrivacyMetric_NumericalStatsConfigImpl();
void InitDefaultsPrivacyMetric_NumericalStatsConfig();
void InitDefaultsPrivacyMetric_CategoricalStatsConfigImpl();
void InitDefaultsPrivacyMetric_CategoricalStatsConfig();
void InitDefaultsPrivacyMetric_KAnonymityConfigImpl();
void InitDefaultsPrivacyMetric_KAnonymityConfig();
void InitDefaultsPrivacyMetric_LDiversityConfigImpl();
void InitDefaultsPrivacyMetric_LDiversityConfig();
void InitDefaultsPrivacyMetricImpl();
void InitDefaultsPrivacyMetric();
void InitDefaultsRiskAnalysisOperationMetadataImpl();
void InitDefaultsRiskAnalysisOperationMetadata();
void InitDefaultsRiskAnalysisOperationResult_NumericalStatsResultImpl();
void InitDefaultsRiskAnalysisOperationResult_NumericalStatsResult();
void InitDefaultsRiskAnalysisOperationResult_CategoricalStatsResult_CategoricalStatsHistogramBucketImpl();
void InitDefaultsRiskAnalysisOperationResult_CategoricalStatsResult_CategoricalStatsHistogramBucket();
void InitDefaultsRiskAnalysisOperationResult_CategoricalStatsResultImpl();
void InitDefaultsRiskAnalysisOperationResult_CategoricalStatsResult();
void InitDefaultsRiskAnalysisOperationResult_KAnonymityResult_KAnonymityEquivalenceClassImpl();
void InitDefaultsRiskAnalysisOperationResult_KAnonymityResult_KAnonymityEquivalenceClass();
void InitDefaultsRiskAnalysisOperationResult_KAnonymityResult_KAnonymityHistogramBucketImpl();
void InitDefaultsRiskAnalysisOperationResult_KAnonymityResult_KAnonymityHistogramBucket();
void InitDefaultsRiskAnalysisOperationResult_KAnonymityResultImpl();
void InitDefaultsRiskAnalysisOperationResult_KAnonymityResult();
void InitDefaultsRiskAnalysisOperationResult_LDiversityResult_LDiversityEquivalenceClassImpl();
void InitDefaultsRiskAnalysisOperationResult_LDiversityResult_LDiversityEquivalenceClass();
void InitDefaultsRiskAnalysisOperationResult_LDiversityResult_LDiversityHistogramBucketImpl();
void InitDefaultsRiskAnalysisOperationResult_LDiversityResult_LDiversityHistogramBucket();
void InitDefaultsRiskAnalysisOperationResult_LDiversityResultImpl();
void InitDefaultsRiskAnalysisOperationResult_LDiversityResult();
void InitDefaultsRiskAnalysisOperationResultImpl();
void InitDefaultsRiskAnalysisOperationResult();
void InitDefaultsValueFrequencyImpl();
void InitDefaultsValueFrequency();
void InitDefaultsValueImpl();
void InitDefaultsValue();
void InitDefaultsDeidentifyConfigImpl();
void InitDefaultsDeidentifyConfig();
void InitDefaultsPrimitiveTransformationImpl();
void InitDefaultsPrimitiveTransformation();
void InitDefaultsTimePartConfigImpl();
void InitDefaultsTimePartConfig();
void InitDefaultsCryptoHashConfigImpl();
void InitDefaultsCryptoHashConfig();
void InitDefaultsReplaceValueConfigImpl();
void InitDefaultsReplaceValueConfig();
void InitDefaultsReplaceWithInfoTypeConfigImpl();
void InitDefaultsReplaceWithInfoTypeConfig();
void InitDefaultsRedactConfigImpl();
void InitDefaultsRedactConfig();
void InitDefaultsCharsToIgnoreImpl();
void InitDefaultsCharsToIgnore();
void InitDefaultsCharacterMaskConfigImpl();
void InitDefaultsCharacterMaskConfig();
void InitDefaultsFixedSizeBucketingConfigImpl();
void InitDefaultsFixedSizeBucketingConfig();
void InitDefaultsBucketingConfig_BucketImpl();
void InitDefaultsBucketingConfig_Bucket();
void InitDefaultsBucketingConfigImpl();
void InitDefaultsBucketingConfig();
void InitDefaultsCryptoReplaceFfxFpeConfigImpl();
void InitDefaultsCryptoReplaceFfxFpeConfig();
void InitDefaultsCryptoKeyImpl();
void InitDefaultsCryptoKey();
void InitDefaultsTransientCryptoKeyImpl();
void InitDefaultsTransientCryptoKey();
void InitDefaultsUnwrappedCryptoKeyImpl();
void InitDefaultsUnwrappedCryptoKey();
void InitDefaultsKmsWrappedCryptoKeyImpl();
void InitDefaultsKmsWrappedCryptoKey();
void InitDefaultsInfoTypeTransformations_InfoTypeTransformationImpl();
void InitDefaultsInfoTypeTransformations_InfoTypeTransformation();
void InitDefaultsInfoTypeTransformationsImpl();
void InitDefaultsInfoTypeTransformations();
void InitDefaultsFieldTransformationImpl();
void InitDefaultsFieldTransformation();
void InitDefaultsRecordTransformationsImpl();
void InitDefaultsRecordTransformations();
void InitDefaultsRecordSuppressionImpl();
void InitDefaultsRecordSuppression();
void InitDefaultsRecordCondition_ConditionImpl();
void InitDefaultsRecordCondition_Condition();
void InitDefaultsRecordCondition_ConditionsImpl();
void InitDefaultsRecordCondition_Conditions();
void InitDefaultsRecordCondition_ExpressionsImpl();
void InitDefaultsRecordCondition_Expressions();
void InitDefaultsRecordConditionImpl();
void InitDefaultsRecordCondition();
void InitDefaultsDeidentificationSummaryImpl();
void InitDefaultsDeidentificationSummary();
void InitDefaultsTransformationSummary_SummaryResultImpl();
void InitDefaultsTransformationSummary_SummaryResult();
void InitDefaultsTransformationSummaryImpl();
void InitDefaultsTransformationSummary();
inline void InitDefaults() {
  InitDefaultsInspectConfig_InfoTypeLimit();
  InitDefaultsInspectConfig();
  InitDefaultsOperationConfig();
  InitDefaultsContentItem();
  InitDefaultsTable_Row();
  InitDefaultsTable();
  InitDefaultsInspectResult();
  InitDefaultsFinding();
  InitDefaultsLocation();
  InitDefaultsTableLocation();
  InitDefaultsRange();
  InitDefaultsImageLocation();
  InitDefaultsRedactContentRequest_ReplaceConfig();
  InitDefaultsRedactContentRequest_ImageRedactionConfig();
  InitDefaultsRedactContentRequest();
  InitDefaultsColor();
  InitDefaultsRedactContentResponse();
  InitDefaultsDeidentifyContentRequest();
  InitDefaultsDeidentifyContentResponse();
  InitDefaultsInspectContentRequest();
  InitDefaultsInspectContentResponse();
  InitDefaultsCreateInspectOperationRequest();
  InitDefaultsOutputStorageConfig();
  InitDefaultsInfoTypeStatistics();
  InitDefaultsInspectOperationMetadata();
  InitDefaultsInspectOperationResult();
  InitDefaultsListInspectFindingsRequest();
  InitDefaultsListInspectFindingsResponse();
  InitDefaultsInfoTypeDescription();
  InitDefaultsListInfoTypesRequest();
  InitDefaultsListInfoTypesResponse();
  InitDefaultsCategoryDescription();
  InitDefaultsListRootCategoriesRequest();
  InitDefaultsListRootCategoriesResponse();
  InitDefaultsAnalyzeDataSourceRiskRequest();
  InitDefaultsPrivacyMetric_NumericalStatsConfig();
  InitDefaultsPrivacyMetric_CategoricalStatsConfig();
  InitDefaultsPrivacyMetric_KAnonymityConfig();
  InitDefaultsPrivacyMetric_LDiversityConfig();
  InitDefaultsPrivacyMetric();
  InitDefaultsRiskAnalysisOperationMetadata();
  InitDefaultsRiskAnalysisOperationResult_NumericalStatsResult();
  InitDefaultsRiskAnalysisOperationResult_CategoricalStatsResult_CategoricalStatsHistogramBucket();
  InitDefaultsRiskAnalysisOperationResult_CategoricalStatsResult();
  InitDefaultsRiskAnalysisOperationResult_KAnonymityResult_KAnonymityEquivalenceClass();
  InitDefaultsRiskAnalysisOperationResult_KAnonymityResult_KAnonymityHistogramBucket();
  InitDefaultsRiskAnalysisOperationResult_KAnonymityResult();
  InitDefaultsRiskAnalysisOperationResult_LDiversityResult_LDiversityEquivalenceClass();
  InitDefaultsRiskAnalysisOperationResult_LDiversityResult_LDiversityHistogramBucket();
  InitDefaultsRiskAnalysisOperationResult_LDiversityResult();
  InitDefaultsRiskAnalysisOperationResult();
  InitDefaultsValueFrequency();
  InitDefaultsValue();
  InitDefaultsDeidentifyConfig();
  InitDefaultsPrimitiveTransformation();
  InitDefaultsTimePartConfig();
  InitDefaultsCryptoHashConfig();
  InitDefaultsReplaceValueConfig();
  InitDefaultsReplaceWithInfoTypeConfig();
  InitDefaultsRedactConfig();
  InitDefaultsCharsToIgnore();
  InitDefaultsCharacterMaskConfig();
  InitDefaultsFixedSizeBucketingConfig();
  InitDefaultsBucketingConfig_Bucket();
  InitDefaultsBucketingConfig();
  InitDefaultsCryptoReplaceFfxFpeConfig();
  InitDefaultsCryptoKey();
  InitDefaultsTransientCryptoKey();
  InitDefaultsUnwrappedCryptoKey();
  InitDefaultsKmsWrappedCryptoKey();
  InitDefaultsInfoTypeTransformations_InfoTypeTransformation();
  InitDefaultsInfoTypeTransformations();
  InitDefaultsFieldTransformation();
  InitDefaultsRecordTransformations();
  InitDefaultsRecordSuppression();
  InitDefaultsRecordCondition_Condition();
  InitDefaultsRecordCondition_Conditions();
  InitDefaultsRecordCondition_Expressions();
  InitDefaultsRecordCondition();
  InitDefaultsDeidentificationSummary();
  InitDefaultsTransformationSummary_SummaryResult();
  InitDefaultsTransformationSummary();
}
}  // namespace protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto
namespace google {
namespace privacy {
namespace dlp {
namespace v2beta1 {
class AnalyzeDataSourceRiskRequest;
class AnalyzeDataSourceRiskRequestDefaultTypeInternal;
extern AnalyzeDataSourceRiskRequestDefaultTypeInternal _AnalyzeDataSourceRiskRequest_default_instance_;
class BucketingConfig;
class BucketingConfigDefaultTypeInternal;
extern BucketingConfigDefaultTypeInternal _BucketingConfig_default_instance_;
class BucketingConfig_Bucket;
class BucketingConfig_BucketDefaultTypeInternal;
extern BucketingConfig_BucketDefaultTypeInternal _BucketingConfig_Bucket_default_instance_;
class CategoryDescription;
class CategoryDescriptionDefaultTypeInternal;
extern CategoryDescriptionDefaultTypeInternal _CategoryDescription_default_instance_;
class CharacterMaskConfig;
class CharacterMaskConfigDefaultTypeInternal;
extern CharacterMaskConfigDefaultTypeInternal _CharacterMaskConfig_default_instance_;
class CharsToIgnore;
class CharsToIgnoreDefaultTypeInternal;
extern CharsToIgnoreDefaultTypeInternal _CharsToIgnore_default_instance_;
class Color;
class ColorDefaultTypeInternal;
extern ColorDefaultTypeInternal _Color_default_instance_;
class ContentItem;
class ContentItemDefaultTypeInternal;
extern ContentItemDefaultTypeInternal _ContentItem_default_instance_;
class CreateInspectOperationRequest;
class CreateInspectOperationRequestDefaultTypeInternal;
extern CreateInspectOperationRequestDefaultTypeInternal _CreateInspectOperationRequest_default_instance_;
class CryptoHashConfig;
class CryptoHashConfigDefaultTypeInternal;
extern CryptoHashConfigDefaultTypeInternal _CryptoHashConfig_default_instance_;
class CryptoKey;
class CryptoKeyDefaultTypeInternal;
extern CryptoKeyDefaultTypeInternal _CryptoKey_default_instance_;
class CryptoReplaceFfxFpeConfig;
class CryptoReplaceFfxFpeConfigDefaultTypeInternal;
extern CryptoReplaceFfxFpeConfigDefaultTypeInternal _CryptoReplaceFfxFpeConfig_default_instance_;
class DeidentificationSummary;
class DeidentificationSummaryDefaultTypeInternal;
extern DeidentificationSummaryDefaultTypeInternal _DeidentificationSummary_default_instance_;
class DeidentifyConfig;
class DeidentifyConfigDefaultTypeInternal;
extern DeidentifyConfigDefaultTypeInternal _DeidentifyConfig_default_instance_;
class DeidentifyContentRequest;
class DeidentifyContentRequestDefaultTypeInternal;
extern DeidentifyContentRequestDefaultTypeInternal _DeidentifyContentRequest_default_instance_;
class DeidentifyContentResponse;
class DeidentifyContentResponseDefaultTypeInternal;
extern DeidentifyContentResponseDefaultTypeInternal _DeidentifyContentResponse_default_instance_;
class FieldTransformation;
class FieldTransformationDefaultTypeInternal;
extern FieldTransformationDefaultTypeInternal _FieldTransformation_default_instance_;
class Finding;
class FindingDefaultTypeInternal;
extern FindingDefaultTypeInternal _Finding_default_instance_;
class FixedSizeBucketingConfig;
class FixedSizeBucketingConfigDefaultTypeInternal;
extern FixedSizeBucketingConfigDefaultTypeInternal _FixedSizeBucketingConfig_default_instance_;
class ImageLocation;
class ImageLocationDefaultTypeInternal;
extern ImageLocationDefaultTypeInternal _ImageLocation_default_instance_;
class InfoTypeDescription;
class InfoTypeDescriptionDefaultTypeInternal;
extern InfoTypeDescriptionDefaultTypeInternal _InfoTypeDescription_default_instance_;
class InfoTypeStatistics;
class InfoTypeStatisticsDefaultTypeInternal;
extern InfoTypeStatisticsDefaultTypeInternal _InfoTypeStatistics_default_instance_;
class InfoTypeTransformations;
class InfoTypeTransformationsDefaultTypeInternal;
extern InfoTypeTransformationsDefaultTypeInternal _InfoTypeTransformations_default_instance_;
class InfoTypeTransformations_InfoTypeTransformation;
class InfoTypeTransformations_InfoTypeTransformationDefaultTypeInternal;
extern InfoTypeTransformations_InfoTypeTransformationDefaultTypeInternal _InfoTypeTransformations_InfoTypeTransformation_default_instance_;
class InspectConfig;
class InspectConfigDefaultTypeInternal;
extern InspectConfigDefaultTypeInternal _InspectConfig_default_instance_;
class InspectConfig_InfoTypeLimit;
class InspectConfig_InfoTypeLimitDefaultTypeInternal;
extern InspectConfig_InfoTypeLimitDefaultTypeInternal _InspectConfig_InfoTypeLimit_default_instance_;
class InspectContentRequest;
class InspectContentRequestDefaultTypeInternal;
extern InspectContentRequestDefaultTypeInternal _InspectContentRequest_default_instance_;
class InspectContentResponse;
class InspectContentResponseDefaultTypeInternal;
extern InspectContentResponseDefaultTypeInternal _InspectContentResponse_default_instance_;
class InspectOperationMetadata;
class InspectOperationMetadataDefaultTypeInternal;
extern InspectOperationMetadataDefaultTypeInternal _InspectOperationMetadata_default_instance_;
class InspectOperationResult;
class InspectOperationResultDefaultTypeInternal;
extern InspectOperationResultDefaultTypeInternal _InspectOperationResult_default_instance_;
class InspectResult;
class InspectResultDefaultTypeInternal;
extern InspectResultDefaultTypeInternal _InspectResult_default_instance_;
class KmsWrappedCryptoKey;
class KmsWrappedCryptoKeyDefaultTypeInternal;
extern KmsWrappedCryptoKeyDefaultTypeInternal _KmsWrappedCryptoKey_default_instance_;
class ListInfoTypesRequest;
class ListInfoTypesRequestDefaultTypeInternal;
extern ListInfoTypesRequestDefaultTypeInternal _ListInfoTypesRequest_default_instance_;
class ListInfoTypesResponse;
class ListInfoTypesResponseDefaultTypeInternal;
extern ListInfoTypesResponseDefaultTypeInternal _ListInfoTypesResponse_default_instance_;
class ListInspectFindingsRequest;
class ListInspectFindingsRequestDefaultTypeInternal;
extern ListInspectFindingsRequestDefaultTypeInternal _ListInspectFindingsRequest_default_instance_;
class ListInspectFindingsResponse;
class ListInspectFindingsResponseDefaultTypeInternal;
extern ListInspectFindingsResponseDefaultTypeInternal _ListInspectFindingsResponse_default_instance_;
class ListRootCategoriesRequest;
class ListRootCategoriesRequestDefaultTypeInternal;
extern ListRootCategoriesRequestDefaultTypeInternal _ListRootCategoriesRequest_default_instance_;
class ListRootCategoriesResponse;
class ListRootCategoriesResponseDefaultTypeInternal;
extern ListRootCategoriesResponseDefaultTypeInternal _ListRootCategoriesResponse_default_instance_;
class Location;
class LocationDefaultTypeInternal;
extern LocationDefaultTypeInternal _Location_default_instance_;
class OperationConfig;
class OperationConfigDefaultTypeInternal;
extern OperationConfigDefaultTypeInternal _OperationConfig_default_instance_;
class OutputStorageConfig;
class OutputStorageConfigDefaultTypeInternal;
extern OutputStorageConfigDefaultTypeInternal _OutputStorageConfig_default_instance_;
class PrimitiveTransformation;
class PrimitiveTransformationDefaultTypeInternal;
extern PrimitiveTransformationDefaultTypeInternal _PrimitiveTransformation_default_instance_;
class PrivacyMetric;
class PrivacyMetricDefaultTypeInternal;
extern PrivacyMetricDefaultTypeInternal _PrivacyMetric_default_instance_;
class PrivacyMetric_CategoricalStatsConfig;
class PrivacyMetric_CategoricalStatsConfigDefaultTypeInternal;
extern PrivacyMetric_CategoricalStatsConfigDefaultTypeInternal _PrivacyMetric_CategoricalStatsConfig_default_instance_;
class PrivacyMetric_KAnonymityConfig;
class PrivacyMetric_KAnonymityConfigDefaultTypeInternal;
extern PrivacyMetric_KAnonymityConfigDefaultTypeInternal _PrivacyMetric_KAnonymityConfig_default_instance_;
class PrivacyMetric_LDiversityConfig;
class PrivacyMetric_LDiversityConfigDefaultTypeInternal;
extern PrivacyMetric_LDiversityConfigDefaultTypeInternal _PrivacyMetric_LDiversityConfig_default_instance_;
class PrivacyMetric_NumericalStatsConfig;
class PrivacyMetric_NumericalStatsConfigDefaultTypeInternal;
extern PrivacyMetric_NumericalStatsConfigDefaultTypeInternal _PrivacyMetric_NumericalStatsConfig_default_instance_;
class Range;
class RangeDefaultTypeInternal;
extern RangeDefaultTypeInternal _Range_default_instance_;
class RecordCondition;
class RecordConditionDefaultTypeInternal;
extern RecordConditionDefaultTypeInternal _RecordCondition_default_instance_;
class RecordCondition_Condition;
class RecordCondition_ConditionDefaultTypeInternal;
extern RecordCondition_ConditionDefaultTypeInternal _RecordCondition_Condition_default_instance_;
class RecordCondition_Conditions;
class RecordCondition_ConditionsDefaultTypeInternal;
extern RecordCondition_ConditionsDefaultTypeInternal _RecordCondition_Conditions_default_instance_;
class RecordCondition_Expressions;
class RecordCondition_ExpressionsDefaultTypeInternal;
extern RecordCondition_ExpressionsDefaultTypeInternal _RecordCondition_Expressions_default_instance_;
class RecordSuppression;
class RecordSuppressionDefaultTypeInternal;
extern RecordSuppressionDefaultTypeInternal _RecordSuppression_default_instance_;
class RecordTransformations;
class RecordTransformationsDefaultTypeInternal;
extern RecordTransformationsDefaultTypeInternal _RecordTransformations_default_instance_;
class RedactConfig;
class RedactConfigDefaultTypeInternal;
extern RedactConfigDefaultTypeInternal _RedactConfig_default_instance_;
class RedactContentRequest;
class RedactContentRequestDefaultTypeInternal;
extern RedactContentRequestDefaultTypeInternal _RedactContentRequest_default_instance_;
class RedactContentRequest_ImageRedactionConfig;
class RedactContentRequest_ImageRedactionConfigDefaultTypeInternal;
extern RedactContentRequest_ImageRedactionConfigDefaultTypeInternal _RedactContentRequest_ImageRedactionConfig_default_instance_;
class RedactContentRequest_ReplaceConfig;
class RedactContentRequest_ReplaceConfigDefaultTypeInternal;
extern RedactContentRequest_ReplaceConfigDefaultTypeInternal _RedactContentRequest_ReplaceConfig_default_instance_;
class RedactContentResponse;
class RedactContentResponseDefaultTypeInternal;
extern RedactContentResponseDefaultTypeInternal _RedactContentResponse_default_instance_;
class ReplaceValueConfig;
class ReplaceValueConfigDefaultTypeInternal;
extern ReplaceValueConfigDefaultTypeInternal _ReplaceValueConfig_default_instance_;
class ReplaceWithInfoTypeConfig;
class ReplaceWithInfoTypeConfigDefaultTypeInternal;
extern ReplaceWithInfoTypeConfigDefaultTypeInternal _ReplaceWithInfoTypeConfig_default_instance_;
class RiskAnalysisOperationMetadata;
class RiskAnalysisOperationMetadataDefaultTypeInternal;
extern RiskAnalysisOperationMetadataDefaultTypeInternal _RiskAnalysisOperationMetadata_default_instance_;
class RiskAnalysisOperationResult;
class RiskAnalysisOperationResultDefaultTypeInternal;
extern RiskAnalysisOperationResultDefaultTypeInternal _RiskAnalysisOperationResult_default_instance_;
class RiskAnalysisOperationResult_CategoricalStatsResult;
class RiskAnalysisOperationResult_CategoricalStatsResultDefaultTypeInternal;
extern RiskAnalysisOperationResult_CategoricalStatsResultDefaultTypeInternal _RiskAnalysisOperationResult_CategoricalStatsResult_default_instance_;
class RiskAnalysisOperationResult_CategoricalStatsResult_CategoricalStatsHistogramBucket;
class RiskAnalysisOperationResult_CategoricalStatsResult_CategoricalStatsHistogramBucketDefaultTypeInternal;
extern RiskAnalysisOperationResult_CategoricalStatsResult_CategoricalStatsHistogramBucketDefaultTypeInternal _RiskAnalysisOperationResult_CategoricalStatsResult_CategoricalStatsHistogramBucket_default_instance_;
class RiskAnalysisOperationResult_KAnonymityResult;
class RiskAnalysisOperationResult_KAnonymityResultDefaultTypeInternal;
extern RiskAnalysisOperationResult_KAnonymityResultDefaultTypeInternal _RiskAnalysisOperationResult_KAnonymityResult_default_instance_;
class RiskAnalysisOperationResult_KAnonymityResult_KAnonymityEquivalenceClass;
class RiskAnalysisOperationResult_KAnonymityResult_KAnonymityEquivalenceClassDefaultTypeInternal;
extern RiskAnalysisOperationResult_KAnonymityResult_KAnonymityEquivalenceClassDefaultTypeInternal _RiskAnalysisOperationResult_KAnonymityResult_KAnonymityEquivalenceClass_default_instance_;
class RiskAnalysisOperationResult_KAnonymityResult_KAnonymityHistogramBucket;
class RiskAnalysisOperationResult_KAnonymityResult_KAnonymityHistogramBucketDefaultTypeInternal;
extern RiskAnalysisOperationResult_KAnonymityResult_KAnonymityHistogramBucketDefaultTypeInternal _RiskAnalysisOperationResult_KAnonymityResult_KAnonymityHistogramBucket_default_instance_;
class RiskAnalysisOperationResult_LDiversityResult;
class RiskAnalysisOperationResult_LDiversityResultDefaultTypeInternal;
extern RiskAnalysisOperationResult_LDiversityResultDefaultTypeInternal _RiskAnalysisOperationResult_LDiversityResult_default_instance_;
class RiskAnalysisOperationResult_LDiversityResult_LDiversityEquivalenceClass;
class RiskAnalysisOperationResult_LDiversityResult_LDiversityEquivalenceClassDefaultTypeInternal;
extern RiskAnalysisOperationResult_LDiversityResult_LDiversityEquivalenceClassDefaultTypeInternal _RiskAnalysisOperationResult_LDiversityResult_LDiversityEquivalenceClass_default_instance_;
class RiskAnalysisOperationResult_LDiversityResult_LDiversityHistogramBucket;
class RiskAnalysisOperationResult_LDiversityResult_LDiversityHistogramBucketDefaultTypeInternal;
extern RiskAnalysisOperationResult_LDiversityResult_LDiversityHistogramBucketDefaultTypeInternal _RiskAnalysisOperationResult_LDiversityResult_LDiversityHistogramBucket_default_instance_;
class RiskAnalysisOperationResult_NumericalStatsResult;
class RiskAnalysisOperationResult_NumericalStatsResultDefaultTypeInternal;
extern RiskAnalysisOperationResult_NumericalStatsResultDefaultTypeInternal _RiskAnalysisOperationResult_NumericalStatsResult_default_instance_;
class Table;
class TableDefaultTypeInternal;
extern TableDefaultTypeInternal _Table_default_instance_;
class TableLocation;
class TableLocationDefaultTypeInternal;
extern TableLocationDefaultTypeInternal _TableLocation_default_instance_;
class Table_Row;
class Table_RowDefaultTypeInternal;
extern Table_RowDefaultTypeInternal _Table_Row_default_instance_;
class TimePartConfig;
class TimePartConfigDefaultTypeInternal;
extern TimePartConfigDefaultTypeInternal _TimePartConfig_default_instance_;
class TransformationSummary;
class TransformationSummaryDefaultTypeInternal;
extern TransformationSummaryDefaultTypeInternal _TransformationSummary_default_instance_;
class TransformationSummary_SummaryResult;
class TransformationSummary_SummaryResultDefaultTypeInternal;
extern TransformationSummary_SummaryResultDefaultTypeInternal _TransformationSummary_SummaryResult_default_instance_;
class TransientCryptoKey;
class TransientCryptoKeyDefaultTypeInternal;
extern TransientCryptoKeyDefaultTypeInternal _TransientCryptoKey_default_instance_;
class UnwrappedCryptoKey;
class UnwrappedCryptoKeyDefaultTypeInternal;
extern UnwrappedCryptoKeyDefaultTypeInternal _UnwrappedCryptoKey_default_instance_;
class Value;
class ValueDefaultTypeInternal;
extern ValueDefaultTypeInternal _Value_default_instance_;
class ValueFrequency;
class ValueFrequencyDefaultTypeInternal;
extern ValueFrequencyDefaultTypeInternal _ValueFrequency_default_instance_;
}  // namespace v2beta1
}  // namespace dlp
}  // namespace privacy
}  // namespace google
namespace google {
namespace privacy {
namespace dlp {
namespace v2beta1 {

enum TimePartConfig_TimePart {
  TimePartConfig_TimePart_TIME_PART_UNSPECIFIED = 0,
  TimePartConfig_TimePart_YEAR = 1,
  TimePartConfig_TimePart_MONTH = 2,
  TimePartConfig_TimePart_DAY_OF_MONTH = 3,
  TimePartConfig_TimePart_DAY_OF_WEEK = 4,
  TimePartConfig_TimePart_WEEK_OF_YEAR = 5,
  TimePartConfig_TimePart_HOUR_OF_DAY = 6,
  TimePartConfig_TimePart_TimePartConfig_TimePart_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  TimePartConfig_TimePart_TimePartConfig_TimePart_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool TimePartConfig_TimePart_IsValid(int value);
const TimePartConfig_TimePart TimePartConfig_TimePart_TimePart_MIN = TimePartConfig_TimePart_TIME_PART_UNSPECIFIED;
const TimePartConfig_TimePart TimePartConfig_TimePart_TimePart_MAX = TimePartConfig_TimePart_HOUR_OF_DAY;
const int TimePartConfig_TimePart_TimePart_ARRAYSIZE = TimePartConfig_TimePart_TimePart_MAX + 1;

const ::google::protobuf::EnumDescriptor* TimePartConfig_TimePart_descriptor();
inline const ::std::string& TimePartConfig_TimePart_Name(TimePartConfig_TimePart value) {
  return ::google::protobuf::internal::NameOfEnum(
    TimePartConfig_TimePart_descriptor(), value);
}
inline bool TimePartConfig_TimePart_Parse(
    const ::std::string& name, TimePartConfig_TimePart* value) {
  return ::google::protobuf::internal::ParseNamedEnum<TimePartConfig_TimePart>(
    TimePartConfig_TimePart_descriptor(), name, value);
}
enum CharsToIgnore_CharacterGroup {
  CharsToIgnore_CharacterGroup_CHARACTER_GROUP_UNSPECIFIED = 0,
  CharsToIgnore_CharacterGroup_NUMERIC = 1,
  CharsToIgnore_CharacterGroup_ALPHA_UPPER_CASE = 2,
  CharsToIgnore_CharacterGroup_ALPHA_LOWER_CASE = 3,
  CharsToIgnore_CharacterGroup_PUNCTUATION = 4,
  CharsToIgnore_CharacterGroup_WHITESPACE = 5,
  CharsToIgnore_CharacterGroup_CharsToIgnore_CharacterGroup_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  CharsToIgnore_CharacterGroup_CharsToIgnore_CharacterGroup_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool CharsToIgnore_CharacterGroup_IsValid(int value);
const CharsToIgnore_CharacterGroup CharsToIgnore_CharacterGroup_CharacterGroup_MIN = CharsToIgnore_CharacterGroup_CHARACTER_GROUP_UNSPECIFIED;
const CharsToIgnore_CharacterGroup CharsToIgnore_CharacterGroup_CharacterGroup_MAX = CharsToIgnore_CharacterGroup_WHITESPACE;
const int CharsToIgnore_CharacterGroup_CharacterGroup_ARRAYSIZE = CharsToIgnore_CharacterGroup_CharacterGroup_MAX + 1;

const ::google::protobuf::EnumDescriptor* CharsToIgnore_CharacterGroup_descriptor();
inline const ::std::string& CharsToIgnore_CharacterGroup_Name(CharsToIgnore_CharacterGroup value) {
  return ::google::protobuf::internal::NameOfEnum(
    CharsToIgnore_CharacterGroup_descriptor(), value);
}
inline bool CharsToIgnore_CharacterGroup_Parse(
    const ::std::string& name, CharsToIgnore_CharacterGroup* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CharsToIgnore_CharacterGroup>(
    CharsToIgnore_CharacterGroup_descriptor(), name, value);
}
enum CryptoReplaceFfxFpeConfig_FfxCommonNativeAlphabet {
  CryptoReplaceFfxFpeConfig_FfxCommonNativeAlphabet_FFX_COMMON_NATIVE_ALPHABET_UNSPECIFIED = 0,
  CryptoReplaceFfxFpeConfig_FfxCommonNativeAlphabet_NUMERIC = 1,
  CryptoReplaceFfxFpeConfig_FfxCommonNativeAlphabet_HEXADECIMAL = 2,
  CryptoReplaceFfxFpeConfig_FfxCommonNativeAlphabet_UPPER_CASE_ALPHA_NUMERIC = 3,
  CryptoReplaceFfxFpeConfig_FfxCommonNativeAlphabet_ALPHA_NUMERIC = 4,
  CryptoReplaceFfxFpeConfig_FfxCommonNativeAlphabet_CryptoReplaceFfxFpeConfig_FfxCommonNativeAlphabet_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  CryptoReplaceFfxFpeConfig_FfxCommonNativeAlphabet_CryptoReplaceFfxFpeConfig_FfxCommonNativeAlphabet_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool CryptoReplaceFfxFpeConfig_FfxCommonNativeAlphabet_IsValid(int value);
const CryptoReplaceFfxFpeConfig_FfxCommonNativeAlphabet CryptoReplaceFfxFpeConfig_FfxCommonNativeAlphabet_FfxCommonNativeAlphabet_MIN = CryptoReplaceFfxFpeConfig_FfxCommonNativeAlphabet_FFX_COMMON_NATIVE_ALPHABET_UNSPECIFIED;
const CryptoReplaceFfxFpeConfig_FfxCommonNativeAlphabet CryptoReplaceFfxFpeConfig_FfxCommonNativeAlphabet_FfxCommonNativeAlphabet_MAX = CryptoReplaceFfxFpeConfig_FfxCommonNativeAlphabet_ALPHA_NUMERIC;
const int CryptoReplaceFfxFpeConfig_FfxCommonNativeAlphabet_FfxCommonNativeAlphabet_ARRAYSIZE = CryptoReplaceFfxFpeConfig_FfxCommonNativeAlphabet_FfxCommonNativeAlphabet_MAX + 1;

const ::google::protobuf::EnumDescriptor* CryptoReplaceFfxFpeConfig_FfxCommonNativeAlphabet_descriptor();
inline const ::std::string& CryptoReplaceFfxFpeConfig_FfxCommonNativeAlphabet_Name(CryptoReplaceFfxFpeConfig_FfxCommonNativeAlphabet value) {
  return ::google::protobuf::internal::NameOfEnum(
    CryptoReplaceFfxFpeConfig_FfxCommonNativeAlphabet_descriptor(), value);
}
inline bool CryptoReplaceFfxFpeConfig_FfxCommonNativeAlphabet_Parse(
    const ::std::string& name, CryptoReplaceFfxFpeConfig_FfxCommonNativeAlphabet* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CryptoReplaceFfxFpeConfig_FfxCommonNativeAlphabet>(
    CryptoReplaceFfxFpeConfig_FfxCommonNativeAlphabet_descriptor(), name, value);
}
enum RecordCondition_Expressions_LogicalOperator {
  RecordCondition_Expressions_LogicalOperator_LOGICAL_OPERATOR_UNSPECIFIED = 0,
  RecordCondition_Expressions_LogicalOperator_AND = 1,
  RecordCondition_Expressions_LogicalOperator_RecordCondition_Expressions_LogicalOperator_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  RecordCondition_Expressions_LogicalOperator_RecordCondition_Expressions_LogicalOperator_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool RecordCondition_Expressions_LogicalOperator_IsValid(int value);
const RecordCondition_Expressions_LogicalOperator RecordCondition_Expressions_LogicalOperator_LogicalOperator_MIN = RecordCondition_Expressions_LogicalOperator_LOGICAL_OPERATOR_UNSPECIFIED;
const RecordCondition_Expressions_LogicalOperator RecordCondition_Expressions_LogicalOperator_LogicalOperator_MAX = RecordCondition_Expressions_LogicalOperator_AND;
const int RecordCondition_Expressions_LogicalOperator_LogicalOperator_ARRAYSIZE = RecordCondition_Expressions_LogicalOperator_LogicalOperator_MAX + 1;

const ::google::protobuf::EnumDescriptor* RecordCondition_Expressions_LogicalOperator_descriptor();
inline const ::std::string& RecordCondition_Expressions_LogicalOperator_Name(RecordCondition_Expressions_LogicalOperator value) {
  return ::google::protobuf::internal::NameOfEnum(
    RecordCondition_Expressions_LogicalOperator_descriptor(), value);
}
inline bool RecordCondition_Expressions_LogicalOperator_Parse(
    const ::std::string& name, RecordCondition_Expressions_LogicalOperator* value) {
  return ::google::protobuf::internal::ParseNamedEnum<RecordCondition_Expressions_LogicalOperator>(
    RecordCondition_Expressions_LogicalOperator_descriptor(), name, value);
}
enum TransformationSummary_TransformationResultCode {
  TransformationSummary_TransformationResultCode_TRANSFORMATION_RESULT_CODE_UNSPECIFIED = 0,
  TransformationSummary_TransformationResultCode_SUCCESS = 1,
  TransformationSummary_TransformationResultCode_ERROR = 2,
  TransformationSummary_TransformationResultCode_TransformationSummary_TransformationResultCode_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  TransformationSummary_TransformationResultCode_TransformationSummary_TransformationResultCode_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool TransformationSummary_TransformationResultCode_IsValid(int value);
const TransformationSummary_TransformationResultCode TransformationSummary_TransformationResultCode_TransformationResultCode_MIN = TransformationSummary_TransformationResultCode_TRANSFORMATION_RESULT_CODE_UNSPECIFIED;
const TransformationSummary_TransformationResultCode TransformationSummary_TransformationResultCode_TransformationResultCode_MAX = TransformationSummary_TransformationResultCode_ERROR;
const int TransformationSummary_TransformationResultCode_TransformationResultCode_ARRAYSIZE = TransformationSummary_TransformationResultCode_TransformationResultCode_MAX + 1;

const ::google::protobuf::EnumDescriptor* TransformationSummary_TransformationResultCode_descriptor();
inline const ::std::string& TransformationSummary_TransformationResultCode_Name(TransformationSummary_TransformationResultCode value) {
  return ::google::protobuf::internal::NameOfEnum(
    TransformationSummary_TransformationResultCode_descriptor(), value);
}
inline bool TransformationSummary_TransformationResultCode_Parse(
    const ::std::string& name, TransformationSummary_TransformationResultCode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<TransformationSummary_TransformationResultCode>(
    TransformationSummary_TransformationResultCode_descriptor(), name, value);
}
enum Likelihood {
  LIKELIHOOD_UNSPECIFIED = 0,
  VERY_UNLIKELY = 1,
  UNLIKELY = 2,
  POSSIBLE = 3,
  LIKELY = 4,
  VERY_LIKELY = 5,
  Likelihood_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  Likelihood_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool Likelihood_IsValid(int value);
const Likelihood Likelihood_MIN = LIKELIHOOD_UNSPECIFIED;
const Likelihood Likelihood_MAX = VERY_LIKELY;
const int Likelihood_ARRAYSIZE = Likelihood_MAX + 1;

const ::google::protobuf::EnumDescriptor* Likelihood_descriptor();
inline const ::std::string& Likelihood_Name(Likelihood value) {
  return ::google::protobuf::internal::NameOfEnum(
    Likelihood_descriptor(), value);
}
inline bool Likelihood_Parse(
    const ::std::string& name, Likelihood* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Likelihood>(
    Likelihood_descriptor(), name, value);
}
enum RelationalOperator {
  RELATIONAL_OPERATOR_UNSPECIFIED = 0,
  EQUAL_TO = 1,
  NOT_EQUAL_TO = 2,
  GREATER_THAN = 3,
  LESS_THAN = 4,
  GREATER_THAN_OR_EQUALS = 5,
  LESS_THAN_OR_EQUALS = 6,
  EXISTS = 7,
  RelationalOperator_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  RelationalOperator_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool RelationalOperator_IsValid(int value);
const RelationalOperator RelationalOperator_MIN = RELATIONAL_OPERATOR_UNSPECIFIED;
const RelationalOperator RelationalOperator_MAX = EXISTS;
const int RelationalOperator_ARRAYSIZE = RelationalOperator_MAX + 1;

const ::google::protobuf::EnumDescriptor* RelationalOperator_descriptor();
inline const ::std::string& RelationalOperator_Name(RelationalOperator value) {
  return ::google::protobuf::internal::NameOfEnum(
    RelationalOperator_descriptor(), value);
}
inline bool RelationalOperator_Parse(
    const ::std::string& name, RelationalOperator* value) {
  return ::google::protobuf::internal::ParseNamedEnum<RelationalOperator>(
    RelationalOperator_descriptor(), name, value);
}
// ===================================================================

class InspectConfig_InfoTypeLimit : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.privacy.dlp.v2beta1.InspectConfig.InfoTypeLimit) */ {
 public:
  InspectConfig_InfoTypeLimit();
  virtual ~InspectConfig_InfoTypeLimit();

  InspectConfig_InfoTypeLimit(const InspectConfig_InfoTypeLimit& from);

  inline InspectConfig_InfoTypeLimit& operator=(const InspectConfig_InfoTypeLimit& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  InspectConfig_InfoTypeLimit(InspectConfig_InfoTypeLimit&& from) noexcept
    : InspectConfig_InfoTypeLimit() {
    *this = ::std::move(from);
  }

  inline InspectConfig_InfoTypeLimit& operator=(InspectConfig_InfoTypeLimit&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const InspectConfig_InfoTypeLimit& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const InspectConfig_InfoTypeLimit* internal_default_instance() {
    return reinterpret_cast<const InspectConfig_InfoTypeLimit*>(
               &_InspectConfig_InfoTypeLimit_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(InspectConfig_InfoTypeLimit* other);
  friend void swap(InspectConfig_InfoTypeLimit& a, InspectConfig_InfoTypeLimit& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline InspectConfig_InfoTypeLimit* New() const PROTOBUF_FINAL { return New(NULL); }

  InspectConfig_InfoTypeLimit* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const InspectConfig_InfoTypeLimit& from);
  void MergeFrom(const InspectConfig_InfoTypeLimit& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(InspectConfig_InfoTypeLimit* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.privacy.dlp.v2beta1.InfoType info_type = 1;
  bool has_info_type() const;
  void clear_info_type();
  static const int kInfoTypeFieldNumber = 1;
  const ::google::privacy::dlp::v2beta1::InfoType& info_type() const;
  ::google::privacy::dlp::v2beta1::InfoType* release_info_type();
  ::google::privacy::dlp::v2beta1::InfoType* mutable_info_type();
  void set_allocated_info_type(::google::privacy::dlp::v2beta1::InfoType* info_type);

  // int32 max_findings = 2;
  void clear_max_findings();
  static const int kMaxFindingsFieldNumber = 2;
  ::google::protobuf::int32 max_findings() const;
  void set_max_findings(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:google.privacy.dlp.v2beta1.InspectConfig.InfoTypeLimit)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::privacy::dlp::v2beta1::InfoType* info_type_;
  ::google::protobuf::int32 max_findings_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::TableStruct;
  friend void ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaultsInspectConfig_InfoTypeLimitImpl();
};
// -------------------------------------------------------------------

class InspectConfig : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.privacy.dlp.v2beta1.InspectConfig) */ {
 public:
  InspectConfig();
  virtual ~InspectConfig();

  InspectConfig(const InspectConfig& from);

  inline InspectConfig& operator=(const InspectConfig& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  InspectConfig(InspectConfig&& from) noexcept
    : InspectConfig() {
    *this = ::std::move(from);
  }

  inline InspectConfig& operator=(InspectConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const InspectConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const InspectConfig* internal_default_instance() {
    return reinterpret_cast<const InspectConfig*>(
               &_InspectConfig_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(InspectConfig* other);
  friend void swap(InspectConfig& a, InspectConfig& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline InspectConfig* New() const PROTOBUF_FINAL { return New(NULL); }

  InspectConfig* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const InspectConfig& from);
  void MergeFrom(const InspectConfig& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(InspectConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef InspectConfig_InfoTypeLimit InfoTypeLimit;

  // accessors -------------------------------------------------------

  // repeated .google.privacy.dlp.v2beta1.InfoType info_types = 1;
  int info_types_size() const;
  void clear_info_types();
  static const int kInfoTypesFieldNumber = 1;
  const ::google::privacy::dlp::v2beta1::InfoType& info_types(int index) const;
  ::google::privacy::dlp::v2beta1::InfoType* mutable_info_types(int index);
  ::google::privacy::dlp::v2beta1::InfoType* add_info_types();
  ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2beta1::InfoType >*
      mutable_info_types();
  const ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2beta1::InfoType >&
      info_types() const;

  // repeated .google.privacy.dlp.v2beta1.InspectConfig.InfoTypeLimit info_type_limits = 7;
  int info_type_limits_size() const;
  void clear_info_type_limits();
  static const int kInfoTypeLimitsFieldNumber = 7;
  const ::google::privacy::dlp::v2beta1::InspectConfig_InfoTypeLimit& info_type_limits(int index) const;
  ::google::privacy::dlp::v2beta1::InspectConfig_InfoTypeLimit* mutable_info_type_limits(int index);
  ::google::privacy::dlp::v2beta1::InspectConfig_InfoTypeLimit* add_info_type_limits();
  ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2beta1::InspectConfig_InfoTypeLimit >*
      mutable_info_type_limits();
  const ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2beta1::InspectConfig_InfoTypeLimit >&
      info_type_limits() const;

  // .google.privacy.dlp.v2beta1.Likelihood min_likelihood = 2;
  void clear_min_likelihood();
  static const int kMinLikelihoodFieldNumber = 2;
  ::google::privacy::dlp::v2beta1::Likelihood min_likelihood() const;
  void set_min_likelihood(::google::privacy::dlp::v2beta1::Likelihood value);

  // int32 max_findings = 3;
  void clear_max_findings();
  static const int kMaxFindingsFieldNumber = 3;
  ::google::protobuf::int32 max_findings() const;
  void set_max_findings(::google::protobuf::int32 value);

  // bool include_quote = 4;
  void clear_include_quote();
  static const int kIncludeQuoteFieldNumber = 4;
  bool include_quote() const;
  void set_include_quote(bool value);

  // bool exclude_types = 6;
  void clear_exclude_types();
  static const int kExcludeTypesFieldNumber = 6;
  bool exclude_types() const;
  void set_exclude_types(bool value);

  // @@protoc_insertion_point(class_scope:google.privacy.dlp.v2beta1.InspectConfig)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2beta1::InfoType > info_types_;
  ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2beta1::InspectConfig_InfoTypeLimit > info_type_limits_;
  int min_likelihood_;
  ::google::protobuf::int32 max_findings_;
  bool include_quote_;
  bool exclude_types_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::TableStruct;
  friend void ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaultsInspectConfigImpl();
};
// -------------------------------------------------------------------

class OperationConfig : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.privacy.dlp.v2beta1.OperationConfig) */ {
 public:
  OperationConfig();
  virtual ~OperationConfig();

  OperationConfig(const OperationConfig& from);

  inline OperationConfig& operator=(const OperationConfig& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  OperationConfig(OperationConfig&& from) noexcept
    : OperationConfig() {
    *this = ::std::move(from);
  }

  inline OperationConfig& operator=(OperationConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const OperationConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OperationConfig* internal_default_instance() {
    return reinterpret_cast<const OperationConfig*>(
               &_OperationConfig_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(OperationConfig* other);
  friend void swap(OperationConfig& a, OperationConfig& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline OperationConfig* New() const PROTOBUF_FINAL { return New(NULL); }

  OperationConfig* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const OperationConfig& from);
  void MergeFrom(const OperationConfig& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(OperationConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int64 max_item_findings = 1;
  void clear_max_item_findings();
  static const int kMaxItemFindingsFieldNumber = 1;
  ::google::protobuf::int64 max_item_findings() const;
  void set_max_item_findings(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:google.privacy.dlp.v2beta1.OperationConfig)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int64 max_item_findings_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::TableStruct;
  friend void ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaultsOperationConfigImpl();
};
// -------------------------------------------------------------------

class ContentItem : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.privacy.dlp.v2beta1.ContentItem) */ {
 public:
  ContentItem();
  virtual ~ContentItem();

  ContentItem(const ContentItem& from);

  inline ContentItem& operator=(const ContentItem& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ContentItem(ContentItem&& from) noexcept
    : ContentItem() {
    *this = ::std::move(from);
  }

  inline ContentItem& operator=(ContentItem&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ContentItem& default_instance();

  enum DataItemCase {
    kData = 2,
    kValue = 3,
    kTable = 4,
    DATA_ITEM_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ContentItem* internal_default_instance() {
    return reinterpret_cast<const ContentItem*>(
               &_ContentItem_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(ContentItem* other);
  friend void swap(ContentItem& a, ContentItem& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ContentItem* New() const PROTOBUF_FINAL { return New(NULL); }

  ContentItem* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ContentItem& from);
  void MergeFrom(const ContentItem& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ContentItem* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string type = 1;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  const ::std::string& type() const;
  void set_type(const ::std::string& value);
  #if LANG_CXX11
  void set_type(::std::string&& value);
  #endif
  void set_type(const char* value);
  void set_type(const char* value, size_t size);
  ::std::string* mutable_type();
  ::std::string* release_type();
  void set_allocated_type(::std::string* type);

  // bytes data = 2;
  private:
  bool has_data() const;
  public:
  void clear_data();
  static const int kDataFieldNumber = 2;
  const ::std::string& data() const;
  void set_data(const ::std::string& value);
  #if LANG_CXX11
  void set_data(::std::string&& value);
  #endif
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  ::std::string* mutable_data();
  ::std::string* release_data();
  void set_allocated_data(::std::string* data);

  // string value = 3;
  private:
  bool has_value() const;
  public:
  void clear_value();
  static const int kValueFieldNumber = 3;
  const ::std::string& value() const;
  void set_value(const ::std::string& value);
  #if LANG_CXX11
  void set_value(::std::string&& value);
  #endif
  void set_value(const char* value);
  void set_value(const char* value, size_t size);
  ::std::string* mutable_value();
  ::std::string* release_value();
  void set_allocated_value(::std::string* value);

  // .google.privacy.dlp.v2beta1.Table table = 4;
  bool has_table() const;
  void clear_table();
  static const int kTableFieldNumber = 4;
  const ::google::privacy::dlp::v2beta1::Table& table() const;
  ::google::privacy::dlp::v2beta1::Table* release_table();
  ::google::privacy::dlp::v2beta1::Table* mutable_table();
  void set_allocated_table(::google::privacy::dlp::v2beta1::Table* table);

  DataItemCase data_item_case() const;
  // @@protoc_insertion_point(class_scope:google.privacy.dlp.v2beta1.ContentItem)
 private:
  void set_has_data();
  void set_has_value();
  void set_has_table();

  inline bool has_data_item() const;
  void clear_data_item();
  inline void clear_has_data_item();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr type_;
  union DataItemUnion {
    DataItemUnion() {}
    ::google::protobuf::internal::ArenaStringPtr data_;
    ::google::protobuf::internal::ArenaStringPtr value_;
    ::google::privacy::dlp::v2beta1::Table* table_;
  } data_item_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::TableStruct;
  friend void ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaultsContentItemImpl();
};
// -------------------------------------------------------------------

class Table_Row : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.privacy.dlp.v2beta1.Table.Row) */ {
 public:
  Table_Row();
  virtual ~Table_Row();

  Table_Row(const Table_Row& from);

  inline Table_Row& operator=(const Table_Row& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Table_Row(Table_Row&& from) noexcept
    : Table_Row() {
    *this = ::std::move(from);
  }

  inline Table_Row& operator=(Table_Row&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Table_Row& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Table_Row* internal_default_instance() {
    return reinterpret_cast<const Table_Row*>(
               &_Table_Row_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(Table_Row* other);
  friend void swap(Table_Row& a, Table_Row& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Table_Row* New() const PROTOBUF_FINAL { return New(NULL); }

  Table_Row* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Table_Row& from);
  void MergeFrom(const Table_Row& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Table_Row* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .google.privacy.dlp.v2beta1.Value values = 1;
  int values_size() const;
  void clear_values();
  static const int kValuesFieldNumber = 1;
  const ::google::privacy::dlp::v2beta1::Value& values(int index) const;
  ::google::privacy::dlp::v2beta1::Value* mutable_values(int index);
  ::google::privacy::dlp::v2beta1::Value* add_values();
  ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2beta1::Value >*
      mutable_values();
  const ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2beta1::Value >&
      values() const;

  // @@protoc_insertion_point(class_scope:google.privacy.dlp.v2beta1.Table.Row)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2beta1::Value > values_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::TableStruct;
  friend void ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaultsTable_RowImpl();
};
// -------------------------------------------------------------------

class Table : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.privacy.dlp.v2beta1.Table) */ {
 public:
  Table();
  virtual ~Table();

  Table(const Table& from);

  inline Table& operator=(const Table& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Table(Table&& from) noexcept
    : Table() {
    *this = ::std::move(from);
  }

  inline Table& operator=(Table&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Table& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Table* internal_default_instance() {
    return reinterpret_cast<const Table*>(
               &_Table_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    5;

  void Swap(Table* other);
  friend void swap(Table& a, Table& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Table* New() const PROTOBUF_FINAL { return New(NULL); }

  Table* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Table& from);
  void MergeFrom(const Table& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Table* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef Table_Row Row;

  // accessors -------------------------------------------------------

  // repeated .google.privacy.dlp.v2beta1.FieldId headers = 1;
  int headers_size() const;
  void clear_headers();
  static const int kHeadersFieldNumber = 1;
  const ::google::privacy::dlp::v2beta1::FieldId& headers(int index) const;
  ::google::privacy::dlp::v2beta1::FieldId* mutable_headers(int index);
  ::google::privacy::dlp::v2beta1::FieldId* add_headers();
  ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2beta1::FieldId >*
      mutable_headers();
  const ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2beta1::FieldId >&
      headers() const;

  // repeated .google.privacy.dlp.v2beta1.Table.Row rows = 2;
  int rows_size() const;
  void clear_rows();
  static const int kRowsFieldNumber = 2;
  const ::google::privacy::dlp::v2beta1::Table_Row& rows(int index) const;
  ::google::privacy::dlp::v2beta1::Table_Row* mutable_rows(int index);
  ::google::privacy::dlp::v2beta1::Table_Row* add_rows();
  ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2beta1::Table_Row >*
      mutable_rows();
  const ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2beta1::Table_Row >&
      rows() const;

  // @@protoc_insertion_point(class_scope:google.privacy.dlp.v2beta1.Table)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2beta1::FieldId > headers_;
  ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2beta1::Table_Row > rows_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::TableStruct;
  friend void ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaultsTableImpl();
};
// -------------------------------------------------------------------

class InspectResult : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.privacy.dlp.v2beta1.InspectResult) */ {
 public:
  InspectResult();
  virtual ~InspectResult();

  InspectResult(const InspectResult& from);

  inline InspectResult& operator=(const InspectResult& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  InspectResult(InspectResult&& from) noexcept
    : InspectResult() {
    *this = ::std::move(from);
  }

  inline InspectResult& operator=(InspectResult&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const InspectResult& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const InspectResult* internal_default_instance() {
    return reinterpret_cast<const InspectResult*>(
               &_InspectResult_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    6;

  void Swap(InspectResult* other);
  friend void swap(InspectResult& a, InspectResult& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline InspectResult* New() const PROTOBUF_FINAL { return New(NULL); }

  InspectResult* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const InspectResult& from);
  void MergeFrom(const InspectResult& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(InspectResult* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .google.privacy.dlp.v2beta1.Finding findings = 1;
  int findings_size() const;
  void clear_findings();
  static const int kFindingsFieldNumber = 1;
  const ::google::privacy::dlp::v2beta1::Finding& findings(int index) const;
  ::google::privacy::dlp::v2beta1::Finding* mutable_findings(int index);
  ::google::privacy::dlp::v2beta1::Finding* add_findings();
  ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2beta1::Finding >*
      mutable_findings();
  const ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2beta1::Finding >&
      findings() const;

  // bool findings_truncated = 2;
  void clear_findings_truncated();
  static const int kFindingsTruncatedFieldNumber = 2;
  bool findings_truncated() const;
  void set_findings_truncated(bool value);

  // @@protoc_insertion_point(class_scope:google.privacy.dlp.v2beta1.InspectResult)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2beta1::Finding > findings_;
  bool findings_truncated_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::TableStruct;
  friend void ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaultsInspectResultImpl();
};
// -------------------------------------------------------------------

class Finding : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.privacy.dlp.v2beta1.Finding) */ {
 public:
  Finding();
  virtual ~Finding();

  Finding(const Finding& from);

  inline Finding& operator=(const Finding& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Finding(Finding&& from) noexcept
    : Finding() {
    *this = ::std::move(from);
  }

  inline Finding& operator=(Finding&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Finding& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Finding* internal_default_instance() {
    return reinterpret_cast<const Finding*>(
               &_Finding_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    7;

  void Swap(Finding* other);
  friend void swap(Finding& a, Finding& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Finding* New() const PROTOBUF_FINAL { return New(NULL); }

  Finding* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Finding& from);
  void MergeFrom(const Finding& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Finding* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string quote = 1;
  void clear_quote();
  static const int kQuoteFieldNumber = 1;
  const ::std::string& quote() const;
  void set_quote(const ::std::string& value);
  #if LANG_CXX11
  void set_quote(::std::string&& value);
  #endif
  void set_quote(const char* value);
  void set_quote(const char* value, size_t size);
  ::std::string* mutable_quote();
  ::std::string* release_quote();
  void set_allocated_quote(::std::string* quote);

  // .google.privacy.dlp.v2beta1.InfoType info_type = 2;
  bool has_info_type() const;
  void clear_info_type();
  static const int kInfoTypeFieldNumber = 2;
  const ::google::privacy::dlp::v2beta1::InfoType& info_type() const;
  ::google::privacy::dlp::v2beta1::InfoType* release_info_type();
  ::google::privacy::dlp::v2beta1::InfoType* mutable_info_type();
  void set_allocated_info_type(::google::privacy::dlp::v2beta1::InfoType* info_type);

  // .google.privacy.dlp.v2beta1.Location location = 4;
  bool has_location() const;
  void clear_location();
  static const int kLocationFieldNumber = 4;
  const ::google::privacy::dlp::v2beta1::Location& location() const;
  ::google::privacy::dlp::v2beta1::Location* release_location();
  ::google::privacy::dlp::v2beta1::Location* mutable_location();
  void set_allocated_location(::google::privacy::dlp::v2beta1::Location* location);

  // .google.protobuf.Timestamp create_time = 6;
  bool has_create_time() const;
  void clear_create_time();
  static const int kCreateTimeFieldNumber = 6;
  const ::google::protobuf::Timestamp& create_time() const;
  ::google::protobuf::Timestamp* release_create_time();
  ::google::protobuf::Timestamp* mutable_create_time();
  void set_allocated_create_time(::google::protobuf::Timestamp* create_time);

  // .google.privacy.dlp.v2beta1.Likelihood likelihood = 3;
  void clear_likelihood();
  static const int kLikelihoodFieldNumber = 3;
  ::google::privacy::dlp::v2beta1::Likelihood likelihood() const;
  void set_likelihood(::google::privacy::dlp::v2beta1::Likelihood value);

  // @@protoc_insertion_point(class_scope:google.privacy.dlp.v2beta1.Finding)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr quote_;
  ::google::privacy::dlp::v2beta1::InfoType* info_type_;
  ::google::privacy::dlp::v2beta1::Location* location_;
  ::google::protobuf::Timestamp* create_time_;
  int likelihood_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::TableStruct;
  friend void ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaultsFindingImpl();
};
// -------------------------------------------------------------------

class Location : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.privacy.dlp.v2beta1.Location) */ {
 public:
  Location();
  virtual ~Location();

  Location(const Location& from);

  inline Location& operator=(const Location& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Location(Location&& from) noexcept
    : Location() {
    *this = ::std::move(from);
  }

  inline Location& operator=(Location&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Location& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Location* internal_default_instance() {
    return reinterpret_cast<const Location*>(
               &_Location_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    8;

  void Swap(Location* other);
  friend void swap(Location& a, Location& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Location* New() const PROTOBUF_FINAL { return New(NULL); }

  Location* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Location& from);
  void MergeFrom(const Location& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Location* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .google.privacy.dlp.v2beta1.ImageLocation image_boxes = 3;
  int image_boxes_size() const;
  void clear_image_boxes();
  static const int kImageBoxesFieldNumber = 3;
  const ::google::privacy::dlp::v2beta1::ImageLocation& image_boxes(int index) const;
  ::google::privacy::dlp::v2beta1::ImageLocation* mutable_image_boxes(int index);
  ::google::privacy::dlp::v2beta1::ImageLocation* add_image_boxes();
  ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2beta1::ImageLocation >*
      mutable_image_boxes();
  const ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2beta1::ImageLocation >&
      image_boxes() const;

  // .google.privacy.dlp.v2beta1.Range byte_range = 1;
  bool has_byte_range() const;
  void clear_byte_range();
  static const int kByteRangeFieldNumber = 1;
  const ::google::privacy::dlp::v2beta1::Range& byte_range() const;
  ::google::privacy::dlp::v2beta1::Range* release_byte_range();
  ::google::privacy::dlp::v2beta1::Range* mutable_byte_range();
  void set_allocated_byte_range(::google::privacy::dlp::v2beta1::Range* byte_range);

  // .google.privacy.dlp.v2beta1.Range codepoint_range = 2;
  bool has_codepoint_range() const;
  void clear_codepoint_range();
  static const int kCodepointRangeFieldNumber = 2;
  const ::google::privacy::dlp::v2beta1::Range& codepoint_range() const;
  ::google::privacy::dlp::v2beta1::Range* release_codepoint_range();
  ::google::privacy::dlp::v2beta1::Range* mutable_codepoint_range();
  void set_allocated_codepoint_range(::google::privacy::dlp::v2beta1::Range* codepoint_range);

  // .google.privacy.dlp.v2beta1.RecordKey record_key = 4;
  bool has_record_key() const;
  void clear_record_key();
  static const int kRecordKeyFieldNumber = 4;
  const ::google::privacy::dlp::v2beta1::RecordKey& record_key() const;
  ::google::privacy::dlp::v2beta1::RecordKey* release_record_key();
  ::google::privacy::dlp::v2beta1::RecordKey* mutable_record_key();
  void set_allocated_record_key(::google::privacy::dlp::v2beta1::RecordKey* record_key);

  // .google.privacy.dlp.v2beta1.FieldId field_id = 5;
  bool has_field_id() const;
  void clear_field_id();
  static const int kFieldIdFieldNumber = 5;
  const ::google::privacy::dlp::v2beta1::FieldId& field_id() const;
  ::google::privacy::dlp::v2beta1::FieldId* release_field_id();
  ::google::privacy::dlp::v2beta1::FieldId* mutable_field_id();
  void set_allocated_field_id(::google::privacy::dlp::v2beta1::FieldId* field_id);

  // .google.privacy.dlp.v2beta1.TableLocation table_location = 6;
  bool has_table_location() const;
  void clear_table_location();
  static const int kTableLocationFieldNumber = 6;
  const ::google::privacy::dlp::v2beta1::TableLocation& table_location() const;
  ::google::privacy::dlp::v2beta1::TableLocation* release_table_location();
  ::google::privacy::dlp::v2beta1::TableLocation* mutable_table_location();
  void set_allocated_table_location(::google::privacy::dlp::v2beta1::TableLocation* table_location);

  // @@protoc_insertion_point(class_scope:google.privacy.dlp.v2beta1.Location)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2beta1::ImageLocation > image_boxes_;
  ::google::privacy::dlp::v2beta1::Range* byte_range_;
  ::google::privacy::dlp::v2beta1::Range* codepoint_range_;
  ::google::privacy::dlp::v2beta1::RecordKey* record_key_;
  ::google::privacy::dlp::v2beta1::FieldId* field_id_;
  ::google::privacy::dlp::v2beta1::TableLocation* table_location_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::TableStruct;
  friend void ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaultsLocationImpl();
};
// -------------------------------------------------------------------

class TableLocation : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.privacy.dlp.v2beta1.TableLocation) */ {
 public:
  TableLocation();
  virtual ~TableLocation();

  TableLocation(const TableLocation& from);

  inline TableLocation& operator=(const TableLocation& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TableLocation(TableLocation&& from) noexcept
    : TableLocation() {
    *this = ::std::move(from);
  }

  inline TableLocation& operator=(TableLocation&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const TableLocation& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TableLocation* internal_default_instance() {
    return reinterpret_cast<const TableLocation*>(
               &_TableLocation_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    9;

  void Swap(TableLocation* other);
  friend void swap(TableLocation& a, TableLocation& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TableLocation* New() const PROTOBUF_FINAL { return New(NULL); }

  TableLocation* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const TableLocation& from);
  void MergeFrom(const TableLocation& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TableLocation* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int64 row_index = 1;
  void clear_row_index();
  static const int kRowIndexFieldNumber = 1;
  ::google::protobuf::int64 row_index() const;
  void set_row_index(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:google.privacy.dlp.v2beta1.TableLocation)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int64 row_index_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::TableStruct;
  friend void ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaultsTableLocationImpl();
};
// -------------------------------------------------------------------

class Range : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.privacy.dlp.v2beta1.Range) */ {
 public:
  Range();
  virtual ~Range();

  Range(const Range& from);

  inline Range& operator=(const Range& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Range(Range&& from) noexcept
    : Range() {
    *this = ::std::move(from);
  }

  inline Range& operator=(Range&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Range& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Range* internal_default_instance() {
    return reinterpret_cast<const Range*>(
               &_Range_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    10;

  void Swap(Range* other);
  friend void swap(Range& a, Range& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Range* New() const PROTOBUF_FINAL { return New(NULL); }

  Range* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Range& from);
  void MergeFrom(const Range& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Range* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int64 start = 1;
  void clear_start();
  static const int kStartFieldNumber = 1;
  ::google::protobuf::int64 start() const;
  void set_start(::google::protobuf::int64 value);

  // int64 end = 2;
  void clear_end();
  static const int kEndFieldNumber = 2;
  ::google::protobuf::int64 end() const;
  void set_end(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:google.privacy.dlp.v2beta1.Range)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int64 start_;
  ::google::protobuf::int64 end_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::TableStruct;
  friend void ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaultsRangeImpl();
};
// -------------------------------------------------------------------

class ImageLocation : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.privacy.dlp.v2beta1.ImageLocation) */ {
 public:
  ImageLocation();
  virtual ~ImageLocation();

  ImageLocation(const ImageLocation& from);

  inline ImageLocation& operator=(const ImageLocation& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ImageLocation(ImageLocation&& from) noexcept
    : ImageLocation() {
    *this = ::std::move(from);
  }

  inline ImageLocation& operator=(ImageLocation&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ImageLocation& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ImageLocation* internal_default_instance() {
    return reinterpret_cast<const ImageLocation*>(
               &_ImageLocation_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    11;

  void Swap(ImageLocation* other);
  friend void swap(ImageLocation& a, ImageLocation& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ImageLocation* New() const PROTOBUF_FINAL { return New(NULL); }

  ImageLocation* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ImageLocation& from);
  void MergeFrom(const ImageLocation& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ImageLocation* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 top = 1;
  void clear_top();
  static const int kTopFieldNumber = 1;
  ::google::protobuf::int32 top() const;
  void set_top(::google::protobuf::int32 value);

  // int32 left = 2;
  void clear_left();
  static const int kLeftFieldNumber = 2;
  ::google::protobuf::int32 left() const;
  void set_left(::google::protobuf::int32 value);

  // int32 width = 3;
  void clear_width();
  static const int kWidthFieldNumber = 3;
  ::google::protobuf::int32 width() const;
  void set_width(::google::protobuf::int32 value);

  // int32 height = 4;
  void clear_height();
  static const int kHeightFieldNumber = 4;
  ::google::protobuf::int32 height() const;
  void set_height(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:google.privacy.dlp.v2beta1.ImageLocation)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 top_;
  ::google::protobuf::int32 left_;
  ::google::protobuf::int32 width_;
  ::google::protobuf::int32 height_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::TableStruct;
  friend void ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaultsImageLocationImpl();
};
// -------------------------------------------------------------------

class RedactContentRequest_ReplaceConfig : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.privacy.dlp.v2beta1.RedactContentRequest.ReplaceConfig) */ {
 public:
  RedactContentRequest_ReplaceConfig();
  virtual ~RedactContentRequest_ReplaceConfig();

  RedactContentRequest_ReplaceConfig(const RedactContentRequest_ReplaceConfig& from);

  inline RedactContentRequest_ReplaceConfig& operator=(const RedactContentRequest_ReplaceConfig& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RedactContentRequest_ReplaceConfig(RedactContentRequest_ReplaceConfig&& from) noexcept
    : RedactContentRequest_ReplaceConfig() {
    *this = ::std::move(from);
  }

  inline RedactContentRequest_ReplaceConfig& operator=(RedactContentRequest_ReplaceConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RedactContentRequest_ReplaceConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RedactContentRequest_ReplaceConfig* internal_default_instance() {
    return reinterpret_cast<const RedactContentRequest_ReplaceConfig*>(
               &_RedactContentRequest_ReplaceConfig_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    12;

  void Swap(RedactContentRequest_ReplaceConfig* other);
  friend void swap(RedactContentRequest_ReplaceConfig& a, RedactContentRequest_ReplaceConfig& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RedactContentRequest_ReplaceConfig* New() const PROTOBUF_FINAL { return New(NULL); }

  RedactContentRequest_ReplaceConfig* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const RedactContentRequest_ReplaceConfig& from);
  void MergeFrom(const RedactContentRequest_ReplaceConfig& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(RedactContentRequest_ReplaceConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string replace_with = 2;
  void clear_replace_with();
  static const int kReplaceWithFieldNumber = 2;
  const ::std::string& replace_with() const;
  void set_replace_with(const ::std::string& value);
  #if LANG_CXX11
  void set_replace_with(::std::string&& value);
  #endif
  void set_replace_with(const char* value);
  void set_replace_with(const char* value, size_t size);
  ::std::string* mutable_replace_with();
  ::std::string* release_replace_with();
  void set_allocated_replace_with(::std::string* replace_with);

  // .google.privacy.dlp.v2beta1.InfoType info_type = 1;
  bool has_info_type() const;
  void clear_info_type();
  static const int kInfoTypeFieldNumber = 1;
  const ::google::privacy::dlp::v2beta1::InfoType& info_type() const;
  ::google::privacy::dlp::v2beta1::InfoType* release_info_type();
  ::google::privacy::dlp::v2beta1::InfoType* mutable_info_type();
  void set_allocated_info_type(::google::privacy::dlp::v2beta1::InfoType* info_type);

  // @@protoc_insertion_point(class_scope:google.privacy.dlp.v2beta1.RedactContentRequest.ReplaceConfig)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr replace_with_;
  ::google::privacy::dlp::v2beta1::InfoType* info_type_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::TableStruct;
  friend void ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaultsRedactContentRequest_ReplaceConfigImpl();
};
// -------------------------------------------------------------------

class RedactContentRequest_ImageRedactionConfig : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.privacy.dlp.v2beta1.RedactContentRequest.ImageRedactionConfig) */ {
 public:
  RedactContentRequest_ImageRedactionConfig();
  virtual ~RedactContentRequest_ImageRedactionConfig();

  RedactContentRequest_ImageRedactionConfig(const RedactContentRequest_ImageRedactionConfig& from);

  inline RedactContentRequest_ImageRedactionConfig& operator=(const RedactContentRequest_ImageRedactionConfig& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RedactContentRequest_ImageRedactionConfig(RedactContentRequest_ImageRedactionConfig&& from) noexcept
    : RedactContentRequest_ImageRedactionConfig() {
    *this = ::std::move(from);
  }

  inline RedactContentRequest_ImageRedactionConfig& operator=(RedactContentRequest_ImageRedactionConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RedactContentRequest_ImageRedactionConfig& default_instance();

  enum TargetCase {
    kInfoType = 1,
    kRedactAllText = 2,
    TARGET_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RedactContentRequest_ImageRedactionConfig* internal_default_instance() {
    return reinterpret_cast<const RedactContentRequest_ImageRedactionConfig*>(
               &_RedactContentRequest_ImageRedactionConfig_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    13;

  void Swap(RedactContentRequest_ImageRedactionConfig* other);
  friend void swap(RedactContentRequest_ImageRedactionConfig& a, RedactContentRequest_ImageRedactionConfig& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RedactContentRequest_ImageRedactionConfig* New() const PROTOBUF_FINAL { return New(NULL); }

  RedactContentRequest_ImageRedactionConfig* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const RedactContentRequest_ImageRedactionConfig& from);
  void MergeFrom(const RedactContentRequest_ImageRedactionConfig& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(RedactContentRequest_ImageRedactionConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.privacy.dlp.v2beta1.Color redaction_color = 3;
  bool has_redaction_color() const;
  void clear_redaction_color();
  static const int kRedactionColorFieldNumber = 3;
  const ::google::privacy::dlp::v2beta1::Color& redaction_color() const;
  ::google::privacy::dlp::v2beta1::Color* release_redaction_color();
  ::google::privacy::dlp::v2beta1::Color* mutable_redaction_color();
  void set_allocated_redaction_color(::google::privacy::dlp::v2beta1::Color* redaction_color);

  // .google.privacy.dlp.v2beta1.InfoType info_type = 1;
  bool has_info_type() const;
  void clear_info_type();
  static const int kInfoTypeFieldNumber = 1;
  const ::google::privacy::dlp::v2beta1::InfoType& info_type() const;
  ::google::privacy::dlp::v2beta1::InfoType* release_info_type();
  ::google::privacy::dlp::v2beta1::InfoType* mutable_info_type();
  void set_allocated_info_type(::google::privacy::dlp::v2beta1::InfoType* info_type);

  // bool redact_all_text = 2;
  private:
  bool has_redact_all_text() const;
  public:
  void clear_redact_all_text();
  static const int kRedactAllTextFieldNumber = 2;
  bool redact_all_text() const;
  void set_redact_all_text(bool value);

  TargetCase target_case() const;
  // @@protoc_insertion_point(class_scope:google.privacy.dlp.v2beta1.RedactContentRequest.ImageRedactionConfig)
 private:
  void set_has_info_type();
  void set_has_redact_all_text();

  inline bool has_target() const;
  void clear_target();
  inline void clear_has_target();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::privacy::dlp::v2beta1::Color* redaction_color_;
  union TargetUnion {
    TargetUnion() {}
    ::google::privacy::dlp::v2beta1::InfoType* info_type_;
    bool redact_all_text_;
  } target_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::TableStruct;
  friend void ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaultsRedactContentRequest_ImageRedactionConfigImpl();
};
// -------------------------------------------------------------------

class RedactContentRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.privacy.dlp.v2beta1.RedactContentRequest) */ {
 public:
  RedactContentRequest();
  virtual ~RedactContentRequest();

  RedactContentRequest(const RedactContentRequest& from);

  inline RedactContentRequest& operator=(const RedactContentRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RedactContentRequest(RedactContentRequest&& from) noexcept
    : RedactContentRequest() {
    *this = ::std::move(from);
  }

  inline RedactContentRequest& operator=(RedactContentRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RedactContentRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RedactContentRequest* internal_default_instance() {
    return reinterpret_cast<const RedactContentRequest*>(
               &_RedactContentRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    14;

  void Swap(RedactContentRequest* other);
  friend void swap(RedactContentRequest& a, RedactContentRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RedactContentRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  RedactContentRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const RedactContentRequest& from);
  void MergeFrom(const RedactContentRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(RedactContentRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef RedactContentRequest_ReplaceConfig ReplaceConfig;
  typedef RedactContentRequest_ImageRedactionConfig ImageRedactionConfig;

  // accessors -------------------------------------------------------

  // repeated .google.privacy.dlp.v2beta1.ContentItem items = 2;
  int items_size() const;
  void clear_items();
  static const int kItemsFieldNumber = 2;
  const ::google::privacy::dlp::v2beta1::ContentItem& items(int index) const;
  ::google::privacy::dlp::v2beta1::ContentItem* mutable_items(int index);
  ::google::privacy::dlp::v2beta1::ContentItem* add_items();
  ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2beta1::ContentItem >*
      mutable_items();
  const ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2beta1::ContentItem >&
      items() const;

  // repeated .google.privacy.dlp.v2beta1.RedactContentRequest.ReplaceConfig replace_configs = 3;
  int replace_configs_size() const;
  void clear_replace_configs();
  static const int kReplaceConfigsFieldNumber = 3;
  const ::google::privacy::dlp::v2beta1::RedactContentRequest_ReplaceConfig& replace_configs(int index) const;
  ::google::privacy::dlp::v2beta1::RedactContentRequest_ReplaceConfig* mutable_replace_configs(int index);
  ::google::privacy::dlp::v2beta1::RedactContentRequest_ReplaceConfig* add_replace_configs();
  ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2beta1::RedactContentRequest_ReplaceConfig >*
      mutable_replace_configs();
  const ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2beta1::RedactContentRequest_ReplaceConfig >&
      replace_configs() const;

  // repeated .google.privacy.dlp.v2beta1.RedactContentRequest.ImageRedactionConfig image_redaction_configs = 4;
  int image_redaction_configs_size() const;
  void clear_image_redaction_configs();
  static const int kImageRedactionConfigsFieldNumber = 4;
  const ::google::privacy::dlp::v2beta1::RedactContentRequest_ImageRedactionConfig& image_redaction_configs(int index) const;
  ::google::privacy::dlp::v2beta1::RedactContentRequest_ImageRedactionConfig* mutable_image_redaction_configs(int index);
  ::google::privacy::dlp::v2beta1::RedactContentRequest_ImageRedactionConfig* add_image_redaction_configs();
  ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2beta1::RedactContentRequest_ImageRedactionConfig >*
      mutable_image_redaction_configs();
  const ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2beta1::RedactContentRequest_ImageRedactionConfig >&
      image_redaction_configs() const;

  // .google.privacy.dlp.v2beta1.InspectConfig inspect_config = 1;
  bool has_inspect_config() const;
  void clear_inspect_config();
  static const int kInspectConfigFieldNumber = 1;
  const ::google::privacy::dlp::v2beta1::InspectConfig& inspect_config() const;
  ::google::privacy::dlp::v2beta1::InspectConfig* release_inspect_config();
  ::google::privacy::dlp::v2beta1::InspectConfig* mutable_inspect_config();
  void set_allocated_inspect_config(::google::privacy::dlp::v2beta1::InspectConfig* inspect_config);

  // @@protoc_insertion_point(class_scope:google.privacy.dlp.v2beta1.RedactContentRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2beta1::ContentItem > items_;
  ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2beta1::RedactContentRequest_ReplaceConfig > replace_configs_;
  ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2beta1::RedactContentRequest_ImageRedactionConfig > image_redaction_configs_;
  ::google::privacy::dlp::v2beta1::InspectConfig* inspect_config_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::TableStruct;
  friend void ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaultsRedactContentRequestImpl();
};
// -------------------------------------------------------------------

class Color : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.privacy.dlp.v2beta1.Color) */ {
 public:
  Color();
  virtual ~Color();

  Color(const Color& from);

  inline Color& operator=(const Color& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Color(Color&& from) noexcept
    : Color() {
    *this = ::std::move(from);
  }

  inline Color& operator=(Color&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Color& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Color* internal_default_instance() {
    return reinterpret_cast<const Color*>(
               &_Color_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    15;

  void Swap(Color* other);
  friend void swap(Color& a, Color& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Color* New() const PROTOBUF_FINAL { return New(NULL); }

  Color* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Color& from);
  void MergeFrom(const Color& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Color* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // float red = 1;
  void clear_red();
  static const int kRedFieldNumber = 1;
  float red() const;
  void set_red(float value);

  // float green = 2;
  void clear_green();
  static const int kGreenFieldNumber = 2;
  float green() const;
  void set_green(float value);

  // float blue = 3;
  void clear_blue();
  static const int kBlueFieldNumber = 3;
  float blue() const;
  void set_blue(float value);

  // @@protoc_insertion_point(class_scope:google.privacy.dlp.v2beta1.Color)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  float red_;
  float green_;
  float blue_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::TableStruct;
  friend void ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaultsColorImpl();
};
// -------------------------------------------------------------------

class RedactContentResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.privacy.dlp.v2beta1.RedactContentResponse) */ {
 public:
  RedactContentResponse();
  virtual ~RedactContentResponse();

  RedactContentResponse(const RedactContentResponse& from);

  inline RedactContentResponse& operator=(const RedactContentResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RedactContentResponse(RedactContentResponse&& from) noexcept
    : RedactContentResponse() {
    *this = ::std::move(from);
  }

  inline RedactContentResponse& operator=(RedactContentResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RedactContentResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RedactContentResponse* internal_default_instance() {
    return reinterpret_cast<const RedactContentResponse*>(
               &_RedactContentResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    16;

  void Swap(RedactContentResponse* other);
  friend void swap(RedactContentResponse& a, RedactContentResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RedactContentResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  RedactContentResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const RedactContentResponse& from);
  void MergeFrom(const RedactContentResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(RedactContentResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .google.privacy.dlp.v2beta1.ContentItem items = 1;
  int items_size() const;
  void clear_items();
  static const int kItemsFieldNumber = 1;
  const ::google::privacy::dlp::v2beta1::ContentItem& items(int index) const;
  ::google::privacy::dlp::v2beta1::ContentItem* mutable_items(int index);
  ::google::privacy::dlp::v2beta1::ContentItem* add_items();
  ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2beta1::ContentItem >*
      mutable_items();
  const ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2beta1::ContentItem >&
      items() const;

  // @@protoc_insertion_point(class_scope:google.privacy.dlp.v2beta1.RedactContentResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2beta1::ContentItem > items_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::TableStruct;
  friend void ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaultsRedactContentResponseImpl();
};
// -------------------------------------------------------------------

class DeidentifyContentRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.privacy.dlp.v2beta1.DeidentifyContentRequest) */ {
 public:
  DeidentifyContentRequest();
  virtual ~DeidentifyContentRequest();

  DeidentifyContentRequest(const DeidentifyContentRequest& from);

  inline DeidentifyContentRequest& operator=(const DeidentifyContentRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DeidentifyContentRequest(DeidentifyContentRequest&& from) noexcept
    : DeidentifyContentRequest() {
    *this = ::std::move(from);
  }

  inline DeidentifyContentRequest& operator=(DeidentifyContentRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DeidentifyContentRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeidentifyContentRequest* internal_default_instance() {
    return reinterpret_cast<const DeidentifyContentRequest*>(
               &_DeidentifyContentRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    17;

  void Swap(DeidentifyContentRequest* other);
  friend void swap(DeidentifyContentRequest& a, DeidentifyContentRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DeidentifyContentRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  DeidentifyContentRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DeidentifyContentRequest& from);
  void MergeFrom(const DeidentifyContentRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DeidentifyContentRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .google.privacy.dlp.v2beta1.ContentItem items = 3;
  int items_size() const;
  void clear_items();
  static const int kItemsFieldNumber = 3;
  const ::google::privacy::dlp::v2beta1::ContentItem& items(int index) const;
  ::google::privacy::dlp::v2beta1::ContentItem* mutable_items(int index);
  ::google::privacy::dlp::v2beta1::ContentItem* add_items();
  ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2beta1::ContentItem >*
      mutable_items();
  const ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2beta1::ContentItem >&
      items() const;

  // .google.privacy.dlp.v2beta1.DeidentifyConfig deidentify_config = 1;
  bool has_deidentify_config() const;
  void clear_deidentify_config();
  static const int kDeidentifyConfigFieldNumber = 1;
  const ::google::privacy::dlp::v2beta1::DeidentifyConfig& deidentify_config() const;
  ::google::privacy::dlp::v2beta1::DeidentifyConfig* release_deidentify_config();
  ::google::privacy::dlp::v2beta1::DeidentifyConfig* mutable_deidentify_config();
  void set_allocated_deidentify_config(::google::privacy::dlp::v2beta1::DeidentifyConfig* deidentify_config);

  // .google.privacy.dlp.v2beta1.InspectConfig inspect_config = 2;
  bool has_inspect_config() const;
  void clear_inspect_config();
  static const int kInspectConfigFieldNumber = 2;
  const ::google::privacy::dlp::v2beta1::InspectConfig& inspect_config() const;
  ::google::privacy::dlp::v2beta1::InspectConfig* release_inspect_config();
  ::google::privacy::dlp::v2beta1::InspectConfig* mutable_inspect_config();
  void set_allocated_inspect_config(::google::privacy::dlp::v2beta1::InspectConfig* inspect_config);

  // @@protoc_insertion_point(class_scope:google.privacy.dlp.v2beta1.DeidentifyContentRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2beta1::ContentItem > items_;
  ::google::privacy::dlp::v2beta1::DeidentifyConfig* deidentify_config_;
  ::google::privacy::dlp::v2beta1::InspectConfig* inspect_config_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::TableStruct;
  friend void ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaultsDeidentifyContentRequestImpl();
};
// -------------------------------------------------------------------

class DeidentifyContentResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.privacy.dlp.v2beta1.DeidentifyContentResponse) */ {
 public:
  DeidentifyContentResponse();
  virtual ~DeidentifyContentResponse();

  DeidentifyContentResponse(const DeidentifyContentResponse& from);

  inline DeidentifyContentResponse& operator=(const DeidentifyContentResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DeidentifyContentResponse(DeidentifyContentResponse&& from) noexcept
    : DeidentifyContentResponse() {
    *this = ::std::move(from);
  }

  inline DeidentifyContentResponse& operator=(DeidentifyContentResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DeidentifyContentResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeidentifyContentResponse* internal_default_instance() {
    return reinterpret_cast<const DeidentifyContentResponse*>(
               &_DeidentifyContentResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    18;

  void Swap(DeidentifyContentResponse* other);
  friend void swap(DeidentifyContentResponse& a, DeidentifyContentResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DeidentifyContentResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  DeidentifyContentResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DeidentifyContentResponse& from);
  void MergeFrom(const DeidentifyContentResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DeidentifyContentResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .google.privacy.dlp.v2beta1.ContentItem items = 1;
  int items_size() const;
  void clear_items();
  static const int kItemsFieldNumber = 1;
  const ::google::privacy::dlp::v2beta1::ContentItem& items(int index) const;
  ::google::privacy::dlp::v2beta1::ContentItem* mutable_items(int index);
  ::google::privacy::dlp::v2beta1::ContentItem* add_items();
  ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2beta1::ContentItem >*
      mutable_items();
  const ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2beta1::ContentItem >&
      items() const;

  // repeated .google.privacy.dlp.v2beta1.DeidentificationSummary summaries = 2;
  int summaries_size() const;
  void clear_summaries();
  static const int kSummariesFieldNumber = 2;
  const ::google::privacy::dlp::v2beta1::DeidentificationSummary& summaries(int index) const;
  ::google::privacy::dlp::v2beta1::DeidentificationSummary* mutable_summaries(int index);
  ::google::privacy::dlp::v2beta1::DeidentificationSummary* add_summaries();
  ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2beta1::DeidentificationSummary >*
      mutable_summaries();
  const ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2beta1::DeidentificationSummary >&
      summaries() const;

  // @@protoc_insertion_point(class_scope:google.privacy.dlp.v2beta1.DeidentifyContentResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2beta1::ContentItem > items_;
  ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2beta1::DeidentificationSummary > summaries_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::TableStruct;
  friend void ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaultsDeidentifyContentResponseImpl();
};
// -------------------------------------------------------------------

class InspectContentRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.privacy.dlp.v2beta1.InspectContentRequest) */ {
 public:
  InspectContentRequest();
  virtual ~InspectContentRequest();

  InspectContentRequest(const InspectContentRequest& from);

  inline InspectContentRequest& operator=(const InspectContentRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  InspectContentRequest(InspectContentRequest&& from) noexcept
    : InspectContentRequest() {
    *this = ::std::move(from);
  }

  inline InspectContentRequest& operator=(InspectContentRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const InspectContentRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const InspectContentRequest* internal_default_instance() {
    return reinterpret_cast<const InspectContentRequest*>(
               &_InspectContentRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    19;

  void Swap(InspectContentRequest* other);
  friend void swap(InspectContentRequest& a, InspectContentRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline InspectContentRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  InspectContentRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const InspectContentRequest& from);
  void MergeFrom(const InspectContentRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(InspectContentRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .google.privacy.dlp.v2beta1.ContentItem items = 2;
  int items_size() const;
  void clear_items();
  static const int kItemsFieldNumber = 2;
  const ::google::privacy::dlp::v2beta1::ContentItem& items(int index) const;
  ::google::privacy::dlp::v2beta1::ContentItem* mutable_items(int index);
  ::google::privacy::dlp::v2beta1::ContentItem* add_items();
  ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2beta1::ContentItem >*
      mutable_items();
  const ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2beta1::ContentItem >&
      items() const;

  // .google.privacy.dlp.v2beta1.InspectConfig inspect_config = 1;
  bool has_inspect_config() const;
  void clear_inspect_config();
  static const int kInspectConfigFieldNumber = 1;
  const ::google::privacy::dlp::v2beta1::InspectConfig& inspect_config() const;
  ::google::privacy::dlp::v2beta1::InspectConfig* release_inspect_config();
  ::google::privacy::dlp::v2beta1::InspectConfig* mutable_inspect_config();
  void set_allocated_inspect_config(::google::privacy::dlp::v2beta1::InspectConfig* inspect_config);

  // @@protoc_insertion_point(class_scope:google.privacy.dlp.v2beta1.InspectContentRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2beta1::ContentItem > items_;
  ::google::privacy::dlp::v2beta1::InspectConfig* inspect_config_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::TableStruct;
  friend void ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaultsInspectContentRequestImpl();
};
// -------------------------------------------------------------------

class InspectContentResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.privacy.dlp.v2beta1.InspectContentResponse) */ {
 public:
  InspectContentResponse();
  virtual ~InspectContentResponse();

  InspectContentResponse(const InspectContentResponse& from);

  inline InspectContentResponse& operator=(const InspectContentResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  InspectContentResponse(InspectContentResponse&& from) noexcept
    : InspectContentResponse() {
    *this = ::std::move(from);
  }

  inline InspectContentResponse& operator=(InspectContentResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const InspectContentResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const InspectContentResponse* internal_default_instance() {
    return reinterpret_cast<const InspectContentResponse*>(
               &_InspectContentResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    20;

  void Swap(InspectContentResponse* other);
  friend void swap(InspectContentResponse& a, InspectContentResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline InspectContentResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  InspectContentResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const InspectContentResponse& from);
  void MergeFrom(const InspectContentResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(InspectContentResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .google.privacy.dlp.v2beta1.InspectResult results = 1;
  int results_size() const;
  void clear_results();
  static const int kResultsFieldNumber = 1;
  const ::google::privacy::dlp::v2beta1::InspectResult& results(int index) const;
  ::google::privacy::dlp::v2beta1::InspectResult* mutable_results(int index);
  ::google::privacy::dlp::v2beta1::InspectResult* add_results();
  ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2beta1::InspectResult >*
      mutable_results();
  const ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2beta1::InspectResult >&
      results() const;

  // @@protoc_insertion_point(class_scope:google.privacy.dlp.v2beta1.InspectContentResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2beta1::InspectResult > results_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::TableStruct;
  friend void ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaultsInspectContentResponseImpl();
};
// -------------------------------------------------------------------

class CreateInspectOperationRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.privacy.dlp.v2beta1.CreateInspectOperationRequest) */ {
 public:
  CreateInspectOperationRequest();
  virtual ~CreateInspectOperationRequest();

  CreateInspectOperationRequest(const CreateInspectOperationRequest& from);

  inline CreateInspectOperationRequest& operator=(const CreateInspectOperationRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CreateInspectOperationRequest(CreateInspectOperationRequest&& from) noexcept
    : CreateInspectOperationRequest() {
    *this = ::std::move(from);
  }

  inline CreateInspectOperationRequest& operator=(CreateInspectOperationRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CreateInspectOperationRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreateInspectOperationRequest* internal_default_instance() {
    return reinterpret_cast<const CreateInspectOperationRequest*>(
               &_CreateInspectOperationRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    21;

  void Swap(CreateInspectOperationRequest* other);
  friend void swap(CreateInspectOperationRequest& a, CreateInspectOperationRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CreateInspectOperationRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  CreateInspectOperationRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CreateInspectOperationRequest& from);
  void MergeFrom(const CreateInspectOperationRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CreateInspectOperationRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.privacy.dlp.v2beta1.InspectConfig inspect_config = 1;
  bool has_inspect_config() const;
  void clear_inspect_config();
  static const int kInspectConfigFieldNumber = 1;
  const ::google::privacy::dlp::v2beta1::InspectConfig& inspect_config() const;
  ::google::privacy::dlp::v2beta1::InspectConfig* release_inspect_config();
  ::google::privacy::dlp::v2beta1::InspectConfig* mutable_inspect_config();
  void set_allocated_inspect_config(::google::privacy::dlp::v2beta1::InspectConfig* inspect_config);

  // .google.privacy.dlp.v2beta1.StorageConfig storage_config = 2;
  bool has_storage_config() const;
  void clear_storage_config();
  static const int kStorageConfigFieldNumber = 2;
  const ::google::privacy::dlp::v2beta1::StorageConfig& storage_config() const;
  ::google::privacy::dlp::v2beta1::StorageConfig* release_storage_config();
  ::google::privacy::dlp::v2beta1::StorageConfig* mutable_storage_config();
  void set_allocated_storage_config(::google::privacy::dlp::v2beta1::StorageConfig* storage_config);

  // .google.privacy.dlp.v2beta1.OutputStorageConfig output_config = 3;
  bool has_output_config() const;
  void clear_output_config();
  static const int kOutputConfigFieldNumber = 3;
  const ::google::privacy::dlp::v2beta1::OutputStorageConfig& output_config() const;
  ::google::privacy::dlp::v2beta1::OutputStorageConfig* release_output_config();
  ::google::privacy::dlp::v2beta1::OutputStorageConfig* mutable_output_config();
  void set_allocated_output_config(::google::privacy::dlp::v2beta1::OutputStorageConfig* output_config);

  // .google.privacy.dlp.v2beta1.OperationConfig operation_config = 5;
  bool has_operation_config() const;
  void clear_operation_config();
  static const int kOperationConfigFieldNumber = 5;
  const ::google::privacy::dlp::v2beta1::OperationConfig& operation_config() const;
  ::google::privacy::dlp::v2beta1::OperationConfig* release_operation_config();
  ::google::privacy::dlp::v2beta1::OperationConfig* mutable_operation_config();
  void set_allocated_operation_config(::google::privacy::dlp::v2beta1::OperationConfig* operation_config);

  // @@protoc_insertion_point(class_scope:google.privacy.dlp.v2beta1.CreateInspectOperationRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::privacy::dlp::v2beta1::InspectConfig* inspect_config_;
  ::google::privacy::dlp::v2beta1::StorageConfig* storage_config_;
  ::google::privacy::dlp::v2beta1::OutputStorageConfig* output_config_;
  ::google::privacy::dlp::v2beta1::OperationConfig* operation_config_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::TableStruct;
  friend void ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaultsCreateInspectOperationRequestImpl();
};
// -------------------------------------------------------------------

class OutputStorageConfig : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.privacy.dlp.v2beta1.OutputStorageConfig) */ {
 public:
  OutputStorageConfig();
  virtual ~OutputStorageConfig();

  OutputStorageConfig(const OutputStorageConfig& from);

  inline OutputStorageConfig& operator=(const OutputStorageConfig& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  OutputStorageConfig(OutputStorageConfig&& from) noexcept
    : OutputStorageConfig() {
    *this = ::std::move(from);
  }

  inline OutputStorageConfig& operator=(OutputStorageConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const OutputStorageConfig& default_instance();

  enum TypeCase {
    kTable = 1,
    kStoragePath = 2,
    TYPE_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OutputStorageConfig* internal_default_instance() {
    return reinterpret_cast<const OutputStorageConfig*>(
               &_OutputStorageConfig_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    22;

  void Swap(OutputStorageConfig* other);
  friend void swap(OutputStorageConfig& a, OutputStorageConfig& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline OutputStorageConfig* New() const PROTOBUF_FINAL { return New(NULL); }

  OutputStorageConfig* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const OutputStorageConfig& from);
  void MergeFrom(const OutputStorageConfig& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(OutputStorageConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.privacy.dlp.v2beta1.BigQueryTable table = 1;
  bool has_table() const;
  void clear_table();
  static const int kTableFieldNumber = 1;
  const ::google::privacy::dlp::v2beta1::BigQueryTable& table() const;
  ::google::privacy::dlp::v2beta1::BigQueryTable* release_table();
  ::google::privacy::dlp::v2beta1::BigQueryTable* mutable_table();
  void set_allocated_table(::google::privacy::dlp::v2beta1::BigQueryTable* table);

  // .google.privacy.dlp.v2beta1.CloudStoragePath storage_path = 2;
  bool has_storage_path() const;
  void clear_storage_path();
  static const int kStoragePathFieldNumber = 2;
  const ::google::privacy::dlp::v2beta1::CloudStoragePath& storage_path() const;
  ::google::privacy::dlp::v2beta1::CloudStoragePath* release_storage_path();
  ::google::privacy::dlp::v2beta1::CloudStoragePath* mutable_storage_path();
  void set_allocated_storage_path(::google::privacy::dlp::v2beta1::CloudStoragePath* storage_path);

  TypeCase type_case() const;
  // @@protoc_insertion_point(class_scope:google.privacy.dlp.v2beta1.OutputStorageConfig)
 private:
  void set_has_table();
  void set_has_storage_path();

  inline bool has_type() const;
  void clear_type();
  inline void clear_has_type();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  union TypeUnion {
    TypeUnion() {}
    ::google::privacy::dlp::v2beta1::BigQueryTable* table_;
    ::google::privacy::dlp::v2beta1::CloudStoragePath* storage_path_;
  } type_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::TableStruct;
  friend void ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaultsOutputStorageConfigImpl();
};
// -------------------------------------------------------------------

class InfoTypeStatistics : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.privacy.dlp.v2beta1.InfoTypeStatistics) */ {
 public:
  InfoTypeStatistics();
  virtual ~InfoTypeStatistics();

  InfoTypeStatistics(const InfoTypeStatistics& from);

  inline InfoTypeStatistics& operator=(const InfoTypeStatistics& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  InfoTypeStatistics(InfoTypeStatistics&& from) noexcept
    : InfoTypeStatistics() {
    *this = ::std::move(from);
  }

  inline InfoTypeStatistics& operator=(InfoTypeStatistics&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const InfoTypeStatistics& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const InfoTypeStatistics* internal_default_instance() {
    return reinterpret_cast<const InfoTypeStatistics*>(
               &_InfoTypeStatistics_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    23;

  void Swap(InfoTypeStatistics* other);
  friend void swap(InfoTypeStatistics& a, InfoTypeStatistics& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline InfoTypeStatistics* New() const PROTOBUF_FINAL { return New(NULL); }

  InfoTypeStatistics* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const InfoTypeStatistics& from);
  void MergeFrom(const InfoTypeStatistics& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(InfoTypeStatistics* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.privacy.dlp.v2beta1.InfoType info_type = 1;
  bool has_info_type() const;
  void clear_info_type();
  static const int kInfoTypeFieldNumber = 1;
  const ::google::privacy::dlp::v2beta1::InfoType& info_type() const;
  ::google::privacy::dlp::v2beta1::InfoType* release_info_type();
  ::google::privacy::dlp::v2beta1::InfoType* mutable_info_type();
  void set_allocated_info_type(::google::privacy::dlp::v2beta1::InfoType* info_type);

  // int64 count = 2;
  void clear_count();
  static const int kCountFieldNumber = 2;
  ::google::protobuf::int64 count() const;
  void set_count(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:google.privacy.dlp.v2beta1.InfoTypeStatistics)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::privacy::dlp::v2beta1::InfoType* info_type_;
  ::google::protobuf::int64 count_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::TableStruct;
  friend void ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaultsInfoTypeStatisticsImpl();
};
// -------------------------------------------------------------------

class InspectOperationMetadata : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.privacy.dlp.v2beta1.InspectOperationMetadata) */ {
 public:
  InspectOperationMetadata();
  virtual ~InspectOperationMetadata();

  InspectOperationMetadata(const InspectOperationMetadata& from);

  inline InspectOperationMetadata& operator=(const InspectOperationMetadata& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  InspectOperationMetadata(InspectOperationMetadata&& from) noexcept
    : InspectOperationMetadata() {
    *this = ::std::move(from);
  }

  inline InspectOperationMetadata& operator=(InspectOperationMetadata&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const InspectOperationMetadata& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const InspectOperationMetadata* internal_default_instance() {
    return reinterpret_cast<const InspectOperationMetadata*>(
               &_InspectOperationMetadata_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    24;

  void Swap(InspectOperationMetadata* other);
  friend void swap(InspectOperationMetadata& a, InspectOperationMetadata& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline InspectOperationMetadata* New() const PROTOBUF_FINAL { return New(NULL); }

  InspectOperationMetadata* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const InspectOperationMetadata& from);
  void MergeFrom(const InspectOperationMetadata& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(InspectOperationMetadata* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .google.privacy.dlp.v2beta1.InfoTypeStatistics info_type_stats = 2;
  int info_type_stats_size() const;
  void clear_info_type_stats();
  static const int kInfoTypeStatsFieldNumber = 2;
  const ::google::privacy::dlp::v2beta1::InfoTypeStatistics& info_type_stats(int index) const;
  ::google::privacy::dlp::v2beta1::InfoTypeStatistics* mutable_info_type_stats(int index);
  ::google::privacy::dlp::v2beta1::InfoTypeStatistics* add_info_type_stats();
  ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2beta1::InfoTypeStatistics >*
      mutable_info_type_stats();
  const ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2beta1::InfoTypeStatistics >&
      info_type_stats() const;

  // .google.protobuf.Timestamp create_time = 3;
  bool has_create_time() const;
  void clear_create_time();
  static const int kCreateTimeFieldNumber = 3;
  const ::google::protobuf::Timestamp& create_time() const;
  ::google::protobuf::Timestamp* release_create_time();
  ::google::protobuf::Timestamp* mutable_create_time();
  void set_allocated_create_time(::google::protobuf::Timestamp* create_time);

  // .google.privacy.dlp.v2beta1.InspectConfig request_inspect_config = 5;
  bool has_request_inspect_config() const;
  void clear_request_inspect_config();
  static const int kRequestInspectConfigFieldNumber = 5;
  const ::google::privacy::dlp::v2beta1::InspectConfig& request_inspect_config() const;
  ::google::privacy::dlp::v2beta1::InspectConfig* release_request_inspect_config();
  ::google::privacy::dlp::v2beta1::InspectConfig* mutable_request_inspect_config();
  void set_allocated_request_inspect_config(::google::privacy::dlp::v2beta1::InspectConfig* request_inspect_config);

  // .google.privacy.dlp.v2beta1.StorageConfig request_storage_config = 6;
  bool has_request_storage_config() const;
  void clear_request_storage_config();
  static const int kRequestStorageConfigFieldNumber = 6;
  const ::google::privacy::dlp::v2beta1::StorageConfig& request_storage_config() const;
  ::google::privacy::dlp::v2beta1::StorageConfig* release_request_storage_config();
  ::google::privacy::dlp::v2beta1::StorageConfig* mutable_request_storage_config();
  void set_allocated_request_storage_config(::google::privacy::dlp::v2beta1::StorageConfig* request_storage_config);

  // .google.privacy.dlp.v2beta1.OutputStorageConfig request_output_config = 7;
  bool has_request_output_config() const;
  void clear_request_output_config();
  static const int kRequestOutputConfigFieldNumber = 7;
  const ::google::privacy::dlp::v2beta1::OutputStorageConfig& request_output_config() const;
  ::google::privacy::dlp::v2beta1::OutputStorageConfig* release_request_output_config();
  ::google::privacy::dlp::v2beta1::OutputStorageConfig* mutable_request_output_config();
  void set_allocated_request_output_config(::google::privacy::dlp::v2beta1::OutputStorageConfig* request_output_config);

  // int64 processed_bytes = 1;
  void clear_processed_bytes();
  static const int kProcessedBytesFieldNumber = 1;
  ::google::protobuf::int64 processed_bytes() const;
  void set_processed_bytes(::google::protobuf::int64 value);

  // int64 total_estimated_bytes = 4;
  void clear_total_estimated_bytes();
  static const int kTotalEstimatedBytesFieldNumber = 4;
  ::google::protobuf::int64 total_estimated_bytes() const;
  void set_total_estimated_bytes(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:google.privacy.dlp.v2beta1.InspectOperationMetadata)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2beta1::InfoTypeStatistics > info_type_stats_;
  ::google::protobuf::Timestamp* create_time_;
  ::google::privacy::dlp::v2beta1::InspectConfig* request_inspect_config_;
  ::google::privacy::dlp::v2beta1::StorageConfig* request_storage_config_;
  ::google::privacy::dlp::v2beta1::OutputStorageConfig* request_output_config_;
  ::google::protobuf::int64 processed_bytes_;
  ::google::protobuf::int64 total_estimated_bytes_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::TableStruct;
  friend void ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaultsInspectOperationMetadataImpl();
};
// -------------------------------------------------------------------

class InspectOperationResult : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.privacy.dlp.v2beta1.InspectOperationResult) */ {
 public:
  InspectOperationResult();
  virtual ~InspectOperationResult();

  InspectOperationResult(const InspectOperationResult& from);

  inline InspectOperationResult& operator=(const InspectOperationResult& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  InspectOperationResult(InspectOperationResult&& from) noexcept
    : InspectOperationResult() {
    *this = ::std::move(from);
  }

  inline InspectOperationResult& operator=(InspectOperationResult&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const InspectOperationResult& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const InspectOperationResult* internal_default_instance() {
    return reinterpret_cast<const InspectOperationResult*>(
               &_InspectOperationResult_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    25;

  void Swap(InspectOperationResult* other);
  friend void swap(InspectOperationResult& a, InspectOperationResult& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline InspectOperationResult* New() const PROTOBUF_FINAL { return New(NULL); }

  InspectOperationResult* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const InspectOperationResult& from);
  void MergeFrom(const InspectOperationResult& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(InspectOperationResult* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:google.privacy.dlp.v2beta1.InspectOperationResult)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::TableStruct;
  friend void ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaultsInspectOperationResultImpl();
};
// -------------------------------------------------------------------

class ListInspectFindingsRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.privacy.dlp.v2beta1.ListInspectFindingsRequest) */ {
 public:
  ListInspectFindingsRequest();
  virtual ~ListInspectFindingsRequest();

  ListInspectFindingsRequest(const ListInspectFindingsRequest& from);

  inline ListInspectFindingsRequest& operator=(const ListInspectFindingsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ListInspectFindingsRequest(ListInspectFindingsRequest&& from) noexcept
    : ListInspectFindingsRequest() {
    *this = ::std::move(from);
  }

  inline ListInspectFindingsRequest& operator=(ListInspectFindingsRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ListInspectFindingsRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListInspectFindingsRequest* internal_default_instance() {
    return reinterpret_cast<const ListInspectFindingsRequest*>(
               &_ListInspectFindingsRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    26;

  void Swap(ListInspectFindingsRequest* other);
  friend void swap(ListInspectFindingsRequest& a, ListInspectFindingsRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ListInspectFindingsRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  ListInspectFindingsRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ListInspectFindingsRequest& from);
  void MergeFrom(const ListInspectFindingsRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ListInspectFindingsRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // string page_token = 3;
  void clear_page_token();
  static const int kPageTokenFieldNumber = 3;
  const ::std::string& page_token() const;
  void set_page_token(const ::std::string& value);
  #if LANG_CXX11
  void set_page_token(::std::string&& value);
  #endif
  void set_page_token(const char* value);
  void set_page_token(const char* value, size_t size);
  ::std::string* mutable_page_token();
  ::std::string* release_page_token();
  void set_allocated_page_token(::std::string* page_token);

  // string filter = 4;
  void clear_filter();
  static const int kFilterFieldNumber = 4;
  const ::std::string& filter() const;
  void set_filter(const ::std::string& value);
  #if LANG_CXX11
  void set_filter(::std::string&& value);
  #endif
  void set_filter(const char* value);
  void set_filter(const char* value, size_t size);
  ::std::string* mutable_filter();
  ::std::string* release_filter();
  void set_allocated_filter(::std::string* filter);

  // int32 page_size = 2;
  void clear_page_size();
  static const int kPageSizeFieldNumber = 2;
  ::google::protobuf::int32 page_size() const;
  void set_page_size(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:google.privacy.dlp.v2beta1.ListInspectFindingsRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr page_token_;
  ::google::protobuf::internal::ArenaStringPtr filter_;
  ::google::protobuf::int32 page_size_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::TableStruct;
  friend void ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaultsListInspectFindingsRequestImpl();
};
// -------------------------------------------------------------------

class ListInspectFindingsResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.privacy.dlp.v2beta1.ListInspectFindingsResponse) */ {
 public:
  ListInspectFindingsResponse();
  virtual ~ListInspectFindingsResponse();

  ListInspectFindingsResponse(const ListInspectFindingsResponse& from);

  inline ListInspectFindingsResponse& operator=(const ListInspectFindingsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ListInspectFindingsResponse(ListInspectFindingsResponse&& from) noexcept
    : ListInspectFindingsResponse() {
    *this = ::std::move(from);
  }

  inline ListInspectFindingsResponse& operator=(ListInspectFindingsResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ListInspectFindingsResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListInspectFindingsResponse* internal_default_instance() {
    return reinterpret_cast<const ListInspectFindingsResponse*>(
               &_ListInspectFindingsResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    27;

  void Swap(ListInspectFindingsResponse* other);
  friend void swap(ListInspectFindingsResponse& a, ListInspectFindingsResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ListInspectFindingsResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  ListInspectFindingsResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ListInspectFindingsResponse& from);
  void MergeFrom(const ListInspectFindingsResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ListInspectFindingsResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string next_page_token = 2;
  void clear_next_page_token();
  static const int kNextPageTokenFieldNumber = 2;
  const ::std::string& next_page_token() const;
  void set_next_page_token(const ::std::string& value);
  #if LANG_CXX11
  void set_next_page_token(::std::string&& value);
  #endif
  void set_next_page_token(const char* value);
  void set_next_page_token(const char* value, size_t size);
  ::std::string* mutable_next_page_token();
  ::std::string* release_next_page_token();
  void set_allocated_next_page_token(::std::string* next_page_token);

  // .google.privacy.dlp.v2beta1.InspectResult result = 1;
  bool has_result() const;
  void clear_result();
  static const int kResultFieldNumber = 1;
  const ::google::privacy::dlp::v2beta1::InspectResult& result() const;
  ::google::privacy::dlp::v2beta1::InspectResult* release_result();
  ::google::privacy::dlp::v2beta1::InspectResult* mutable_result();
  void set_allocated_result(::google::privacy::dlp::v2beta1::InspectResult* result);

  // @@protoc_insertion_point(class_scope:google.privacy.dlp.v2beta1.ListInspectFindingsResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr next_page_token_;
  ::google::privacy::dlp::v2beta1::InspectResult* result_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::TableStruct;
  friend void ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaultsListInspectFindingsResponseImpl();
};
// -------------------------------------------------------------------

class InfoTypeDescription : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.privacy.dlp.v2beta1.InfoTypeDescription) */ {
 public:
  InfoTypeDescription();
  virtual ~InfoTypeDescription();

  InfoTypeDescription(const InfoTypeDescription& from);

  inline InfoTypeDescription& operator=(const InfoTypeDescription& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  InfoTypeDescription(InfoTypeDescription&& from) noexcept
    : InfoTypeDescription() {
    *this = ::std::move(from);
  }

  inline InfoTypeDescription& operator=(InfoTypeDescription&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const InfoTypeDescription& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const InfoTypeDescription* internal_default_instance() {
    return reinterpret_cast<const InfoTypeDescription*>(
               &_InfoTypeDescription_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    28;

  void Swap(InfoTypeDescription* other);
  friend void swap(InfoTypeDescription& a, InfoTypeDescription& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline InfoTypeDescription* New() const PROTOBUF_FINAL { return New(NULL); }

  InfoTypeDescription* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const InfoTypeDescription& from);
  void MergeFrom(const InfoTypeDescription& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(InfoTypeDescription* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .google.privacy.dlp.v2beta1.CategoryDescription categories = 3;
  int categories_size() const;
  void clear_categories();
  static const int kCategoriesFieldNumber = 3;
  const ::google::privacy::dlp::v2beta1::CategoryDescription& categories(int index) const;
  ::google::privacy::dlp::v2beta1::CategoryDescription* mutable_categories(int index);
  ::google::privacy::dlp::v2beta1::CategoryDescription* add_categories();
  ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2beta1::CategoryDescription >*
      mutable_categories();
  const ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2beta1::CategoryDescription >&
      categories() const;

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // string display_name = 2;
  void clear_display_name();
  static const int kDisplayNameFieldNumber = 2;
  const ::std::string& display_name() const;
  void set_display_name(const ::std::string& value);
  #if LANG_CXX11
  void set_display_name(::std::string&& value);
  #endif
  void set_display_name(const char* value);
  void set_display_name(const char* value, size_t size);
  ::std::string* mutable_display_name();
  ::std::string* release_display_name();
  void set_allocated_display_name(::std::string* display_name);

  // @@protoc_insertion_point(class_scope:google.privacy.dlp.v2beta1.InfoTypeDescription)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2beta1::CategoryDescription > categories_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr display_name_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::TableStruct;
  friend void ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaultsInfoTypeDescriptionImpl();
};
// -------------------------------------------------------------------

class ListInfoTypesRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.privacy.dlp.v2beta1.ListInfoTypesRequest) */ {
 public:
  ListInfoTypesRequest();
  virtual ~ListInfoTypesRequest();

  ListInfoTypesRequest(const ListInfoTypesRequest& from);

  inline ListInfoTypesRequest& operator=(const ListInfoTypesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ListInfoTypesRequest(ListInfoTypesRequest&& from) noexcept
    : ListInfoTypesRequest() {
    *this = ::std::move(from);
  }

  inline ListInfoTypesRequest& operator=(ListInfoTypesRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ListInfoTypesRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListInfoTypesRequest* internal_default_instance() {
    return reinterpret_cast<const ListInfoTypesRequest*>(
               &_ListInfoTypesRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    29;

  void Swap(ListInfoTypesRequest* other);
  friend void swap(ListInfoTypesRequest& a, ListInfoTypesRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ListInfoTypesRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  ListInfoTypesRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ListInfoTypesRequest& from);
  void MergeFrom(const ListInfoTypesRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ListInfoTypesRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string category = 1;
  void clear_category();
  static const int kCategoryFieldNumber = 1;
  const ::std::string& category() const;
  void set_category(const ::std::string& value);
  #if LANG_CXX11
  void set_category(::std::string&& value);
  #endif
  void set_category(const char* value);
  void set_category(const char* value, size_t size);
  ::std::string* mutable_category();
  ::std::string* release_category();
  void set_allocated_category(::std::string* category);

  // string language_code = 2;
  void clear_language_code();
  static const int kLanguageCodeFieldNumber = 2;
  const ::std::string& language_code() const;
  void set_language_code(const ::std::string& value);
  #if LANG_CXX11
  void set_language_code(::std::string&& value);
  #endif
  void set_language_code(const char* value);
  void set_language_code(const char* value, size_t size);
  ::std::string* mutable_language_code();
  ::std::string* release_language_code();
  void set_allocated_language_code(::std::string* language_code);

  // @@protoc_insertion_point(class_scope:google.privacy.dlp.v2beta1.ListInfoTypesRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr category_;
  ::google::protobuf::internal::ArenaStringPtr language_code_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::TableStruct;
  friend void ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaultsListInfoTypesRequestImpl();
};
// -------------------------------------------------------------------

class ListInfoTypesResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.privacy.dlp.v2beta1.ListInfoTypesResponse) */ {
 public:
  ListInfoTypesResponse();
  virtual ~ListInfoTypesResponse();

  ListInfoTypesResponse(const ListInfoTypesResponse& from);

  inline ListInfoTypesResponse& operator=(const ListInfoTypesResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ListInfoTypesResponse(ListInfoTypesResponse&& from) noexcept
    : ListInfoTypesResponse() {
    *this = ::std::move(from);
  }

  inline ListInfoTypesResponse& operator=(ListInfoTypesResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ListInfoTypesResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListInfoTypesResponse* internal_default_instance() {
    return reinterpret_cast<const ListInfoTypesResponse*>(
               &_ListInfoTypesResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    30;

  void Swap(ListInfoTypesResponse* other);
  friend void swap(ListInfoTypesResponse& a, ListInfoTypesResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ListInfoTypesResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  ListInfoTypesResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ListInfoTypesResponse& from);
  void MergeFrom(const ListInfoTypesResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ListInfoTypesResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .google.privacy.dlp.v2beta1.InfoTypeDescription info_types = 1;
  int info_types_size() const;
  void clear_info_types();
  static const int kInfoTypesFieldNumber = 1;
  const ::google::privacy::dlp::v2beta1::InfoTypeDescription& info_types(int index) const;
  ::google::privacy::dlp::v2beta1::InfoTypeDescription* mutable_info_types(int index);
  ::google::privacy::dlp::v2beta1::InfoTypeDescription* add_info_types();
  ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2beta1::InfoTypeDescription >*
      mutable_info_types();
  const ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2beta1::InfoTypeDescription >&
      info_types() const;

  // @@protoc_insertion_point(class_scope:google.privacy.dlp.v2beta1.ListInfoTypesResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2beta1::InfoTypeDescription > info_types_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::TableStruct;
  friend void ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaultsListInfoTypesResponseImpl();
};
// -------------------------------------------------------------------

class CategoryDescription : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.privacy.dlp.v2beta1.CategoryDescription) */ {
 public:
  CategoryDescription();
  virtual ~CategoryDescription();

  CategoryDescription(const CategoryDescription& from);

  inline CategoryDescription& operator=(const CategoryDescription& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CategoryDescription(CategoryDescription&& from) noexcept
    : CategoryDescription() {
    *this = ::std::move(from);
  }

  inline CategoryDescription& operator=(CategoryDescription&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CategoryDescription& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CategoryDescription* internal_default_instance() {
    return reinterpret_cast<const CategoryDescription*>(
               &_CategoryDescription_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    31;

  void Swap(CategoryDescription* other);
  friend void swap(CategoryDescription& a, CategoryDescription& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CategoryDescription* New() const PROTOBUF_FINAL { return New(NULL); }

  CategoryDescription* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CategoryDescription& from);
  void MergeFrom(const CategoryDescription& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CategoryDescription* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // string display_name = 2;
  void clear_display_name();
  static const int kDisplayNameFieldNumber = 2;
  const ::std::string& display_name() const;
  void set_display_name(const ::std::string& value);
  #if LANG_CXX11
  void set_display_name(::std::string&& value);
  #endif
  void set_display_name(const char* value);
  void set_display_name(const char* value, size_t size);
  ::std::string* mutable_display_name();
  ::std::string* release_display_name();
  void set_allocated_display_name(::std::string* display_name);

  // @@protoc_insertion_point(class_scope:google.privacy.dlp.v2beta1.CategoryDescription)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr display_name_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::TableStruct;
  friend void ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaultsCategoryDescriptionImpl();
};
// -------------------------------------------------------------------

class ListRootCategoriesRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.privacy.dlp.v2beta1.ListRootCategoriesRequest) */ {
 public:
  ListRootCategoriesRequest();
  virtual ~ListRootCategoriesRequest();

  ListRootCategoriesRequest(const ListRootCategoriesRequest& from);

  inline ListRootCategoriesRequest& operator=(const ListRootCategoriesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ListRootCategoriesRequest(ListRootCategoriesRequest&& from) noexcept
    : ListRootCategoriesRequest() {
    *this = ::std::move(from);
  }

  inline ListRootCategoriesRequest& operator=(ListRootCategoriesRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ListRootCategoriesRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListRootCategoriesRequest* internal_default_instance() {
    return reinterpret_cast<const ListRootCategoriesRequest*>(
               &_ListRootCategoriesRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    32;

  void Swap(ListRootCategoriesRequest* other);
  friend void swap(ListRootCategoriesRequest& a, ListRootCategoriesRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ListRootCategoriesRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  ListRootCategoriesRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ListRootCategoriesRequest& from);
  void MergeFrom(const ListRootCategoriesRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ListRootCategoriesRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string language_code = 1;
  void clear_language_code();
  static const int kLanguageCodeFieldNumber = 1;
  const ::std::string& language_code() const;
  void set_language_code(const ::std::string& value);
  #if LANG_CXX11
  void set_language_code(::std::string&& value);
  #endif
  void set_language_code(const char* value);
  void set_language_code(const char* value, size_t size);
  ::std::string* mutable_language_code();
  ::std::string* release_language_code();
  void set_allocated_language_code(::std::string* language_code);

  // @@protoc_insertion_point(class_scope:google.privacy.dlp.v2beta1.ListRootCategoriesRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr language_code_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::TableStruct;
  friend void ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaultsListRootCategoriesRequestImpl();
};
// -------------------------------------------------------------------

class ListRootCategoriesResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.privacy.dlp.v2beta1.ListRootCategoriesResponse) */ {
 public:
  ListRootCategoriesResponse();
  virtual ~ListRootCategoriesResponse();

  ListRootCategoriesResponse(const ListRootCategoriesResponse& from);

  inline ListRootCategoriesResponse& operator=(const ListRootCategoriesResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ListRootCategoriesResponse(ListRootCategoriesResponse&& from) noexcept
    : ListRootCategoriesResponse() {
    *this = ::std::move(from);
  }

  inline ListRootCategoriesResponse& operator=(ListRootCategoriesResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ListRootCategoriesResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListRootCategoriesResponse* internal_default_instance() {
    return reinterpret_cast<const ListRootCategoriesResponse*>(
               &_ListRootCategoriesResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    33;

  void Swap(ListRootCategoriesResponse* other);
  friend void swap(ListRootCategoriesResponse& a, ListRootCategoriesResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ListRootCategoriesResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  ListRootCategoriesResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ListRootCategoriesResponse& from);
  void MergeFrom(const ListRootCategoriesResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ListRootCategoriesResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .google.privacy.dlp.v2beta1.CategoryDescription categories = 1;
  int categories_size() const;
  void clear_categories();
  static const int kCategoriesFieldNumber = 1;
  const ::google::privacy::dlp::v2beta1::CategoryDescription& categories(int index) const;
  ::google::privacy::dlp::v2beta1::CategoryDescription* mutable_categories(int index);
  ::google::privacy::dlp::v2beta1::CategoryDescription* add_categories();
  ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2beta1::CategoryDescription >*
      mutable_categories();
  const ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2beta1::CategoryDescription >&
      categories() const;

  // @@protoc_insertion_point(class_scope:google.privacy.dlp.v2beta1.ListRootCategoriesResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2beta1::CategoryDescription > categories_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::TableStruct;
  friend void ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaultsListRootCategoriesResponseImpl();
};
// -------------------------------------------------------------------

class AnalyzeDataSourceRiskRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.privacy.dlp.v2beta1.AnalyzeDataSourceRiskRequest) */ {
 public:
  AnalyzeDataSourceRiskRequest();
  virtual ~AnalyzeDataSourceRiskRequest();

  AnalyzeDataSourceRiskRequest(const AnalyzeDataSourceRiskRequest& from);

  inline AnalyzeDataSourceRiskRequest& operator=(const AnalyzeDataSourceRiskRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AnalyzeDataSourceRiskRequest(AnalyzeDataSourceRiskRequest&& from) noexcept
    : AnalyzeDataSourceRiskRequest() {
    *this = ::std::move(from);
  }

  inline AnalyzeDataSourceRiskRequest& operator=(AnalyzeDataSourceRiskRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const AnalyzeDataSourceRiskRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AnalyzeDataSourceRiskRequest* internal_default_instance() {
    return reinterpret_cast<const AnalyzeDataSourceRiskRequest*>(
               &_AnalyzeDataSourceRiskRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    34;

  void Swap(AnalyzeDataSourceRiskRequest* other);
  friend void swap(AnalyzeDataSourceRiskRequest& a, AnalyzeDataSourceRiskRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AnalyzeDataSourceRiskRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  AnalyzeDataSourceRiskRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const AnalyzeDataSourceRiskRequest& from);
  void MergeFrom(const AnalyzeDataSourceRiskRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(AnalyzeDataSourceRiskRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.privacy.dlp.v2beta1.PrivacyMetric privacy_metric = 1;
  bool has_privacy_metric() const;
  void clear_privacy_metric();
  static const int kPrivacyMetricFieldNumber = 1;
  const ::google::privacy::dlp::v2beta1::PrivacyMetric& privacy_metric() const;
  ::google::privacy::dlp::v2beta1::PrivacyMetric* release_privacy_metric();
  ::google::privacy::dlp::v2beta1::PrivacyMetric* mutable_privacy_metric();
  void set_allocated_privacy_metric(::google::privacy::dlp::v2beta1::PrivacyMetric* privacy_metric);

  // .google.privacy.dlp.v2beta1.BigQueryTable source_table = 3;
  bool has_source_table() const;
  void clear_source_table();
  static const int kSourceTableFieldNumber = 3;
  const ::google::privacy::dlp::v2beta1::BigQueryTable& source_table() const;
  ::google::privacy::dlp::v2beta1::BigQueryTable* release_source_table();
  ::google::privacy::dlp::v2beta1::BigQueryTable* mutable_source_table();
  void set_allocated_source_table(::google::privacy::dlp::v2beta1::BigQueryTable* source_table);

  // @@protoc_insertion_point(class_scope:google.privacy.dlp.v2beta1.AnalyzeDataSourceRiskRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::privacy::dlp::v2beta1::PrivacyMetric* privacy_metric_;
  ::google::privacy::dlp::v2beta1::BigQueryTable* source_table_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::TableStruct;
  friend void ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaultsAnalyzeDataSourceRiskRequestImpl();
};
// -------------------------------------------------------------------

class PrivacyMetric_NumericalStatsConfig : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.privacy.dlp.v2beta1.PrivacyMetric.NumericalStatsConfig) */ {
 public:
  PrivacyMetric_NumericalStatsConfig();
  virtual ~PrivacyMetric_NumericalStatsConfig();

  PrivacyMetric_NumericalStatsConfig(const PrivacyMetric_NumericalStatsConfig& from);

  inline PrivacyMetric_NumericalStatsConfig& operator=(const PrivacyMetric_NumericalStatsConfig& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PrivacyMetric_NumericalStatsConfig(PrivacyMetric_NumericalStatsConfig&& from) noexcept
    : PrivacyMetric_NumericalStatsConfig() {
    *this = ::std::move(from);
  }

  inline PrivacyMetric_NumericalStatsConfig& operator=(PrivacyMetric_NumericalStatsConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PrivacyMetric_NumericalStatsConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PrivacyMetric_NumericalStatsConfig* internal_default_instance() {
    return reinterpret_cast<const PrivacyMetric_NumericalStatsConfig*>(
               &_PrivacyMetric_NumericalStatsConfig_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    35;

  void Swap(PrivacyMetric_NumericalStatsConfig* other);
  friend void swap(PrivacyMetric_NumericalStatsConfig& a, PrivacyMetric_NumericalStatsConfig& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PrivacyMetric_NumericalStatsConfig* New() const PROTOBUF_FINAL { return New(NULL); }

  PrivacyMetric_NumericalStatsConfig* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const PrivacyMetric_NumericalStatsConfig& from);
  void MergeFrom(const PrivacyMetric_NumericalStatsConfig& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(PrivacyMetric_NumericalStatsConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.privacy.dlp.v2beta1.FieldId field = 1;
  bool has_field() const;
  void clear_field();
  static const int kFieldFieldNumber = 1;
  const ::google::privacy::dlp::v2beta1::FieldId& field() const;
  ::google::privacy::dlp::v2beta1::FieldId* release_field();
  ::google::privacy::dlp::v2beta1::FieldId* mutable_field();
  void set_allocated_field(::google::privacy::dlp::v2beta1::FieldId* field);

  // @@protoc_insertion_point(class_scope:google.privacy.dlp.v2beta1.PrivacyMetric.NumericalStatsConfig)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::privacy::dlp::v2beta1::FieldId* field_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::TableStruct;
  friend void ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaultsPrivacyMetric_NumericalStatsConfigImpl();
};
// -------------------------------------------------------------------

class PrivacyMetric_CategoricalStatsConfig : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.privacy.dlp.v2beta1.PrivacyMetric.CategoricalStatsConfig) */ {
 public:
  PrivacyMetric_CategoricalStatsConfig();
  virtual ~PrivacyMetric_CategoricalStatsConfig();

  PrivacyMetric_CategoricalStatsConfig(const PrivacyMetric_CategoricalStatsConfig& from);

  inline PrivacyMetric_CategoricalStatsConfig& operator=(const PrivacyMetric_CategoricalStatsConfig& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PrivacyMetric_CategoricalStatsConfig(PrivacyMetric_CategoricalStatsConfig&& from) noexcept
    : PrivacyMetric_CategoricalStatsConfig() {
    *this = ::std::move(from);
  }

  inline PrivacyMetric_CategoricalStatsConfig& operator=(PrivacyMetric_CategoricalStatsConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PrivacyMetric_CategoricalStatsConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PrivacyMetric_CategoricalStatsConfig* internal_default_instance() {
    return reinterpret_cast<const PrivacyMetric_CategoricalStatsConfig*>(
               &_PrivacyMetric_CategoricalStatsConfig_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    36;

  void Swap(PrivacyMetric_CategoricalStatsConfig* other);
  friend void swap(PrivacyMetric_CategoricalStatsConfig& a, PrivacyMetric_CategoricalStatsConfig& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PrivacyMetric_CategoricalStatsConfig* New() const PROTOBUF_FINAL { return New(NULL); }

  PrivacyMetric_CategoricalStatsConfig* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const PrivacyMetric_CategoricalStatsConfig& from);
  void MergeFrom(const PrivacyMetric_CategoricalStatsConfig& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(PrivacyMetric_CategoricalStatsConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.privacy.dlp.v2beta1.FieldId field = 1;
  bool has_field() const;
  void clear_field();
  static const int kFieldFieldNumber = 1;
  const ::google::privacy::dlp::v2beta1::FieldId& field() const;
  ::google::privacy::dlp::v2beta1::FieldId* release_field();
  ::google::privacy::dlp::v2beta1::FieldId* mutable_field();
  void set_allocated_field(::google::privacy::dlp::v2beta1::FieldId* field);

  // @@protoc_insertion_point(class_scope:google.privacy.dlp.v2beta1.PrivacyMetric.CategoricalStatsConfig)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::privacy::dlp::v2beta1::FieldId* field_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::TableStruct;
  friend void ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaultsPrivacyMetric_CategoricalStatsConfigImpl();
};
// -------------------------------------------------------------------

class PrivacyMetric_KAnonymityConfig : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.privacy.dlp.v2beta1.PrivacyMetric.KAnonymityConfig) */ {
 public:
  PrivacyMetric_KAnonymityConfig();
  virtual ~PrivacyMetric_KAnonymityConfig();

  PrivacyMetric_KAnonymityConfig(const PrivacyMetric_KAnonymityConfig& from);

  inline PrivacyMetric_KAnonymityConfig& operator=(const PrivacyMetric_KAnonymityConfig& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PrivacyMetric_KAnonymityConfig(PrivacyMetric_KAnonymityConfig&& from) noexcept
    : PrivacyMetric_KAnonymityConfig() {
    *this = ::std::move(from);
  }

  inline PrivacyMetric_KAnonymityConfig& operator=(PrivacyMetric_KAnonymityConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PrivacyMetric_KAnonymityConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PrivacyMetric_KAnonymityConfig* internal_default_instance() {
    return reinterpret_cast<const PrivacyMetric_KAnonymityConfig*>(
               &_PrivacyMetric_KAnonymityConfig_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    37;

  void Swap(PrivacyMetric_KAnonymityConfig* other);
  friend void swap(PrivacyMetric_KAnonymityConfig& a, PrivacyMetric_KAnonymityConfig& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PrivacyMetric_KAnonymityConfig* New() const PROTOBUF_FINAL { return New(NULL); }

  PrivacyMetric_KAnonymityConfig* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const PrivacyMetric_KAnonymityConfig& from);
  void MergeFrom(const PrivacyMetric_KAnonymityConfig& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(PrivacyMetric_KAnonymityConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .google.privacy.dlp.v2beta1.FieldId quasi_ids = 1;
  int quasi_ids_size() const;
  void clear_quasi_ids();
  static const int kQuasiIdsFieldNumber = 1;
  const ::google::privacy::dlp::v2beta1::FieldId& quasi_ids(int index) const;
  ::google::privacy::dlp::v2beta1::FieldId* mutable_quasi_ids(int index);
  ::google::privacy::dlp::v2beta1::FieldId* add_quasi_ids();
  ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2beta1::FieldId >*
      mutable_quasi_ids();
  const ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2beta1::FieldId >&
      quasi_ids() const;

  // .google.privacy.dlp.v2beta1.EntityId entity_id = 2;
  bool has_entity_id() const;
  void clear_entity_id();
  static const int kEntityIdFieldNumber = 2;
  const ::google::privacy::dlp::v2beta1::EntityId& entity_id() const;
  ::google::privacy::dlp::v2beta1::EntityId* release_entity_id();
  ::google::privacy::dlp::v2beta1::EntityId* mutable_entity_id();
  void set_allocated_entity_id(::google::privacy::dlp::v2beta1::EntityId* entity_id);

  // @@protoc_insertion_point(class_scope:google.privacy.dlp.v2beta1.PrivacyMetric.KAnonymityConfig)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2beta1::FieldId > quasi_ids_;
  ::google::privacy::dlp::v2beta1::EntityId* entity_id_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::TableStruct;
  friend void ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaultsPrivacyMetric_KAnonymityConfigImpl();
};
// -------------------------------------------------------------------

class PrivacyMetric_LDiversityConfig : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.privacy.dlp.v2beta1.PrivacyMetric.LDiversityConfig) */ {
 public:
  PrivacyMetric_LDiversityConfig();
  virtual ~PrivacyMetric_LDiversityConfig();

  PrivacyMetric_LDiversityConfig(const PrivacyMetric_LDiversityConfig& from);

  inline PrivacyMetric_LDiversityConfig& operator=(const PrivacyMetric_LDiversityConfig& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PrivacyMetric_LDiversityConfig(PrivacyMetric_LDiversityConfig&& from) noexcept
    : PrivacyMetric_LDiversityConfig() {
    *this = ::std::move(from);
  }

  inline PrivacyMetric_LDiversityConfig& operator=(PrivacyMetric_LDiversityConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PrivacyMetric_LDiversityConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PrivacyMetric_LDiversityConfig* internal_default_instance() {
    return reinterpret_cast<const PrivacyMetric_LDiversityConfig*>(
               &_PrivacyMetric_LDiversityConfig_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    38;

  void Swap(PrivacyMetric_LDiversityConfig* other);
  friend void swap(PrivacyMetric_LDiversityConfig& a, PrivacyMetric_LDiversityConfig& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PrivacyMetric_LDiversityConfig* New() const PROTOBUF_FINAL { return New(NULL); }

  PrivacyMetric_LDiversityConfig* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const PrivacyMetric_LDiversityConfig& from);
  void MergeFrom(const PrivacyMetric_LDiversityConfig& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(PrivacyMetric_LDiversityConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .google.privacy.dlp.v2beta1.FieldId quasi_ids = 1;
  int quasi_ids_size() const;
  void clear_quasi_ids();
  static const int kQuasiIdsFieldNumber = 1;
  const ::google::privacy::dlp::v2beta1::FieldId& quasi_ids(int index) const;
  ::google::privacy::dlp::v2beta1::FieldId* mutable_quasi_ids(int index);
  ::google::privacy::dlp::v2beta1::FieldId* add_quasi_ids();
  ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2beta1::FieldId >*
      mutable_quasi_ids();
  const ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2beta1::FieldId >&
      quasi_ids() const;

  // .google.privacy.dlp.v2beta1.FieldId sensitive_attribute = 2;
  bool has_sensitive_attribute() const;
  void clear_sensitive_attribute();
  static const int kSensitiveAttributeFieldNumber = 2;
  const ::google::privacy::dlp::v2beta1::FieldId& sensitive_attribute() const;
  ::google::privacy::dlp::v2beta1::FieldId* release_sensitive_attribute();
  ::google::privacy::dlp::v2beta1::FieldId* mutable_sensitive_attribute();
  void set_allocated_sensitive_attribute(::google::privacy::dlp::v2beta1::FieldId* sensitive_attribute);

  // @@protoc_insertion_point(class_scope:google.privacy.dlp.v2beta1.PrivacyMetric.LDiversityConfig)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2beta1::FieldId > quasi_ids_;
  ::google::privacy::dlp::v2beta1::FieldId* sensitive_attribute_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::TableStruct;
  friend void ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaultsPrivacyMetric_LDiversityConfigImpl();
};
// -------------------------------------------------------------------

class PrivacyMetric : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.privacy.dlp.v2beta1.PrivacyMetric) */ {
 public:
  PrivacyMetric();
  virtual ~PrivacyMetric();

  PrivacyMetric(const PrivacyMetric& from);

  inline PrivacyMetric& operator=(const PrivacyMetric& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PrivacyMetric(PrivacyMetric&& from) noexcept
    : PrivacyMetric() {
    *this = ::std::move(from);
  }

  inline PrivacyMetric& operator=(PrivacyMetric&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PrivacyMetric& default_instance();

  enum TypeCase {
    kNumericalStatsConfig = 1,
    kCategoricalStatsConfig = 2,
    kKAnonymityConfig = 3,
    kLDiversityConfig = 4,
    TYPE_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PrivacyMetric* internal_default_instance() {
    return reinterpret_cast<const PrivacyMetric*>(
               &_PrivacyMetric_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    39;

  void Swap(PrivacyMetric* other);
  friend void swap(PrivacyMetric& a, PrivacyMetric& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PrivacyMetric* New() const PROTOBUF_FINAL { return New(NULL); }

  PrivacyMetric* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const PrivacyMetric& from);
  void MergeFrom(const PrivacyMetric& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(PrivacyMetric* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef PrivacyMetric_NumericalStatsConfig NumericalStatsConfig;
  typedef PrivacyMetric_CategoricalStatsConfig CategoricalStatsConfig;
  typedef PrivacyMetric_KAnonymityConfig KAnonymityConfig;
  typedef PrivacyMetric_LDiversityConfig LDiversityConfig;

  // accessors -------------------------------------------------------

  // .google.privacy.dlp.v2beta1.PrivacyMetric.NumericalStatsConfig numerical_stats_config = 1;
  bool has_numerical_stats_config() const;
  void clear_numerical_stats_config();
  static const int kNumericalStatsConfigFieldNumber = 1;
  const ::google::privacy::dlp::v2beta1::PrivacyMetric_NumericalStatsConfig& numerical_stats_config() const;
  ::google::privacy::dlp::v2beta1::PrivacyMetric_NumericalStatsConfig* release_numerical_stats_config();
  ::google::privacy::dlp::v2beta1::PrivacyMetric_NumericalStatsConfig* mutable_numerical_stats_config();
  void set_allocated_numerical_stats_config(::google::privacy::dlp::v2beta1::PrivacyMetric_NumericalStatsConfig* numerical_stats_config);

  // .google.privacy.dlp.v2beta1.PrivacyMetric.CategoricalStatsConfig categorical_stats_config = 2;
  bool has_categorical_stats_config() const;
  void clear_categorical_stats_config();
  static const int kCategoricalStatsConfigFieldNumber = 2;
  const ::google::privacy::dlp::v2beta1::PrivacyMetric_CategoricalStatsConfig& categorical_stats_config() const;
  ::google::privacy::dlp::v2beta1::PrivacyMetric_CategoricalStatsConfig* release_categorical_stats_config();
  ::google::privacy::dlp::v2beta1::PrivacyMetric_CategoricalStatsConfig* mutable_categorical_stats_config();
  void set_allocated_categorical_stats_config(::google::privacy::dlp::v2beta1::PrivacyMetric_CategoricalStatsConfig* categorical_stats_config);

  // .google.privacy.dlp.v2beta1.PrivacyMetric.KAnonymityConfig k_anonymity_config = 3;
  bool has_k_anonymity_config() const;
  void clear_k_anonymity_config();
  static const int kKAnonymityConfigFieldNumber = 3;
  const ::google::privacy::dlp::v2beta1::PrivacyMetric_KAnonymityConfig& k_anonymity_config() const;
  ::google::privacy::dlp::v2beta1::PrivacyMetric_KAnonymityConfig* release_k_anonymity_config();
  ::google::privacy::dlp::v2beta1::PrivacyMetric_KAnonymityConfig* mutable_k_anonymity_config();
  void set_allocated_k_anonymity_config(::google::privacy::dlp::v2beta1::PrivacyMetric_KAnonymityConfig* k_anonymity_config);

  // .google.privacy.dlp.v2beta1.PrivacyMetric.LDiversityConfig l_diversity_config = 4;
  bool has_l_diversity_config() const;
  void clear_l_diversity_config();
  static const int kLDiversityConfigFieldNumber = 4;
  const ::google::privacy::dlp::v2beta1::PrivacyMetric_LDiversityConfig& l_diversity_config() const;
  ::google::privacy::dlp::v2beta1::PrivacyMetric_LDiversityConfig* release_l_diversity_config();
  ::google::privacy::dlp::v2beta1::PrivacyMetric_LDiversityConfig* mutable_l_diversity_config();
  void set_allocated_l_diversity_config(::google::privacy::dlp::v2beta1::PrivacyMetric_LDiversityConfig* l_diversity_config);

  TypeCase type_case() const;
  // @@protoc_insertion_point(class_scope:google.privacy.dlp.v2beta1.PrivacyMetric)
 private:
  void set_has_numerical_stats_config();
  void set_has_categorical_stats_config();
  void set_has_k_anonymity_config();
  void set_has_l_diversity_config();

  inline bool has_type() const;
  void clear_type();
  inline void clear_has_type();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  union TypeUnion {
    TypeUnion() {}
    ::google::privacy::dlp::v2beta1::PrivacyMetric_NumericalStatsConfig* numerical_stats_config_;
    ::google::privacy::dlp::v2beta1::PrivacyMetric_CategoricalStatsConfig* categorical_stats_config_;
    ::google::privacy::dlp::v2beta1::PrivacyMetric_KAnonymityConfig* k_anonymity_config_;
    ::google::privacy::dlp::v2beta1::PrivacyMetric_LDiversityConfig* l_diversity_config_;
  } type_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::TableStruct;
  friend void ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaultsPrivacyMetricImpl();
};
// -------------------------------------------------------------------

class RiskAnalysisOperationMetadata : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.privacy.dlp.v2beta1.RiskAnalysisOperationMetadata) */ {
 public:
  RiskAnalysisOperationMetadata();
  virtual ~RiskAnalysisOperationMetadata();

  RiskAnalysisOperationMetadata(const RiskAnalysisOperationMetadata& from);

  inline RiskAnalysisOperationMetadata& operator=(const RiskAnalysisOperationMetadata& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RiskAnalysisOperationMetadata(RiskAnalysisOperationMetadata&& from) noexcept
    : RiskAnalysisOperationMetadata() {
    *this = ::std::move(from);
  }

  inline RiskAnalysisOperationMetadata& operator=(RiskAnalysisOperationMetadata&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RiskAnalysisOperationMetadata& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RiskAnalysisOperationMetadata* internal_default_instance() {
    return reinterpret_cast<const RiskAnalysisOperationMetadata*>(
               &_RiskAnalysisOperationMetadata_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    40;

  void Swap(RiskAnalysisOperationMetadata* other);
  friend void swap(RiskAnalysisOperationMetadata& a, RiskAnalysisOperationMetadata& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RiskAnalysisOperationMetadata* New() const PROTOBUF_FINAL { return New(NULL); }

  RiskAnalysisOperationMetadata* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const RiskAnalysisOperationMetadata& from);
  void MergeFrom(const RiskAnalysisOperationMetadata& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(RiskAnalysisOperationMetadata* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.protobuf.Timestamp create_time = 1;
  bool has_create_time() const;
  void clear_create_time();
  static const int kCreateTimeFieldNumber = 1;
  const ::google::protobuf::Timestamp& create_time() const;
  ::google::protobuf::Timestamp* release_create_time();
  ::google::protobuf::Timestamp* mutable_create_time();
  void set_allocated_create_time(::google::protobuf::Timestamp* create_time);

  // .google.privacy.dlp.v2beta1.PrivacyMetric requested_privacy_metric = 2;
  bool has_requested_privacy_metric() const;
  void clear_requested_privacy_metric();
  static const int kRequestedPrivacyMetricFieldNumber = 2;
  const ::google::privacy::dlp::v2beta1::PrivacyMetric& requested_privacy_metric() const;
  ::google::privacy::dlp::v2beta1::PrivacyMetric* release_requested_privacy_metric();
  ::google::privacy::dlp::v2beta1::PrivacyMetric* mutable_requested_privacy_metric();
  void set_allocated_requested_privacy_metric(::google::privacy::dlp::v2beta1::PrivacyMetric* requested_privacy_metric);

  // .google.privacy.dlp.v2beta1.BigQueryTable requested_source_table = 3;
  bool has_requested_source_table() const;
  void clear_requested_source_table();
  static const int kRequestedSourceTableFieldNumber = 3;
  const ::google::privacy::dlp::v2beta1::BigQueryTable& requested_source_table() const;
  ::google::privacy::dlp::v2beta1::BigQueryTable* release_requested_source_table();
  ::google::privacy::dlp::v2beta1::BigQueryTable* mutable_requested_source_table();
  void set_allocated_requested_source_table(::google::privacy::dlp::v2beta1::BigQueryTable* requested_source_table);

  // @@protoc_insertion_point(class_scope:google.privacy.dlp.v2beta1.RiskAnalysisOperationMetadata)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::Timestamp* create_time_;
  ::google::privacy::dlp::v2beta1::PrivacyMetric* requested_privacy_metric_;
  ::google::privacy::dlp::v2beta1::BigQueryTable* requested_source_table_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::TableStruct;
  friend void ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaultsRiskAnalysisOperationMetadataImpl();
};
// -------------------------------------------------------------------

class RiskAnalysisOperationResult_NumericalStatsResult : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.privacy.dlp.v2beta1.RiskAnalysisOperationResult.NumericalStatsResult) */ {
 public:
  RiskAnalysisOperationResult_NumericalStatsResult();
  virtual ~RiskAnalysisOperationResult_NumericalStatsResult();

  RiskAnalysisOperationResult_NumericalStatsResult(const RiskAnalysisOperationResult_NumericalStatsResult& from);

  inline RiskAnalysisOperationResult_NumericalStatsResult& operator=(const RiskAnalysisOperationResult_NumericalStatsResult& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RiskAnalysisOperationResult_NumericalStatsResult(RiskAnalysisOperationResult_NumericalStatsResult&& from) noexcept
    : RiskAnalysisOperationResult_NumericalStatsResult() {
    *this = ::std::move(from);
  }

  inline RiskAnalysisOperationResult_NumericalStatsResult& operator=(RiskAnalysisOperationResult_NumericalStatsResult&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RiskAnalysisOperationResult_NumericalStatsResult& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RiskAnalysisOperationResult_NumericalStatsResult* internal_default_instance() {
    return reinterpret_cast<const RiskAnalysisOperationResult_NumericalStatsResult*>(
               &_RiskAnalysisOperationResult_NumericalStatsResult_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    41;

  void Swap(RiskAnalysisOperationResult_NumericalStatsResult* other);
  friend void swap(RiskAnalysisOperationResult_NumericalStatsResult& a, RiskAnalysisOperationResult_NumericalStatsResult& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RiskAnalysisOperationResult_NumericalStatsResult* New() const PROTOBUF_FINAL { return New(NULL); }

  RiskAnalysisOperationResult_NumericalStatsResult* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const RiskAnalysisOperationResult_NumericalStatsResult& from);
  void MergeFrom(const RiskAnalysisOperationResult_NumericalStatsResult& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(RiskAnalysisOperationResult_NumericalStatsResult* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .google.privacy.dlp.v2beta1.Value quantile_values = 4;
  int quantile_values_size() const;
  void clear_quantile_values();
  static const int kQuantileValuesFieldNumber = 4;
  const ::google::privacy::dlp::v2beta1::Value& quantile_values(int index) const;
  ::google::privacy::dlp::v2beta1::Value* mutable_quantile_values(int index);
  ::google::privacy::dlp::v2beta1::Value* add_quantile_values();
  ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2beta1::Value >*
      mutable_quantile_values();
  const ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2beta1::Value >&
      quantile_values() const;

  // .google.privacy.dlp.v2beta1.Value min_value = 1;
  bool has_min_value() const;
  void clear_min_value();
  static const int kMinValueFieldNumber = 1;
  const ::google::privacy::dlp::v2beta1::Value& min_value() const;
  ::google::privacy::dlp::v2beta1::Value* release_min_value();
  ::google::privacy::dlp::v2beta1::Value* mutable_min_value();
  void set_allocated_min_value(::google::privacy::dlp::v2beta1::Value* min_value);

  // .google.privacy.dlp.v2beta1.Value max_value = 2;
  bool has_max_value() const;
  void clear_max_value();
  static const int kMaxValueFieldNumber = 2;
  const ::google::privacy::dlp::v2beta1::Value& max_value() const;
  ::google::privacy::dlp::v2beta1::Value* release_max_value();
  ::google::privacy::dlp::v2beta1::Value* mutable_max_value();
  void set_allocated_max_value(::google::privacy::dlp::v2beta1::Value* max_value);

  // @@protoc_insertion_point(class_scope:google.privacy.dlp.v2beta1.RiskAnalysisOperationResult.NumericalStatsResult)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2beta1::Value > quantile_values_;
  ::google::privacy::dlp::v2beta1::Value* min_value_;
  ::google::privacy::dlp::v2beta1::Value* max_value_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::TableStruct;
  friend void ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaultsRiskAnalysisOperationResult_NumericalStatsResultImpl();
};
// -------------------------------------------------------------------

class RiskAnalysisOperationResult_CategoricalStatsResult_CategoricalStatsHistogramBucket : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.privacy.dlp.v2beta1.RiskAnalysisOperationResult.CategoricalStatsResult.CategoricalStatsHistogramBucket) */ {
 public:
  RiskAnalysisOperationResult_CategoricalStatsResult_CategoricalStatsHistogramBucket();
  virtual ~RiskAnalysisOperationResult_CategoricalStatsResult_CategoricalStatsHistogramBucket();

  RiskAnalysisOperationResult_CategoricalStatsResult_CategoricalStatsHistogramBucket(const RiskAnalysisOperationResult_CategoricalStatsResult_CategoricalStatsHistogramBucket& from);

  inline RiskAnalysisOperationResult_CategoricalStatsResult_CategoricalStatsHistogramBucket& operator=(const RiskAnalysisOperationResult_CategoricalStatsResult_CategoricalStatsHistogramBucket& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RiskAnalysisOperationResult_CategoricalStatsResult_CategoricalStatsHistogramBucket(RiskAnalysisOperationResult_CategoricalStatsResult_CategoricalStatsHistogramBucket&& from) noexcept
    : RiskAnalysisOperationResult_CategoricalStatsResult_CategoricalStatsHistogramBucket() {
    *this = ::std::move(from);
  }

  inline RiskAnalysisOperationResult_CategoricalStatsResult_CategoricalStatsHistogramBucket& operator=(RiskAnalysisOperationResult_CategoricalStatsResult_CategoricalStatsHistogramBucket&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RiskAnalysisOperationResult_CategoricalStatsResult_CategoricalStatsHistogramBucket& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RiskAnalysisOperationResult_CategoricalStatsResult_CategoricalStatsHistogramBucket* internal_default_instance() {
    return reinterpret_cast<const RiskAnalysisOperationResult_CategoricalStatsResult_CategoricalStatsHistogramBucket*>(
               &_RiskAnalysisOperationResult_CategoricalStatsResult_CategoricalStatsHistogramBucket_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    42;

  void Swap(RiskAnalysisOperationResult_CategoricalStatsResult_CategoricalStatsHistogramBucket* other);
  friend void swap(RiskAnalysisOperationResult_CategoricalStatsResult_CategoricalStatsHistogramBucket& a, RiskAnalysisOperationResult_CategoricalStatsResult_CategoricalStatsHistogramBucket& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RiskAnalysisOperationResult_CategoricalStatsResult_CategoricalStatsHistogramBucket* New() const PROTOBUF_FINAL { return New(NULL); }

  RiskAnalysisOperationResult_CategoricalStatsResult_CategoricalStatsHistogramBucket* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const RiskAnalysisOperationResult_CategoricalStatsResult_CategoricalStatsHistogramBucket& from);
  void MergeFrom(const RiskAnalysisOperationResult_CategoricalStatsResult_CategoricalStatsHistogramBucket& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(RiskAnalysisOperationResult_CategoricalStatsResult_CategoricalStatsHistogramBucket* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .google.privacy.dlp.v2beta1.ValueFrequency bucket_values = 4;
  int bucket_values_size() const;
  void clear_bucket_values();
  static const int kBucketValuesFieldNumber = 4;
  const ::google::privacy::dlp::v2beta1::ValueFrequency& bucket_values(int index) const;
  ::google::privacy::dlp::v2beta1::ValueFrequency* mutable_bucket_values(int index);
  ::google::privacy::dlp::v2beta1::ValueFrequency* add_bucket_values();
  ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2beta1::ValueFrequency >*
      mutable_bucket_values();
  const ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2beta1::ValueFrequency >&
      bucket_values() const;

  // int64 value_frequency_lower_bound = 1;
  void clear_value_frequency_lower_bound();
  static const int kValueFrequencyLowerBoundFieldNumber = 1;
  ::google::protobuf::int64 value_frequency_lower_bound() const;
  void set_value_frequency_lower_bound(::google::protobuf::int64 value);

  // int64 value_frequency_upper_bound = 2;
  void clear_value_frequency_upper_bound();
  static const int kValueFrequencyUpperBoundFieldNumber = 2;
  ::google::protobuf::int64 value_frequency_upper_bound() const;
  void set_value_frequency_upper_bound(::google::protobuf::int64 value);

  // int64 bucket_size = 3;
  void clear_bucket_size();
  static const int kBucketSizeFieldNumber = 3;
  ::google::protobuf::int64 bucket_size() const;
  void set_bucket_size(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:google.privacy.dlp.v2beta1.RiskAnalysisOperationResult.CategoricalStatsResult.CategoricalStatsHistogramBucket)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2beta1::ValueFrequency > bucket_values_;
  ::google::protobuf::int64 value_frequency_lower_bound_;
  ::google::protobuf::int64 value_frequency_upper_bound_;
  ::google::protobuf::int64 bucket_size_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::TableStruct;
  friend void ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaultsRiskAnalysisOperationResult_CategoricalStatsResult_CategoricalStatsHistogramBucketImpl();
};
// -------------------------------------------------------------------

class RiskAnalysisOperationResult_CategoricalStatsResult : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.privacy.dlp.v2beta1.RiskAnalysisOperationResult.CategoricalStatsResult) */ {
 public:
  RiskAnalysisOperationResult_CategoricalStatsResult();
  virtual ~RiskAnalysisOperationResult_CategoricalStatsResult();

  RiskAnalysisOperationResult_CategoricalStatsResult(const RiskAnalysisOperationResult_CategoricalStatsResult& from);

  inline RiskAnalysisOperationResult_CategoricalStatsResult& operator=(const RiskAnalysisOperationResult_CategoricalStatsResult& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RiskAnalysisOperationResult_CategoricalStatsResult(RiskAnalysisOperationResult_CategoricalStatsResult&& from) noexcept
    : RiskAnalysisOperationResult_CategoricalStatsResult() {
    *this = ::std::move(from);
  }

  inline RiskAnalysisOperationResult_CategoricalStatsResult& operator=(RiskAnalysisOperationResult_CategoricalStatsResult&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RiskAnalysisOperationResult_CategoricalStatsResult& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RiskAnalysisOperationResult_CategoricalStatsResult* internal_default_instance() {
    return reinterpret_cast<const RiskAnalysisOperationResult_CategoricalStatsResult*>(
               &_RiskAnalysisOperationResult_CategoricalStatsResult_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    43;

  void Swap(RiskAnalysisOperationResult_CategoricalStatsResult* other);
  friend void swap(RiskAnalysisOperationResult_CategoricalStatsResult& a, RiskAnalysisOperationResult_CategoricalStatsResult& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RiskAnalysisOperationResult_CategoricalStatsResult* New() const PROTOBUF_FINAL { return New(NULL); }

  RiskAnalysisOperationResult_CategoricalStatsResult* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const RiskAnalysisOperationResult_CategoricalStatsResult& from);
  void MergeFrom(const RiskAnalysisOperationResult_CategoricalStatsResult& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(RiskAnalysisOperationResult_CategoricalStatsResult* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef RiskAnalysisOperationResult_CategoricalStatsResult_CategoricalStatsHistogramBucket CategoricalStatsHistogramBucket;

  // accessors -------------------------------------------------------

  // repeated .google.privacy.dlp.v2beta1.RiskAnalysisOperationResult.CategoricalStatsResult.CategoricalStatsHistogramBucket value_frequency_histogram_buckets = 5;
  int value_frequency_histogram_buckets_size() const;
  void clear_value_frequency_histogram_buckets();
  static const int kValueFrequencyHistogramBucketsFieldNumber = 5;
  const ::google::privacy::dlp::v2beta1::RiskAnalysisOperationResult_CategoricalStatsResult_CategoricalStatsHistogramBucket& value_frequency_histogram_buckets(int index) const;
  ::google::privacy::dlp::v2beta1::RiskAnalysisOperationResult_CategoricalStatsResult_CategoricalStatsHistogramBucket* mutable_value_frequency_histogram_buckets(int index);
  ::google::privacy::dlp::v2beta1::RiskAnalysisOperationResult_CategoricalStatsResult_CategoricalStatsHistogramBucket* add_value_frequency_histogram_buckets();
  ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2beta1::RiskAnalysisOperationResult_CategoricalStatsResult_CategoricalStatsHistogramBucket >*
      mutable_value_frequency_histogram_buckets();
  const ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2beta1::RiskAnalysisOperationResult_CategoricalStatsResult_CategoricalStatsHistogramBucket >&
      value_frequency_histogram_buckets() const;

  // @@protoc_insertion_point(class_scope:google.privacy.dlp.v2beta1.RiskAnalysisOperationResult.CategoricalStatsResult)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2beta1::RiskAnalysisOperationResult_CategoricalStatsResult_CategoricalStatsHistogramBucket > value_frequency_histogram_buckets_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::TableStruct;
  friend void ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaultsRiskAnalysisOperationResult_CategoricalStatsResultImpl();
};
// -------------------------------------------------------------------

class RiskAnalysisOperationResult_KAnonymityResult_KAnonymityEquivalenceClass : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.privacy.dlp.v2beta1.RiskAnalysisOperationResult.KAnonymityResult.KAnonymityEquivalenceClass) */ {
 public:
  RiskAnalysisOperationResult_KAnonymityResult_KAnonymityEquivalenceClass();
  virtual ~RiskAnalysisOperationResult_KAnonymityResult_KAnonymityEquivalenceClass();

  RiskAnalysisOperationResult_KAnonymityResult_KAnonymityEquivalenceClass(const RiskAnalysisOperationResult_KAnonymityResult_KAnonymityEquivalenceClass& from);

  inline RiskAnalysisOperationResult_KAnonymityResult_KAnonymityEquivalenceClass& operator=(const RiskAnalysisOperationResult_KAnonymityResult_KAnonymityEquivalenceClass& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RiskAnalysisOperationResult_KAnonymityResult_KAnonymityEquivalenceClass(RiskAnalysisOperationResult_KAnonymityResult_KAnonymityEquivalenceClass&& from) noexcept
    : RiskAnalysisOperationResult_KAnonymityResult_KAnonymityEquivalenceClass() {
    *this = ::std::move(from);
  }

  inline RiskAnalysisOperationResult_KAnonymityResult_KAnonymityEquivalenceClass& operator=(RiskAnalysisOperationResult_KAnonymityResult_KAnonymityEquivalenceClass&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RiskAnalysisOperationResult_KAnonymityResult_KAnonymityEquivalenceClass& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RiskAnalysisOperationResult_KAnonymityResult_KAnonymityEquivalenceClass* internal_default_instance() {
    return reinterpret_cast<const RiskAnalysisOperationResult_KAnonymityResult_KAnonymityEquivalenceClass*>(
               &_RiskAnalysisOperationResult_KAnonymityResult_KAnonymityEquivalenceClass_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    44;

  void Swap(RiskAnalysisOperationResult_KAnonymityResult_KAnonymityEquivalenceClass* other);
  friend void swap(RiskAnalysisOperationResult_KAnonymityResult_KAnonymityEquivalenceClass& a, RiskAnalysisOperationResult_KAnonymityResult_KAnonymityEquivalenceClass& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RiskAnalysisOperationResult_KAnonymityResult_KAnonymityEquivalenceClass* New() const PROTOBUF_FINAL { return New(NULL); }

  RiskAnalysisOperationResult_KAnonymityResult_KAnonymityEquivalenceClass* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const RiskAnalysisOperationResult_KAnonymityResult_KAnonymityEquivalenceClass& from);
  void MergeFrom(const RiskAnalysisOperationResult_KAnonymityResult_KAnonymityEquivalenceClass& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(RiskAnalysisOperationResult_KAnonymityResult_KAnonymityEquivalenceClass* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .google.privacy.dlp.v2beta1.Value quasi_ids_values = 1;
  int quasi_ids_values_size() const;
  void clear_quasi_ids_values();
  static const int kQuasiIdsValuesFieldNumber = 1;
  const ::google::privacy::dlp::v2beta1::Value& quasi_ids_values(int index) const;
  ::google::privacy::dlp::v2beta1::Value* mutable_quasi_ids_values(int index);
  ::google::privacy::dlp::v2beta1::Value* add_quasi_ids_values();
  ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2beta1::Value >*
      mutable_quasi_ids_values();
  const ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2beta1::Value >&
      quasi_ids_values() const;

  // int64 equivalence_class_size = 2;
  void clear_equivalence_class_size();
  static const int kEquivalenceClassSizeFieldNumber = 2;
  ::google::protobuf::int64 equivalence_class_size() const;
  void set_equivalence_class_size(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:google.privacy.dlp.v2beta1.RiskAnalysisOperationResult.KAnonymityResult.KAnonymityEquivalenceClass)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2beta1::Value > quasi_ids_values_;
  ::google::protobuf::int64 equivalence_class_size_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::TableStruct;
  friend void ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaultsRiskAnalysisOperationResult_KAnonymityResult_KAnonymityEquivalenceClassImpl();
};
// -------------------------------------------------------------------

class RiskAnalysisOperationResult_KAnonymityResult_KAnonymityHistogramBucket : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.privacy.dlp.v2beta1.RiskAnalysisOperationResult.KAnonymityResult.KAnonymityHistogramBucket) */ {
 public:
  RiskAnalysisOperationResult_KAnonymityResult_KAnonymityHistogramBucket();
  virtual ~RiskAnalysisOperationResult_KAnonymityResult_KAnonymityHistogramBucket();

  RiskAnalysisOperationResult_KAnonymityResult_KAnonymityHistogramBucket(const RiskAnalysisOperationResult_KAnonymityResult_KAnonymityHistogramBucket& from);

  inline RiskAnalysisOperationResult_KAnonymityResult_KAnonymityHistogramBucket& operator=(const RiskAnalysisOperationResult_KAnonymityResult_KAnonymityHistogramBucket& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RiskAnalysisOperationResult_KAnonymityResult_KAnonymityHistogramBucket(RiskAnalysisOperationResult_KAnonymityResult_KAnonymityHistogramBucket&& from) noexcept
    : RiskAnalysisOperationResult_KAnonymityResult_KAnonymityHistogramBucket() {
    *this = ::std::move(from);
  }

  inline RiskAnalysisOperationResult_KAnonymityResult_KAnonymityHistogramBucket& operator=(RiskAnalysisOperationResult_KAnonymityResult_KAnonymityHistogramBucket&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RiskAnalysisOperationResult_KAnonymityResult_KAnonymityHistogramBucket& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RiskAnalysisOperationResult_KAnonymityResult_KAnonymityHistogramBucket* internal_default_instance() {
    return reinterpret_cast<const RiskAnalysisOperationResult_KAnonymityResult_KAnonymityHistogramBucket*>(
               &_RiskAnalysisOperationResult_KAnonymityResult_KAnonymityHistogramBucket_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    45;

  void Swap(RiskAnalysisOperationResult_KAnonymityResult_KAnonymityHistogramBucket* other);
  friend void swap(RiskAnalysisOperationResult_KAnonymityResult_KAnonymityHistogramBucket& a, RiskAnalysisOperationResult_KAnonymityResult_KAnonymityHistogramBucket& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RiskAnalysisOperationResult_KAnonymityResult_KAnonymityHistogramBucket* New() const PROTOBUF_FINAL { return New(NULL); }

  RiskAnalysisOperationResult_KAnonymityResult_KAnonymityHistogramBucket* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const RiskAnalysisOperationResult_KAnonymityResult_KAnonymityHistogramBucket& from);
  void MergeFrom(const RiskAnalysisOperationResult_KAnonymityResult_KAnonymityHistogramBucket& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(RiskAnalysisOperationResult_KAnonymityResult_KAnonymityHistogramBucket* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .google.privacy.dlp.v2beta1.RiskAnalysisOperationResult.KAnonymityResult.KAnonymityEquivalenceClass bucket_values = 4;
  int bucket_values_size() const;
  void clear_bucket_values();
  static const int kBucketValuesFieldNumber = 4;
  const ::google::privacy::dlp::v2beta1::RiskAnalysisOperationResult_KAnonymityResult_KAnonymityEquivalenceClass& bucket_values(int index) const;
  ::google::privacy::dlp::v2beta1::RiskAnalysisOperationResult_KAnonymityResult_KAnonymityEquivalenceClass* mutable_bucket_values(int index);
  ::google::privacy::dlp::v2beta1::RiskAnalysisOperationResult_KAnonymityResult_KAnonymityEquivalenceClass* add_bucket_values();
  ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2beta1::RiskAnalysisOperationResult_KAnonymityResult_KAnonymityEquivalenceClass >*
      mutable_bucket_values();
  const ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2beta1::RiskAnalysisOperationResult_KAnonymityResult_KAnonymityEquivalenceClass >&
      bucket_values() const;

  // int64 equivalence_class_size_lower_bound = 1;
  void clear_equivalence_class_size_lower_bound();
  static const int kEquivalenceClassSizeLowerBoundFieldNumber = 1;
  ::google::protobuf::int64 equivalence_class_size_lower_bound() const;
  void set_equivalence_class_size_lower_bound(::google::protobuf::int64 value);

  // int64 equivalence_class_size_upper_bound = 2;
  void clear_equivalence_class_size_upper_bound();
  static const int kEquivalenceClassSizeUpperBoundFieldNumber = 2;
  ::google::protobuf::int64 equivalence_class_size_upper_bound() const;
  void set_equivalence_class_size_upper_bound(::google::protobuf::int64 value);

  // int64 bucket_size = 3;
  void clear_bucket_size();
  static const int kBucketSizeFieldNumber = 3;
  ::google::protobuf::int64 bucket_size() const;
  void set_bucket_size(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:google.privacy.dlp.v2beta1.RiskAnalysisOperationResult.KAnonymityResult.KAnonymityHistogramBucket)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2beta1::RiskAnalysisOperationResult_KAnonymityResult_KAnonymityEquivalenceClass > bucket_values_;
  ::google::protobuf::int64 equivalence_class_size_lower_bound_;
  ::google::protobuf::int64 equivalence_class_size_upper_bound_;
  ::google::protobuf::int64 bucket_size_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::TableStruct;
  friend void ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaultsRiskAnalysisOperationResult_KAnonymityResult_KAnonymityHistogramBucketImpl();
};
// -------------------------------------------------------------------

class RiskAnalysisOperationResult_KAnonymityResult : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.privacy.dlp.v2beta1.RiskAnalysisOperationResult.KAnonymityResult) */ {
 public:
  RiskAnalysisOperationResult_KAnonymityResult();
  virtual ~RiskAnalysisOperationResult_KAnonymityResult();

  RiskAnalysisOperationResult_KAnonymityResult(const RiskAnalysisOperationResult_KAnonymityResult& from);

  inline RiskAnalysisOperationResult_KAnonymityResult& operator=(const RiskAnalysisOperationResult_KAnonymityResult& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RiskAnalysisOperationResult_KAnonymityResult(RiskAnalysisOperationResult_KAnonymityResult&& from) noexcept
    : RiskAnalysisOperationResult_KAnonymityResult() {
    *this = ::std::move(from);
  }

  inline RiskAnalysisOperationResult_KAnonymityResult& operator=(RiskAnalysisOperationResult_KAnonymityResult&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RiskAnalysisOperationResult_KAnonymityResult& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RiskAnalysisOperationResult_KAnonymityResult* internal_default_instance() {
    return reinterpret_cast<const RiskAnalysisOperationResult_KAnonymityResult*>(
               &_RiskAnalysisOperationResult_KAnonymityResult_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    46;

  void Swap(RiskAnalysisOperationResult_KAnonymityResult* other);
  friend void swap(RiskAnalysisOperationResult_KAnonymityResult& a, RiskAnalysisOperationResult_KAnonymityResult& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RiskAnalysisOperationResult_KAnonymityResult* New() const PROTOBUF_FINAL { return New(NULL); }

  RiskAnalysisOperationResult_KAnonymityResult* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const RiskAnalysisOperationResult_KAnonymityResult& from);
  void MergeFrom(const RiskAnalysisOperationResult_KAnonymityResult& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(RiskAnalysisOperationResult_KAnonymityResult* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef RiskAnalysisOperationResult_KAnonymityResult_KAnonymityEquivalenceClass KAnonymityEquivalenceClass;
  typedef RiskAnalysisOperationResult_KAnonymityResult_KAnonymityHistogramBucket KAnonymityHistogramBucket;

  // accessors -------------------------------------------------------

  // repeated .google.privacy.dlp.v2beta1.RiskAnalysisOperationResult.KAnonymityResult.KAnonymityHistogramBucket equivalence_class_histogram_buckets = 5;
  int equivalence_class_histogram_buckets_size() const;
  void clear_equivalence_class_histogram_buckets();
  static const int kEquivalenceClassHistogramBucketsFieldNumber = 5;
  const ::google::privacy::dlp::v2beta1::RiskAnalysisOperationResult_KAnonymityResult_KAnonymityHistogramBucket& equivalence_class_histogram_buckets(int index) const;
  ::google::privacy::dlp::v2beta1::RiskAnalysisOperationResult_KAnonymityResult_KAnonymityHistogramBucket* mutable_equivalence_class_histogram_buckets(int index);
  ::google::privacy::dlp::v2beta1::RiskAnalysisOperationResult_KAnonymityResult_KAnonymityHistogramBucket* add_equivalence_class_histogram_buckets();
  ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2beta1::RiskAnalysisOperationResult_KAnonymityResult_KAnonymityHistogramBucket >*
      mutable_equivalence_class_histogram_buckets();
  const ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2beta1::RiskAnalysisOperationResult_KAnonymityResult_KAnonymityHistogramBucket >&
      equivalence_class_histogram_buckets() const;

  // @@protoc_insertion_point(class_scope:google.privacy.dlp.v2beta1.RiskAnalysisOperationResult.KAnonymityResult)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2beta1::RiskAnalysisOperationResult_KAnonymityResult_KAnonymityHistogramBucket > equivalence_class_histogram_buckets_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::TableStruct;
  friend void ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaultsRiskAnalysisOperationResult_KAnonymityResultImpl();
};
// -------------------------------------------------------------------

class RiskAnalysisOperationResult_LDiversityResult_LDiversityEquivalenceClass : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.privacy.dlp.v2beta1.RiskAnalysisOperationResult.LDiversityResult.LDiversityEquivalenceClass) */ {
 public:
  RiskAnalysisOperationResult_LDiversityResult_LDiversityEquivalenceClass();
  virtual ~RiskAnalysisOperationResult_LDiversityResult_LDiversityEquivalenceClass();

  RiskAnalysisOperationResult_LDiversityResult_LDiversityEquivalenceClass(const RiskAnalysisOperationResult_LDiversityResult_LDiversityEquivalenceClass& from);

  inline RiskAnalysisOperationResult_LDiversityResult_LDiversityEquivalenceClass& operator=(const RiskAnalysisOperationResult_LDiversityResult_LDiversityEquivalenceClass& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RiskAnalysisOperationResult_LDiversityResult_LDiversityEquivalenceClass(RiskAnalysisOperationResult_LDiversityResult_LDiversityEquivalenceClass&& from) noexcept
    : RiskAnalysisOperationResult_LDiversityResult_LDiversityEquivalenceClass() {
    *this = ::std::move(from);
  }

  inline RiskAnalysisOperationResult_LDiversityResult_LDiversityEquivalenceClass& operator=(RiskAnalysisOperationResult_LDiversityResult_LDiversityEquivalenceClass&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RiskAnalysisOperationResult_LDiversityResult_LDiversityEquivalenceClass& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RiskAnalysisOperationResult_LDiversityResult_LDiversityEquivalenceClass* internal_default_instance() {
    return reinterpret_cast<const RiskAnalysisOperationResult_LDiversityResult_LDiversityEquivalenceClass*>(
               &_RiskAnalysisOperationResult_LDiversityResult_LDiversityEquivalenceClass_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    47;

  void Swap(RiskAnalysisOperationResult_LDiversityResult_LDiversityEquivalenceClass* other);
  friend void swap(RiskAnalysisOperationResult_LDiversityResult_LDiversityEquivalenceClass& a, RiskAnalysisOperationResult_LDiversityResult_LDiversityEquivalenceClass& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RiskAnalysisOperationResult_LDiversityResult_LDiversityEquivalenceClass* New() const PROTOBUF_FINAL { return New(NULL); }

  RiskAnalysisOperationResult_LDiversityResult_LDiversityEquivalenceClass* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const RiskAnalysisOperationResult_LDiversityResult_LDiversityEquivalenceClass& from);
  void MergeFrom(const RiskAnalysisOperationResult_LDiversityResult_LDiversityEquivalenceClass& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(RiskAnalysisOperationResult_LDiversityResult_LDiversityEquivalenceClass* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .google.privacy.dlp.v2beta1.Value quasi_ids_values = 1;
  int quasi_ids_values_size() const;
  void clear_quasi_ids_values();
  static const int kQuasiIdsValuesFieldNumber = 1;
  const ::google::privacy::dlp::v2beta1::Value& quasi_ids_values(int index) const;
  ::google::privacy::dlp::v2beta1::Value* mutable_quasi_ids_values(int index);
  ::google::privacy::dlp::v2beta1::Value* add_quasi_ids_values();
  ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2beta1::Value >*
      mutable_quasi_ids_values();
  const ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2beta1::Value >&
      quasi_ids_values() const;

  // repeated .google.privacy.dlp.v2beta1.ValueFrequency top_sensitive_values = 4;
  int top_sensitive_values_size() const;
  void clear_top_sensitive_values();
  static const int kTopSensitiveValuesFieldNumber = 4;
  const ::google::privacy::dlp::v2beta1::ValueFrequency& top_sensitive_values(int index) const;
  ::google::privacy::dlp::v2beta1::ValueFrequency* mutable_top_sensitive_values(int index);
  ::google::privacy::dlp::v2beta1::ValueFrequency* add_top_sensitive_values();
  ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2beta1::ValueFrequency >*
      mutable_top_sensitive_values();
  const ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2beta1::ValueFrequency >&
      top_sensitive_values() const;

  // int64 equivalence_class_size = 2;
  void clear_equivalence_class_size();
  static const int kEquivalenceClassSizeFieldNumber = 2;
  ::google::protobuf::int64 equivalence_class_size() const;
  void set_equivalence_class_size(::google::protobuf::int64 value);

  // int64 num_distinct_sensitive_values = 3;
  void clear_num_distinct_sensitive_values();
  static const int kNumDistinctSensitiveValuesFieldNumber = 3;
  ::google::protobuf::int64 num_distinct_sensitive_values() const;
  void set_num_distinct_sensitive_values(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:google.privacy.dlp.v2beta1.RiskAnalysisOperationResult.LDiversityResult.LDiversityEquivalenceClass)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2beta1::Value > quasi_ids_values_;
  ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2beta1::ValueFrequency > top_sensitive_values_;
  ::google::protobuf::int64 equivalence_class_size_;
  ::google::protobuf::int64 num_distinct_sensitive_values_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::TableStruct;
  friend void ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaultsRiskAnalysisOperationResult_LDiversityResult_LDiversityEquivalenceClassImpl();
};
// -------------------------------------------------------------------

class RiskAnalysisOperationResult_LDiversityResult_LDiversityHistogramBucket : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.privacy.dlp.v2beta1.RiskAnalysisOperationResult.LDiversityResult.LDiversityHistogramBucket) */ {
 public:
  RiskAnalysisOperationResult_LDiversityResult_LDiversityHistogramBucket();
  virtual ~RiskAnalysisOperationResult_LDiversityResult_LDiversityHistogramBucket();

  RiskAnalysisOperationResult_LDiversityResult_LDiversityHistogramBucket(const RiskAnalysisOperationResult_LDiversityResult_LDiversityHistogramBucket& from);

  inline RiskAnalysisOperationResult_LDiversityResult_LDiversityHistogramBucket& operator=(const RiskAnalysisOperationResult_LDiversityResult_LDiversityHistogramBucket& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RiskAnalysisOperationResult_LDiversityResult_LDiversityHistogramBucket(RiskAnalysisOperationResult_LDiversityResult_LDiversityHistogramBucket&& from) noexcept
    : RiskAnalysisOperationResult_LDiversityResult_LDiversityHistogramBucket() {
    *this = ::std::move(from);
  }

  inline RiskAnalysisOperationResult_LDiversityResult_LDiversityHistogramBucket& operator=(RiskAnalysisOperationResult_LDiversityResult_LDiversityHistogramBucket&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RiskAnalysisOperationResult_LDiversityResult_LDiversityHistogramBucket& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RiskAnalysisOperationResult_LDiversityResult_LDiversityHistogramBucket* internal_default_instance() {
    return reinterpret_cast<const RiskAnalysisOperationResult_LDiversityResult_LDiversityHistogramBucket*>(
               &_RiskAnalysisOperationResult_LDiversityResult_LDiversityHistogramBucket_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    48;

  void Swap(RiskAnalysisOperationResult_LDiversityResult_LDiversityHistogramBucket* other);
  friend void swap(RiskAnalysisOperationResult_LDiversityResult_LDiversityHistogramBucket& a, RiskAnalysisOperationResult_LDiversityResult_LDiversityHistogramBucket& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RiskAnalysisOperationResult_LDiversityResult_LDiversityHistogramBucket* New() const PROTOBUF_FINAL { return New(NULL); }

  RiskAnalysisOperationResult_LDiversityResult_LDiversityHistogramBucket* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const RiskAnalysisOperationResult_LDiversityResult_LDiversityHistogramBucket& from);
  void MergeFrom(const RiskAnalysisOperationResult_LDiversityResult_LDiversityHistogramBucket& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(RiskAnalysisOperationResult_LDiversityResult_LDiversityHistogramBucket* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .google.privacy.dlp.v2beta1.RiskAnalysisOperationResult.LDiversityResult.LDiversityEquivalenceClass bucket_values = 4;
  int bucket_values_size() const;
  void clear_bucket_values();
  static const int kBucketValuesFieldNumber = 4;
  const ::google::privacy::dlp::v2beta1::RiskAnalysisOperationResult_LDiversityResult_LDiversityEquivalenceClass& bucket_values(int index) const;
  ::google::privacy::dlp::v2beta1::RiskAnalysisOperationResult_LDiversityResult_LDiversityEquivalenceClass* mutable_bucket_values(int index);
  ::google::privacy::dlp::v2beta1::RiskAnalysisOperationResult_LDiversityResult_LDiversityEquivalenceClass* add_bucket_values();
  ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2beta1::RiskAnalysisOperationResult_LDiversityResult_LDiversityEquivalenceClass >*
      mutable_bucket_values();
  const ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2beta1::RiskAnalysisOperationResult_LDiversityResult_LDiversityEquivalenceClass >&
      bucket_values() const;

  // int64 sensitive_value_frequency_lower_bound = 1;
  void clear_sensitive_value_frequency_lower_bound();
  static const int kSensitiveValueFrequencyLowerBoundFieldNumber = 1;
  ::google::protobuf::int64 sensitive_value_frequency_lower_bound() const;
  void set_sensitive_value_frequency_lower_bound(::google::protobuf::int64 value);

  // int64 sensitive_value_frequency_upper_bound = 2;
  void clear_sensitive_value_frequency_upper_bound();
  static const int kSensitiveValueFrequencyUpperBoundFieldNumber = 2;
  ::google::protobuf::int64 sensitive_value_frequency_upper_bound() const;
  void set_sensitive_value_frequency_upper_bound(::google::protobuf::int64 value);

  // int64 bucket_size = 3;
  void clear_bucket_size();
  static const int kBucketSizeFieldNumber = 3;
  ::google::protobuf::int64 bucket_size() const;
  void set_bucket_size(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:google.privacy.dlp.v2beta1.RiskAnalysisOperationResult.LDiversityResult.LDiversityHistogramBucket)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2beta1::RiskAnalysisOperationResult_LDiversityResult_LDiversityEquivalenceClass > bucket_values_;
  ::google::protobuf::int64 sensitive_value_frequency_lower_bound_;
  ::google::protobuf::int64 sensitive_value_frequency_upper_bound_;
  ::google::protobuf::int64 bucket_size_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::TableStruct;
  friend void ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaultsRiskAnalysisOperationResult_LDiversityResult_LDiversityHistogramBucketImpl();
};
// -------------------------------------------------------------------

class RiskAnalysisOperationResult_LDiversityResult : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.privacy.dlp.v2beta1.RiskAnalysisOperationResult.LDiversityResult) */ {
 public:
  RiskAnalysisOperationResult_LDiversityResult();
  virtual ~RiskAnalysisOperationResult_LDiversityResult();

  RiskAnalysisOperationResult_LDiversityResult(const RiskAnalysisOperationResult_LDiversityResult& from);

  inline RiskAnalysisOperationResult_LDiversityResult& operator=(const RiskAnalysisOperationResult_LDiversityResult& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RiskAnalysisOperationResult_LDiversityResult(RiskAnalysisOperationResult_LDiversityResult&& from) noexcept
    : RiskAnalysisOperationResult_LDiversityResult() {
    *this = ::std::move(from);
  }

  inline RiskAnalysisOperationResult_LDiversityResult& operator=(RiskAnalysisOperationResult_LDiversityResult&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RiskAnalysisOperationResult_LDiversityResult& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RiskAnalysisOperationResult_LDiversityResult* internal_default_instance() {
    return reinterpret_cast<const RiskAnalysisOperationResult_LDiversityResult*>(
               &_RiskAnalysisOperationResult_LDiversityResult_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    49;

  void Swap(RiskAnalysisOperationResult_LDiversityResult* other);
  friend void swap(RiskAnalysisOperationResult_LDiversityResult& a, RiskAnalysisOperationResult_LDiversityResult& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RiskAnalysisOperationResult_LDiversityResult* New() const PROTOBUF_FINAL { return New(NULL); }

  RiskAnalysisOperationResult_LDiversityResult* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const RiskAnalysisOperationResult_LDiversityResult& from);
  void MergeFrom(const RiskAnalysisOperationResult_LDiversityResult& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(RiskAnalysisOperationResult_LDiversityResult* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef RiskAnalysisOperationResult_LDiversityResult_LDiversityEquivalenceClass LDiversityEquivalenceClass;
  typedef RiskAnalysisOperationResult_LDiversityResult_LDiversityHistogramBucket LDiversityHistogramBucket;

  // accessors -------------------------------------------------------

  // repeated .google.privacy.dlp.v2beta1.RiskAnalysisOperationResult.LDiversityResult.LDiversityHistogramBucket sensitive_value_frequency_histogram_buckets = 5;
  int sensitive_value_frequency_histogram_buckets_size() const;
  void clear_sensitive_value_frequency_histogram_buckets();
  static const int kSensitiveValueFrequencyHistogramBucketsFieldNumber = 5;
  const ::google::privacy::dlp::v2beta1::RiskAnalysisOperationResult_LDiversityResult_LDiversityHistogramBucket& sensitive_value_frequency_histogram_buckets(int index) const;
  ::google::privacy::dlp::v2beta1::RiskAnalysisOperationResult_LDiversityResult_LDiversityHistogramBucket* mutable_sensitive_value_frequency_histogram_buckets(int index);
  ::google::privacy::dlp::v2beta1::RiskAnalysisOperationResult_LDiversityResult_LDiversityHistogramBucket* add_sensitive_value_frequency_histogram_buckets();
  ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2beta1::RiskAnalysisOperationResult_LDiversityResult_LDiversityHistogramBucket >*
      mutable_sensitive_value_frequency_histogram_buckets();
  const ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2beta1::RiskAnalysisOperationResult_LDiversityResult_LDiversityHistogramBucket >&
      sensitive_value_frequency_histogram_buckets() const;

  // @@protoc_insertion_point(class_scope:google.privacy.dlp.v2beta1.RiskAnalysisOperationResult.LDiversityResult)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2beta1::RiskAnalysisOperationResult_LDiversityResult_LDiversityHistogramBucket > sensitive_value_frequency_histogram_buckets_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::TableStruct;
  friend void ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaultsRiskAnalysisOperationResult_LDiversityResultImpl();
};
// -------------------------------------------------------------------

class RiskAnalysisOperationResult : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.privacy.dlp.v2beta1.RiskAnalysisOperationResult) */ {
 public:
  RiskAnalysisOperationResult();
  virtual ~RiskAnalysisOperationResult();

  RiskAnalysisOperationResult(const RiskAnalysisOperationResult& from);

  inline RiskAnalysisOperationResult& operator=(const RiskAnalysisOperationResult& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RiskAnalysisOperationResult(RiskAnalysisOperationResult&& from) noexcept
    : RiskAnalysisOperationResult() {
    *this = ::std::move(from);
  }

  inline RiskAnalysisOperationResult& operator=(RiskAnalysisOperationResult&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RiskAnalysisOperationResult& default_instance();

  enum ResultCase {
    kNumericalStatsResult = 3,
    kCategoricalStatsResult = 4,
    kKAnonymityResult = 5,
    kLDiversityResult = 6,
    RESULT_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RiskAnalysisOperationResult* internal_default_instance() {
    return reinterpret_cast<const RiskAnalysisOperationResult*>(
               &_RiskAnalysisOperationResult_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    50;

  void Swap(RiskAnalysisOperationResult* other);
  friend void swap(RiskAnalysisOperationResult& a, RiskAnalysisOperationResult& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RiskAnalysisOperationResult* New() const PROTOBUF_FINAL { return New(NULL); }

  RiskAnalysisOperationResult* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const RiskAnalysisOperationResult& from);
  void MergeFrom(const RiskAnalysisOperationResult& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(RiskAnalysisOperationResult* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef RiskAnalysisOperationResult_NumericalStatsResult NumericalStatsResult;
  typedef RiskAnalysisOperationResult_CategoricalStatsResult CategoricalStatsResult;
  typedef RiskAnalysisOperationResult_KAnonymityResult KAnonymityResult;
  typedef RiskAnalysisOperationResult_LDiversityResult LDiversityResult;

  // accessors -------------------------------------------------------

  // .google.privacy.dlp.v2beta1.RiskAnalysisOperationResult.NumericalStatsResult numerical_stats_result = 3;
  bool has_numerical_stats_result() const;
  void clear_numerical_stats_result();
  static const int kNumericalStatsResultFieldNumber = 3;
  const ::google::privacy::dlp::v2beta1::RiskAnalysisOperationResult_NumericalStatsResult& numerical_stats_result() const;
  ::google::privacy::dlp::v2beta1::RiskAnalysisOperationResult_NumericalStatsResult* release_numerical_stats_result();
  ::google::privacy::dlp::v2beta1::RiskAnalysisOperationResult_NumericalStatsResult* mutable_numerical_stats_result();
  void set_allocated_numerical_stats_result(::google::privacy::dlp::v2beta1::RiskAnalysisOperationResult_NumericalStatsResult* numerical_stats_result);

  // .google.privacy.dlp.v2beta1.RiskAnalysisOperationResult.CategoricalStatsResult categorical_stats_result = 4;
  bool has_categorical_stats_result() const;
  void clear_categorical_stats_result();
  static const int kCategoricalStatsResultFieldNumber = 4;
  const ::google::privacy::dlp::v2beta1::RiskAnalysisOperationResult_CategoricalStatsResult& categorical_stats_result() const;
  ::google::privacy::dlp::v2beta1::RiskAnalysisOperationResult_CategoricalStatsResult* release_categorical_stats_result();
  ::google::privacy::dlp::v2beta1::RiskAnalysisOperationResult_CategoricalStatsResult* mutable_categorical_stats_result();
  void set_allocated_categorical_stats_result(::google::privacy::dlp::v2beta1::RiskAnalysisOperationResult_CategoricalStatsResult* categorical_stats_result);

  // .google.privacy.dlp.v2beta1.RiskAnalysisOperationResult.KAnonymityResult k_anonymity_result = 5;
  bool has_k_anonymity_result() const;
  void clear_k_anonymity_result();
  static const int kKAnonymityResultFieldNumber = 5;
  const ::google::privacy::dlp::v2beta1::RiskAnalysisOperationResult_KAnonymityResult& k_anonymity_result() const;
  ::google::privacy::dlp::v2beta1::RiskAnalysisOperationResult_KAnonymityResult* release_k_anonymity_result();
  ::google::privacy::dlp::v2beta1::RiskAnalysisOperationResult_KAnonymityResult* mutable_k_anonymity_result();
  void set_allocated_k_anonymity_result(::google::privacy::dlp::v2beta1::RiskAnalysisOperationResult_KAnonymityResult* k_anonymity_result);

  // .google.privacy.dlp.v2beta1.RiskAnalysisOperationResult.LDiversityResult l_diversity_result = 6;
  bool has_l_diversity_result() const;
  void clear_l_diversity_result();
  static const int kLDiversityResultFieldNumber = 6;
  const ::google::privacy::dlp::v2beta1::RiskAnalysisOperationResult_LDiversityResult& l_diversity_result() const;
  ::google::privacy::dlp::v2beta1::RiskAnalysisOperationResult_LDiversityResult* release_l_diversity_result();
  ::google::privacy::dlp::v2beta1::RiskAnalysisOperationResult_LDiversityResult* mutable_l_diversity_result();
  void set_allocated_l_diversity_result(::google::privacy::dlp::v2beta1::RiskAnalysisOperationResult_LDiversityResult* l_diversity_result);

  ResultCase result_case() const;
  // @@protoc_insertion_point(class_scope:google.privacy.dlp.v2beta1.RiskAnalysisOperationResult)
 private:
  void set_has_numerical_stats_result();
  void set_has_categorical_stats_result();
  void set_has_k_anonymity_result();
  void set_has_l_diversity_result();

  inline bool has_result() const;
  void clear_result();
  inline void clear_has_result();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  union ResultUnion {
    ResultUnion() {}
    ::google::privacy::dlp::v2beta1::RiskAnalysisOperationResult_NumericalStatsResult* numerical_stats_result_;
    ::google::privacy::dlp::v2beta1::RiskAnalysisOperationResult_CategoricalStatsResult* categorical_stats_result_;
    ::google::privacy::dlp::v2beta1::RiskAnalysisOperationResult_KAnonymityResult* k_anonymity_result_;
    ::google::privacy::dlp::v2beta1::RiskAnalysisOperationResult_LDiversityResult* l_diversity_result_;
  } result_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::TableStruct;
  friend void ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaultsRiskAnalysisOperationResultImpl();
};
// -------------------------------------------------------------------

class ValueFrequency : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.privacy.dlp.v2beta1.ValueFrequency) */ {
 public:
  ValueFrequency();
  virtual ~ValueFrequency();

  ValueFrequency(const ValueFrequency& from);

  inline ValueFrequency& operator=(const ValueFrequency& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ValueFrequency(ValueFrequency&& from) noexcept
    : ValueFrequency() {
    *this = ::std::move(from);
  }

  inline ValueFrequency& operator=(ValueFrequency&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ValueFrequency& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ValueFrequency* internal_default_instance() {
    return reinterpret_cast<const ValueFrequency*>(
               &_ValueFrequency_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    51;

  void Swap(ValueFrequency* other);
  friend void swap(ValueFrequency& a, ValueFrequency& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ValueFrequency* New() const PROTOBUF_FINAL { return New(NULL); }

  ValueFrequency* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ValueFrequency& from);
  void MergeFrom(const ValueFrequency& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ValueFrequency* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.privacy.dlp.v2beta1.Value value = 1;
  bool has_value() const;
  void clear_value();
  static const int kValueFieldNumber = 1;
  const ::google::privacy::dlp::v2beta1::Value& value() const;
  ::google::privacy::dlp::v2beta1::Value* release_value();
  ::google::privacy::dlp::v2beta1::Value* mutable_value();
  void set_allocated_value(::google::privacy::dlp::v2beta1::Value* value);

  // int64 count = 2;
  void clear_count();
  static const int kCountFieldNumber = 2;
  ::google::protobuf::int64 count() const;
  void set_count(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:google.privacy.dlp.v2beta1.ValueFrequency)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::privacy::dlp::v2beta1::Value* value_;
  ::google::protobuf::int64 count_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::TableStruct;
  friend void ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaultsValueFrequencyImpl();
};
// -------------------------------------------------------------------

class Value : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.privacy.dlp.v2beta1.Value) */ {
 public:
  Value();
  virtual ~Value();

  Value(const Value& from);

  inline Value& operator=(const Value& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Value(Value&& from) noexcept
    : Value() {
    *this = ::std::move(from);
  }

  inline Value& operator=(Value&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Value& default_instance();

  enum TypeCase {
    kIntegerValue = 1,
    kFloatValue = 2,
    kStringValue = 3,
    kBooleanValue = 4,
    kTimestampValue = 5,
    kTimeValue = 6,
    kDateValue = 7,
    TYPE_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Value* internal_default_instance() {
    return reinterpret_cast<const Value*>(
               &_Value_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    52;

  void Swap(Value* other);
  friend void swap(Value& a, Value& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Value* New() const PROTOBUF_FINAL { return New(NULL); }

  Value* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Value& from);
  void MergeFrom(const Value& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Value* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int64 integer_value = 1;
  private:
  bool has_integer_value() const;
  public:
  void clear_integer_value();
  static const int kIntegerValueFieldNumber = 1;
  ::google::protobuf::int64 integer_value() const;
  void set_integer_value(::google::protobuf::int64 value);

  // double float_value = 2;
  private:
  bool has_float_value() const;
  public:
  void clear_float_value();
  static const int kFloatValueFieldNumber = 2;
  double float_value() const;
  void set_float_value(double value);

  // string string_value = 3;
  private:
  bool has_string_value() const;
  public:
  void clear_string_value();
  static const int kStringValueFieldNumber = 3;
  const ::std::string& string_value() const;
  void set_string_value(const ::std::string& value);
  #if LANG_CXX11
  void set_string_value(::std::string&& value);
  #endif
  void set_string_value(const char* value);
  void set_string_value(const char* value, size_t size);
  ::std::string* mutable_string_value();
  ::std::string* release_string_value();
  void set_allocated_string_value(::std::string* string_value);

  // bool boolean_value = 4;
  private:
  bool has_boolean_value() const;
  public:
  void clear_boolean_value();
  static const int kBooleanValueFieldNumber = 4;
  bool boolean_value() const;
  void set_boolean_value(bool value);

  // .google.protobuf.Timestamp timestamp_value = 5;
  bool has_timestamp_value() const;
  void clear_timestamp_value();
  static const int kTimestampValueFieldNumber = 5;
  const ::google::protobuf::Timestamp& timestamp_value() const;
  ::google::protobuf::Timestamp* release_timestamp_value();
  ::google::protobuf::Timestamp* mutable_timestamp_value();
  void set_allocated_timestamp_value(::google::protobuf::Timestamp* timestamp_value);

  // .google.type.TimeOfDay time_value = 6;
  bool has_time_value() const;
  void clear_time_value();
  static const int kTimeValueFieldNumber = 6;
  const ::google::type::TimeOfDay& time_value() const;
  ::google::type::TimeOfDay* release_time_value();
  ::google::type::TimeOfDay* mutable_time_value();
  void set_allocated_time_value(::google::type::TimeOfDay* time_value);

  // .google.type.Date date_value = 7;
  bool has_date_value() const;
  void clear_date_value();
  static const int kDateValueFieldNumber = 7;
  const ::google::type::Date& date_value() const;
  ::google::type::Date* release_date_value();
  ::google::type::Date* mutable_date_value();
  void set_allocated_date_value(::google::type::Date* date_value);

  TypeCase type_case() const;
  // @@protoc_insertion_point(class_scope:google.privacy.dlp.v2beta1.Value)
 private:
  void set_has_integer_value();
  void set_has_float_value();
  void set_has_string_value();
  void set_has_boolean_value();
  void set_has_timestamp_value();
  void set_has_time_value();
  void set_has_date_value();

  inline bool has_type() const;
  void clear_type();
  inline void clear_has_type();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  union TypeUnion {
    TypeUnion() {}
    ::google::protobuf::int64 integer_value_;
    double float_value_;
    ::google::protobuf::internal::ArenaStringPtr string_value_;
    bool boolean_value_;
    ::google::protobuf::Timestamp* timestamp_value_;
    ::google::type::TimeOfDay* time_value_;
    ::google::type::Date* date_value_;
  } type_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::TableStruct;
  friend void ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaultsValueImpl();
};
// -------------------------------------------------------------------

class DeidentifyConfig : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.privacy.dlp.v2beta1.DeidentifyConfig) */ {
 public:
  DeidentifyConfig();
  virtual ~DeidentifyConfig();

  DeidentifyConfig(const DeidentifyConfig& from);

  inline DeidentifyConfig& operator=(const DeidentifyConfig& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DeidentifyConfig(DeidentifyConfig&& from) noexcept
    : DeidentifyConfig() {
    *this = ::std::move(from);
  }

  inline DeidentifyConfig& operator=(DeidentifyConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DeidentifyConfig& default_instance();

  enum TransformationCase {
    kInfoTypeTransformations = 1,
    kRecordTransformations = 2,
    TRANSFORMATION_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeidentifyConfig* internal_default_instance() {
    return reinterpret_cast<const DeidentifyConfig*>(
               &_DeidentifyConfig_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    53;

  void Swap(DeidentifyConfig* other);
  friend void swap(DeidentifyConfig& a, DeidentifyConfig& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DeidentifyConfig* New() const PROTOBUF_FINAL { return New(NULL); }

  DeidentifyConfig* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DeidentifyConfig& from);
  void MergeFrom(const DeidentifyConfig& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DeidentifyConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.privacy.dlp.v2beta1.InfoTypeTransformations info_type_transformations = 1;
  bool has_info_type_transformations() const;
  void clear_info_type_transformations();
  static const int kInfoTypeTransformationsFieldNumber = 1;
  const ::google::privacy::dlp::v2beta1::InfoTypeTransformations& info_type_transformations() const;
  ::google::privacy::dlp::v2beta1::InfoTypeTransformations* release_info_type_transformations();
  ::google::privacy::dlp::v2beta1::InfoTypeTransformations* mutable_info_type_transformations();
  void set_allocated_info_type_transformations(::google::privacy::dlp::v2beta1::InfoTypeTransformations* info_type_transformations);

  // .google.privacy.dlp.v2beta1.RecordTransformations record_transformations = 2;
  bool has_record_transformations() const;
  void clear_record_transformations();
  static const int kRecordTransformationsFieldNumber = 2;
  const ::google::privacy::dlp::v2beta1::RecordTransformations& record_transformations() const;
  ::google::privacy::dlp::v2beta1::RecordTransformations* release_record_transformations();
  ::google::privacy::dlp::v2beta1::RecordTransformations* mutable_record_transformations();
  void set_allocated_record_transformations(::google::privacy::dlp::v2beta1::RecordTransformations* record_transformations);

  TransformationCase transformation_case() const;
  // @@protoc_insertion_point(class_scope:google.privacy.dlp.v2beta1.DeidentifyConfig)
 private:
  void set_has_info_type_transformations();
  void set_has_record_transformations();

  inline bool has_transformation() const;
  void clear_transformation();
  inline void clear_has_transformation();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  union TransformationUnion {
    TransformationUnion() {}
    ::google::privacy::dlp::v2beta1::InfoTypeTransformations* info_type_transformations_;
    ::google::privacy::dlp::v2beta1::RecordTransformations* record_transformations_;
  } transformation_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::TableStruct;
  friend void ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaultsDeidentifyConfigImpl();
};
// -------------------------------------------------------------------

class PrimitiveTransformation : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.privacy.dlp.v2beta1.PrimitiveTransformation) */ {
 public:
  PrimitiveTransformation();
  virtual ~PrimitiveTransformation();

  PrimitiveTransformation(const PrimitiveTransformation& from);

  inline PrimitiveTransformation& operator=(const PrimitiveTransformation& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PrimitiveTransformation(PrimitiveTransformation&& from) noexcept
    : PrimitiveTransformation() {
    *this = ::std::move(from);
  }

  inline PrimitiveTransformation& operator=(PrimitiveTransformation&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PrimitiveTransformation& default_instance();

  enum TransformationCase {
    kReplaceConfig = 1,
    kRedactConfig = 2,
    kCharacterMaskConfig = 3,
    kCryptoReplaceFfxFpeConfig = 4,
    kFixedSizeBucketingConfig = 5,
    kBucketingConfig = 6,
    kReplaceWithInfoTypeConfig = 7,
    kTimePartConfig = 8,
    kCryptoHashConfig = 9,
    TRANSFORMATION_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PrimitiveTransformation* internal_default_instance() {
    return reinterpret_cast<const PrimitiveTransformation*>(
               &_PrimitiveTransformation_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    54;

  void Swap(PrimitiveTransformation* other);
  friend void swap(PrimitiveTransformation& a, PrimitiveTransformation& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PrimitiveTransformation* New() const PROTOBUF_FINAL { return New(NULL); }

  PrimitiveTransformation* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const PrimitiveTransformation& from);
  void MergeFrom(const PrimitiveTransformation& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(PrimitiveTransformation* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.privacy.dlp.v2beta1.ReplaceValueConfig replace_config = 1;
  bool has_replace_config() const;
  void clear_replace_config();
  static const int kReplaceConfigFieldNumber = 1;
  const ::google::privacy::dlp::v2beta1::ReplaceValueConfig& replace_config() const;
  ::google::privacy::dlp::v2beta1::ReplaceValueConfig* release_replace_config();
  ::google::privacy::dlp::v2beta1::ReplaceValueConfig* mutable_replace_config();
  void set_allocated_replace_config(::google::privacy::dlp::v2beta1::ReplaceValueConfig* replace_config);

  // .google.privacy.dlp.v2beta1.RedactConfig redact_config = 2;
  bool has_redact_config() const;
  void clear_redact_config();
  static const int kRedactConfigFieldNumber = 2;
  const ::google::privacy::dlp::v2beta1::RedactConfig& redact_config() const;
  ::google::privacy::dlp::v2beta1::RedactConfig* release_redact_config();
  ::google::privacy::dlp::v2beta1::RedactConfig* mutable_redact_config();
  void set_allocated_redact_config(::google::privacy::dlp::v2beta1::RedactConfig* redact_config);

  // .google.privacy.dlp.v2beta1.CharacterMaskConfig character_mask_config = 3;
  bool has_character_mask_config() const;
  void clear_character_mask_config();
  static const int kCharacterMaskConfigFieldNumber = 3;
  const ::google::privacy::dlp::v2beta1::CharacterMaskConfig& character_mask_config() const;
  ::google::privacy::dlp::v2beta1::CharacterMaskConfig* release_character_mask_config();
  ::google::privacy::dlp::v2beta1::CharacterMaskConfig* mutable_character_mask_config();
  void set_allocated_character_mask_config(::google::privacy::dlp::v2beta1::CharacterMaskConfig* character_mask_config);

  // .google.privacy.dlp.v2beta1.CryptoReplaceFfxFpeConfig crypto_replace_ffx_fpe_config = 4;
  bool has_crypto_replace_ffx_fpe_config() const;
  void clear_crypto_replace_ffx_fpe_config();
  static const int kCryptoReplaceFfxFpeConfigFieldNumber = 4;
  const ::google::privacy::dlp::v2beta1::CryptoReplaceFfxFpeConfig& crypto_replace_ffx_fpe_config() const;
  ::google::privacy::dlp::v2beta1::CryptoReplaceFfxFpeConfig* release_crypto_replace_ffx_fpe_config();
  ::google::privacy::dlp::v2beta1::CryptoReplaceFfxFpeConfig* mutable_crypto_replace_ffx_fpe_config();
  void set_allocated_crypto_replace_ffx_fpe_config(::google::privacy::dlp::v2beta1::CryptoReplaceFfxFpeConfig* crypto_replace_ffx_fpe_config);

  // .google.privacy.dlp.v2beta1.FixedSizeBucketingConfig fixed_size_bucketing_config = 5;
  bool has_fixed_size_bucketing_config() const;
  void clear_fixed_size_bucketing_config();
  static const int kFixedSizeBucketingConfigFieldNumber = 5;
  const ::google::privacy::dlp::v2beta1::FixedSizeBucketingConfig& fixed_size_bucketing_config() const;
  ::google::privacy::dlp::v2beta1::FixedSizeBucketingConfig* release_fixed_size_bucketing_config();
  ::google::privacy::dlp::v2beta1::FixedSizeBucketingConfig* mutable_fixed_size_bucketing_config();
  void set_allocated_fixed_size_bucketing_config(::google::privacy::dlp::v2beta1::FixedSizeBucketingConfig* fixed_size_bucketing_config);

  // .google.privacy.dlp.v2beta1.BucketingConfig bucketing_config = 6;
  bool has_bucketing_config() const;
  void clear_bucketing_config();
  static const int kBucketingConfigFieldNumber = 6;
  const ::google::privacy::dlp::v2beta1::BucketingConfig& bucketing_config() const;
  ::google::privacy::dlp::v2beta1::BucketingConfig* release_bucketing_config();
  ::google::privacy::dlp::v2beta1::BucketingConfig* mutable_bucketing_config();
  void set_allocated_bucketing_config(::google::privacy::dlp::v2beta1::BucketingConfig* bucketing_config);

  // .google.privacy.dlp.v2beta1.ReplaceWithInfoTypeConfig replace_with_info_type_config = 7;
  bool has_replace_with_info_type_config() const;
  void clear_replace_with_info_type_config();
  static const int kReplaceWithInfoTypeConfigFieldNumber = 7;
  const ::google::privacy::dlp::v2beta1::ReplaceWithInfoTypeConfig& replace_with_info_type_config() const;
  ::google::privacy::dlp::v2beta1::ReplaceWithInfoTypeConfig* release_replace_with_info_type_config();
  ::google::privacy::dlp::v2beta1::ReplaceWithInfoTypeConfig* mutable_replace_with_info_type_config();
  void set_allocated_replace_with_info_type_config(::google::privacy::dlp::v2beta1::ReplaceWithInfoTypeConfig* replace_with_info_type_config);

  // .google.privacy.dlp.v2beta1.TimePartConfig time_part_config = 8;
  bool has_time_part_config() const;
  void clear_time_part_config();
  static const int kTimePartConfigFieldNumber = 8;
  const ::google::privacy::dlp::v2beta1::TimePartConfig& time_part_config() const;
  ::google::privacy::dlp::v2beta1::TimePartConfig* release_time_part_config();
  ::google::privacy::dlp::v2beta1::TimePartConfig* mutable_time_part_config();
  void set_allocated_time_part_config(::google::privacy::dlp::v2beta1::TimePartConfig* time_part_config);

  // .google.privacy.dlp.v2beta1.CryptoHashConfig crypto_hash_config = 9;
  bool has_crypto_hash_config() const;
  void clear_crypto_hash_config();
  static const int kCryptoHashConfigFieldNumber = 9;
  const ::google::privacy::dlp::v2beta1::CryptoHashConfig& crypto_hash_config() const;
  ::google::privacy::dlp::v2beta1::CryptoHashConfig* release_crypto_hash_config();
  ::google::privacy::dlp::v2beta1::CryptoHashConfig* mutable_crypto_hash_config();
  void set_allocated_crypto_hash_config(::google::privacy::dlp::v2beta1::CryptoHashConfig* crypto_hash_config);

  TransformationCase transformation_case() const;
  // @@protoc_insertion_point(class_scope:google.privacy.dlp.v2beta1.PrimitiveTransformation)
 private:
  void set_has_replace_config();
  void set_has_redact_config();
  void set_has_character_mask_config();
  void set_has_crypto_replace_ffx_fpe_config();
  void set_has_fixed_size_bucketing_config();
  void set_has_bucketing_config();
  void set_has_replace_with_info_type_config();
  void set_has_time_part_config();
  void set_has_crypto_hash_config();

  inline bool has_transformation() const;
  void clear_transformation();
  inline void clear_has_transformation();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  union TransformationUnion {
    TransformationUnion() {}
    ::google::privacy::dlp::v2beta1::ReplaceValueConfig* replace_config_;
    ::google::privacy::dlp::v2beta1::RedactConfig* redact_config_;
    ::google::privacy::dlp::v2beta1::CharacterMaskConfig* character_mask_config_;
    ::google::privacy::dlp::v2beta1::CryptoReplaceFfxFpeConfig* crypto_replace_ffx_fpe_config_;
    ::google::privacy::dlp::v2beta1::FixedSizeBucketingConfig* fixed_size_bucketing_config_;
    ::google::privacy::dlp::v2beta1::BucketingConfig* bucketing_config_;
    ::google::privacy::dlp::v2beta1::ReplaceWithInfoTypeConfig* replace_with_info_type_config_;
    ::google::privacy::dlp::v2beta1::TimePartConfig* time_part_config_;
    ::google::privacy::dlp::v2beta1::CryptoHashConfig* crypto_hash_config_;
  } transformation_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::TableStruct;
  friend void ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaultsPrimitiveTransformationImpl();
};
// -------------------------------------------------------------------

class TimePartConfig : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.privacy.dlp.v2beta1.TimePartConfig) */ {
 public:
  TimePartConfig();
  virtual ~TimePartConfig();

  TimePartConfig(const TimePartConfig& from);

  inline TimePartConfig& operator=(const TimePartConfig& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TimePartConfig(TimePartConfig&& from) noexcept
    : TimePartConfig() {
    *this = ::std::move(from);
  }

  inline TimePartConfig& operator=(TimePartConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const TimePartConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TimePartConfig* internal_default_instance() {
    return reinterpret_cast<const TimePartConfig*>(
               &_TimePartConfig_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    55;

  void Swap(TimePartConfig* other);
  friend void swap(TimePartConfig& a, TimePartConfig& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TimePartConfig* New() const PROTOBUF_FINAL { return New(NULL); }

  TimePartConfig* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const TimePartConfig& from);
  void MergeFrom(const TimePartConfig& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TimePartConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef TimePartConfig_TimePart TimePart;
  static const TimePart TIME_PART_UNSPECIFIED =
    TimePartConfig_TimePart_TIME_PART_UNSPECIFIED;
  static const TimePart YEAR =
    TimePartConfig_TimePart_YEAR;
  static const TimePart MONTH =
    TimePartConfig_TimePart_MONTH;
  static const TimePart DAY_OF_MONTH =
    TimePartConfig_TimePart_DAY_OF_MONTH;
  static const TimePart DAY_OF_WEEK =
    TimePartConfig_TimePart_DAY_OF_WEEK;
  static const TimePart WEEK_OF_YEAR =
    TimePartConfig_TimePart_WEEK_OF_YEAR;
  static const TimePart HOUR_OF_DAY =
    TimePartConfig_TimePart_HOUR_OF_DAY;
  static inline bool TimePart_IsValid(int value) {
    return TimePartConfig_TimePart_IsValid(value);
  }
  static const TimePart TimePart_MIN =
    TimePartConfig_TimePart_TimePart_MIN;
  static const TimePart TimePart_MAX =
    TimePartConfig_TimePart_TimePart_MAX;
  static const int TimePart_ARRAYSIZE =
    TimePartConfig_TimePart_TimePart_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  TimePart_descriptor() {
    return TimePartConfig_TimePart_descriptor();
  }
  static inline const ::std::string& TimePart_Name(TimePart value) {
    return TimePartConfig_TimePart_Name(value);
  }
  static inline bool TimePart_Parse(const ::std::string& name,
      TimePart* value) {
    return TimePartConfig_TimePart_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // .google.privacy.dlp.v2beta1.TimePartConfig.TimePart part_to_extract = 1;
  void clear_part_to_extract();
  static const int kPartToExtractFieldNumber = 1;
  ::google::privacy::dlp::v2beta1::TimePartConfig_TimePart part_to_extract() const;
  void set_part_to_extract(::google::privacy::dlp::v2beta1::TimePartConfig_TimePart value);

  // @@protoc_insertion_point(class_scope:google.privacy.dlp.v2beta1.TimePartConfig)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  int part_to_extract_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::TableStruct;
  friend void ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaultsTimePartConfigImpl();
};
// -------------------------------------------------------------------

class CryptoHashConfig : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.privacy.dlp.v2beta1.CryptoHashConfig) */ {
 public:
  CryptoHashConfig();
  virtual ~CryptoHashConfig();

  CryptoHashConfig(const CryptoHashConfig& from);

  inline CryptoHashConfig& operator=(const CryptoHashConfig& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CryptoHashConfig(CryptoHashConfig&& from) noexcept
    : CryptoHashConfig() {
    *this = ::std::move(from);
  }

  inline CryptoHashConfig& operator=(CryptoHashConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CryptoHashConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CryptoHashConfig* internal_default_instance() {
    return reinterpret_cast<const CryptoHashConfig*>(
               &_CryptoHashConfig_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    56;

  void Swap(CryptoHashConfig* other);
  friend void swap(CryptoHashConfig& a, CryptoHashConfig& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CryptoHashConfig* New() const PROTOBUF_FINAL { return New(NULL); }

  CryptoHashConfig* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CryptoHashConfig& from);
  void MergeFrom(const CryptoHashConfig& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CryptoHashConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.privacy.dlp.v2beta1.CryptoKey crypto_key = 1;
  bool has_crypto_key() const;
  void clear_crypto_key();
  static const int kCryptoKeyFieldNumber = 1;
  const ::google::privacy::dlp::v2beta1::CryptoKey& crypto_key() const;
  ::google::privacy::dlp::v2beta1::CryptoKey* release_crypto_key();
  ::google::privacy::dlp::v2beta1::CryptoKey* mutable_crypto_key();
  void set_allocated_crypto_key(::google::privacy::dlp::v2beta1::CryptoKey* crypto_key);

  // @@protoc_insertion_point(class_scope:google.privacy.dlp.v2beta1.CryptoHashConfig)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::privacy::dlp::v2beta1::CryptoKey* crypto_key_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::TableStruct;
  friend void ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaultsCryptoHashConfigImpl();
};
// -------------------------------------------------------------------

class ReplaceValueConfig : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.privacy.dlp.v2beta1.ReplaceValueConfig) */ {
 public:
  ReplaceValueConfig();
  virtual ~ReplaceValueConfig();

  ReplaceValueConfig(const ReplaceValueConfig& from);

  inline ReplaceValueConfig& operator=(const ReplaceValueConfig& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ReplaceValueConfig(ReplaceValueConfig&& from) noexcept
    : ReplaceValueConfig() {
    *this = ::std::move(from);
  }

  inline ReplaceValueConfig& operator=(ReplaceValueConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ReplaceValueConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReplaceValueConfig* internal_default_instance() {
    return reinterpret_cast<const ReplaceValueConfig*>(
               &_ReplaceValueConfig_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    57;

  void Swap(ReplaceValueConfig* other);
  friend void swap(ReplaceValueConfig& a, ReplaceValueConfig& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ReplaceValueConfig* New() const PROTOBUF_FINAL { return New(NULL); }

  ReplaceValueConfig* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ReplaceValueConfig& from);
  void MergeFrom(const ReplaceValueConfig& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ReplaceValueConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.privacy.dlp.v2beta1.Value new_value = 1;
  bool has_new_value() const;
  void clear_new_value();
  static const int kNewValueFieldNumber = 1;
  const ::google::privacy::dlp::v2beta1::Value& new_value() const;
  ::google::privacy::dlp::v2beta1::Value* release_new_value();
  ::google::privacy::dlp::v2beta1::Value* mutable_new_value();
  void set_allocated_new_value(::google::privacy::dlp::v2beta1::Value* new_value);

  // @@protoc_insertion_point(class_scope:google.privacy.dlp.v2beta1.ReplaceValueConfig)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::privacy::dlp::v2beta1::Value* new_value_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::TableStruct;
  friend void ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaultsReplaceValueConfigImpl();
};
// -------------------------------------------------------------------

class ReplaceWithInfoTypeConfig : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.privacy.dlp.v2beta1.ReplaceWithInfoTypeConfig) */ {
 public:
  ReplaceWithInfoTypeConfig();
  virtual ~ReplaceWithInfoTypeConfig();

  ReplaceWithInfoTypeConfig(const ReplaceWithInfoTypeConfig& from);

  inline ReplaceWithInfoTypeConfig& operator=(const ReplaceWithInfoTypeConfig& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ReplaceWithInfoTypeConfig(ReplaceWithInfoTypeConfig&& from) noexcept
    : ReplaceWithInfoTypeConfig() {
    *this = ::std::move(from);
  }

  inline ReplaceWithInfoTypeConfig& operator=(ReplaceWithInfoTypeConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ReplaceWithInfoTypeConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReplaceWithInfoTypeConfig* internal_default_instance() {
    return reinterpret_cast<const ReplaceWithInfoTypeConfig*>(
               &_ReplaceWithInfoTypeConfig_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    58;

  void Swap(ReplaceWithInfoTypeConfig* other);
  friend void swap(ReplaceWithInfoTypeConfig& a, ReplaceWithInfoTypeConfig& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ReplaceWithInfoTypeConfig* New() const PROTOBUF_FINAL { return New(NULL); }

  ReplaceWithInfoTypeConfig* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ReplaceWithInfoTypeConfig& from);
  void MergeFrom(const ReplaceWithInfoTypeConfig& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ReplaceWithInfoTypeConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:google.privacy.dlp.v2beta1.ReplaceWithInfoTypeConfig)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::TableStruct;
  friend void ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaultsReplaceWithInfoTypeConfigImpl();
};
// -------------------------------------------------------------------

class RedactConfig : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.privacy.dlp.v2beta1.RedactConfig) */ {
 public:
  RedactConfig();
  virtual ~RedactConfig();

  RedactConfig(const RedactConfig& from);

  inline RedactConfig& operator=(const RedactConfig& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RedactConfig(RedactConfig&& from) noexcept
    : RedactConfig() {
    *this = ::std::move(from);
  }

  inline RedactConfig& operator=(RedactConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RedactConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RedactConfig* internal_default_instance() {
    return reinterpret_cast<const RedactConfig*>(
               &_RedactConfig_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    59;

  void Swap(RedactConfig* other);
  friend void swap(RedactConfig& a, RedactConfig& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RedactConfig* New() const PROTOBUF_FINAL { return New(NULL); }

  RedactConfig* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const RedactConfig& from);
  void MergeFrom(const RedactConfig& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(RedactConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:google.privacy.dlp.v2beta1.RedactConfig)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::TableStruct;
  friend void ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaultsRedactConfigImpl();
};
// -------------------------------------------------------------------

class CharsToIgnore : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.privacy.dlp.v2beta1.CharsToIgnore) */ {
 public:
  CharsToIgnore();
  virtual ~CharsToIgnore();

  CharsToIgnore(const CharsToIgnore& from);

  inline CharsToIgnore& operator=(const CharsToIgnore& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CharsToIgnore(CharsToIgnore&& from) noexcept
    : CharsToIgnore() {
    *this = ::std::move(from);
  }

  inline CharsToIgnore& operator=(CharsToIgnore&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CharsToIgnore& default_instance();

  enum CharactersCase {
    kCharactersToSkip = 1,
    kCommonCharactersToIgnore = 2,
    CHARACTERS_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CharsToIgnore* internal_default_instance() {
    return reinterpret_cast<const CharsToIgnore*>(
               &_CharsToIgnore_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    60;

  void Swap(CharsToIgnore* other);
  friend void swap(CharsToIgnore& a, CharsToIgnore& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CharsToIgnore* New() const PROTOBUF_FINAL { return New(NULL); }

  CharsToIgnore* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CharsToIgnore& from);
  void MergeFrom(const CharsToIgnore& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CharsToIgnore* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef CharsToIgnore_CharacterGroup CharacterGroup;
  static const CharacterGroup CHARACTER_GROUP_UNSPECIFIED =
    CharsToIgnore_CharacterGroup_CHARACTER_GROUP_UNSPECIFIED;
  static const CharacterGroup NUMERIC =
    CharsToIgnore_CharacterGroup_NUMERIC;
  static const CharacterGroup ALPHA_UPPER_CASE =
    CharsToIgnore_CharacterGroup_ALPHA_UPPER_CASE;
  static const CharacterGroup ALPHA_LOWER_CASE =
    CharsToIgnore_CharacterGroup_ALPHA_LOWER_CASE;
  static const CharacterGroup PUNCTUATION =
    CharsToIgnore_CharacterGroup_PUNCTUATION;
  static const CharacterGroup WHITESPACE =
    CharsToIgnore_CharacterGroup_WHITESPACE;
  static inline bool CharacterGroup_IsValid(int value) {
    return CharsToIgnore_CharacterGroup_IsValid(value);
  }
  static const CharacterGroup CharacterGroup_MIN =
    CharsToIgnore_CharacterGroup_CharacterGroup_MIN;
  static const CharacterGroup CharacterGroup_MAX =
    CharsToIgnore_CharacterGroup_CharacterGroup_MAX;
  static const int CharacterGroup_ARRAYSIZE =
    CharsToIgnore_CharacterGroup_CharacterGroup_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  CharacterGroup_descriptor() {
    return CharsToIgnore_CharacterGroup_descriptor();
  }
  static inline const ::std::string& CharacterGroup_Name(CharacterGroup value) {
    return CharsToIgnore_CharacterGroup_Name(value);
  }
  static inline bool CharacterGroup_Parse(const ::std::string& name,
      CharacterGroup* value) {
    return CharsToIgnore_CharacterGroup_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // string characters_to_skip = 1;
  private:
  bool has_characters_to_skip() const;
  public:
  void clear_characters_to_skip();
  static const int kCharactersToSkipFieldNumber = 1;
  const ::std::string& characters_to_skip() const;
  void set_characters_to_skip(const ::std::string& value);
  #if LANG_CXX11
  void set_characters_to_skip(::std::string&& value);
  #endif
  void set_characters_to_skip(const char* value);
  void set_characters_to_skip(const char* value, size_t size);
  ::std::string* mutable_characters_to_skip();
  ::std::string* release_characters_to_skip();
  void set_allocated_characters_to_skip(::std::string* characters_to_skip);

  // .google.privacy.dlp.v2beta1.CharsToIgnore.CharacterGroup common_characters_to_ignore = 2;
  private:
  bool has_common_characters_to_ignore() const;
  public:
  void clear_common_characters_to_ignore();
  static const int kCommonCharactersToIgnoreFieldNumber = 2;
  ::google::privacy::dlp::v2beta1::CharsToIgnore_CharacterGroup common_characters_to_ignore() const;
  void set_common_characters_to_ignore(::google::privacy::dlp::v2beta1::CharsToIgnore_CharacterGroup value);

  CharactersCase characters_case() const;
  // @@protoc_insertion_point(class_scope:google.privacy.dlp.v2beta1.CharsToIgnore)
 private:
  void set_has_characters_to_skip();
  void set_has_common_characters_to_ignore();

  inline bool has_characters() const;
  void clear_characters();
  inline void clear_has_characters();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  union CharactersUnion {
    CharactersUnion() {}
    ::google::protobuf::internal::ArenaStringPtr characters_to_skip_;
    int common_characters_to_ignore_;
  } characters_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::TableStruct;
  friend void ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaultsCharsToIgnoreImpl();
};
// -------------------------------------------------------------------

class CharacterMaskConfig : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.privacy.dlp.v2beta1.CharacterMaskConfig) */ {
 public:
  CharacterMaskConfig();
  virtual ~CharacterMaskConfig();

  CharacterMaskConfig(const CharacterMaskConfig& from);

  inline CharacterMaskConfig& operator=(const CharacterMaskConfig& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CharacterMaskConfig(CharacterMaskConfig&& from) noexcept
    : CharacterMaskConfig() {
    *this = ::std::move(from);
  }

  inline CharacterMaskConfig& operator=(CharacterMaskConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CharacterMaskConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CharacterMaskConfig* internal_default_instance() {
    return reinterpret_cast<const CharacterMaskConfig*>(
               &_CharacterMaskConfig_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    61;

  void Swap(CharacterMaskConfig* other);
  friend void swap(CharacterMaskConfig& a, CharacterMaskConfig& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CharacterMaskConfig* New() const PROTOBUF_FINAL { return New(NULL); }

  CharacterMaskConfig* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CharacterMaskConfig& from);
  void MergeFrom(const CharacterMaskConfig& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CharacterMaskConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .google.privacy.dlp.v2beta1.CharsToIgnore characters_to_ignore = 4;
  int characters_to_ignore_size() const;
  void clear_characters_to_ignore();
  static const int kCharactersToIgnoreFieldNumber = 4;
  const ::google::privacy::dlp::v2beta1::CharsToIgnore& characters_to_ignore(int index) const;
  ::google::privacy::dlp::v2beta1::CharsToIgnore* mutable_characters_to_ignore(int index);
  ::google::privacy::dlp::v2beta1::CharsToIgnore* add_characters_to_ignore();
  ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2beta1::CharsToIgnore >*
      mutable_characters_to_ignore();
  const ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2beta1::CharsToIgnore >&
      characters_to_ignore() const;

  // string masking_character = 1;
  void clear_masking_character();
  static const int kMaskingCharacterFieldNumber = 1;
  const ::std::string& masking_character() const;
  void set_masking_character(const ::std::string& value);
  #if LANG_CXX11
  void set_masking_character(::std::string&& value);
  #endif
  void set_masking_character(const char* value);
  void set_masking_character(const char* value, size_t size);
  ::std::string* mutable_masking_character();
  ::std::string* release_masking_character();
  void set_allocated_masking_character(::std::string* masking_character);

  // int32 number_to_mask = 2;
  void clear_number_to_mask();
  static const int kNumberToMaskFieldNumber = 2;
  ::google::protobuf::int32 number_to_mask() const;
  void set_number_to_mask(::google::protobuf::int32 value);

  // bool reverse_order = 3;
  void clear_reverse_order();
  static const int kReverseOrderFieldNumber = 3;
  bool reverse_order() const;
  void set_reverse_order(bool value);

  // @@protoc_insertion_point(class_scope:google.privacy.dlp.v2beta1.CharacterMaskConfig)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2beta1::CharsToIgnore > characters_to_ignore_;
  ::google::protobuf::internal::ArenaStringPtr masking_character_;
  ::google::protobuf::int32 number_to_mask_;
  bool reverse_order_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::TableStruct;
  friend void ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaultsCharacterMaskConfigImpl();
};
// -------------------------------------------------------------------

class FixedSizeBucketingConfig : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.privacy.dlp.v2beta1.FixedSizeBucketingConfig) */ {
 public:
  FixedSizeBucketingConfig();
  virtual ~FixedSizeBucketingConfig();

  FixedSizeBucketingConfig(const FixedSizeBucketingConfig& from);

  inline FixedSizeBucketingConfig& operator=(const FixedSizeBucketingConfig& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FixedSizeBucketingConfig(FixedSizeBucketingConfig&& from) noexcept
    : FixedSizeBucketingConfig() {
    *this = ::std::move(from);
  }

  inline FixedSizeBucketingConfig& operator=(FixedSizeBucketingConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const FixedSizeBucketingConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FixedSizeBucketingConfig* internal_default_instance() {
    return reinterpret_cast<const FixedSizeBucketingConfig*>(
               &_FixedSizeBucketingConfig_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    62;

  void Swap(FixedSizeBucketingConfig* other);
  friend void swap(FixedSizeBucketingConfig& a, FixedSizeBucketingConfig& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FixedSizeBucketingConfig* New() const PROTOBUF_FINAL { return New(NULL); }

  FixedSizeBucketingConfig* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const FixedSizeBucketingConfig& from);
  void MergeFrom(const FixedSizeBucketingConfig& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(FixedSizeBucketingConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.privacy.dlp.v2beta1.Value lower_bound = 1;
  bool has_lower_bound() const;
  void clear_lower_bound();
  static const int kLowerBoundFieldNumber = 1;
  const ::google::privacy::dlp::v2beta1::Value& lower_bound() const;
  ::google::privacy::dlp::v2beta1::Value* release_lower_bound();
  ::google::privacy::dlp::v2beta1::Value* mutable_lower_bound();
  void set_allocated_lower_bound(::google::privacy::dlp::v2beta1::Value* lower_bound);

  // .google.privacy.dlp.v2beta1.Value upper_bound = 2;
  bool has_upper_bound() const;
  void clear_upper_bound();
  static const int kUpperBoundFieldNumber = 2;
  const ::google::privacy::dlp::v2beta1::Value& upper_bound() const;
  ::google::privacy::dlp::v2beta1::Value* release_upper_bound();
  ::google::privacy::dlp::v2beta1::Value* mutable_upper_bound();
  void set_allocated_upper_bound(::google::privacy::dlp::v2beta1::Value* upper_bound);

  // double bucket_size = 3;
  void clear_bucket_size();
  static const int kBucketSizeFieldNumber = 3;
  double bucket_size() const;
  void set_bucket_size(double value);

  // @@protoc_insertion_point(class_scope:google.privacy.dlp.v2beta1.FixedSizeBucketingConfig)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::privacy::dlp::v2beta1::Value* lower_bound_;
  ::google::privacy::dlp::v2beta1::Value* upper_bound_;
  double bucket_size_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::TableStruct;
  friend void ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaultsFixedSizeBucketingConfigImpl();
};
// -------------------------------------------------------------------

class BucketingConfig_Bucket : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.privacy.dlp.v2beta1.BucketingConfig.Bucket) */ {
 public:
  BucketingConfig_Bucket();
  virtual ~BucketingConfig_Bucket();

  BucketingConfig_Bucket(const BucketingConfig_Bucket& from);

  inline BucketingConfig_Bucket& operator=(const BucketingConfig_Bucket& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  BucketingConfig_Bucket(BucketingConfig_Bucket&& from) noexcept
    : BucketingConfig_Bucket() {
    *this = ::std::move(from);
  }

  inline BucketingConfig_Bucket& operator=(BucketingConfig_Bucket&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const BucketingConfig_Bucket& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BucketingConfig_Bucket* internal_default_instance() {
    return reinterpret_cast<const BucketingConfig_Bucket*>(
               &_BucketingConfig_Bucket_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    63;

  void Swap(BucketingConfig_Bucket* other);
  friend void swap(BucketingConfig_Bucket& a, BucketingConfig_Bucket& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BucketingConfig_Bucket* New() const PROTOBUF_FINAL { return New(NULL); }

  BucketingConfig_Bucket* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const BucketingConfig_Bucket& from);
  void MergeFrom(const BucketingConfig_Bucket& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(BucketingConfig_Bucket* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.privacy.dlp.v2beta1.Value min = 1;
  bool has_min() const;
  void clear_min();
  static const int kMinFieldNumber = 1;
  const ::google::privacy::dlp::v2beta1::Value& min() const;
  ::google::privacy::dlp::v2beta1::Value* release_min();
  ::google::privacy::dlp::v2beta1::Value* mutable_min();
  void set_allocated_min(::google::privacy::dlp::v2beta1::Value* min);

  // .google.privacy.dlp.v2beta1.Value max = 2;
  bool has_max() const;
  void clear_max();
  static const int kMaxFieldNumber = 2;
  const ::google::privacy::dlp::v2beta1::Value& max() const;
  ::google::privacy::dlp::v2beta1::Value* release_max();
  ::google::privacy::dlp::v2beta1::Value* mutable_max();
  void set_allocated_max(::google::privacy::dlp::v2beta1::Value* max);

  // .google.privacy.dlp.v2beta1.Value replacement_value = 3;
  bool has_replacement_value() const;
  void clear_replacement_value();
  static const int kReplacementValueFieldNumber = 3;
  const ::google::privacy::dlp::v2beta1::Value& replacement_value() const;
  ::google::privacy::dlp::v2beta1::Value* release_replacement_value();
  ::google::privacy::dlp::v2beta1::Value* mutable_replacement_value();
  void set_allocated_replacement_value(::google::privacy::dlp::v2beta1::Value* replacement_value);

  // @@protoc_insertion_point(class_scope:google.privacy.dlp.v2beta1.BucketingConfig.Bucket)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::privacy::dlp::v2beta1::Value* min_;
  ::google::privacy::dlp::v2beta1::Value* max_;
  ::google::privacy::dlp::v2beta1::Value* replacement_value_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::TableStruct;
  friend void ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaultsBucketingConfig_BucketImpl();
};
// -------------------------------------------------------------------

class BucketingConfig : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.privacy.dlp.v2beta1.BucketingConfig) */ {
 public:
  BucketingConfig();
  virtual ~BucketingConfig();

  BucketingConfig(const BucketingConfig& from);

  inline BucketingConfig& operator=(const BucketingConfig& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  BucketingConfig(BucketingConfig&& from) noexcept
    : BucketingConfig() {
    *this = ::std::move(from);
  }

  inline BucketingConfig& operator=(BucketingConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const BucketingConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BucketingConfig* internal_default_instance() {
    return reinterpret_cast<const BucketingConfig*>(
               &_BucketingConfig_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    64;

  void Swap(BucketingConfig* other);
  friend void swap(BucketingConfig& a, BucketingConfig& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BucketingConfig* New() const PROTOBUF_FINAL { return New(NULL); }

  BucketingConfig* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const BucketingConfig& from);
  void MergeFrom(const BucketingConfig& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(BucketingConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef BucketingConfig_Bucket Bucket;

  // accessors -------------------------------------------------------

  // repeated .google.privacy.dlp.v2beta1.BucketingConfig.Bucket buckets = 1;
  int buckets_size() const;
  void clear_buckets();
  static const int kBucketsFieldNumber = 1;
  const ::google::privacy::dlp::v2beta1::BucketingConfig_Bucket& buckets(int index) const;
  ::google::privacy::dlp::v2beta1::BucketingConfig_Bucket* mutable_buckets(int index);
  ::google::privacy::dlp::v2beta1::BucketingConfig_Bucket* add_buckets();
  ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2beta1::BucketingConfig_Bucket >*
      mutable_buckets();
  const ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2beta1::BucketingConfig_Bucket >&
      buckets() const;

  // @@protoc_insertion_point(class_scope:google.privacy.dlp.v2beta1.BucketingConfig)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2beta1::BucketingConfig_Bucket > buckets_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::TableStruct;
  friend void ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaultsBucketingConfigImpl();
};
// -------------------------------------------------------------------

class CryptoReplaceFfxFpeConfig : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.privacy.dlp.v2beta1.CryptoReplaceFfxFpeConfig) */ {
 public:
  CryptoReplaceFfxFpeConfig();
  virtual ~CryptoReplaceFfxFpeConfig();

  CryptoReplaceFfxFpeConfig(const CryptoReplaceFfxFpeConfig& from);

  inline CryptoReplaceFfxFpeConfig& operator=(const CryptoReplaceFfxFpeConfig& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CryptoReplaceFfxFpeConfig(CryptoReplaceFfxFpeConfig&& from) noexcept
    : CryptoReplaceFfxFpeConfig() {
    *this = ::std::move(from);
  }

  inline CryptoReplaceFfxFpeConfig& operator=(CryptoReplaceFfxFpeConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CryptoReplaceFfxFpeConfig& default_instance();

  enum AlphabetCase {
    kCommonAlphabet = 4,
    kCustomAlphabet = 5,
    kRadix = 6,
    ALPHABET_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CryptoReplaceFfxFpeConfig* internal_default_instance() {
    return reinterpret_cast<const CryptoReplaceFfxFpeConfig*>(
               &_CryptoReplaceFfxFpeConfig_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    65;

  void Swap(CryptoReplaceFfxFpeConfig* other);
  friend void swap(CryptoReplaceFfxFpeConfig& a, CryptoReplaceFfxFpeConfig& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CryptoReplaceFfxFpeConfig* New() const PROTOBUF_FINAL { return New(NULL); }

  CryptoReplaceFfxFpeConfig* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CryptoReplaceFfxFpeConfig& from);
  void MergeFrom(const CryptoReplaceFfxFpeConfig& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CryptoReplaceFfxFpeConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef CryptoReplaceFfxFpeConfig_FfxCommonNativeAlphabet FfxCommonNativeAlphabet;
  static const FfxCommonNativeAlphabet FFX_COMMON_NATIVE_ALPHABET_UNSPECIFIED =
    CryptoReplaceFfxFpeConfig_FfxCommonNativeAlphabet_FFX_COMMON_NATIVE_ALPHABET_UNSPECIFIED;
  static const FfxCommonNativeAlphabet NUMERIC =
    CryptoReplaceFfxFpeConfig_FfxCommonNativeAlphabet_NUMERIC;
  static const FfxCommonNativeAlphabet HEXADECIMAL =
    CryptoReplaceFfxFpeConfig_FfxCommonNativeAlphabet_HEXADECIMAL;
  static const FfxCommonNativeAlphabet UPPER_CASE_ALPHA_NUMERIC =
    CryptoReplaceFfxFpeConfig_FfxCommonNativeAlphabet_UPPER_CASE_ALPHA_NUMERIC;
  static const FfxCommonNativeAlphabet ALPHA_NUMERIC =
    CryptoReplaceFfxFpeConfig_FfxCommonNativeAlphabet_ALPHA_NUMERIC;
  static inline bool FfxCommonNativeAlphabet_IsValid(int value) {
    return CryptoReplaceFfxFpeConfig_FfxCommonNativeAlphabet_IsValid(value);
  }
  static const FfxCommonNativeAlphabet FfxCommonNativeAlphabet_MIN =
    CryptoReplaceFfxFpeConfig_FfxCommonNativeAlphabet_FfxCommonNativeAlphabet_MIN;
  static const FfxCommonNativeAlphabet FfxCommonNativeAlphabet_MAX =
    CryptoReplaceFfxFpeConfig_FfxCommonNativeAlphabet_FfxCommonNativeAlphabet_MAX;
  static const int FfxCommonNativeAlphabet_ARRAYSIZE =
    CryptoReplaceFfxFpeConfig_FfxCommonNativeAlphabet_FfxCommonNativeAlphabet_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  FfxCommonNativeAlphabet_descriptor() {
    return CryptoReplaceFfxFpeConfig_FfxCommonNativeAlphabet_descriptor();
  }
  static inline const ::std::string& FfxCommonNativeAlphabet_Name(FfxCommonNativeAlphabet value) {
    return CryptoReplaceFfxFpeConfig_FfxCommonNativeAlphabet_Name(value);
  }
  static inline bool FfxCommonNativeAlphabet_Parse(const ::std::string& name,
      FfxCommonNativeAlphabet* value) {
    return CryptoReplaceFfxFpeConfig_FfxCommonNativeAlphabet_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // .google.privacy.dlp.v2beta1.CryptoKey crypto_key = 1;
  bool has_crypto_key() const;
  void clear_crypto_key();
  static const int kCryptoKeyFieldNumber = 1;
  const ::google::privacy::dlp::v2beta1::CryptoKey& crypto_key() const;
  ::google::privacy::dlp::v2beta1::CryptoKey* release_crypto_key();
  ::google::privacy::dlp::v2beta1::CryptoKey* mutable_crypto_key();
  void set_allocated_crypto_key(::google::privacy::dlp::v2beta1::CryptoKey* crypto_key);

  // .google.privacy.dlp.v2beta1.FieldId context = 2;
  bool has_context() const;
  void clear_context();
  static const int kContextFieldNumber = 2;
  const ::google::privacy::dlp::v2beta1::FieldId& context() const;
  ::google::privacy::dlp::v2beta1::FieldId* release_context();
  ::google::privacy::dlp::v2beta1::FieldId* mutable_context();
  void set_allocated_context(::google::privacy::dlp::v2beta1::FieldId* context);

  // .google.privacy.dlp.v2beta1.CryptoReplaceFfxFpeConfig.FfxCommonNativeAlphabet common_alphabet = 4;
  private:
  bool has_common_alphabet() const;
  public:
  void clear_common_alphabet();
  static const int kCommonAlphabetFieldNumber = 4;
  ::google::privacy::dlp::v2beta1::CryptoReplaceFfxFpeConfig_FfxCommonNativeAlphabet common_alphabet() const;
  void set_common_alphabet(::google::privacy::dlp::v2beta1::CryptoReplaceFfxFpeConfig_FfxCommonNativeAlphabet value);

  // string custom_alphabet = 5;
  private:
  bool has_custom_alphabet() const;
  public:
  void clear_custom_alphabet();
  static const int kCustomAlphabetFieldNumber = 5;
  const ::std::string& custom_alphabet() const;
  void set_custom_alphabet(const ::std::string& value);
  #if LANG_CXX11
  void set_custom_alphabet(::std::string&& value);
  #endif
  void set_custom_alphabet(const char* value);
  void set_custom_alphabet(const char* value, size_t size);
  ::std::string* mutable_custom_alphabet();
  ::std::string* release_custom_alphabet();
  void set_allocated_custom_alphabet(::std::string* custom_alphabet);

  // int32 radix = 6;
  private:
  bool has_radix() const;
  public:
  void clear_radix();
  static const int kRadixFieldNumber = 6;
  ::google::protobuf::int32 radix() const;
  void set_radix(::google::protobuf::int32 value);

  AlphabetCase alphabet_case() const;
  // @@protoc_insertion_point(class_scope:google.privacy.dlp.v2beta1.CryptoReplaceFfxFpeConfig)
 private:
  void set_has_common_alphabet();
  void set_has_custom_alphabet();
  void set_has_radix();

  inline bool has_alphabet() const;
  void clear_alphabet();
  inline void clear_has_alphabet();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::privacy::dlp::v2beta1::CryptoKey* crypto_key_;
  ::google::privacy::dlp::v2beta1::FieldId* context_;
  union AlphabetUnion {
    AlphabetUnion() {}
    int common_alphabet_;
    ::google::protobuf::internal::ArenaStringPtr custom_alphabet_;
    ::google::protobuf::int32 radix_;
  } alphabet_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::TableStruct;
  friend void ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaultsCryptoReplaceFfxFpeConfigImpl();
};
// -------------------------------------------------------------------

class CryptoKey : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.privacy.dlp.v2beta1.CryptoKey) */ {
 public:
  CryptoKey();
  virtual ~CryptoKey();

  CryptoKey(const CryptoKey& from);

  inline CryptoKey& operator=(const CryptoKey& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CryptoKey(CryptoKey&& from) noexcept
    : CryptoKey() {
    *this = ::std::move(from);
  }

  inline CryptoKey& operator=(CryptoKey&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CryptoKey& default_instance();

  enum SourceCase {
    kTransient = 1,
    kUnwrapped = 2,
    kKmsWrapped = 3,
    SOURCE_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CryptoKey* internal_default_instance() {
    return reinterpret_cast<const CryptoKey*>(
               &_CryptoKey_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    66;

  void Swap(CryptoKey* other);
  friend void swap(CryptoKey& a, CryptoKey& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CryptoKey* New() const PROTOBUF_FINAL { return New(NULL); }

  CryptoKey* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CryptoKey& from);
  void MergeFrom(const CryptoKey& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CryptoKey* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.privacy.dlp.v2beta1.TransientCryptoKey transient = 1;
  bool has_transient() const;
  void clear_transient();
  static const int kTransientFieldNumber = 1;
  const ::google::privacy::dlp::v2beta1::TransientCryptoKey& transient() const;
  ::google::privacy::dlp::v2beta1::TransientCryptoKey* release_transient();
  ::google::privacy::dlp::v2beta1::TransientCryptoKey* mutable_transient();
  void set_allocated_transient(::google::privacy::dlp::v2beta1::TransientCryptoKey* transient);

  // .google.privacy.dlp.v2beta1.UnwrappedCryptoKey unwrapped = 2;
  bool has_unwrapped() const;
  void clear_unwrapped();
  static const int kUnwrappedFieldNumber = 2;
  const ::google::privacy::dlp::v2beta1::UnwrappedCryptoKey& unwrapped() const;
  ::google::privacy::dlp::v2beta1::UnwrappedCryptoKey* release_unwrapped();
  ::google::privacy::dlp::v2beta1::UnwrappedCryptoKey* mutable_unwrapped();
  void set_allocated_unwrapped(::google::privacy::dlp::v2beta1::UnwrappedCryptoKey* unwrapped);

  // .google.privacy.dlp.v2beta1.KmsWrappedCryptoKey kms_wrapped = 3;
  bool has_kms_wrapped() const;
  void clear_kms_wrapped();
  static const int kKmsWrappedFieldNumber = 3;
  const ::google::privacy::dlp::v2beta1::KmsWrappedCryptoKey& kms_wrapped() const;
  ::google::privacy::dlp::v2beta1::KmsWrappedCryptoKey* release_kms_wrapped();
  ::google::privacy::dlp::v2beta1::KmsWrappedCryptoKey* mutable_kms_wrapped();
  void set_allocated_kms_wrapped(::google::privacy::dlp::v2beta1::KmsWrappedCryptoKey* kms_wrapped);

  SourceCase source_case() const;
  // @@protoc_insertion_point(class_scope:google.privacy.dlp.v2beta1.CryptoKey)
 private:
  void set_has_transient();
  void set_has_unwrapped();
  void set_has_kms_wrapped();

  inline bool has_source() const;
  void clear_source();
  inline void clear_has_source();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  union SourceUnion {
    SourceUnion() {}
    ::google::privacy::dlp::v2beta1::TransientCryptoKey* transient_;
    ::google::privacy::dlp::v2beta1::UnwrappedCryptoKey* unwrapped_;
    ::google::privacy::dlp::v2beta1::KmsWrappedCryptoKey* kms_wrapped_;
  } source_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::TableStruct;
  friend void ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaultsCryptoKeyImpl();
};
// -------------------------------------------------------------------

class TransientCryptoKey : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.privacy.dlp.v2beta1.TransientCryptoKey) */ {
 public:
  TransientCryptoKey();
  virtual ~TransientCryptoKey();

  TransientCryptoKey(const TransientCryptoKey& from);

  inline TransientCryptoKey& operator=(const TransientCryptoKey& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TransientCryptoKey(TransientCryptoKey&& from) noexcept
    : TransientCryptoKey() {
    *this = ::std::move(from);
  }

  inline TransientCryptoKey& operator=(TransientCryptoKey&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const TransientCryptoKey& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TransientCryptoKey* internal_default_instance() {
    return reinterpret_cast<const TransientCryptoKey*>(
               &_TransientCryptoKey_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    67;

  void Swap(TransientCryptoKey* other);
  friend void swap(TransientCryptoKey& a, TransientCryptoKey& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TransientCryptoKey* New() const PROTOBUF_FINAL { return New(NULL); }

  TransientCryptoKey* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const TransientCryptoKey& from);
  void MergeFrom(const TransientCryptoKey& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TransientCryptoKey* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:google.privacy.dlp.v2beta1.TransientCryptoKey)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::TableStruct;
  friend void ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaultsTransientCryptoKeyImpl();
};
// -------------------------------------------------------------------

class UnwrappedCryptoKey : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.privacy.dlp.v2beta1.UnwrappedCryptoKey) */ {
 public:
  UnwrappedCryptoKey();
  virtual ~UnwrappedCryptoKey();

  UnwrappedCryptoKey(const UnwrappedCryptoKey& from);

  inline UnwrappedCryptoKey& operator=(const UnwrappedCryptoKey& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UnwrappedCryptoKey(UnwrappedCryptoKey&& from) noexcept
    : UnwrappedCryptoKey() {
    *this = ::std::move(from);
  }

  inline UnwrappedCryptoKey& operator=(UnwrappedCryptoKey&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const UnwrappedCryptoKey& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UnwrappedCryptoKey* internal_default_instance() {
    return reinterpret_cast<const UnwrappedCryptoKey*>(
               &_UnwrappedCryptoKey_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    68;

  void Swap(UnwrappedCryptoKey* other);
  friend void swap(UnwrappedCryptoKey& a, UnwrappedCryptoKey& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UnwrappedCryptoKey* New() const PROTOBUF_FINAL { return New(NULL); }

  UnwrappedCryptoKey* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const UnwrappedCryptoKey& from);
  void MergeFrom(const UnwrappedCryptoKey& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(UnwrappedCryptoKey* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes key = 1;
  void clear_key();
  static const int kKeyFieldNumber = 1;
  const ::std::string& key() const;
  void set_key(const ::std::string& value);
  #if LANG_CXX11
  void set_key(::std::string&& value);
  #endif
  void set_key(const char* value);
  void set_key(const void* value, size_t size);
  ::std::string* mutable_key();
  ::std::string* release_key();
  void set_allocated_key(::std::string* key);

  // @@protoc_insertion_point(class_scope:google.privacy.dlp.v2beta1.UnwrappedCryptoKey)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr key_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::TableStruct;
  friend void ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaultsUnwrappedCryptoKeyImpl();
};
// -------------------------------------------------------------------

class KmsWrappedCryptoKey : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.privacy.dlp.v2beta1.KmsWrappedCryptoKey) */ {
 public:
  KmsWrappedCryptoKey();
  virtual ~KmsWrappedCryptoKey();

  KmsWrappedCryptoKey(const KmsWrappedCryptoKey& from);

  inline KmsWrappedCryptoKey& operator=(const KmsWrappedCryptoKey& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  KmsWrappedCryptoKey(KmsWrappedCryptoKey&& from) noexcept
    : KmsWrappedCryptoKey() {
    *this = ::std::move(from);
  }

  inline KmsWrappedCryptoKey& operator=(KmsWrappedCryptoKey&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const KmsWrappedCryptoKey& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const KmsWrappedCryptoKey* internal_default_instance() {
    return reinterpret_cast<const KmsWrappedCryptoKey*>(
               &_KmsWrappedCryptoKey_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    69;

  void Swap(KmsWrappedCryptoKey* other);
  friend void swap(KmsWrappedCryptoKey& a, KmsWrappedCryptoKey& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline KmsWrappedCryptoKey* New() const PROTOBUF_FINAL { return New(NULL); }

  KmsWrappedCryptoKey* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const KmsWrappedCryptoKey& from);
  void MergeFrom(const KmsWrappedCryptoKey& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(KmsWrappedCryptoKey* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes wrapped_key = 1;
  void clear_wrapped_key();
  static const int kWrappedKeyFieldNumber = 1;
  const ::std::string& wrapped_key() const;
  void set_wrapped_key(const ::std::string& value);
  #if LANG_CXX11
  void set_wrapped_key(::std::string&& value);
  #endif
  void set_wrapped_key(const char* value);
  void set_wrapped_key(const void* value, size_t size);
  ::std::string* mutable_wrapped_key();
  ::std::string* release_wrapped_key();
  void set_allocated_wrapped_key(::std::string* wrapped_key);

  // string crypto_key_name = 2;
  void clear_crypto_key_name();
  static const int kCryptoKeyNameFieldNumber = 2;
  const ::std::string& crypto_key_name() const;
  void set_crypto_key_name(const ::std::string& value);
  #if LANG_CXX11
  void set_crypto_key_name(::std::string&& value);
  #endif
  void set_crypto_key_name(const char* value);
  void set_crypto_key_name(const char* value, size_t size);
  ::std::string* mutable_crypto_key_name();
  ::std::string* release_crypto_key_name();
  void set_allocated_crypto_key_name(::std::string* crypto_key_name);

  // @@protoc_insertion_point(class_scope:google.privacy.dlp.v2beta1.KmsWrappedCryptoKey)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr wrapped_key_;
  ::google::protobuf::internal::ArenaStringPtr crypto_key_name_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::TableStruct;
  friend void ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaultsKmsWrappedCryptoKeyImpl();
};
// -------------------------------------------------------------------

class InfoTypeTransformations_InfoTypeTransformation : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.privacy.dlp.v2beta1.InfoTypeTransformations.InfoTypeTransformation) */ {
 public:
  InfoTypeTransformations_InfoTypeTransformation();
  virtual ~InfoTypeTransformations_InfoTypeTransformation();

  InfoTypeTransformations_InfoTypeTransformation(const InfoTypeTransformations_InfoTypeTransformation& from);

  inline InfoTypeTransformations_InfoTypeTransformation& operator=(const InfoTypeTransformations_InfoTypeTransformation& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  InfoTypeTransformations_InfoTypeTransformation(InfoTypeTransformations_InfoTypeTransformation&& from) noexcept
    : InfoTypeTransformations_InfoTypeTransformation() {
    *this = ::std::move(from);
  }

  inline InfoTypeTransformations_InfoTypeTransformation& operator=(InfoTypeTransformations_InfoTypeTransformation&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const InfoTypeTransformations_InfoTypeTransformation& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const InfoTypeTransformations_InfoTypeTransformation* internal_default_instance() {
    return reinterpret_cast<const InfoTypeTransformations_InfoTypeTransformation*>(
               &_InfoTypeTransformations_InfoTypeTransformation_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    70;

  void Swap(InfoTypeTransformations_InfoTypeTransformation* other);
  friend void swap(InfoTypeTransformations_InfoTypeTransformation& a, InfoTypeTransformations_InfoTypeTransformation& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline InfoTypeTransformations_InfoTypeTransformation* New() const PROTOBUF_FINAL { return New(NULL); }

  InfoTypeTransformations_InfoTypeTransformation* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const InfoTypeTransformations_InfoTypeTransformation& from);
  void MergeFrom(const InfoTypeTransformations_InfoTypeTransformation& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(InfoTypeTransformations_InfoTypeTransformation* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .google.privacy.dlp.v2beta1.InfoType info_types = 1;
  int info_types_size() const;
  void clear_info_types();
  static const int kInfoTypesFieldNumber = 1;
  const ::google::privacy::dlp::v2beta1::InfoType& info_types(int index) const;
  ::google::privacy::dlp::v2beta1::InfoType* mutable_info_types(int index);
  ::google::privacy::dlp::v2beta1::InfoType* add_info_types();
  ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2beta1::InfoType >*
      mutable_info_types();
  const ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2beta1::InfoType >&
      info_types() const;

  // .google.privacy.dlp.v2beta1.PrimitiveTransformation primitive_transformation = 2;
  bool has_primitive_transformation() const;
  void clear_primitive_transformation();
  static const int kPrimitiveTransformationFieldNumber = 2;
  const ::google::privacy::dlp::v2beta1::PrimitiveTransformation& primitive_transformation() const;
  ::google::privacy::dlp::v2beta1::PrimitiveTransformation* release_primitive_transformation();
  ::google::privacy::dlp::v2beta1::PrimitiveTransformation* mutable_primitive_transformation();
  void set_allocated_primitive_transformation(::google::privacy::dlp::v2beta1::PrimitiveTransformation* primitive_transformation);

  // @@protoc_insertion_point(class_scope:google.privacy.dlp.v2beta1.InfoTypeTransformations.InfoTypeTransformation)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2beta1::InfoType > info_types_;
  ::google::privacy::dlp::v2beta1::PrimitiveTransformation* primitive_transformation_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::TableStruct;
  friend void ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaultsInfoTypeTransformations_InfoTypeTransformationImpl();
};
// -------------------------------------------------------------------

class InfoTypeTransformations : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.privacy.dlp.v2beta1.InfoTypeTransformations) */ {
 public:
  InfoTypeTransformations();
  virtual ~InfoTypeTransformations();

  InfoTypeTransformations(const InfoTypeTransformations& from);

  inline InfoTypeTransformations& operator=(const InfoTypeTransformations& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  InfoTypeTransformations(InfoTypeTransformations&& from) noexcept
    : InfoTypeTransformations() {
    *this = ::std::move(from);
  }

  inline InfoTypeTransformations& operator=(InfoTypeTransformations&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const InfoTypeTransformations& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const InfoTypeTransformations* internal_default_instance() {
    return reinterpret_cast<const InfoTypeTransformations*>(
               &_InfoTypeTransformations_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    71;

  void Swap(InfoTypeTransformations* other);
  friend void swap(InfoTypeTransformations& a, InfoTypeTransformations& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline InfoTypeTransformations* New() const PROTOBUF_FINAL { return New(NULL); }

  InfoTypeTransformations* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const InfoTypeTransformations& from);
  void MergeFrom(const InfoTypeTransformations& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(InfoTypeTransformations* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef InfoTypeTransformations_InfoTypeTransformation InfoTypeTransformation;

  // accessors -------------------------------------------------------

  // repeated .google.privacy.dlp.v2beta1.InfoTypeTransformations.InfoTypeTransformation transformations = 1;
  int transformations_size() const;
  void clear_transformations();
  static const int kTransformationsFieldNumber = 1;
  const ::google::privacy::dlp::v2beta1::InfoTypeTransformations_InfoTypeTransformation& transformations(int index) const;
  ::google::privacy::dlp::v2beta1::InfoTypeTransformations_InfoTypeTransformation* mutable_transformations(int index);
  ::google::privacy::dlp::v2beta1::InfoTypeTransformations_InfoTypeTransformation* add_transformations();
  ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2beta1::InfoTypeTransformations_InfoTypeTransformation >*
      mutable_transformations();
  const ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2beta1::InfoTypeTransformations_InfoTypeTransformation >&
      transformations() const;

  // @@protoc_insertion_point(class_scope:google.privacy.dlp.v2beta1.InfoTypeTransformations)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2beta1::InfoTypeTransformations_InfoTypeTransformation > transformations_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::TableStruct;
  friend void ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaultsInfoTypeTransformationsImpl();
};
// -------------------------------------------------------------------

class FieldTransformation : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.privacy.dlp.v2beta1.FieldTransformation) */ {
 public:
  FieldTransformation();
  virtual ~FieldTransformation();

  FieldTransformation(const FieldTransformation& from);

  inline FieldTransformation& operator=(const FieldTransformation& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FieldTransformation(FieldTransformation&& from) noexcept
    : FieldTransformation() {
    *this = ::std::move(from);
  }

  inline FieldTransformation& operator=(FieldTransformation&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const FieldTransformation& default_instance();

  enum TransformationCase {
    kPrimitiveTransformation = 4,
    kInfoTypeTransformations = 5,
    TRANSFORMATION_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FieldTransformation* internal_default_instance() {
    return reinterpret_cast<const FieldTransformation*>(
               &_FieldTransformation_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    72;

  void Swap(FieldTransformation* other);
  friend void swap(FieldTransformation& a, FieldTransformation& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FieldTransformation* New() const PROTOBUF_FINAL { return New(NULL); }

  FieldTransformation* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const FieldTransformation& from);
  void MergeFrom(const FieldTransformation& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(FieldTransformation* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .google.privacy.dlp.v2beta1.FieldId fields = 1;
  int fields_size() const;
  void clear_fields();
  static const int kFieldsFieldNumber = 1;
  const ::google::privacy::dlp::v2beta1::FieldId& fields(int index) const;
  ::google::privacy::dlp::v2beta1::FieldId* mutable_fields(int index);
  ::google::privacy::dlp::v2beta1::FieldId* add_fields();
  ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2beta1::FieldId >*
      mutable_fields();
  const ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2beta1::FieldId >&
      fields() const;

  // .google.privacy.dlp.v2beta1.RecordCondition condition = 3;
  bool has_condition() const;
  void clear_condition();
  static const int kConditionFieldNumber = 3;
  const ::google::privacy::dlp::v2beta1::RecordCondition& condition() const;
  ::google::privacy::dlp::v2beta1::RecordCondition* release_condition();
  ::google::privacy::dlp::v2beta1::RecordCondition* mutable_condition();
  void set_allocated_condition(::google::privacy::dlp::v2beta1::RecordCondition* condition);

  // .google.privacy.dlp.v2beta1.PrimitiveTransformation primitive_transformation = 4;
  bool has_primitive_transformation() const;
  void clear_primitive_transformation();
  static const int kPrimitiveTransformationFieldNumber = 4;
  const ::google::privacy::dlp::v2beta1::PrimitiveTransformation& primitive_transformation() const;
  ::google::privacy::dlp::v2beta1::PrimitiveTransformation* release_primitive_transformation();
  ::google::privacy::dlp::v2beta1::PrimitiveTransformation* mutable_primitive_transformation();
  void set_allocated_primitive_transformation(::google::privacy::dlp::v2beta1::PrimitiveTransformation* primitive_transformation);

  // .google.privacy.dlp.v2beta1.InfoTypeTransformations info_type_transformations = 5;
  bool has_info_type_transformations() const;
  void clear_info_type_transformations();
  static const int kInfoTypeTransformationsFieldNumber = 5;
  const ::google::privacy::dlp::v2beta1::InfoTypeTransformations& info_type_transformations() const;
  ::google::privacy::dlp::v2beta1::InfoTypeTransformations* release_info_type_transformations();
  ::google::privacy::dlp::v2beta1::InfoTypeTransformations* mutable_info_type_transformations();
  void set_allocated_info_type_transformations(::google::privacy::dlp::v2beta1::InfoTypeTransformations* info_type_transformations);

  TransformationCase transformation_case() const;
  // @@protoc_insertion_point(class_scope:google.privacy.dlp.v2beta1.FieldTransformation)
 private:
  void set_has_primitive_transformation();
  void set_has_info_type_transformations();

  inline bool has_transformation() const;
  void clear_transformation();
  inline void clear_has_transformation();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2beta1::FieldId > fields_;
  ::google::privacy::dlp::v2beta1::RecordCondition* condition_;
  union TransformationUnion {
    TransformationUnion() {}
    ::google::privacy::dlp::v2beta1::PrimitiveTransformation* primitive_transformation_;
    ::google::privacy::dlp::v2beta1::InfoTypeTransformations* info_type_transformations_;
  } transformation_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::TableStruct;
  friend void ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaultsFieldTransformationImpl();
};
// -------------------------------------------------------------------

class RecordTransformations : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.privacy.dlp.v2beta1.RecordTransformations) */ {
 public:
  RecordTransformations();
  virtual ~RecordTransformations();

  RecordTransformations(const RecordTransformations& from);

  inline RecordTransformations& operator=(const RecordTransformations& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RecordTransformations(RecordTransformations&& from) noexcept
    : RecordTransformations() {
    *this = ::std::move(from);
  }

  inline RecordTransformations& operator=(RecordTransformations&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RecordTransformations& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RecordTransformations* internal_default_instance() {
    return reinterpret_cast<const RecordTransformations*>(
               &_RecordTransformations_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    73;

  void Swap(RecordTransformations* other);
  friend void swap(RecordTransformations& a, RecordTransformations& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RecordTransformations* New() const PROTOBUF_FINAL { return New(NULL); }

  RecordTransformations* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const RecordTransformations& from);
  void MergeFrom(const RecordTransformations& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(RecordTransformations* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .google.privacy.dlp.v2beta1.FieldTransformation field_transformations = 1;
  int field_transformations_size() const;
  void clear_field_transformations();
  static const int kFieldTransformationsFieldNumber = 1;
  const ::google::privacy::dlp::v2beta1::FieldTransformation& field_transformations(int index) const;
  ::google::privacy::dlp::v2beta1::FieldTransformation* mutable_field_transformations(int index);
  ::google::privacy::dlp::v2beta1::FieldTransformation* add_field_transformations();
  ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2beta1::FieldTransformation >*
      mutable_field_transformations();
  const ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2beta1::FieldTransformation >&
      field_transformations() const;

  // repeated .google.privacy.dlp.v2beta1.RecordSuppression record_suppressions = 2;
  int record_suppressions_size() const;
  void clear_record_suppressions();
  static const int kRecordSuppressionsFieldNumber = 2;
  const ::google::privacy::dlp::v2beta1::RecordSuppression& record_suppressions(int index) const;
  ::google::privacy::dlp::v2beta1::RecordSuppression* mutable_record_suppressions(int index);
  ::google::privacy::dlp::v2beta1::RecordSuppression* add_record_suppressions();
  ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2beta1::RecordSuppression >*
      mutable_record_suppressions();
  const ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2beta1::RecordSuppression >&
      record_suppressions() const;

  // @@protoc_insertion_point(class_scope:google.privacy.dlp.v2beta1.RecordTransformations)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2beta1::FieldTransformation > field_transformations_;
  ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2beta1::RecordSuppression > record_suppressions_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::TableStruct;
  friend void ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaultsRecordTransformationsImpl();
};
// -------------------------------------------------------------------

class RecordSuppression : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.privacy.dlp.v2beta1.RecordSuppression) */ {
 public:
  RecordSuppression();
  virtual ~RecordSuppression();

  RecordSuppression(const RecordSuppression& from);

  inline RecordSuppression& operator=(const RecordSuppression& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RecordSuppression(RecordSuppression&& from) noexcept
    : RecordSuppression() {
    *this = ::std::move(from);
  }

  inline RecordSuppression& operator=(RecordSuppression&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RecordSuppression& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RecordSuppression* internal_default_instance() {
    return reinterpret_cast<const RecordSuppression*>(
               &_RecordSuppression_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    74;

  void Swap(RecordSuppression* other);
  friend void swap(RecordSuppression& a, RecordSuppression& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RecordSuppression* New() const PROTOBUF_FINAL { return New(NULL); }

  RecordSuppression* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const RecordSuppression& from);
  void MergeFrom(const RecordSuppression& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(RecordSuppression* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.privacy.dlp.v2beta1.RecordCondition condition = 1;
  bool has_condition() const;
  void clear_condition();
  static const int kConditionFieldNumber = 1;
  const ::google::privacy::dlp::v2beta1::RecordCondition& condition() const;
  ::google::privacy::dlp::v2beta1::RecordCondition* release_condition();
  ::google::privacy::dlp::v2beta1::RecordCondition* mutable_condition();
  void set_allocated_condition(::google::privacy::dlp::v2beta1::RecordCondition* condition);

  // @@protoc_insertion_point(class_scope:google.privacy.dlp.v2beta1.RecordSuppression)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::privacy::dlp::v2beta1::RecordCondition* condition_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::TableStruct;
  friend void ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaultsRecordSuppressionImpl();
};
// -------------------------------------------------------------------

class RecordCondition_Condition : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.privacy.dlp.v2beta1.RecordCondition.Condition) */ {
 public:
  RecordCondition_Condition();
  virtual ~RecordCondition_Condition();

  RecordCondition_Condition(const RecordCondition_Condition& from);

  inline RecordCondition_Condition& operator=(const RecordCondition_Condition& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RecordCondition_Condition(RecordCondition_Condition&& from) noexcept
    : RecordCondition_Condition() {
    *this = ::std::move(from);
  }

  inline RecordCondition_Condition& operator=(RecordCondition_Condition&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RecordCondition_Condition& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RecordCondition_Condition* internal_default_instance() {
    return reinterpret_cast<const RecordCondition_Condition*>(
               &_RecordCondition_Condition_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    75;

  void Swap(RecordCondition_Condition* other);
  friend void swap(RecordCondition_Condition& a, RecordCondition_Condition& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RecordCondition_Condition* New() const PROTOBUF_FINAL { return New(NULL); }

  RecordCondition_Condition* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const RecordCondition_Condition& from);
  void MergeFrom(const RecordCondition_Condition& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(RecordCondition_Condition* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.privacy.dlp.v2beta1.FieldId field = 1;
  bool has_field() const;
  void clear_field();
  static const int kFieldFieldNumber = 1;
  const ::google::privacy::dlp::v2beta1::FieldId& field() const;
  ::google::privacy::dlp::v2beta1::FieldId* release_field();
  ::google::privacy::dlp::v2beta1::FieldId* mutable_field();
  void set_allocated_field(::google::privacy::dlp::v2beta1::FieldId* field);

  // .google.privacy.dlp.v2beta1.Value value = 4;
  bool has_value() const;
  void clear_value();
  static const int kValueFieldNumber = 4;
  const ::google::privacy::dlp::v2beta1::Value& value() const;
  ::google::privacy::dlp::v2beta1::Value* release_value();
  ::google::privacy::dlp::v2beta1::Value* mutable_value();
  void set_allocated_value(::google::privacy::dlp::v2beta1::Value* value);

  // .google.privacy.dlp.v2beta1.RelationalOperator operator = 3;
  void clear_operator_();
  static const int kOperatorFieldNumber = 3;
  ::google::privacy::dlp::v2beta1::RelationalOperator operator_() const;
  void set_operator_(::google::privacy::dlp::v2beta1::RelationalOperator value);

  // @@protoc_insertion_point(class_scope:google.privacy.dlp.v2beta1.RecordCondition.Condition)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::privacy::dlp::v2beta1::FieldId* field_;
  ::google::privacy::dlp::v2beta1::Value* value_;
  int operator__;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::TableStruct;
  friend void ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaultsRecordCondition_ConditionImpl();
};
// -------------------------------------------------------------------

class RecordCondition_Conditions : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.privacy.dlp.v2beta1.RecordCondition.Conditions) */ {
 public:
  RecordCondition_Conditions();
  virtual ~RecordCondition_Conditions();

  RecordCondition_Conditions(const RecordCondition_Conditions& from);

  inline RecordCondition_Conditions& operator=(const RecordCondition_Conditions& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RecordCondition_Conditions(RecordCondition_Conditions&& from) noexcept
    : RecordCondition_Conditions() {
    *this = ::std::move(from);
  }

  inline RecordCondition_Conditions& operator=(RecordCondition_Conditions&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RecordCondition_Conditions& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RecordCondition_Conditions* internal_default_instance() {
    return reinterpret_cast<const RecordCondition_Conditions*>(
               &_RecordCondition_Conditions_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    76;

  void Swap(RecordCondition_Conditions* other);
  friend void swap(RecordCondition_Conditions& a, RecordCondition_Conditions& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RecordCondition_Conditions* New() const PROTOBUF_FINAL { return New(NULL); }

  RecordCondition_Conditions* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const RecordCondition_Conditions& from);
  void MergeFrom(const RecordCondition_Conditions& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(RecordCondition_Conditions* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .google.privacy.dlp.v2beta1.RecordCondition.Condition conditions = 1;
  int conditions_size() const;
  void clear_conditions();
  static const int kConditionsFieldNumber = 1;
  const ::google::privacy::dlp::v2beta1::RecordCondition_Condition& conditions(int index) const;
  ::google::privacy::dlp::v2beta1::RecordCondition_Condition* mutable_conditions(int index);
  ::google::privacy::dlp::v2beta1::RecordCondition_Condition* add_conditions();
  ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2beta1::RecordCondition_Condition >*
      mutable_conditions();
  const ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2beta1::RecordCondition_Condition >&
      conditions() const;

  // @@protoc_insertion_point(class_scope:google.privacy.dlp.v2beta1.RecordCondition.Conditions)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2beta1::RecordCondition_Condition > conditions_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::TableStruct;
  friend void ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaultsRecordCondition_ConditionsImpl();
};
// -------------------------------------------------------------------

class RecordCondition_Expressions : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.privacy.dlp.v2beta1.RecordCondition.Expressions) */ {
 public:
  RecordCondition_Expressions();
  virtual ~RecordCondition_Expressions();

  RecordCondition_Expressions(const RecordCondition_Expressions& from);

  inline RecordCondition_Expressions& operator=(const RecordCondition_Expressions& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RecordCondition_Expressions(RecordCondition_Expressions&& from) noexcept
    : RecordCondition_Expressions() {
    *this = ::std::move(from);
  }

  inline RecordCondition_Expressions& operator=(RecordCondition_Expressions&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RecordCondition_Expressions& default_instance();

  enum TypeCase {
    kConditions = 3,
    TYPE_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RecordCondition_Expressions* internal_default_instance() {
    return reinterpret_cast<const RecordCondition_Expressions*>(
               &_RecordCondition_Expressions_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    77;

  void Swap(RecordCondition_Expressions* other);
  friend void swap(RecordCondition_Expressions& a, RecordCondition_Expressions& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RecordCondition_Expressions* New() const PROTOBUF_FINAL { return New(NULL); }

  RecordCondition_Expressions* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const RecordCondition_Expressions& from);
  void MergeFrom(const RecordCondition_Expressions& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(RecordCondition_Expressions* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef RecordCondition_Expressions_LogicalOperator LogicalOperator;
  static const LogicalOperator LOGICAL_OPERATOR_UNSPECIFIED =
    RecordCondition_Expressions_LogicalOperator_LOGICAL_OPERATOR_UNSPECIFIED;
  static const LogicalOperator AND =
    RecordCondition_Expressions_LogicalOperator_AND;
  static inline bool LogicalOperator_IsValid(int value) {
    return RecordCondition_Expressions_LogicalOperator_IsValid(value);
  }
  static const LogicalOperator LogicalOperator_MIN =
    RecordCondition_Expressions_LogicalOperator_LogicalOperator_MIN;
  static const LogicalOperator LogicalOperator_MAX =
    RecordCondition_Expressions_LogicalOperator_LogicalOperator_MAX;
  static const int LogicalOperator_ARRAYSIZE =
    RecordCondition_Expressions_LogicalOperator_LogicalOperator_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  LogicalOperator_descriptor() {
    return RecordCondition_Expressions_LogicalOperator_descriptor();
  }
  static inline const ::std::string& LogicalOperator_Name(LogicalOperator value) {
    return RecordCondition_Expressions_LogicalOperator_Name(value);
  }
  static inline bool LogicalOperator_Parse(const ::std::string& name,
      LogicalOperator* value) {
    return RecordCondition_Expressions_LogicalOperator_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // .google.privacy.dlp.v2beta1.RecordCondition.Expressions.LogicalOperator logical_operator = 1;
  void clear_logical_operator();
  static const int kLogicalOperatorFieldNumber = 1;
  ::google::privacy::dlp::v2beta1::RecordCondition_Expressions_LogicalOperator logical_operator() const;
  void set_logical_operator(::google::privacy::dlp::v2beta1::RecordCondition_Expressions_LogicalOperator value);

  // .google.privacy.dlp.v2beta1.RecordCondition.Conditions conditions = 3;
  bool has_conditions() const;
  void clear_conditions();
  static const int kConditionsFieldNumber = 3;
  const ::google::privacy::dlp::v2beta1::RecordCondition_Conditions& conditions() const;
  ::google::privacy::dlp::v2beta1::RecordCondition_Conditions* release_conditions();
  ::google::privacy::dlp::v2beta1::RecordCondition_Conditions* mutable_conditions();
  void set_allocated_conditions(::google::privacy::dlp::v2beta1::RecordCondition_Conditions* conditions);

  TypeCase type_case() const;
  // @@protoc_insertion_point(class_scope:google.privacy.dlp.v2beta1.RecordCondition.Expressions)
 private:
  void set_has_conditions();

  inline bool has_type() const;
  void clear_type();
  inline void clear_has_type();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  int logical_operator_;
  union TypeUnion {
    TypeUnion() {}
    ::google::privacy::dlp::v2beta1::RecordCondition_Conditions* conditions_;
  } type_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::TableStruct;
  friend void ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaultsRecordCondition_ExpressionsImpl();
};
// -------------------------------------------------------------------

class RecordCondition : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.privacy.dlp.v2beta1.RecordCondition) */ {
 public:
  RecordCondition();
  virtual ~RecordCondition();

  RecordCondition(const RecordCondition& from);

  inline RecordCondition& operator=(const RecordCondition& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RecordCondition(RecordCondition&& from) noexcept
    : RecordCondition() {
    *this = ::std::move(from);
  }

  inline RecordCondition& operator=(RecordCondition&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RecordCondition& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RecordCondition* internal_default_instance() {
    return reinterpret_cast<const RecordCondition*>(
               &_RecordCondition_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    78;

  void Swap(RecordCondition* other);
  friend void swap(RecordCondition& a, RecordCondition& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RecordCondition* New() const PROTOBUF_FINAL { return New(NULL); }

  RecordCondition* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const RecordCondition& from);
  void MergeFrom(const RecordCondition& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(RecordCondition* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef RecordCondition_Condition Condition;
  typedef RecordCondition_Conditions Conditions;
  typedef RecordCondition_Expressions Expressions;

  // accessors -------------------------------------------------------

  // .google.privacy.dlp.v2beta1.RecordCondition.Expressions expressions = 3;
  bool has_expressions() const;
  void clear_expressions();
  static const int kExpressionsFieldNumber = 3;
  const ::google::privacy::dlp::v2beta1::RecordCondition_Expressions& expressions() const;
  ::google::privacy::dlp::v2beta1::RecordCondition_Expressions* release_expressions();
  ::google::privacy::dlp::v2beta1::RecordCondition_Expressions* mutable_expressions();
  void set_allocated_expressions(::google::privacy::dlp::v2beta1::RecordCondition_Expressions* expressions);

  // @@protoc_insertion_point(class_scope:google.privacy.dlp.v2beta1.RecordCondition)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::privacy::dlp::v2beta1::RecordCondition_Expressions* expressions_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::TableStruct;
  friend void ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaultsRecordConditionImpl();
};
// -------------------------------------------------------------------

class DeidentificationSummary : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.privacy.dlp.v2beta1.DeidentificationSummary) */ {
 public:
  DeidentificationSummary();
  virtual ~DeidentificationSummary();

  DeidentificationSummary(const DeidentificationSummary& from);

  inline DeidentificationSummary& operator=(const DeidentificationSummary& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DeidentificationSummary(DeidentificationSummary&& from) noexcept
    : DeidentificationSummary() {
    *this = ::std::move(from);
  }

  inline DeidentificationSummary& operator=(DeidentificationSummary&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DeidentificationSummary& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeidentificationSummary* internal_default_instance() {
    return reinterpret_cast<const DeidentificationSummary*>(
               &_DeidentificationSummary_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    79;

  void Swap(DeidentificationSummary* other);
  friend void swap(DeidentificationSummary& a, DeidentificationSummary& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DeidentificationSummary* New() const PROTOBUF_FINAL { return New(NULL); }

  DeidentificationSummary* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DeidentificationSummary& from);
  void MergeFrom(const DeidentificationSummary& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DeidentificationSummary* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .google.privacy.dlp.v2beta1.TransformationSummary transformation_summaries = 3;
  int transformation_summaries_size() const;
  void clear_transformation_summaries();
  static const int kTransformationSummariesFieldNumber = 3;
  const ::google::privacy::dlp::v2beta1::TransformationSummary& transformation_summaries(int index) const;
  ::google::privacy::dlp::v2beta1::TransformationSummary* mutable_transformation_summaries(int index);
  ::google::privacy::dlp::v2beta1::TransformationSummary* add_transformation_summaries();
  ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2beta1::TransformationSummary >*
      mutable_transformation_summaries();
  const ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2beta1::TransformationSummary >&
      transformation_summaries() const;

  // int64 transformed_bytes = 2;
  void clear_transformed_bytes();
  static const int kTransformedBytesFieldNumber = 2;
  ::google::protobuf::int64 transformed_bytes() const;
  void set_transformed_bytes(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:google.privacy.dlp.v2beta1.DeidentificationSummary)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2beta1::TransformationSummary > transformation_summaries_;
  ::google::protobuf::int64 transformed_bytes_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::TableStruct;
  friend void ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaultsDeidentificationSummaryImpl();
};
// -------------------------------------------------------------------

class TransformationSummary_SummaryResult : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.privacy.dlp.v2beta1.TransformationSummary.SummaryResult) */ {
 public:
  TransformationSummary_SummaryResult();
  virtual ~TransformationSummary_SummaryResult();

  TransformationSummary_SummaryResult(const TransformationSummary_SummaryResult& from);

  inline TransformationSummary_SummaryResult& operator=(const TransformationSummary_SummaryResult& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TransformationSummary_SummaryResult(TransformationSummary_SummaryResult&& from) noexcept
    : TransformationSummary_SummaryResult() {
    *this = ::std::move(from);
  }

  inline TransformationSummary_SummaryResult& operator=(TransformationSummary_SummaryResult&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const TransformationSummary_SummaryResult& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TransformationSummary_SummaryResult* internal_default_instance() {
    return reinterpret_cast<const TransformationSummary_SummaryResult*>(
               &_TransformationSummary_SummaryResult_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    80;

  void Swap(TransformationSummary_SummaryResult* other);
  friend void swap(TransformationSummary_SummaryResult& a, TransformationSummary_SummaryResult& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TransformationSummary_SummaryResult* New() const PROTOBUF_FINAL { return New(NULL); }

  TransformationSummary_SummaryResult* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const TransformationSummary_SummaryResult& from);
  void MergeFrom(const TransformationSummary_SummaryResult& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TransformationSummary_SummaryResult* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string details = 3;
  void clear_details();
  static const int kDetailsFieldNumber = 3;
  const ::std::string& details() const;
  void set_details(const ::std::string& value);
  #if LANG_CXX11
  void set_details(::std::string&& value);
  #endif
  void set_details(const char* value);
  void set_details(const char* value, size_t size);
  ::std::string* mutable_details();
  ::std::string* release_details();
  void set_allocated_details(::std::string* details);

  // int64 count = 1;
  void clear_count();
  static const int kCountFieldNumber = 1;
  ::google::protobuf::int64 count() const;
  void set_count(::google::protobuf::int64 value);

  // .google.privacy.dlp.v2beta1.TransformationSummary.TransformationResultCode code = 2;
  void clear_code();
  static const int kCodeFieldNumber = 2;
  ::google::privacy::dlp::v2beta1::TransformationSummary_TransformationResultCode code() const;
  void set_code(::google::privacy::dlp::v2beta1::TransformationSummary_TransformationResultCode value);

  // @@protoc_insertion_point(class_scope:google.privacy.dlp.v2beta1.TransformationSummary.SummaryResult)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr details_;
  ::google::protobuf::int64 count_;
  int code_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::TableStruct;
  friend void ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaultsTransformationSummary_SummaryResultImpl();
};
// -------------------------------------------------------------------

class TransformationSummary : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.privacy.dlp.v2beta1.TransformationSummary) */ {
 public:
  TransformationSummary();
  virtual ~TransformationSummary();

  TransformationSummary(const TransformationSummary& from);

  inline TransformationSummary& operator=(const TransformationSummary& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TransformationSummary(TransformationSummary&& from) noexcept
    : TransformationSummary() {
    *this = ::std::move(from);
  }

  inline TransformationSummary& operator=(TransformationSummary&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const TransformationSummary& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TransformationSummary* internal_default_instance() {
    return reinterpret_cast<const TransformationSummary*>(
               &_TransformationSummary_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    81;

  void Swap(TransformationSummary* other);
  friend void swap(TransformationSummary& a, TransformationSummary& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TransformationSummary* New() const PROTOBUF_FINAL { return New(NULL); }

  TransformationSummary* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const TransformationSummary& from);
  void MergeFrom(const TransformationSummary& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TransformationSummary* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef TransformationSummary_SummaryResult SummaryResult;

  typedef TransformationSummary_TransformationResultCode TransformationResultCode;
  static const TransformationResultCode TRANSFORMATION_RESULT_CODE_UNSPECIFIED =
    TransformationSummary_TransformationResultCode_TRANSFORMATION_RESULT_CODE_UNSPECIFIED;
  static const TransformationResultCode SUCCESS =
    TransformationSummary_TransformationResultCode_SUCCESS;
  static const TransformationResultCode ERROR =
    TransformationSummary_TransformationResultCode_ERROR;
  static inline bool TransformationResultCode_IsValid(int value) {
    return TransformationSummary_TransformationResultCode_IsValid(value);
  }
  static const TransformationResultCode TransformationResultCode_MIN =
    TransformationSummary_TransformationResultCode_TransformationResultCode_MIN;
  static const TransformationResultCode TransformationResultCode_MAX =
    TransformationSummary_TransformationResultCode_TransformationResultCode_MAX;
  static const int TransformationResultCode_ARRAYSIZE =
    TransformationSummary_TransformationResultCode_TransformationResultCode_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  TransformationResultCode_descriptor() {
    return TransformationSummary_TransformationResultCode_descriptor();
  }
  static inline const ::std::string& TransformationResultCode_Name(TransformationResultCode value) {
    return TransformationSummary_TransformationResultCode_Name(value);
  }
  static inline bool TransformationResultCode_Parse(const ::std::string& name,
      TransformationResultCode* value) {
    return TransformationSummary_TransformationResultCode_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated .google.privacy.dlp.v2beta1.TransformationSummary.SummaryResult results = 4;
  int results_size() const;
  void clear_results();
  static const int kResultsFieldNumber = 4;
  const ::google::privacy::dlp::v2beta1::TransformationSummary_SummaryResult& results(int index) const;
  ::google::privacy::dlp::v2beta1::TransformationSummary_SummaryResult* mutable_results(int index);
  ::google::privacy::dlp::v2beta1::TransformationSummary_SummaryResult* add_results();
  ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2beta1::TransformationSummary_SummaryResult >*
      mutable_results();
  const ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2beta1::TransformationSummary_SummaryResult >&
      results() const;

  // repeated .google.privacy.dlp.v2beta1.FieldTransformation field_transformations = 5;
  int field_transformations_size() const;
  void clear_field_transformations();
  static const int kFieldTransformationsFieldNumber = 5;
  const ::google::privacy::dlp::v2beta1::FieldTransformation& field_transformations(int index) const;
  ::google::privacy::dlp::v2beta1::FieldTransformation* mutable_field_transformations(int index);
  ::google::privacy::dlp::v2beta1::FieldTransformation* add_field_transformations();
  ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2beta1::FieldTransformation >*
      mutable_field_transformations();
  const ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2beta1::FieldTransformation >&
      field_transformations() const;

  // .google.privacy.dlp.v2beta1.InfoType info_type = 1;
  bool has_info_type() const;
  void clear_info_type();
  static const int kInfoTypeFieldNumber = 1;
  const ::google::privacy::dlp::v2beta1::InfoType& info_type() const;
  ::google::privacy::dlp::v2beta1::InfoType* release_info_type();
  ::google::privacy::dlp::v2beta1::InfoType* mutable_info_type();
  void set_allocated_info_type(::google::privacy::dlp::v2beta1::InfoType* info_type);

  // .google.privacy.dlp.v2beta1.FieldId field = 2;
  bool has_field() const;
  void clear_field();
  static const int kFieldFieldNumber = 2;
  const ::google::privacy::dlp::v2beta1::FieldId& field() const;
  ::google::privacy::dlp::v2beta1::FieldId* release_field();
  ::google::privacy::dlp::v2beta1::FieldId* mutable_field();
  void set_allocated_field(::google::privacy::dlp::v2beta1::FieldId* field);

  // .google.privacy.dlp.v2beta1.PrimitiveTransformation transformation = 3;
  bool has_transformation() const;
  void clear_transformation();
  static const int kTransformationFieldNumber = 3;
  const ::google::privacy::dlp::v2beta1::PrimitiveTransformation& transformation() const;
  ::google::privacy::dlp::v2beta1::PrimitiveTransformation* release_transformation();
  ::google::privacy::dlp::v2beta1::PrimitiveTransformation* mutable_transformation();
  void set_allocated_transformation(::google::privacy::dlp::v2beta1::PrimitiveTransformation* transformation);

  // .google.privacy.dlp.v2beta1.RecordSuppression record_suppress = 6;
  bool has_record_suppress() const;
  void clear_record_suppress();
  static const int kRecordSuppressFieldNumber = 6;
  const ::google::privacy::dlp::v2beta1::RecordSuppression& record_suppress() const;
  ::google::privacy::dlp::v2beta1::RecordSuppression* release_record_suppress();
  ::google::privacy::dlp::v2beta1::RecordSuppression* mutable_record_suppress();
  void set_allocated_record_suppress(::google::privacy::dlp::v2beta1::RecordSuppression* record_suppress);

  // @@protoc_insertion_point(class_scope:google.privacy.dlp.v2beta1.TransformationSummary)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2beta1::TransformationSummary_SummaryResult > results_;
  ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2beta1::FieldTransformation > field_transformations_;
  ::google::privacy::dlp::v2beta1::InfoType* info_type_;
  ::google::privacy::dlp::v2beta1::FieldId* field_;
  ::google::privacy::dlp::v2beta1::PrimitiveTransformation* transformation_;
  ::google::privacy::dlp::v2beta1::RecordSuppression* record_suppress_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::TableStruct;
  friend void ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaultsTransformationSummaryImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// InspectConfig_InfoTypeLimit

// .google.privacy.dlp.v2beta1.InfoType info_type = 1;
inline bool InspectConfig_InfoTypeLimit::has_info_type() const {
  return this != internal_default_instance() && info_type_ != NULL;
}
inline const ::google::privacy::dlp::v2beta1::InfoType& InspectConfig_InfoTypeLimit::info_type() const {
  const ::google::privacy::dlp::v2beta1::InfoType* p = info_type_;
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2beta1.InspectConfig.InfoTypeLimit.info_type)
  return p != NULL ? *p : *reinterpret_cast<const ::google::privacy::dlp::v2beta1::InfoType*>(
      &::google::privacy::dlp::v2beta1::_InfoType_default_instance_);
}
inline ::google::privacy::dlp::v2beta1::InfoType* InspectConfig_InfoTypeLimit::release_info_type() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2beta1.InspectConfig.InfoTypeLimit.info_type)
  
  ::google::privacy::dlp::v2beta1::InfoType* temp = info_type_;
  info_type_ = NULL;
  return temp;
}
inline ::google::privacy::dlp::v2beta1::InfoType* InspectConfig_InfoTypeLimit::mutable_info_type() {
  
  if (info_type_ == NULL) {
    info_type_ = new ::google::privacy::dlp::v2beta1::InfoType;
  }
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2beta1.InspectConfig.InfoTypeLimit.info_type)
  return info_type_;
}
inline void InspectConfig_InfoTypeLimit::set_allocated_info_type(::google::privacy::dlp::v2beta1::InfoType* info_type) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(info_type_);
  }
  if (info_type) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      info_type = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, info_type, submessage_arena);
    }
    
  } else {
    
  }
  info_type_ = info_type;
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2beta1.InspectConfig.InfoTypeLimit.info_type)
}

// int32 max_findings = 2;
inline void InspectConfig_InfoTypeLimit::clear_max_findings() {
  max_findings_ = 0;
}
inline ::google::protobuf::int32 InspectConfig_InfoTypeLimit::max_findings() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2beta1.InspectConfig.InfoTypeLimit.max_findings)
  return max_findings_;
}
inline void InspectConfig_InfoTypeLimit::set_max_findings(::google::protobuf::int32 value) {
  
  max_findings_ = value;
  // @@protoc_insertion_point(field_set:google.privacy.dlp.v2beta1.InspectConfig.InfoTypeLimit.max_findings)
}

// -------------------------------------------------------------------

// InspectConfig

// repeated .google.privacy.dlp.v2beta1.InfoType info_types = 1;
inline int InspectConfig::info_types_size() const {
  return info_types_.size();
}
inline const ::google::privacy::dlp::v2beta1::InfoType& InspectConfig::info_types(int index) const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2beta1.InspectConfig.info_types)
  return info_types_.Get(index);
}
inline ::google::privacy::dlp::v2beta1::InfoType* InspectConfig::mutable_info_types(int index) {
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2beta1.InspectConfig.info_types)
  return info_types_.Mutable(index);
}
inline ::google::privacy::dlp::v2beta1::InfoType* InspectConfig::add_info_types() {
  // @@protoc_insertion_point(field_add:google.privacy.dlp.v2beta1.InspectConfig.info_types)
  return info_types_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2beta1::InfoType >*
InspectConfig::mutable_info_types() {
  // @@protoc_insertion_point(field_mutable_list:google.privacy.dlp.v2beta1.InspectConfig.info_types)
  return &info_types_;
}
inline const ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2beta1::InfoType >&
InspectConfig::info_types() const {
  // @@protoc_insertion_point(field_list:google.privacy.dlp.v2beta1.InspectConfig.info_types)
  return info_types_;
}

// .google.privacy.dlp.v2beta1.Likelihood min_likelihood = 2;
inline void InspectConfig::clear_min_likelihood() {
  min_likelihood_ = 0;
}
inline ::google::privacy::dlp::v2beta1::Likelihood InspectConfig::min_likelihood() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2beta1.InspectConfig.min_likelihood)
  return static_cast< ::google::privacy::dlp::v2beta1::Likelihood >(min_likelihood_);
}
inline void InspectConfig::set_min_likelihood(::google::privacy::dlp::v2beta1::Likelihood value) {
  
  min_likelihood_ = value;
  // @@protoc_insertion_point(field_set:google.privacy.dlp.v2beta1.InspectConfig.min_likelihood)
}

// int32 max_findings = 3;
inline void InspectConfig::clear_max_findings() {
  max_findings_ = 0;
}
inline ::google::protobuf::int32 InspectConfig::max_findings() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2beta1.InspectConfig.max_findings)
  return max_findings_;
}
inline void InspectConfig::set_max_findings(::google::protobuf::int32 value) {
  
  max_findings_ = value;
  // @@protoc_insertion_point(field_set:google.privacy.dlp.v2beta1.InspectConfig.max_findings)
}

// bool include_quote = 4;
inline void InspectConfig::clear_include_quote() {
  include_quote_ = false;
}
inline bool InspectConfig::include_quote() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2beta1.InspectConfig.include_quote)
  return include_quote_;
}
inline void InspectConfig::set_include_quote(bool value) {
  
  include_quote_ = value;
  // @@protoc_insertion_point(field_set:google.privacy.dlp.v2beta1.InspectConfig.include_quote)
}

// bool exclude_types = 6;
inline void InspectConfig::clear_exclude_types() {
  exclude_types_ = false;
}
inline bool InspectConfig::exclude_types() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2beta1.InspectConfig.exclude_types)
  return exclude_types_;
}
inline void InspectConfig::set_exclude_types(bool value) {
  
  exclude_types_ = value;
  // @@protoc_insertion_point(field_set:google.privacy.dlp.v2beta1.InspectConfig.exclude_types)
}

// repeated .google.privacy.dlp.v2beta1.InspectConfig.InfoTypeLimit info_type_limits = 7;
inline int InspectConfig::info_type_limits_size() const {
  return info_type_limits_.size();
}
inline void InspectConfig::clear_info_type_limits() {
  info_type_limits_.Clear();
}
inline const ::google::privacy::dlp::v2beta1::InspectConfig_InfoTypeLimit& InspectConfig::info_type_limits(int index) const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2beta1.InspectConfig.info_type_limits)
  return info_type_limits_.Get(index);
}
inline ::google::privacy::dlp::v2beta1::InspectConfig_InfoTypeLimit* InspectConfig::mutable_info_type_limits(int index) {
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2beta1.InspectConfig.info_type_limits)
  return info_type_limits_.Mutable(index);
}
inline ::google::privacy::dlp::v2beta1::InspectConfig_InfoTypeLimit* InspectConfig::add_info_type_limits() {
  // @@protoc_insertion_point(field_add:google.privacy.dlp.v2beta1.InspectConfig.info_type_limits)
  return info_type_limits_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2beta1::InspectConfig_InfoTypeLimit >*
InspectConfig::mutable_info_type_limits() {
  // @@protoc_insertion_point(field_mutable_list:google.privacy.dlp.v2beta1.InspectConfig.info_type_limits)
  return &info_type_limits_;
}
inline const ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2beta1::InspectConfig_InfoTypeLimit >&
InspectConfig::info_type_limits() const {
  // @@protoc_insertion_point(field_list:google.privacy.dlp.v2beta1.InspectConfig.info_type_limits)
  return info_type_limits_;
}

// -------------------------------------------------------------------

// OperationConfig

// int64 max_item_findings = 1;
inline void OperationConfig::clear_max_item_findings() {
  max_item_findings_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 OperationConfig::max_item_findings() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2beta1.OperationConfig.max_item_findings)
  return max_item_findings_;
}
inline void OperationConfig::set_max_item_findings(::google::protobuf::int64 value) {
  
  max_item_findings_ = value;
  // @@protoc_insertion_point(field_set:google.privacy.dlp.v2beta1.OperationConfig.max_item_findings)
}

// -------------------------------------------------------------------

// ContentItem

// string type = 1;
inline void ContentItem::clear_type() {
  type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ContentItem::type() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2beta1.ContentItem.type)
  return type_.GetNoArena();
}
inline void ContentItem::set_type(const ::std::string& value) {
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.privacy.dlp.v2beta1.ContentItem.type)
}
#if LANG_CXX11
inline void ContentItem::set_type(::std::string&& value) {
  
  type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.privacy.dlp.v2beta1.ContentItem.type)
}
#endif
inline void ContentItem::set_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.privacy.dlp.v2beta1.ContentItem.type)
}
inline void ContentItem::set_type(const char* value, size_t size) {
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.privacy.dlp.v2beta1.ContentItem.type)
}
inline ::std::string* ContentItem::mutable_type() {
  
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2beta1.ContentItem.type)
  return type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ContentItem::release_type() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2beta1.ContentItem.type)
  
  return type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ContentItem::set_allocated_type(::std::string* type) {
  if (type != NULL) {
    
  } else {
    
  }
  type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), type);
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2beta1.ContentItem.type)
}

// bytes data = 2;
inline bool ContentItem::has_data() const {
  return data_item_case() == kData;
}
inline void ContentItem::set_has_data() {
  _oneof_case_[0] = kData;
}
inline void ContentItem::clear_data() {
  if (has_data()) {
    data_item_.data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_data_item();
  }
}
inline const ::std::string& ContentItem::data() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2beta1.ContentItem.data)
  if (has_data()) {
    return data_item_.data_.GetNoArena();
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
inline void ContentItem::set_data(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:google.privacy.dlp.v2beta1.ContentItem.data)
  if (!has_data()) {
    clear_data_item();
    set_has_data();
    data_item_.data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  data_item_.data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.privacy.dlp.v2beta1.ContentItem.data)
}
#if LANG_CXX11
inline void ContentItem::set_data(::std::string&& value) {
  // @@protoc_insertion_point(field_set:google.privacy.dlp.v2beta1.ContentItem.data)
  if (!has_data()) {
    clear_data_item();
    set_has_data();
    data_item_.data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  data_item_.data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.privacy.dlp.v2beta1.ContentItem.data)
}
#endif
inline void ContentItem::set_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  if (!has_data()) {
    clear_data_item();
    set_has_data();
    data_item_.data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  data_item_.data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.privacy.dlp.v2beta1.ContentItem.data)
}
inline void ContentItem::set_data(const void* value, size_t size) {
  if (!has_data()) {
    clear_data_item();
    set_has_data();
    data_item_.data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  data_item_.data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.privacy.dlp.v2beta1.ContentItem.data)
}
inline ::std::string* ContentItem::mutable_data() {
  if (!has_data()) {
    clear_data_item();
    set_has_data();
    data_item_.data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2beta1.ContentItem.data)
  return data_item_.data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ContentItem::release_data() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2beta1.ContentItem.data)
  if (has_data()) {
    clear_has_data_item();
    return data_item_.data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
inline void ContentItem::set_allocated_data(::std::string* data) {
  if (!has_data()) {
    data_item_.data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_data_item();
  if (data != NULL) {
    set_has_data();
    data_item_.data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        data);
  }
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2beta1.ContentItem.data)
}

// string value = 3;
inline bool ContentItem::has_value() const {
  return data_item_case() == kValue;
}
inline void ContentItem::set_has_value() {
  _oneof_case_[0] = kValue;
}
inline void ContentItem::clear_value() {
  if (has_value()) {
    data_item_.value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_data_item();
  }
}
inline const ::std::string& ContentItem::value() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2beta1.ContentItem.value)
  if (has_value()) {
    return data_item_.value_.GetNoArena();
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
inline void ContentItem::set_value(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:google.privacy.dlp.v2beta1.ContentItem.value)
  if (!has_value()) {
    clear_data_item();
    set_has_value();
    data_item_.value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  data_item_.value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.privacy.dlp.v2beta1.ContentItem.value)
}
#if LANG_CXX11
inline void ContentItem::set_value(::std::string&& value) {
  // @@protoc_insertion_point(field_set:google.privacy.dlp.v2beta1.ContentItem.value)
  if (!has_value()) {
    clear_data_item();
    set_has_value();
    data_item_.value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  data_item_.value_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.privacy.dlp.v2beta1.ContentItem.value)
}
#endif
inline void ContentItem::set_value(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  if (!has_value()) {
    clear_data_item();
    set_has_value();
    data_item_.value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  data_item_.value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.privacy.dlp.v2beta1.ContentItem.value)
}
inline void ContentItem::set_value(const char* value, size_t size) {
  if (!has_value()) {
    clear_data_item();
    set_has_value();
    data_item_.value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  data_item_.value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.privacy.dlp.v2beta1.ContentItem.value)
}
inline ::std::string* ContentItem::mutable_value() {
  if (!has_value()) {
    clear_data_item();
    set_has_value();
    data_item_.value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2beta1.ContentItem.value)
  return data_item_.value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ContentItem::release_value() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2beta1.ContentItem.value)
  if (has_value()) {
    clear_has_data_item();
    return data_item_.value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
inline void ContentItem::set_allocated_value(::std::string* value) {
  if (!has_value()) {
    data_item_.value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_data_item();
  if (value != NULL) {
    set_has_value();
    data_item_.value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        value);
  }
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2beta1.ContentItem.value)
}

// .google.privacy.dlp.v2beta1.Table table = 4;
inline bool ContentItem::has_table() const {
  return data_item_case() == kTable;
}
inline void ContentItem::set_has_table() {
  _oneof_case_[0] = kTable;
}
inline void ContentItem::clear_table() {
  if (has_table()) {
    delete data_item_.table_;
    clear_has_data_item();
  }
}
inline ::google::privacy::dlp::v2beta1::Table* ContentItem::release_table() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2beta1.ContentItem.table)
  if (has_table()) {
    clear_has_data_item();
      ::google::privacy::dlp::v2beta1::Table* temp = data_item_.table_;
    data_item_.table_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::privacy::dlp::v2beta1::Table& ContentItem::table() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2beta1.ContentItem.table)
  return has_table()
      ? *data_item_.table_
      : *reinterpret_cast< ::google::privacy::dlp::v2beta1::Table*>(&::google::privacy::dlp::v2beta1::_Table_default_instance_);
}
inline ::google::privacy::dlp::v2beta1::Table* ContentItem::mutable_table() {
  if (!has_table()) {
    clear_data_item();
    set_has_table();
    data_item_.table_ = new ::google::privacy::dlp::v2beta1::Table;
  }
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2beta1.ContentItem.table)
  return data_item_.table_;
}

inline bool ContentItem::has_data_item() const {
  return data_item_case() != DATA_ITEM_NOT_SET;
}
inline void ContentItem::clear_has_data_item() {
  _oneof_case_[0] = DATA_ITEM_NOT_SET;
}
inline ContentItem::DataItemCase ContentItem::data_item_case() const {
  return ContentItem::DataItemCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// Table_Row

// repeated .google.privacy.dlp.v2beta1.Value values = 1;
inline int Table_Row::values_size() const {
  return values_.size();
}
inline void Table_Row::clear_values() {
  values_.Clear();
}
inline const ::google::privacy::dlp::v2beta1::Value& Table_Row::values(int index) const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2beta1.Table.Row.values)
  return values_.Get(index);
}
inline ::google::privacy::dlp::v2beta1::Value* Table_Row::mutable_values(int index) {
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2beta1.Table.Row.values)
  return values_.Mutable(index);
}
inline ::google::privacy::dlp::v2beta1::Value* Table_Row::add_values() {
  // @@protoc_insertion_point(field_add:google.privacy.dlp.v2beta1.Table.Row.values)
  return values_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2beta1::Value >*
Table_Row::mutable_values() {
  // @@protoc_insertion_point(field_mutable_list:google.privacy.dlp.v2beta1.Table.Row.values)
  return &values_;
}
inline const ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2beta1::Value >&
Table_Row::values() const {
  // @@protoc_insertion_point(field_list:google.privacy.dlp.v2beta1.Table.Row.values)
  return values_;
}

// -------------------------------------------------------------------

// Table

// repeated .google.privacy.dlp.v2beta1.FieldId headers = 1;
inline int Table::headers_size() const {
  return headers_.size();
}
inline const ::google::privacy::dlp::v2beta1::FieldId& Table::headers(int index) const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2beta1.Table.headers)
  return headers_.Get(index);
}
inline ::google::privacy::dlp::v2beta1::FieldId* Table::mutable_headers(int index) {
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2beta1.Table.headers)
  return headers_.Mutable(index);
}
inline ::google::privacy::dlp::v2beta1::FieldId* Table::add_headers() {
  // @@protoc_insertion_point(field_add:google.privacy.dlp.v2beta1.Table.headers)
  return headers_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2beta1::FieldId >*
Table::mutable_headers() {
  // @@protoc_insertion_point(field_mutable_list:google.privacy.dlp.v2beta1.Table.headers)
  return &headers_;
}
inline const ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2beta1::FieldId >&
Table::headers() const {
  // @@protoc_insertion_point(field_list:google.privacy.dlp.v2beta1.Table.headers)
  return headers_;
}

// repeated .google.privacy.dlp.v2beta1.Table.Row rows = 2;
inline int Table::rows_size() const {
  return rows_.size();
}
inline void Table::clear_rows() {
  rows_.Clear();
}
inline const ::google::privacy::dlp::v2beta1::Table_Row& Table::rows(int index) const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2beta1.Table.rows)
  return rows_.Get(index);
}
inline ::google::privacy::dlp::v2beta1::Table_Row* Table::mutable_rows(int index) {
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2beta1.Table.rows)
  return rows_.Mutable(index);
}
inline ::google::privacy::dlp::v2beta1::Table_Row* Table::add_rows() {
  // @@protoc_insertion_point(field_add:google.privacy.dlp.v2beta1.Table.rows)
  return rows_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2beta1::Table_Row >*
Table::mutable_rows() {
  // @@protoc_insertion_point(field_mutable_list:google.privacy.dlp.v2beta1.Table.rows)
  return &rows_;
}
inline const ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2beta1::Table_Row >&
Table::rows() const {
  // @@protoc_insertion_point(field_list:google.privacy.dlp.v2beta1.Table.rows)
  return rows_;
}

// -------------------------------------------------------------------

// InspectResult

// repeated .google.privacy.dlp.v2beta1.Finding findings = 1;
inline int InspectResult::findings_size() const {
  return findings_.size();
}
inline void InspectResult::clear_findings() {
  findings_.Clear();
}
inline const ::google::privacy::dlp::v2beta1::Finding& InspectResult::findings(int index) const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2beta1.InspectResult.findings)
  return findings_.Get(index);
}
inline ::google::privacy::dlp::v2beta1::Finding* InspectResult::mutable_findings(int index) {
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2beta1.InspectResult.findings)
  return findings_.Mutable(index);
}
inline ::google::privacy::dlp::v2beta1::Finding* InspectResult::add_findings() {
  // @@protoc_insertion_point(field_add:google.privacy.dlp.v2beta1.InspectResult.findings)
  return findings_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2beta1::Finding >*
InspectResult::mutable_findings() {
  // @@protoc_insertion_point(field_mutable_list:google.privacy.dlp.v2beta1.InspectResult.findings)
  return &findings_;
}
inline const ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2beta1::Finding >&
InspectResult::findings() const {
  // @@protoc_insertion_point(field_list:google.privacy.dlp.v2beta1.InspectResult.findings)
  return findings_;
}

// bool findings_truncated = 2;
inline void InspectResult::clear_findings_truncated() {
  findings_truncated_ = false;
}
inline bool InspectResult::findings_truncated() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2beta1.InspectResult.findings_truncated)
  return findings_truncated_;
}
inline void InspectResult::set_findings_truncated(bool value) {
  
  findings_truncated_ = value;
  // @@protoc_insertion_point(field_set:google.privacy.dlp.v2beta1.InspectResult.findings_truncated)
}

// -------------------------------------------------------------------

// Finding

// string quote = 1;
inline void Finding::clear_quote() {
  quote_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Finding::quote() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2beta1.Finding.quote)
  return quote_.GetNoArena();
}
inline void Finding::set_quote(const ::std::string& value) {
  
  quote_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.privacy.dlp.v2beta1.Finding.quote)
}
#if LANG_CXX11
inline void Finding::set_quote(::std::string&& value) {
  
  quote_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.privacy.dlp.v2beta1.Finding.quote)
}
#endif
inline void Finding::set_quote(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  quote_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.privacy.dlp.v2beta1.Finding.quote)
}
inline void Finding::set_quote(const char* value, size_t size) {
  
  quote_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.privacy.dlp.v2beta1.Finding.quote)
}
inline ::std::string* Finding::mutable_quote() {
  
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2beta1.Finding.quote)
  return quote_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Finding::release_quote() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2beta1.Finding.quote)
  
  return quote_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Finding::set_allocated_quote(::std::string* quote) {
  if (quote != NULL) {
    
  } else {
    
  }
  quote_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), quote);
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2beta1.Finding.quote)
}

// .google.privacy.dlp.v2beta1.InfoType info_type = 2;
inline bool Finding::has_info_type() const {
  return this != internal_default_instance() && info_type_ != NULL;
}
inline const ::google::privacy::dlp::v2beta1::InfoType& Finding::info_type() const {
  const ::google::privacy::dlp::v2beta1::InfoType* p = info_type_;
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2beta1.Finding.info_type)
  return p != NULL ? *p : *reinterpret_cast<const ::google::privacy::dlp::v2beta1::InfoType*>(
      &::google::privacy::dlp::v2beta1::_InfoType_default_instance_);
}
inline ::google::privacy::dlp::v2beta1::InfoType* Finding::release_info_type() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2beta1.Finding.info_type)
  
  ::google::privacy::dlp::v2beta1::InfoType* temp = info_type_;
  info_type_ = NULL;
  return temp;
}
inline ::google::privacy::dlp::v2beta1::InfoType* Finding::mutable_info_type() {
  
  if (info_type_ == NULL) {
    info_type_ = new ::google::privacy::dlp::v2beta1::InfoType;
  }
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2beta1.Finding.info_type)
  return info_type_;
}
inline void Finding::set_allocated_info_type(::google::privacy::dlp::v2beta1::InfoType* info_type) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(info_type_);
  }
  if (info_type) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      info_type = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, info_type, submessage_arena);
    }
    
  } else {
    
  }
  info_type_ = info_type;
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2beta1.Finding.info_type)
}

// .google.privacy.dlp.v2beta1.Likelihood likelihood = 3;
inline void Finding::clear_likelihood() {
  likelihood_ = 0;
}
inline ::google::privacy::dlp::v2beta1::Likelihood Finding::likelihood() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2beta1.Finding.likelihood)
  return static_cast< ::google::privacy::dlp::v2beta1::Likelihood >(likelihood_);
}
inline void Finding::set_likelihood(::google::privacy::dlp::v2beta1::Likelihood value) {
  
  likelihood_ = value;
  // @@protoc_insertion_point(field_set:google.privacy.dlp.v2beta1.Finding.likelihood)
}

// .google.privacy.dlp.v2beta1.Location location = 4;
inline bool Finding::has_location() const {
  return this != internal_default_instance() && location_ != NULL;
}
inline void Finding::clear_location() {
  if (GetArenaNoVirtual() == NULL && location_ != NULL) {
    delete location_;
  }
  location_ = NULL;
}
inline const ::google::privacy::dlp::v2beta1::Location& Finding::location() const {
  const ::google::privacy::dlp::v2beta1::Location* p = location_;
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2beta1.Finding.location)
  return p != NULL ? *p : *reinterpret_cast<const ::google::privacy::dlp::v2beta1::Location*>(
      &::google::privacy::dlp::v2beta1::_Location_default_instance_);
}
inline ::google::privacy::dlp::v2beta1::Location* Finding::release_location() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2beta1.Finding.location)
  
  ::google::privacy::dlp::v2beta1::Location* temp = location_;
  location_ = NULL;
  return temp;
}
inline ::google::privacy::dlp::v2beta1::Location* Finding::mutable_location() {
  
  if (location_ == NULL) {
    location_ = new ::google::privacy::dlp::v2beta1::Location;
  }
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2beta1.Finding.location)
  return location_;
}
inline void Finding::set_allocated_location(::google::privacy::dlp::v2beta1::Location* location) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete location_;
  }
  if (location) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      location = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, location, submessage_arena);
    }
    
  } else {
    
  }
  location_ = location;
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2beta1.Finding.location)
}

// .google.protobuf.Timestamp create_time = 6;
inline bool Finding::has_create_time() const {
  return this != internal_default_instance() && create_time_ != NULL;
}
inline const ::google::protobuf::Timestamp& Finding::create_time() const {
  const ::google::protobuf::Timestamp* p = create_time_;
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2beta1.Finding.create_time)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::Timestamp*>(
      &::google::protobuf::_Timestamp_default_instance_);
}
inline ::google::protobuf::Timestamp* Finding::release_create_time() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2beta1.Finding.create_time)
  
  ::google::protobuf::Timestamp* temp = create_time_;
  create_time_ = NULL;
  return temp;
}
inline ::google::protobuf::Timestamp* Finding::mutable_create_time() {
  
  if (create_time_ == NULL) {
    create_time_ = new ::google::protobuf::Timestamp;
  }
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2beta1.Finding.create_time)
  return create_time_;
}
inline void Finding::set_allocated_create_time(::google::protobuf::Timestamp* create_time) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(create_time_);
  }
  if (create_time) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast< ::google::protobuf::MessageLite*>(create_time)->GetArena();
    if (message_arena != submessage_arena) {
      create_time = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, create_time, submessage_arena);
    }
    
  } else {
    
  }
  create_time_ = create_time;
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2beta1.Finding.create_time)
}

// -------------------------------------------------------------------

// Location

// .google.privacy.dlp.v2beta1.Range byte_range = 1;
inline bool Location::has_byte_range() const {
  return this != internal_default_instance() && byte_range_ != NULL;
}
inline void Location::clear_byte_range() {
  if (GetArenaNoVirtual() == NULL && byte_range_ != NULL) {
    delete byte_range_;
  }
  byte_range_ = NULL;
}
inline const ::google::privacy::dlp::v2beta1::Range& Location::byte_range() const {
  const ::google::privacy::dlp::v2beta1::Range* p = byte_range_;
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2beta1.Location.byte_range)
  return p != NULL ? *p : *reinterpret_cast<const ::google::privacy::dlp::v2beta1::Range*>(
      &::google::privacy::dlp::v2beta1::_Range_default_instance_);
}
inline ::google::privacy::dlp::v2beta1::Range* Location::release_byte_range() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2beta1.Location.byte_range)
  
  ::google::privacy::dlp::v2beta1::Range* temp = byte_range_;
  byte_range_ = NULL;
  return temp;
}
inline ::google::privacy::dlp::v2beta1::Range* Location::mutable_byte_range() {
  
  if (byte_range_ == NULL) {
    byte_range_ = new ::google::privacy::dlp::v2beta1::Range;
  }
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2beta1.Location.byte_range)
  return byte_range_;
}
inline void Location::set_allocated_byte_range(::google::privacy::dlp::v2beta1::Range* byte_range) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete byte_range_;
  }
  if (byte_range) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      byte_range = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, byte_range, submessage_arena);
    }
    
  } else {
    
  }
  byte_range_ = byte_range;
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2beta1.Location.byte_range)
}

// .google.privacy.dlp.v2beta1.Range codepoint_range = 2;
inline bool Location::has_codepoint_range() const {
  return this != internal_default_instance() && codepoint_range_ != NULL;
}
inline void Location::clear_codepoint_range() {
  if (GetArenaNoVirtual() == NULL && codepoint_range_ != NULL) {
    delete codepoint_range_;
  }
  codepoint_range_ = NULL;
}
inline const ::google::privacy::dlp::v2beta1::Range& Location::codepoint_range() const {
  const ::google::privacy::dlp::v2beta1::Range* p = codepoint_range_;
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2beta1.Location.codepoint_range)
  return p != NULL ? *p : *reinterpret_cast<const ::google::privacy::dlp::v2beta1::Range*>(
      &::google::privacy::dlp::v2beta1::_Range_default_instance_);
}
inline ::google::privacy::dlp::v2beta1::Range* Location::release_codepoint_range() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2beta1.Location.codepoint_range)
  
  ::google::privacy::dlp::v2beta1::Range* temp = codepoint_range_;
  codepoint_range_ = NULL;
  return temp;
}
inline ::google::privacy::dlp::v2beta1::Range* Location::mutable_codepoint_range() {
  
  if (codepoint_range_ == NULL) {
    codepoint_range_ = new ::google::privacy::dlp::v2beta1::Range;
  }
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2beta1.Location.codepoint_range)
  return codepoint_range_;
}
inline void Location::set_allocated_codepoint_range(::google::privacy::dlp::v2beta1::Range* codepoint_range) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete codepoint_range_;
  }
  if (codepoint_range) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      codepoint_range = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, codepoint_range, submessage_arena);
    }
    
  } else {
    
  }
  codepoint_range_ = codepoint_range;
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2beta1.Location.codepoint_range)
}

// repeated .google.privacy.dlp.v2beta1.ImageLocation image_boxes = 3;
inline int Location::image_boxes_size() const {
  return image_boxes_.size();
}
inline void Location::clear_image_boxes() {
  image_boxes_.Clear();
}
inline const ::google::privacy::dlp::v2beta1::ImageLocation& Location::image_boxes(int index) const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2beta1.Location.image_boxes)
  return image_boxes_.Get(index);
}
inline ::google::privacy::dlp::v2beta1::ImageLocation* Location::mutable_image_boxes(int index) {
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2beta1.Location.image_boxes)
  return image_boxes_.Mutable(index);
}
inline ::google::privacy::dlp::v2beta1::ImageLocation* Location::add_image_boxes() {
  // @@protoc_insertion_point(field_add:google.privacy.dlp.v2beta1.Location.image_boxes)
  return image_boxes_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2beta1::ImageLocation >*
Location::mutable_image_boxes() {
  // @@protoc_insertion_point(field_mutable_list:google.privacy.dlp.v2beta1.Location.image_boxes)
  return &image_boxes_;
}
inline const ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2beta1::ImageLocation >&
Location::image_boxes() const {
  // @@protoc_insertion_point(field_list:google.privacy.dlp.v2beta1.Location.image_boxes)
  return image_boxes_;
}

// .google.privacy.dlp.v2beta1.RecordKey record_key = 4;
inline bool Location::has_record_key() const {
  return this != internal_default_instance() && record_key_ != NULL;
}
inline const ::google::privacy::dlp::v2beta1::RecordKey& Location::record_key() const {
  const ::google::privacy::dlp::v2beta1::RecordKey* p = record_key_;
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2beta1.Location.record_key)
  return p != NULL ? *p : *reinterpret_cast<const ::google::privacy::dlp::v2beta1::RecordKey*>(
      &::google::privacy::dlp::v2beta1::_RecordKey_default_instance_);
}
inline ::google::privacy::dlp::v2beta1::RecordKey* Location::release_record_key() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2beta1.Location.record_key)
  
  ::google::privacy::dlp::v2beta1::RecordKey* temp = record_key_;
  record_key_ = NULL;
  return temp;
}
inline ::google::privacy::dlp::v2beta1::RecordKey* Location::mutable_record_key() {
  
  if (record_key_ == NULL) {
    record_key_ = new ::google::privacy::dlp::v2beta1::RecordKey;
  }
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2beta1.Location.record_key)
  return record_key_;
}
inline void Location::set_allocated_record_key(::google::privacy::dlp::v2beta1::RecordKey* record_key) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(record_key_);
  }
  if (record_key) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      record_key = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, record_key, submessage_arena);
    }
    
  } else {
    
  }
  record_key_ = record_key;
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2beta1.Location.record_key)
}

// .google.privacy.dlp.v2beta1.FieldId field_id = 5;
inline bool Location::has_field_id() const {
  return this != internal_default_instance() && field_id_ != NULL;
}
inline const ::google::privacy::dlp::v2beta1::FieldId& Location::field_id() const {
  const ::google::privacy::dlp::v2beta1::FieldId* p = field_id_;
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2beta1.Location.field_id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::privacy::dlp::v2beta1::FieldId*>(
      &::google::privacy::dlp::v2beta1::_FieldId_default_instance_);
}
inline ::google::privacy::dlp::v2beta1::FieldId* Location::release_field_id() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2beta1.Location.field_id)
  
  ::google::privacy::dlp::v2beta1::FieldId* temp = field_id_;
  field_id_ = NULL;
  return temp;
}
inline ::google::privacy::dlp::v2beta1::FieldId* Location::mutable_field_id() {
  
  if (field_id_ == NULL) {
    field_id_ = new ::google::privacy::dlp::v2beta1::FieldId;
  }
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2beta1.Location.field_id)
  return field_id_;
}
inline void Location::set_allocated_field_id(::google::privacy::dlp::v2beta1::FieldId* field_id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(field_id_);
  }
  if (field_id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      field_id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, field_id, submessage_arena);
    }
    
  } else {
    
  }
  field_id_ = field_id;
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2beta1.Location.field_id)
}

// .google.privacy.dlp.v2beta1.TableLocation table_location = 6;
inline bool Location::has_table_location() const {
  return this != internal_default_instance() && table_location_ != NULL;
}
inline void Location::clear_table_location() {
  if (GetArenaNoVirtual() == NULL && table_location_ != NULL) {
    delete table_location_;
  }
  table_location_ = NULL;
}
inline const ::google::privacy::dlp::v2beta1::TableLocation& Location::table_location() const {
  const ::google::privacy::dlp::v2beta1::TableLocation* p = table_location_;
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2beta1.Location.table_location)
  return p != NULL ? *p : *reinterpret_cast<const ::google::privacy::dlp::v2beta1::TableLocation*>(
      &::google::privacy::dlp::v2beta1::_TableLocation_default_instance_);
}
inline ::google::privacy::dlp::v2beta1::TableLocation* Location::release_table_location() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2beta1.Location.table_location)
  
  ::google::privacy::dlp::v2beta1::TableLocation* temp = table_location_;
  table_location_ = NULL;
  return temp;
}
inline ::google::privacy::dlp::v2beta1::TableLocation* Location::mutable_table_location() {
  
  if (table_location_ == NULL) {
    table_location_ = new ::google::privacy::dlp::v2beta1::TableLocation;
  }
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2beta1.Location.table_location)
  return table_location_;
}
inline void Location::set_allocated_table_location(::google::privacy::dlp::v2beta1::TableLocation* table_location) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete table_location_;
  }
  if (table_location) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      table_location = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, table_location, submessage_arena);
    }
    
  } else {
    
  }
  table_location_ = table_location;
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2beta1.Location.table_location)
}

// -------------------------------------------------------------------

// TableLocation

// int64 row_index = 1;
inline void TableLocation::clear_row_index() {
  row_index_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 TableLocation::row_index() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2beta1.TableLocation.row_index)
  return row_index_;
}
inline void TableLocation::set_row_index(::google::protobuf::int64 value) {
  
  row_index_ = value;
  // @@protoc_insertion_point(field_set:google.privacy.dlp.v2beta1.TableLocation.row_index)
}

// -------------------------------------------------------------------

// Range

// int64 start = 1;
inline void Range::clear_start() {
  start_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 Range::start() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2beta1.Range.start)
  return start_;
}
inline void Range::set_start(::google::protobuf::int64 value) {
  
  start_ = value;
  // @@protoc_insertion_point(field_set:google.privacy.dlp.v2beta1.Range.start)
}

// int64 end = 2;
inline void Range::clear_end() {
  end_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 Range::end() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2beta1.Range.end)
  return end_;
}
inline void Range::set_end(::google::protobuf::int64 value) {
  
  end_ = value;
  // @@protoc_insertion_point(field_set:google.privacy.dlp.v2beta1.Range.end)
}

// -------------------------------------------------------------------

// ImageLocation

// int32 top = 1;
inline void ImageLocation::clear_top() {
  top_ = 0;
}
inline ::google::protobuf::int32 ImageLocation::top() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2beta1.ImageLocation.top)
  return top_;
}
inline void ImageLocation::set_top(::google::protobuf::int32 value) {
  
  top_ = value;
  // @@protoc_insertion_point(field_set:google.privacy.dlp.v2beta1.ImageLocation.top)
}

// int32 left = 2;
inline void ImageLocation::clear_left() {
  left_ = 0;
}
inline ::google::protobuf::int32 ImageLocation::left() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2beta1.ImageLocation.left)
  return left_;
}
inline void ImageLocation::set_left(::google::protobuf::int32 value) {
  
  left_ = value;
  // @@protoc_insertion_point(field_set:google.privacy.dlp.v2beta1.ImageLocation.left)
}

// int32 width = 3;
inline void ImageLocation::clear_width() {
  width_ = 0;
}
inline ::google::protobuf::int32 ImageLocation::width() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2beta1.ImageLocation.width)
  return width_;
}
inline void ImageLocation::set_width(::google::protobuf::int32 value) {
  
  width_ = value;
  // @@protoc_insertion_point(field_set:google.privacy.dlp.v2beta1.ImageLocation.width)
}

// int32 height = 4;
inline void ImageLocation::clear_height() {
  height_ = 0;
}
inline ::google::protobuf::int32 ImageLocation::height() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2beta1.ImageLocation.height)
  return height_;
}
inline void ImageLocation::set_height(::google::protobuf::int32 value) {
  
  height_ = value;
  // @@protoc_insertion_point(field_set:google.privacy.dlp.v2beta1.ImageLocation.height)
}

// -------------------------------------------------------------------

// RedactContentRequest_ReplaceConfig

// .google.privacy.dlp.v2beta1.InfoType info_type = 1;
inline bool RedactContentRequest_ReplaceConfig::has_info_type() const {
  return this != internal_default_instance() && info_type_ != NULL;
}
inline const ::google::privacy::dlp::v2beta1::InfoType& RedactContentRequest_ReplaceConfig::info_type() const {
  const ::google::privacy::dlp::v2beta1::InfoType* p = info_type_;
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2beta1.RedactContentRequest.ReplaceConfig.info_type)
  return p != NULL ? *p : *reinterpret_cast<const ::google::privacy::dlp::v2beta1::InfoType*>(
      &::google::privacy::dlp::v2beta1::_InfoType_default_instance_);
}
inline ::google::privacy::dlp::v2beta1::InfoType* RedactContentRequest_ReplaceConfig::release_info_type() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2beta1.RedactContentRequest.ReplaceConfig.info_type)
  
  ::google::privacy::dlp::v2beta1::InfoType* temp = info_type_;
  info_type_ = NULL;
  return temp;
}
inline ::google::privacy::dlp::v2beta1::InfoType* RedactContentRequest_ReplaceConfig::mutable_info_type() {
  
  if (info_type_ == NULL) {
    info_type_ = new ::google::privacy::dlp::v2beta1::InfoType;
  }
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2beta1.RedactContentRequest.ReplaceConfig.info_type)
  return info_type_;
}
inline void RedactContentRequest_ReplaceConfig::set_allocated_info_type(::google::privacy::dlp::v2beta1::InfoType* info_type) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(info_type_);
  }
  if (info_type) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      info_type = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, info_type, submessage_arena);
    }
    
  } else {
    
  }
  info_type_ = info_type;
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2beta1.RedactContentRequest.ReplaceConfig.info_type)
}

// string replace_with = 2;
inline void RedactContentRequest_ReplaceConfig::clear_replace_with() {
  replace_with_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RedactContentRequest_ReplaceConfig::replace_with() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2beta1.RedactContentRequest.ReplaceConfig.replace_with)
  return replace_with_.GetNoArena();
}
inline void RedactContentRequest_ReplaceConfig::set_replace_with(const ::std::string& value) {
  
  replace_with_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.privacy.dlp.v2beta1.RedactContentRequest.ReplaceConfig.replace_with)
}
#if LANG_CXX11
inline void RedactContentRequest_ReplaceConfig::set_replace_with(::std::string&& value) {
  
  replace_with_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.privacy.dlp.v2beta1.RedactContentRequest.ReplaceConfig.replace_with)
}
#endif
inline void RedactContentRequest_ReplaceConfig::set_replace_with(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  replace_with_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.privacy.dlp.v2beta1.RedactContentRequest.ReplaceConfig.replace_with)
}
inline void RedactContentRequest_ReplaceConfig::set_replace_with(const char* value, size_t size) {
  
  replace_with_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.privacy.dlp.v2beta1.RedactContentRequest.ReplaceConfig.replace_with)
}
inline ::std::string* RedactContentRequest_ReplaceConfig::mutable_replace_with() {
  
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2beta1.RedactContentRequest.ReplaceConfig.replace_with)
  return replace_with_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RedactContentRequest_ReplaceConfig::release_replace_with() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2beta1.RedactContentRequest.ReplaceConfig.replace_with)
  
  return replace_with_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RedactContentRequest_ReplaceConfig::set_allocated_replace_with(::std::string* replace_with) {
  if (replace_with != NULL) {
    
  } else {
    
  }
  replace_with_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), replace_with);
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2beta1.RedactContentRequest.ReplaceConfig.replace_with)
}

// -------------------------------------------------------------------

// RedactContentRequest_ImageRedactionConfig

// .google.privacy.dlp.v2beta1.InfoType info_type = 1;
inline bool RedactContentRequest_ImageRedactionConfig::has_info_type() const {
  return target_case() == kInfoType;
}
inline void RedactContentRequest_ImageRedactionConfig::set_has_info_type() {
  _oneof_case_[0] = kInfoType;
}
inline ::google::privacy::dlp::v2beta1::InfoType* RedactContentRequest_ImageRedactionConfig::release_info_type() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2beta1.RedactContentRequest.ImageRedactionConfig.info_type)
  if (has_info_type()) {
    clear_has_target();
      ::google::privacy::dlp::v2beta1::InfoType* temp = target_.info_type_;
    target_.info_type_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::privacy::dlp::v2beta1::InfoType& RedactContentRequest_ImageRedactionConfig::info_type() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2beta1.RedactContentRequest.ImageRedactionConfig.info_type)
  return has_info_type()
      ? *target_.info_type_
      : *reinterpret_cast< ::google::privacy::dlp::v2beta1::InfoType*>(&::google::privacy::dlp::v2beta1::_InfoType_default_instance_);
}
inline ::google::privacy::dlp::v2beta1::InfoType* RedactContentRequest_ImageRedactionConfig::mutable_info_type() {
  if (!has_info_type()) {
    clear_target();
    set_has_info_type();
    target_.info_type_ = new ::google::privacy::dlp::v2beta1::InfoType;
  }
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2beta1.RedactContentRequest.ImageRedactionConfig.info_type)
  return target_.info_type_;
}

// bool redact_all_text = 2;
inline bool RedactContentRequest_ImageRedactionConfig::has_redact_all_text() const {
  return target_case() == kRedactAllText;
}
inline void RedactContentRequest_ImageRedactionConfig::set_has_redact_all_text() {
  _oneof_case_[0] = kRedactAllText;
}
inline void RedactContentRequest_ImageRedactionConfig::clear_redact_all_text() {
  if (has_redact_all_text()) {
    target_.redact_all_text_ = false;
    clear_has_target();
  }
}
inline bool RedactContentRequest_ImageRedactionConfig::redact_all_text() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2beta1.RedactContentRequest.ImageRedactionConfig.redact_all_text)
  if (has_redact_all_text()) {
    return target_.redact_all_text_;
  }
  return false;
}
inline void RedactContentRequest_ImageRedactionConfig::set_redact_all_text(bool value) {
  if (!has_redact_all_text()) {
    clear_target();
    set_has_redact_all_text();
  }
  target_.redact_all_text_ = value;
  // @@protoc_insertion_point(field_set:google.privacy.dlp.v2beta1.RedactContentRequest.ImageRedactionConfig.redact_all_text)
}

// .google.privacy.dlp.v2beta1.Color redaction_color = 3;
inline bool RedactContentRequest_ImageRedactionConfig::has_redaction_color() const {
  return this != internal_default_instance() && redaction_color_ != NULL;
}
inline void RedactContentRequest_ImageRedactionConfig::clear_redaction_color() {
  if (GetArenaNoVirtual() == NULL && redaction_color_ != NULL) {
    delete redaction_color_;
  }
  redaction_color_ = NULL;
}
inline const ::google::privacy::dlp::v2beta1::Color& RedactContentRequest_ImageRedactionConfig::redaction_color() const {
  const ::google::privacy::dlp::v2beta1::Color* p = redaction_color_;
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2beta1.RedactContentRequest.ImageRedactionConfig.redaction_color)
  return p != NULL ? *p : *reinterpret_cast<const ::google::privacy::dlp::v2beta1::Color*>(
      &::google::privacy::dlp::v2beta1::_Color_default_instance_);
}
inline ::google::privacy::dlp::v2beta1::Color* RedactContentRequest_ImageRedactionConfig::release_redaction_color() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2beta1.RedactContentRequest.ImageRedactionConfig.redaction_color)
  
  ::google::privacy::dlp::v2beta1::Color* temp = redaction_color_;
  redaction_color_ = NULL;
  return temp;
}
inline ::google::privacy::dlp::v2beta1::Color* RedactContentRequest_ImageRedactionConfig::mutable_redaction_color() {
  
  if (redaction_color_ == NULL) {
    redaction_color_ = new ::google::privacy::dlp::v2beta1::Color;
  }
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2beta1.RedactContentRequest.ImageRedactionConfig.redaction_color)
  return redaction_color_;
}
inline void RedactContentRequest_ImageRedactionConfig::set_allocated_redaction_color(::google::privacy::dlp::v2beta1::Color* redaction_color) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete redaction_color_;
  }
  if (redaction_color) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      redaction_color = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, redaction_color, submessage_arena);
    }
    
  } else {
    
  }
  redaction_color_ = redaction_color;
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2beta1.RedactContentRequest.ImageRedactionConfig.redaction_color)
}

inline bool RedactContentRequest_ImageRedactionConfig::has_target() const {
  return target_case() != TARGET_NOT_SET;
}
inline void RedactContentRequest_ImageRedactionConfig::clear_has_target() {
  _oneof_case_[0] = TARGET_NOT_SET;
}
inline RedactContentRequest_ImageRedactionConfig::TargetCase RedactContentRequest_ImageRedactionConfig::target_case() const {
  return RedactContentRequest_ImageRedactionConfig::TargetCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// RedactContentRequest

// .google.privacy.dlp.v2beta1.InspectConfig inspect_config = 1;
inline bool RedactContentRequest::has_inspect_config() const {
  return this != internal_default_instance() && inspect_config_ != NULL;
}
inline void RedactContentRequest::clear_inspect_config() {
  if (GetArenaNoVirtual() == NULL && inspect_config_ != NULL) {
    delete inspect_config_;
  }
  inspect_config_ = NULL;
}
inline const ::google::privacy::dlp::v2beta1::InspectConfig& RedactContentRequest::inspect_config() const {
  const ::google::privacy::dlp::v2beta1::InspectConfig* p = inspect_config_;
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2beta1.RedactContentRequest.inspect_config)
  return p != NULL ? *p : *reinterpret_cast<const ::google::privacy::dlp::v2beta1::InspectConfig*>(
      &::google::privacy::dlp::v2beta1::_InspectConfig_default_instance_);
}
inline ::google::privacy::dlp::v2beta1::InspectConfig* RedactContentRequest::release_inspect_config() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2beta1.RedactContentRequest.inspect_config)
  
  ::google::privacy::dlp::v2beta1::InspectConfig* temp = inspect_config_;
  inspect_config_ = NULL;
  return temp;
}
inline ::google::privacy::dlp::v2beta1::InspectConfig* RedactContentRequest::mutable_inspect_config() {
  
  if (inspect_config_ == NULL) {
    inspect_config_ = new ::google::privacy::dlp::v2beta1::InspectConfig;
  }
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2beta1.RedactContentRequest.inspect_config)
  return inspect_config_;
}
inline void RedactContentRequest::set_allocated_inspect_config(::google::privacy::dlp::v2beta1::InspectConfig* inspect_config) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete inspect_config_;
  }
  if (inspect_config) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      inspect_config = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, inspect_config, submessage_arena);
    }
    
  } else {
    
  }
  inspect_config_ = inspect_config;
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2beta1.RedactContentRequest.inspect_config)
}

// repeated .google.privacy.dlp.v2beta1.ContentItem items = 2;
inline int RedactContentRequest::items_size() const {
  return items_.size();
}
inline void RedactContentRequest::clear_items() {
  items_.Clear();
}
inline const ::google::privacy::dlp::v2beta1::ContentItem& RedactContentRequest::items(int index) const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2beta1.RedactContentRequest.items)
  return items_.Get(index);
}
inline ::google::privacy::dlp::v2beta1::ContentItem* RedactContentRequest::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2beta1.RedactContentRequest.items)
  return items_.Mutable(index);
}
inline ::google::privacy::dlp::v2beta1::ContentItem* RedactContentRequest::add_items() {
  // @@protoc_insertion_point(field_add:google.privacy.dlp.v2beta1.RedactContentRequest.items)
  return items_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2beta1::ContentItem >*
RedactContentRequest::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:google.privacy.dlp.v2beta1.RedactContentRequest.items)
  return &items_;
}
inline const ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2beta1::ContentItem >&
RedactContentRequest::items() const {
  // @@protoc_insertion_point(field_list:google.privacy.dlp.v2beta1.RedactContentRequest.items)
  return items_;
}

// repeated .google.privacy.dlp.v2beta1.RedactContentRequest.ReplaceConfig replace_configs = 3;
inline int RedactContentRequest::replace_configs_size() const {
  return replace_configs_.size();
}
inline void RedactContentRequest::clear_replace_configs() {
  replace_configs_.Clear();
}
inline const ::google::privacy::dlp::v2beta1::RedactContentRequest_ReplaceConfig& RedactContentRequest::replace_configs(int index) const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2beta1.RedactContentRequest.replace_configs)
  return replace_configs_.Get(index);
}
inline ::google::privacy::dlp::v2beta1::RedactContentRequest_ReplaceConfig* RedactContentRequest::mutable_replace_configs(int index) {
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2beta1.RedactContentRequest.replace_configs)
  return replace_configs_.Mutable(index);
}
inline ::google::privacy::dlp::v2beta1::RedactContentRequest_ReplaceConfig* RedactContentRequest::add_replace_configs() {
  // @@protoc_insertion_point(field_add:google.privacy.dlp.v2beta1.RedactContentRequest.replace_configs)
  return replace_configs_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2beta1::RedactContentRequest_ReplaceConfig >*
RedactContentRequest::mutable_replace_configs() {
  // @@protoc_insertion_point(field_mutable_list:google.privacy.dlp.v2beta1.RedactContentRequest.replace_configs)
  return &replace_configs_;
}
inline const ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2beta1::RedactContentRequest_ReplaceConfig >&
RedactContentRequest::replace_configs() const {
  // @@protoc_insertion_point(field_list:google.privacy.dlp.v2beta1.RedactContentRequest.replace_configs)
  return replace_configs_;
}

// repeated .google.privacy.dlp.v2beta1.RedactContentRequest.ImageRedactionConfig image_redaction_configs = 4;
inline int RedactContentRequest::image_redaction_configs_size() const {
  return image_redaction_configs_.size();
}
inline void RedactContentRequest::clear_image_redaction_configs() {
  image_redaction_configs_.Clear();
}
inline const ::google::privacy::dlp::v2beta1::RedactContentRequest_ImageRedactionConfig& RedactContentRequest::image_redaction_configs(int index) const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2beta1.RedactContentRequest.image_redaction_configs)
  return image_redaction_configs_.Get(index);
}
inline ::google::privacy::dlp::v2beta1::RedactContentRequest_ImageRedactionConfig* RedactContentRequest::mutable_image_redaction_configs(int index) {
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2beta1.RedactContentRequest.image_redaction_configs)
  return image_redaction_configs_.Mutable(index);
}
inline ::google::privacy::dlp::v2beta1::RedactContentRequest_ImageRedactionConfig* RedactContentRequest::add_image_redaction_configs() {
  // @@protoc_insertion_point(field_add:google.privacy.dlp.v2beta1.RedactContentRequest.image_redaction_configs)
  return image_redaction_configs_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2beta1::RedactContentRequest_ImageRedactionConfig >*
RedactContentRequest::mutable_image_redaction_configs() {
  // @@protoc_insertion_point(field_mutable_list:google.privacy.dlp.v2beta1.RedactContentRequest.image_redaction_configs)
  return &image_redaction_configs_;
}
inline const ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2beta1::RedactContentRequest_ImageRedactionConfig >&
RedactContentRequest::image_redaction_configs() const {
  // @@protoc_insertion_point(field_list:google.privacy.dlp.v2beta1.RedactContentRequest.image_redaction_configs)
  return image_redaction_configs_;
}

// -------------------------------------------------------------------

// Color

// float red = 1;
inline void Color::clear_red() {
  red_ = 0;
}
inline float Color::red() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2beta1.Color.red)
  return red_;
}
inline void Color::set_red(float value) {
  
  red_ = value;
  // @@protoc_insertion_point(field_set:google.privacy.dlp.v2beta1.Color.red)
}

// float green = 2;
inline void Color::clear_green() {
  green_ = 0;
}
inline float Color::green() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2beta1.Color.green)
  return green_;
}
inline void Color::set_green(float value) {
  
  green_ = value;
  // @@protoc_insertion_point(field_set:google.privacy.dlp.v2beta1.Color.green)
}

// float blue = 3;
inline void Color::clear_blue() {
  blue_ = 0;
}
inline float Color::blue() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2beta1.Color.blue)
  return blue_;
}
inline void Color::set_blue(float value) {
  
  blue_ = value;
  // @@protoc_insertion_point(field_set:google.privacy.dlp.v2beta1.Color.blue)
}

// -------------------------------------------------------------------

// RedactContentResponse

// repeated .google.privacy.dlp.v2beta1.ContentItem items = 1;
inline int RedactContentResponse::items_size() const {
  return items_.size();
}
inline void RedactContentResponse::clear_items() {
  items_.Clear();
}
inline const ::google::privacy::dlp::v2beta1::ContentItem& RedactContentResponse::items(int index) const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2beta1.RedactContentResponse.items)
  return items_.Get(index);
}
inline ::google::privacy::dlp::v2beta1::ContentItem* RedactContentResponse::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2beta1.RedactContentResponse.items)
  return items_.Mutable(index);
}
inline ::google::privacy::dlp::v2beta1::ContentItem* RedactContentResponse::add_items() {
  // @@protoc_insertion_point(field_add:google.privacy.dlp.v2beta1.RedactContentResponse.items)
  return items_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2beta1::ContentItem >*
RedactContentResponse::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:google.privacy.dlp.v2beta1.RedactContentResponse.items)
  return &items_;
}
inline const ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2beta1::ContentItem >&
RedactContentResponse::items() const {
  // @@protoc_insertion_point(field_list:google.privacy.dlp.v2beta1.RedactContentResponse.items)
  return items_;
}

// -------------------------------------------------------------------

// DeidentifyContentRequest

// .google.privacy.dlp.v2beta1.DeidentifyConfig deidentify_config = 1;
inline bool DeidentifyContentRequest::has_deidentify_config() const {
  return this != internal_default_instance() && deidentify_config_ != NULL;
}
inline void DeidentifyContentRequest::clear_deidentify_config() {
  if (GetArenaNoVirtual() == NULL && deidentify_config_ != NULL) {
    delete deidentify_config_;
  }
  deidentify_config_ = NULL;
}
inline const ::google::privacy::dlp::v2beta1::DeidentifyConfig& DeidentifyContentRequest::deidentify_config() const {
  const ::google::privacy::dlp::v2beta1::DeidentifyConfig* p = deidentify_config_;
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2beta1.DeidentifyContentRequest.deidentify_config)
  return p != NULL ? *p : *reinterpret_cast<const ::google::privacy::dlp::v2beta1::DeidentifyConfig*>(
      &::google::privacy::dlp::v2beta1::_DeidentifyConfig_default_instance_);
}
inline ::google::privacy::dlp::v2beta1::DeidentifyConfig* DeidentifyContentRequest::release_deidentify_config() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2beta1.DeidentifyContentRequest.deidentify_config)
  
  ::google::privacy::dlp::v2beta1::DeidentifyConfig* temp = deidentify_config_;
  deidentify_config_ = NULL;
  return temp;
}
inline ::google::privacy::dlp::v2beta1::DeidentifyConfig* DeidentifyContentRequest::mutable_deidentify_config() {
  
  if (deidentify_config_ == NULL) {
    deidentify_config_ = new ::google::privacy::dlp::v2beta1::DeidentifyConfig;
  }
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2beta1.DeidentifyContentRequest.deidentify_config)
  return deidentify_config_;
}
inline void DeidentifyContentRequest::set_allocated_deidentify_config(::google::privacy::dlp::v2beta1::DeidentifyConfig* deidentify_config) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete deidentify_config_;
  }
  if (deidentify_config) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      deidentify_config = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, deidentify_config, submessage_arena);
    }
    
  } else {
    
  }
  deidentify_config_ = deidentify_config;
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2beta1.DeidentifyContentRequest.deidentify_config)
}

// .google.privacy.dlp.v2beta1.InspectConfig inspect_config = 2;
inline bool DeidentifyContentRequest::has_inspect_config() const {
  return this != internal_default_instance() && inspect_config_ != NULL;
}
inline void DeidentifyContentRequest::clear_inspect_config() {
  if (GetArenaNoVirtual() == NULL && inspect_config_ != NULL) {
    delete inspect_config_;
  }
  inspect_config_ = NULL;
}
inline const ::google::privacy::dlp::v2beta1::InspectConfig& DeidentifyContentRequest::inspect_config() const {
  const ::google::privacy::dlp::v2beta1::InspectConfig* p = inspect_config_;
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2beta1.DeidentifyContentRequest.inspect_config)
  return p != NULL ? *p : *reinterpret_cast<const ::google::privacy::dlp::v2beta1::InspectConfig*>(
      &::google::privacy::dlp::v2beta1::_InspectConfig_default_instance_);
}
inline ::google::privacy::dlp::v2beta1::InspectConfig* DeidentifyContentRequest::release_inspect_config() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2beta1.DeidentifyContentRequest.inspect_config)
  
  ::google::privacy::dlp::v2beta1::InspectConfig* temp = inspect_config_;
  inspect_config_ = NULL;
  return temp;
}
inline ::google::privacy::dlp::v2beta1::InspectConfig* DeidentifyContentRequest::mutable_inspect_config() {
  
  if (inspect_config_ == NULL) {
    inspect_config_ = new ::google::privacy::dlp::v2beta1::InspectConfig;
  }
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2beta1.DeidentifyContentRequest.inspect_config)
  return inspect_config_;
}
inline void DeidentifyContentRequest::set_allocated_inspect_config(::google::privacy::dlp::v2beta1::InspectConfig* inspect_config) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete inspect_config_;
  }
  if (inspect_config) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      inspect_config = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, inspect_config, submessage_arena);
    }
    
  } else {
    
  }
  inspect_config_ = inspect_config;
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2beta1.DeidentifyContentRequest.inspect_config)
}

// repeated .google.privacy.dlp.v2beta1.ContentItem items = 3;
inline int DeidentifyContentRequest::items_size() const {
  return items_.size();
}
inline void DeidentifyContentRequest::clear_items() {
  items_.Clear();
}
inline const ::google::privacy::dlp::v2beta1::ContentItem& DeidentifyContentRequest::items(int index) const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2beta1.DeidentifyContentRequest.items)
  return items_.Get(index);
}
inline ::google::privacy::dlp::v2beta1::ContentItem* DeidentifyContentRequest::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2beta1.DeidentifyContentRequest.items)
  return items_.Mutable(index);
}
inline ::google::privacy::dlp::v2beta1::ContentItem* DeidentifyContentRequest::add_items() {
  // @@protoc_insertion_point(field_add:google.privacy.dlp.v2beta1.DeidentifyContentRequest.items)
  return items_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2beta1::ContentItem >*
DeidentifyContentRequest::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:google.privacy.dlp.v2beta1.DeidentifyContentRequest.items)
  return &items_;
}
inline const ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2beta1::ContentItem >&
DeidentifyContentRequest::items() const {
  // @@protoc_insertion_point(field_list:google.privacy.dlp.v2beta1.DeidentifyContentRequest.items)
  return items_;
}

// -------------------------------------------------------------------

// DeidentifyContentResponse

// repeated .google.privacy.dlp.v2beta1.ContentItem items = 1;
inline int DeidentifyContentResponse::items_size() const {
  return items_.size();
}
inline void DeidentifyContentResponse::clear_items() {
  items_.Clear();
}
inline const ::google::privacy::dlp::v2beta1::ContentItem& DeidentifyContentResponse::items(int index) const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2beta1.DeidentifyContentResponse.items)
  return items_.Get(index);
}
inline ::google::privacy::dlp::v2beta1::ContentItem* DeidentifyContentResponse::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2beta1.DeidentifyContentResponse.items)
  return items_.Mutable(index);
}
inline ::google::privacy::dlp::v2beta1::ContentItem* DeidentifyContentResponse::add_items() {
  // @@protoc_insertion_point(field_add:google.privacy.dlp.v2beta1.DeidentifyContentResponse.items)
  return items_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2beta1::ContentItem >*
DeidentifyContentResponse::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:google.privacy.dlp.v2beta1.DeidentifyContentResponse.items)
  return &items_;
}
inline const ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2beta1::ContentItem >&
DeidentifyContentResponse::items() const {
  // @@protoc_insertion_point(field_list:google.privacy.dlp.v2beta1.DeidentifyContentResponse.items)
  return items_;
}

// repeated .google.privacy.dlp.v2beta1.DeidentificationSummary summaries = 2;
inline int DeidentifyContentResponse::summaries_size() const {
  return summaries_.size();
}
inline void DeidentifyContentResponse::clear_summaries() {
  summaries_.Clear();
}
inline const ::google::privacy::dlp::v2beta1::DeidentificationSummary& DeidentifyContentResponse::summaries(int index) const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2beta1.DeidentifyContentResponse.summaries)
  return summaries_.Get(index);
}
inline ::google::privacy::dlp::v2beta1::DeidentificationSummary* DeidentifyContentResponse::mutable_summaries(int index) {
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2beta1.DeidentifyContentResponse.summaries)
  return summaries_.Mutable(index);
}
inline ::google::privacy::dlp::v2beta1::DeidentificationSummary* DeidentifyContentResponse::add_summaries() {
  // @@protoc_insertion_point(field_add:google.privacy.dlp.v2beta1.DeidentifyContentResponse.summaries)
  return summaries_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2beta1::DeidentificationSummary >*
DeidentifyContentResponse::mutable_summaries() {
  // @@protoc_insertion_point(field_mutable_list:google.privacy.dlp.v2beta1.DeidentifyContentResponse.summaries)
  return &summaries_;
}
inline const ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2beta1::DeidentificationSummary >&
DeidentifyContentResponse::summaries() const {
  // @@protoc_insertion_point(field_list:google.privacy.dlp.v2beta1.DeidentifyContentResponse.summaries)
  return summaries_;
}

// -------------------------------------------------------------------

// InspectContentRequest

// .google.privacy.dlp.v2beta1.InspectConfig inspect_config = 1;
inline bool InspectContentRequest::has_inspect_config() const {
  return this != internal_default_instance() && inspect_config_ != NULL;
}
inline void InspectContentRequest::clear_inspect_config() {
  if (GetArenaNoVirtual() == NULL && inspect_config_ != NULL) {
    delete inspect_config_;
  }
  inspect_config_ = NULL;
}
inline const ::google::privacy::dlp::v2beta1::InspectConfig& InspectContentRequest::inspect_config() const {
  const ::google::privacy::dlp::v2beta1::InspectConfig* p = inspect_config_;
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2beta1.InspectContentRequest.inspect_config)
  return p != NULL ? *p : *reinterpret_cast<const ::google::privacy::dlp::v2beta1::InspectConfig*>(
      &::google::privacy::dlp::v2beta1::_InspectConfig_default_instance_);
}
inline ::google::privacy::dlp::v2beta1::InspectConfig* InspectContentRequest::release_inspect_config() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2beta1.InspectContentRequest.inspect_config)
  
  ::google::privacy::dlp::v2beta1::InspectConfig* temp = inspect_config_;
  inspect_config_ = NULL;
  return temp;
}
inline ::google::privacy::dlp::v2beta1::InspectConfig* InspectContentRequest::mutable_inspect_config() {
  
  if (inspect_config_ == NULL) {
    inspect_config_ = new ::google::privacy::dlp::v2beta1::InspectConfig;
  }
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2beta1.InspectContentRequest.inspect_config)
  return inspect_config_;
}
inline void InspectContentRequest::set_allocated_inspect_config(::google::privacy::dlp::v2beta1::InspectConfig* inspect_config) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete inspect_config_;
  }
  if (inspect_config) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      inspect_config = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, inspect_config, submessage_arena);
    }
    
  } else {
    
  }
  inspect_config_ = inspect_config;
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2beta1.InspectContentRequest.inspect_config)
}

// repeated .google.privacy.dlp.v2beta1.ContentItem items = 2;
inline int InspectContentRequest::items_size() const {
  return items_.size();
}
inline void InspectContentRequest::clear_items() {
  items_.Clear();
}
inline const ::google::privacy::dlp::v2beta1::ContentItem& InspectContentRequest::items(int index) const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2beta1.InspectContentRequest.items)
  return items_.Get(index);
}
inline ::google::privacy::dlp::v2beta1::ContentItem* InspectContentRequest::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2beta1.InspectContentRequest.items)
  return items_.Mutable(index);
}
inline ::google::privacy::dlp::v2beta1::ContentItem* InspectContentRequest::add_items() {
  // @@protoc_insertion_point(field_add:google.privacy.dlp.v2beta1.InspectContentRequest.items)
  return items_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2beta1::ContentItem >*
InspectContentRequest::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:google.privacy.dlp.v2beta1.InspectContentRequest.items)
  return &items_;
}
inline const ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2beta1::ContentItem >&
InspectContentRequest::items() const {
  // @@protoc_insertion_point(field_list:google.privacy.dlp.v2beta1.InspectContentRequest.items)
  return items_;
}

// -------------------------------------------------------------------

// InspectContentResponse

// repeated .google.privacy.dlp.v2beta1.InspectResult results = 1;
inline int InspectContentResponse::results_size() const {
  return results_.size();
}
inline void InspectContentResponse::clear_results() {
  results_.Clear();
}
inline const ::google::privacy::dlp::v2beta1::InspectResult& InspectContentResponse::results(int index) const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2beta1.InspectContentResponse.results)
  return results_.Get(index);
}
inline ::google::privacy::dlp::v2beta1::InspectResult* InspectContentResponse::mutable_results(int index) {
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2beta1.InspectContentResponse.results)
  return results_.Mutable(index);
}
inline ::google::privacy::dlp::v2beta1::InspectResult* InspectContentResponse::add_results() {
  // @@protoc_insertion_point(field_add:google.privacy.dlp.v2beta1.InspectContentResponse.results)
  return results_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2beta1::InspectResult >*
InspectContentResponse::mutable_results() {
  // @@protoc_insertion_point(field_mutable_list:google.privacy.dlp.v2beta1.InspectContentResponse.results)
  return &results_;
}
inline const ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2beta1::InspectResult >&
InspectContentResponse::results() const {
  // @@protoc_insertion_point(field_list:google.privacy.dlp.v2beta1.InspectContentResponse.results)
  return results_;
}

// -------------------------------------------------------------------

// CreateInspectOperationRequest

// .google.privacy.dlp.v2beta1.InspectConfig inspect_config = 1;
inline bool CreateInspectOperationRequest::has_inspect_config() const {
  return this != internal_default_instance() && inspect_config_ != NULL;
}
inline void CreateInspectOperationRequest::clear_inspect_config() {
  if (GetArenaNoVirtual() == NULL && inspect_config_ != NULL) {
    delete inspect_config_;
  }
  inspect_config_ = NULL;
}
inline const ::google::privacy::dlp::v2beta1::InspectConfig& CreateInspectOperationRequest::inspect_config() const {
  const ::google::privacy::dlp::v2beta1::InspectConfig* p = inspect_config_;
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2beta1.CreateInspectOperationRequest.inspect_config)
  return p != NULL ? *p : *reinterpret_cast<const ::google::privacy::dlp::v2beta1::InspectConfig*>(
      &::google::privacy::dlp::v2beta1::_InspectConfig_default_instance_);
}
inline ::google::privacy::dlp::v2beta1::InspectConfig* CreateInspectOperationRequest::release_inspect_config() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2beta1.CreateInspectOperationRequest.inspect_config)
  
  ::google::privacy::dlp::v2beta1::InspectConfig* temp = inspect_config_;
  inspect_config_ = NULL;
  return temp;
}
inline ::google::privacy::dlp::v2beta1::InspectConfig* CreateInspectOperationRequest::mutable_inspect_config() {
  
  if (inspect_config_ == NULL) {
    inspect_config_ = new ::google::privacy::dlp::v2beta1::InspectConfig;
  }
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2beta1.CreateInspectOperationRequest.inspect_config)
  return inspect_config_;
}
inline void CreateInspectOperationRequest::set_allocated_inspect_config(::google::privacy::dlp::v2beta1::InspectConfig* inspect_config) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete inspect_config_;
  }
  if (inspect_config) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      inspect_config = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, inspect_config, submessage_arena);
    }
    
  } else {
    
  }
  inspect_config_ = inspect_config;
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2beta1.CreateInspectOperationRequest.inspect_config)
}

// .google.privacy.dlp.v2beta1.StorageConfig storage_config = 2;
inline bool CreateInspectOperationRequest::has_storage_config() const {
  return this != internal_default_instance() && storage_config_ != NULL;
}
inline const ::google::privacy::dlp::v2beta1::StorageConfig& CreateInspectOperationRequest::storage_config() const {
  const ::google::privacy::dlp::v2beta1::StorageConfig* p = storage_config_;
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2beta1.CreateInspectOperationRequest.storage_config)
  return p != NULL ? *p : *reinterpret_cast<const ::google::privacy::dlp::v2beta1::StorageConfig*>(
      &::google::privacy::dlp::v2beta1::_StorageConfig_default_instance_);
}
inline ::google::privacy::dlp::v2beta1::StorageConfig* CreateInspectOperationRequest::release_storage_config() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2beta1.CreateInspectOperationRequest.storage_config)
  
  ::google::privacy::dlp::v2beta1::StorageConfig* temp = storage_config_;
  storage_config_ = NULL;
  return temp;
}
inline ::google::privacy::dlp::v2beta1::StorageConfig* CreateInspectOperationRequest::mutable_storage_config() {
  
  if (storage_config_ == NULL) {
    storage_config_ = new ::google::privacy::dlp::v2beta1::StorageConfig;
  }
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2beta1.CreateInspectOperationRequest.storage_config)
  return storage_config_;
}
inline void CreateInspectOperationRequest::set_allocated_storage_config(::google::privacy::dlp::v2beta1::StorageConfig* storage_config) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(storage_config_);
  }
  if (storage_config) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      storage_config = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, storage_config, submessage_arena);
    }
    
  } else {
    
  }
  storage_config_ = storage_config;
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2beta1.CreateInspectOperationRequest.storage_config)
}

// .google.privacy.dlp.v2beta1.OutputStorageConfig output_config = 3;
inline bool CreateInspectOperationRequest::has_output_config() const {
  return this != internal_default_instance() && output_config_ != NULL;
}
inline void CreateInspectOperationRequest::clear_output_config() {
  if (GetArenaNoVirtual() == NULL && output_config_ != NULL) {
    delete output_config_;
  }
  output_config_ = NULL;
}
inline const ::google::privacy::dlp::v2beta1::OutputStorageConfig& CreateInspectOperationRequest::output_config() const {
  const ::google::privacy::dlp::v2beta1::OutputStorageConfig* p = output_config_;
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2beta1.CreateInspectOperationRequest.output_config)
  return p != NULL ? *p : *reinterpret_cast<const ::google::privacy::dlp::v2beta1::OutputStorageConfig*>(
      &::google::privacy::dlp::v2beta1::_OutputStorageConfig_default_instance_);
}
inline ::google::privacy::dlp::v2beta1::OutputStorageConfig* CreateInspectOperationRequest::release_output_config() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2beta1.CreateInspectOperationRequest.output_config)
  
  ::google::privacy::dlp::v2beta1::OutputStorageConfig* temp = output_config_;
  output_config_ = NULL;
  return temp;
}
inline ::google::privacy::dlp::v2beta1::OutputStorageConfig* CreateInspectOperationRequest::mutable_output_config() {
  
  if (output_config_ == NULL) {
    output_config_ = new ::google::privacy::dlp::v2beta1::OutputStorageConfig;
  }
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2beta1.CreateInspectOperationRequest.output_config)
  return output_config_;
}
inline void CreateInspectOperationRequest::set_allocated_output_config(::google::privacy::dlp::v2beta1::OutputStorageConfig* output_config) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete output_config_;
  }
  if (output_config) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      output_config = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, output_config, submessage_arena);
    }
    
  } else {
    
  }
  output_config_ = output_config;
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2beta1.CreateInspectOperationRequest.output_config)
}

// .google.privacy.dlp.v2beta1.OperationConfig operation_config = 5;
inline bool CreateInspectOperationRequest::has_operation_config() const {
  return this != internal_default_instance() && operation_config_ != NULL;
}
inline void CreateInspectOperationRequest::clear_operation_config() {
  if (GetArenaNoVirtual() == NULL && operation_config_ != NULL) {
    delete operation_config_;
  }
  operation_config_ = NULL;
}
inline const ::google::privacy::dlp::v2beta1::OperationConfig& CreateInspectOperationRequest::operation_config() const {
  const ::google::privacy::dlp::v2beta1::OperationConfig* p = operation_config_;
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2beta1.CreateInspectOperationRequest.operation_config)
  return p != NULL ? *p : *reinterpret_cast<const ::google::privacy::dlp::v2beta1::OperationConfig*>(
      &::google::privacy::dlp::v2beta1::_OperationConfig_default_instance_);
}
inline ::google::privacy::dlp::v2beta1::OperationConfig* CreateInspectOperationRequest::release_operation_config() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2beta1.CreateInspectOperationRequest.operation_config)
  
  ::google::privacy::dlp::v2beta1::OperationConfig* temp = operation_config_;
  operation_config_ = NULL;
  return temp;
}
inline ::google::privacy::dlp::v2beta1::OperationConfig* CreateInspectOperationRequest::mutable_operation_config() {
  
  if (operation_config_ == NULL) {
    operation_config_ = new ::google::privacy::dlp::v2beta1::OperationConfig;
  }
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2beta1.CreateInspectOperationRequest.operation_config)
  return operation_config_;
}
inline void CreateInspectOperationRequest::set_allocated_operation_config(::google::privacy::dlp::v2beta1::OperationConfig* operation_config) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete operation_config_;
  }
  if (operation_config) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      operation_config = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, operation_config, submessage_arena);
    }
    
  } else {
    
  }
  operation_config_ = operation_config;
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2beta1.CreateInspectOperationRequest.operation_config)
}

// -------------------------------------------------------------------

// OutputStorageConfig

// .google.privacy.dlp.v2beta1.BigQueryTable table = 1;
inline bool OutputStorageConfig::has_table() const {
  return type_case() == kTable;
}
inline void OutputStorageConfig::set_has_table() {
  _oneof_case_[0] = kTable;
}
inline ::google::privacy::dlp::v2beta1::BigQueryTable* OutputStorageConfig::release_table() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2beta1.OutputStorageConfig.table)
  if (has_table()) {
    clear_has_type();
      ::google::privacy::dlp::v2beta1::BigQueryTable* temp = type_.table_;
    type_.table_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::privacy::dlp::v2beta1::BigQueryTable& OutputStorageConfig::table() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2beta1.OutputStorageConfig.table)
  return has_table()
      ? *type_.table_
      : *reinterpret_cast< ::google::privacy::dlp::v2beta1::BigQueryTable*>(&::google::privacy::dlp::v2beta1::_BigQueryTable_default_instance_);
}
inline ::google::privacy::dlp::v2beta1::BigQueryTable* OutputStorageConfig::mutable_table() {
  if (!has_table()) {
    clear_type();
    set_has_table();
    type_.table_ = new ::google::privacy::dlp::v2beta1::BigQueryTable;
  }
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2beta1.OutputStorageConfig.table)
  return type_.table_;
}

// .google.privacy.dlp.v2beta1.CloudStoragePath storage_path = 2;
inline bool OutputStorageConfig::has_storage_path() const {
  return type_case() == kStoragePath;
}
inline void OutputStorageConfig::set_has_storage_path() {
  _oneof_case_[0] = kStoragePath;
}
inline ::google::privacy::dlp::v2beta1::CloudStoragePath* OutputStorageConfig::release_storage_path() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2beta1.OutputStorageConfig.storage_path)
  if (has_storage_path()) {
    clear_has_type();
      ::google::privacy::dlp::v2beta1::CloudStoragePath* temp = type_.storage_path_;
    type_.storage_path_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::privacy::dlp::v2beta1::CloudStoragePath& OutputStorageConfig::storage_path() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2beta1.OutputStorageConfig.storage_path)
  return has_storage_path()
      ? *type_.storage_path_
      : *reinterpret_cast< ::google::privacy::dlp::v2beta1::CloudStoragePath*>(&::google::privacy::dlp::v2beta1::_CloudStoragePath_default_instance_);
}
inline ::google::privacy::dlp::v2beta1::CloudStoragePath* OutputStorageConfig::mutable_storage_path() {
  if (!has_storage_path()) {
    clear_type();
    set_has_storage_path();
    type_.storage_path_ = new ::google::privacy::dlp::v2beta1::CloudStoragePath;
  }
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2beta1.OutputStorageConfig.storage_path)
  return type_.storage_path_;
}

inline bool OutputStorageConfig::has_type() const {
  return type_case() != TYPE_NOT_SET;
}
inline void OutputStorageConfig::clear_has_type() {
  _oneof_case_[0] = TYPE_NOT_SET;
}
inline OutputStorageConfig::TypeCase OutputStorageConfig::type_case() const {
  return OutputStorageConfig::TypeCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// InfoTypeStatistics

// .google.privacy.dlp.v2beta1.InfoType info_type = 1;
inline bool InfoTypeStatistics::has_info_type() const {
  return this != internal_default_instance() && info_type_ != NULL;
}
inline const ::google::privacy::dlp::v2beta1::InfoType& InfoTypeStatistics::info_type() const {
  const ::google::privacy::dlp::v2beta1::InfoType* p = info_type_;
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2beta1.InfoTypeStatistics.info_type)
  return p != NULL ? *p : *reinterpret_cast<const ::google::privacy::dlp::v2beta1::InfoType*>(
      &::google::privacy::dlp::v2beta1::_InfoType_default_instance_);
}
inline ::google::privacy::dlp::v2beta1::InfoType* InfoTypeStatistics::release_info_type() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2beta1.InfoTypeStatistics.info_type)
  
  ::google::privacy::dlp::v2beta1::InfoType* temp = info_type_;
  info_type_ = NULL;
  return temp;
}
inline ::google::privacy::dlp::v2beta1::InfoType* InfoTypeStatistics::mutable_info_type() {
  
  if (info_type_ == NULL) {
    info_type_ = new ::google::privacy::dlp::v2beta1::InfoType;
  }
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2beta1.InfoTypeStatistics.info_type)
  return info_type_;
}
inline void InfoTypeStatistics::set_allocated_info_type(::google::privacy::dlp::v2beta1::InfoType* info_type) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(info_type_);
  }
  if (info_type) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      info_type = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, info_type, submessage_arena);
    }
    
  } else {
    
  }
  info_type_ = info_type;
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2beta1.InfoTypeStatistics.info_type)
}

// int64 count = 2;
inline void InfoTypeStatistics::clear_count() {
  count_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 InfoTypeStatistics::count() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2beta1.InfoTypeStatistics.count)
  return count_;
}
inline void InfoTypeStatistics::set_count(::google::protobuf::int64 value) {
  
  count_ = value;
  // @@protoc_insertion_point(field_set:google.privacy.dlp.v2beta1.InfoTypeStatistics.count)
}

// -------------------------------------------------------------------

// InspectOperationMetadata

// int64 processed_bytes = 1;
inline void InspectOperationMetadata::clear_processed_bytes() {
  processed_bytes_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 InspectOperationMetadata::processed_bytes() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2beta1.InspectOperationMetadata.processed_bytes)
  return processed_bytes_;
}
inline void InspectOperationMetadata::set_processed_bytes(::google::protobuf::int64 value) {
  
  processed_bytes_ = value;
  // @@protoc_insertion_point(field_set:google.privacy.dlp.v2beta1.InspectOperationMetadata.processed_bytes)
}

// int64 total_estimated_bytes = 4;
inline void InspectOperationMetadata::clear_total_estimated_bytes() {
  total_estimated_bytes_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 InspectOperationMetadata::total_estimated_bytes() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2beta1.InspectOperationMetadata.total_estimated_bytes)
  return total_estimated_bytes_;
}
inline void InspectOperationMetadata::set_total_estimated_bytes(::google::protobuf::int64 value) {
  
  total_estimated_bytes_ = value;
  // @@protoc_insertion_point(field_set:google.privacy.dlp.v2beta1.InspectOperationMetadata.total_estimated_bytes)
}

// repeated .google.privacy.dlp.v2beta1.InfoTypeStatistics info_type_stats = 2;
inline int InspectOperationMetadata::info_type_stats_size() const {
  return info_type_stats_.size();
}
inline void InspectOperationMetadata::clear_info_type_stats() {
  info_type_stats_.Clear();
}
inline const ::google::privacy::dlp::v2beta1::InfoTypeStatistics& InspectOperationMetadata::info_type_stats(int index) const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2beta1.InspectOperationMetadata.info_type_stats)
  return info_type_stats_.Get(index);
}
inline ::google::privacy::dlp::v2beta1::InfoTypeStatistics* InspectOperationMetadata::mutable_info_type_stats(int index) {
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2beta1.InspectOperationMetadata.info_type_stats)
  return info_type_stats_.Mutable(index);
}
inline ::google::privacy::dlp::v2beta1::InfoTypeStatistics* InspectOperationMetadata::add_info_type_stats() {
  // @@protoc_insertion_point(field_add:google.privacy.dlp.v2beta1.InspectOperationMetadata.info_type_stats)
  return info_type_stats_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2beta1::InfoTypeStatistics >*
InspectOperationMetadata::mutable_info_type_stats() {
  // @@protoc_insertion_point(field_mutable_list:google.privacy.dlp.v2beta1.InspectOperationMetadata.info_type_stats)
  return &info_type_stats_;
}
inline const ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2beta1::InfoTypeStatistics >&
InspectOperationMetadata::info_type_stats() const {
  // @@protoc_insertion_point(field_list:google.privacy.dlp.v2beta1.InspectOperationMetadata.info_type_stats)
  return info_type_stats_;
}

// .google.protobuf.Timestamp create_time = 3;
inline bool InspectOperationMetadata::has_create_time() const {
  return this != internal_default_instance() && create_time_ != NULL;
}
inline const ::google::protobuf::Timestamp& InspectOperationMetadata::create_time() const {
  const ::google::protobuf::Timestamp* p = create_time_;
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2beta1.InspectOperationMetadata.create_time)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::Timestamp*>(
      &::google::protobuf::_Timestamp_default_instance_);
}
inline ::google::protobuf::Timestamp* InspectOperationMetadata::release_create_time() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2beta1.InspectOperationMetadata.create_time)
  
  ::google::protobuf::Timestamp* temp = create_time_;
  create_time_ = NULL;
  return temp;
}
inline ::google::protobuf::Timestamp* InspectOperationMetadata::mutable_create_time() {
  
  if (create_time_ == NULL) {
    create_time_ = new ::google::protobuf::Timestamp;
  }
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2beta1.InspectOperationMetadata.create_time)
  return create_time_;
}
inline void InspectOperationMetadata::set_allocated_create_time(::google::protobuf::Timestamp* create_time) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(create_time_);
  }
  if (create_time) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast< ::google::protobuf::MessageLite*>(create_time)->GetArena();
    if (message_arena != submessage_arena) {
      create_time = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, create_time, submessage_arena);
    }
    
  } else {
    
  }
  create_time_ = create_time;
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2beta1.InspectOperationMetadata.create_time)
}

// .google.privacy.dlp.v2beta1.InspectConfig request_inspect_config = 5;
inline bool InspectOperationMetadata::has_request_inspect_config() const {
  return this != internal_default_instance() && request_inspect_config_ != NULL;
}
inline void InspectOperationMetadata::clear_request_inspect_config() {
  if (GetArenaNoVirtual() == NULL && request_inspect_config_ != NULL) {
    delete request_inspect_config_;
  }
  request_inspect_config_ = NULL;
}
inline const ::google::privacy::dlp::v2beta1::InspectConfig& InspectOperationMetadata::request_inspect_config() const {
  const ::google::privacy::dlp::v2beta1::InspectConfig* p = request_inspect_config_;
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2beta1.InspectOperationMetadata.request_inspect_config)
  return p != NULL ? *p : *reinterpret_cast<const ::google::privacy::dlp::v2beta1::InspectConfig*>(
      &::google::privacy::dlp::v2beta1::_InspectConfig_default_instance_);
}
inline ::google::privacy::dlp::v2beta1::InspectConfig* InspectOperationMetadata::release_request_inspect_config() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2beta1.InspectOperationMetadata.request_inspect_config)
  
  ::google::privacy::dlp::v2beta1::InspectConfig* temp = request_inspect_config_;
  request_inspect_config_ = NULL;
  return temp;
}
inline ::google::privacy::dlp::v2beta1::InspectConfig* InspectOperationMetadata::mutable_request_inspect_config() {
  
  if (request_inspect_config_ == NULL) {
    request_inspect_config_ = new ::google::privacy::dlp::v2beta1::InspectConfig;
  }
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2beta1.InspectOperationMetadata.request_inspect_config)
  return request_inspect_config_;
}
inline void InspectOperationMetadata::set_allocated_request_inspect_config(::google::privacy::dlp::v2beta1::InspectConfig* request_inspect_config) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete request_inspect_config_;
  }
  if (request_inspect_config) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      request_inspect_config = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, request_inspect_config, submessage_arena);
    }
    
  } else {
    
  }
  request_inspect_config_ = request_inspect_config;
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2beta1.InspectOperationMetadata.request_inspect_config)
}

// .google.privacy.dlp.v2beta1.StorageConfig request_storage_config = 6;
inline bool InspectOperationMetadata::has_request_storage_config() const {
  return this != internal_default_instance() && request_storage_config_ != NULL;
}
inline const ::google::privacy::dlp::v2beta1::StorageConfig& InspectOperationMetadata::request_storage_config() const {
  const ::google::privacy::dlp::v2beta1::StorageConfig* p = request_storage_config_;
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2beta1.InspectOperationMetadata.request_storage_config)
  return p != NULL ? *p : *reinterpret_cast<const ::google::privacy::dlp::v2beta1::StorageConfig*>(
      &::google::privacy::dlp::v2beta1::_StorageConfig_default_instance_);
}
inline ::google::privacy::dlp::v2beta1::StorageConfig* InspectOperationMetadata::release_request_storage_config() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2beta1.InspectOperationMetadata.request_storage_config)
  
  ::google::privacy::dlp::v2beta1::StorageConfig* temp = request_storage_config_;
  request_storage_config_ = NULL;
  return temp;
}
inline ::google::privacy::dlp::v2beta1::StorageConfig* InspectOperationMetadata::mutable_request_storage_config() {
  
  if (request_storage_config_ == NULL) {
    request_storage_config_ = new ::google::privacy::dlp::v2beta1::StorageConfig;
  }
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2beta1.InspectOperationMetadata.request_storage_config)
  return request_storage_config_;
}
inline void InspectOperationMetadata::set_allocated_request_storage_config(::google::privacy::dlp::v2beta1::StorageConfig* request_storage_config) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(request_storage_config_);
  }
  if (request_storage_config) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      request_storage_config = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, request_storage_config, submessage_arena);
    }
    
  } else {
    
  }
  request_storage_config_ = request_storage_config;
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2beta1.InspectOperationMetadata.request_storage_config)
}

// .google.privacy.dlp.v2beta1.OutputStorageConfig request_output_config = 7;
inline bool InspectOperationMetadata::has_request_output_config() const {
  return this != internal_default_instance() && request_output_config_ != NULL;
}
inline void InspectOperationMetadata::clear_request_output_config() {
  if (GetArenaNoVirtual() == NULL && request_output_config_ != NULL) {
    delete request_output_config_;
  }
  request_output_config_ = NULL;
}
inline const ::google::privacy::dlp::v2beta1::OutputStorageConfig& InspectOperationMetadata::request_output_config() const {
  const ::google::privacy::dlp::v2beta1::OutputStorageConfig* p = request_output_config_;
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2beta1.InspectOperationMetadata.request_output_config)
  return p != NULL ? *p : *reinterpret_cast<const ::google::privacy::dlp::v2beta1::OutputStorageConfig*>(
      &::google::privacy::dlp::v2beta1::_OutputStorageConfig_default_instance_);
}
inline ::google::privacy::dlp::v2beta1::OutputStorageConfig* InspectOperationMetadata::release_request_output_config() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2beta1.InspectOperationMetadata.request_output_config)
  
  ::google::privacy::dlp::v2beta1::OutputStorageConfig* temp = request_output_config_;
  request_output_config_ = NULL;
  return temp;
}
inline ::google::privacy::dlp::v2beta1::OutputStorageConfig* InspectOperationMetadata::mutable_request_output_config() {
  
  if (request_output_config_ == NULL) {
    request_output_config_ = new ::google::privacy::dlp::v2beta1::OutputStorageConfig;
  }
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2beta1.InspectOperationMetadata.request_output_config)
  return request_output_config_;
}
inline void InspectOperationMetadata::set_allocated_request_output_config(::google::privacy::dlp::v2beta1::OutputStorageConfig* request_output_config) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete request_output_config_;
  }
  if (request_output_config) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      request_output_config = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, request_output_config, submessage_arena);
    }
    
  } else {
    
  }
  request_output_config_ = request_output_config;
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2beta1.InspectOperationMetadata.request_output_config)
}

// -------------------------------------------------------------------

// InspectOperationResult

// string name = 1;
inline void InspectOperationResult::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& InspectOperationResult::name() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2beta1.InspectOperationResult.name)
  return name_.GetNoArena();
}
inline void InspectOperationResult::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.privacy.dlp.v2beta1.InspectOperationResult.name)
}
#if LANG_CXX11
inline void InspectOperationResult::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.privacy.dlp.v2beta1.InspectOperationResult.name)
}
#endif
inline void InspectOperationResult::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.privacy.dlp.v2beta1.InspectOperationResult.name)
}
inline void InspectOperationResult::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.privacy.dlp.v2beta1.InspectOperationResult.name)
}
inline ::std::string* InspectOperationResult::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2beta1.InspectOperationResult.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* InspectOperationResult::release_name() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2beta1.InspectOperationResult.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void InspectOperationResult::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2beta1.InspectOperationResult.name)
}

// -------------------------------------------------------------------

// ListInspectFindingsRequest

// string name = 1;
inline void ListInspectFindingsRequest::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ListInspectFindingsRequest::name() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2beta1.ListInspectFindingsRequest.name)
  return name_.GetNoArena();
}
inline void ListInspectFindingsRequest::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.privacy.dlp.v2beta1.ListInspectFindingsRequest.name)
}
#if LANG_CXX11
inline void ListInspectFindingsRequest::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.privacy.dlp.v2beta1.ListInspectFindingsRequest.name)
}
#endif
inline void ListInspectFindingsRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.privacy.dlp.v2beta1.ListInspectFindingsRequest.name)
}
inline void ListInspectFindingsRequest::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.privacy.dlp.v2beta1.ListInspectFindingsRequest.name)
}
inline ::std::string* ListInspectFindingsRequest::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2beta1.ListInspectFindingsRequest.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ListInspectFindingsRequest::release_name() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2beta1.ListInspectFindingsRequest.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ListInspectFindingsRequest::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2beta1.ListInspectFindingsRequest.name)
}

// int32 page_size = 2;
inline void ListInspectFindingsRequest::clear_page_size() {
  page_size_ = 0;
}
inline ::google::protobuf::int32 ListInspectFindingsRequest::page_size() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2beta1.ListInspectFindingsRequest.page_size)
  return page_size_;
}
inline void ListInspectFindingsRequest::set_page_size(::google::protobuf::int32 value) {
  
  page_size_ = value;
  // @@protoc_insertion_point(field_set:google.privacy.dlp.v2beta1.ListInspectFindingsRequest.page_size)
}

// string page_token = 3;
inline void ListInspectFindingsRequest::clear_page_token() {
  page_token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ListInspectFindingsRequest::page_token() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2beta1.ListInspectFindingsRequest.page_token)
  return page_token_.GetNoArena();
}
inline void ListInspectFindingsRequest::set_page_token(const ::std::string& value) {
  
  page_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.privacy.dlp.v2beta1.ListInspectFindingsRequest.page_token)
}
#if LANG_CXX11
inline void ListInspectFindingsRequest::set_page_token(::std::string&& value) {
  
  page_token_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.privacy.dlp.v2beta1.ListInspectFindingsRequest.page_token)
}
#endif
inline void ListInspectFindingsRequest::set_page_token(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  page_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.privacy.dlp.v2beta1.ListInspectFindingsRequest.page_token)
}
inline void ListInspectFindingsRequest::set_page_token(const char* value, size_t size) {
  
  page_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.privacy.dlp.v2beta1.ListInspectFindingsRequest.page_token)
}
inline ::std::string* ListInspectFindingsRequest::mutable_page_token() {
  
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2beta1.ListInspectFindingsRequest.page_token)
  return page_token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ListInspectFindingsRequest::release_page_token() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2beta1.ListInspectFindingsRequest.page_token)
  
  return page_token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ListInspectFindingsRequest::set_allocated_page_token(::std::string* page_token) {
  if (page_token != NULL) {
    
  } else {
    
  }
  page_token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), page_token);
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2beta1.ListInspectFindingsRequest.page_token)
}

// string filter = 4;
inline void ListInspectFindingsRequest::clear_filter() {
  filter_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ListInspectFindingsRequest::filter() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2beta1.ListInspectFindingsRequest.filter)
  return filter_.GetNoArena();
}
inline void ListInspectFindingsRequest::set_filter(const ::std::string& value) {
  
  filter_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.privacy.dlp.v2beta1.ListInspectFindingsRequest.filter)
}
#if LANG_CXX11
inline void ListInspectFindingsRequest::set_filter(::std::string&& value) {
  
  filter_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.privacy.dlp.v2beta1.ListInspectFindingsRequest.filter)
}
#endif
inline void ListInspectFindingsRequest::set_filter(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  filter_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.privacy.dlp.v2beta1.ListInspectFindingsRequest.filter)
}
inline void ListInspectFindingsRequest::set_filter(const char* value, size_t size) {
  
  filter_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.privacy.dlp.v2beta1.ListInspectFindingsRequest.filter)
}
inline ::std::string* ListInspectFindingsRequest::mutable_filter() {
  
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2beta1.ListInspectFindingsRequest.filter)
  return filter_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ListInspectFindingsRequest::release_filter() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2beta1.ListInspectFindingsRequest.filter)
  
  return filter_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ListInspectFindingsRequest::set_allocated_filter(::std::string* filter) {
  if (filter != NULL) {
    
  } else {
    
  }
  filter_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), filter);
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2beta1.ListInspectFindingsRequest.filter)
}

// -------------------------------------------------------------------

// ListInspectFindingsResponse

// .google.privacy.dlp.v2beta1.InspectResult result = 1;
inline bool ListInspectFindingsResponse::has_result() const {
  return this != internal_default_instance() && result_ != NULL;
}
inline void ListInspectFindingsResponse::clear_result() {
  if (GetArenaNoVirtual() == NULL && result_ != NULL) {
    delete result_;
  }
  result_ = NULL;
}
inline const ::google::privacy::dlp::v2beta1::InspectResult& ListInspectFindingsResponse::result() const {
  const ::google::privacy::dlp::v2beta1::InspectResult* p = result_;
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2beta1.ListInspectFindingsResponse.result)
  return p != NULL ? *p : *reinterpret_cast<const ::google::privacy::dlp::v2beta1::InspectResult*>(
      &::google::privacy::dlp::v2beta1::_InspectResult_default_instance_);
}
inline ::google::privacy::dlp::v2beta1::InspectResult* ListInspectFindingsResponse::release_result() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2beta1.ListInspectFindingsResponse.result)
  
  ::google::privacy::dlp::v2beta1::InspectResult* temp = result_;
  result_ = NULL;
  return temp;
}
inline ::google::privacy::dlp::v2beta1::InspectResult* ListInspectFindingsResponse::mutable_result() {
  
  if (result_ == NULL) {
    result_ = new ::google::privacy::dlp::v2beta1::InspectResult;
  }
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2beta1.ListInspectFindingsResponse.result)
  return result_;
}
inline void ListInspectFindingsResponse::set_allocated_result(::google::privacy::dlp::v2beta1::InspectResult* result) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete result_;
  }
  if (result) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      result = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, result, submessage_arena);
    }
    
  } else {
    
  }
  result_ = result;
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2beta1.ListInspectFindingsResponse.result)
}

// string next_page_token = 2;
inline void ListInspectFindingsResponse::clear_next_page_token() {
  next_page_token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ListInspectFindingsResponse::next_page_token() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2beta1.ListInspectFindingsResponse.next_page_token)
  return next_page_token_.GetNoArena();
}
inline void ListInspectFindingsResponse::set_next_page_token(const ::std::string& value) {
  
  next_page_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.privacy.dlp.v2beta1.ListInspectFindingsResponse.next_page_token)
}
#if LANG_CXX11
inline void ListInspectFindingsResponse::set_next_page_token(::std::string&& value) {
  
  next_page_token_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.privacy.dlp.v2beta1.ListInspectFindingsResponse.next_page_token)
}
#endif
inline void ListInspectFindingsResponse::set_next_page_token(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  next_page_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.privacy.dlp.v2beta1.ListInspectFindingsResponse.next_page_token)
}
inline void ListInspectFindingsResponse::set_next_page_token(const char* value, size_t size) {
  
  next_page_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.privacy.dlp.v2beta1.ListInspectFindingsResponse.next_page_token)
}
inline ::std::string* ListInspectFindingsResponse::mutable_next_page_token() {
  
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2beta1.ListInspectFindingsResponse.next_page_token)
  return next_page_token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ListInspectFindingsResponse::release_next_page_token() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2beta1.ListInspectFindingsResponse.next_page_token)
  
  return next_page_token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ListInspectFindingsResponse::set_allocated_next_page_token(::std::string* next_page_token) {
  if (next_page_token != NULL) {
    
  } else {
    
  }
  next_page_token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), next_page_token);
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2beta1.ListInspectFindingsResponse.next_page_token)
}

// -------------------------------------------------------------------

// InfoTypeDescription

// string name = 1;
inline void InfoTypeDescription::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& InfoTypeDescription::name() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2beta1.InfoTypeDescription.name)
  return name_.GetNoArena();
}
inline void InfoTypeDescription::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.privacy.dlp.v2beta1.InfoTypeDescription.name)
}
#if LANG_CXX11
inline void InfoTypeDescription::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.privacy.dlp.v2beta1.InfoTypeDescription.name)
}
#endif
inline void InfoTypeDescription::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.privacy.dlp.v2beta1.InfoTypeDescription.name)
}
inline void InfoTypeDescription::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.privacy.dlp.v2beta1.InfoTypeDescription.name)
}
inline ::std::string* InfoTypeDescription::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2beta1.InfoTypeDescription.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* InfoTypeDescription::release_name() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2beta1.InfoTypeDescription.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void InfoTypeDescription::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2beta1.InfoTypeDescription.name)
}

// string display_name = 2;
inline void InfoTypeDescription::clear_display_name() {
  display_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& InfoTypeDescription::display_name() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2beta1.InfoTypeDescription.display_name)
  return display_name_.GetNoArena();
}
inline void InfoTypeDescription::set_display_name(const ::std::string& value) {
  
  display_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.privacy.dlp.v2beta1.InfoTypeDescription.display_name)
}
#if LANG_CXX11
inline void InfoTypeDescription::set_display_name(::std::string&& value) {
  
  display_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.privacy.dlp.v2beta1.InfoTypeDescription.display_name)
}
#endif
inline void InfoTypeDescription::set_display_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  display_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.privacy.dlp.v2beta1.InfoTypeDescription.display_name)
}
inline void InfoTypeDescription::set_display_name(const char* value, size_t size) {
  
  display_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.privacy.dlp.v2beta1.InfoTypeDescription.display_name)
}
inline ::std::string* InfoTypeDescription::mutable_display_name() {
  
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2beta1.InfoTypeDescription.display_name)
  return display_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* InfoTypeDescription::release_display_name() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2beta1.InfoTypeDescription.display_name)
  
  return display_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void InfoTypeDescription::set_allocated_display_name(::std::string* display_name) {
  if (display_name != NULL) {
    
  } else {
    
  }
  display_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), display_name);
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2beta1.InfoTypeDescription.display_name)
}

// repeated .google.privacy.dlp.v2beta1.CategoryDescription categories = 3;
inline int InfoTypeDescription::categories_size() const {
  return categories_.size();
}
inline void InfoTypeDescription::clear_categories() {
  categories_.Clear();
}
inline const ::google::privacy::dlp::v2beta1::CategoryDescription& InfoTypeDescription::categories(int index) const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2beta1.InfoTypeDescription.categories)
  return categories_.Get(index);
}
inline ::google::privacy::dlp::v2beta1::CategoryDescription* InfoTypeDescription::mutable_categories(int index) {
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2beta1.InfoTypeDescription.categories)
  return categories_.Mutable(index);
}
inline ::google::privacy::dlp::v2beta1::CategoryDescription* InfoTypeDescription::add_categories() {
  // @@protoc_insertion_point(field_add:google.privacy.dlp.v2beta1.InfoTypeDescription.categories)
  return categories_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2beta1::CategoryDescription >*
InfoTypeDescription::mutable_categories() {
  // @@protoc_insertion_point(field_mutable_list:google.privacy.dlp.v2beta1.InfoTypeDescription.categories)
  return &categories_;
}
inline const ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2beta1::CategoryDescription >&
InfoTypeDescription::categories() const {
  // @@protoc_insertion_point(field_list:google.privacy.dlp.v2beta1.InfoTypeDescription.categories)
  return categories_;
}

// -------------------------------------------------------------------

// ListInfoTypesRequest

// string category = 1;
inline void ListInfoTypesRequest::clear_category() {
  category_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ListInfoTypesRequest::category() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2beta1.ListInfoTypesRequest.category)
  return category_.GetNoArena();
}
inline void ListInfoTypesRequest::set_category(const ::std::string& value) {
  
  category_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.privacy.dlp.v2beta1.ListInfoTypesRequest.category)
}
#if LANG_CXX11
inline void ListInfoTypesRequest::set_category(::std::string&& value) {
  
  category_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.privacy.dlp.v2beta1.ListInfoTypesRequest.category)
}
#endif
inline void ListInfoTypesRequest::set_category(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  category_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.privacy.dlp.v2beta1.ListInfoTypesRequest.category)
}
inline void ListInfoTypesRequest::set_category(const char* value, size_t size) {
  
  category_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.privacy.dlp.v2beta1.ListInfoTypesRequest.category)
}
inline ::std::string* ListInfoTypesRequest::mutable_category() {
  
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2beta1.ListInfoTypesRequest.category)
  return category_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ListInfoTypesRequest::release_category() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2beta1.ListInfoTypesRequest.category)
  
  return category_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ListInfoTypesRequest::set_allocated_category(::std::string* category) {
  if (category != NULL) {
    
  } else {
    
  }
  category_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), category);
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2beta1.ListInfoTypesRequest.category)
}

// string language_code = 2;
inline void ListInfoTypesRequest::clear_language_code() {
  language_code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ListInfoTypesRequest::language_code() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2beta1.ListInfoTypesRequest.language_code)
  return language_code_.GetNoArena();
}
inline void ListInfoTypesRequest::set_language_code(const ::std::string& value) {
  
  language_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.privacy.dlp.v2beta1.ListInfoTypesRequest.language_code)
}
#if LANG_CXX11
inline void ListInfoTypesRequest::set_language_code(::std::string&& value) {
  
  language_code_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.privacy.dlp.v2beta1.ListInfoTypesRequest.language_code)
}
#endif
inline void ListInfoTypesRequest::set_language_code(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  language_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.privacy.dlp.v2beta1.ListInfoTypesRequest.language_code)
}
inline void ListInfoTypesRequest::set_language_code(const char* value, size_t size) {
  
  language_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.privacy.dlp.v2beta1.ListInfoTypesRequest.language_code)
}
inline ::std::string* ListInfoTypesRequest::mutable_language_code() {
  
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2beta1.ListInfoTypesRequest.language_code)
  return language_code_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ListInfoTypesRequest::release_language_code() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2beta1.ListInfoTypesRequest.language_code)
  
  return language_code_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ListInfoTypesRequest::set_allocated_language_code(::std::string* language_code) {
  if (language_code != NULL) {
    
  } else {
    
  }
  language_code_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), language_code);
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2beta1.ListInfoTypesRequest.language_code)
}

// -------------------------------------------------------------------

// ListInfoTypesResponse

// repeated .google.privacy.dlp.v2beta1.InfoTypeDescription info_types = 1;
inline int ListInfoTypesResponse::info_types_size() const {
  return info_types_.size();
}
inline void ListInfoTypesResponse::clear_info_types() {
  info_types_.Clear();
}
inline const ::google::privacy::dlp::v2beta1::InfoTypeDescription& ListInfoTypesResponse::info_types(int index) const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2beta1.ListInfoTypesResponse.info_types)
  return info_types_.Get(index);
}
inline ::google::privacy::dlp::v2beta1::InfoTypeDescription* ListInfoTypesResponse::mutable_info_types(int index) {
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2beta1.ListInfoTypesResponse.info_types)
  return info_types_.Mutable(index);
}
inline ::google::privacy::dlp::v2beta1::InfoTypeDescription* ListInfoTypesResponse::add_info_types() {
  // @@protoc_insertion_point(field_add:google.privacy.dlp.v2beta1.ListInfoTypesResponse.info_types)
  return info_types_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2beta1::InfoTypeDescription >*
ListInfoTypesResponse::mutable_info_types() {
  // @@protoc_insertion_point(field_mutable_list:google.privacy.dlp.v2beta1.ListInfoTypesResponse.info_types)
  return &info_types_;
}
inline const ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2beta1::InfoTypeDescription >&
ListInfoTypesResponse::info_types() const {
  // @@protoc_insertion_point(field_list:google.privacy.dlp.v2beta1.ListInfoTypesResponse.info_types)
  return info_types_;
}

// -------------------------------------------------------------------

// CategoryDescription

// string name = 1;
inline void CategoryDescription::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CategoryDescription::name() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2beta1.CategoryDescription.name)
  return name_.GetNoArena();
}
inline void CategoryDescription::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.privacy.dlp.v2beta1.CategoryDescription.name)
}
#if LANG_CXX11
inline void CategoryDescription::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.privacy.dlp.v2beta1.CategoryDescription.name)
}
#endif
inline void CategoryDescription::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.privacy.dlp.v2beta1.CategoryDescription.name)
}
inline void CategoryDescription::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.privacy.dlp.v2beta1.CategoryDescription.name)
}
inline ::std::string* CategoryDescription::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2beta1.CategoryDescription.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CategoryDescription::release_name() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2beta1.CategoryDescription.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CategoryDescription::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2beta1.CategoryDescription.name)
}

// string display_name = 2;
inline void CategoryDescription::clear_display_name() {
  display_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CategoryDescription::display_name() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2beta1.CategoryDescription.display_name)
  return display_name_.GetNoArena();
}
inline void CategoryDescription::set_display_name(const ::std::string& value) {
  
  display_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.privacy.dlp.v2beta1.CategoryDescription.display_name)
}
#if LANG_CXX11
inline void CategoryDescription::set_display_name(::std::string&& value) {
  
  display_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.privacy.dlp.v2beta1.CategoryDescription.display_name)
}
#endif
inline void CategoryDescription::set_display_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  display_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.privacy.dlp.v2beta1.CategoryDescription.display_name)
}
inline void CategoryDescription::set_display_name(const char* value, size_t size) {
  
  display_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.privacy.dlp.v2beta1.CategoryDescription.display_name)
}
inline ::std::string* CategoryDescription::mutable_display_name() {
  
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2beta1.CategoryDescription.display_name)
  return display_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CategoryDescription::release_display_name() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2beta1.CategoryDescription.display_name)
  
  return display_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CategoryDescription::set_allocated_display_name(::std::string* display_name) {
  if (display_name != NULL) {
    
  } else {
    
  }
  display_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), display_name);
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2beta1.CategoryDescription.display_name)
}

// -------------------------------------------------------------------

// ListRootCategoriesRequest

// string language_code = 1;
inline void ListRootCategoriesRequest::clear_language_code() {
  language_code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ListRootCategoriesRequest::language_code() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2beta1.ListRootCategoriesRequest.language_code)
  return language_code_.GetNoArena();
}
inline void ListRootCategoriesRequest::set_language_code(const ::std::string& value) {
  
  language_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.privacy.dlp.v2beta1.ListRootCategoriesRequest.language_code)
}
#if LANG_CXX11
inline void ListRootCategoriesRequest::set_language_code(::std::string&& value) {
  
  language_code_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.privacy.dlp.v2beta1.ListRootCategoriesRequest.language_code)
}
#endif
inline void ListRootCategoriesRequest::set_language_code(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  language_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.privacy.dlp.v2beta1.ListRootCategoriesRequest.language_code)
}
inline void ListRootCategoriesRequest::set_language_code(const char* value, size_t size) {
  
  language_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.privacy.dlp.v2beta1.ListRootCategoriesRequest.language_code)
}
inline ::std::string* ListRootCategoriesRequest::mutable_language_code() {
  
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2beta1.ListRootCategoriesRequest.language_code)
  return language_code_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ListRootCategoriesRequest::release_language_code() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2beta1.ListRootCategoriesRequest.language_code)
  
  return language_code_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ListRootCategoriesRequest::set_allocated_language_code(::std::string* language_code) {
  if (language_code != NULL) {
    
  } else {
    
  }
  language_code_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), language_code);
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2beta1.ListRootCategoriesRequest.language_code)
}

// -------------------------------------------------------------------

// ListRootCategoriesResponse

// repeated .google.privacy.dlp.v2beta1.CategoryDescription categories = 1;
inline int ListRootCategoriesResponse::categories_size() const {
  return categories_.size();
}
inline void ListRootCategoriesResponse::clear_categories() {
  categories_.Clear();
}
inline const ::google::privacy::dlp::v2beta1::CategoryDescription& ListRootCategoriesResponse::categories(int index) const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2beta1.ListRootCategoriesResponse.categories)
  return categories_.Get(index);
}
inline ::google::privacy::dlp::v2beta1::CategoryDescription* ListRootCategoriesResponse::mutable_categories(int index) {
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2beta1.ListRootCategoriesResponse.categories)
  return categories_.Mutable(index);
}
inline ::google::privacy::dlp::v2beta1::CategoryDescription* ListRootCategoriesResponse::add_categories() {
  // @@protoc_insertion_point(field_add:google.privacy.dlp.v2beta1.ListRootCategoriesResponse.categories)
  return categories_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2beta1::CategoryDescription >*
ListRootCategoriesResponse::mutable_categories() {
  // @@protoc_insertion_point(field_mutable_list:google.privacy.dlp.v2beta1.ListRootCategoriesResponse.categories)
  return &categories_;
}
inline const ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2beta1::CategoryDescription >&
ListRootCategoriesResponse::categories() const {
  // @@protoc_insertion_point(field_list:google.privacy.dlp.v2beta1.ListRootCategoriesResponse.categories)
  return categories_;
}

// -------------------------------------------------------------------

// AnalyzeDataSourceRiskRequest

// .google.privacy.dlp.v2beta1.PrivacyMetric privacy_metric = 1;
inline bool AnalyzeDataSourceRiskRequest::has_privacy_metric() const {
  return this != internal_default_instance() && privacy_metric_ != NULL;
}
inline void AnalyzeDataSourceRiskRequest::clear_privacy_metric() {
  if (GetArenaNoVirtual() == NULL && privacy_metric_ != NULL) {
    delete privacy_metric_;
  }
  privacy_metric_ = NULL;
}
inline const ::google::privacy::dlp::v2beta1::PrivacyMetric& AnalyzeDataSourceRiskRequest::privacy_metric() const {
  const ::google::privacy::dlp::v2beta1::PrivacyMetric* p = privacy_metric_;
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2beta1.AnalyzeDataSourceRiskRequest.privacy_metric)
  return p != NULL ? *p : *reinterpret_cast<const ::google::privacy::dlp::v2beta1::PrivacyMetric*>(
      &::google::privacy::dlp::v2beta1::_PrivacyMetric_default_instance_);
}
inline ::google::privacy::dlp::v2beta1::PrivacyMetric* AnalyzeDataSourceRiskRequest::release_privacy_metric() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2beta1.AnalyzeDataSourceRiskRequest.privacy_metric)
  
  ::google::privacy::dlp::v2beta1::PrivacyMetric* temp = privacy_metric_;
  privacy_metric_ = NULL;
  return temp;
}
inline ::google::privacy::dlp::v2beta1::PrivacyMetric* AnalyzeDataSourceRiskRequest::mutable_privacy_metric() {
  
  if (privacy_metric_ == NULL) {
    privacy_metric_ = new ::google::privacy::dlp::v2beta1::PrivacyMetric;
  }
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2beta1.AnalyzeDataSourceRiskRequest.privacy_metric)
  return privacy_metric_;
}
inline void AnalyzeDataSourceRiskRequest::set_allocated_privacy_metric(::google::privacy::dlp::v2beta1::PrivacyMetric* privacy_metric) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete privacy_metric_;
  }
  if (privacy_metric) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      privacy_metric = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, privacy_metric, submessage_arena);
    }
    
  } else {
    
  }
  privacy_metric_ = privacy_metric;
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2beta1.AnalyzeDataSourceRiskRequest.privacy_metric)
}

// .google.privacy.dlp.v2beta1.BigQueryTable source_table = 3;
inline bool AnalyzeDataSourceRiskRequest::has_source_table() const {
  return this != internal_default_instance() && source_table_ != NULL;
}
inline const ::google::privacy::dlp::v2beta1::BigQueryTable& AnalyzeDataSourceRiskRequest::source_table() const {
  const ::google::privacy::dlp::v2beta1::BigQueryTable* p = source_table_;
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2beta1.AnalyzeDataSourceRiskRequest.source_table)
  return p != NULL ? *p : *reinterpret_cast<const ::google::privacy::dlp::v2beta1::BigQueryTable*>(
      &::google::privacy::dlp::v2beta1::_BigQueryTable_default_instance_);
}
inline ::google::privacy::dlp::v2beta1::BigQueryTable* AnalyzeDataSourceRiskRequest::release_source_table() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2beta1.AnalyzeDataSourceRiskRequest.source_table)
  
  ::google::privacy::dlp::v2beta1::BigQueryTable* temp = source_table_;
  source_table_ = NULL;
  return temp;
}
inline ::google::privacy::dlp::v2beta1::BigQueryTable* AnalyzeDataSourceRiskRequest::mutable_source_table() {
  
  if (source_table_ == NULL) {
    source_table_ = new ::google::privacy::dlp::v2beta1::BigQueryTable;
  }
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2beta1.AnalyzeDataSourceRiskRequest.source_table)
  return source_table_;
}
inline void AnalyzeDataSourceRiskRequest::set_allocated_source_table(::google::privacy::dlp::v2beta1::BigQueryTable* source_table) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(source_table_);
  }
  if (source_table) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      source_table = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, source_table, submessage_arena);
    }
    
  } else {
    
  }
  source_table_ = source_table;
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2beta1.AnalyzeDataSourceRiskRequest.source_table)
}

// -------------------------------------------------------------------

// PrivacyMetric_NumericalStatsConfig

// .google.privacy.dlp.v2beta1.FieldId field = 1;
inline bool PrivacyMetric_NumericalStatsConfig::has_field() const {
  return this != internal_default_instance() && field_ != NULL;
}
inline const ::google::privacy::dlp::v2beta1::FieldId& PrivacyMetric_NumericalStatsConfig::field() const {
  const ::google::privacy::dlp::v2beta1::FieldId* p = field_;
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2beta1.PrivacyMetric.NumericalStatsConfig.field)
  return p != NULL ? *p : *reinterpret_cast<const ::google::privacy::dlp::v2beta1::FieldId*>(
      &::google::privacy::dlp::v2beta1::_FieldId_default_instance_);
}
inline ::google::privacy::dlp::v2beta1::FieldId* PrivacyMetric_NumericalStatsConfig::release_field() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2beta1.PrivacyMetric.NumericalStatsConfig.field)
  
  ::google::privacy::dlp::v2beta1::FieldId* temp = field_;
  field_ = NULL;
  return temp;
}
inline ::google::privacy::dlp::v2beta1::FieldId* PrivacyMetric_NumericalStatsConfig::mutable_field() {
  
  if (field_ == NULL) {
    field_ = new ::google::privacy::dlp::v2beta1::FieldId;
  }
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2beta1.PrivacyMetric.NumericalStatsConfig.field)
  return field_;
}
inline void PrivacyMetric_NumericalStatsConfig::set_allocated_field(::google::privacy::dlp::v2beta1::FieldId* field) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(field_);
  }
  if (field) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      field = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, field, submessage_arena);
    }
    
  } else {
    
  }
  field_ = field;
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2beta1.PrivacyMetric.NumericalStatsConfig.field)
}

// -------------------------------------------------------------------

// PrivacyMetric_CategoricalStatsConfig

// .google.privacy.dlp.v2beta1.FieldId field = 1;
inline bool PrivacyMetric_CategoricalStatsConfig::has_field() const {
  return this != internal_default_instance() && field_ != NULL;
}
inline const ::google::privacy::dlp::v2beta1::FieldId& PrivacyMetric_CategoricalStatsConfig::field() const {
  const ::google::privacy::dlp::v2beta1::FieldId* p = field_;
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2beta1.PrivacyMetric.CategoricalStatsConfig.field)
  return p != NULL ? *p : *reinterpret_cast<const ::google::privacy::dlp::v2beta1::FieldId*>(
      &::google::privacy::dlp::v2beta1::_FieldId_default_instance_);
}
inline ::google::privacy::dlp::v2beta1::FieldId* PrivacyMetric_CategoricalStatsConfig::release_field() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2beta1.PrivacyMetric.CategoricalStatsConfig.field)
  
  ::google::privacy::dlp::v2beta1::FieldId* temp = field_;
  field_ = NULL;
  return temp;
}
inline ::google::privacy::dlp::v2beta1::FieldId* PrivacyMetric_CategoricalStatsConfig::mutable_field() {
  
  if (field_ == NULL) {
    field_ = new ::google::privacy::dlp::v2beta1::FieldId;
  }
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2beta1.PrivacyMetric.CategoricalStatsConfig.field)
  return field_;
}
inline void PrivacyMetric_CategoricalStatsConfig::set_allocated_field(::google::privacy::dlp::v2beta1::FieldId* field) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(field_);
  }
  if (field) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      field = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, field, submessage_arena);
    }
    
  } else {
    
  }
  field_ = field;
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2beta1.PrivacyMetric.CategoricalStatsConfig.field)
}

// -------------------------------------------------------------------

// PrivacyMetric_KAnonymityConfig

// repeated .google.privacy.dlp.v2beta1.FieldId quasi_ids = 1;
inline int PrivacyMetric_KAnonymityConfig::quasi_ids_size() const {
  return quasi_ids_.size();
}
inline const ::google::privacy::dlp::v2beta1::FieldId& PrivacyMetric_KAnonymityConfig::quasi_ids(int index) const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2beta1.PrivacyMetric.KAnonymityConfig.quasi_ids)
  return quasi_ids_.Get(index);
}
inline ::google::privacy::dlp::v2beta1::FieldId* PrivacyMetric_KAnonymityConfig::mutable_quasi_ids(int index) {
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2beta1.PrivacyMetric.KAnonymityConfig.quasi_ids)
  return quasi_ids_.Mutable(index);
}
inline ::google::privacy::dlp::v2beta1::FieldId* PrivacyMetric_KAnonymityConfig::add_quasi_ids() {
  // @@protoc_insertion_point(field_add:google.privacy.dlp.v2beta1.PrivacyMetric.KAnonymityConfig.quasi_ids)
  return quasi_ids_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2beta1::FieldId >*
PrivacyMetric_KAnonymityConfig::mutable_quasi_ids() {
  // @@protoc_insertion_point(field_mutable_list:google.privacy.dlp.v2beta1.PrivacyMetric.KAnonymityConfig.quasi_ids)
  return &quasi_ids_;
}
inline const ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2beta1::FieldId >&
PrivacyMetric_KAnonymityConfig::quasi_ids() const {
  // @@protoc_insertion_point(field_list:google.privacy.dlp.v2beta1.PrivacyMetric.KAnonymityConfig.quasi_ids)
  return quasi_ids_;
}

// .google.privacy.dlp.v2beta1.EntityId entity_id = 2;
inline bool PrivacyMetric_KAnonymityConfig::has_entity_id() const {
  return this != internal_default_instance() && entity_id_ != NULL;
}
inline const ::google::privacy::dlp::v2beta1::EntityId& PrivacyMetric_KAnonymityConfig::entity_id() const {
  const ::google::privacy::dlp::v2beta1::EntityId* p = entity_id_;
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2beta1.PrivacyMetric.KAnonymityConfig.entity_id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::privacy::dlp::v2beta1::EntityId*>(
      &::google::privacy::dlp::v2beta1::_EntityId_default_instance_);
}
inline ::google::privacy::dlp::v2beta1::EntityId* PrivacyMetric_KAnonymityConfig::release_entity_id() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2beta1.PrivacyMetric.KAnonymityConfig.entity_id)
  
  ::google::privacy::dlp::v2beta1::EntityId* temp = entity_id_;
  entity_id_ = NULL;
  return temp;
}
inline ::google::privacy::dlp::v2beta1::EntityId* PrivacyMetric_KAnonymityConfig::mutable_entity_id() {
  
  if (entity_id_ == NULL) {
    entity_id_ = new ::google::privacy::dlp::v2beta1::EntityId;
  }
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2beta1.PrivacyMetric.KAnonymityConfig.entity_id)
  return entity_id_;
}
inline void PrivacyMetric_KAnonymityConfig::set_allocated_entity_id(::google::privacy::dlp::v2beta1::EntityId* entity_id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(entity_id_);
  }
  if (entity_id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      entity_id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, entity_id, submessage_arena);
    }
    
  } else {
    
  }
  entity_id_ = entity_id;
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2beta1.PrivacyMetric.KAnonymityConfig.entity_id)
}

// -------------------------------------------------------------------

// PrivacyMetric_LDiversityConfig

// repeated .google.privacy.dlp.v2beta1.FieldId quasi_ids = 1;
inline int PrivacyMetric_LDiversityConfig::quasi_ids_size() const {
  return quasi_ids_.size();
}
inline const ::google::privacy::dlp::v2beta1::FieldId& PrivacyMetric_LDiversityConfig::quasi_ids(int index) const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2beta1.PrivacyMetric.LDiversityConfig.quasi_ids)
  return quasi_ids_.Get(index);
}
inline ::google::privacy::dlp::v2beta1::FieldId* PrivacyMetric_LDiversityConfig::mutable_quasi_ids(int index) {
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2beta1.PrivacyMetric.LDiversityConfig.quasi_ids)
  return quasi_ids_.Mutable(index);
}
inline ::google::privacy::dlp::v2beta1::FieldId* PrivacyMetric_LDiversityConfig::add_quasi_ids() {
  // @@protoc_insertion_point(field_add:google.privacy.dlp.v2beta1.PrivacyMetric.LDiversityConfig.quasi_ids)
  return quasi_ids_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2beta1::FieldId >*
PrivacyMetric_LDiversityConfig::mutable_quasi_ids() {
  // @@protoc_insertion_point(field_mutable_list:google.privacy.dlp.v2beta1.PrivacyMetric.LDiversityConfig.quasi_ids)
  return &quasi_ids_;
}
inline const ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2beta1::FieldId >&
PrivacyMetric_LDiversityConfig::quasi_ids() const {
  // @@protoc_insertion_point(field_list:google.privacy.dlp.v2beta1.PrivacyMetric.LDiversityConfig.quasi_ids)
  return quasi_ids_;
}

// .google.privacy.dlp.v2beta1.FieldId sensitive_attribute = 2;
inline bool PrivacyMetric_LDiversityConfig::has_sensitive_attribute() const {
  return this != internal_default_instance() && sensitive_attribute_ != NULL;
}
inline const ::google::privacy::dlp::v2beta1::FieldId& PrivacyMetric_LDiversityConfig::sensitive_attribute() const {
  const ::google::privacy::dlp::v2beta1::FieldId* p = sensitive_attribute_;
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2beta1.PrivacyMetric.LDiversityConfig.sensitive_attribute)
  return p != NULL ? *p : *reinterpret_cast<const ::google::privacy::dlp::v2beta1::FieldId*>(
      &::google::privacy::dlp::v2beta1::_FieldId_default_instance_);
}
inline ::google::privacy::dlp::v2beta1::FieldId* PrivacyMetric_LDiversityConfig::release_sensitive_attribute() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2beta1.PrivacyMetric.LDiversityConfig.sensitive_attribute)
  
  ::google::privacy::dlp::v2beta1::FieldId* temp = sensitive_attribute_;
  sensitive_attribute_ = NULL;
  return temp;
}
inline ::google::privacy::dlp::v2beta1::FieldId* PrivacyMetric_LDiversityConfig::mutable_sensitive_attribute() {
  
  if (sensitive_attribute_ == NULL) {
    sensitive_attribute_ = new ::google::privacy::dlp::v2beta1::FieldId;
  }
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2beta1.PrivacyMetric.LDiversityConfig.sensitive_attribute)
  return sensitive_attribute_;
}
inline void PrivacyMetric_LDiversityConfig::set_allocated_sensitive_attribute(::google::privacy::dlp::v2beta1::FieldId* sensitive_attribute) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(sensitive_attribute_);
  }
  if (sensitive_attribute) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      sensitive_attribute = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, sensitive_attribute, submessage_arena);
    }
    
  } else {
    
  }
  sensitive_attribute_ = sensitive_attribute;
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2beta1.PrivacyMetric.LDiversityConfig.sensitive_attribute)
}

// -------------------------------------------------------------------

// PrivacyMetric

// .google.privacy.dlp.v2beta1.PrivacyMetric.NumericalStatsConfig numerical_stats_config = 1;
inline bool PrivacyMetric::has_numerical_stats_config() const {
  return type_case() == kNumericalStatsConfig;
}
inline void PrivacyMetric::set_has_numerical_stats_config() {
  _oneof_case_[0] = kNumericalStatsConfig;
}
inline void PrivacyMetric::clear_numerical_stats_config() {
  if (has_numerical_stats_config()) {
    delete type_.numerical_stats_config_;
    clear_has_type();
  }
}
inline ::google::privacy::dlp::v2beta1::PrivacyMetric_NumericalStatsConfig* PrivacyMetric::release_numerical_stats_config() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2beta1.PrivacyMetric.numerical_stats_config)
  if (has_numerical_stats_config()) {
    clear_has_type();
      ::google::privacy::dlp::v2beta1::PrivacyMetric_NumericalStatsConfig* temp = type_.numerical_stats_config_;
    type_.numerical_stats_config_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::privacy::dlp::v2beta1::PrivacyMetric_NumericalStatsConfig& PrivacyMetric::numerical_stats_config() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2beta1.PrivacyMetric.numerical_stats_config)
  return has_numerical_stats_config()
      ? *type_.numerical_stats_config_
      : *reinterpret_cast< ::google::privacy::dlp::v2beta1::PrivacyMetric_NumericalStatsConfig*>(&::google::privacy::dlp::v2beta1::_PrivacyMetric_NumericalStatsConfig_default_instance_);
}
inline ::google::privacy::dlp::v2beta1::PrivacyMetric_NumericalStatsConfig* PrivacyMetric::mutable_numerical_stats_config() {
  if (!has_numerical_stats_config()) {
    clear_type();
    set_has_numerical_stats_config();
    type_.numerical_stats_config_ = new ::google::privacy::dlp::v2beta1::PrivacyMetric_NumericalStatsConfig;
  }
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2beta1.PrivacyMetric.numerical_stats_config)
  return type_.numerical_stats_config_;
}

// .google.privacy.dlp.v2beta1.PrivacyMetric.CategoricalStatsConfig categorical_stats_config = 2;
inline bool PrivacyMetric::has_categorical_stats_config() const {
  return type_case() == kCategoricalStatsConfig;
}
inline void PrivacyMetric::set_has_categorical_stats_config() {
  _oneof_case_[0] = kCategoricalStatsConfig;
}
inline void PrivacyMetric::clear_categorical_stats_config() {
  if (has_categorical_stats_config()) {
    delete type_.categorical_stats_config_;
    clear_has_type();
  }
}
inline ::google::privacy::dlp::v2beta1::PrivacyMetric_CategoricalStatsConfig* PrivacyMetric::release_categorical_stats_config() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2beta1.PrivacyMetric.categorical_stats_config)
  if (has_categorical_stats_config()) {
    clear_has_type();
      ::google::privacy::dlp::v2beta1::PrivacyMetric_CategoricalStatsConfig* temp = type_.categorical_stats_config_;
    type_.categorical_stats_config_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::privacy::dlp::v2beta1::PrivacyMetric_CategoricalStatsConfig& PrivacyMetric::categorical_stats_config() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2beta1.PrivacyMetric.categorical_stats_config)
  return has_categorical_stats_config()
      ? *type_.categorical_stats_config_
      : *reinterpret_cast< ::google::privacy::dlp::v2beta1::PrivacyMetric_CategoricalStatsConfig*>(&::google::privacy::dlp::v2beta1::_PrivacyMetric_CategoricalStatsConfig_default_instance_);
}
inline ::google::privacy::dlp::v2beta1::PrivacyMetric_CategoricalStatsConfig* PrivacyMetric::mutable_categorical_stats_config() {
  if (!has_categorical_stats_config()) {
    clear_type();
    set_has_categorical_stats_config();
    type_.categorical_stats_config_ = new ::google::privacy::dlp::v2beta1::PrivacyMetric_CategoricalStatsConfig;
  }
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2beta1.PrivacyMetric.categorical_stats_config)
  return type_.categorical_stats_config_;
}

// .google.privacy.dlp.v2beta1.PrivacyMetric.KAnonymityConfig k_anonymity_config = 3;
inline bool PrivacyMetric::has_k_anonymity_config() const {
  return type_case() == kKAnonymityConfig;
}
inline void PrivacyMetric::set_has_k_anonymity_config() {
  _oneof_case_[0] = kKAnonymityConfig;
}
inline void PrivacyMetric::clear_k_anonymity_config() {
  if (has_k_anonymity_config()) {
    delete type_.k_anonymity_config_;
    clear_has_type();
  }
}
inline ::google::privacy::dlp::v2beta1::PrivacyMetric_KAnonymityConfig* PrivacyMetric::release_k_anonymity_config() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2beta1.PrivacyMetric.k_anonymity_config)
  if (has_k_anonymity_config()) {
    clear_has_type();
      ::google::privacy::dlp::v2beta1::PrivacyMetric_KAnonymityConfig* temp = type_.k_anonymity_config_;
    type_.k_anonymity_config_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::privacy::dlp::v2beta1::PrivacyMetric_KAnonymityConfig& PrivacyMetric::k_anonymity_config() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2beta1.PrivacyMetric.k_anonymity_config)
  return has_k_anonymity_config()
      ? *type_.k_anonymity_config_
      : *reinterpret_cast< ::google::privacy::dlp::v2beta1::PrivacyMetric_KAnonymityConfig*>(&::google::privacy::dlp::v2beta1::_PrivacyMetric_KAnonymityConfig_default_instance_);
}
inline ::google::privacy::dlp::v2beta1::PrivacyMetric_KAnonymityConfig* PrivacyMetric::mutable_k_anonymity_config() {
  if (!has_k_anonymity_config()) {
    clear_type();
    set_has_k_anonymity_config();
    type_.k_anonymity_config_ = new ::google::privacy::dlp::v2beta1::PrivacyMetric_KAnonymityConfig;
  }
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2beta1.PrivacyMetric.k_anonymity_config)
  return type_.k_anonymity_config_;
}

// .google.privacy.dlp.v2beta1.PrivacyMetric.LDiversityConfig l_diversity_config = 4;
inline bool PrivacyMetric::has_l_diversity_config() const {
  return type_case() == kLDiversityConfig;
}
inline void PrivacyMetric::set_has_l_diversity_config() {
  _oneof_case_[0] = kLDiversityConfig;
}
inline void PrivacyMetric::clear_l_diversity_config() {
  if (has_l_diversity_config()) {
    delete type_.l_diversity_config_;
    clear_has_type();
  }
}
inline ::google::privacy::dlp::v2beta1::PrivacyMetric_LDiversityConfig* PrivacyMetric::release_l_diversity_config() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2beta1.PrivacyMetric.l_diversity_config)
  if (has_l_diversity_config()) {
    clear_has_type();
      ::google::privacy::dlp::v2beta1::PrivacyMetric_LDiversityConfig* temp = type_.l_diversity_config_;
    type_.l_diversity_config_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::privacy::dlp::v2beta1::PrivacyMetric_LDiversityConfig& PrivacyMetric::l_diversity_config() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2beta1.PrivacyMetric.l_diversity_config)
  return has_l_diversity_config()
      ? *type_.l_diversity_config_
      : *reinterpret_cast< ::google::privacy::dlp::v2beta1::PrivacyMetric_LDiversityConfig*>(&::google::privacy::dlp::v2beta1::_PrivacyMetric_LDiversityConfig_default_instance_);
}
inline ::google::privacy::dlp::v2beta1::PrivacyMetric_LDiversityConfig* PrivacyMetric::mutable_l_diversity_config() {
  if (!has_l_diversity_config()) {
    clear_type();
    set_has_l_diversity_config();
    type_.l_diversity_config_ = new ::google::privacy::dlp::v2beta1::PrivacyMetric_LDiversityConfig;
  }
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2beta1.PrivacyMetric.l_diversity_config)
  return type_.l_diversity_config_;
}

inline bool PrivacyMetric::has_type() const {
  return type_case() != TYPE_NOT_SET;
}
inline void PrivacyMetric::clear_has_type() {
  _oneof_case_[0] = TYPE_NOT_SET;
}
inline PrivacyMetric::TypeCase PrivacyMetric::type_case() const {
  return PrivacyMetric::TypeCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// RiskAnalysisOperationMetadata

// .google.protobuf.Timestamp create_time = 1;
inline bool RiskAnalysisOperationMetadata::has_create_time() const {
  return this != internal_default_instance() && create_time_ != NULL;
}
inline const ::google::protobuf::Timestamp& RiskAnalysisOperationMetadata::create_time() const {
  const ::google::protobuf::Timestamp* p = create_time_;
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2beta1.RiskAnalysisOperationMetadata.create_time)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::Timestamp*>(
      &::google::protobuf::_Timestamp_default_instance_);
}
inline ::google::protobuf::Timestamp* RiskAnalysisOperationMetadata::release_create_time() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2beta1.RiskAnalysisOperationMetadata.create_time)
  
  ::google::protobuf::Timestamp* temp = create_time_;
  create_time_ = NULL;
  return temp;
}
inline ::google::protobuf::Timestamp* RiskAnalysisOperationMetadata::mutable_create_time() {
  
  if (create_time_ == NULL) {
    create_time_ = new ::google::protobuf::Timestamp;
  }
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2beta1.RiskAnalysisOperationMetadata.create_time)
  return create_time_;
}
inline void RiskAnalysisOperationMetadata::set_allocated_create_time(::google::protobuf::Timestamp* create_time) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(create_time_);
  }
  if (create_time) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast< ::google::protobuf::MessageLite*>(create_time)->GetArena();
    if (message_arena != submessage_arena) {
      create_time = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, create_time, submessage_arena);
    }
    
  } else {
    
  }
  create_time_ = create_time;
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2beta1.RiskAnalysisOperationMetadata.create_time)
}

// .google.privacy.dlp.v2beta1.PrivacyMetric requested_privacy_metric = 2;
inline bool RiskAnalysisOperationMetadata::has_requested_privacy_metric() const {
  return this != internal_default_instance() && requested_privacy_metric_ != NULL;
}
inline void RiskAnalysisOperationMetadata::clear_requested_privacy_metric() {
  if (GetArenaNoVirtual() == NULL && requested_privacy_metric_ != NULL) {
    delete requested_privacy_metric_;
  }
  requested_privacy_metric_ = NULL;
}
inline const ::google::privacy::dlp::v2beta1::PrivacyMetric& RiskAnalysisOperationMetadata::requested_privacy_metric() const {
  const ::google::privacy::dlp::v2beta1::PrivacyMetric* p = requested_privacy_metric_;
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2beta1.RiskAnalysisOperationMetadata.requested_privacy_metric)
  return p != NULL ? *p : *reinterpret_cast<const ::google::privacy::dlp::v2beta1::PrivacyMetric*>(
      &::google::privacy::dlp::v2beta1::_PrivacyMetric_default_instance_);
}
inline ::google::privacy::dlp::v2beta1::PrivacyMetric* RiskAnalysisOperationMetadata::release_requested_privacy_metric() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2beta1.RiskAnalysisOperationMetadata.requested_privacy_metric)
  
  ::google::privacy::dlp::v2beta1::PrivacyMetric* temp = requested_privacy_metric_;
  requested_privacy_metric_ = NULL;
  return temp;
}
inline ::google::privacy::dlp::v2beta1::PrivacyMetric* RiskAnalysisOperationMetadata::mutable_requested_privacy_metric() {
  
  if (requested_privacy_metric_ == NULL) {
    requested_privacy_metric_ = new ::google::privacy::dlp::v2beta1::PrivacyMetric;
  }
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2beta1.RiskAnalysisOperationMetadata.requested_privacy_metric)
  return requested_privacy_metric_;
}
inline void RiskAnalysisOperationMetadata::set_allocated_requested_privacy_metric(::google::privacy::dlp::v2beta1::PrivacyMetric* requested_privacy_metric) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete requested_privacy_metric_;
  }
  if (requested_privacy_metric) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      requested_privacy_metric = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, requested_privacy_metric, submessage_arena);
    }
    
  } else {
    
  }
  requested_privacy_metric_ = requested_privacy_metric;
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2beta1.RiskAnalysisOperationMetadata.requested_privacy_metric)
}

// .google.privacy.dlp.v2beta1.BigQueryTable requested_source_table = 3;
inline bool RiskAnalysisOperationMetadata::has_requested_source_table() const {
  return this != internal_default_instance() && requested_source_table_ != NULL;
}
inline const ::google::privacy::dlp::v2beta1::BigQueryTable& RiskAnalysisOperationMetadata::requested_source_table() const {
  const ::google::privacy::dlp::v2beta1::BigQueryTable* p = requested_source_table_;
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2beta1.RiskAnalysisOperationMetadata.requested_source_table)
  return p != NULL ? *p : *reinterpret_cast<const ::google::privacy::dlp::v2beta1::BigQueryTable*>(
      &::google::privacy::dlp::v2beta1::_BigQueryTable_default_instance_);
}
inline ::google::privacy::dlp::v2beta1::BigQueryTable* RiskAnalysisOperationMetadata::release_requested_source_table() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2beta1.RiskAnalysisOperationMetadata.requested_source_table)
  
  ::google::privacy::dlp::v2beta1::BigQueryTable* temp = requested_source_table_;
  requested_source_table_ = NULL;
  return temp;
}
inline ::google::privacy::dlp::v2beta1::BigQueryTable* RiskAnalysisOperationMetadata::mutable_requested_source_table() {
  
  if (requested_source_table_ == NULL) {
    requested_source_table_ = new ::google::privacy::dlp::v2beta1::BigQueryTable;
  }
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2beta1.RiskAnalysisOperationMetadata.requested_source_table)
  return requested_source_table_;
}
inline void RiskAnalysisOperationMetadata::set_allocated_requested_source_table(::google::privacy::dlp::v2beta1::BigQueryTable* requested_source_table) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(requested_source_table_);
  }
  if (requested_source_table) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      requested_source_table = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, requested_source_table, submessage_arena);
    }
    
  } else {
    
  }
  requested_source_table_ = requested_source_table;
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2beta1.RiskAnalysisOperationMetadata.requested_source_table)
}

// -------------------------------------------------------------------

// RiskAnalysisOperationResult_NumericalStatsResult

// .google.privacy.dlp.v2beta1.Value min_value = 1;
inline bool RiskAnalysisOperationResult_NumericalStatsResult::has_min_value() const {
  return this != internal_default_instance() && min_value_ != NULL;
}
inline void RiskAnalysisOperationResult_NumericalStatsResult::clear_min_value() {
  if (GetArenaNoVirtual() == NULL && min_value_ != NULL) {
    delete min_value_;
  }
  min_value_ = NULL;
}
inline const ::google::privacy::dlp::v2beta1::Value& RiskAnalysisOperationResult_NumericalStatsResult::min_value() const {
  const ::google::privacy::dlp::v2beta1::Value* p = min_value_;
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2beta1.RiskAnalysisOperationResult.NumericalStatsResult.min_value)
  return p != NULL ? *p : *reinterpret_cast<const ::google::privacy::dlp::v2beta1::Value*>(
      &::google::privacy::dlp::v2beta1::_Value_default_instance_);
}
inline ::google::privacy::dlp::v2beta1::Value* RiskAnalysisOperationResult_NumericalStatsResult::release_min_value() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2beta1.RiskAnalysisOperationResult.NumericalStatsResult.min_value)
  
  ::google::privacy::dlp::v2beta1::Value* temp = min_value_;
  min_value_ = NULL;
  return temp;
}
inline ::google::privacy::dlp::v2beta1::Value* RiskAnalysisOperationResult_NumericalStatsResult::mutable_min_value() {
  
  if (min_value_ == NULL) {
    min_value_ = new ::google::privacy::dlp::v2beta1::Value;
  }
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2beta1.RiskAnalysisOperationResult.NumericalStatsResult.min_value)
  return min_value_;
}
inline void RiskAnalysisOperationResult_NumericalStatsResult::set_allocated_min_value(::google::privacy::dlp::v2beta1::Value* min_value) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete min_value_;
  }
  if (min_value) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      min_value = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, min_value, submessage_arena);
    }
    
  } else {
    
  }
  min_value_ = min_value;
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2beta1.RiskAnalysisOperationResult.NumericalStatsResult.min_value)
}

// .google.privacy.dlp.v2beta1.Value max_value = 2;
inline bool RiskAnalysisOperationResult_NumericalStatsResult::has_max_value() const {
  return this != internal_default_instance() && max_value_ != NULL;
}
inline void RiskAnalysisOperationResult_NumericalStatsResult::clear_max_value() {
  if (GetArenaNoVirtual() == NULL && max_value_ != NULL) {
    delete max_value_;
  }
  max_value_ = NULL;
}
inline const ::google::privacy::dlp::v2beta1::Value& RiskAnalysisOperationResult_NumericalStatsResult::max_value() const {
  const ::google::privacy::dlp::v2beta1::Value* p = max_value_;
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2beta1.RiskAnalysisOperationResult.NumericalStatsResult.max_value)
  return p != NULL ? *p : *reinterpret_cast<const ::google::privacy::dlp::v2beta1::Value*>(
      &::google::privacy::dlp::v2beta1::_Value_default_instance_);
}
inline ::google::privacy::dlp::v2beta1::Value* RiskAnalysisOperationResult_NumericalStatsResult::release_max_value() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2beta1.RiskAnalysisOperationResult.NumericalStatsResult.max_value)
  
  ::google::privacy::dlp::v2beta1::Value* temp = max_value_;
  max_value_ = NULL;
  return temp;
}
inline ::google::privacy::dlp::v2beta1::Value* RiskAnalysisOperationResult_NumericalStatsResult::mutable_max_value() {
  
  if (max_value_ == NULL) {
    max_value_ = new ::google::privacy::dlp::v2beta1::Value;
  }
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2beta1.RiskAnalysisOperationResult.NumericalStatsResult.max_value)
  return max_value_;
}
inline void RiskAnalysisOperationResult_NumericalStatsResult::set_allocated_max_value(::google::privacy::dlp::v2beta1::Value* max_value) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete max_value_;
  }
  if (max_value) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      max_value = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, max_value, submessage_arena);
    }
    
  } else {
    
  }
  max_value_ = max_value;
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2beta1.RiskAnalysisOperationResult.NumericalStatsResult.max_value)
}

// repeated .google.privacy.dlp.v2beta1.Value quantile_values = 4;
inline int RiskAnalysisOperationResult_NumericalStatsResult::quantile_values_size() const {
  return quantile_values_.size();
}
inline void RiskAnalysisOperationResult_NumericalStatsResult::clear_quantile_values() {
  quantile_values_.Clear();
}
inline const ::google::privacy::dlp::v2beta1::Value& RiskAnalysisOperationResult_NumericalStatsResult::quantile_values(int index) const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2beta1.RiskAnalysisOperationResult.NumericalStatsResult.quantile_values)
  return quantile_values_.Get(index);
}
inline ::google::privacy::dlp::v2beta1::Value* RiskAnalysisOperationResult_NumericalStatsResult::mutable_quantile_values(int index) {
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2beta1.RiskAnalysisOperationResult.NumericalStatsResult.quantile_values)
  return quantile_values_.Mutable(index);
}
inline ::google::privacy::dlp::v2beta1::Value* RiskAnalysisOperationResult_NumericalStatsResult::add_quantile_values() {
  // @@protoc_insertion_point(field_add:google.privacy.dlp.v2beta1.RiskAnalysisOperationResult.NumericalStatsResult.quantile_values)
  return quantile_values_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2beta1::Value >*
RiskAnalysisOperationResult_NumericalStatsResult::mutable_quantile_values() {
  // @@protoc_insertion_point(field_mutable_list:google.privacy.dlp.v2beta1.RiskAnalysisOperationResult.NumericalStatsResult.quantile_values)
  return &quantile_values_;
}
inline const ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2beta1::Value >&
RiskAnalysisOperationResult_NumericalStatsResult::quantile_values() const {
  // @@protoc_insertion_point(field_list:google.privacy.dlp.v2beta1.RiskAnalysisOperationResult.NumericalStatsResult.quantile_values)
  return quantile_values_;
}

// -------------------------------------------------------------------

// RiskAnalysisOperationResult_CategoricalStatsResult_CategoricalStatsHistogramBucket

// int64 value_frequency_lower_bound = 1;
inline void RiskAnalysisOperationResult_CategoricalStatsResult_CategoricalStatsHistogramBucket::clear_value_frequency_lower_bound() {
  value_frequency_lower_bound_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 RiskAnalysisOperationResult_CategoricalStatsResult_CategoricalStatsHistogramBucket::value_frequency_lower_bound() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2beta1.RiskAnalysisOperationResult.CategoricalStatsResult.CategoricalStatsHistogramBucket.value_frequency_lower_bound)
  return value_frequency_lower_bound_;
}
inline void RiskAnalysisOperationResult_CategoricalStatsResult_CategoricalStatsHistogramBucket::set_value_frequency_lower_bound(::google::protobuf::int64 value) {
  
  value_frequency_lower_bound_ = value;
  // @@protoc_insertion_point(field_set:google.privacy.dlp.v2beta1.RiskAnalysisOperationResult.CategoricalStatsResult.CategoricalStatsHistogramBucket.value_frequency_lower_bound)
}

// int64 value_frequency_upper_bound = 2;
inline void RiskAnalysisOperationResult_CategoricalStatsResult_CategoricalStatsHistogramBucket::clear_value_frequency_upper_bound() {
  value_frequency_upper_bound_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 RiskAnalysisOperationResult_CategoricalStatsResult_CategoricalStatsHistogramBucket::value_frequency_upper_bound() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2beta1.RiskAnalysisOperationResult.CategoricalStatsResult.CategoricalStatsHistogramBucket.value_frequency_upper_bound)
  return value_frequency_upper_bound_;
}
inline void RiskAnalysisOperationResult_CategoricalStatsResult_CategoricalStatsHistogramBucket::set_value_frequency_upper_bound(::google::protobuf::int64 value) {
  
  value_frequency_upper_bound_ = value;
  // @@protoc_insertion_point(field_set:google.privacy.dlp.v2beta1.RiskAnalysisOperationResult.CategoricalStatsResult.CategoricalStatsHistogramBucket.value_frequency_upper_bound)
}

// int64 bucket_size = 3;
inline void RiskAnalysisOperationResult_CategoricalStatsResult_CategoricalStatsHistogramBucket::clear_bucket_size() {
  bucket_size_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 RiskAnalysisOperationResult_CategoricalStatsResult_CategoricalStatsHistogramBucket::bucket_size() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2beta1.RiskAnalysisOperationResult.CategoricalStatsResult.CategoricalStatsHistogramBucket.bucket_size)
  return bucket_size_;
}
inline void RiskAnalysisOperationResult_CategoricalStatsResult_CategoricalStatsHistogramBucket::set_bucket_size(::google::protobuf::int64 value) {
  
  bucket_size_ = value;
  // @@protoc_insertion_point(field_set:google.privacy.dlp.v2beta1.RiskAnalysisOperationResult.CategoricalStatsResult.CategoricalStatsHistogramBucket.bucket_size)
}

// repeated .google.privacy.dlp.v2beta1.ValueFrequency bucket_values = 4;
inline int RiskAnalysisOperationResult_CategoricalStatsResult_CategoricalStatsHistogramBucket::bucket_values_size() const {
  return bucket_values_.size();
}
inline void RiskAnalysisOperationResult_CategoricalStatsResult_CategoricalStatsHistogramBucket::clear_bucket_values() {
  bucket_values_.Clear();
}
inline const ::google::privacy::dlp::v2beta1::ValueFrequency& RiskAnalysisOperationResult_CategoricalStatsResult_CategoricalStatsHistogramBucket::bucket_values(int index) const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2beta1.RiskAnalysisOperationResult.CategoricalStatsResult.CategoricalStatsHistogramBucket.bucket_values)
  return bucket_values_.Get(index);
}
inline ::google::privacy::dlp::v2beta1::ValueFrequency* RiskAnalysisOperationResult_CategoricalStatsResult_CategoricalStatsHistogramBucket::mutable_bucket_values(int index) {
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2beta1.RiskAnalysisOperationResult.CategoricalStatsResult.CategoricalStatsHistogramBucket.bucket_values)
  return bucket_values_.Mutable(index);
}
inline ::google::privacy::dlp::v2beta1::ValueFrequency* RiskAnalysisOperationResult_CategoricalStatsResult_CategoricalStatsHistogramBucket::add_bucket_values() {
  // @@protoc_insertion_point(field_add:google.privacy.dlp.v2beta1.RiskAnalysisOperationResult.CategoricalStatsResult.CategoricalStatsHistogramBucket.bucket_values)
  return bucket_values_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2beta1::ValueFrequency >*
RiskAnalysisOperationResult_CategoricalStatsResult_CategoricalStatsHistogramBucket::mutable_bucket_values() {
  // @@protoc_insertion_point(field_mutable_list:google.privacy.dlp.v2beta1.RiskAnalysisOperationResult.CategoricalStatsResult.CategoricalStatsHistogramBucket.bucket_values)
  return &bucket_values_;
}
inline const ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2beta1::ValueFrequency >&
RiskAnalysisOperationResult_CategoricalStatsResult_CategoricalStatsHistogramBucket::bucket_values() const {
  // @@protoc_insertion_point(field_list:google.privacy.dlp.v2beta1.RiskAnalysisOperationResult.CategoricalStatsResult.CategoricalStatsHistogramBucket.bucket_values)
  return bucket_values_;
}

// -------------------------------------------------------------------

// RiskAnalysisOperationResult_CategoricalStatsResult

// repeated .google.privacy.dlp.v2beta1.RiskAnalysisOperationResult.CategoricalStatsResult.CategoricalStatsHistogramBucket value_frequency_histogram_buckets = 5;
inline int RiskAnalysisOperationResult_CategoricalStatsResult::value_frequency_histogram_buckets_size() const {
  return value_frequency_histogram_buckets_.size();
}
inline void RiskAnalysisOperationResult_CategoricalStatsResult::clear_value_frequency_histogram_buckets() {
  value_frequency_histogram_buckets_.Clear();
}
inline const ::google::privacy::dlp::v2beta1::RiskAnalysisOperationResult_CategoricalStatsResult_CategoricalStatsHistogramBucket& RiskAnalysisOperationResult_CategoricalStatsResult::value_frequency_histogram_buckets(int index) const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2beta1.RiskAnalysisOperationResult.CategoricalStatsResult.value_frequency_histogram_buckets)
  return value_frequency_histogram_buckets_.Get(index);
}
inline ::google::privacy::dlp::v2beta1::RiskAnalysisOperationResult_CategoricalStatsResult_CategoricalStatsHistogramBucket* RiskAnalysisOperationResult_CategoricalStatsResult::mutable_value_frequency_histogram_buckets(int index) {
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2beta1.RiskAnalysisOperationResult.CategoricalStatsResult.value_frequency_histogram_buckets)
  return value_frequency_histogram_buckets_.Mutable(index);
}
inline ::google::privacy::dlp::v2beta1::RiskAnalysisOperationResult_CategoricalStatsResult_CategoricalStatsHistogramBucket* RiskAnalysisOperationResult_CategoricalStatsResult::add_value_frequency_histogram_buckets() {
  // @@protoc_insertion_point(field_add:google.privacy.dlp.v2beta1.RiskAnalysisOperationResult.CategoricalStatsResult.value_frequency_histogram_buckets)
  return value_frequency_histogram_buckets_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2beta1::RiskAnalysisOperationResult_CategoricalStatsResult_CategoricalStatsHistogramBucket >*
RiskAnalysisOperationResult_CategoricalStatsResult::mutable_value_frequency_histogram_buckets() {
  // @@protoc_insertion_point(field_mutable_list:google.privacy.dlp.v2beta1.RiskAnalysisOperationResult.CategoricalStatsResult.value_frequency_histogram_buckets)
  return &value_frequency_histogram_buckets_;
}
inline const ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2beta1::RiskAnalysisOperationResult_CategoricalStatsResult_CategoricalStatsHistogramBucket >&
RiskAnalysisOperationResult_CategoricalStatsResult::value_frequency_histogram_buckets() const {
  // @@protoc_insertion_point(field_list:google.privacy.dlp.v2beta1.RiskAnalysisOperationResult.CategoricalStatsResult.value_frequency_histogram_buckets)
  return value_frequency_histogram_buckets_;
}

// -------------------------------------------------------------------

// RiskAnalysisOperationResult_KAnonymityResult_KAnonymityEquivalenceClass

// repeated .google.privacy.dlp.v2beta1.Value quasi_ids_values = 1;
inline int RiskAnalysisOperationResult_KAnonymityResult_KAnonymityEquivalenceClass::quasi_ids_values_size() const {
  return quasi_ids_values_.size();
}
inline void RiskAnalysisOperationResult_KAnonymityResult_KAnonymityEquivalenceClass::clear_quasi_ids_values() {
  quasi_ids_values_.Clear();
}
inline const ::google::privacy::dlp::v2beta1::Value& RiskAnalysisOperationResult_KAnonymityResult_KAnonymityEquivalenceClass::quasi_ids_values(int index) const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2beta1.RiskAnalysisOperationResult.KAnonymityResult.KAnonymityEquivalenceClass.quasi_ids_values)
  return quasi_ids_values_.Get(index);
}
inline ::google::privacy::dlp::v2beta1::Value* RiskAnalysisOperationResult_KAnonymityResult_KAnonymityEquivalenceClass::mutable_quasi_ids_values(int index) {
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2beta1.RiskAnalysisOperationResult.KAnonymityResult.KAnonymityEquivalenceClass.quasi_ids_values)
  return quasi_ids_values_.Mutable(index);
}
inline ::google::privacy::dlp::v2beta1::Value* RiskAnalysisOperationResult_KAnonymityResult_KAnonymityEquivalenceClass::add_quasi_ids_values() {
  // @@protoc_insertion_point(field_add:google.privacy.dlp.v2beta1.RiskAnalysisOperationResult.KAnonymityResult.KAnonymityEquivalenceClass.quasi_ids_values)
  return quasi_ids_values_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2beta1::Value >*
RiskAnalysisOperationResult_KAnonymityResult_KAnonymityEquivalenceClass::mutable_quasi_ids_values() {
  // @@protoc_insertion_point(field_mutable_list:google.privacy.dlp.v2beta1.RiskAnalysisOperationResult.KAnonymityResult.KAnonymityEquivalenceClass.quasi_ids_values)
  return &quasi_ids_values_;
}
inline const ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2beta1::Value >&
RiskAnalysisOperationResult_KAnonymityResult_KAnonymityEquivalenceClass::quasi_ids_values() const {
  // @@protoc_insertion_point(field_list:google.privacy.dlp.v2beta1.RiskAnalysisOperationResult.KAnonymityResult.KAnonymityEquivalenceClass.quasi_ids_values)
  return quasi_ids_values_;
}

// int64 equivalence_class_size = 2;
inline void RiskAnalysisOperationResult_KAnonymityResult_KAnonymityEquivalenceClass::clear_equivalence_class_size() {
  equivalence_class_size_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 RiskAnalysisOperationResult_KAnonymityResult_KAnonymityEquivalenceClass::equivalence_class_size() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2beta1.RiskAnalysisOperationResult.KAnonymityResult.KAnonymityEquivalenceClass.equivalence_class_size)
  return equivalence_class_size_;
}
inline void RiskAnalysisOperationResult_KAnonymityResult_KAnonymityEquivalenceClass::set_equivalence_class_size(::google::protobuf::int64 value) {
  
  equivalence_class_size_ = value;
  // @@protoc_insertion_point(field_set:google.privacy.dlp.v2beta1.RiskAnalysisOperationResult.KAnonymityResult.KAnonymityEquivalenceClass.equivalence_class_size)
}

// -------------------------------------------------------------------

// RiskAnalysisOperationResult_KAnonymityResult_KAnonymityHistogramBucket

// int64 equivalence_class_size_lower_bound = 1;
inline void RiskAnalysisOperationResult_KAnonymityResult_KAnonymityHistogramBucket::clear_equivalence_class_size_lower_bound() {
  equivalence_class_size_lower_bound_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 RiskAnalysisOperationResult_KAnonymityResult_KAnonymityHistogramBucket::equivalence_class_size_lower_bound() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2beta1.RiskAnalysisOperationResult.KAnonymityResult.KAnonymityHistogramBucket.equivalence_class_size_lower_bound)
  return equivalence_class_size_lower_bound_;
}
inline void RiskAnalysisOperationResult_KAnonymityResult_KAnonymityHistogramBucket::set_equivalence_class_size_lower_bound(::google::protobuf::int64 value) {
  
  equivalence_class_size_lower_bound_ = value;
  // @@protoc_insertion_point(field_set:google.privacy.dlp.v2beta1.RiskAnalysisOperationResult.KAnonymityResult.KAnonymityHistogramBucket.equivalence_class_size_lower_bound)
}

// int64 equivalence_class_size_upper_bound = 2;
inline void RiskAnalysisOperationResult_KAnonymityResult_KAnonymityHistogramBucket::clear_equivalence_class_size_upper_bound() {
  equivalence_class_size_upper_bound_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 RiskAnalysisOperationResult_KAnonymityResult_KAnonymityHistogramBucket::equivalence_class_size_upper_bound() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2beta1.RiskAnalysisOperationResult.KAnonymityResult.KAnonymityHistogramBucket.equivalence_class_size_upper_bound)
  return equivalence_class_size_upper_bound_;
}
inline void RiskAnalysisOperationResult_KAnonymityResult_KAnonymityHistogramBucket::set_equivalence_class_size_upper_bound(::google::protobuf::int64 value) {
  
  equivalence_class_size_upper_bound_ = value;
  // @@protoc_insertion_point(field_set:google.privacy.dlp.v2beta1.RiskAnalysisOperationResult.KAnonymityResult.KAnonymityHistogramBucket.equivalence_class_size_upper_bound)
}

// int64 bucket_size = 3;
inline void RiskAnalysisOperationResult_KAnonymityResult_KAnonymityHistogramBucket::clear_bucket_size() {
  bucket_size_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 RiskAnalysisOperationResult_KAnonymityResult_KAnonymityHistogramBucket::bucket_size() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2beta1.RiskAnalysisOperationResult.KAnonymityResult.KAnonymityHistogramBucket.bucket_size)
  return bucket_size_;
}
inline void RiskAnalysisOperationResult_KAnonymityResult_KAnonymityHistogramBucket::set_bucket_size(::google::protobuf::int64 value) {
  
  bucket_size_ = value;
  // @@protoc_insertion_point(field_set:google.privacy.dlp.v2beta1.RiskAnalysisOperationResult.KAnonymityResult.KAnonymityHistogramBucket.bucket_size)
}

// repeated .google.privacy.dlp.v2beta1.RiskAnalysisOperationResult.KAnonymityResult.KAnonymityEquivalenceClass bucket_values = 4;
inline int RiskAnalysisOperationResult_KAnonymityResult_KAnonymityHistogramBucket::bucket_values_size() const {
  return bucket_values_.size();
}
inline void RiskAnalysisOperationResult_KAnonymityResult_KAnonymityHistogramBucket::clear_bucket_values() {
  bucket_values_.Clear();
}
inline const ::google::privacy::dlp::v2beta1::RiskAnalysisOperationResult_KAnonymityResult_KAnonymityEquivalenceClass& RiskAnalysisOperationResult_KAnonymityResult_KAnonymityHistogramBucket::bucket_values(int index) const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2beta1.RiskAnalysisOperationResult.KAnonymityResult.KAnonymityHistogramBucket.bucket_values)
  return bucket_values_.Get(index);
}
inline ::google::privacy::dlp::v2beta1::RiskAnalysisOperationResult_KAnonymityResult_KAnonymityEquivalenceClass* RiskAnalysisOperationResult_KAnonymityResult_KAnonymityHistogramBucket::mutable_bucket_values(int index) {
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2beta1.RiskAnalysisOperationResult.KAnonymityResult.KAnonymityHistogramBucket.bucket_values)
  return bucket_values_.Mutable(index);
}
inline ::google::privacy::dlp::v2beta1::RiskAnalysisOperationResult_KAnonymityResult_KAnonymityEquivalenceClass* RiskAnalysisOperationResult_KAnonymityResult_KAnonymityHistogramBucket::add_bucket_values() {
  // @@protoc_insertion_point(field_add:google.privacy.dlp.v2beta1.RiskAnalysisOperationResult.KAnonymityResult.KAnonymityHistogramBucket.bucket_values)
  return bucket_values_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2beta1::RiskAnalysisOperationResult_KAnonymityResult_KAnonymityEquivalenceClass >*
RiskAnalysisOperationResult_KAnonymityResult_KAnonymityHistogramBucket::mutable_bucket_values() {
  // @@protoc_insertion_point(field_mutable_list:google.privacy.dlp.v2beta1.RiskAnalysisOperationResult.KAnonymityResult.KAnonymityHistogramBucket.bucket_values)
  return &bucket_values_;
}
inline const ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2beta1::RiskAnalysisOperationResult_KAnonymityResult_KAnonymityEquivalenceClass >&
RiskAnalysisOperationResult_KAnonymityResult_KAnonymityHistogramBucket::bucket_values() const {
  // @@protoc_insertion_point(field_list:google.privacy.dlp.v2beta1.RiskAnalysisOperationResult.KAnonymityResult.KAnonymityHistogramBucket.bucket_values)
  return bucket_values_;
}

// -------------------------------------------------------------------

// RiskAnalysisOperationResult_KAnonymityResult

// repeated .google.privacy.dlp.v2beta1.RiskAnalysisOperationResult.KAnonymityResult.KAnonymityHistogramBucket equivalence_class_histogram_buckets = 5;
inline int RiskAnalysisOperationResult_KAnonymityResult::equivalence_class_histogram_buckets_size() const {
  return equivalence_class_histogram_buckets_.size();
}
inline void RiskAnalysisOperationResult_KAnonymityResult::clear_equivalence_class_histogram_buckets() {
  equivalence_class_histogram_buckets_.Clear();
}
inline const ::google::privacy::dlp::v2beta1::RiskAnalysisOperationResult_KAnonymityResult_KAnonymityHistogramBucket& RiskAnalysisOperationResult_KAnonymityResult::equivalence_class_histogram_buckets(int index) const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2beta1.RiskAnalysisOperationResult.KAnonymityResult.equivalence_class_histogram_buckets)
  return equivalence_class_histogram_buckets_.Get(index);
}
inline ::google::privacy::dlp::v2beta1::RiskAnalysisOperationResult_KAnonymityResult_KAnonymityHistogramBucket* RiskAnalysisOperationResult_KAnonymityResult::mutable_equivalence_class_histogram_buckets(int index) {
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2beta1.RiskAnalysisOperationResult.KAnonymityResult.equivalence_class_histogram_buckets)
  return equivalence_class_histogram_buckets_.Mutable(index);
}
inline ::google::privacy::dlp::v2beta1::RiskAnalysisOperationResult_KAnonymityResult_KAnonymityHistogramBucket* RiskAnalysisOperationResult_KAnonymityResult::add_equivalence_class_histogram_buckets() {
  // @@protoc_insertion_point(field_add:google.privacy.dlp.v2beta1.RiskAnalysisOperationResult.KAnonymityResult.equivalence_class_histogram_buckets)
  return equivalence_class_histogram_buckets_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2beta1::RiskAnalysisOperationResult_KAnonymityResult_KAnonymityHistogramBucket >*
RiskAnalysisOperationResult_KAnonymityResult::mutable_equivalence_class_histogram_buckets() {
  // @@protoc_insertion_point(field_mutable_list:google.privacy.dlp.v2beta1.RiskAnalysisOperationResult.KAnonymityResult.equivalence_class_histogram_buckets)
  return &equivalence_class_histogram_buckets_;
}
inline const ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2beta1::RiskAnalysisOperationResult_KAnonymityResult_KAnonymityHistogramBucket >&
RiskAnalysisOperationResult_KAnonymityResult::equivalence_class_histogram_buckets() const {
  // @@protoc_insertion_point(field_list:google.privacy.dlp.v2beta1.RiskAnalysisOperationResult.KAnonymityResult.equivalence_class_histogram_buckets)
  return equivalence_class_histogram_buckets_;
}

// -------------------------------------------------------------------

// RiskAnalysisOperationResult_LDiversityResult_LDiversityEquivalenceClass

// repeated .google.privacy.dlp.v2beta1.Value quasi_ids_values = 1;
inline int RiskAnalysisOperationResult_LDiversityResult_LDiversityEquivalenceClass::quasi_ids_values_size() const {
  return quasi_ids_values_.size();
}
inline void RiskAnalysisOperationResult_LDiversityResult_LDiversityEquivalenceClass::clear_quasi_ids_values() {
  quasi_ids_values_.Clear();
}
inline const ::google::privacy::dlp::v2beta1::Value& RiskAnalysisOperationResult_LDiversityResult_LDiversityEquivalenceClass::quasi_ids_values(int index) const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2beta1.RiskAnalysisOperationResult.LDiversityResult.LDiversityEquivalenceClass.quasi_ids_values)
  return quasi_ids_values_.Get(index);
}
inline ::google::privacy::dlp::v2beta1::Value* RiskAnalysisOperationResult_LDiversityResult_LDiversityEquivalenceClass::mutable_quasi_ids_values(int index) {
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2beta1.RiskAnalysisOperationResult.LDiversityResult.LDiversityEquivalenceClass.quasi_ids_values)
  return quasi_ids_values_.Mutable(index);
}
inline ::google::privacy::dlp::v2beta1::Value* RiskAnalysisOperationResult_LDiversityResult_LDiversityEquivalenceClass::add_quasi_ids_values() {
  // @@protoc_insertion_point(field_add:google.privacy.dlp.v2beta1.RiskAnalysisOperationResult.LDiversityResult.LDiversityEquivalenceClass.quasi_ids_values)
  return quasi_ids_values_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2beta1::Value >*
RiskAnalysisOperationResult_LDiversityResult_LDiversityEquivalenceClass::mutable_quasi_ids_values() {
  // @@protoc_insertion_point(field_mutable_list:google.privacy.dlp.v2beta1.RiskAnalysisOperationResult.LDiversityResult.LDiversityEquivalenceClass.quasi_ids_values)
  return &quasi_ids_values_;
}
inline const ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2beta1::Value >&
RiskAnalysisOperationResult_LDiversityResult_LDiversityEquivalenceClass::quasi_ids_values() const {
  // @@protoc_insertion_point(field_list:google.privacy.dlp.v2beta1.RiskAnalysisOperationResult.LDiversityResult.LDiversityEquivalenceClass.quasi_ids_values)
  return quasi_ids_values_;
}

// int64 equivalence_class_size = 2;
inline void RiskAnalysisOperationResult_LDiversityResult_LDiversityEquivalenceClass::clear_equivalence_class_size() {
  equivalence_class_size_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 RiskAnalysisOperationResult_LDiversityResult_LDiversityEquivalenceClass::equivalence_class_size() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2beta1.RiskAnalysisOperationResult.LDiversityResult.LDiversityEquivalenceClass.equivalence_class_size)
  return equivalence_class_size_;
}
inline void RiskAnalysisOperationResult_LDiversityResult_LDiversityEquivalenceClass::set_equivalence_class_size(::google::protobuf::int64 value) {
  
  equivalence_class_size_ = value;
  // @@protoc_insertion_point(field_set:google.privacy.dlp.v2beta1.RiskAnalysisOperationResult.LDiversityResult.LDiversityEquivalenceClass.equivalence_class_size)
}

// int64 num_distinct_sensitive_values = 3;
inline void RiskAnalysisOperationResult_LDiversityResult_LDiversityEquivalenceClass::clear_num_distinct_sensitive_values() {
  num_distinct_sensitive_values_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 RiskAnalysisOperationResult_LDiversityResult_LDiversityEquivalenceClass::num_distinct_sensitive_values() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2beta1.RiskAnalysisOperationResult.LDiversityResult.LDiversityEquivalenceClass.num_distinct_sensitive_values)
  return num_distinct_sensitive_values_;
}
inline void RiskAnalysisOperationResult_LDiversityResult_LDiversityEquivalenceClass::set_num_distinct_sensitive_values(::google::protobuf::int64 value) {
  
  num_distinct_sensitive_values_ = value;
  // @@protoc_insertion_point(field_set:google.privacy.dlp.v2beta1.RiskAnalysisOperationResult.LDiversityResult.LDiversityEquivalenceClass.num_distinct_sensitive_values)
}

// repeated .google.privacy.dlp.v2beta1.ValueFrequency top_sensitive_values = 4;
inline int RiskAnalysisOperationResult_LDiversityResult_LDiversityEquivalenceClass::top_sensitive_values_size() const {
  return top_sensitive_values_.size();
}
inline void RiskAnalysisOperationResult_LDiversityResult_LDiversityEquivalenceClass::clear_top_sensitive_values() {
  top_sensitive_values_.Clear();
}
inline const ::google::privacy::dlp::v2beta1::ValueFrequency& RiskAnalysisOperationResult_LDiversityResult_LDiversityEquivalenceClass::top_sensitive_values(int index) const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2beta1.RiskAnalysisOperationResult.LDiversityResult.LDiversityEquivalenceClass.top_sensitive_values)
  return top_sensitive_values_.Get(index);
}
inline ::google::privacy::dlp::v2beta1::ValueFrequency* RiskAnalysisOperationResult_LDiversityResult_LDiversityEquivalenceClass::mutable_top_sensitive_values(int index) {
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2beta1.RiskAnalysisOperationResult.LDiversityResult.LDiversityEquivalenceClass.top_sensitive_values)
  return top_sensitive_values_.Mutable(index);
}
inline ::google::privacy::dlp::v2beta1::ValueFrequency* RiskAnalysisOperationResult_LDiversityResult_LDiversityEquivalenceClass::add_top_sensitive_values() {
  // @@protoc_insertion_point(field_add:google.privacy.dlp.v2beta1.RiskAnalysisOperationResult.LDiversityResult.LDiversityEquivalenceClass.top_sensitive_values)
  return top_sensitive_values_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2beta1::ValueFrequency >*
RiskAnalysisOperationResult_LDiversityResult_LDiversityEquivalenceClass::mutable_top_sensitive_values() {
  // @@protoc_insertion_point(field_mutable_list:google.privacy.dlp.v2beta1.RiskAnalysisOperationResult.LDiversityResult.LDiversityEquivalenceClass.top_sensitive_values)
  return &top_sensitive_values_;
}
inline const ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2beta1::ValueFrequency >&
RiskAnalysisOperationResult_LDiversityResult_LDiversityEquivalenceClass::top_sensitive_values() const {
  // @@protoc_insertion_point(field_list:google.privacy.dlp.v2beta1.RiskAnalysisOperationResult.LDiversityResult.LDiversityEquivalenceClass.top_sensitive_values)
  return top_sensitive_values_;
}

// -------------------------------------------------------------------

// RiskAnalysisOperationResult_LDiversityResult_LDiversityHistogramBucket

// int64 sensitive_value_frequency_lower_bound = 1;
inline void RiskAnalysisOperationResult_LDiversityResult_LDiversityHistogramBucket::clear_sensitive_value_frequency_lower_bound() {
  sensitive_value_frequency_lower_bound_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 RiskAnalysisOperationResult_LDiversityResult_LDiversityHistogramBucket::sensitive_value_frequency_lower_bound() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2beta1.RiskAnalysisOperationResult.LDiversityResult.LDiversityHistogramBucket.sensitive_value_frequency_lower_bound)
  return sensitive_value_frequency_lower_bound_;
}
inline void RiskAnalysisOperationResult_LDiversityResult_LDiversityHistogramBucket::set_sensitive_value_frequency_lower_bound(::google::protobuf::int64 value) {
  
  sensitive_value_frequency_lower_bound_ = value;
  // @@protoc_insertion_point(field_set:google.privacy.dlp.v2beta1.RiskAnalysisOperationResult.LDiversityResult.LDiversityHistogramBucket.sensitive_value_frequency_lower_bound)
}

// int64 sensitive_value_frequency_upper_bound = 2;
inline void RiskAnalysisOperationResult_LDiversityResult_LDiversityHistogramBucket::clear_sensitive_value_frequency_upper_bound() {
  sensitive_value_frequency_upper_bound_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 RiskAnalysisOperationResult_LDiversityResult_LDiversityHistogramBucket::sensitive_value_frequency_upper_bound() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2beta1.RiskAnalysisOperationResult.LDiversityResult.LDiversityHistogramBucket.sensitive_value_frequency_upper_bound)
  return sensitive_value_frequency_upper_bound_;
}
inline void RiskAnalysisOperationResult_LDiversityResult_LDiversityHistogramBucket::set_sensitive_value_frequency_upper_bound(::google::protobuf::int64 value) {
  
  sensitive_value_frequency_upper_bound_ = value;
  // @@protoc_insertion_point(field_set:google.privacy.dlp.v2beta1.RiskAnalysisOperationResult.LDiversityResult.LDiversityHistogramBucket.sensitive_value_frequency_upper_bound)
}

// int64 bucket_size = 3;
inline void RiskAnalysisOperationResult_LDiversityResult_LDiversityHistogramBucket::clear_bucket_size() {
  bucket_size_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 RiskAnalysisOperationResult_LDiversityResult_LDiversityHistogramBucket::bucket_size() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2beta1.RiskAnalysisOperationResult.LDiversityResult.LDiversityHistogramBucket.bucket_size)
  return bucket_size_;
}
inline void RiskAnalysisOperationResult_LDiversityResult_LDiversityHistogramBucket::set_bucket_size(::google::protobuf::int64 value) {
  
  bucket_size_ = value;
  // @@protoc_insertion_point(field_set:google.privacy.dlp.v2beta1.RiskAnalysisOperationResult.LDiversityResult.LDiversityHistogramBucket.bucket_size)
}

// repeated .google.privacy.dlp.v2beta1.RiskAnalysisOperationResult.LDiversityResult.LDiversityEquivalenceClass bucket_values = 4;
inline int RiskAnalysisOperationResult_LDiversityResult_LDiversityHistogramBucket::bucket_values_size() const {
  return bucket_values_.size();
}
inline void RiskAnalysisOperationResult_LDiversityResult_LDiversityHistogramBucket::clear_bucket_values() {
  bucket_values_.Clear();
}
inline const ::google::privacy::dlp::v2beta1::RiskAnalysisOperationResult_LDiversityResult_LDiversityEquivalenceClass& RiskAnalysisOperationResult_LDiversityResult_LDiversityHistogramBucket::bucket_values(int index) const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2beta1.RiskAnalysisOperationResult.LDiversityResult.LDiversityHistogramBucket.bucket_values)
  return bucket_values_.Get(index);
}
inline ::google::privacy::dlp::v2beta1::RiskAnalysisOperationResult_LDiversityResult_LDiversityEquivalenceClass* RiskAnalysisOperationResult_LDiversityResult_LDiversityHistogramBucket::mutable_bucket_values(int index) {
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2beta1.RiskAnalysisOperationResult.LDiversityResult.LDiversityHistogramBucket.bucket_values)
  return bucket_values_.Mutable(index);
}
inline ::google::privacy::dlp::v2beta1::RiskAnalysisOperationResult_LDiversityResult_LDiversityEquivalenceClass* RiskAnalysisOperationResult_LDiversityResult_LDiversityHistogramBucket::add_bucket_values() {
  // @@protoc_insertion_point(field_add:google.privacy.dlp.v2beta1.RiskAnalysisOperationResult.LDiversityResult.LDiversityHistogramBucket.bucket_values)
  return bucket_values_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2beta1::RiskAnalysisOperationResult_LDiversityResult_LDiversityEquivalenceClass >*
RiskAnalysisOperationResult_LDiversityResult_LDiversityHistogramBucket::mutable_bucket_values() {
  // @@protoc_insertion_point(field_mutable_list:google.privacy.dlp.v2beta1.RiskAnalysisOperationResult.LDiversityResult.LDiversityHistogramBucket.bucket_values)
  return &bucket_values_;
}
inline const ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2beta1::RiskAnalysisOperationResult_LDiversityResult_LDiversityEquivalenceClass >&
RiskAnalysisOperationResult_LDiversityResult_LDiversityHistogramBucket::bucket_values() const {
  // @@protoc_insertion_point(field_list:google.privacy.dlp.v2beta1.RiskAnalysisOperationResult.LDiversityResult.LDiversityHistogramBucket.bucket_values)
  return bucket_values_;
}

// -------------------------------------------------------------------

// RiskAnalysisOperationResult_LDiversityResult

// repeated .google.privacy.dlp.v2beta1.RiskAnalysisOperationResult.LDiversityResult.LDiversityHistogramBucket sensitive_value_frequency_histogram_buckets = 5;
inline int RiskAnalysisOperationResult_LDiversityResult::sensitive_value_frequency_histogram_buckets_size() const {
  return sensitive_value_frequency_histogram_buckets_.size();
}
inline void RiskAnalysisOperationResult_LDiversityResult::clear_sensitive_value_frequency_histogram_buckets() {
  sensitive_value_frequency_histogram_buckets_.Clear();
}
inline const ::google::privacy::dlp::v2beta1::RiskAnalysisOperationResult_LDiversityResult_LDiversityHistogramBucket& RiskAnalysisOperationResult_LDiversityResult::sensitive_value_frequency_histogram_buckets(int index) const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2beta1.RiskAnalysisOperationResult.LDiversityResult.sensitive_value_frequency_histogram_buckets)
  return sensitive_value_frequency_histogram_buckets_.Get(index);
}
inline ::google::privacy::dlp::v2beta1::RiskAnalysisOperationResult_LDiversityResult_LDiversityHistogramBucket* RiskAnalysisOperationResult_LDiversityResult::mutable_sensitive_value_frequency_histogram_buckets(int index) {
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2beta1.RiskAnalysisOperationResult.LDiversityResult.sensitive_value_frequency_histogram_buckets)
  return sensitive_value_frequency_histogram_buckets_.Mutable(index);
}
inline ::google::privacy::dlp::v2beta1::RiskAnalysisOperationResult_LDiversityResult_LDiversityHistogramBucket* RiskAnalysisOperationResult_LDiversityResult::add_sensitive_value_frequency_histogram_buckets() {
  // @@protoc_insertion_point(field_add:google.privacy.dlp.v2beta1.RiskAnalysisOperationResult.LDiversityResult.sensitive_value_frequency_histogram_buckets)
  return sensitive_value_frequency_histogram_buckets_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2beta1::RiskAnalysisOperationResult_LDiversityResult_LDiversityHistogramBucket >*
RiskAnalysisOperationResult_LDiversityResult::mutable_sensitive_value_frequency_histogram_buckets() {
  // @@protoc_insertion_point(field_mutable_list:google.privacy.dlp.v2beta1.RiskAnalysisOperationResult.LDiversityResult.sensitive_value_frequency_histogram_buckets)
  return &sensitive_value_frequency_histogram_buckets_;
}
inline const ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2beta1::RiskAnalysisOperationResult_LDiversityResult_LDiversityHistogramBucket >&
RiskAnalysisOperationResult_LDiversityResult::sensitive_value_frequency_histogram_buckets() const {
  // @@protoc_insertion_point(field_list:google.privacy.dlp.v2beta1.RiskAnalysisOperationResult.LDiversityResult.sensitive_value_frequency_histogram_buckets)
  return sensitive_value_frequency_histogram_buckets_;
}

// -------------------------------------------------------------------

// RiskAnalysisOperationResult

// .google.privacy.dlp.v2beta1.RiskAnalysisOperationResult.NumericalStatsResult numerical_stats_result = 3;
inline bool RiskAnalysisOperationResult::has_numerical_stats_result() const {
  return result_case() == kNumericalStatsResult;
}
inline void RiskAnalysisOperationResult::set_has_numerical_stats_result() {
  _oneof_case_[0] = kNumericalStatsResult;
}
inline void RiskAnalysisOperationResult::clear_numerical_stats_result() {
  if (has_numerical_stats_result()) {
    delete result_.numerical_stats_result_;
    clear_has_result();
  }
}
inline ::google::privacy::dlp::v2beta1::RiskAnalysisOperationResult_NumericalStatsResult* RiskAnalysisOperationResult::release_numerical_stats_result() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2beta1.RiskAnalysisOperationResult.numerical_stats_result)
  if (has_numerical_stats_result()) {
    clear_has_result();
      ::google::privacy::dlp::v2beta1::RiskAnalysisOperationResult_NumericalStatsResult* temp = result_.numerical_stats_result_;
    result_.numerical_stats_result_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::privacy::dlp::v2beta1::RiskAnalysisOperationResult_NumericalStatsResult& RiskAnalysisOperationResult::numerical_stats_result() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2beta1.RiskAnalysisOperationResult.numerical_stats_result)
  return has_numerical_stats_result()
      ? *result_.numerical_stats_result_
      : *reinterpret_cast< ::google::privacy::dlp::v2beta1::RiskAnalysisOperationResult_NumericalStatsResult*>(&::google::privacy::dlp::v2beta1::_RiskAnalysisOperationResult_NumericalStatsResult_default_instance_);
}
inline ::google::privacy::dlp::v2beta1::RiskAnalysisOperationResult_NumericalStatsResult* RiskAnalysisOperationResult::mutable_numerical_stats_result() {
  if (!has_numerical_stats_result()) {
    clear_result();
    set_has_numerical_stats_result();
    result_.numerical_stats_result_ = new ::google::privacy::dlp::v2beta1::RiskAnalysisOperationResult_NumericalStatsResult;
  }
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2beta1.RiskAnalysisOperationResult.numerical_stats_result)
  return result_.numerical_stats_result_;
}

// .google.privacy.dlp.v2beta1.RiskAnalysisOperationResult.CategoricalStatsResult categorical_stats_result = 4;
inline bool RiskAnalysisOperationResult::has_categorical_stats_result() const {
  return result_case() == kCategoricalStatsResult;
}
inline void RiskAnalysisOperationResult::set_has_categorical_stats_result() {
  _oneof_case_[0] = kCategoricalStatsResult;
}
inline void RiskAnalysisOperationResult::clear_categorical_stats_result() {
  if (has_categorical_stats_result()) {
    delete result_.categorical_stats_result_;
    clear_has_result();
  }
}
inline ::google::privacy::dlp::v2beta1::RiskAnalysisOperationResult_CategoricalStatsResult* RiskAnalysisOperationResult::release_categorical_stats_result() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2beta1.RiskAnalysisOperationResult.categorical_stats_result)
  if (has_categorical_stats_result()) {
    clear_has_result();
      ::google::privacy::dlp::v2beta1::RiskAnalysisOperationResult_CategoricalStatsResult* temp = result_.categorical_stats_result_;
    result_.categorical_stats_result_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::privacy::dlp::v2beta1::RiskAnalysisOperationResult_CategoricalStatsResult& RiskAnalysisOperationResult::categorical_stats_result() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2beta1.RiskAnalysisOperationResult.categorical_stats_result)
  return has_categorical_stats_result()
      ? *result_.categorical_stats_result_
      : *reinterpret_cast< ::google::privacy::dlp::v2beta1::RiskAnalysisOperationResult_CategoricalStatsResult*>(&::google::privacy::dlp::v2beta1::_RiskAnalysisOperationResult_CategoricalStatsResult_default_instance_);
}
inline ::google::privacy::dlp::v2beta1::RiskAnalysisOperationResult_CategoricalStatsResult* RiskAnalysisOperationResult::mutable_categorical_stats_result() {
  if (!has_categorical_stats_result()) {
    clear_result();
    set_has_categorical_stats_result();
    result_.categorical_stats_result_ = new ::google::privacy::dlp::v2beta1::RiskAnalysisOperationResult_CategoricalStatsResult;
  }
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2beta1.RiskAnalysisOperationResult.categorical_stats_result)
  return result_.categorical_stats_result_;
}

// .google.privacy.dlp.v2beta1.RiskAnalysisOperationResult.KAnonymityResult k_anonymity_result = 5;
inline bool RiskAnalysisOperationResult::has_k_anonymity_result() const {
  return result_case() == kKAnonymityResult;
}
inline void RiskAnalysisOperationResult::set_has_k_anonymity_result() {
  _oneof_case_[0] = kKAnonymityResult;
}
inline void RiskAnalysisOperationResult::clear_k_anonymity_result() {
  if (has_k_anonymity_result()) {
    delete result_.k_anonymity_result_;
    clear_has_result();
  }
}
inline ::google::privacy::dlp::v2beta1::RiskAnalysisOperationResult_KAnonymityResult* RiskAnalysisOperationResult::release_k_anonymity_result() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2beta1.RiskAnalysisOperationResult.k_anonymity_result)
  if (has_k_anonymity_result()) {
    clear_has_result();
      ::google::privacy::dlp::v2beta1::RiskAnalysisOperationResult_KAnonymityResult* temp = result_.k_anonymity_result_;
    result_.k_anonymity_result_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::privacy::dlp::v2beta1::RiskAnalysisOperationResult_KAnonymityResult& RiskAnalysisOperationResult::k_anonymity_result() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2beta1.RiskAnalysisOperationResult.k_anonymity_result)
  return has_k_anonymity_result()
      ? *result_.k_anonymity_result_
      : *reinterpret_cast< ::google::privacy::dlp::v2beta1::RiskAnalysisOperationResult_KAnonymityResult*>(&::google::privacy::dlp::v2beta1::_RiskAnalysisOperationResult_KAnonymityResult_default_instance_);
}
inline ::google::privacy::dlp::v2beta1::RiskAnalysisOperationResult_KAnonymityResult* RiskAnalysisOperationResult::mutable_k_anonymity_result() {
  if (!has_k_anonymity_result()) {
    clear_result();
    set_has_k_anonymity_result();
    result_.k_anonymity_result_ = new ::google::privacy::dlp::v2beta1::RiskAnalysisOperationResult_KAnonymityResult;
  }
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2beta1.RiskAnalysisOperationResult.k_anonymity_result)
  return result_.k_anonymity_result_;
}

// .google.privacy.dlp.v2beta1.RiskAnalysisOperationResult.LDiversityResult l_diversity_result = 6;
inline bool RiskAnalysisOperationResult::has_l_diversity_result() const {
  return result_case() == kLDiversityResult;
}
inline void RiskAnalysisOperationResult::set_has_l_diversity_result() {
  _oneof_case_[0] = kLDiversityResult;
}
inline void RiskAnalysisOperationResult::clear_l_diversity_result() {
  if (has_l_diversity_result()) {
    delete result_.l_diversity_result_;
    clear_has_result();
  }
}
inline ::google::privacy::dlp::v2beta1::RiskAnalysisOperationResult_LDiversityResult* RiskAnalysisOperationResult::release_l_diversity_result() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2beta1.RiskAnalysisOperationResult.l_diversity_result)
  if (has_l_diversity_result()) {
    clear_has_result();
      ::google::privacy::dlp::v2beta1::RiskAnalysisOperationResult_LDiversityResult* temp = result_.l_diversity_result_;
    result_.l_diversity_result_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::privacy::dlp::v2beta1::RiskAnalysisOperationResult_LDiversityResult& RiskAnalysisOperationResult::l_diversity_result() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2beta1.RiskAnalysisOperationResult.l_diversity_result)
  return has_l_diversity_result()
      ? *result_.l_diversity_result_
      : *reinterpret_cast< ::google::privacy::dlp::v2beta1::RiskAnalysisOperationResult_LDiversityResult*>(&::google::privacy::dlp::v2beta1::_RiskAnalysisOperationResult_LDiversityResult_default_instance_);
}
inline ::google::privacy::dlp::v2beta1::RiskAnalysisOperationResult_LDiversityResult* RiskAnalysisOperationResult::mutable_l_diversity_result() {
  if (!has_l_diversity_result()) {
    clear_result();
    set_has_l_diversity_result();
    result_.l_diversity_result_ = new ::google::privacy::dlp::v2beta1::RiskAnalysisOperationResult_LDiversityResult;
  }
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2beta1.RiskAnalysisOperationResult.l_diversity_result)
  return result_.l_diversity_result_;
}

inline bool RiskAnalysisOperationResult::has_result() const {
  return result_case() != RESULT_NOT_SET;
}
inline void RiskAnalysisOperationResult::clear_has_result() {
  _oneof_case_[0] = RESULT_NOT_SET;
}
inline RiskAnalysisOperationResult::ResultCase RiskAnalysisOperationResult::result_case() const {
  return RiskAnalysisOperationResult::ResultCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// ValueFrequency

// .google.privacy.dlp.v2beta1.Value value = 1;
inline bool ValueFrequency::has_value() const {
  return this != internal_default_instance() && value_ != NULL;
}
inline void ValueFrequency::clear_value() {
  if (GetArenaNoVirtual() == NULL && value_ != NULL) {
    delete value_;
  }
  value_ = NULL;
}
inline const ::google::privacy::dlp::v2beta1::Value& ValueFrequency::value() const {
  const ::google::privacy::dlp::v2beta1::Value* p = value_;
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2beta1.ValueFrequency.value)
  return p != NULL ? *p : *reinterpret_cast<const ::google::privacy::dlp::v2beta1::Value*>(
      &::google::privacy::dlp::v2beta1::_Value_default_instance_);
}
inline ::google::privacy::dlp::v2beta1::Value* ValueFrequency::release_value() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2beta1.ValueFrequency.value)
  
  ::google::privacy::dlp::v2beta1::Value* temp = value_;
  value_ = NULL;
  return temp;
}
inline ::google::privacy::dlp::v2beta1::Value* ValueFrequency::mutable_value() {
  
  if (value_ == NULL) {
    value_ = new ::google::privacy::dlp::v2beta1::Value;
  }
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2beta1.ValueFrequency.value)
  return value_;
}
inline void ValueFrequency::set_allocated_value(::google::privacy::dlp::v2beta1::Value* value) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete value_;
  }
  if (value) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, value, submessage_arena);
    }
    
  } else {
    
  }
  value_ = value;
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2beta1.ValueFrequency.value)
}

// int64 count = 2;
inline void ValueFrequency::clear_count() {
  count_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 ValueFrequency::count() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2beta1.ValueFrequency.count)
  return count_;
}
inline void ValueFrequency::set_count(::google::protobuf::int64 value) {
  
  count_ = value;
  // @@protoc_insertion_point(field_set:google.privacy.dlp.v2beta1.ValueFrequency.count)
}

// -------------------------------------------------------------------

// Value

// int64 integer_value = 1;
inline bool Value::has_integer_value() const {
  return type_case() == kIntegerValue;
}
inline void Value::set_has_integer_value() {
  _oneof_case_[0] = kIntegerValue;
}
inline void Value::clear_integer_value() {
  if (has_integer_value()) {
    type_.integer_value_ = GOOGLE_LONGLONG(0);
    clear_has_type();
  }
}
inline ::google::protobuf::int64 Value::integer_value() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2beta1.Value.integer_value)
  if (has_integer_value()) {
    return type_.integer_value_;
  }
  return GOOGLE_LONGLONG(0);
}
inline void Value::set_integer_value(::google::protobuf::int64 value) {
  if (!has_integer_value()) {
    clear_type();
    set_has_integer_value();
  }
  type_.integer_value_ = value;
  // @@protoc_insertion_point(field_set:google.privacy.dlp.v2beta1.Value.integer_value)
}

// double float_value = 2;
inline bool Value::has_float_value() const {
  return type_case() == kFloatValue;
}
inline void Value::set_has_float_value() {
  _oneof_case_[0] = kFloatValue;
}
inline void Value::clear_float_value() {
  if (has_float_value()) {
    type_.float_value_ = 0;
    clear_has_type();
  }
}
inline double Value::float_value() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2beta1.Value.float_value)
  if (has_float_value()) {
    return type_.float_value_;
  }
  return 0;
}
inline void Value::set_float_value(double value) {
  if (!has_float_value()) {
    clear_type();
    set_has_float_value();
  }
  type_.float_value_ = value;
  // @@protoc_insertion_point(field_set:google.privacy.dlp.v2beta1.Value.float_value)
}

// string string_value = 3;
inline bool Value::has_string_value() const {
  return type_case() == kStringValue;
}
inline void Value::set_has_string_value() {
  _oneof_case_[0] = kStringValue;
}
inline void Value::clear_string_value() {
  if (has_string_value()) {
    type_.string_value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_type();
  }
}
inline const ::std::string& Value::string_value() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2beta1.Value.string_value)
  if (has_string_value()) {
    return type_.string_value_.GetNoArena();
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
inline void Value::set_string_value(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:google.privacy.dlp.v2beta1.Value.string_value)
  if (!has_string_value()) {
    clear_type();
    set_has_string_value();
    type_.string_value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  type_.string_value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.privacy.dlp.v2beta1.Value.string_value)
}
#if LANG_CXX11
inline void Value::set_string_value(::std::string&& value) {
  // @@protoc_insertion_point(field_set:google.privacy.dlp.v2beta1.Value.string_value)
  if (!has_string_value()) {
    clear_type();
    set_has_string_value();
    type_.string_value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  type_.string_value_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.privacy.dlp.v2beta1.Value.string_value)
}
#endif
inline void Value::set_string_value(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  if (!has_string_value()) {
    clear_type();
    set_has_string_value();
    type_.string_value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  type_.string_value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.privacy.dlp.v2beta1.Value.string_value)
}
inline void Value::set_string_value(const char* value, size_t size) {
  if (!has_string_value()) {
    clear_type();
    set_has_string_value();
    type_.string_value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  type_.string_value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.privacy.dlp.v2beta1.Value.string_value)
}
inline ::std::string* Value::mutable_string_value() {
  if (!has_string_value()) {
    clear_type();
    set_has_string_value();
    type_.string_value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2beta1.Value.string_value)
  return type_.string_value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Value::release_string_value() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2beta1.Value.string_value)
  if (has_string_value()) {
    clear_has_type();
    return type_.string_value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
inline void Value::set_allocated_string_value(::std::string* string_value) {
  if (!has_string_value()) {
    type_.string_value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_type();
  if (string_value != NULL) {
    set_has_string_value();
    type_.string_value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        string_value);
  }
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2beta1.Value.string_value)
}

// bool boolean_value = 4;
inline bool Value::has_boolean_value() const {
  return type_case() == kBooleanValue;
}
inline void Value::set_has_boolean_value() {
  _oneof_case_[0] = kBooleanValue;
}
inline void Value::clear_boolean_value() {
  if (has_boolean_value()) {
    type_.boolean_value_ = false;
    clear_has_type();
  }
}
inline bool Value::boolean_value() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2beta1.Value.boolean_value)
  if (has_boolean_value()) {
    return type_.boolean_value_;
  }
  return false;
}
inline void Value::set_boolean_value(bool value) {
  if (!has_boolean_value()) {
    clear_type();
    set_has_boolean_value();
  }
  type_.boolean_value_ = value;
  // @@protoc_insertion_point(field_set:google.privacy.dlp.v2beta1.Value.boolean_value)
}

// .google.protobuf.Timestamp timestamp_value = 5;
inline bool Value::has_timestamp_value() const {
  return type_case() == kTimestampValue;
}
inline void Value::set_has_timestamp_value() {
  _oneof_case_[0] = kTimestampValue;
}
inline ::google::protobuf::Timestamp* Value::release_timestamp_value() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2beta1.Value.timestamp_value)
  if (has_timestamp_value()) {
    clear_has_type();
      ::google::protobuf::Timestamp* temp = type_.timestamp_value_;
    type_.timestamp_value_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::protobuf::Timestamp& Value::timestamp_value() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2beta1.Value.timestamp_value)
  return has_timestamp_value()
      ? *type_.timestamp_value_
      : *reinterpret_cast< ::google::protobuf::Timestamp*>(&::google::protobuf::_Timestamp_default_instance_);
}
inline ::google::protobuf::Timestamp* Value::mutable_timestamp_value() {
  if (!has_timestamp_value()) {
    clear_type();
    set_has_timestamp_value();
    type_.timestamp_value_ = new ::google::protobuf::Timestamp;
  }
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2beta1.Value.timestamp_value)
  return type_.timestamp_value_;
}

// .google.type.TimeOfDay time_value = 6;
inline bool Value::has_time_value() const {
  return type_case() == kTimeValue;
}
inline void Value::set_has_time_value() {
  _oneof_case_[0] = kTimeValue;
}
inline ::google::type::TimeOfDay* Value::release_time_value() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2beta1.Value.time_value)
  if (has_time_value()) {
    clear_has_type();
      ::google::type::TimeOfDay* temp = type_.time_value_;
    type_.time_value_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::type::TimeOfDay& Value::time_value() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2beta1.Value.time_value)
  return has_time_value()
      ? *type_.time_value_
      : *reinterpret_cast< ::google::type::TimeOfDay*>(&::google::type::_TimeOfDay_default_instance_);
}
inline ::google::type::TimeOfDay* Value::mutable_time_value() {
  if (!has_time_value()) {
    clear_type();
    set_has_time_value();
    type_.time_value_ = new ::google::type::TimeOfDay;
  }
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2beta1.Value.time_value)
  return type_.time_value_;
}

// .google.type.Date date_value = 7;
inline bool Value::has_date_value() const {
  return type_case() == kDateValue;
}
inline void Value::set_has_date_value() {
  _oneof_case_[0] = kDateValue;
}
inline ::google::type::Date* Value::release_date_value() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2beta1.Value.date_value)
  if (has_date_value()) {
    clear_has_type();
      ::google::type::Date* temp = type_.date_value_;
    type_.date_value_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::type::Date& Value::date_value() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2beta1.Value.date_value)
  return has_date_value()
      ? *type_.date_value_
      : *reinterpret_cast< ::google::type::Date*>(&::google::type::_Date_default_instance_);
}
inline ::google::type::Date* Value::mutable_date_value() {
  if (!has_date_value()) {
    clear_type();
    set_has_date_value();
    type_.date_value_ = new ::google::type::Date;
  }
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2beta1.Value.date_value)
  return type_.date_value_;
}

inline bool Value::has_type() const {
  return type_case() != TYPE_NOT_SET;
}
inline void Value::clear_has_type() {
  _oneof_case_[0] = TYPE_NOT_SET;
}
inline Value::TypeCase Value::type_case() const {
  return Value::TypeCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// DeidentifyConfig

// .google.privacy.dlp.v2beta1.InfoTypeTransformations info_type_transformations = 1;
inline bool DeidentifyConfig::has_info_type_transformations() const {
  return transformation_case() == kInfoTypeTransformations;
}
inline void DeidentifyConfig::set_has_info_type_transformations() {
  _oneof_case_[0] = kInfoTypeTransformations;
}
inline void DeidentifyConfig::clear_info_type_transformations() {
  if (has_info_type_transformations()) {
    delete transformation_.info_type_transformations_;
    clear_has_transformation();
  }
}
inline ::google::privacy::dlp::v2beta1::InfoTypeTransformations* DeidentifyConfig::release_info_type_transformations() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2beta1.DeidentifyConfig.info_type_transformations)
  if (has_info_type_transformations()) {
    clear_has_transformation();
      ::google::privacy::dlp::v2beta1::InfoTypeTransformations* temp = transformation_.info_type_transformations_;
    transformation_.info_type_transformations_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::privacy::dlp::v2beta1::InfoTypeTransformations& DeidentifyConfig::info_type_transformations() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2beta1.DeidentifyConfig.info_type_transformations)
  return has_info_type_transformations()
      ? *transformation_.info_type_transformations_
      : *reinterpret_cast< ::google::privacy::dlp::v2beta1::InfoTypeTransformations*>(&::google::privacy::dlp::v2beta1::_InfoTypeTransformations_default_instance_);
}
inline ::google::privacy::dlp::v2beta1::InfoTypeTransformations* DeidentifyConfig::mutable_info_type_transformations() {
  if (!has_info_type_transformations()) {
    clear_transformation();
    set_has_info_type_transformations();
    transformation_.info_type_transformations_ = new ::google::privacy::dlp::v2beta1::InfoTypeTransformations;
  }
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2beta1.DeidentifyConfig.info_type_transformations)
  return transformation_.info_type_transformations_;
}

// .google.privacy.dlp.v2beta1.RecordTransformations record_transformations = 2;
inline bool DeidentifyConfig::has_record_transformations() const {
  return transformation_case() == kRecordTransformations;
}
inline void DeidentifyConfig::set_has_record_transformations() {
  _oneof_case_[0] = kRecordTransformations;
}
inline void DeidentifyConfig::clear_record_transformations() {
  if (has_record_transformations()) {
    delete transformation_.record_transformations_;
    clear_has_transformation();
  }
}
inline ::google::privacy::dlp::v2beta1::RecordTransformations* DeidentifyConfig::release_record_transformations() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2beta1.DeidentifyConfig.record_transformations)
  if (has_record_transformations()) {
    clear_has_transformation();
      ::google::privacy::dlp::v2beta1::RecordTransformations* temp = transformation_.record_transformations_;
    transformation_.record_transformations_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::privacy::dlp::v2beta1::RecordTransformations& DeidentifyConfig::record_transformations() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2beta1.DeidentifyConfig.record_transformations)
  return has_record_transformations()
      ? *transformation_.record_transformations_
      : *reinterpret_cast< ::google::privacy::dlp::v2beta1::RecordTransformations*>(&::google::privacy::dlp::v2beta1::_RecordTransformations_default_instance_);
}
inline ::google::privacy::dlp::v2beta1::RecordTransformations* DeidentifyConfig::mutable_record_transformations() {
  if (!has_record_transformations()) {
    clear_transformation();
    set_has_record_transformations();
    transformation_.record_transformations_ = new ::google::privacy::dlp::v2beta1::RecordTransformations;
  }
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2beta1.DeidentifyConfig.record_transformations)
  return transformation_.record_transformations_;
}

inline bool DeidentifyConfig::has_transformation() const {
  return transformation_case() != TRANSFORMATION_NOT_SET;
}
inline void DeidentifyConfig::clear_has_transformation() {
  _oneof_case_[0] = TRANSFORMATION_NOT_SET;
}
inline DeidentifyConfig::TransformationCase DeidentifyConfig::transformation_case() const {
  return DeidentifyConfig::TransformationCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// PrimitiveTransformation

// .google.privacy.dlp.v2beta1.ReplaceValueConfig replace_config = 1;
inline bool PrimitiveTransformation::has_replace_config() const {
  return transformation_case() == kReplaceConfig;
}
inline void PrimitiveTransformation::set_has_replace_config() {
  _oneof_case_[0] = kReplaceConfig;
}
inline void PrimitiveTransformation::clear_replace_config() {
  if (has_replace_config()) {
    delete transformation_.replace_config_;
    clear_has_transformation();
  }
}
inline ::google::privacy::dlp::v2beta1::ReplaceValueConfig* PrimitiveTransformation::release_replace_config() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2beta1.PrimitiveTransformation.replace_config)
  if (has_replace_config()) {
    clear_has_transformation();
      ::google::privacy::dlp::v2beta1::ReplaceValueConfig* temp = transformation_.replace_config_;
    transformation_.replace_config_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::privacy::dlp::v2beta1::ReplaceValueConfig& PrimitiveTransformation::replace_config() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2beta1.PrimitiveTransformation.replace_config)
  return has_replace_config()
      ? *transformation_.replace_config_
      : *reinterpret_cast< ::google::privacy::dlp::v2beta1::ReplaceValueConfig*>(&::google::privacy::dlp::v2beta1::_ReplaceValueConfig_default_instance_);
}
inline ::google::privacy::dlp::v2beta1::ReplaceValueConfig* PrimitiveTransformation::mutable_replace_config() {
  if (!has_replace_config()) {
    clear_transformation();
    set_has_replace_config();
    transformation_.replace_config_ = new ::google::privacy::dlp::v2beta1::ReplaceValueConfig;
  }
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2beta1.PrimitiveTransformation.replace_config)
  return transformation_.replace_config_;
}

// .google.privacy.dlp.v2beta1.RedactConfig redact_config = 2;
inline bool PrimitiveTransformation::has_redact_config() const {
  return transformation_case() == kRedactConfig;
}
inline void PrimitiveTransformation::set_has_redact_config() {
  _oneof_case_[0] = kRedactConfig;
}
inline void PrimitiveTransformation::clear_redact_config() {
  if (has_redact_config()) {
    delete transformation_.redact_config_;
    clear_has_transformation();
  }
}
inline ::google::privacy::dlp::v2beta1::RedactConfig* PrimitiveTransformation::release_redact_config() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2beta1.PrimitiveTransformation.redact_config)
  if (has_redact_config()) {
    clear_has_transformation();
      ::google::privacy::dlp::v2beta1::RedactConfig* temp = transformation_.redact_config_;
    transformation_.redact_config_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::privacy::dlp::v2beta1::RedactConfig& PrimitiveTransformation::redact_config() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2beta1.PrimitiveTransformation.redact_config)
  return has_redact_config()
      ? *transformation_.redact_config_
      : *reinterpret_cast< ::google::privacy::dlp::v2beta1::RedactConfig*>(&::google::privacy::dlp::v2beta1::_RedactConfig_default_instance_);
}
inline ::google::privacy::dlp::v2beta1::RedactConfig* PrimitiveTransformation::mutable_redact_config() {
  if (!has_redact_config()) {
    clear_transformation();
    set_has_redact_config();
    transformation_.redact_config_ = new ::google::privacy::dlp::v2beta1::RedactConfig;
  }
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2beta1.PrimitiveTransformation.redact_config)
  return transformation_.redact_config_;
}

// .google.privacy.dlp.v2beta1.CharacterMaskConfig character_mask_config = 3;
inline bool PrimitiveTransformation::has_character_mask_config() const {
  return transformation_case() == kCharacterMaskConfig;
}
inline void PrimitiveTransformation::set_has_character_mask_config() {
  _oneof_case_[0] = kCharacterMaskConfig;
}
inline void PrimitiveTransformation::clear_character_mask_config() {
  if (has_character_mask_config()) {
    delete transformation_.character_mask_config_;
    clear_has_transformation();
  }
}
inline ::google::privacy::dlp::v2beta1::CharacterMaskConfig* PrimitiveTransformation::release_character_mask_config() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2beta1.PrimitiveTransformation.character_mask_config)
  if (has_character_mask_config()) {
    clear_has_transformation();
      ::google::privacy::dlp::v2beta1::CharacterMaskConfig* temp = transformation_.character_mask_config_;
    transformation_.character_mask_config_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::privacy::dlp::v2beta1::CharacterMaskConfig& PrimitiveTransformation::character_mask_config() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2beta1.PrimitiveTransformation.character_mask_config)
  return has_character_mask_config()
      ? *transformation_.character_mask_config_
      : *reinterpret_cast< ::google::privacy::dlp::v2beta1::CharacterMaskConfig*>(&::google::privacy::dlp::v2beta1::_CharacterMaskConfig_default_instance_);
}
inline ::google::privacy::dlp::v2beta1::CharacterMaskConfig* PrimitiveTransformation::mutable_character_mask_config() {
  if (!has_character_mask_config()) {
    clear_transformation();
    set_has_character_mask_config();
    transformation_.character_mask_config_ = new ::google::privacy::dlp::v2beta1::CharacterMaskConfig;
  }
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2beta1.PrimitiveTransformation.character_mask_config)
  return transformation_.character_mask_config_;
}

// .google.privacy.dlp.v2beta1.CryptoReplaceFfxFpeConfig crypto_replace_ffx_fpe_config = 4;
inline bool PrimitiveTransformation::has_crypto_replace_ffx_fpe_config() const {
  return transformation_case() == kCryptoReplaceFfxFpeConfig;
}
inline void PrimitiveTransformation::set_has_crypto_replace_ffx_fpe_config() {
  _oneof_case_[0] = kCryptoReplaceFfxFpeConfig;
}
inline void PrimitiveTransformation::clear_crypto_replace_ffx_fpe_config() {
  if (has_crypto_replace_ffx_fpe_config()) {
    delete transformation_.crypto_replace_ffx_fpe_config_;
    clear_has_transformation();
  }
}
inline ::google::privacy::dlp::v2beta1::CryptoReplaceFfxFpeConfig* PrimitiveTransformation::release_crypto_replace_ffx_fpe_config() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2beta1.PrimitiveTransformation.crypto_replace_ffx_fpe_config)
  if (has_crypto_replace_ffx_fpe_config()) {
    clear_has_transformation();
      ::google::privacy::dlp::v2beta1::CryptoReplaceFfxFpeConfig* temp = transformation_.crypto_replace_ffx_fpe_config_;
    transformation_.crypto_replace_ffx_fpe_config_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::privacy::dlp::v2beta1::CryptoReplaceFfxFpeConfig& PrimitiveTransformation::crypto_replace_ffx_fpe_config() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2beta1.PrimitiveTransformation.crypto_replace_ffx_fpe_config)
  return has_crypto_replace_ffx_fpe_config()
      ? *transformation_.crypto_replace_ffx_fpe_config_
      : *reinterpret_cast< ::google::privacy::dlp::v2beta1::CryptoReplaceFfxFpeConfig*>(&::google::privacy::dlp::v2beta1::_CryptoReplaceFfxFpeConfig_default_instance_);
}
inline ::google::privacy::dlp::v2beta1::CryptoReplaceFfxFpeConfig* PrimitiveTransformation::mutable_crypto_replace_ffx_fpe_config() {
  if (!has_crypto_replace_ffx_fpe_config()) {
    clear_transformation();
    set_has_crypto_replace_ffx_fpe_config();
    transformation_.crypto_replace_ffx_fpe_config_ = new ::google::privacy::dlp::v2beta1::CryptoReplaceFfxFpeConfig;
  }
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2beta1.PrimitiveTransformation.crypto_replace_ffx_fpe_config)
  return transformation_.crypto_replace_ffx_fpe_config_;
}

// .google.privacy.dlp.v2beta1.FixedSizeBucketingConfig fixed_size_bucketing_config = 5;
inline bool PrimitiveTransformation::has_fixed_size_bucketing_config() const {
  return transformation_case() == kFixedSizeBucketingConfig;
}
inline void PrimitiveTransformation::set_has_fixed_size_bucketing_config() {
  _oneof_case_[0] = kFixedSizeBucketingConfig;
}
inline void PrimitiveTransformation::clear_fixed_size_bucketing_config() {
  if (has_fixed_size_bucketing_config()) {
    delete transformation_.fixed_size_bucketing_config_;
    clear_has_transformation();
  }
}
inline ::google::privacy::dlp::v2beta1::FixedSizeBucketingConfig* PrimitiveTransformation::release_fixed_size_bucketing_config() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2beta1.PrimitiveTransformation.fixed_size_bucketing_config)
  if (has_fixed_size_bucketing_config()) {
    clear_has_transformation();
      ::google::privacy::dlp::v2beta1::FixedSizeBucketingConfig* temp = transformation_.fixed_size_bucketing_config_;
    transformation_.fixed_size_bucketing_config_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::privacy::dlp::v2beta1::FixedSizeBucketingConfig& PrimitiveTransformation::fixed_size_bucketing_config() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2beta1.PrimitiveTransformation.fixed_size_bucketing_config)
  return has_fixed_size_bucketing_config()
      ? *transformation_.fixed_size_bucketing_config_
      : *reinterpret_cast< ::google::privacy::dlp::v2beta1::FixedSizeBucketingConfig*>(&::google::privacy::dlp::v2beta1::_FixedSizeBucketingConfig_default_instance_);
}
inline ::google::privacy::dlp::v2beta1::FixedSizeBucketingConfig* PrimitiveTransformation::mutable_fixed_size_bucketing_config() {
  if (!has_fixed_size_bucketing_config()) {
    clear_transformation();
    set_has_fixed_size_bucketing_config();
    transformation_.fixed_size_bucketing_config_ = new ::google::privacy::dlp::v2beta1::FixedSizeBucketingConfig;
  }
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2beta1.PrimitiveTransformation.fixed_size_bucketing_config)
  return transformation_.fixed_size_bucketing_config_;
}

// .google.privacy.dlp.v2beta1.BucketingConfig bucketing_config = 6;
inline bool PrimitiveTransformation::has_bucketing_config() const {
  return transformation_case() == kBucketingConfig;
}
inline void PrimitiveTransformation::set_has_bucketing_config() {
  _oneof_case_[0] = kBucketingConfig;
}
inline void PrimitiveTransformation::clear_bucketing_config() {
  if (has_bucketing_config()) {
    delete transformation_.bucketing_config_;
    clear_has_transformation();
  }
}
inline ::google::privacy::dlp::v2beta1::BucketingConfig* PrimitiveTransformation::release_bucketing_config() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2beta1.PrimitiveTransformation.bucketing_config)
  if (has_bucketing_config()) {
    clear_has_transformation();
      ::google::privacy::dlp::v2beta1::BucketingConfig* temp = transformation_.bucketing_config_;
    transformation_.bucketing_config_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::privacy::dlp::v2beta1::BucketingConfig& PrimitiveTransformation::bucketing_config() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2beta1.PrimitiveTransformation.bucketing_config)
  return has_bucketing_config()
      ? *transformation_.bucketing_config_
      : *reinterpret_cast< ::google::privacy::dlp::v2beta1::BucketingConfig*>(&::google::privacy::dlp::v2beta1::_BucketingConfig_default_instance_);
}
inline ::google::privacy::dlp::v2beta1::BucketingConfig* PrimitiveTransformation::mutable_bucketing_config() {
  if (!has_bucketing_config()) {
    clear_transformation();
    set_has_bucketing_config();
    transformation_.bucketing_config_ = new ::google::privacy::dlp::v2beta1::BucketingConfig;
  }
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2beta1.PrimitiveTransformation.bucketing_config)
  return transformation_.bucketing_config_;
}

// .google.privacy.dlp.v2beta1.ReplaceWithInfoTypeConfig replace_with_info_type_config = 7;
inline bool PrimitiveTransformation::has_replace_with_info_type_config() const {
  return transformation_case() == kReplaceWithInfoTypeConfig;
}
inline void PrimitiveTransformation::set_has_replace_with_info_type_config() {
  _oneof_case_[0] = kReplaceWithInfoTypeConfig;
}
inline void PrimitiveTransformation::clear_replace_with_info_type_config() {
  if (has_replace_with_info_type_config()) {
    delete transformation_.replace_with_info_type_config_;
    clear_has_transformation();
  }
}
inline ::google::privacy::dlp::v2beta1::ReplaceWithInfoTypeConfig* PrimitiveTransformation::release_replace_with_info_type_config() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2beta1.PrimitiveTransformation.replace_with_info_type_config)
  if (has_replace_with_info_type_config()) {
    clear_has_transformation();
      ::google::privacy::dlp::v2beta1::ReplaceWithInfoTypeConfig* temp = transformation_.replace_with_info_type_config_;
    transformation_.replace_with_info_type_config_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::privacy::dlp::v2beta1::ReplaceWithInfoTypeConfig& PrimitiveTransformation::replace_with_info_type_config() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2beta1.PrimitiveTransformation.replace_with_info_type_config)
  return has_replace_with_info_type_config()
      ? *transformation_.replace_with_info_type_config_
      : *reinterpret_cast< ::google::privacy::dlp::v2beta1::ReplaceWithInfoTypeConfig*>(&::google::privacy::dlp::v2beta1::_ReplaceWithInfoTypeConfig_default_instance_);
}
inline ::google::privacy::dlp::v2beta1::ReplaceWithInfoTypeConfig* PrimitiveTransformation::mutable_replace_with_info_type_config() {
  if (!has_replace_with_info_type_config()) {
    clear_transformation();
    set_has_replace_with_info_type_config();
    transformation_.replace_with_info_type_config_ = new ::google::privacy::dlp::v2beta1::ReplaceWithInfoTypeConfig;
  }
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2beta1.PrimitiveTransformation.replace_with_info_type_config)
  return transformation_.replace_with_info_type_config_;
}

// .google.privacy.dlp.v2beta1.TimePartConfig time_part_config = 8;
inline bool PrimitiveTransformation::has_time_part_config() const {
  return transformation_case() == kTimePartConfig;
}
inline void PrimitiveTransformation::set_has_time_part_config() {
  _oneof_case_[0] = kTimePartConfig;
}
inline void PrimitiveTransformation::clear_time_part_config() {
  if (has_time_part_config()) {
    delete transformation_.time_part_config_;
    clear_has_transformation();
  }
}
inline ::google::privacy::dlp::v2beta1::TimePartConfig* PrimitiveTransformation::release_time_part_config() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2beta1.PrimitiveTransformation.time_part_config)
  if (has_time_part_config()) {
    clear_has_transformation();
      ::google::privacy::dlp::v2beta1::TimePartConfig* temp = transformation_.time_part_config_;
    transformation_.time_part_config_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::privacy::dlp::v2beta1::TimePartConfig& PrimitiveTransformation::time_part_config() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2beta1.PrimitiveTransformation.time_part_config)
  return has_time_part_config()
      ? *transformation_.time_part_config_
      : *reinterpret_cast< ::google::privacy::dlp::v2beta1::TimePartConfig*>(&::google::privacy::dlp::v2beta1::_TimePartConfig_default_instance_);
}
inline ::google::privacy::dlp::v2beta1::TimePartConfig* PrimitiveTransformation::mutable_time_part_config() {
  if (!has_time_part_config()) {
    clear_transformation();
    set_has_time_part_config();
    transformation_.time_part_config_ = new ::google::privacy::dlp::v2beta1::TimePartConfig;
  }
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2beta1.PrimitiveTransformation.time_part_config)
  return transformation_.time_part_config_;
}

// .google.privacy.dlp.v2beta1.CryptoHashConfig crypto_hash_config = 9;
inline bool PrimitiveTransformation::has_crypto_hash_config() const {
  return transformation_case() == kCryptoHashConfig;
}
inline void PrimitiveTransformation::set_has_crypto_hash_config() {
  _oneof_case_[0] = kCryptoHashConfig;
}
inline void PrimitiveTransformation::clear_crypto_hash_config() {
  if (has_crypto_hash_config()) {
    delete transformation_.crypto_hash_config_;
    clear_has_transformation();
  }
}
inline ::google::privacy::dlp::v2beta1::CryptoHashConfig* PrimitiveTransformation::release_crypto_hash_config() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2beta1.PrimitiveTransformation.crypto_hash_config)
  if (has_crypto_hash_config()) {
    clear_has_transformation();
      ::google::privacy::dlp::v2beta1::CryptoHashConfig* temp = transformation_.crypto_hash_config_;
    transformation_.crypto_hash_config_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::privacy::dlp::v2beta1::CryptoHashConfig& PrimitiveTransformation::crypto_hash_config() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2beta1.PrimitiveTransformation.crypto_hash_config)
  return has_crypto_hash_config()
      ? *transformation_.crypto_hash_config_
      : *reinterpret_cast< ::google::privacy::dlp::v2beta1::CryptoHashConfig*>(&::google::privacy::dlp::v2beta1::_CryptoHashConfig_default_instance_);
}
inline ::google::privacy::dlp::v2beta1::CryptoHashConfig* PrimitiveTransformation::mutable_crypto_hash_config() {
  if (!has_crypto_hash_config()) {
    clear_transformation();
    set_has_crypto_hash_config();
    transformation_.crypto_hash_config_ = new ::google::privacy::dlp::v2beta1::CryptoHashConfig;
  }
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2beta1.PrimitiveTransformation.crypto_hash_config)
  return transformation_.crypto_hash_config_;
}

inline bool PrimitiveTransformation::has_transformation() const {
  return transformation_case() != TRANSFORMATION_NOT_SET;
}
inline void PrimitiveTransformation::clear_has_transformation() {
  _oneof_case_[0] = TRANSFORMATION_NOT_SET;
}
inline PrimitiveTransformation::TransformationCase PrimitiveTransformation::transformation_case() const {
  return PrimitiveTransformation::TransformationCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// TimePartConfig

// .google.privacy.dlp.v2beta1.TimePartConfig.TimePart part_to_extract = 1;
inline void TimePartConfig::clear_part_to_extract() {
  part_to_extract_ = 0;
}
inline ::google::privacy::dlp::v2beta1::TimePartConfig_TimePart TimePartConfig::part_to_extract() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2beta1.TimePartConfig.part_to_extract)
  return static_cast< ::google::privacy::dlp::v2beta1::TimePartConfig_TimePart >(part_to_extract_);
}
inline void TimePartConfig::set_part_to_extract(::google::privacy::dlp::v2beta1::TimePartConfig_TimePart value) {
  
  part_to_extract_ = value;
  // @@protoc_insertion_point(field_set:google.privacy.dlp.v2beta1.TimePartConfig.part_to_extract)
}

// -------------------------------------------------------------------

// CryptoHashConfig

// .google.privacy.dlp.v2beta1.CryptoKey crypto_key = 1;
inline bool CryptoHashConfig::has_crypto_key() const {
  return this != internal_default_instance() && crypto_key_ != NULL;
}
inline void CryptoHashConfig::clear_crypto_key() {
  if (GetArenaNoVirtual() == NULL && crypto_key_ != NULL) {
    delete crypto_key_;
  }
  crypto_key_ = NULL;
}
inline const ::google::privacy::dlp::v2beta1::CryptoKey& CryptoHashConfig::crypto_key() const {
  const ::google::privacy::dlp::v2beta1::CryptoKey* p = crypto_key_;
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2beta1.CryptoHashConfig.crypto_key)
  return p != NULL ? *p : *reinterpret_cast<const ::google::privacy::dlp::v2beta1::CryptoKey*>(
      &::google::privacy::dlp::v2beta1::_CryptoKey_default_instance_);
}
inline ::google::privacy::dlp::v2beta1::CryptoKey* CryptoHashConfig::release_crypto_key() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2beta1.CryptoHashConfig.crypto_key)
  
  ::google::privacy::dlp::v2beta1::CryptoKey* temp = crypto_key_;
  crypto_key_ = NULL;
  return temp;
}
inline ::google::privacy::dlp::v2beta1::CryptoKey* CryptoHashConfig::mutable_crypto_key() {
  
  if (crypto_key_ == NULL) {
    crypto_key_ = new ::google::privacy::dlp::v2beta1::CryptoKey;
  }
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2beta1.CryptoHashConfig.crypto_key)
  return crypto_key_;
}
inline void CryptoHashConfig::set_allocated_crypto_key(::google::privacy::dlp::v2beta1::CryptoKey* crypto_key) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete crypto_key_;
  }
  if (crypto_key) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      crypto_key = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, crypto_key, submessage_arena);
    }
    
  } else {
    
  }
  crypto_key_ = crypto_key;
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2beta1.CryptoHashConfig.crypto_key)
}

// -------------------------------------------------------------------

// ReplaceValueConfig

// .google.privacy.dlp.v2beta1.Value new_value = 1;
inline bool ReplaceValueConfig::has_new_value() const {
  return this != internal_default_instance() && new_value_ != NULL;
}
inline void ReplaceValueConfig::clear_new_value() {
  if (GetArenaNoVirtual() == NULL && new_value_ != NULL) {
    delete new_value_;
  }
  new_value_ = NULL;
}
inline const ::google::privacy::dlp::v2beta1::Value& ReplaceValueConfig::new_value() const {
  const ::google::privacy::dlp::v2beta1::Value* p = new_value_;
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2beta1.ReplaceValueConfig.new_value)
  return p != NULL ? *p : *reinterpret_cast<const ::google::privacy::dlp::v2beta1::Value*>(
      &::google::privacy::dlp::v2beta1::_Value_default_instance_);
}
inline ::google::privacy::dlp::v2beta1::Value* ReplaceValueConfig::release_new_value() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2beta1.ReplaceValueConfig.new_value)
  
  ::google::privacy::dlp::v2beta1::Value* temp = new_value_;
  new_value_ = NULL;
  return temp;
}
inline ::google::privacy::dlp::v2beta1::Value* ReplaceValueConfig::mutable_new_value() {
  
  if (new_value_ == NULL) {
    new_value_ = new ::google::privacy::dlp::v2beta1::Value;
  }
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2beta1.ReplaceValueConfig.new_value)
  return new_value_;
}
inline void ReplaceValueConfig::set_allocated_new_value(::google::privacy::dlp::v2beta1::Value* new_value) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete new_value_;
  }
  if (new_value) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      new_value = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, new_value, submessage_arena);
    }
    
  } else {
    
  }
  new_value_ = new_value;
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2beta1.ReplaceValueConfig.new_value)
}

// -------------------------------------------------------------------

// ReplaceWithInfoTypeConfig

// -------------------------------------------------------------------

// RedactConfig

// -------------------------------------------------------------------

// CharsToIgnore

// string characters_to_skip = 1;
inline bool CharsToIgnore::has_characters_to_skip() const {
  return characters_case() == kCharactersToSkip;
}
inline void CharsToIgnore::set_has_characters_to_skip() {
  _oneof_case_[0] = kCharactersToSkip;
}
inline void CharsToIgnore::clear_characters_to_skip() {
  if (has_characters_to_skip()) {
    characters_.characters_to_skip_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_characters();
  }
}
inline const ::std::string& CharsToIgnore::characters_to_skip() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2beta1.CharsToIgnore.characters_to_skip)
  if (has_characters_to_skip()) {
    return characters_.characters_to_skip_.GetNoArena();
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
inline void CharsToIgnore::set_characters_to_skip(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:google.privacy.dlp.v2beta1.CharsToIgnore.characters_to_skip)
  if (!has_characters_to_skip()) {
    clear_characters();
    set_has_characters_to_skip();
    characters_.characters_to_skip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  characters_.characters_to_skip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.privacy.dlp.v2beta1.CharsToIgnore.characters_to_skip)
}
#if LANG_CXX11
inline void CharsToIgnore::set_characters_to_skip(::std::string&& value) {
  // @@protoc_insertion_point(field_set:google.privacy.dlp.v2beta1.CharsToIgnore.characters_to_skip)
  if (!has_characters_to_skip()) {
    clear_characters();
    set_has_characters_to_skip();
    characters_.characters_to_skip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  characters_.characters_to_skip_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.privacy.dlp.v2beta1.CharsToIgnore.characters_to_skip)
}
#endif
inline void CharsToIgnore::set_characters_to_skip(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  if (!has_characters_to_skip()) {
    clear_characters();
    set_has_characters_to_skip();
    characters_.characters_to_skip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  characters_.characters_to_skip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.privacy.dlp.v2beta1.CharsToIgnore.characters_to_skip)
}
inline void CharsToIgnore::set_characters_to_skip(const char* value, size_t size) {
  if (!has_characters_to_skip()) {
    clear_characters();
    set_has_characters_to_skip();
    characters_.characters_to_skip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  characters_.characters_to_skip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.privacy.dlp.v2beta1.CharsToIgnore.characters_to_skip)
}
inline ::std::string* CharsToIgnore::mutable_characters_to_skip() {
  if (!has_characters_to_skip()) {
    clear_characters();
    set_has_characters_to_skip();
    characters_.characters_to_skip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2beta1.CharsToIgnore.characters_to_skip)
  return characters_.characters_to_skip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CharsToIgnore::release_characters_to_skip() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2beta1.CharsToIgnore.characters_to_skip)
  if (has_characters_to_skip()) {
    clear_has_characters();
    return characters_.characters_to_skip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
inline void CharsToIgnore::set_allocated_characters_to_skip(::std::string* characters_to_skip) {
  if (!has_characters_to_skip()) {
    characters_.characters_to_skip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_characters();
  if (characters_to_skip != NULL) {
    set_has_characters_to_skip();
    characters_.characters_to_skip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        characters_to_skip);
  }
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2beta1.CharsToIgnore.characters_to_skip)
}

// .google.privacy.dlp.v2beta1.CharsToIgnore.CharacterGroup common_characters_to_ignore = 2;
inline bool CharsToIgnore::has_common_characters_to_ignore() const {
  return characters_case() == kCommonCharactersToIgnore;
}
inline void CharsToIgnore::set_has_common_characters_to_ignore() {
  _oneof_case_[0] = kCommonCharactersToIgnore;
}
inline void CharsToIgnore::clear_common_characters_to_ignore() {
  if (has_common_characters_to_ignore()) {
    characters_.common_characters_to_ignore_ = 0;
    clear_has_characters();
  }
}
inline ::google::privacy::dlp::v2beta1::CharsToIgnore_CharacterGroup CharsToIgnore::common_characters_to_ignore() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2beta1.CharsToIgnore.common_characters_to_ignore)
  if (has_common_characters_to_ignore()) {
    return static_cast< ::google::privacy::dlp::v2beta1::CharsToIgnore_CharacterGroup >(characters_.common_characters_to_ignore_);
  }
  return static_cast< ::google::privacy::dlp::v2beta1::CharsToIgnore_CharacterGroup >(0);
}
inline void CharsToIgnore::set_common_characters_to_ignore(::google::privacy::dlp::v2beta1::CharsToIgnore_CharacterGroup value) {
  if (!has_common_characters_to_ignore()) {
    clear_characters();
    set_has_common_characters_to_ignore();
  }
  characters_.common_characters_to_ignore_ = value;
  // @@protoc_insertion_point(field_set:google.privacy.dlp.v2beta1.CharsToIgnore.common_characters_to_ignore)
}

inline bool CharsToIgnore::has_characters() const {
  return characters_case() != CHARACTERS_NOT_SET;
}
inline void CharsToIgnore::clear_has_characters() {
  _oneof_case_[0] = CHARACTERS_NOT_SET;
}
inline CharsToIgnore::CharactersCase CharsToIgnore::characters_case() const {
  return CharsToIgnore::CharactersCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// CharacterMaskConfig

// string masking_character = 1;
inline void CharacterMaskConfig::clear_masking_character() {
  masking_character_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CharacterMaskConfig::masking_character() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2beta1.CharacterMaskConfig.masking_character)
  return masking_character_.GetNoArena();
}
inline void CharacterMaskConfig::set_masking_character(const ::std::string& value) {
  
  masking_character_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.privacy.dlp.v2beta1.CharacterMaskConfig.masking_character)
}
#if LANG_CXX11
inline void CharacterMaskConfig::set_masking_character(::std::string&& value) {
  
  masking_character_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.privacy.dlp.v2beta1.CharacterMaskConfig.masking_character)
}
#endif
inline void CharacterMaskConfig::set_masking_character(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  masking_character_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.privacy.dlp.v2beta1.CharacterMaskConfig.masking_character)
}
inline void CharacterMaskConfig::set_masking_character(const char* value, size_t size) {
  
  masking_character_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.privacy.dlp.v2beta1.CharacterMaskConfig.masking_character)
}
inline ::std::string* CharacterMaskConfig::mutable_masking_character() {
  
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2beta1.CharacterMaskConfig.masking_character)
  return masking_character_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CharacterMaskConfig::release_masking_character() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2beta1.CharacterMaskConfig.masking_character)
  
  return masking_character_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CharacterMaskConfig::set_allocated_masking_character(::std::string* masking_character) {
  if (masking_character != NULL) {
    
  } else {
    
  }
  masking_character_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), masking_character);
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2beta1.CharacterMaskConfig.masking_character)
}

// int32 number_to_mask = 2;
inline void CharacterMaskConfig::clear_number_to_mask() {
  number_to_mask_ = 0;
}
inline ::google::protobuf::int32 CharacterMaskConfig::number_to_mask() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2beta1.CharacterMaskConfig.number_to_mask)
  return number_to_mask_;
}
inline void CharacterMaskConfig::set_number_to_mask(::google::protobuf::int32 value) {
  
  number_to_mask_ = value;
  // @@protoc_insertion_point(field_set:google.privacy.dlp.v2beta1.CharacterMaskConfig.number_to_mask)
}

// bool reverse_order = 3;
inline void CharacterMaskConfig::clear_reverse_order() {
  reverse_order_ = false;
}
inline bool CharacterMaskConfig::reverse_order() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2beta1.CharacterMaskConfig.reverse_order)
  return reverse_order_;
}
inline void CharacterMaskConfig::set_reverse_order(bool value) {
  
  reverse_order_ = value;
  // @@protoc_insertion_point(field_set:google.privacy.dlp.v2beta1.CharacterMaskConfig.reverse_order)
}

// repeated .google.privacy.dlp.v2beta1.CharsToIgnore characters_to_ignore = 4;
inline int CharacterMaskConfig::characters_to_ignore_size() const {
  return characters_to_ignore_.size();
}
inline void CharacterMaskConfig::clear_characters_to_ignore() {
  characters_to_ignore_.Clear();
}
inline const ::google::privacy::dlp::v2beta1::CharsToIgnore& CharacterMaskConfig::characters_to_ignore(int index) const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2beta1.CharacterMaskConfig.characters_to_ignore)
  return characters_to_ignore_.Get(index);
}
inline ::google::privacy::dlp::v2beta1::CharsToIgnore* CharacterMaskConfig::mutable_characters_to_ignore(int index) {
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2beta1.CharacterMaskConfig.characters_to_ignore)
  return characters_to_ignore_.Mutable(index);
}
inline ::google::privacy::dlp::v2beta1::CharsToIgnore* CharacterMaskConfig::add_characters_to_ignore() {
  // @@protoc_insertion_point(field_add:google.privacy.dlp.v2beta1.CharacterMaskConfig.characters_to_ignore)
  return characters_to_ignore_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2beta1::CharsToIgnore >*
CharacterMaskConfig::mutable_characters_to_ignore() {
  // @@protoc_insertion_point(field_mutable_list:google.privacy.dlp.v2beta1.CharacterMaskConfig.characters_to_ignore)
  return &characters_to_ignore_;
}
inline const ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2beta1::CharsToIgnore >&
CharacterMaskConfig::characters_to_ignore() const {
  // @@protoc_insertion_point(field_list:google.privacy.dlp.v2beta1.CharacterMaskConfig.characters_to_ignore)
  return characters_to_ignore_;
}

// -------------------------------------------------------------------

// FixedSizeBucketingConfig

// .google.privacy.dlp.v2beta1.Value lower_bound = 1;
inline bool FixedSizeBucketingConfig::has_lower_bound() const {
  return this != internal_default_instance() && lower_bound_ != NULL;
}
inline void FixedSizeBucketingConfig::clear_lower_bound() {
  if (GetArenaNoVirtual() == NULL && lower_bound_ != NULL) {
    delete lower_bound_;
  }
  lower_bound_ = NULL;
}
inline const ::google::privacy::dlp::v2beta1::Value& FixedSizeBucketingConfig::lower_bound() const {
  const ::google::privacy::dlp::v2beta1::Value* p = lower_bound_;
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2beta1.FixedSizeBucketingConfig.lower_bound)
  return p != NULL ? *p : *reinterpret_cast<const ::google::privacy::dlp::v2beta1::Value*>(
      &::google::privacy::dlp::v2beta1::_Value_default_instance_);
}
inline ::google::privacy::dlp::v2beta1::Value* FixedSizeBucketingConfig::release_lower_bound() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2beta1.FixedSizeBucketingConfig.lower_bound)
  
  ::google::privacy::dlp::v2beta1::Value* temp = lower_bound_;
  lower_bound_ = NULL;
  return temp;
}
inline ::google::privacy::dlp::v2beta1::Value* FixedSizeBucketingConfig::mutable_lower_bound() {
  
  if (lower_bound_ == NULL) {
    lower_bound_ = new ::google::privacy::dlp::v2beta1::Value;
  }
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2beta1.FixedSizeBucketingConfig.lower_bound)
  return lower_bound_;
}
inline void FixedSizeBucketingConfig::set_allocated_lower_bound(::google::privacy::dlp::v2beta1::Value* lower_bound) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete lower_bound_;
  }
  if (lower_bound) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      lower_bound = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, lower_bound, submessage_arena);
    }
    
  } else {
    
  }
  lower_bound_ = lower_bound;
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2beta1.FixedSizeBucketingConfig.lower_bound)
}

// .google.privacy.dlp.v2beta1.Value upper_bound = 2;
inline bool FixedSizeBucketingConfig::has_upper_bound() const {
  return this != internal_default_instance() && upper_bound_ != NULL;
}
inline void FixedSizeBucketingConfig::clear_upper_bound() {
  if (GetArenaNoVirtual() == NULL && upper_bound_ != NULL) {
    delete upper_bound_;
  }
  upper_bound_ = NULL;
}
inline const ::google::privacy::dlp::v2beta1::Value& FixedSizeBucketingConfig::upper_bound() const {
  const ::google::privacy::dlp::v2beta1::Value* p = upper_bound_;
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2beta1.FixedSizeBucketingConfig.upper_bound)
  return p != NULL ? *p : *reinterpret_cast<const ::google::privacy::dlp::v2beta1::Value*>(
      &::google::privacy::dlp::v2beta1::_Value_default_instance_);
}
inline ::google::privacy::dlp::v2beta1::Value* FixedSizeBucketingConfig::release_upper_bound() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2beta1.FixedSizeBucketingConfig.upper_bound)
  
  ::google::privacy::dlp::v2beta1::Value* temp = upper_bound_;
  upper_bound_ = NULL;
  return temp;
}
inline ::google::privacy::dlp::v2beta1::Value* FixedSizeBucketingConfig::mutable_upper_bound() {
  
  if (upper_bound_ == NULL) {
    upper_bound_ = new ::google::privacy::dlp::v2beta1::Value;
  }
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2beta1.FixedSizeBucketingConfig.upper_bound)
  return upper_bound_;
}
inline void FixedSizeBucketingConfig::set_allocated_upper_bound(::google::privacy::dlp::v2beta1::Value* upper_bound) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete upper_bound_;
  }
  if (upper_bound) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      upper_bound = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, upper_bound, submessage_arena);
    }
    
  } else {
    
  }
  upper_bound_ = upper_bound;
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2beta1.FixedSizeBucketingConfig.upper_bound)
}

// double bucket_size = 3;
inline void FixedSizeBucketingConfig::clear_bucket_size() {
  bucket_size_ = 0;
}
inline double FixedSizeBucketingConfig::bucket_size() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2beta1.FixedSizeBucketingConfig.bucket_size)
  return bucket_size_;
}
inline void FixedSizeBucketingConfig::set_bucket_size(double value) {
  
  bucket_size_ = value;
  // @@protoc_insertion_point(field_set:google.privacy.dlp.v2beta1.FixedSizeBucketingConfig.bucket_size)
}

// -------------------------------------------------------------------

// BucketingConfig_Bucket

// .google.privacy.dlp.v2beta1.Value min = 1;
inline bool BucketingConfig_Bucket::has_min() const {
  return this != internal_default_instance() && min_ != NULL;
}
inline void BucketingConfig_Bucket::clear_min() {
  if (GetArenaNoVirtual() == NULL && min_ != NULL) {
    delete min_;
  }
  min_ = NULL;
}
inline const ::google::privacy::dlp::v2beta1::Value& BucketingConfig_Bucket::min() const {
  const ::google::privacy::dlp::v2beta1::Value* p = min_;
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2beta1.BucketingConfig.Bucket.min)
  return p != NULL ? *p : *reinterpret_cast<const ::google::privacy::dlp::v2beta1::Value*>(
      &::google::privacy::dlp::v2beta1::_Value_default_instance_);
}
inline ::google::privacy::dlp::v2beta1::Value* BucketingConfig_Bucket::release_min() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2beta1.BucketingConfig.Bucket.min)
  
  ::google::privacy::dlp::v2beta1::Value* temp = min_;
  min_ = NULL;
  return temp;
}
inline ::google::privacy::dlp::v2beta1::Value* BucketingConfig_Bucket::mutable_min() {
  
  if (min_ == NULL) {
    min_ = new ::google::privacy::dlp::v2beta1::Value;
  }
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2beta1.BucketingConfig.Bucket.min)
  return min_;
}
inline void BucketingConfig_Bucket::set_allocated_min(::google::privacy::dlp::v2beta1::Value* min) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete min_;
  }
  if (min) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      min = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, min, submessage_arena);
    }
    
  } else {
    
  }
  min_ = min;
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2beta1.BucketingConfig.Bucket.min)
}

// .google.privacy.dlp.v2beta1.Value max = 2;
inline bool BucketingConfig_Bucket::has_max() const {
  return this != internal_default_instance() && max_ != NULL;
}
inline void BucketingConfig_Bucket::clear_max() {
  if (GetArenaNoVirtual() == NULL && max_ != NULL) {
    delete max_;
  }
  max_ = NULL;
}
inline const ::google::privacy::dlp::v2beta1::Value& BucketingConfig_Bucket::max() const {
  const ::google::privacy::dlp::v2beta1::Value* p = max_;
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2beta1.BucketingConfig.Bucket.max)
  return p != NULL ? *p : *reinterpret_cast<const ::google::privacy::dlp::v2beta1::Value*>(
      &::google::privacy::dlp::v2beta1::_Value_default_instance_);
}
inline ::google::privacy::dlp::v2beta1::Value* BucketingConfig_Bucket::release_max() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2beta1.BucketingConfig.Bucket.max)
  
  ::google::privacy::dlp::v2beta1::Value* temp = max_;
  max_ = NULL;
  return temp;
}
inline ::google::privacy::dlp::v2beta1::Value* BucketingConfig_Bucket::mutable_max() {
  
  if (max_ == NULL) {
    max_ = new ::google::privacy::dlp::v2beta1::Value;
  }
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2beta1.BucketingConfig.Bucket.max)
  return max_;
}
inline void BucketingConfig_Bucket::set_allocated_max(::google::privacy::dlp::v2beta1::Value* max) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete max_;
  }
  if (max) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      max = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, max, submessage_arena);
    }
    
  } else {
    
  }
  max_ = max;
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2beta1.BucketingConfig.Bucket.max)
}

// .google.privacy.dlp.v2beta1.Value replacement_value = 3;
inline bool BucketingConfig_Bucket::has_replacement_value() const {
  return this != internal_default_instance() && replacement_value_ != NULL;
}
inline void BucketingConfig_Bucket::clear_replacement_value() {
  if (GetArenaNoVirtual() == NULL && replacement_value_ != NULL) {
    delete replacement_value_;
  }
  replacement_value_ = NULL;
}
inline const ::google::privacy::dlp::v2beta1::Value& BucketingConfig_Bucket::replacement_value() const {
  const ::google::privacy::dlp::v2beta1::Value* p = replacement_value_;
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2beta1.BucketingConfig.Bucket.replacement_value)
  return p != NULL ? *p : *reinterpret_cast<const ::google::privacy::dlp::v2beta1::Value*>(
      &::google::privacy::dlp::v2beta1::_Value_default_instance_);
}
inline ::google::privacy::dlp::v2beta1::Value* BucketingConfig_Bucket::release_replacement_value() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2beta1.BucketingConfig.Bucket.replacement_value)
  
  ::google::privacy::dlp::v2beta1::Value* temp = replacement_value_;
  replacement_value_ = NULL;
  return temp;
}
inline ::google::privacy::dlp::v2beta1::Value* BucketingConfig_Bucket::mutable_replacement_value() {
  
  if (replacement_value_ == NULL) {
    replacement_value_ = new ::google::privacy::dlp::v2beta1::Value;
  }
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2beta1.BucketingConfig.Bucket.replacement_value)
  return replacement_value_;
}
inline void BucketingConfig_Bucket::set_allocated_replacement_value(::google::privacy::dlp::v2beta1::Value* replacement_value) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete replacement_value_;
  }
  if (replacement_value) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      replacement_value = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, replacement_value, submessage_arena);
    }
    
  } else {
    
  }
  replacement_value_ = replacement_value;
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2beta1.BucketingConfig.Bucket.replacement_value)
}

// -------------------------------------------------------------------

// BucketingConfig

// repeated .google.privacy.dlp.v2beta1.BucketingConfig.Bucket buckets = 1;
inline int BucketingConfig::buckets_size() const {
  return buckets_.size();
}
inline void BucketingConfig::clear_buckets() {
  buckets_.Clear();
}
inline const ::google::privacy::dlp::v2beta1::BucketingConfig_Bucket& BucketingConfig::buckets(int index) const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2beta1.BucketingConfig.buckets)
  return buckets_.Get(index);
}
inline ::google::privacy::dlp::v2beta1::BucketingConfig_Bucket* BucketingConfig::mutable_buckets(int index) {
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2beta1.BucketingConfig.buckets)
  return buckets_.Mutable(index);
}
inline ::google::privacy::dlp::v2beta1::BucketingConfig_Bucket* BucketingConfig::add_buckets() {
  // @@protoc_insertion_point(field_add:google.privacy.dlp.v2beta1.BucketingConfig.buckets)
  return buckets_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2beta1::BucketingConfig_Bucket >*
BucketingConfig::mutable_buckets() {
  // @@protoc_insertion_point(field_mutable_list:google.privacy.dlp.v2beta1.BucketingConfig.buckets)
  return &buckets_;
}
inline const ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2beta1::BucketingConfig_Bucket >&
BucketingConfig::buckets() const {
  // @@protoc_insertion_point(field_list:google.privacy.dlp.v2beta1.BucketingConfig.buckets)
  return buckets_;
}

// -------------------------------------------------------------------

// CryptoReplaceFfxFpeConfig

// .google.privacy.dlp.v2beta1.CryptoKey crypto_key = 1;
inline bool CryptoReplaceFfxFpeConfig::has_crypto_key() const {
  return this != internal_default_instance() && crypto_key_ != NULL;
}
inline void CryptoReplaceFfxFpeConfig::clear_crypto_key() {
  if (GetArenaNoVirtual() == NULL && crypto_key_ != NULL) {
    delete crypto_key_;
  }
  crypto_key_ = NULL;
}
inline const ::google::privacy::dlp::v2beta1::CryptoKey& CryptoReplaceFfxFpeConfig::crypto_key() const {
  const ::google::privacy::dlp::v2beta1::CryptoKey* p = crypto_key_;
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2beta1.CryptoReplaceFfxFpeConfig.crypto_key)
  return p != NULL ? *p : *reinterpret_cast<const ::google::privacy::dlp::v2beta1::CryptoKey*>(
      &::google::privacy::dlp::v2beta1::_CryptoKey_default_instance_);
}
inline ::google::privacy::dlp::v2beta1::CryptoKey* CryptoReplaceFfxFpeConfig::release_crypto_key() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2beta1.CryptoReplaceFfxFpeConfig.crypto_key)
  
  ::google::privacy::dlp::v2beta1::CryptoKey* temp = crypto_key_;
  crypto_key_ = NULL;
  return temp;
}
inline ::google::privacy::dlp::v2beta1::CryptoKey* CryptoReplaceFfxFpeConfig::mutable_crypto_key() {
  
  if (crypto_key_ == NULL) {
    crypto_key_ = new ::google::privacy::dlp::v2beta1::CryptoKey;
  }
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2beta1.CryptoReplaceFfxFpeConfig.crypto_key)
  return crypto_key_;
}
inline void CryptoReplaceFfxFpeConfig::set_allocated_crypto_key(::google::privacy::dlp::v2beta1::CryptoKey* crypto_key) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete crypto_key_;
  }
  if (crypto_key) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      crypto_key = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, crypto_key, submessage_arena);
    }
    
  } else {
    
  }
  crypto_key_ = crypto_key;
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2beta1.CryptoReplaceFfxFpeConfig.crypto_key)
}

// .google.privacy.dlp.v2beta1.FieldId context = 2;
inline bool CryptoReplaceFfxFpeConfig::has_context() const {
  return this != internal_default_instance() && context_ != NULL;
}
inline const ::google::privacy::dlp::v2beta1::FieldId& CryptoReplaceFfxFpeConfig::context() const {
  const ::google::privacy::dlp::v2beta1::FieldId* p = context_;
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2beta1.CryptoReplaceFfxFpeConfig.context)
  return p != NULL ? *p : *reinterpret_cast<const ::google::privacy::dlp::v2beta1::FieldId*>(
      &::google::privacy::dlp::v2beta1::_FieldId_default_instance_);
}
inline ::google::privacy::dlp::v2beta1::FieldId* CryptoReplaceFfxFpeConfig::release_context() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2beta1.CryptoReplaceFfxFpeConfig.context)
  
  ::google::privacy::dlp::v2beta1::FieldId* temp = context_;
  context_ = NULL;
  return temp;
}
inline ::google::privacy::dlp::v2beta1::FieldId* CryptoReplaceFfxFpeConfig::mutable_context() {
  
  if (context_ == NULL) {
    context_ = new ::google::privacy::dlp::v2beta1::FieldId;
  }
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2beta1.CryptoReplaceFfxFpeConfig.context)
  return context_;
}
inline void CryptoReplaceFfxFpeConfig::set_allocated_context(::google::privacy::dlp::v2beta1::FieldId* context) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(context_);
  }
  if (context) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      context = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, context, submessage_arena);
    }
    
  } else {
    
  }
  context_ = context;
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2beta1.CryptoReplaceFfxFpeConfig.context)
}

// .google.privacy.dlp.v2beta1.CryptoReplaceFfxFpeConfig.FfxCommonNativeAlphabet common_alphabet = 4;
inline bool CryptoReplaceFfxFpeConfig::has_common_alphabet() const {
  return alphabet_case() == kCommonAlphabet;
}
inline void CryptoReplaceFfxFpeConfig::set_has_common_alphabet() {
  _oneof_case_[0] = kCommonAlphabet;
}
inline void CryptoReplaceFfxFpeConfig::clear_common_alphabet() {
  if (has_common_alphabet()) {
    alphabet_.common_alphabet_ = 0;
    clear_has_alphabet();
  }
}
inline ::google::privacy::dlp::v2beta1::CryptoReplaceFfxFpeConfig_FfxCommonNativeAlphabet CryptoReplaceFfxFpeConfig::common_alphabet() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2beta1.CryptoReplaceFfxFpeConfig.common_alphabet)
  if (has_common_alphabet()) {
    return static_cast< ::google::privacy::dlp::v2beta1::CryptoReplaceFfxFpeConfig_FfxCommonNativeAlphabet >(alphabet_.common_alphabet_);
  }
  return static_cast< ::google::privacy::dlp::v2beta1::CryptoReplaceFfxFpeConfig_FfxCommonNativeAlphabet >(0);
}
inline void CryptoReplaceFfxFpeConfig::set_common_alphabet(::google::privacy::dlp::v2beta1::CryptoReplaceFfxFpeConfig_FfxCommonNativeAlphabet value) {
  if (!has_common_alphabet()) {
    clear_alphabet();
    set_has_common_alphabet();
  }
  alphabet_.common_alphabet_ = value;
  // @@protoc_insertion_point(field_set:google.privacy.dlp.v2beta1.CryptoReplaceFfxFpeConfig.common_alphabet)
}

// string custom_alphabet = 5;
inline bool CryptoReplaceFfxFpeConfig::has_custom_alphabet() const {
  return alphabet_case() == kCustomAlphabet;
}
inline void CryptoReplaceFfxFpeConfig::set_has_custom_alphabet() {
  _oneof_case_[0] = kCustomAlphabet;
}
inline void CryptoReplaceFfxFpeConfig::clear_custom_alphabet() {
  if (has_custom_alphabet()) {
    alphabet_.custom_alphabet_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_alphabet();
  }
}
inline const ::std::string& CryptoReplaceFfxFpeConfig::custom_alphabet() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2beta1.CryptoReplaceFfxFpeConfig.custom_alphabet)
  if (has_custom_alphabet()) {
    return alphabet_.custom_alphabet_.GetNoArena();
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
inline void CryptoReplaceFfxFpeConfig::set_custom_alphabet(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:google.privacy.dlp.v2beta1.CryptoReplaceFfxFpeConfig.custom_alphabet)
  if (!has_custom_alphabet()) {
    clear_alphabet();
    set_has_custom_alphabet();
    alphabet_.custom_alphabet_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  alphabet_.custom_alphabet_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.privacy.dlp.v2beta1.CryptoReplaceFfxFpeConfig.custom_alphabet)
}
#if LANG_CXX11
inline void CryptoReplaceFfxFpeConfig::set_custom_alphabet(::std::string&& value) {
  // @@protoc_insertion_point(field_set:google.privacy.dlp.v2beta1.CryptoReplaceFfxFpeConfig.custom_alphabet)
  if (!has_custom_alphabet()) {
    clear_alphabet();
    set_has_custom_alphabet();
    alphabet_.custom_alphabet_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  alphabet_.custom_alphabet_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.privacy.dlp.v2beta1.CryptoReplaceFfxFpeConfig.custom_alphabet)
}
#endif
inline void CryptoReplaceFfxFpeConfig::set_custom_alphabet(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  if (!has_custom_alphabet()) {
    clear_alphabet();
    set_has_custom_alphabet();
    alphabet_.custom_alphabet_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  alphabet_.custom_alphabet_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.privacy.dlp.v2beta1.CryptoReplaceFfxFpeConfig.custom_alphabet)
}
inline void CryptoReplaceFfxFpeConfig::set_custom_alphabet(const char* value, size_t size) {
  if (!has_custom_alphabet()) {
    clear_alphabet();
    set_has_custom_alphabet();
    alphabet_.custom_alphabet_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  alphabet_.custom_alphabet_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.privacy.dlp.v2beta1.CryptoReplaceFfxFpeConfig.custom_alphabet)
}
inline ::std::string* CryptoReplaceFfxFpeConfig::mutable_custom_alphabet() {
  if (!has_custom_alphabet()) {
    clear_alphabet();
    set_has_custom_alphabet();
    alphabet_.custom_alphabet_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2beta1.CryptoReplaceFfxFpeConfig.custom_alphabet)
  return alphabet_.custom_alphabet_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CryptoReplaceFfxFpeConfig::release_custom_alphabet() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2beta1.CryptoReplaceFfxFpeConfig.custom_alphabet)
  if (has_custom_alphabet()) {
    clear_has_alphabet();
    return alphabet_.custom_alphabet_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
inline void CryptoReplaceFfxFpeConfig::set_allocated_custom_alphabet(::std::string* custom_alphabet) {
  if (!has_custom_alphabet()) {
    alphabet_.custom_alphabet_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_alphabet();
  if (custom_alphabet != NULL) {
    set_has_custom_alphabet();
    alphabet_.custom_alphabet_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        custom_alphabet);
  }
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2beta1.CryptoReplaceFfxFpeConfig.custom_alphabet)
}

// int32 radix = 6;
inline bool CryptoReplaceFfxFpeConfig::has_radix() const {
  return alphabet_case() == kRadix;
}
inline void CryptoReplaceFfxFpeConfig::set_has_radix() {
  _oneof_case_[0] = kRadix;
}
inline void CryptoReplaceFfxFpeConfig::clear_radix() {
  if (has_radix()) {
    alphabet_.radix_ = 0;
    clear_has_alphabet();
  }
}
inline ::google::protobuf::int32 CryptoReplaceFfxFpeConfig::radix() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2beta1.CryptoReplaceFfxFpeConfig.radix)
  if (has_radix()) {
    return alphabet_.radix_;
  }
  return 0;
}
inline void CryptoReplaceFfxFpeConfig::set_radix(::google::protobuf::int32 value) {
  if (!has_radix()) {
    clear_alphabet();
    set_has_radix();
  }
  alphabet_.radix_ = value;
  // @@protoc_insertion_point(field_set:google.privacy.dlp.v2beta1.CryptoReplaceFfxFpeConfig.radix)
}

inline bool CryptoReplaceFfxFpeConfig::has_alphabet() const {
  return alphabet_case() != ALPHABET_NOT_SET;
}
inline void CryptoReplaceFfxFpeConfig::clear_has_alphabet() {
  _oneof_case_[0] = ALPHABET_NOT_SET;
}
inline CryptoReplaceFfxFpeConfig::AlphabetCase CryptoReplaceFfxFpeConfig::alphabet_case() const {
  return CryptoReplaceFfxFpeConfig::AlphabetCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// CryptoKey

// .google.privacy.dlp.v2beta1.TransientCryptoKey transient = 1;
inline bool CryptoKey::has_transient() const {
  return source_case() == kTransient;
}
inline void CryptoKey::set_has_transient() {
  _oneof_case_[0] = kTransient;
}
inline void CryptoKey::clear_transient() {
  if (has_transient()) {
    delete source_.transient_;
    clear_has_source();
  }
}
inline ::google::privacy::dlp::v2beta1::TransientCryptoKey* CryptoKey::release_transient() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2beta1.CryptoKey.transient)
  if (has_transient()) {
    clear_has_source();
      ::google::privacy::dlp::v2beta1::TransientCryptoKey* temp = source_.transient_;
    source_.transient_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::privacy::dlp::v2beta1::TransientCryptoKey& CryptoKey::transient() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2beta1.CryptoKey.transient)
  return has_transient()
      ? *source_.transient_
      : *reinterpret_cast< ::google::privacy::dlp::v2beta1::TransientCryptoKey*>(&::google::privacy::dlp::v2beta1::_TransientCryptoKey_default_instance_);
}
inline ::google::privacy::dlp::v2beta1::TransientCryptoKey* CryptoKey::mutable_transient() {
  if (!has_transient()) {
    clear_source();
    set_has_transient();
    source_.transient_ = new ::google::privacy::dlp::v2beta1::TransientCryptoKey;
  }
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2beta1.CryptoKey.transient)
  return source_.transient_;
}

// .google.privacy.dlp.v2beta1.UnwrappedCryptoKey unwrapped = 2;
inline bool CryptoKey::has_unwrapped() const {
  return source_case() == kUnwrapped;
}
inline void CryptoKey::set_has_unwrapped() {
  _oneof_case_[0] = kUnwrapped;
}
inline void CryptoKey::clear_unwrapped() {
  if (has_unwrapped()) {
    delete source_.unwrapped_;
    clear_has_source();
  }
}
inline ::google::privacy::dlp::v2beta1::UnwrappedCryptoKey* CryptoKey::release_unwrapped() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2beta1.CryptoKey.unwrapped)
  if (has_unwrapped()) {
    clear_has_source();
      ::google::privacy::dlp::v2beta1::UnwrappedCryptoKey* temp = source_.unwrapped_;
    source_.unwrapped_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::privacy::dlp::v2beta1::UnwrappedCryptoKey& CryptoKey::unwrapped() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2beta1.CryptoKey.unwrapped)
  return has_unwrapped()
      ? *source_.unwrapped_
      : *reinterpret_cast< ::google::privacy::dlp::v2beta1::UnwrappedCryptoKey*>(&::google::privacy::dlp::v2beta1::_UnwrappedCryptoKey_default_instance_);
}
inline ::google::privacy::dlp::v2beta1::UnwrappedCryptoKey* CryptoKey::mutable_unwrapped() {
  if (!has_unwrapped()) {
    clear_source();
    set_has_unwrapped();
    source_.unwrapped_ = new ::google::privacy::dlp::v2beta1::UnwrappedCryptoKey;
  }
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2beta1.CryptoKey.unwrapped)
  return source_.unwrapped_;
}

// .google.privacy.dlp.v2beta1.KmsWrappedCryptoKey kms_wrapped = 3;
inline bool CryptoKey::has_kms_wrapped() const {
  return source_case() == kKmsWrapped;
}
inline void CryptoKey::set_has_kms_wrapped() {
  _oneof_case_[0] = kKmsWrapped;
}
inline void CryptoKey::clear_kms_wrapped() {
  if (has_kms_wrapped()) {
    delete source_.kms_wrapped_;
    clear_has_source();
  }
}
inline ::google::privacy::dlp::v2beta1::KmsWrappedCryptoKey* CryptoKey::release_kms_wrapped() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2beta1.CryptoKey.kms_wrapped)
  if (has_kms_wrapped()) {
    clear_has_source();
      ::google::privacy::dlp::v2beta1::KmsWrappedCryptoKey* temp = source_.kms_wrapped_;
    source_.kms_wrapped_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::privacy::dlp::v2beta1::KmsWrappedCryptoKey& CryptoKey::kms_wrapped() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2beta1.CryptoKey.kms_wrapped)
  return has_kms_wrapped()
      ? *source_.kms_wrapped_
      : *reinterpret_cast< ::google::privacy::dlp::v2beta1::KmsWrappedCryptoKey*>(&::google::privacy::dlp::v2beta1::_KmsWrappedCryptoKey_default_instance_);
}
inline ::google::privacy::dlp::v2beta1::KmsWrappedCryptoKey* CryptoKey::mutable_kms_wrapped() {
  if (!has_kms_wrapped()) {
    clear_source();
    set_has_kms_wrapped();
    source_.kms_wrapped_ = new ::google::privacy::dlp::v2beta1::KmsWrappedCryptoKey;
  }
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2beta1.CryptoKey.kms_wrapped)
  return source_.kms_wrapped_;
}

inline bool CryptoKey::has_source() const {
  return source_case() != SOURCE_NOT_SET;
}
inline void CryptoKey::clear_has_source() {
  _oneof_case_[0] = SOURCE_NOT_SET;
}
inline CryptoKey::SourceCase CryptoKey::source_case() const {
  return CryptoKey::SourceCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// TransientCryptoKey

// string name = 1;
inline void TransientCryptoKey::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TransientCryptoKey::name() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2beta1.TransientCryptoKey.name)
  return name_.GetNoArena();
}
inline void TransientCryptoKey::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.privacy.dlp.v2beta1.TransientCryptoKey.name)
}
#if LANG_CXX11
inline void TransientCryptoKey::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.privacy.dlp.v2beta1.TransientCryptoKey.name)
}
#endif
inline void TransientCryptoKey::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.privacy.dlp.v2beta1.TransientCryptoKey.name)
}
inline void TransientCryptoKey::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.privacy.dlp.v2beta1.TransientCryptoKey.name)
}
inline ::std::string* TransientCryptoKey::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2beta1.TransientCryptoKey.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TransientCryptoKey::release_name() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2beta1.TransientCryptoKey.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TransientCryptoKey::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2beta1.TransientCryptoKey.name)
}

// -------------------------------------------------------------------

// UnwrappedCryptoKey

// bytes key = 1;
inline void UnwrappedCryptoKey::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UnwrappedCryptoKey::key() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2beta1.UnwrappedCryptoKey.key)
  return key_.GetNoArena();
}
inline void UnwrappedCryptoKey::set_key(const ::std::string& value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.privacy.dlp.v2beta1.UnwrappedCryptoKey.key)
}
#if LANG_CXX11
inline void UnwrappedCryptoKey::set_key(::std::string&& value) {
  
  key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.privacy.dlp.v2beta1.UnwrappedCryptoKey.key)
}
#endif
inline void UnwrappedCryptoKey::set_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.privacy.dlp.v2beta1.UnwrappedCryptoKey.key)
}
inline void UnwrappedCryptoKey::set_key(const void* value, size_t size) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.privacy.dlp.v2beta1.UnwrappedCryptoKey.key)
}
inline ::std::string* UnwrappedCryptoKey::mutable_key() {
  
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2beta1.UnwrappedCryptoKey.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UnwrappedCryptoKey::release_key() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2beta1.UnwrappedCryptoKey.key)
  
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UnwrappedCryptoKey::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    
  } else {
    
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2beta1.UnwrappedCryptoKey.key)
}

// -------------------------------------------------------------------

// KmsWrappedCryptoKey

// bytes wrapped_key = 1;
inline void KmsWrappedCryptoKey::clear_wrapped_key() {
  wrapped_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& KmsWrappedCryptoKey::wrapped_key() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2beta1.KmsWrappedCryptoKey.wrapped_key)
  return wrapped_key_.GetNoArena();
}
inline void KmsWrappedCryptoKey::set_wrapped_key(const ::std::string& value) {
  
  wrapped_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.privacy.dlp.v2beta1.KmsWrappedCryptoKey.wrapped_key)
}
#if LANG_CXX11
inline void KmsWrappedCryptoKey::set_wrapped_key(::std::string&& value) {
  
  wrapped_key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.privacy.dlp.v2beta1.KmsWrappedCryptoKey.wrapped_key)
}
#endif
inline void KmsWrappedCryptoKey::set_wrapped_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  wrapped_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.privacy.dlp.v2beta1.KmsWrappedCryptoKey.wrapped_key)
}
inline void KmsWrappedCryptoKey::set_wrapped_key(const void* value, size_t size) {
  
  wrapped_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.privacy.dlp.v2beta1.KmsWrappedCryptoKey.wrapped_key)
}
inline ::std::string* KmsWrappedCryptoKey::mutable_wrapped_key() {
  
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2beta1.KmsWrappedCryptoKey.wrapped_key)
  return wrapped_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* KmsWrappedCryptoKey::release_wrapped_key() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2beta1.KmsWrappedCryptoKey.wrapped_key)
  
  return wrapped_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void KmsWrappedCryptoKey::set_allocated_wrapped_key(::std::string* wrapped_key) {
  if (wrapped_key != NULL) {
    
  } else {
    
  }
  wrapped_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), wrapped_key);
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2beta1.KmsWrappedCryptoKey.wrapped_key)
}

// string crypto_key_name = 2;
inline void KmsWrappedCryptoKey::clear_crypto_key_name() {
  crypto_key_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& KmsWrappedCryptoKey::crypto_key_name() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2beta1.KmsWrappedCryptoKey.crypto_key_name)
  return crypto_key_name_.GetNoArena();
}
inline void KmsWrappedCryptoKey::set_crypto_key_name(const ::std::string& value) {
  
  crypto_key_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.privacy.dlp.v2beta1.KmsWrappedCryptoKey.crypto_key_name)
}
#if LANG_CXX11
inline void KmsWrappedCryptoKey::set_crypto_key_name(::std::string&& value) {
  
  crypto_key_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.privacy.dlp.v2beta1.KmsWrappedCryptoKey.crypto_key_name)
}
#endif
inline void KmsWrappedCryptoKey::set_crypto_key_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  crypto_key_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.privacy.dlp.v2beta1.KmsWrappedCryptoKey.crypto_key_name)
}
inline void KmsWrappedCryptoKey::set_crypto_key_name(const char* value, size_t size) {
  
  crypto_key_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.privacy.dlp.v2beta1.KmsWrappedCryptoKey.crypto_key_name)
}
inline ::std::string* KmsWrappedCryptoKey::mutable_crypto_key_name() {
  
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2beta1.KmsWrappedCryptoKey.crypto_key_name)
  return crypto_key_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* KmsWrappedCryptoKey::release_crypto_key_name() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2beta1.KmsWrappedCryptoKey.crypto_key_name)
  
  return crypto_key_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void KmsWrappedCryptoKey::set_allocated_crypto_key_name(::std::string* crypto_key_name) {
  if (crypto_key_name != NULL) {
    
  } else {
    
  }
  crypto_key_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), crypto_key_name);
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2beta1.KmsWrappedCryptoKey.crypto_key_name)
}

// -------------------------------------------------------------------

// InfoTypeTransformations_InfoTypeTransformation

// repeated .google.privacy.dlp.v2beta1.InfoType info_types = 1;
inline int InfoTypeTransformations_InfoTypeTransformation::info_types_size() const {
  return info_types_.size();
}
inline const ::google::privacy::dlp::v2beta1::InfoType& InfoTypeTransformations_InfoTypeTransformation::info_types(int index) const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2beta1.InfoTypeTransformations.InfoTypeTransformation.info_types)
  return info_types_.Get(index);
}
inline ::google::privacy::dlp::v2beta1::InfoType* InfoTypeTransformations_InfoTypeTransformation::mutable_info_types(int index) {
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2beta1.InfoTypeTransformations.InfoTypeTransformation.info_types)
  return info_types_.Mutable(index);
}
inline ::google::privacy::dlp::v2beta1::InfoType* InfoTypeTransformations_InfoTypeTransformation::add_info_types() {
  // @@protoc_insertion_point(field_add:google.privacy.dlp.v2beta1.InfoTypeTransformations.InfoTypeTransformation.info_types)
  return info_types_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2beta1::InfoType >*
InfoTypeTransformations_InfoTypeTransformation::mutable_info_types() {
  // @@protoc_insertion_point(field_mutable_list:google.privacy.dlp.v2beta1.InfoTypeTransformations.InfoTypeTransformation.info_types)
  return &info_types_;
}
inline const ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2beta1::InfoType >&
InfoTypeTransformations_InfoTypeTransformation::info_types() const {
  // @@protoc_insertion_point(field_list:google.privacy.dlp.v2beta1.InfoTypeTransformations.InfoTypeTransformation.info_types)
  return info_types_;
}

// .google.privacy.dlp.v2beta1.PrimitiveTransformation primitive_transformation = 2;
inline bool InfoTypeTransformations_InfoTypeTransformation::has_primitive_transformation() const {
  return this != internal_default_instance() && primitive_transformation_ != NULL;
}
inline void InfoTypeTransformations_InfoTypeTransformation::clear_primitive_transformation() {
  if (GetArenaNoVirtual() == NULL && primitive_transformation_ != NULL) {
    delete primitive_transformation_;
  }
  primitive_transformation_ = NULL;
}
inline const ::google::privacy::dlp::v2beta1::PrimitiveTransformation& InfoTypeTransformations_InfoTypeTransformation::primitive_transformation() const {
  const ::google::privacy::dlp::v2beta1::PrimitiveTransformation* p = primitive_transformation_;
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2beta1.InfoTypeTransformations.InfoTypeTransformation.primitive_transformation)
  return p != NULL ? *p : *reinterpret_cast<const ::google::privacy::dlp::v2beta1::PrimitiveTransformation*>(
      &::google::privacy::dlp::v2beta1::_PrimitiveTransformation_default_instance_);
}
inline ::google::privacy::dlp::v2beta1::PrimitiveTransformation* InfoTypeTransformations_InfoTypeTransformation::release_primitive_transformation() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2beta1.InfoTypeTransformations.InfoTypeTransformation.primitive_transformation)
  
  ::google::privacy::dlp::v2beta1::PrimitiveTransformation* temp = primitive_transformation_;
  primitive_transformation_ = NULL;
  return temp;
}
inline ::google::privacy::dlp::v2beta1::PrimitiveTransformation* InfoTypeTransformations_InfoTypeTransformation::mutable_primitive_transformation() {
  
  if (primitive_transformation_ == NULL) {
    primitive_transformation_ = new ::google::privacy::dlp::v2beta1::PrimitiveTransformation;
  }
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2beta1.InfoTypeTransformations.InfoTypeTransformation.primitive_transformation)
  return primitive_transformation_;
}
inline void InfoTypeTransformations_InfoTypeTransformation::set_allocated_primitive_transformation(::google::privacy::dlp::v2beta1::PrimitiveTransformation* primitive_transformation) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete primitive_transformation_;
  }
  if (primitive_transformation) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      primitive_transformation = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, primitive_transformation, submessage_arena);
    }
    
  } else {
    
  }
  primitive_transformation_ = primitive_transformation;
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2beta1.InfoTypeTransformations.InfoTypeTransformation.primitive_transformation)
}

// -------------------------------------------------------------------

// InfoTypeTransformations

// repeated .google.privacy.dlp.v2beta1.InfoTypeTransformations.InfoTypeTransformation transformations = 1;
inline int InfoTypeTransformations::transformations_size() const {
  return transformations_.size();
}
inline void InfoTypeTransformations::clear_transformations() {
  transformations_.Clear();
}
inline const ::google::privacy::dlp::v2beta1::InfoTypeTransformations_InfoTypeTransformation& InfoTypeTransformations::transformations(int index) const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2beta1.InfoTypeTransformations.transformations)
  return transformations_.Get(index);
}
inline ::google::privacy::dlp::v2beta1::InfoTypeTransformations_InfoTypeTransformation* InfoTypeTransformations::mutable_transformations(int index) {
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2beta1.InfoTypeTransformations.transformations)
  return transformations_.Mutable(index);
}
inline ::google::privacy::dlp::v2beta1::InfoTypeTransformations_InfoTypeTransformation* InfoTypeTransformations::add_transformations() {
  // @@protoc_insertion_point(field_add:google.privacy.dlp.v2beta1.InfoTypeTransformations.transformations)
  return transformations_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2beta1::InfoTypeTransformations_InfoTypeTransformation >*
InfoTypeTransformations::mutable_transformations() {
  // @@protoc_insertion_point(field_mutable_list:google.privacy.dlp.v2beta1.InfoTypeTransformations.transformations)
  return &transformations_;
}
inline const ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2beta1::InfoTypeTransformations_InfoTypeTransformation >&
InfoTypeTransformations::transformations() const {
  // @@protoc_insertion_point(field_list:google.privacy.dlp.v2beta1.InfoTypeTransformations.transformations)
  return transformations_;
}

// -------------------------------------------------------------------

// FieldTransformation

// repeated .google.privacy.dlp.v2beta1.FieldId fields = 1;
inline int FieldTransformation::fields_size() const {
  return fields_.size();
}
inline const ::google::privacy::dlp::v2beta1::FieldId& FieldTransformation::fields(int index) const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2beta1.FieldTransformation.fields)
  return fields_.Get(index);
}
inline ::google::privacy::dlp::v2beta1::FieldId* FieldTransformation::mutable_fields(int index) {
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2beta1.FieldTransformation.fields)
  return fields_.Mutable(index);
}
inline ::google::privacy::dlp::v2beta1::FieldId* FieldTransformation::add_fields() {
  // @@protoc_insertion_point(field_add:google.privacy.dlp.v2beta1.FieldTransformation.fields)
  return fields_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2beta1::FieldId >*
FieldTransformation::mutable_fields() {
  // @@protoc_insertion_point(field_mutable_list:google.privacy.dlp.v2beta1.FieldTransformation.fields)
  return &fields_;
}
inline const ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2beta1::FieldId >&
FieldTransformation::fields() const {
  // @@protoc_insertion_point(field_list:google.privacy.dlp.v2beta1.FieldTransformation.fields)
  return fields_;
}

// .google.privacy.dlp.v2beta1.RecordCondition condition = 3;
inline bool FieldTransformation::has_condition() const {
  return this != internal_default_instance() && condition_ != NULL;
}
inline void FieldTransformation::clear_condition() {
  if (GetArenaNoVirtual() == NULL && condition_ != NULL) {
    delete condition_;
  }
  condition_ = NULL;
}
inline const ::google::privacy::dlp::v2beta1::RecordCondition& FieldTransformation::condition() const {
  const ::google::privacy::dlp::v2beta1::RecordCondition* p = condition_;
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2beta1.FieldTransformation.condition)
  return p != NULL ? *p : *reinterpret_cast<const ::google::privacy::dlp::v2beta1::RecordCondition*>(
      &::google::privacy::dlp::v2beta1::_RecordCondition_default_instance_);
}
inline ::google::privacy::dlp::v2beta1::RecordCondition* FieldTransformation::release_condition() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2beta1.FieldTransformation.condition)
  
  ::google::privacy::dlp::v2beta1::RecordCondition* temp = condition_;
  condition_ = NULL;
  return temp;
}
inline ::google::privacy::dlp::v2beta1::RecordCondition* FieldTransformation::mutable_condition() {
  
  if (condition_ == NULL) {
    condition_ = new ::google::privacy::dlp::v2beta1::RecordCondition;
  }
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2beta1.FieldTransformation.condition)
  return condition_;
}
inline void FieldTransformation::set_allocated_condition(::google::privacy::dlp::v2beta1::RecordCondition* condition) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete condition_;
  }
  if (condition) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      condition = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, condition, submessage_arena);
    }
    
  } else {
    
  }
  condition_ = condition;
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2beta1.FieldTransformation.condition)
}

// .google.privacy.dlp.v2beta1.PrimitiveTransformation primitive_transformation = 4;
inline bool FieldTransformation::has_primitive_transformation() const {
  return transformation_case() == kPrimitiveTransformation;
}
inline void FieldTransformation::set_has_primitive_transformation() {
  _oneof_case_[0] = kPrimitiveTransformation;
}
inline void FieldTransformation::clear_primitive_transformation() {
  if (has_primitive_transformation()) {
    delete transformation_.primitive_transformation_;
    clear_has_transformation();
  }
}
inline ::google::privacy::dlp::v2beta1::PrimitiveTransformation* FieldTransformation::release_primitive_transformation() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2beta1.FieldTransformation.primitive_transformation)
  if (has_primitive_transformation()) {
    clear_has_transformation();
      ::google::privacy::dlp::v2beta1::PrimitiveTransformation* temp = transformation_.primitive_transformation_;
    transformation_.primitive_transformation_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::privacy::dlp::v2beta1::PrimitiveTransformation& FieldTransformation::primitive_transformation() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2beta1.FieldTransformation.primitive_transformation)
  return has_primitive_transformation()
      ? *transformation_.primitive_transformation_
      : *reinterpret_cast< ::google::privacy::dlp::v2beta1::PrimitiveTransformation*>(&::google::privacy::dlp::v2beta1::_PrimitiveTransformation_default_instance_);
}
inline ::google::privacy::dlp::v2beta1::PrimitiveTransformation* FieldTransformation::mutable_primitive_transformation() {
  if (!has_primitive_transformation()) {
    clear_transformation();
    set_has_primitive_transformation();
    transformation_.primitive_transformation_ = new ::google::privacy::dlp::v2beta1::PrimitiveTransformation;
  }
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2beta1.FieldTransformation.primitive_transformation)
  return transformation_.primitive_transformation_;
}

// .google.privacy.dlp.v2beta1.InfoTypeTransformations info_type_transformations = 5;
inline bool FieldTransformation::has_info_type_transformations() const {
  return transformation_case() == kInfoTypeTransformations;
}
inline void FieldTransformation::set_has_info_type_transformations() {
  _oneof_case_[0] = kInfoTypeTransformations;
}
inline void FieldTransformation::clear_info_type_transformations() {
  if (has_info_type_transformations()) {
    delete transformation_.info_type_transformations_;
    clear_has_transformation();
  }
}
inline ::google::privacy::dlp::v2beta1::InfoTypeTransformations* FieldTransformation::release_info_type_transformations() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2beta1.FieldTransformation.info_type_transformations)
  if (has_info_type_transformations()) {
    clear_has_transformation();
      ::google::privacy::dlp::v2beta1::InfoTypeTransformations* temp = transformation_.info_type_transformations_;
    transformation_.info_type_transformations_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::privacy::dlp::v2beta1::InfoTypeTransformations& FieldTransformation::info_type_transformations() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2beta1.FieldTransformation.info_type_transformations)
  return has_info_type_transformations()
      ? *transformation_.info_type_transformations_
      : *reinterpret_cast< ::google::privacy::dlp::v2beta1::InfoTypeTransformations*>(&::google::privacy::dlp::v2beta1::_InfoTypeTransformations_default_instance_);
}
inline ::google::privacy::dlp::v2beta1::InfoTypeTransformations* FieldTransformation::mutable_info_type_transformations() {
  if (!has_info_type_transformations()) {
    clear_transformation();
    set_has_info_type_transformations();
    transformation_.info_type_transformations_ = new ::google::privacy::dlp::v2beta1::InfoTypeTransformations;
  }
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2beta1.FieldTransformation.info_type_transformations)
  return transformation_.info_type_transformations_;
}

inline bool FieldTransformation::has_transformation() const {
  return transformation_case() != TRANSFORMATION_NOT_SET;
}
inline void FieldTransformation::clear_has_transformation() {
  _oneof_case_[0] = TRANSFORMATION_NOT_SET;
}
inline FieldTransformation::TransformationCase FieldTransformation::transformation_case() const {
  return FieldTransformation::TransformationCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// RecordTransformations

// repeated .google.privacy.dlp.v2beta1.FieldTransformation field_transformations = 1;
inline int RecordTransformations::field_transformations_size() const {
  return field_transformations_.size();
}
inline void RecordTransformations::clear_field_transformations() {
  field_transformations_.Clear();
}
inline const ::google::privacy::dlp::v2beta1::FieldTransformation& RecordTransformations::field_transformations(int index) const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2beta1.RecordTransformations.field_transformations)
  return field_transformations_.Get(index);
}
inline ::google::privacy::dlp::v2beta1::FieldTransformation* RecordTransformations::mutable_field_transformations(int index) {
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2beta1.RecordTransformations.field_transformations)
  return field_transformations_.Mutable(index);
}
inline ::google::privacy::dlp::v2beta1::FieldTransformation* RecordTransformations::add_field_transformations() {
  // @@protoc_insertion_point(field_add:google.privacy.dlp.v2beta1.RecordTransformations.field_transformations)
  return field_transformations_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2beta1::FieldTransformation >*
RecordTransformations::mutable_field_transformations() {
  // @@protoc_insertion_point(field_mutable_list:google.privacy.dlp.v2beta1.RecordTransformations.field_transformations)
  return &field_transformations_;
}
inline const ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2beta1::FieldTransformation >&
RecordTransformations::field_transformations() const {
  // @@protoc_insertion_point(field_list:google.privacy.dlp.v2beta1.RecordTransformations.field_transformations)
  return field_transformations_;
}

// repeated .google.privacy.dlp.v2beta1.RecordSuppression record_suppressions = 2;
inline int RecordTransformations::record_suppressions_size() const {
  return record_suppressions_.size();
}
inline void RecordTransformations::clear_record_suppressions() {
  record_suppressions_.Clear();
}
inline const ::google::privacy::dlp::v2beta1::RecordSuppression& RecordTransformations::record_suppressions(int index) const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2beta1.RecordTransformations.record_suppressions)
  return record_suppressions_.Get(index);
}
inline ::google::privacy::dlp::v2beta1::RecordSuppression* RecordTransformations::mutable_record_suppressions(int index) {
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2beta1.RecordTransformations.record_suppressions)
  return record_suppressions_.Mutable(index);
}
inline ::google::privacy::dlp::v2beta1::RecordSuppression* RecordTransformations::add_record_suppressions() {
  // @@protoc_insertion_point(field_add:google.privacy.dlp.v2beta1.RecordTransformations.record_suppressions)
  return record_suppressions_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2beta1::RecordSuppression >*
RecordTransformations::mutable_record_suppressions() {
  // @@protoc_insertion_point(field_mutable_list:google.privacy.dlp.v2beta1.RecordTransformations.record_suppressions)
  return &record_suppressions_;
}
inline const ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2beta1::RecordSuppression >&
RecordTransformations::record_suppressions() const {
  // @@protoc_insertion_point(field_list:google.privacy.dlp.v2beta1.RecordTransformations.record_suppressions)
  return record_suppressions_;
}

// -------------------------------------------------------------------

// RecordSuppression

// .google.privacy.dlp.v2beta1.RecordCondition condition = 1;
inline bool RecordSuppression::has_condition() const {
  return this != internal_default_instance() && condition_ != NULL;
}
inline void RecordSuppression::clear_condition() {
  if (GetArenaNoVirtual() == NULL && condition_ != NULL) {
    delete condition_;
  }
  condition_ = NULL;
}
inline const ::google::privacy::dlp::v2beta1::RecordCondition& RecordSuppression::condition() const {
  const ::google::privacy::dlp::v2beta1::RecordCondition* p = condition_;
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2beta1.RecordSuppression.condition)
  return p != NULL ? *p : *reinterpret_cast<const ::google::privacy::dlp::v2beta1::RecordCondition*>(
      &::google::privacy::dlp::v2beta1::_RecordCondition_default_instance_);
}
inline ::google::privacy::dlp::v2beta1::RecordCondition* RecordSuppression::release_condition() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2beta1.RecordSuppression.condition)
  
  ::google::privacy::dlp::v2beta1::RecordCondition* temp = condition_;
  condition_ = NULL;
  return temp;
}
inline ::google::privacy::dlp::v2beta1::RecordCondition* RecordSuppression::mutable_condition() {
  
  if (condition_ == NULL) {
    condition_ = new ::google::privacy::dlp::v2beta1::RecordCondition;
  }
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2beta1.RecordSuppression.condition)
  return condition_;
}
inline void RecordSuppression::set_allocated_condition(::google::privacy::dlp::v2beta1::RecordCondition* condition) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete condition_;
  }
  if (condition) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      condition = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, condition, submessage_arena);
    }
    
  } else {
    
  }
  condition_ = condition;
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2beta1.RecordSuppression.condition)
}

// -------------------------------------------------------------------

// RecordCondition_Condition

// .google.privacy.dlp.v2beta1.FieldId field = 1;
inline bool RecordCondition_Condition::has_field() const {
  return this != internal_default_instance() && field_ != NULL;
}
inline const ::google::privacy::dlp::v2beta1::FieldId& RecordCondition_Condition::field() const {
  const ::google::privacy::dlp::v2beta1::FieldId* p = field_;
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2beta1.RecordCondition.Condition.field)
  return p != NULL ? *p : *reinterpret_cast<const ::google::privacy::dlp::v2beta1::FieldId*>(
      &::google::privacy::dlp::v2beta1::_FieldId_default_instance_);
}
inline ::google::privacy::dlp::v2beta1::FieldId* RecordCondition_Condition::release_field() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2beta1.RecordCondition.Condition.field)
  
  ::google::privacy::dlp::v2beta1::FieldId* temp = field_;
  field_ = NULL;
  return temp;
}
inline ::google::privacy::dlp::v2beta1::FieldId* RecordCondition_Condition::mutable_field() {
  
  if (field_ == NULL) {
    field_ = new ::google::privacy::dlp::v2beta1::FieldId;
  }
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2beta1.RecordCondition.Condition.field)
  return field_;
}
inline void RecordCondition_Condition::set_allocated_field(::google::privacy::dlp::v2beta1::FieldId* field) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(field_);
  }
  if (field) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      field = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, field, submessage_arena);
    }
    
  } else {
    
  }
  field_ = field;
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2beta1.RecordCondition.Condition.field)
}

// .google.privacy.dlp.v2beta1.RelationalOperator operator = 3;
inline void RecordCondition_Condition::clear_operator_() {
  operator__ = 0;
}
inline ::google::privacy::dlp::v2beta1::RelationalOperator RecordCondition_Condition::operator_() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2beta1.RecordCondition.Condition.operator)
  return static_cast< ::google::privacy::dlp::v2beta1::RelationalOperator >(operator__);
}
inline void RecordCondition_Condition::set_operator_(::google::privacy::dlp::v2beta1::RelationalOperator value) {
  
  operator__ = value;
  // @@protoc_insertion_point(field_set:google.privacy.dlp.v2beta1.RecordCondition.Condition.operator)
}

// .google.privacy.dlp.v2beta1.Value value = 4;
inline bool RecordCondition_Condition::has_value() const {
  return this != internal_default_instance() && value_ != NULL;
}
inline void RecordCondition_Condition::clear_value() {
  if (GetArenaNoVirtual() == NULL && value_ != NULL) {
    delete value_;
  }
  value_ = NULL;
}
inline const ::google::privacy::dlp::v2beta1::Value& RecordCondition_Condition::value() const {
  const ::google::privacy::dlp::v2beta1::Value* p = value_;
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2beta1.RecordCondition.Condition.value)
  return p != NULL ? *p : *reinterpret_cast<const ::google::privacy::dlp::v2beta1::Value*>(
      &::google::privacy::dlp::v2beta1::_Value_default_instance_);
}
inline ::google::privacy::dlp::v2beta1::Value* RecordCondition_Condition::release_value() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2beta1.RecordCondition.Condition.value)
  
  ::google::privacy::dlp::v2beta1::Value* temp = value_;
  value_ = NULL;
  return temp;
}
inline ::google::privacy::dlp::v2beta1::Value* RecordCondition_Condition::mutable_value() {
  
  if (value_ == NULL) {
    value_ = new ::google::privacy::dlp::v2beta1::Value;
  }
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2beta1.RecordCondition.Condition.value)
  return value_;
}
inline void RecordCondition_Condition::set_allocated_value(::google::privacy::dlp::v2beta1::Value* value) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete value_;
  }
  if (value) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, value, submessage_arena);
    }
    
  } else {
    
  }
  value_ = value;
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2beta1.RecordCondition.Condition.value)
}

// -------------------------------------------------------------------

// RecordCondition_Conditions

// repeated .google.privacy.dlp.v2beta1.RecordCondition.Condition conditions = 1;
inline int RecordCondition_Conditions::conditions_size() const {
  return conditions_.size();
}
inline void RecordCondition_Conditions::clear_conditions() {
  conditions_.Clear();
}
inline const ::google::privacy::dlp::v2beta1::RecordCondition_Condition& RecordCondition_Conditions::conditions(int index) const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2beta1.RecordCondition.Conditions.conditions)
  return conditions_.Get(index);
}
inline ::google::privacy::dlp::v2beta1::RecordCondition_Condition* RecordCondition_Conditions::mutable_conditions(int index) {
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2beta1.RecordCondition.Conditions.conditions)
  return conditions_.Mutable(index);
}
inline ::google::privacy::dlp::v2beta1::RecordCondition_Condition* RecordCondition_Conditions::add_conditions() {
  // @@protoc_insertion_point(field_add:google.privacy.dlp.v2beta1.RecordCondition.Conditions.conditions)
  return conditions_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2beta1::RecordCondition_Condition >*
RecordCondition_Conditions::mutable_conditions() {
  // @@protoc_insertion_point(field_mutable_list:google.privacy.dlp.v2beta1.RecordCondition.Conditions.conditions)
  return &conditions_;
}
inline const ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2beta1::RecordCondition_Condition >&
RecordCondition_Conditions::conditions() const {
  // @@protoc_insertion_point(field_list:google.privacy.dlp.v2beta1.RecordCondition.Conditions.conditions)
  return conditions_;
}

// -------------------------------------------------------------------

// RecordCondition_Expressions

// .google.privacy.dlp.v2beta1.RecordCondition.Expressions.LogicalOperator logical_operator = 1;
inline void RecordCondition_Expressions::clear_logical_operator() {
  logical_operator_ = 0;
}
inline ::google::privacy::dlp::v2beta1::RecordCondition_Expressions_LogicalOperator RecordCondition_Expressions::logical_operator() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2beta1.RecordCondition.Expressions.logical_operator)
  return static_cast< ::google::privacy::dlp::v2beta1::RecordCondition_Expressions_LogicalOperator >(logical_operator_);
}
inline void RecordCondition_Expressions::set_logical_operator(::google::privacy::dlp::v2beta1::RecordCondition_Expressions_LogicalOperator value) {
  
  logical_operator_ = value;
  // @@protoc_insertion_point(field_set:google.privacy.dlp.v2beta1.RecordCondition.Expressions.logical_operator)
}

// .google.privacy.dlp.v2beta1.RecordCondition.Conditions conditions = 3;
inline bool RecordCondition_Expressions::has_conditions() const {
  return type_case() == kConditions;
}
inline void RecordCondition_Expressions::set_has_conditions() {
  _oneof_case_[0] = kConditions;
}
inline void RecordCondition_Expressions::clear_conditions() {
  if (has_conditions()) {
    delete type_.conditions_;
    clear_has_type();
  }
}
inline ::google::privacy::dlp::v2beta1::RecordCondition_Conditions* RecordCondition_Expressions::release_conditions() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2beta1.RecordCondition.Expressions.conditions)
  if (has_conditions()) {
    clear_has_type();
      ::google::privacy::dlp::v2beta1::RecordCondition_Conditions* temp = type_.conditions_;
    type_.conditions_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::privacy::dlp::v2beta1::RecordCondition_Conditions& RecordCondition_Expressions::conditions() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2beta1.RecordCondition.Expressions.conditions)
  return has_conditions()
      ? *type_.conditions_
      : *reinterpret_cast< ::google::privacy::dlp::v2beta1::RecordCondition_Conditions*>(&::google::privacy::dlp::v2beta1::_RecordCondition_Conditions_default_instance_);
}
inline ::google::privacy::dlp::v2beta1::RecordCondition_Conditions* RecordCondition_Expressions::mutable_conditions() {
  if (!has_conditions()) {
    clear_type();
    set_has_conditions();
    type_.conditions_ = new ::google::privacy::dlp::v2beta1::RecordCondition_Conditions;
  }
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2beta1.RecordCondition.Expressions.conditions)
  return type_.conditions_;
}

inline bool RecordCondition_Expressions::has_type() const {
  return type_case() != TYPE_NOT_SET;
}
inline void RecordCondition_Expressions::clear_has_type() {
  _oneof_case_[0] = TYPE_NOT_SET;
}
inline RecordCondition_Expressions::TypeCase RecordCondition_Expressions::type_case() const {
  return RecordCondition_Expressions::TypeCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// RecordCondition

// .google.privacy.dlp.v2beta1.RecordCondition.Expressions expressions = 3;
inline bool RecordCondition::has_expressions() const {
  return this != internal_default_instance() && expressions_ != NULL;
}
inline void RecordCondition::clear_expressions() {
  if (GetArenaNoVirtual() == NULL && expressions_ != NULL) {
    delete expressions_;
  }
  expressions_ = NULL;
}
inline const ::google::privacy::dlp::v2beta1::RecordCondition_Expressions& RecordCondition::expressions() const {
  const ::google::privacy::dlp::v2beta1::RecordCondition_Expressions* p = expressions_;
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2beta1.RecordCondition.expressions)
  return p != NULL ? *p : *reinterpret_cast<const ::google::privacy::dlp::v2beta1::RecordCondition_Expressions*>(
      &::google::privacy::dlp::v2beta1::_RecordCondition_Expressions_default_instance_);
}
inline ::google::privacy::dlp::v2beta1::RecordCondition_Expressions* RecordCondition::release_expressions() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2beta1.RecordCondition.expressions)
  
  ::google::privacy::dlp::v2beta1::RecordCondition_Expressions* temp = expressions_;
  expressions_ = NULL;
  return temp;
}
inline ::google::privacy::dlp::v2beta1::RecordCondition_Expressions* RecordCondition::mutable_expressions() {
  
  if (expressions_ == NULL) {
    expressions_ = new ::google::privacy::dlp::v2beta1::RecordCondition_Expressions;
  }
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2beta1.RecordCondition.expressions)
  return expressions_;
}
inline void RecordCondition::set_allocated_expressions(::google::privacy::dlp::v2beta1::RecordCondition_Expressions* expressions) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete expressions_;
  }
  if (expressions) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      expressions = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, expressions, submessage_arena);
    }
    
  } else {
    
  }
  expressions_ = expressions;
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2beta1.RecordCondition.expressions)
}

// -------------------------------------------------------------------

// DeidentificationSummary

// int64 transformed_bytes = 2;
inline void DeidentificationSummary::clear_transformed_bytes() {
  transformed_bytes_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 DeidentificationSummary::transformed_bytes() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2beta1.DeidentificationSummary.transformed_bytes)
  return transformed_bytes_;
}
inline void DeidentificationSummary::set_transformed_bytes(::google::protobuf::int64 value) {
  
  transformed_bytes_ = value;
  // @@protoc_insertion_point(field_set:google.privacy.dlp.v2beta1.DeidentificationSummary.transformed_bytes)
}

// repeated .google.privacy.dlp.v2beta1.TransformationSummary transformation_summaries = 3;
inline int DeidentificationSummary::transformation_summaries_size() const {
  return transformation_summaries_.size();
}
inline void DeidentificationSummary::clear_transformation_summaries() {
  transformation_summaries_.Clear();
}
inline const ::google::privacy::dlp::v2beta1::TransformationSummary& DeidentificationSummary::transformation_summaries(int index) const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2beta1.DeidentificationSummary.transformation_summaries)
  return transformation_summaries_.Get(index);
}
inline ::google::privacy::dlp::v2beta1::TransformationSummary* DeidentificationSummary::mutable_transformation_summaries(int index) {
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2beta1.DeidentificationSummary.transformation_summaries)
  return transformation_summaries_.Mutable(index);
}
inline ::google::privacy::dlp::v2beta1::TransformationSummary* DeidentificationSummary::add_transformation_summaries() {
  // @@protoc_insertion_point(field_add:google.privacy.dlp.v2beta1.DeidentificationSummary.transformation_summaries)
  return transformation_summaries_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2beta1::TransformationSummary >*
DeidentificationSummary::mutable_transformation_summaries() {
  // @@protoc_insertion_point(field_mutable_list:google.privacy.dlp.v2beta1.DeidentificationSummary.transformation_summaries)
  return &transformation_summaries_;
}
inline const ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2beta1::TransformationSummary >&
DeidentificationSummary::transformation_summaries() const {
  // @@protoc_insertion_point(field_list:google.privacy.dlp.v2beta1.DeidentificationSummary.transformation_summaries)
  return transformation_summaries_;
}

// -------------------------------------------------------------------

// TransformationSummary_SummaryResult

// int64 count = 1;
inline void TransformationSummary_SummaryResult::clear_count() {
  count_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 TransformationSummary_SummaryResult::count() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2beta1.TransformationSummary.SummaryResult.count)
  return count_;
}
inline void TransformationSummary_SummaryResult::set_count(::google::protobuf::int64 value) {
  
  count_ = value;
  // @@protoc_insertion_point(field_set:google.privacy.dlp.v2beta1.TransformationSummary.SummaryResult.count)
}

// .google.privacy.dlp.v2beta1.TransformationSummary.TransformationResultCode code = 2;
inline void TransformationSummary_SummaryResult::clear_code() {
  code_ = 0;
}
inline ::google::privacy::dlp::v2beta1::TransformationSummary_TransformationResultCode TransformationSummary_SummaryResult::code() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2beta1.TransformationSummary.SummaryResult.code)
  return static_cast< ::google::privacy::dlp::v2beta1::TransformationSummary_TransformationResultCode >(code_);
}
inline void TransformationSummary_SummaryResult::set_code(::google::privacy::dlp::v2beta1::TransformationSummary_TransformationResultCode value) {
  
  code_ = value;
  // @@protoc_insertion_point(field_set:google.privacy.dlp.v2beta1.TransformationSummary.SummaryResult.code)
}

// string details = 3;
inline void TransformationSummary_SummaryResult::clear_details() {
  details_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TransformationSummary_SummaryResult::details() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2beta1.TransformationSummary.SummaryResult.details)
  return details_.GetNoArena();
}
inline void TransformationSummary_SummaryResult::set_details(const ::std::string& value) {
  
  details_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.privacy.dlp.v2beta1.TransformationSummary.SummaryResult.details)
}
#if LANG_CXX11
inline void TransformationSummary_SummaryResult::set_details(::std::string&& value) {
  
  details_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.privacy.dlp.v2beta1.TransformationSummary.SummaryResult.details)
}
#endif
inline void TransformationSummary_SummaryResult::set_details(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  details_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.privacy.dlp.v2beta1.TransformationSummary.SummaryResult.details)
}
inline void TransformationSummary_SummaryResult::set_details(const char* value, size_t size) {
  
  details_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.privacy.dlp.v2beta1.TransformationSummary.SummaryResult.details)
}
inline ::std::string* TransformationSummary_SummaryResult::mutable_details() {
  
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2beta1.TransformationSummary.SummaryResult.details)
  return details_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TransformationSummary_SummaryResult::release_details() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2beta1.TransformationSummary.SummaryResult.details)
  
  return details_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TransformationSummary_SummaryResult::set_allocated_details(::std::string* details) {
  if (details != NULL) {
    
  } else {
    
  }
  details_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), details);
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2beta1.TransformationSummary.SummaryResult.details)
}

// -------------------------------------------------------------------

// TransformationSummary

// .google.privacy.dlp.v2beta1.InfoType info_type = 1;
inline bool TransformationSummary::has_info_type() const {
  return this != internal_default_instance() && info_type_ != NULL;
}
inline const ::google::privacy::dlp::v2beta1::InfoType& TransformationSummary::info_type() const {
  const ::google::privacy::dlp::v2beta1::InfoType* p = info_type_;
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2beta1.TransformationSummary.info_type)
  return p != NULL ? *p : *reinterpret_cast<const ::google::privacy::dlp::v2beta1::InfoType*>(
      &::google::privacy::dlp::v2beta1::_InfoType_default_instance_);
}
inline ::google::privacy::dlp::v2beta1::InfoType* TransformationSummary::release_info_type() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2beta1.TransformationSummary.info_type)
  
  ::google::privacy::dlp::v2beta1::InfoType* temp = info_type_;
  info_type_ = NULL;
  return temp;
}
inline ::google::privacy::dlp::v2beta1::InfoType* TransformationSummary::mutable_info_type() {
  
  if (info_type_ == NULL) {
    info_type_ = new ::google::privacy::dlp::v2beta1::InfoType;
  }
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2beta1.TransformationSummary.info_type)
  return info_type_;
}
inline void TransformationSummary::set_allocated_info_type(::google::privacy::dlp::v2beta1::InfoType* info_type) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(info_type_);
  }
  if (info_type) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      info_type = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, info_type, submessage_arena);
    }
    
  } else {
    
  }
  info_type_ = info_type;
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2beta1.TransformationSummary.info_type)
}

// .google.privacy.dlp.v2beta1.FieldId field = 2;
inline bool TransformationSummary::has_field() const {
  return this != internal_default_instance() && field_ != NULL;
}
inline const ::google::privacy::dlp::v2beta1::FieldId& TransformationSummary::field() const {
  const ::google::privacy::dlp::v2beta1::FieldId* p = field_;
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2beta1.TransformationSummary.field)
  return p != NULL ? *p : *reinterpret_cast<const ::google::privacy::dlp::v2beta1::FieldId*>(
      &::google::privacy::dlp::v2beta1::_FieldId_default_instance_);
}
inline ::google::privacy::dlp::v2beta1::FieldId* TransformationSummary::release_field() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2beta1.TransformationSummary.field)
  
  ::google::privacy::dlp::v2beta1::FieldId* temp = field_;
  field_ = NULL;
  return temp;
}
inline ::google::privacy::dlp::v2beta1::FieldId* TransformationSummary::mutable_field() {
  
  if (field_ == NULL) {
    field_ = new ::google::privacy::dlp::v2beta1::FieldId;
  }
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2beta1.TransformationSummary.field)
  return field_;
}
inline void TransformationSummary::set_allocated_field(::google::privacy::dlp::v2beta1::FieldId* field) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(field_);
  }
  if (field) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      field = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, field, submessage_arena);
    }
    
  } else {
    
  }
  field_ = field;
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2beta1.TransformationSummary.field)
}

// .google.privacy.dlp.v2beta1.PrimitiveTransformation transformation = 3;
inline bool TransformationSummary::has_transformation() const {
  return this != internal_default_instance() && transformation_ != NULL;
}
inline void TransformationSummary::clear_transformation() {
  if (GetArenaNoVirtual() == NULL && transformation_ != NULL) {
    delete transformation_;
  }
  transformation_ = NULL;
}
inline const ::google::privacy::dlp::v2beta1::PrimitiveTransformation& TransformationSummary::transformation() const {
  const ::google::privacy::dlp::v2beta1::PrimitiveTransformation* p = transformation_;
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2beta1.TransformationSummary.transformation)
  return p != NULL ? *p : *reinterpret_cast<const ::google::privacy::dlp::v2beta1::PrimitiveTransformation*>(
      &::google::privacy::dlp::v2beta1::_PrimitiveTransformation_default_instance_);
}
inline ::google::privacy::dlp::v2beta1::PrimitiveTransformation* TransformationSummary::release_transformation() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2beta1.TransformationSummary.transformation)
  
  ::google::privacy::dlp::v2beta1::PrimitiveTransformation* temp = transformation_;
  transformation_ = NULL;
  return temp;
}
inline ::google::privacy::dlp::v2beta1::PrimitiveTransformation* TransformationSummary::mutable_transformation() {
  
  if (transformation_ == NULL) {
    transformation_ = new ::google::privacy::dlp::v2beta1::PrimitiveTransformation;
  }
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2beta1.TransformationSummary.transformation)
  return transformation_;
}
inline void TransformationSummary::set_allocated_transformation(::google::privacy::dlp::v2beta1::PrimitiveTransformation* transformation) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete transformation_;
  }
  if (transformation) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      transformation = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, transformation, submessage_arena);
    }
    
  } else {
    
  }
  transformation_ = transformation;
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2beta1.TransformationSummary.transformation)
}

// repeated .google.privacy.dlp.v2beta1.FieldTransformation field_transformations = 5;
inline int TransformationSummary::field_transformations_size() const {
  return field_transformations_.size();
}
inline void TransformationSummary::clear_field_transformations() {
  field_transformations_.Clear();
}
inline const ::google::privacy::dlp::v2beta1::FieldTransformation& TransformationSummary::field_transformations(int index) const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2beta1.TransformationSummary.field_transformations)
  return field_transformations_.Get(index);
}
inline ::google::privacy::dlp::v2beta1::FieldTransformation* TransformationSummary::mutable_field_transformations(int index) {
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2beta1.TransformationSummary.field_transformations)
  return field_transformations_.Mutable(index);
}
inline ::google::privacy::dlp::v2beta1::FieldTransformation* TransformationSummary::add_field_transformations() {
  // @@protoc_insertion_point(field_add:google.privacy.dlp.v2beta1.TransformationSummary.field_transformations)
  return field_transformations_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2beta1::FieldTransformation >*
TransformationSummary::mutable_field_transformations() {
  // @@protoc_insertion_point(field_mutable_list:google.privacy.dlp.v2beta1.TransformationSummary.field_transformations)
  return &field_transformations_;
}
inline const ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2beta1::FieldTransformation >&
TransformationSummary::field_transformations() const {
  // @@protoc_insertion_point(field_list:google.privacy.dlp.v2beta1.TransformationSummary.field_transformations)
  return field_transformations_;
}

// .google.privacy.dlp.v2beta1.RecordSuppression record_suppress = 6;
inline bool TransformationSummary::has_record_suppress() const {
  return this != internal_default_instance() && record_suppress_ != NULL;
}
inline void TransformationSummary::clear_record_suppress() {
  if (GetArenaNoVirtual() == NULL && record_suppress_ != NULL) {
    delete record_suppress_;
  }
  record_suppress_ = NULL;
}
inline const ::google::privacy::dlp::v2beta1::RecordSuppression& TransformationSummary::record_suppress() const {
  const ::google::privacy::dlp::v2beta1::RecordSuppression* p = record_suppress_;
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2beta1.TransformationSummary.record_suppress)
  return p != NULL ? *p : *reinterpret_cast<const ::google::privacy::dlp::v2beta1::RecordSuppression*>(
      &::google::privacy::dlp::v2beta1::_RecordSuppression_default_instance_);
}
inline ::google::privacy::dlp::v2beta1::RecordSuppression* TransformationSummary::release_record_suppress() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2beta1.TransformationSummary.record_suppress)
  
  ::google::privacy::dlp::v2beta1::RecordSuppression* temp = record_suppress_;
  record_suppress_ = NULL;
  return temp;
}
inline ::google::privacy::dlp::v2beta1::RecordSuppression* TransformationSummary::mutable_record_suppress() {
  
  if (record_suppress_ == NULL) {
    record_suppress_ = new ::google::privacy::dlp::v2beta1::RecordSuppression;
  }
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2beta1.TransformationSummary.record_suppress)
  return record_suppress_;
}
inline void TransformationSummary::set_allocated_record_suppress(::google::privacy::dlp::v2beta1::RecordSuppression* record_suppress) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete record_suppress_;
  }
  if (record_suppress) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      record_suppress = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, record_suppress, submessage_arena);
    }
    
  } else {
    
  }
  record_suppress_ = record_suppress;
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2beta1.TransformationSummary.record_suppress)
}

// repeated .google.privacy.dlp.v2beta1.TransformationSummary.SummaryResult results = 4;
inline int TransformationSummary::results_size() const {
  return results_.size();
}
inline void TransformationSummary::clear_results() {
  results_.Clear();
}
inline const ::google::privacy::dlp::v2beta1::TransformationSummary_SummaryResult& TransformationSummary::results(int index) const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2beta1.TransformationSummary.results)
  return results_.Get(index);
}
inline ::google::privacy::dlp::v2beta1::TransformationSummary_SummaryResult* TransformationSummary::mutable_results(int index) {
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2beta1.TransformationSummary.results)
  return results_.Mutable(index);
}
inline ::google::privacy::dlp::v2beta1::TransformationSummary_SummaryResult* TransformationSummary::add_results() {
  // @@protoc_insertion_point(field_add:google.privacy.dlp.v2beta1.TransformationSummary.results)
  return results_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2beta1::TransformationSummary_SummaryResult >*
TransformationSummary::mutable_results() {
  // @@protoc_insertion_point(field_mutable_list:google.privacy.dlp.v2beta1.TransformationSummary.results)
  return &results_;
}
inline const ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2beta1::TransformationSummary_SummaryResult >&
TransformationSummary::results() const {
  // @@protoc_insertion_point(field_list:google.privacy.dlp.v2beta1.TransformationSummary.results)
  return results_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v2beta1
}  // namespace dlp
}  // namespace privacy
}  // namespace google

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::google::privacy::dlp::v2beta1::TimePartConfig_TimePart> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::google::privacy::dlp::v2beta1::TimePartConfig_TimePart>() {
  return ::google::privacy::dlp::v2beta1::TimePartConfig_TimePart_descriptor();
}
template <> struct is_proto_enum< ::google::privacy::dlp::v2beta1::CharsToIgnore_CharacterGroup> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::google::privacy::dlp::v2beta1::CharsToIgnore_CharacterGroup>() {
  return ::google::privacy::dlp::v2beta1::CharsToIgnore_CharacterGroup_descriptor();
}
template <> struct is_proto_enum< ::google::privacy::dlp::v2beta1::CryptoReplaceFfxFpeConfig_FfxCommonNativeAlphabet> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::google::privacy::dlp::v2beta1::CryptoReplaceFfxFpeConfig_FfxCommonNativeAlphabet>() {
  return ::google::privacy::dlp::v2beta1::CryptoReplaceFfxFpeConfig_FfxCommonNativeAlphabet_descriptor();
}
template <> struct is_proto_enum< ::google::privacy::dlp::v2beta1::RecordCondition_Expressions_LogicalOperator> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::google::privacy::dlp::v2beta1::RecordCondition_Expressions_LogicalOperator>() {
  return ::google::privacy::dlp::v2beta1::RecordCondition_Expressions_LogicalOperator_descriptor();
}
template <> struct is_proto_enum< ::google::privacy::dlp::v2beta1::TransformationSummary_TransformationResultCode> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::google::privacy::dlp::v2beta1::TransformationSummary_TransformationResultCode>() {
  return ::google::privacy::dlp::v2beta1::TransformationSummary_TransformationResultCode_descriptor();
}
template <> struct is_proto_enum< ::google::privacy::dlp::v2beta1::Likelihood> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::google::privacy::dlp::v2beta1::Likelihood>() {
  return ::google::privacy::dlp::v2beta1::Likelihood_descriptor();
}
template <> struct is_proto_enum< ::google::privacy::dlp::v2beta1::RelationalOperator> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::google::privacy::dlp::v2beta1::RelationalOperator>() {
  return ::google::privacy::dlp::v2beta1::RelationalOperator_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto__INCLUDED
