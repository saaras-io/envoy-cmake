// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/watcher/v1/watch.proto

#ifndef PROTOBUF_google_2fwatcher_2fv1_2fwatch_2eproto__INCLUDED
#define PROTOBUF_google_2fwatcher_2fv1_2fwatch_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "google/api/annotations.pb.h"
#include <google/protobuf/any.pb.h>
#include <google/protobuf/empty.pb.h>
// @@protoc_insertion_point(includes)

namespace protobuf_google_2fwatcher_2fv1_2fwatch_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[3];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsRequestImpl();
void InitDefaultsRequest();
void InitDefaultsChangeBatchImpl();
void InitDefaultsChangeBatch();
void InitDefaultsChangeImpl();
void InitDefaultsChange();
inline void InitDefaults() {
  InitDefaultsRequest();
  InitDefaultsChangeBatch();
  InitDefaultsChange();
}
}  // namespace protobuf_google_2fwatcher_2fv1_2fwatch_2eproto
namespace google {
namespace watcher {
namespace v1 {
class Change;
class ChangeDefaultTypeInternal;
extern ChangeDefaultTypeInternal _Change_default_instance_;
class ChangeBatch;
class ChangeBatchDefaultTypeInternal;
extern ChangeBatchDefaultTypeInternal _ChangeBatch_default_instance_;
class Request;
class RequestDefaultTypeInternal;
extern RequestDefaultTypeInternal _Request_default_instance_;
}  // namespace v1
}  // namespace watcher
}  // namespace google
namespace google {
namespace watcher {
namespace v1 {

enum Change_State {
  Change_State_EXISTS = 0,
  Change_State_DOES_NOT_EXIST = 1,
  Change_State_INITIAL_STATE_SKIPPED = 2,
  Change_State_ERROR = 3,
  Change_State_Change_State_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  Change_State_Change_State_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool Change_State_IsValid(int value);
const Change_State Change_State_State_MIN = Change_State_EXISTS;
const Change_State Change_State_State_MAX = Change_State_ERROR;
const int Change_State_State_ARRAYSIZE = Change_State_State_MAX + 1;

const ::google::protobuf::EnumDescriptor* Change_State_descriptor();
inline const ::std::string& Change_State_Name(Change_State value) {
  return ::google::protobuf::internal::NameOfEnum(
    Change_State_descriptor(), value);
}
inline bool Change_State_Parse(
    const ::std::string& name, Change_State* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Change_State>(
    Change_State_descriptor(), name, value);
}
// ===================================================================

class Request : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.watcher.v1.Request) */ {
 public:
  Request();
  virtual ~Request();

  Request(const Request& from);

  inline Request& operator=(const Request& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Request(Request&& from) noexcept
    : Request() {
    *this = ::std::move(from);
  }

  inline Request& operator=(Request&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Request& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Request* internal_default_instance() {
    return reinterpret_cast<const Request*>(
               &_Request_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(Request* other);
  friend void swap(Request& a, Request& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Request* New() const PROTOBUF_FINAL { return New(NULL); }

  Request* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Request& from);
  void MergeFrom(const Request& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Request* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string target = 1;
  void clear_target();
  static const int kTargetFieldNumber = 1;
  const ::std::string& target() const;
  void set_target(const ::std::string& value);
  #if LANG_CXX11
  void set_target(::std::string&& value);
  #endif
  void set_target(const char* value);
  void set_target(const char* value, size_t size);
  ::std::string* mutable_target();
  ::std::string* release_target();
  void set_allocated_target(::std::string* target);

  // bytes resume_marker = 2;
  void clear_resume_marker();
  static const int kResumeMarkerFieldNumber = 2;
  const ::std::string& resume_marker() const;
  void set_resume_marker(const ::std::string& value);
  #if LANG_CXX11
  void set_resume_marker(::std::string&& value);
  #endif
  void set_resume_marker(const char* value);
  void set_resume_marker(const void* value, size_t size);
  ::std::string* mutable_resume_marker();
  ::std::string* release_resume_marker();
  void set_allocated_resume_marker(::std::string* resume_marker);

  // @@protoc_insertion_point(class_scope:google.watcher.v1.Request)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr target_;
  ::google::protobuf::internal::ArenaStringPtr resume_marker_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fwatcher_2fv1_2fwatch_2eproto::TableStruct;
  friend void ::protobuf_google_2fwatcher_2fv1_2fwatch_2eproto::InitDefaultsRequestImpl();
};
// -------------------------------------------------------------------

class ChangeBatch : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.watcher.v1.ChangeBatch) */ {
 public:
  ChangeBatch();
  virtual ~ChangeBatch();

  ChangeBatch(const ChangeBatch& from);

  inline ChangeBatch& operator=(const ChangeBatch& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ChangeBatch(ChangeBatch&& from) noexcept
    : ChangeBatch() {
    *this = ::std::move(from);
  }

  inline ChangeBatch& operator=(ChangeBatch&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ChangeBatch& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ChangeBatch* internal_default_instance() {
    return reinterpret_cast<const ChangeBatch*>(
               &_ChangeBatch_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(ChangeBatch* other);
  friend void swap(ChangeBatch& a, ChangeBatch& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ChangeBatch* New() const PROTOBUF_FINAL { return New(NULL); }

  ChangeBatch* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ChangeBatch& from);
  void MergeFrom(const ChangeBatch& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ChangeBatch* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .google.watcher.v1.Change changes = 1;
  int changes_size() const;
  void clear_changes();
  static const int kChangesFieldNumber = 1;
  const ::google::watcher::v1::Change& changes(int index) const;
  ::google::watcher::v1::Change* mutable_changes(int index);
  ::google::watcher::v1::Change* add_changes();
  ::google::protobuf::RepeatedPtrField< ::google::watcher::v1::Change >*
      mutable_changes();
  const ::google::protobuf::RepeatedPtrField< ::google::watcher::v1::Change >&
      changes() const;

  // @@protoc_insertion_point(class_scope:google.watcher.v1.ChangeBatch)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::google::watcher::v1::Change > changes_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fwatcher_2fv1_2fwatch_2eproto::TableStruct;
  friend void ::protobuf_google_2fwatcher_2fv1_2fwatch_2eproto::InitDefaultsChangeBatchImpl();
};
// -------------------------------------------------------------------

class Change : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.watcher.v1.Change) */ {
 public:
  Change();
  virtual ~Change();

  Change(const Change& from);

  inline Change& operator=(const Change& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Change(Change&& from) noexcept
    : Change() {
    *this = ::std::move(from);
  }

  inline Change& operator=(Change&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Change& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Change* internal_default_instance() {
    return reinterpret_cast<const Change*>(
               &_Change_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(Change* other);
  friend void swap(Change& a, Change& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Change* New() const PROTOBUF_FINAL { return New(NULL); }

  Change* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Change& from);
  void MergeFrom(const Change& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Change* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef Change_State State;
  static const State EXISTS =
    Change_State_EXISTS;
  static const State DOES_NOT_EXIST =
    Change_State_DOES_NOT_EXIST;
  static const State INITIAL_STATE_SKIPPED =
    Change_State_INITIAL_STATE_SKIPPED;
  static const State ERROR =
    Change_State_ERROR;
  static inline bool State_IsValid(int value) {
    return Change_State_IsValid(value);
  }
  static const State State_MIN =
    Change_State_State_MIN;
  static const State State_MAX =
    Change_State_State_MAX;
  static const int State_ARRAYSIZE =
    Change_State_State_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  State_descriptor() {
    return Change_State_descriptor();
  }
  static inline const ::std::string& State_Name(State value) {
    return Change_State_Name(value);
  }
  static inline bool State_Parse(const ::std::string& name,
      State* value) {
    return Change_State_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // string element = 1;
  void clear_element();
  static const int kElementFieldNumber = 1;
  const ::std::string& element() const;
  void set_element(const ::std::string& value);
  #if LANG_CXX11
  void set_element(::std::string&& value);
  #endif
  void set_element(const char* value);
  void set_element(const char* value, size_t size);
  ::std::string* mutable_element();
  ::std::string* release_element();
  void set_allocated_element(::std::string* element);

  // bytes resume_marker = 4;
  void clear_resume_marker();
  static const int kResumeMarkerFieldNumber = 4;
  const ::std::string& resume_marker() const;
  void set_resume_marker(const ::std::string& value);
  #if LANG_CXX11
  void set_resume_marker(::std::string&& value);
  #endif
  void set_resume_marker(const char* value);
  void set_resume_marker(const void* value, size_t size);
  ::std::string* mutable_resume_marker();
  ::std::string* release_resume_marker();
  void set_allocated_resume_marker(::std::string* resume_marker);

  // .google.protobuf.Any data = 6;
  bool has_data() const;
  void clear_data();
  static const int kDataFieldNumber = 6;
  const ::google::protobuf::Any& data() const;
  ::google::protobuf::Any* release_data();
  ::google::protobuf::Any* mutable_data();
  void set_allocated_data(::google::protobuf::Any* data);

  // .google.watcher.v1.Change.State state = 2;
  void clear_state();
  static const int kStateFieldNumber = 2;
  ::google::watcher::v1::Change_State state() const;
  void set_state(::google::watcher::v1::Change_State value);

  // bool continued = 5;
  void clear_continued();
  static const int kContinuedFieldNumber = 5;
  bool continued() const;
  void set_continued(bool value);

  // @@protoc_insertion_point(class_scope:google.watcher.v1.Change)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr element_;
  ::google::protobuf::internal::ArenaStringPtr resume_marker_;
  ::google::protobuf::Any* data_;
  int state_;
  bool continued_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fwatcher_2fv1_2fwatch_2eproto::TableStruct;
  friend void ::protobuf_google_2fwatcher_2fv1_2fwatch_2eproto::InitDefaultsChangeImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Request

// string target = 1;
inline void Request::clear_target() {
  target_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Request::target() const {
  // @@protoc_insertion_point(field_get:google.watcher.v1.Request.target)
  return target_.GetNoArena();
}
inline void Request::set_target(const ::std::string& value) {
  
  target_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.watcher.v1.Request.target)
}
#if LANG_CXX11
inline void Request::set_target(::std::string&& value) {
  
  target_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.watcher.v1.Request.target)
}
#endif
inline void Request::set_target(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  target_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.watcher.v1.Request.target)
}
inline void Request::set_target(const char* value, size_t size) {
  
  target_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.watcher.v1.Request.target)
}
inline ::std::string* Request::mutable_target() {
  
  // @@protoc_insertion_point(field_mutable:google.watcher.v1.Request.target)
  return target_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Request::release_target() {
  // @@protoc_insertion_point(field_release:google.watcher.v1.Request.target)
  
  return target_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Request::set_allocated_target(::std::string* target) {
  if (target != NULL) {
    
  } else {
    
  }
  target_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), target);
  // @@protoc_insertion_point(field_set_allocated:google.watcher.v1.Request.target)
}

// bytes resume_marker = 2;
inline void Request::clear_resume_marker() {
  resume_marker_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Request::resume_marker() const {
  // @@protoc_insertion_point(field_get:google.watcher.v1.Request.resume_marker)
  return resume_marker_.GetNoArena();
}
inline void Request::set_resume_marker(const ::std::string& value) {
  
  resume_marker_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.watcher.v1.Request.resume_marker)
}
#if LANG_CXX11
inline void Request::set_resume_marker(::std::string&& value) {
  
  resume_marker_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.watcher.v1.Request.resume_marker)
}
#endif
inline void Request::set_resume_marker(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  resume_marker_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.watcher.v1.Request.resume_marker)
}
inline void Request::set_resume_marker(const void* value, size_t size) {
  
  resume_marker_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.watcher.v1.Request.resume_marker)
}
inline ::std::string* Request::mutable_resume_marker() {
  
  // @@protoc_insertion_point(field_mutable:google.watcher.v1.Request.resume_marker)
  return resume_marker_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Request::release_resume_marker() {
  // @@protoc_insertion_point(field_release:google.watcher.v1.Request.resume_marker)
  
  return resume_marker_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Request::set_allocated_resume_marker(::std::string* resume_marker) {
  if (resume_marker != NULL) {
    
  } else {
    
  }
  resume_marker_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), resume_marker);
  // @@protoc_insertion_point(field_set_allocated:google.watcher.v1.Request.resume_marker)
}

// -------------------------------------------------------------------

// ChangeBatch

// repeated .google.watcher.v1.Change changes = 1;
inline int ChangeBatch::changes_size() const {
  return changes_.size();
}
inline void ChangeBatch::clear_changes() {
  changes_.Clear();
}
inline const ::google::watcher::v1::Change& ChangeBatch::changes(int index) const {
  // @@protoc_insertion_point(field_get:google.watcher.v1.ChangeBatch.changes)
  return changes_.Get(index);
}
inline ::google::watcher::v1::Change* ChangeBatch::mutable_changes(int index) {
  // @@protoc_insertion_point(field_mutable:google.watcher.v1.ChangeBatch.changes)
  return changes_.Mutable(index);
}
inline ::google::watcher::v1::Change* ChangeBatch::add_changes() {
  // @@protoc_insertion_point(field_add:google.watcher.v1.ChangeBatch.changes)
  return changes_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::google::watcher::v1::Change >*
ChangeBatch::mutable_changes() {
  // @@protoc_insertion_point(field_mutable_list:google.watcher.v1.ChangeBatch.changes)
  return &changes_;
}
inline const ::google::protobuf::RepeatedPtrField< ::google::watcher::v1::Change >&
ChangeBatch::changes() const {
  // @@protoc_insertion_point(field_list:google.watcher.v1.ChangeBatch.changes)
  return changes_;
}

// -------------------------------------------------------------------

// Change

// string element = 1;
inline void Change::clear_element() {
  element_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Change::element() const {
  // @@protoc_insertion_point(field_get:google.watcher.v1.Change.element)
  return element_.GetNoArena();
}
inline void Change::set_element(const ::std::string& value) {
  
  element_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.watcher.v1.Change.element)
}
#if LANG_CXX11
inline void Change::set_element(::std::string&& value) {
  
  element_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.watcher.v1.Change.element)
}
#endif
inline void Change::set_element(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  element_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.watcher.v1.Change.element)
}
inline void Change::set_element(const char* value, size_t size) {
  
  element_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.watcher.v1.Change.element)
}
inline ::std::string* Change::mutable_element() {
  
  // @@protoc_insertion_point(field_mutable:google.watcher.v1.Change.element)
  return element_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Change::release_element() {
  // @@protoc_insertion_point(field_release:google.watcher.v1.Change.element)
  
  return element_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Change::set_allocated_element(::std::string* element) {
  if (element != NULL) {
    
  } else {
    
  }
  element_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), element);
  // @@protoc_insertion_point(field_set_allocated:google.watcher.v1.Change.element)
}

// .google.watcher.v1.Change.State state = 2;
inline void Change::clear_state() {
  state_ = 0;
}
inline ::google::watcher::v1::Change_State Change::state() const {
  // @@protoc_insertion_point(field_get:google.watcher.v1.Change.state)
  return static_cast< ::google::watcher::v1::Change_State >(state_);
}
inline void Change::set_state(::google::watcher::v1::Change_State value) {
  
  state_ = value;
  // @@protoc_insertion_point(field_set:google.watcher.v1.Change.state)
}

// .google.protobuf.Any data = 6;
inline bool Change::has_data() const {
  return this != internal_default_instance() && data_ != NULL;
}
inline const ::google::protobuf::Any& Change::data() const {
  const ::google::protobuf::Any* p = data_;
  // @@protoc_insertion_point(field_get:google.watcher.v1.Change.data)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::Any*>(
      &::google::protobuf::_Any_default_instance_);
}
inline ::google::protobuf::Any* Change::release_data() {
  // @@protoc_insertion_point(field_release:google.watcher.v1.Change.data)
  
  ::google::protobuf::Any* temp = data_;
  data_ = NULL;
  return temp;
}
inline ::google::protobuf::Any* Change::mutable_data() {
  
  if (data_ == NULL) {
    data_ = new ::google::protobuf::Any;
  }
  // @@protoc_insertion_point(field_mutable:google.watcher.v1.Change.data)
  return data_;
}
inline void Change::set_allocated_data(::google::protobuf::Any* data) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(data_);
  }
  if (data) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      data = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, data, submessage_arena);
    }
    
  } else {
    
  }
  data_ = data;
  // @@protoc_insertion_point(field_set_allocated:google.watcher.v1.Change.data)
}

// bytes resume_marker = 4;
inline void Change::clear_resume_marker() {
  resume_marker_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Change::resume_marker() const {
  // @@protoc_insertion_point(field_get:google.watcher.v1.Change.resume_marker)
  return resume_marker_.GetNoArena();
}
inline void Change::set_resume_marker(const ::std::string& value) {
  
  resume_marker_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.watcher.v1.Change.resume_marker)
}
#if LANG_CXX11
inline void Change::set_resume_marker(::std::string&& value) {
  
  resume_marker_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.watcher.v1.Change.resume_marker)
}
#endif
inline void Change::set_resume_marker(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  resume_marker_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.watcher.v1.Change.resume_marker)
}
inline void Change::set_resume_marker(const void* value, size_t size) {
  
  resume_marker_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.watcher.v1.Change.resume_marker)
}
inline ::std::string* Change::mutable_resume_marker() {
  
  // @@protoc_insertion_point(field_mutable:google.watcher.v1.Change.resume_marker)
  return resume_marker_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Change::release_resume_marker() {
  // @@protoc_insertion_point(field_release:google.watcher.v1.Change.resume_marker)
  
  return resume_marker_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Change::set_allocated_resume_marker(::std::string* resume_marker) {
  if (resume_marker != NULL) {
    
  } else {
    
  }
  resume_marker_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), resume_marker);
  // @@protoc_insertion_point(field_set_allocated:google.watcher.v1.Change.resume_marker)
}

// bool continued = 5;
inline void Change::clear_continued() {
  continued_ = false;
}
inline bool Change::continued() const {
  // @@protoc_insertion_point(field_get:google.watcher.v1.Change.continued)
  return continued_;
}
inline void Change::set_continued(bool value) {
  
  continued_ = value;
  // @@protoc_insertion_point(field_set:google.watcher.v1.Change.continued)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace watcher
}  // namespace google

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::google::watcher::v1::Change_State> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::google::watcher::v1::Change_State>() {
  return ::google::watcher::v1::Change_State_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_google_2fwatcher_2fv1_2fwatch_2eproto__INCLUDED
