// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: google/cloud/functions/v1beta2/functions.proto
// Original file comments:
// Copyright 2017 Google Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
#ifndef GRPC_google_2fcloud_2ffunctions_2fv1beta2_2ffunctions_2eproto__INCLUDED
#define GRPC_google_2fcloud_2ffunctions_2fv1beta2_2ffunctions_2eproto__INCLUDED

#include "google/cloud/functions/v1beta2/functions.pb.h"

#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace grpc {
class CompletionQueue;
class Channel;
class ServerCompletionQueue;
class ServerContext;
}  // namespace grpc

namespace google {
namespace cloud {
namespace functions {
namespace v1beta2 {

// A service that application uses to manipulate triggers and functions.
class CloudFunctionsService final {
 public:
  static constexpr char const* service_full_name() {
    return "google.cloud.functions.v1beta2.CloudFunctionsService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Returns a list of functions that belong to the requested project.
    virtual ::grpc::Status ListFunctions(::grpc::ClientContext* context, const ::google::cloud::functions::v1beta2::ListFunctionsRequest& request, ::google::cloud::functions::v1beta2::ListFunctionsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::functions::v1beta2::ListFunctionsResponse>> AsyncListFunctions(::grpc::ClientContext* context, const ::google::cloud::functions::v1beta2::ListFunctionsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::functions::v1beta2::ListFunctionsResponse>>(AsyncListFunctionsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::functions::v1beta2::ListFunctionsResponse>> PrepareAsyncListFunctions(::grpc::ClientContext* context, const ::google::cloud::functions::v1beta2::ListFunctionsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::functions::v1beta2::ListFunctionsResponse>>(PrepareAsyncListFunctionsRaw(context, request, cq));
    }
    // Returns a function with the given name from the requested project.
    virtual ::grpc::Status GetFunction(::grpc::ClientContext* context, const ::google::cloud::functions::v1beta2::GetFunctionRequest& request, ::google::cloud::functions::v1beta2::CloudFunction* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::functions::v1beta2::CloudFunction>> AsyncGetFunction(::grpc::ClientContext* context, const ::google::cloud::functions::v1beta2::GetFunctionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::functions::v1beta2::CloudFunction>>(AsyncGetFunctionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::functions::v1beta2::CloudFunction>> PrepareAsyncGetFunction(::grpc::ClientContext* context, const ::google::cloud::functions::v1beta2::GetFunctionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::functions::v1beta2::CloudFunction>>(PrepareAsyncGetFunctionRaw(context, request, cq));
    }
    // Creates a new function. If a function with the given name already exists in
    // the specified project, the long running operation will return
    // `ALREADY_EXISTS` error.
    virtual ::grpc::Status CreateFunction(::grpc::ClientContext* context, const ::google::cloud::functions::v1beta2::CreateFunctionRequest& request, ::google::longrunning::Operation* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::longrunning::Operation>> AsyncCreateFunction(::grpc::ClientContext* context, const ::google::cloud::functions::v1beta2::CreateFunctionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::longrunning::Operation>>(AsyncCreateFunctionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::longrunning::Operation>> PrepareAsyncCreateFunction(::grpc::ClientContext* context, const ::google::cloud::functions::v1beta2::CreateFunctionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::longrunning::Operation>>(PrepareAsyncCreateFunctionRaw(context, request, cq));
    }
    // Updates existing function.
    virtual ::grpc::Status UpdateFunction(::grpc::ClientContext* context, const ::google::cloud::functions::v1beta2::UpdateFunctionRequest& request, ::google::longrunning::Operation* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::longrunning::Operation>> AsyncUpdateFunction(::grpc::ClientContext* context, const ::google::cloud::functions::v1beta2::UpdateFunctionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::longrunning::Operation>>(AsyncUpdateFunctionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::longrunning::Operation>> PrepareAsyncUpdateFunction(::grpc::ClientContext* context, const ::google::cloud::functions::v1beta2::UpdateFunctionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::longrunning::Operation>>(PrepareAsyncUpdateFunctionRaw(context, request, cq));
    }
    // Deletes a function with the given name from the specified project. If the
    // given function is used by some trigger, the trigger will be updated to
    // remove this function.
    virtual ::grpc::Status DeleteFunction(::grpc::ClientContext* context, const ::google::cloud::functions::v1beta2::DeleteFunctionRequest& request, ::google::longrunning::Operation* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::longrunning::Operation>> AsyncDeleteFunction(::grpc::ClientContext* context, const ::google::cloud::functions::v1beta2::DeleteFunctionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::longrunning::Operation>>(AsyncDeleteFunctionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::longrunning::Operation>> PrepareAsyncDeleteFunction(::grpc::ClientContext* context, const ::google::cloud::functions::v1beta2::DeleteFunctionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::longrunning::Operation>>(PrepareAsyncDeleteFunctionRaw(context, request, cq));
    }
    // Invokes synchronously deployed function. To be used for testing, very
    // limited traffic allowed.
    virtual ::grpc::Status CallFunction(::grpc::ClientContext* context, const ::google::cloud::functions::v1beta2::CallFunctionRequest& request, ::google::cloud::functions::v1beta2::CallFunctionResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::functions::v1beta2::CallFunctionResponse>> AsyncCallFunction(::grpc::ClientContext* context, const ::google::cloud::functions::v1beta2::CallFunctionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::functions::v1beta2::CallFunctionResponse>>(AsyncCallFunctionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::functions::v1beta2::CallFunctionResponse>> PrepareAsyncCallFunction(::grpc::ClientContext* context, const ::google::cloud::functions::v1beta2::CallFunctionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::functions::v1beta2::CallFunctionResponse>>(PrepareAsyncCallFunctionRaw(context, request, cq));
    }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::functions::v1beta2::ListFunctionsResponse>* AsyncListFunctionsRaw(::grpc::ClientContext* context, const ::google::cloud::functions::v1beta2::ListFunctionsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::functions::v1beta2::ListFunctionsResponse>* PrepareAsyncListFunctionsRaw(::grpc::ClientContext* context, const ::google::cloud::functions::v1beta2::ListFunctionsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::functions::v1beta2::CloudFunction>* AsyncGetFunctionRaw(::grpc::ClientContext* context, const ::google::cloud::functions::v1beta2::GetFunctionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::functions::v1beta2::CloudFunction>* PrepareAsyncGetFunctionRaw(::grpc::ClientContext* context, const ::google::cloud::functions::v1beta2::GetFunctionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::longrunning::Operation>* AsyncCreateFunctionRaw(::grpc::ClientContext* context, const ::google::cloud::functions::v1beta2::CreateFunctionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::longrunning::Operation>* PrepareAsyncCreateFunctionRaw(::grpc::ClientContext* context, const ::google::cloud::functions::v1beta2::CreateFunctionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::longrunning::Operation>* AsyncUpdateFunctionRaw(::grpc::ClientContext* context, const ::google::cloud::functions::v1beta2::UpdateFunctionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::longrunning::Operation>* PrepareAsyncUpdateFunctionRaw(::grpc::ClientContext* context, const ::google::cloud::functions::v1beta2::UpdateFunctionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::longrunning::Operation>* AsyncDeleteFunctionRaw(::grpc::ClientContext* context, const ::google::cloud::functions::v1beta2::DeleteFunctionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::longrunning::Operation>* PrepareAsyncDeleteFunctionRaw(::grpc::ClientContext* context, const ::google::cloud::functions::v1beta2::DeleteFunctionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::functions::v1beta2::CallFunctionResponse>* AsyncCallFunctionRaw(::grpc::ClientContext* context, const ::google::cloud::functions::v1beta2::CallFunctionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::cloud::functions::v1beta2::CallFunctionResponse>* PrepareAsyncCallFunctionRaw(::grpc::ClientContext* context, const ::google::cloud::functions::v1beta2::CallFunctionRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status ListFunctions(::grpc::ClientContext* context, const ::google::cloud::functions::v1beta2::ListFunctionsRequest& request, ::google::cloud::functions::v1beta2::ListFunctionsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::cloud::functions::v1beta2::ListFunctionsResponse>> AsyncListFunctions(::grpc::ClientContext* context, const ::google::cloud::functions::v1beta2::ListFunctionsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::cloud::functions::v1beta2::ListFunctionsResponse>>(AsyncListFunctionsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::cloud::functions::v1beta2::ListFunctionsResponse>> PrepareAsyncListFunctions(::grpc::ClientContext* context, const ::google::cloud::functions::v1beta2::ListFunctionsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::cloud::functions::v1beta2::ListFunctionsResponse>>(PrepareAsyncListFunctionsRaw(context, request, cq));
    }
    ::grpc::Status GetFunction(::grpc::ClientContext* context, const ::google::cloud::functions::v1beta2::GetFunctionRequest& request, ::google::cloud::functions::v1beta2::CloudFunction* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::cloud::functions::v1beta2::CloudFunction>> AsyncGetFunction(::grpc::ClientContext* context, const ::google::cloud::functions::v1beta2::GetFunctionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::cloud::functions::v1beta2::CloudFunction>>(AsyncGetFunctionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::cloud::functions::v1beta2::CloudFunction>> PrepareAsyncGetFunction(::grpc::ClientContext* context, const ::google::cloud::functions::v1beta2::GetFunctionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::cloud::functions::v1beta2::CloudFunction>>(PrepareAsyncGetFunctionRaw(context, request, cq));
    }
    ::grpc::Status CreateFunction(::grpc::ClientContext* context, const ::google::cloud::functions::v1beta2::CreateFunctionRequest& request, ::google::longrunning::Operation* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::longrunning::Operation>> AsyncCreateFunction(::grpc::ClientContext* context, const ::google::cloud::functions::v1beta2::CreateFunctionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::longrunning::Operation>>(AsyncCreateFunctionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::longrunning::Operation>> PrepareAsyncCreateFunction(::grpc::ClientContext* context, const ::google::cloud::functions::v1beta2::CreateFunctionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::longrunning::Operation>>(PrepareAsyncCreateFunctionRaw(context, request, cq));
    }
    ::grpc::Status UpdateFunction(::grpc::ClientContext* context, const ::google::cloud::functions::v1beta2::UpdateFunctionRequest& request, ::google::longrunning::Operation* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::longrunning::Operation>> AsyncUpdateFunction(::grpc::ClientContext* context, const ::google::cloud::functions::v1beta2::UpdateFunctionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::longrunning::Operation>>(AsyncUpdateFunctionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::longrunning::Operation>> PrepareAsyncUpdateFunction(::grpc::ClientContext* context, const ::google::cloud::functions::v1beta2::UpdateFunctionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::longrunning::Operation>>(PrepareAsyncUpdateFunctionRaw(context, request, cq));
    }
    ::grpc::Status DeleteFunction(::grpc::ClientContext* context, const ::google::cloud::functions::v1beta2::DeleteFunctionRequest& request, ::google::longrunning::Operation* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::longrunning::Operation>> AsyncDeleteFunction(::grpc::ClientContext* context, const ::google::cloud::functions::v1beta2::DeleteFunctionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::longrunning::Operation>>(AsyncDeleteFunctionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::longrunning::Operation>> PrepareAsyncDeleteFunction(::grpc::ClientContext* context, const ::google::cloud::functions::v1beta2::DeleteFunctionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::longrunning::Operation>>(PrepareAsyncDeleteFunctionRaw(context, request, cq));
    }
    ::grpc::Status CallFunction(::grpc::ClientContext* context, const ::google::cloud::functions::v1beta2::CallFunctionRequest& request, ::google::cloud::functions::v1beta2::CallFunctionResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::cloud::functions::v1beta2::CallFunctionResponse>> AsyncCallFunction(::grpc::ClientContext* context, const ::google::cloud::functions::v1beta2::CallFunctionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::cloud::functions::v1beta2::CallFunctionResponse>>(AsyncCallFunctionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::cloud::functions::v1beta2::CallFunctionResponse>> PrepareAsyncCallFunction(::grpc::ClientContext* context, const ::google::cloud::functions::v1beta2::CallFunctionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::cloud::functions::v1beta2::CallFunctionResponse>>(PrepareAsyncCallFunctionRaw(context, request, cq));
    }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    ::grpc::ClientAsyncResponseReader< ::google::cloud::functions::v1beta2::ListFunctionsResponse>* AsyncListFunctionsRaw(::grpc::ClientContext* context, const ::google::cloud::functions::v1beta2::ListFunctionsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::cloud::functions::v1beta2::ListFunctionsResponse>* PrepareAsyncListFunctionsRaw(::grpc::ClientContext* context, const ::google::cloud::functions::v1beta2::ListFunctionsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::cloud::functions::v1beta2::CloudFunction>* AsyncGetFunctionRaw(::grpc::ClientContext* context, const ::google::cloud::functions::v1beta2::GetFunctionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::cloud::functions::v1beta2::CloudFunction>* PrepareAsyncGetFunctionRaw(::grpc::ClientContext* context, const ::google::cloud::functions::v1beta2::GetFunctionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::longrunning::Operation>* AsyncCreateFunctionRaw(::grpc::ClientContext* context, const ::google::cloud::functions::v1beta2::CreateFunctionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::longrunning::Operation>* PrepareAsyncCreateFunctionRaw(::grpc::ClientContext* context, const ::google::cloud::functions::v1beta2::CreateFunctionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::longrunning::Operation>* AsyncUpdateFunctionRaw(::grpc::ClientContext* context, const ::google::cloud::functions::v1beta2::UpdateFunctionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::longrunning::Operation>* PrepareAsyncUpdateFunctionRaw(::grpc::ClientContext* context, const ::google::cloud::functions::v1beta2::UpdateFunctionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::longrunning::Operation>* AsyncDeleteFunctionRaw(::grpc::ClientContext* context, const ::google::cloud::functions::v1beta2::DeleteFunctionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::longrunning::Operation>* PrepareAsyncDeleteFunctionRaw(::grpc::ClientContext* context, const ::google::cloud::functions::v1beta2::DeleteFunctionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::cloud::functions::v1beta2::CallFunctionResponse>* AsyncCallFunctionRaw(::grpc::ClientContext* context, const ::google::cloud::functions::v1beta2::CallFunctionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::cloud::functions::v1beta2::CallFunctionResponse>* PrepareAsyncCallFunctionRaw(::grpc::ClientContext* context, const ::google::cloud::functions::v1beta2::CallFunctionRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_ListFunctions_;
    const ::grpc::internal::RpcMethod rpcmethod_GetFunction_;
    const ::grpc::internal::RpcMethod rpcmethod_CreateFunction_;
    const ::grpc::internal::RpcMethod rpcmethod_UpdateFunction_;
    const ::grpc::internal::RpcMethod rpcmethod_DeleteFunction_;
    const ::grpc::internal::RpcMethod rpcmethod_CallFunction_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Returns a list of functions that belong to the requested project.
    virtual ::grpc::Status ListFunctions(::grpc::ServerContext* context, const ::google::cloud::functions::v1beta2::ListFunctionsRequest* request, ::google::cloud::functions::v1beta2::ListFunctionsResponse* response);
    // Returns a function with the given name from the requested project.
    virtual ::grpc::Status GetFunction(::grpc::ServerContext* context, const ::google::cloud::functions::v1beta2::GetFunctionRequest* request, ::google::cloud::functions::v1beta2::CloudFunction* response);
    // Creates a new function. If a function with the given name already exists in
    // the specified project, the long running operation will return
    // `ALREADY_EXISTS` error.
    virtual ::grpc::Status CreateFunction(::grpc::ServerContext* context, const ::google::cloud::functions::v1beta2::CreateFunctionRequest* request, ::google::longrunning::Operation* response);
    // Updates existing function.
    virtual ::grpc::Status UpdateFunction(::grpc::ServerContext* context, const ::google::cloud::functions::v1beta2::UpdateFunctionRequest* request, ::google::longrunning::Operation* response);
    // Deletes a function with the given name from the specified project. If the
    // given function is used by some trigger, the trigger will be updated to
    // remove this function.
    virtual ::grpc::Status DeleteFunction(::grpc::ServerContext* context, const ::google::cloud::functions::v1beta2::DeleteFunctionRequest* request, ::google::longrunning::Operation* response);
    // Invokes synchronously deployed function. To be used for testing, very
    // limited traffic allowed.
    virtual ::grpc::Status CallFunction(::grpc::ServerContext* context, const ::google::cloud::functions::v1beta2::CallFunctionRequest* request, ::google::cloud::functions::v1beta2::CallFunctionResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_ListFunctions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_ListFunctions() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_ListFunctions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListFunctions(::grpc::ServerContext* context, const ::google::cloud::functions::v1beta2::ListFunctionsRequest* request, ::google::cloud::functions::v1beta2::ListFunctionsResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListFunctions(::grpc::ServerContext* context, ::google::cloud::functions::v1beta2::ListFunctionsRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::cloud::functions::v1beta2::ListFunctionsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetFunction : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_GetFunction() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_GetFunction() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetFunction(::grpc::ServerContext* context, const ::google::cloud::functions::v1beta2::GetFunctionRequest* request, ::google::cloud::functions::v1beta2::CloudFunction* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetFunction(::grpc::ServerContext* context, ::google::cloud::functions::v1beta2::GetFunctionRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::cloud::functions::v1beta2::CloudFunction>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_CreateFunction : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_CreateFunction() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_CreateFunction() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateFunction(::grpc::ServerContext* context, const ::google::cloud::functions::v1beta2::CreateFunctionRequest* request, ::google::longrunning::Operation* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateFunction(::grpc::ServerContext* context, ::google::cloud::functions::v1beta2::CreateFunctionRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::longrunning::Operation>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_UpdateFunction : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_UpdateFunction() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_UpdateFunction() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateFunction(::grpc::ServerContext* context, const ::google::cloud::functions::v1beta2::UpdateFunctionRequest* request, ::google::longrunning::Operation* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateFunction(::grpc::ServerContext* context, ::google::cloud::functions::v1beta2::UpdateFunctionRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::longrunning::Operation>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DeleteFunction : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_DeleteFunction() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_DeleteFunction() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteFunction(::grpc::ServerContext* context, const ::google::cloud::functions::v1beta2::DeleteFunctionRequest* request, ::google::longrunning::Operation* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteFunction(::grpc::ServerContext* context, ::google::cloud::functions::v1beta2::DeleteFunctionRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::longrunning::Operation>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_CallFunction : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_CallFunction() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_CallFunction() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CallFunction(::grpc::ServerContext* context, const ::google::cloud::functions::v1beta2::CallFunctionRequest* request, ::google::cloud::functions::v1beta2::CallFunctionResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCallFunction(::grpc::ServerContext* context, ::google::cloud::functions::v1beta2::CallFunctionRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::cloud::functions::v1beta2::CallFunctionResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_ListFunctions<WithAsyncMethod_GetFunction<WithAsyncMethod_CreateFunction<WithAsyncMethod_UpdateFunction<WithAsyncMethod_DeleteFunction<WithAsyncMethod_CallFunction<Service > > > > > > AsyncService;
  template <class BaseClass>
  class WithGenericMethod_ListFunctions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_ListFunctions() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_ListFunctions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListFunctions(::grpc::ServerContext* context, const ::google::cloud::functions::v1beta2::ListFunctionsRequest* request, ::google::cloud::functions::v1beta2::ListFunctionsResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetFunction : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_GetFunction() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_GetFunction() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetFunction(::grpc::ServerContext* context, const ::google::cloud::functions::v1beta2::GetFunctionRequest* request, ::google::cloud::functions::v1beta2::CloudFunction* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_CreateFunction : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_CreateFunction() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_CreateFunction() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateFunction(::grpc::ServerContext* context, const ::google::cloud::functions::v1beta2::CreateFunctionRequest* request, ::google::longrunning::Operation* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_UpdateFunction : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_UpdateFunction() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_UpdateFunction() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateFunction(::grpc::ServerContext* context, const ::google::cloud::functions::v1beta2::UpdateFunctionRequest* request, ::google::longrunning::Operation* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DeleteFunction : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_DeleteFunction() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_DeleteFunction() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteFunction(::grpc::ServerContext* context, const ::google::cloud::functions::v1beta2::DeleteFunctionRequest* request, ::google::longrunning::Operation* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_CallFunction : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_CallFunction() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_CallFunction() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CallFunction(::grpc::ServerContext* context, const ::google::cloud::functions::v1beta2::CallFunctionRequest* request, ::google::cloud::functions::v1beta2::CallFunctionResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ListFunctions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_ListFunctions() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler< ::google::cloud::functions::v1beta2::ListFunctionsRequest, ::google::cloud::functions::v1beta2::ListFunctionsResponse>(std::bind(&WithStreamedUnaryMethod_ListFunctions<BaseClass>::StreamedListFunctions, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_ListFunctions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ListFunctions(::grpc::ServerContext* context, const ::google::cloud::functions::v1beta2::ListFunctionsRequest* request, ::google::cloud::functions::v1beta2::ListFunctionsResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedListFunctions(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::cloud::functions::v1beta2::ListFunctionsRequest,::google::cloud::functions::v1beta2::ListFunctionsResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetFunction : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_GetFunction() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler< ::google::cloud::functions::v1beta2::GetFunctionRequest, ::google::cloud::functions::v1beta2::CloudFunction>(std::bind(&WithStreamedUnaryMethod_GetFunction<BaseClass>::StreamedGetFunction, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetFunction() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetFunction(::grpc::ServerContext* context, const ::google::cloud::functions::v1beta2::GetFunctionRequest* request, ::google::cloud::functions::v1beta2::CloudFunction* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetFunction(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::cloud::functions::v1beta2::GetFunctionRequest,::google::cloud::functions::v1beta2::CloudFunction>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CreateFunction : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_CreateFunction() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler< ::google::cloud::functions::v1beta2::CreateFunctionRequest, ::google::longrunning::Operation>(std::bind(&WithStreamedUnaryMethod_CreateFunction<BaseClass>::StreamedCreateFunction, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_CreateFunction() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CreateFunction(::grpc::ServerContext* context, const ::google::cloud::functions::v1beta2::CreateFunctionRequest* request, ::google::longrunning::Operation* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCreateFunction(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::cloud::functions::v1beta2::CreateFunctionRequest,::google::longrunning::Operation>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_UpdateFunction : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_UpdateFunction() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler< ::google::cloud::functions::v1beta2::UpdateFunctionRequest, ::google::longrunning::Operation>(std::bind(&WithStreamedUnaryMethod_UpdateFunction<BaseClass>::StreamedUpdateFunction, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_UpdateFunction() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status UpdateFunction(::grpc::ServerContext* context, const ::google::cloud::functions::v1beta2::UpdateFunctionRequest* request, ::google::longrunning::Operation* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedUpdateFunction(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::cloud::functions::v1beta2::UpdateFunctionRequest,::google::longrunning::Operation>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DeleteFunction : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_DeleteFunction() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler< ::google::cloud::functions::v1beta2::DeleteFunctionRequest, ::google::longrunning::Operation>(std::bind(&WithStreamedUnaryMethod_DeleteFunction<BaseClass>::StreamedDeleteFunction, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_DeleteFunction() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DeleteFunction(::grpc::ServerContext* context, const ::google::cloud::functions::v1beta2::DeleteFunctionRequest* request, ::google::longrunning::Operation* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDeleteFunction(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::cloud::functions::v1beta2::DeleteFunctionRequest,::google::longrunning::Operation>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CallFunction : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_CallFunction() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler< ::google::cloud::functions::v1beta2::CallFunctionRequest, ::google::cloud::functions::v1beta2::CallFunctionResponse>(std::bind(&WithStreamedUnaryMethod_CallFunction<BaseClass>::StreamedCallFunction, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_CallFunction() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CallFunction(::grpc::ServerContext* context, const ::google::cloud::functions::v1beta2::CallFunctionRequest* request, ::google::cloud::functions::v1beta2::CallFunctionResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCallFunction(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::cloud::functions::v1beta2::CallFunctionRequest,::google::cloud::functions::v1beta2::CallFunctionResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_ListFunctions<WithStreamedUnaryMethod_GetFunction<WithStreamedUnaryMethod_CreateFunction<WithStreamedUnaryMethod_UpdateFunction<WithStreamedUnaryMethod_DeleteFunction<WithStreamedUnaryMethod_CallFunction<Service > > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_ListFunctions<WithStreamedUnaryMethod_GetFunction<WithStreamedUnaryMethod_CreateFunction<WithStreamedUnaryMethod_UpdateFunction<WithStreamedUnaryMethod_DeleteFunction<WithStreamedUnaryMethod_CallFunction<Service > > > > > > StreamedService;
};

}  // namespace v1beta2
}  // namespace functions
}  // namespace cloud
}  // namespace google


#endif  // GRPC_google_2fcloud_2ffunctions_2fv1beta2_2ffunctions_2eproto__INCLUDED
