// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: google/appengine/v1/appengine.proto

#include "google/appengine/v1/appengine.pb.h"
#include "google/appengine/v1/appengine.grpc.pb.h"

#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace google {
namespace appengine {
namespace v1 {

static const char* Instances_method_names[] = {
  "/google.appengine.v1.Instances/ListInstances",
  "/google.appengine.v1.Instances/GetInstance",
  "/google.appengine.v1.Instances/DeleteInstance",
  "/google.appengine.v1.Instances/DebugInstance",
};

std::unique_ptr< Instances::Stub> Instances::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< Instances::Stub> stub(new Instances::Stub(channel));
  return stub;
}

Instances::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_ListInstances_(Instances_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetInstance_(Instances_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DeleteInstance_(Instances_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DebugInstance_(Instances_method_names[3], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status Instances::Stub::ListInstances(::grpc::ClientContext* context, const ::google::appengine::v1::ListInstancesRequest& request, ::google::appengine::v1::ListInstancesResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_ListInstances_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::google::appengine::v1::ListInstancesResponse>* Instances::Stub::AsyncListInstancesRaw(::grpc::ClientContext* context, const ::google::appengine::v1::ListInstancesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::appengine::v1::ListInstancesResponse>::Create(channel_.get(), cq, rpcmethod_ListInstances_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::google::appengine::v1::ListInstancesResponse>* Instances::Stub::PrepareAsyncListInstancesRaw(::grpc::ClientContext* context, const ::google::appengine::v1::ListInstancesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::appengine::v1::ListInstancesResponse>::Create(channel_.get(), cq, rpcmethod_ListInstances_, context, request, false);
}

::grpc::Status Instances::Stub::GetInstance(::grpc::ClientContext* context, const ::google::appengine::v1::GetInstanceRequest& request, ::google::appengine::v1::Instance* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetInstance_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::google::appengine::v1::Instance>* Instances::Stub::AsyncGetInstanceRaw(::grpc::ClientContext* context, const ::google::appengine::v1::GetInstanceRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::appengine::v1::Instance>::Create(channel_.get(), cq, rpcmethod_GetInstance_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::google::appengine::v1::Instance>* Instances::Stub::PrepareAsyncGetInstanceRaw(::grpc::ClientContext* context, const ::google::appengine::v1::GetInstanceRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::appengine::v1::Instance>::Create(channel_.get(), cq, rpcmethod_GetInstance_, context, request, false);
}

::grpc::Status Instances::Stub::DeleteInstance(::grpc::ClientContext* context, const ::google::appengine::v1::DeleteInstanceRequest& request, ::google::longrunning::Operation* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_DeleteInstance_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::google::longrunning::Operation>* Instances::Stub::AsyncDeleteInstanceRaw(::grpc::ClientContext* context, const ::google::appengine::v1::DeleteInstanceRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::longrunning::Operation>::Create(channel_.get(), cq, rpcmethod_DeleteInstance_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::google::longrunning::Operation>* Instances::Stub::PrepareAsyncDeleteInstanceRaw(::grpc::ClientContext* context, const ::google::appengine::v1::DeleteInstanceRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::longrunning::Operation>::Create(channel_.get(), cq, rpcmethod_DeleteInstance_, context, request, false);
}

::grpc::Status Instances::Stub::DebugInstance(::grpc::ClientContext* context, const ::google::appengine::v1::DebugInstanceRequest& request, ::google::longrunning::Operation* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_DebugInstance_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::google::longrunning::Operation>* Instances::Stub::AsyncDebugInstanceRaw(::grpc::ClientContext* context, const ::google::appengine::v1::DebugInstanceRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::longrunning::Operation>::Create(channel_.get(), cq, rpcmethod_DebugInstance_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::google::longrunning::Operation>* Instances::Stub::PrepareAsyncDebugInstanceRaw(::grpc::ClientContext* context, const ::google::appengine::v1::DebugInstanceRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::longrunning::Operation>::Create(channel_.get(), cq, rpcmethod_DebugInstance_, context, request, false);
}

Instances::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Instances_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Instances::Service, ::google::appengine::v1::ListInstancesRequest, ::google::appengine::v1::ListInstancesResponse>(
          std::mem_fn(&Instances::Service::ListInstances), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Instances_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Instances::Service, ::google::appengine::v1::GetInstanceRequest, ::google::appengine::v1::Instance>(
          std::mem_fn(&Instances::Service::GetInstance), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Instances_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Instances::Service, ::google::appengine::v1::DeleteInstanceRequest, ::google::longrunning::Operation>(
          std::mem_fn(&Instances::Service::DeleteInstance), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Instances_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Instances::Service, ::google::appengine::v1::DebugInstanceRequest, ::google::longrunning::Operation>(
          std::mem_fn(&Instances::Service::DebugInstance), this)));
}

Instances::Service::~Service() {
}

::grpc::Status Instances::Service::ListInstances(::grpc::ServerContext* context, const ::google::appengine::v1::ListInstancesRequest* request, ::google::appengine::v1::ListInstancesResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Instances::Service::GetInstance(::grpc::ServerContext* context, const ::google::appengine::v1::GetInstanceRequest* request, ::google::appengine::v1::Instance* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Instances::Service::DeleteInstance(::grpc::ServerContext* context, const ::google::appengine::v1::DeleteInstanceRequest* request, ::google::longrunning::Operation* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Instances::Service::DebugInstance(::grpc::ServerContext* context, const ::google::appengine::v1::DebugInstanceRequest* request, ::google::longrunning::Operation* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


static const char* Versions_method_names[] = {
  "/google.appengine.v1.Versions/ListVersions",
  "/google.appengine.v1.Versions/GetVersion",
  "/google.appengine.v1.Versions/CreateVersion",
  "/google.appengine.v1.Versions/UpdateVersion",
  "/google.appengine.v1.Versions/DeleteVersion",
};

std::unique_ptr< Versions::Stub> Versions::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< Versions::Stub> stub(new Versions::Stub(channel));
  return stub;
}

Versions::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_ListVersions_(Versions_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetVersion_(Versions_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CreateVersion_(Versions_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UpdateVersion_(Versions_method_names[3], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DeleteVersion_(Versions_method_names[4], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status Versions::Stub::ListVersions(::grpc::ClientContext* context, const ::google::appengine::v1::ListVersionsRequest& request, ::google::appengine::v1::ListVersionsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_ListVersions_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::google::appengine::v1::ListVersionsResponse>* Versions::Stub::AsyncListVersionsRaw(::grpc::ClientContext* context, const ::google::appengine::v1::ListVersionsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::appengine::v1::ListVersionsResponse>::Create(channel_.get(), cq, rpcmethod_ListVersions_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::google::appengine::v1::ListVersionsResponse>* Versions::Stub::PrepareAsyncListVersionsRaw(::grpc::ClientContext* context, const ::google::appengine::v1::ListVersionsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::appengine::v1::ListVersionsResponse>::Create(channel_.get(), cq, rpcmethod_ListVersions_, context, request, false);
}

::grpc::Status Versions::Stub::GetVersion(::grpc::ClientContext* context, const ::google::appengine::v1::GetVersionRequest& request, ::google::appengine::v1::Version* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetVersion_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::google::appengine::v1::Version>* Versions::Stub::AsyncGetVersionRaw(::grpc::ClientContext* context, const ::google::appengine::v1::GetVersionRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::appengine::v1::Version>::Create(channel_.get(), cq, rpcmethod_GetVersion_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::google::appengine::v1::Version>* Versions::Stub::PrepareAsyncGetVersionRaw(::grpc::ClientContext* context, const ::google::appengine::v1::GetVersionRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::appengine::v1::Version>::Create(channel_.get(), cq, rpcmethod_GetVersion_, context, request, false);
}

::grpc::Status Versions::Stub::CreateVersion(::grpc::ClientContext* context, const ::google::appengine::v1::CreateVersionRequest& request, ::google::longrunning::Operation* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_CreateVersion_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::google::longrunning::Operation>* Versions::Stub::AsyncCreateVersionRaw(::grpc::ClientContext* context, const ::google::appengine::v1::CreateVersionRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::longrunning::Operation>::Create(channel_.get(), cq, rpcmethod_CreateVersion_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::google::longrunning::Operation>* Versions::Stub::PrepareAsyncCreateVersionRaw(::grpc::ClientContext* context, const ::google::appengine::v1::CreateVersionRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::longrunning::Operation>::Create(channel_.get(), cq, rpcmethod_CreateVersion_, context, request, false);
}

::grpc::Status Versions::Stub::UpdateVersion(::grpc::ClientContext* context, const ::google::appengine::v1::UpdateVersionRequest& request, ::google::longrunning::Operation* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_UpdateVersion_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::google::longrunning::Operation>* Versions::Stub::AsyncUpdateVersionRaw(::grpc::ClientContext* context, const ::google::appengine::v1::UpdateVersionRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::longrunning::Operation>::Create(channel_.get(), cq, rpcmethod_UpdateVersion_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::google::longrunning::Operation>* Versions::Stub::PrepareAsyncUpdateVersionRaw(::grpc::ClientContext* context, const ::google::appengine::v1::UpdateVersionRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::longrunning::Operation>::Create(channel_.get(), cq, rpcmethod_UpdateVersion_, context, request, false);
}

::grpc::Status Versions::Stub::DeleteVersion(::grpc::ClientContext* context, const ::google::appengine::v1::DeleteVersionRequest& request, ::google::longrunning::Operation* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_DeleteVersion_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::google::longrunning::Operation>* Versions::Stub::AsyncDeleteVersionRaw(::grpc::ClientContext* context, const ::google::appengine::v1::DeleteVersionRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::longrunning::Operation>::Create(channel_.get(), cq, rpcmethod_DeleteVersion_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::google::longrunning::Operation>* Versions::Stub::PrepareAsyncDeleteVersionRaw(::grpc::ClientContext* context, const ::google::appengine::v1::DeleteVersionRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::longrunning::Operation>::Create(channel_.get(), cq, rpcmethod_DeleteVersion_, context, request, false);
}

Versions::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Versions_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Versions::Service, ::google::appengine::v1::ListVersionsRequest, ::google::appengine::v1::ListVersionsResponse>(
          std::mem_fn(&Versions::Service::ListVersions), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Versions_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Versions::Service, ::google::appengine::v1::GetVersionRequest, ::google::appengine::v1::Version>(
          std::mem_fn(&Versions::Service::GetVersion), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Versions_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Versions::Service, ::google::appengine::v1::CreateVersionRequest, ::google::longrunning::Operation>(
          std::mem_fn(&Versions::Service::CreateVersion), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Versions_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Versions::Service, ::google::appengine::v1::UpdateVersionRequest, ::google::longrunning::Operation>(
          std::mem_fn(&Versions::Service::UpdateVersion), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Versions_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Versions::Service, ::google::appengine::v1::DeleteVersionRequest, ::google::longrunning::Operation>(
          std::mem_fn(&Versions::Service::DeleteVersion), this)));
}

Versions::Service::~Service() {
}

::grpc::Status Versions::Service::ListVersions(::grpc::ServerContext* context, const ::google::appengine::v1::ListVersionsRequest* request, ::google::appengine::v1::ListVersionsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Versions::Service::GetVersion(::grpc::ServerContext* context, const ::google::appengine::v1::GetVersionRequest* request, ::google::appengine::v1::Version* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Versions::Service::CreateVersion(::grpc::ServerContext* context, const ::google::appengine::v1::CreateVersionRequest* request, ::google::longrunning::Operation* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Versions::Service::UpdateVersion(::grpc::ServerContext* context, const ::google::appengine::v1::UpdateVersionRequest* request, ::google::longrunning::Operation* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Versions::Service::DeleteVersion(::grpc::ServerContext* context, const ::google::appengine::v1::DeleteVersionRequest* request, ::google::longrunning::Operation* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


static const char* Services_method_names[] = {
  "/google.appengine.v1.Services/ListServices",
  "/google.appengine.v1.Services/GetService",
  "/google.appengine.v1.Services/UpdateService",
  "/google.appengine.v1.Services/DeleteService",
};

std::unique_ptr< Services::Stub> Services::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< Services::Stub> stub(new Services::Stub(channel));
  return stub;
}

Services::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_ListServices_(Services_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetService_(Services_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UpdateService_(Services_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DeleteService_(Services_method_names[3], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status Services::Stub::ListServices(::grpc::ClientContext* context, const ::google::appengine::v1::ListServicesRequest& request, ::google::appengine::v1::ListServicesResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_ListServices_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::google::appengine::v1::ListServicesResponse>* Services::Stub::AsyncListServicesRaw(::grpc::ClientContext* context, const ::google::appengine::v1::ListServicesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::appengine::v1::ListServicesResponse>::Create(channel_.get(), cq, rpcmethod_ListServices_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::google::appengine::v1::ListServicesResponse>* Services::Stub::PrepareAsyncListServicesRaw(::grpc::ClientContext* context, const ::google::appengine::v1::ListServicesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::appengine::v1::ListServicesResponse>::Create(channel_.get(), cq, rpcmethod_ListServices_, context, request, false);
}

::grpc::Status Services::Stub::GetService(::grpc::ClientContext* context, const ::google::appengine::v1::GetServiceRequest& request, ::google::appengine::v1::Service* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetService_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::google::appengine::v1::Service>* Services::Stub::AsyncGetServiceRaw(::grpc::ClientContext* context, const ::google::appengine::v1::GetServiceRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::appengine::v1::Service>::Create(channel_.get(), cq, rpcmethod_GetService_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::google::appengine::v1::Service>* Services::Stub::PrepareAsyncGetServiceRaw(::grpc::ClientContext* context, const ::google::appengine::v1::GetServiceRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::appengine::v1::Service>::Create(channel_.get(), cq, rpcmethod_GetService_, context, request, false);
}

::grpc::Status Services::Stub::UpdateService(::grpc::ClientContext* context, const ::google::appengine::v1::UpdateServiceRequest& request, ::google::longrunning::Operation* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_UpdateService_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::google::longrunning::Operation>* Services::Stub::AsyncUpdateServiceRaw(::grpc::ClientContext* context, const ::google::appengine::v1::UpdateServiceRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::longrunning::Operation>::Create(channel_.get(), cq, rpcmethod_UpdateService_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::google::longrunning::Operation>* Services::Stub::PrepareAsyncUpdateServiceRaw(::grpc::ClientContext* context, const ::google::appengine::v1::UpdateServiceRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::longrunning::Operation>::Create(channel_.get(), cq, rpcmethod_UpdateService_, context, request, false);
}

::grpc::Status Services::Stub::DeleteService(::grpc::ClientContext* context, const ::google::appengine::v1::DeleteServiceRequest& request, ::google::longrunning::Operation* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_DeleteService_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::google::longrunning::Operation>* Services::Stub::AsyncDeleteServiceRaw(::grpc::ClientContext* context, const ::google::appengine::v1::DeleteServiceRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::longrunning::Operation>::Create(channel_.get(), cq, rpcmethod_DeleteService_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::google::longrunning::Operation>* Services::Stub::PrepareAsyncDeleteServiceRaw(::grpc::ClientContext* context, const ::google::appengine::v1::DeleteServiceRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::longrunning::Operation>::Create(channel_.get(), cq, rpcmethod_DeleteService_, context, request, false);
}

Services::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Services_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Services::Service, ::google::appengine::v1::ListServicesRequest, ::google::appengine::v1::ListServicesResponse>(
          std::mem_fn(&Services::Service::ListServices), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Services_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Services::Service, ::google::appengine::v1::GetServiceRequest, ::google::appengine::v1::Service>(
          std::mem_fn(&Services::Service::GetService), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Services_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Services::Service, ::google::appengine::v1::UpdateServiceRequest, ::google::longrunning::Operation>(
          std::mem_fn(&Services::Service::UpdateService), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Services_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Services::Service, ::google::appengine::v1::DeleteServiceRequest, ::google::longrunning::Operation>(
          std::mem_fn(&Services::Service::DeleteService), this)));
}

Services::Service::~Service() {
}

::grpc::Status Services::Service::ListServices(::grpc::ServerContext* context, const ::google::appengine::v1::ListServicesRequest* request, ::google::appengine::v1::ListServicesResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Services::Service::GetService(::grpc::ServerContext* context, const ::google::appengine::v1::GetServiceRequest* request, ::google::appengine::v1::Service* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Services::Service::UpdateService(::grpc::ServerContext* context, const ::google::appengine::v1::UpdateServiceRequest* request, ::google::longrunning::Operation* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Services::Service::DeleteService(::grpc::ServerContext* context, const ::google::appengine::v1::DeleteServiceRequest* request, ::google::longrunning::Operation* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


static const char* Applications_method_names[] = {
  "/google.appengine.v1.Applications/GetApplication",
  "/google.appengine.v1.Applications/RepairApplication",
};

std::unique_ptr< Applications::Stub> Applications::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< Applications::Stub> stub(new Applications::Stub(channel));
  return stub;
}

Applications::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_GetApplication_(Applications_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_RepairApplication_(Applications_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status Applications::Stub::GetApplication(::grpc::ClientContext* context, const ::google::appengine::v1::GetApplicationRequest& request, ::google::appengine::v1::Application* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetApplication_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::google::appengine::v1::Application>* Applications::Stub::AsyncGetApplicationRaw(::grpc::ClientContext* context, const ::google::appengine::v1::GetApplicationRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::appengine::v1::Application>::Create(channel_.get(), cq, rpcmethod_GetApplication_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::google::appengine::v1::Application>* Applications::Stub::PrepareAsyncGetApplicationRaw(::grpc::ClientContext* context, const ::google::appengine::v1::GetApplicationRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::appengine::v1::Application>::Create(channel_.get(), cq, rpcmethod_GetApplication_, context, request, false);
}

::grpc::Status Applications::Stub::RepairApplication(::grpc::ClientContext* context, const ::google::appengine::v1::RepairApplicationRequest& request, ::google::longrunning::Operation* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_RepairApplication_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::google::longrunning::Operation>* Applications::Stub::AsyncRepairApplicationRaw(::grpc::ClientContext* context, const ::google::appengine::v1::RepairApplicationRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::longrunning::Operation>::Create(channel_.get(), cq, rpcmethod_RepairApplication_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::google::longrunning::Operation>* Applications::Stub::PrepareAsyncRepairApplicationRaw(::grpc::ClientContext* context, const ::google::appengine::v1::RepairApplicationRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::longrunning::Operation>::Create(channel_.get(), cq, rpcmethod_RepairApplication_, context, request, false);
}

Applications::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Applications_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Applications::Service, ::google::appengine::v1::GetApplicationRequest, ::google::appengine::v1::Application>(
          std::mem_fn(&Applications::Service::GetApplication), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Applications_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Applications::Service, ::google::appengine::v1::RepairApplicationRequest, ::google::longrunning::Operation>(
          std::mem_fn(&Applications::Service::RepairApplication), this)));
}

Applications::Service::~Service() {
}

::grpc::Status Applications::Service::GetApplication(::grpc::ServerContext* context, const ::google::appengine::v1::GetApplicationRequest* request, ::google::appengine::v1::Application* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Applications::Service::RepairApplication(::grpc::ServerContext* context, const ::google::appengine::v1::RepairApplicationRequest* request, ::google::longrunning::Operation* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace google
}  // namespace appengine
}  // namespace v1

