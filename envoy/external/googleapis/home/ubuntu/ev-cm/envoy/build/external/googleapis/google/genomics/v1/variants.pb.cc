// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/genomics/v1/variants.proto

#include "google/genomics/v1/variants.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)
namespace google {
namespace genomics {
namespace v1 {
class VariantSetMetadata_InfoEntry_DoNotUseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<VariantSetMetadata_InfoEntry_DoNotUse>
      _instance;
} _VariantSetMetadata_InfoEntry_DoNotUse_default_instance_;
class VariantSetMetadataDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<VariantSetMetadata>
      _instance;
} _VariantSetMetadata_default_instance_;
class VariantSetDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<VariantSet>
      _instance;
} _VariantSet_default_instance_;
class Variant_InfoEntry_DoNotUseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Variant_InfoEntry_DoNotUse>
      _instance;
} _Variant_InfoEntry_DoNotUse_default_instance_;
class VariantDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Variant>
      _instance;
} _Variant_default_instance_;
class VariantCall_InfoEntry_DoNotUseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<VariantCall_InfoEntry_DoNotUse>
      _instance;
} _VariantCall_InfoEntry_DoNotUse_default_instance_;
class VariantCallDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<VariantCall>
      _instance;
} _VariantCall_default_instance_;
class CallSet_InfoEntry_DoNotUseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CallSet_InfoEntry_DoNotUse>
      _instance;
} _CallSet_InfoEntry_DoNotUse_default_instance_;
class CallSetDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CallSet>
      _instance;
} _CallSet_default_instance_;
class ReferenceBoundDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ReferenceBound>
      _instance;
} _ReferenceBound_default_instance_;
class ImportVariantsRequest_InfoMergeConfigEntry_DoNotUseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ImportVariantsRequest_InfoMergeConfigEntry_DoNotUse>
      _instance;
} _ImportVariantsRequest_InfoMergeConfigEntry_DoNotUse_default_instance_;
class ImportVariantsRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ImportVariantsRequest>
      _instance;
} _ImportVariantsRequest_default_instance_;
class ImportVariantsResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ImportVariantsResponse>
      _instance;
} _ImportVariantsResponse_default_instance_;
class CreateVariantSetRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CreateVariantSetRequest>
      _instance;
} _CreateVariantSetRequest_default_instance_;
class ExportVariantSetRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ExportVariantSetRequest>
      _instance;
} _ExportVariantSetRequest_default_instance_;
class GetVariantSetRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GetVariantSetRequest>
      _instance;
} _GetVariantSetRequest_default_instance_;
class SearchVariantSetsRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SearchVariantSetsRequest>
      _instance;
} _SearchVariantSetsRequest_default_instance_;
class SearchVariantSetsResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SearchVariantSetsResponse>
      _instance;
} _SearchVariantSetsResponse_default_instance_;
class DeleteVariantSetRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DeleteVariantSetRequest>
      _instance;
} _DeleteVariantSetRequest_default_instance_;
class UpdateVariantSetRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<UpdateVariantSetRequest>
      _instance;
} _UpdateVariantSetRequest_default_instance_;
class SearchVariantsRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SearchVariantsRequest>
      _instance;
} _SearchVariantsRequest_default_instance_;
class SearchVariantsResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SearchVariantsResponse>
      _instance;
} _SearchVariantsResponse_default_instance_;
class CreateVariantRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CreateVariantRequest>
      _instance;
} _CreateVariantRequest_default_instance_;
class UpdateVariantRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<UpdateVariantRequest>
      _instance;
} _UpdateVariantRequest_default_instance_;
class DeleteVariantRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DeleteVariantRequest>
      _instance;
} _DeleteVariantRequest_default_instance_;
class GetVariantRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GetVariantRequest>
      _instance;
} _GetVariantRequest_default_instance_;
class MergeVariantsRequest_InfoMergeConfigEntry_DoNotUseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MergeVariantsRequest_InfoMergeConfigEntry_DoNotUse>
      _instance;
} _MergeVariantsRequest_InfoMergeConfigEntry_DoNotUse_default_instance_;
class MergeVariantsRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MergeVariantsRequest>
      _instance;
} _MergeVariantsRequest_default_instance_;
class SearchCallSetsRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SearchCallSetsRequest>
      _instance;
} _SearchCallSetsRequest_default_instance_;
class SearchCallSetsResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SearchCallSetsResponse>
      _instance;
} _SearchCallSetsResponse_default_instance_;
class CreateCallSetRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CreateCallSetRequest>
      _instance;
} _CreateCallSetRequest_default_instance_;
class UpdateCallSetRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<UpdateCallSetRequest>
      _instance;
} _UpdateCallSetRequest_default_instance_;
class DeleteCallSetRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DeleteCallSetRequest>
      _instance;
} _DeleteCallSetRequest_default_instance_;
class GetCallSetRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GetCallSetRequest>
      _instance;
} _GetCallSetRequest_default_instance_;
class StreamVariantsRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<StreamVariantsRequest>
      _instance;
} _StreamVariantsRequest_default_instance_;
class StreamVariantsResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<StreamVariantsResponse>
      _instance;
} _StreamVariantsResponse_default_instance_;
}  // namespace v1
}  // namespace genomics
}  // namespace google
namespace protobuf_google_2fgenomics_2fv1_2fvariants_2eproto {
void InitDefaultsVariantSetMetadata_InfoEntry_DoNotUseImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_google_2fprotobuf_2fstruct_2eproto::InitDefaultsListValue();
  {
    void* ptr = &::google::genomics::v1::_VariantSetMetadata_InfoEntry_DoNotUse_default_instance_;
    new (ptr) ::google::genomics::v1::VariantSetMetadata_InfoEntry_DoNotUse();
  }
  ::google::genomics::v1::VariantSetMetadata_InfoEntry_DoNotUse::InitAsDefaultInstance();
}

void InitDefaultsVariantSetMetadata_InfoEntry_DoNotUse() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsVariantSetMetadata_InfoEntry_DoNotUseImpl);
}

void InitDefaultsVariantSetMetadataImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_google_2fgenomics_2fv1_2fvariants_2eproto::InitDefaultsVariantSetMetadata_InfoEntry_DoNotUse();
  {
    void* ptr = &::google::genomics::v1::_VariantSetMetadata_default_instance_;
    new (ptr) ::google::genomics::v1::VariantSetMetadata();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::genomics::v1::VariantSetMetadata::InitAsDefaultInstance();
}

void InitDefaultsVariantSetMetadata() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsVariantSetMetadataImpl);
}

void InitDefaultsVariantSetImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_google_2fgenomics_2fv1_2fvariants_2eproto::InitDefaultsReferenceBound();
  protobuf_google_2fgenomics_2fv1_2fvariants_2eproto::InitDefaultsVariantSetMetadata();
  {
    void* ptr = &::google::genomics::v1::_VariantSet_default_instance_;
    new (ptr) ::google::genomics::v1::VariantSet();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::genomics::v1::VariantSet::InitAsDefaultInstance();
}

void InitDefaultsVariantSet() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsVariantSetImpl);
}

void InitDefaultsVariant_InfoEntry_DoNotUseImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_google_2fprotobuf_2fstruct_2eproto::InitDefaultsListValue();
  {
    void* ptr = &::google::genomics::v1::_Variant_InfoEntry_DoNotUse_default_instance_;
    new (ptr) ::google::genomics::v1::Variant_InfoEntry_DoNotUse();
  }
  ::google::genomics::v1::Variant_InfoEntry_DoNotUse::InitAsDefaultInstance();
}

void InitDefaultsVariant_InfoEntry_DoNotUse() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsVariant_InfoEntry_DoNotUseImpl);
}

void InitDefaultsVariantImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_google_2fgenomics_2fv1_2fvariants_2eproto::InitDefaultsVariant_InfoEntry_DoNotUse();
  protobuf_google_2fgenomics_2fv1_2fvariants_2eproto::InitDefaultsVariantCall();
  {
    void* ptr = &::google::genomics::v1::_Variant_default_instance_;
    new (ptr) ::google::genomics::v1::Variant();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::genomics::v1::Variant::InitAsDefaultInstance();
}

void InitDefaultsVariant() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsVariantImpl);
}

void InitDefaultsVariantCall_InfoEntry_DoNotUseImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_google_2fprotobuf_2fstruct_2eproto::InitDefaultsListValue();
  {
    void* ptr = &::google::genomics::v1::_VariantCall_InfoEntry_DoNotUse_default_instance_;
    new (ptr) ::google::genomics::v1::VariantCall_InfoEntry_DoNotUse();
  }
  ::google::genomics::v1::VariantCall_InfoEntry_DoNotUse::InitAsDefaultInstance();
}

void InitDefaultsVariantCall_InfoEntry_DoNotUse() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsVariantCall_InfoEntry_DoNotUseImpl);
}

void InitDefaultsVariantCallImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_google_2fgenomics_2fv1_2fvariants_2eproto::InitDefaultsVariantCall_InfoEntry_DoNotUse();
  {
    void* ptr = &::google::genomics::v1::_VariantCall_default_instance_;
    new (ptr) ::google::genomics::v1::VariantCall();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::genomics::v1::VariantCall::InitAsDefaultInstance();
}

void InitDefaultsVariantCall() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsVariantCallImpl);
}

void InitDefaultsCallSet_InfoEntry_DoNotUseImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_google_2fprotobuf_2fstruct_2eproto::InitDefaultsListValue();
  {
    void* ptr = &::google::genomics::v1::_CallSet_InfoEntry_DoNotUse_default_instance_;
    new (ptr) ::google::genomics::v1::CallSet_InfoEntry_DoNotUse();
  }
  ::google::genomics::v1::CallSet_InfoEntry_DoNotUse::InitAsDefaultInstance();
}

void InitDefaultsCallSet_InfoEntry_DoNotUse() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsCallSet_InfoEntry_DoNotUseImpl);
}

void InitDefaultsCallSetImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_google_2fgenomics_2fv1_2fvariants_2eproto::InitDefaultsCallSet_InfoEntry_DoNotUse();
  {
    void* ptr = &::google::genomics::v1::_CallSet_default_instance_;
    new (ptr) ::google::genomics::v1::CallSet();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::genomics::v1::CallSet::InitAsDefaultInstance();
}

void InitDefaultsCallSet() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsCallSetImpl);
}

void InitDefaultsReferenceBoundImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::google::genomics::v1::_ReferenceBound_default_instance_;
    new (ptr) ::google::genomics::v1::ReferenceBound();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::genomics::v1::ReferenceBound::InitAsDefaultInstance();
}

void InitDefaultsReferenceBound() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsReferenceBoundImpl);
}

void InitDefaultsImportVariantsRequest_InfoMergeConfigEntry_DoNotUseImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::google::genomics::v1::_ImportVariantsRequest_InfoMergeConfigEntry_DoNotUse_default_instance_;
    new (ptr) ::google::genomics::v1::ImportVariantsRequest_InfoMergeConfigEntry_DoNotUse();
  }
  ::google::genomics::v1::ImportVariantsRequest_InfoMergeConfigEntry_DoNotUse::InitAsDefaultInstance();
}

void InitDefaultsImportVariantsRequest_InfoMergeConfigEntry_DoNotUse() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsImportVariantsRequest_InfoMergeConfigEntry_DoNotUseImpl);
}

void InitDefaultsImportVariantsRequestImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_google_2fgenomics_2fv1_2fvariants_2eproto::InitDefaultsImportVariantsRequest_InfoMergeConfigEntry_DoNotUse();
  {
    void* ptr = &::google::genomics::v1::_ImportVariantsRequest_default_instance_;
    new (ptr) ::google::genomics::v1::ImportVariantsRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::genomics::v1::ImportVariantsRequest::InitAsDefaultInstance();
}

void InitDefaultsImportVariantsRequest() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsImportVariantsRequestImpl);
}

void InitDefaultsImportVariantsResponseImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::google::genomics::v1::_ImportVariantsResponse_default_instance_;
    new (ptr) ::google::genomics::v1::ImportVariantsResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::genomics::v1::ImportVariantsResponse::InitAsDefaultInstance();
}

void InitDefaultsImportVariantsResponse() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsImportVariantsResponseImpl);
}

void InitDefaultsCreateVariantSetRequestImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_google_2fgenomics_2fv1_2fvariants_2eproto::InitDefaultsVariantSet();
  {
    void* ptr = &::google::genomics::v1::_CreateVariantSetRequest_default_instance_;
    new (ptr) ::google::genomics::v1::CreateVariantSetRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::genomics::v1::CreateVariantSetRequest::InitAsDefaultInstance();
}

void InitDefaultsCreateVariantSetRequest() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsCreateVariantSetRequestImpl);
}

void InitDefaultsExportVariantSetRequestImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::google::genomics::v1::_ExportVariantSetRequest_default_instance_;
    new (ptr) ::google::genomics::v1::ExportVariantSetRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::genomics::v1::ExportVariantSetRequest::InitAsDefaultInstance();
}

void InitDefaultsExportVariantSetRequest() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsExportVariantSetRequestImpl);
}

void InitDefaultsGetVariantSetRequestImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::google::genomics::v1::_GetVariantSetRequest_default_instance_;
    new (ptr) ::google::genomics::v1::GetVariantSetRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::genomics::v1::GetVariantSetRequest::InitAsDefaultInstance();
}

void InitDefaultsGetVariantSetRequest() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsGetVariantSetRequestImpl);
}

void InitDefaultsSearchVariantSetsRequestImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::google::genomics::v1::_SearchVariantSetsRequest_default_instance_;
    new (ptr) ::google::genomics::v1::SearchVariantSetsRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::genomics::v1::SearchVariantSetsRequest::InitAsDefaultInstance();
}

void InitDefaultsSearchVariantSetsRequest() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsSearchVariantSetsRequestImpl);
}

void InitDefaultsSearchVariantSetsResponseImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_google_2fgenomics_2fv1_2fvariants_2eproto::InitDefaultsVariantSet();
  {
    void* ptr = &::google::genomics::v1::_SearchVariantSetsResponse_default_instance_;
    new (ptr) ::google::genomics::v1::SearchVariantSetsResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::genomics::v1::SearchVariantSetsResponse::InitAsDefaultInstance();
}

void InitDefaultsSearchVariantSetsResponse() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsSearchVariantSetsResponseImpl);
}

void InitDefaultsDeleteVariantSetRequestImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::google::genomics::v1::_DeleteVariantSetRequest_default_instance_;
    new (ptr) ::google::genomics::v1::DeleteVariantSetRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::genomics::v1::DeleteVariantSetRequest::InitAsDefaultInstance();
}

void InitDefaultsDeleteVariantSetRequest() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsDeleteVariantSetRequestImpl);
}

void InitDefaultsUpdateVariantSetRequestImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_google_2fgenomics_2fv1_2fvariants_2eproto::InitDefaultsVariantSet();
  protobuf_google_2fprotobuf_2ffield_5fmask_2eproto::InitDefaultsFieldMask();
  {
    void* ptr = &::google::genomics::v1::_UpdateVariantSetRequest_default_instance_;
    new (ptr) ::google::genomics::v1::UpdateVariantSetRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::genomics::v1::UpdateVariantSetRequest::InitAsDefaultInstance();
}

void InitDefaultsUpdateVariantSetRequest() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsUpdateVariantSetRequestImpl);
}

void InitDefaultsSearchVariantsRequestImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::google::genomics::v1::_SearchVariantsRequest_default_instance_;
    new (ptr) ::google::genomics::v1::SearchVariantsRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::genomics::v1::SearchVariantsRequest::InitAsDefaultInstance();
}

void InitDefaultsSearchVariantsRequest() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsSearchVariantsRequestImpl);
}

void InitDefaultsSearchVariantsResponseImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_google_2fgenomics_2fv1_2fvariants_2eproto::InitDefaultsVariant();
  {
    void* ptr = &::google::genomics::v1::_SearchVariantsResponse_default_instance_;
    new (ptr) ::google::genomics::v1::SearchVariantsResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::genomics::v1::SearchVariantsResponse::InitAsDefaultInstance();
}

void InitDefaultsSearchVariantsResponse() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsSearchVariantsResponseImpl);
}

void InitDefaultsCreateVariantRequestImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_google_2fgenomics_2fv1_2fvariants_2eproto::InitDefaultsVariant();
  {
    void* ptr = &::google::genomics::v1::_CreateVariantRequest_default_instance_;
    new (ptr) ::google::genomics::v1::CreateVariantRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::genomics::v1::CreateVariantRequest::InitAsDefaultInstance();
}

void InitDefaultsCreateVariantRequest() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsCreateVariantRequestImpl);
}

void InitDefaultsUpdateVariantRequestImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_google_2fgenomics_2fv1_2fvariants_2eproto::InitDefaultsVariant();
  protobuf_google_2fprotobuf_2ffield_5fmask_2eproto::InitDefaultsFieldMask();
  {
    void* ptr = &::google::genomics::v1::_UpdateVariantRequest_default_instance_;
    new (ptr) ::google::genomics::v1::UpdateVariantRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::genomics::v1::UpdateVariantRequest::InitAsDefaultInstance();
}

void InitDefaultsUpdateVariantRequest() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsUpdateVariantRequestImpl);
}

void InitDefaultsDeleteVariantRequestImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::google::genomics::v1::_DeleteVariantRequest_default_instance_;
    new (ptr) ::google::genomics::v1::DeleteVariantRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::genomics::v1::DeleteVariantRequest::InitAsDefaultInstance();
}

void InitDefaultsDeleteVariantRequest() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsDeleteVariantRequestImpl);
}

void InitDefaultsGetVariantRequestImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::google::genomics::v1::_GetVariantRequest_default_instance_;
    new (ptr) ::google::genomics::v1::GetVariantRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::genomics::v1::GetVariantRequest::InitAsDefaultInstance();
}

void InitDefaultsGetVariantRequest() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsGetVariantRequestImpl);
}

void InitDefaultsMergeVariantsRequest_InfoMergeConfigEntry_DoNotUseImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::google::genomics::v1::_MergeVariantsRequest_InfoMergeConfigEntry_DoNotUse_default_instance_;
    new (ptr) ::google::genomics::v1::MergeVariantsRequest_InfoMergeConfigEntry_DoNotUse();
  }
  ::google::genomics::v1::MergeVariantsRequest_InfoMergeConfigEntry_DoNotUse::InitAsDefaultInstance();
}

void InitDefaultsMergeVariantsRequest_InfoMergeConfigEntry_DoNotUse() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsMergeVariantsRequest_InfoMergeConfigEntry_DoNotUseImpl);
}

void InitDefaultsMergeVariantsRequestImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_google_2fgenomics_2fv1_2fvariants_2eproto::InitDefaultsVariant();
  protobuf_google_2fgenomics_2fv1_2fvariants_2eproto::InitDefaultsMergeVariantsRequest_InfoMergeConfigEntry_DoNotUse();
  {
    void* ptr = &::google::genomics::v1::_MergeVariantsRequest_default_instance_;
    new (ptr) ::google::genomics::v1::MergeVariantsRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::genomics::v1::MergeVariantsRequest::InitAsDefaultInstance();
}

void InitDefaultsMergeVariantsRequest() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsMergeVariantsRequestImpl);
}

void InitDefaultsSearchCallSetsRequestImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::google::genomics::v1::_SearchCallSetsRequest_default_instance_;
    new (ptr) ::google::genomics::v1::SearchCallSetsRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::genomics::v1::SearchCallSetsRequest::InitAsDefaultInstance();
}

void InitDefaultsSearchCallSetsRequest() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsSearchCallSetsRequestImpl);
}

void InitDefaultsSearchCallSetsResponseImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_google_2fgenomics_2fv1_2fvariants_2eproto::InitDefaultsCallSet();
  {
    void* ptr = &::google::genomics::v1::_SearchCallSetsResponse_default_instance_;
    new (ptr) ::google::genomics::v1::SearchCallSetsResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::genomics::v1::SearchCallSetsResponse::InitAsDefaultInstance();
}

void InitDefaultsSearchCallSetsResponse() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsSearchCallSetsResponseImpl);
}

void InitDefaultsCreateCallSetRequestImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_google_2fgenomics_2fv1_2fvariants_2eproto::InitDefaultsCallSet();
  {
    void* ptr = &::google::genomics::v1::_CreateCallSetRequest_default_instance_;
    new (ptr) ::google::genomics::v1::CreateCallSetRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::genomics::v1::CreateCallSetRequest::InitAsDefaultInstance();
}

void InitDefaultsCreateCallSetRequest() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsCreateCallSetRequestImpl);
}

void InitDefaultsUpdateCallSetRequestImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_google_2fgenomics_2fv1_2fvariants_2eproto::InitDefaultsCallSet();
  protobuf_google_2fprotobuf_2ffield_5fmask_2eproto::InitDefaultsFieldMask();
  {
    void* ptr = &::google::genomics::v1::_UpdateCallSetRequest_default_instance_;
    new (ptr) ::google::genomics::v1::UpdateCallSetRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::genomics::v1::UpdateCallSetRequest::InitAsDefaultInstance();
}

void InitDefaultsUpdateCallSetRequest() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsUpdateCallSetRequestImpl);
}

void InitDefaultsDeleteCallSetRequestImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::google::genomics::v1::_DeleteCallSetRequest_default_instance_;
    new (ptr) ::google::genomics::v1::DeleteCallSetRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::genomics::v1::DeleteCallSetRequest::InitAsDefaultInstance();
}

void InitDefaultsDeleteCallSetRequest() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsDeleteCallSetRequestImpl);
}

void InitDefaultsGetCallSetRequestImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::google::genomics::v1::_GetCallSetRequest_default_instance_;
    new (ptr) ::google::genomics::v1::GetCallSetRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::genomics::v1::GetCallSetRequest::InitAsDefaultInstance();
}

void InitDefaultsGetCallSetRequest() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsGetCallSetRequestImpl);
}

void InitDefaultsStreamVariantsRequestImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::google::genomics::v1::_StreamVariantsRequest_default_instance_;
    new (ptr) ::google::genomics::v1::StreamVariantsRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::genomics::v1::StreamVariantsRequest::InitAsDefaultInstance();
}

void InitDefaultsStreamVariantsRequest() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsStreamVariantsRequestImpl);
}

void InitDefaultsStreamVariantsResponseImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_google_2fgenomics_2fv1_2fvariants_2eproto::InitDefaultsVariant();
  {
    void* ptr = &::google::genomics::v1::_StreamVariantsResponse_default_instance_;
    new (ptr) ::google::genomics::v1::StreamVariantsResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::genomics::v1::StreamVariantsResponse::InitAsDefaultInstance();
}

void InitDefaultsStreamVariantsResponse() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsStreamVariantsResponseImpl);
}

::google::protobuf::Metadata file_level_metadata[36];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[4];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::genomics::v1::VariantSetMetadata_InfoEntry_DoNotUse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::genomics::v1::VariantSetMetadata_InfoEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::genomics::v1::VariantSetMetadata_InfoEntry_DoNotUse, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::genomics::v1::VariantSetMetadata_InfoEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::genomics::v1::VariantSetMetadata, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::genomics::v1::VariantSetMetadata, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::genomics::v1::VariantSetMetadata, value_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::genomics::v1::VariantSetMetadata, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::genomics::v1::VariantSetMetadata, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::genomics::v1::VariantSetMetadata, number_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::genomics::v1::VariantSetMetadata, description_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::genomics::v1::VariantSetMetadata, info_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::genomics::v1::VariantSet, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::genomics::v1::VariantSet, dataset_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::genomics::v1::VariantSet, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::genomics::v1::VariantSet, reference_set_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::genomics::v1::VariantSet, reference_bounds_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::genomics::v1::VariantSet, metadata_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::genomics::v1::VariantSet, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::genomics::v1::VariantSet, description_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::genomics::v1::Variant_InfoEntry_DoNotUse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::genomics::v1::Variant_InfoEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::genomics::v1::Variant_InfoEntry_DoNotUse, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::genomics::v1::Variant_InfoEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::genomics::v1::Variant, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::genomics::v1::Variant, variant_set_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::genomics::v1::Variant, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::genomics::v1::Variant, names_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::genomics::v1::Variant, created_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::genomics::v1::Variant, reference_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::genomics::v1::Variant, start_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::genomics::v1::Variant, end_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::genomics::v1::Variant, reference_bases_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::genomics::v1::Variant, alternate_bases_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::genomics::v1::Variant, quality_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::genomics::v1::Variant, filter_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::genomics::v1::Variant, info_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::genomics::v1::Variant, calls_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::genomics::v1::VariantCall_InfoEntry_DoNotUse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::genomics::v1::VariantCall_InfoEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::genomics::v1::VariantCall_InfoEntry_DoNotUse, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::genomics::v1::VariantCall_InfoEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::genomics::v1::VariantCall, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::genomics::v1::VariantCall, call_set_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::genomics::v1::VariantCall, call_set_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::genomics::v1::VariantCall, genotype_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::genomics::v1::VariantCall, phaseset_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::genomics::v1::VariantCall, genotype_likelihood_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::genomics::v1::VariantCall, info_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::genomics::v1::CallSet_InfoEntry_DoNotUse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::genomics::v1::CallSet_InfoEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::genomics::v1::CallSet_InfoEntry_DoNotUse, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::genomics::v1::CallSet_InfoEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::genomics::v1::CallSet, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::genomics::v1::CallSet, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::genomics::v1::CallSet, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::genomics::v1::CallSet, sample_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::genomics::v1::CallSet, variant_set_ids_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::genomics::v1::CallSet, created_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::genomics::v1::CallSet, info_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::genomics::v1::ReferenceBound, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::genomics::v1::ReferenceBound, reference_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::genomics::v1::ReferenceBound, upper_bound_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::genomics::v1::ImportVariantsRequest_InfoMergeConfigEntry_DoNotUse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::genomics::v1::ImportVariantsRequest_InfoMergeConfigEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::genomics::v1::ImportVariantsRequest_InfoMergeConfigEntry_DoNotUse, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::genomics::v1::ImportVariantsRequest_InfoMergeConfigEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::genomics::v1::ImportVariantsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::genomics::v1::ImportVariantsRequest, variant_set_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::genomics::v1::ImportVariantsRequest, source_uris_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::genomics::v1::ImportVariantsRequest, format_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::genomics::v1::ImportVariantsRequest, normalize_reference_names_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::genomics::v1::ImportVariantsRequest, info_merge_config_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::genomics::v1::ImportVariantsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::genomics::v1::ImportVariantsResponse, call_set_ids_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::genomics::v1::CreateVariantSetRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::genomics::v1::CreateVariantSetRequest, variant_set_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::genomics::v1::ExportVariantSetRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::genomics::v1::ExportVariantSetRequest, variant_set_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::genomics::v1::ExportVariantSetRequest, call_set_ids_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::genomics::v1::ExportVariantSetRequest, project_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::genomics::v1::ExportVariantSetRequest, format_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::genomics::v1::ExportVariantSetRequest, bigquery_dataset_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::genomics::v1::ExportVariantSetRequest, bigquery_table_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::genomics::v1::GetVariantSetRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::genomics::v1::GetVariantSetRequest, variant_set_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::genomics::v1::SearchVariantSetsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::genomics::v1::SearchVariantSetsRequest, dataset_ids_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::genomics::v1::SearchVariantSetsRequest, page_token_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::genomics::v1::SearchVariantSetsRequest, page_size_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::genomics::v1::SearchVariantSetsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::genomics::v1::SearchVariantSetsResponse, variant_sets_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::genomics::v1::SearchVariantSetsResponse, next_page_token_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::genomics::v1::DeleteVariantSetRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::genomics::v1::DeleteVariantSetRequest, variant_set_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::genomics::v1::UpdateVariantSetRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::genomics::v1::UpdateVariantSetRequest, variant_set_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::genomics::v1::UpdateVariantSetRequest, variant_set_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::genomics::v1::UpdateVariantSetRequest, update_mask_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::genomics::v1::SearchVariantsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::genomics::v1::SearchVariantsRequest, variant_set_ids_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::genomics::v1::SearchVariantsRequest, variant_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::genomics::v1::SearchVariantsRequest, call_set_ids_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::genomics::v1::SearchVariantsRequest, reference_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::genomics::v1::SearchVariantsRequest, start_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::genomics::v1::SearchVariantsRequest, end_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::genomics::v1::SearchVariantsRequest, page_token_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::genomics::v1::SearchVariantsRequest, page_size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::genomics::v1::SearchVariantsRequest, max_calls_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::genomics::v1::SearchVariantsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::genomics::v1::SearchVariantsResponse, variants_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::genomics::v1::SearchVariantsResponse, next_page_token_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::genomics::v1::CreateVariantRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::genomics::v1::CreateVariantRequest, variant_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::genomics::v1::UpdateVariantRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::genomics::v1::UpdateVariantRequest, variant_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::genomics::v1::UpdateVariantRequest, variant_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::genomics::v1::UpdateVariantRequest, update_mask_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::genomics::v1::DeleteVariantRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::genomics::v1::DeleteVariantRequest, variant_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::genomics::v1::GetVariantRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::genomics::v1::GetVariantRequest, variant_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::genomics::v1::MergeVariantsRequest_InfoMergeConfigEntry_DoNotUse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::genomics::v1::MergeVariantsRequest_InfoMergeConfigEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::genomics::v1::MergeVariantsRequest_InfoMergeConfigEntry_DoNotUse, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::genomics::v1::MergeVariantsRequest_InfoMergeConfigEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::genomics::v1::MergeVariantsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::genomics::v1::MergeVariantsRequest, variant_set_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::genomics::v1::MergeVariantsRequest, variants_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::genomics::v1::MergeVariantsRequest, info_merge_config_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::genomics::v1::SearchCallSetsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::genomics::v1::SearchCallSetsRequest, variant_set_ids_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::genomics::v1::SearchCallSetsRequest, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::genomics::v1::SearchCallSetsRequest, page_token_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::genomics::v1::SearchCallSetsRequest, page_size_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::genomics::v1::SearchCallSetsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::genomics::v1::SearchCallSetsResponse, call_sets_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::genomics::v1::SearchCallSetsResponse, next_page_token_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::genomics::v1::CreateCallSetRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::genomics::v1::CreateCallSetRequest, call_set_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::genomics::v1::UpdateCallSetRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::genomics::v1::UpdateCallSetRequest, call_set_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::genomics::v1::UpdateCallSetRequest, call_set_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::genomics::v1::UpdateCallSetRequest, update_mask_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::genomics::v1::DeleteCallSetRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::genomics::v1::DeleteCallSetRequest, call_set_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::genomics::v1::GetCallSetRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::genomics::v1::GetCallSetRequest, call_set_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::genomics::v1::StreamVariantsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::genomics::v1::StreamVariantsRequest, project_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::genomics::v1::StreamVariantsRequest, variant_set_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::genomics::v1::StreamVariantsRequest, call_set_ids_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::genomics::v1::StreamVariantsRequest, reference_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::genomics::v1::StreamVariantsRequest, start_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::genomics::v1::StreamVariantsRequest, end_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::genomics::v1::StreamVariantsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::genomics::v1::StreamVariantsResponse, variants_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::google::genomics::v1::VariantSetMetadata_InfoEntry_DoNotUse)},
  { 9, -1, sizeof(::google::genomics::v1::VariantSetMetadata)},
  { 21, -1, sizeof(::google::genomics::v1::VariantSet)},
  { 33, 40, sizeof(::google::genomics::v1::Variant_InfoEntry_DoNotUse)},
  { 42, -1, sizeof(::google::genomics::v1::Variant)},
  { 60, 67, sizeof(::google::genomics::v1::VariantCall_InfoEntry_DoNotUse)},
  { 69, -1, sizeof(::google::genomics::v1::VariantCall)},
  { 80, 87, sizeof(::google::genomics::v1::CallSet_InfoEntry_DoNotUse)},
  { 89, -1, sizeof(::google::genomics::v1::CallSet)},
  { 100, -1, sizeof(::google::genomics::v1::ReferenceBound)},
  { 107, 114, sizeof(::google::genomics::v1::ImportVariantsRequest_InfoMergeConfigEntry_DoNotUse)},
  { 116, -1, sizeof(::google::genomics::v1::ImportVariantsRequest)},
  { 126, -1, sizeof(::google::genomics::v1::ImportVariantsResponse)},
  { 132, -1, sizeof(::google::genomics::v1::CreateVariantSetRequest)},
  { 138, -1, sizeof(::google::genomics::v1::ExportVariantSetRequest)},
  { 149, -1, sizeof(::google::genomics::v1::GetVariantSetRequest)},
  { 155, -1, sizeof(::google::genomics::v1::SearchVariantSetsRequest)},
  { 163, -1, sizeof(::google::genomics::v1::SearchVariantSetsResponse)},
  { 170, -1, sizeof(::google::genomics::v1::DeleteVariantSetRequest)},
  { 176, -1, sizeof(::google::genomics::v1::UpdateVariantSetRequest)},
  { 184, -1, sizeof(::google::genomics::v1::SearchVariantsRequest)},
  { 198, -1, sizeof(::google::genomics::v1::SearchVariantsResponse)},
  { 205, -1, sizeof(::google::genomics::v1::CreateVariantRequest)},
  { 211, -1, sizeof(::google::genomics::v1::UpdateVariantRequest)},
  { 219, -1, sizeof(::google::genomics::v1::DeleteVariantRequest)},
  { 225, -1, sizeof(::google::genomics::v1::GetVariantRequest)},
  { 231, 238, sizeof(::google::genomics::v1::MergeVariantsRequest_InfoMergeConfigEntry_DoNotUse)},
  { 240, -1, sizeof(::google::genomics::v1::MergeVariantsRequest)},
  { 248, -1, sizeof(::google::genomics::v1::SearchCallSetsRequest)},
  { 257, -1, sizeof(::google::genomics::v1::SearchCallSetsResponse)},
  { 264, -1, sizeof(::google::genomics::v1::CreateCallSetRequest)},
  { 270, -1, sizeof(::google::genomics::v1::UpdateCallSetRequest)},
  { 278, -1, sizeof(::google::genomics::v1::DeleteCallSetRequest)},
  { 284, -1, sizeof(::google::genomics::v1::GetCallSetRequest)},
  { 290, -1, sizeof(::google::genomics::v1::StreamVariantsRequest)},
  { 301, -1, sizeof(::google::genomics::v1::StreamVariantsResponse)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::genomics::v1::_VariantSetMetadata_InfoEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::genomics::v1::_VariantSetMetadata_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::genomics::v1::_VariantSet_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::genomics::v1::_Variant_InfoEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::genomics::v1::_Variant_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::genomics::v1::_VariantCall_InfoEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::genomics::v1::_VariantCall_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::genomics::v1::_CallSet_InfoEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::genomics::v1::_CallSet_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::genomics::v1::_ReferenceBound_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::genomics::v1::_ImportVariantsRequest_InfoMergeConfigEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::genomics::v1::_ImportVariantsRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::genomics::v1::_ImportVariantsResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::genomics::v1::_CreateVariantSetRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::genomics::v1::_ExportVariantSetRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::genomics::v1::_GetVariantSetRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::genomics::v1::_SearchVariantSetsRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::genomics::v1::_SearchVariantSetsResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::genomics::v1::_DeleteVariantSetRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::genomics::v1::_UpdateVariantSetRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::genomics::v1::_SearchVariantsRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::genomics::v1::_SearchVariantsResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::genomics::v1::_CreateVariantRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::genomics::v1::_UpdateVariantRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::genomics::v1::_DeleteVariantRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::genomics::v1::_GetVariantRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::genomics::v1::_MergeVariantsRequest_InfoMergeConfigEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::genomics::v1::_MergeVariantsRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::genomics::v1::_SearchCallSetsRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::genomics::v1::_SearchCallSetsResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::genomics::v1::_CreateCallSetRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::genomics::v1::_UpdateCallSetRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::genomics::v1::_DeleteCallSetRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::genomics::v1::_GetCallSetRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::genomics::v1::_StreamVariantsRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::genomics::v1::_StreamVariantsResponse_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "google/genomics/v1/variants.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 36);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n!google/genomics/v1/variants.proto\022\022goo"
      "gle.genomics.v1\032\034google/api/annotations."
      "proto\032#google/longrunning/operations.pro"
      "to\032\033google/protobuf/empty.proto\032 google/"
      "protobuf/field_mask.proto\032\034google/protob"
      "uf/struct.proto\"\200\003\n\022VariantSetMetadata\022\013"
      "\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\t\022\n\n\002id\030\004 \001(\t\0229"
      "\n\004type\030\005 \001(\0162+.google.genomics.v1.Varian"
      "tSetMetadata.Type\022\016\n\006number\030\010 \001(\t\022\023\n\013des"
      "cription\030\007 \001(\t\022>\n\004info\030\003 \003(\01320.google.ge"
      "nomics.v1.VariantSetMetadata.InfoEntry\032G"
      "\n\tInfoEntry\022\013\n\003key\030\001 \001(\t\022)\n\005value\030\002 \001(\0132"
      "\032.google.protobuf.ListValue:\0028\001\"Y\n\004Type\022"
      "\024\n\020TYPE_UNSPECIFIED\020\000\022\013\n\007INTEGER\020\001\022\t\n\005FL"
      "OAT\020\002\022\010\n\004FLAG\020\003\022\r\n\tCHARACTER\020\004\022\n\n\006STRING"
      "\020\005\"\341\001\n\nVariantSet\022\022\n\ndataset_id\030\001 \001(\t\022\n\n"
      "\002id\030\002 \001(\t\022\030\n\020reference_set_id\030\006 \001(\t\022<\n\020r"
      "eference_bounds\030\005 \003(\0132\".google.genomics."
      "v1.ReferenceBound\0228\n\010metadata\030\004 \003(\0132&.go"
      "ogle.genomics.v1.VariantSetMetadata\022\014\n\004n"
      "ame\030\007 \001(\t\022\023\n\013description\030\010 \001(\t\"\202\003\n\007Varia"
      "nt\022\026\n\016variant_set_id\030\017 \001(\t\022\n\n\002id\030\002 \001(\t\022\r"
      "\n\005names\030\003 \003(\t\022\017\n\007created\030\014 \001(\003\022\026\n\016refere"
      "nce_name\030\016 \001(\t\022\r\n\005start\030\020 \001(\003\022\013\n\003end\030\r \001"
      "(\003\022\027\n\017reference_bases\030\006 \001(\t\022\027\n\017alternate"
      "_bases\030\007 \003(\t\022\017\n\007quality\030\010 \001(\001\022\016\n\006filter\030"
      "\t \003(\t\0223\n\004info\030\n \003(\0132%.google.genomics.v1"
      ".Variant.InfoEntry\022.\n\005calls\030\013 \003(\0132\037.goog"
      "le.genomics.v1.VariantCall\032G\n\tInfoEntry\022"
      "\013\n\003key\030\001 \001(\t\022)\n\005value\030\002 \001(\0132\032.google.pro"
      "tobuf.ListValue:\0028\001\"\374\001\n\013VariantCall\022\023\n\013c"
      "all_set_id\030\010 \001(\t\022\025\n\rcall_set_name\030\t \001(\t\022"
      "\020\n\010genotype\030\007 \003(\005\022\020\n\010phaseset\030\005 \001(\t\022\033\n\023g"
      "enotype_likelihood\030\006 \003(\001\0227\n\004info\030\002 \003(\0132)"
      ".google.genomics.v1.VariantCall.InfoEntr"
      "y\032G\n\tInfoEntry\022\013\n\003key\030\001 \001(\t\022)\n\005value\030\002 \001"
      "(\0132\032.google.protobuf.ListValue:\0028\001\"\336\001\n\007C"
      "allSet\022\n\n\002id\030\001 \001(\t\022\014\n\004name\030\002 \001(\t\022\021\n\tsamp"
      "le_id\030\007 \001(\t\022\027\n\017variant_set_ids\030\006 \003(\t\022\017\n\007"
      "created\030\005 \001(\003\0223\n\004info\030\004 \003(\0132%.google.gen"
      "omics.v1.CallSet.InfoEntry\032G\n\tInfoEntry\022"
      "\013\n\003key\030\001 \001(\t\022)\n\005value\030\002 \001(\0132\032.google.pro"
      "tobuf.ListValue:\0028\001\"=\n\016ReferenceBound\022\026\n"
      "\016reference_name\030\001 \001(\t\022\023\n\013upper_bound\030\002 \001"
      "(\003\"\264\003\n\025ImportVariantsRequest\022\026\n\016variant_"
      "set_id\030\001 \001(\t\022\023\n\013source_uris\030\002 \003(\t\022@\n\006for"
      "mat\030\003 \001(\01620.google.genomics.v1.ImportVar"
      "iantsRequest.Format\022!\n\031normalize_referen"
      "ce_names\030\005 \001(\010\022Y\n\021info_merge_config\030\006 \003("
      "\0132>.google.genomics.v1.ImportVariantsReq"
      "uest.InfoMergeConfigEntry\032^\n\024InfoMergeCo"
      "nfigEntry\022\013\n\003key\030\001 \001(\t\0225\n\005value\030\002 \001(\0162&."
      "google.genomics.v1.InfoMergeOperation:\0028"
      "\001\"N\n\006Format\022\026\n\022FORMAT_UNSPECIFIED\020\000\022\016\n\nF"
      "ORMAT_VCF\020\001\022\034\n\030FORMAT_COMPLETE_GENOMICS\020"
      "\002\".\n\026ImportVariantsResponse\022\024\n\014call_set_"
      "ids\030\001 \003(\t\"N\n\027CreateVariantSetRequest\0223\n\013"
      "variant_set\030\001 \001(\0132\036.google.genomics.v1.V"
      "ariantSet\"\210\002\n\027ExportVariantSetRequest\022\026\n"
      "\016variant_set_id\030\001 \001(\t\022\024\n\014call_set_ids\030\002 "
      "\003(\t\022\022\n\nproject_id\030\003 \001(\t\022B\n\006format\030\004 \001(\0162"
      "2.google.genomics.v1.ExportVariantSetReq"
      "uest.Format\022\030\n\020bigquery_dataset\030\005 \001(\t\022\026\n"
      "\016bigquery_table\030\006 \001(\t\"5\n\006Format\022\026\n\022FORMA"
      "T_UNSPECIFIED\020\000\022\023\n\017FORMAT_BIGQUERY\020\001\".\n\024"
      "GetVariantSetRequest\022\026\n\016variant_set_id\030\001"
      " \001(\t\"V\n\030SearchVariantSetsRequest\022\023\n\013data"
      "set_ids\030\001 \003(\t\022\022\n\npage_token\030\002 \001(\t\022\021\n\tpag"
      "e_size\030\003 \001(\005\"j\n\031SearchVariantSetsRespons"
      "e\0224\n\014variant_sets\030\001 \003(\0132\036.google.genomic"
      "s.v1.VariantSet\022\027\n\017next_page_token\030\002 \001(\t"
      "\"1\n\027DeleteVariantSetRequest\022\026\n\016variant_s"
      "et_id\030\001 \001(\t\"\227\001\n\027UpdateVariantSetRequest\022"
      "\026\n\016variant_set_id\030\001 \001(\t\0223\n\013variant_set\030\002"
      " \001(\0132\036.google.genomics.v1.VariantSet\022/\n\013"
      "update_mask\030\005 \001(\0132\032.google.protobuf.Fiel"
      "dMask\"\312\001\n\025SearchVariantsRequest\022\027\n\017varia"
      "nt_set_ids\030\001 \003(\t\022\024\n\014variant_name\030\002 \001(\t\022\024"
      "\n\014call_set_ids\030\003 \003(\t\022\026\n\016reference_name\030\004"
      " \001(\t\022\r\n\005start\030\005 \001(\003\022\013\n\003end\030\006 \001(\003\022\022\n\npage"
      "_token\030\007 \001(\t\022\021\n\tpage_size\030\010 \001(\005\022\021\n\tmax_c"
      "alls\030\t \001(\005\"`\n\026SearchVariantsResponse\022-\n\010"
      "variants\030\001 \003(\0132\033.google.genomics.v1.Vari"
      "ant\022\027\n\017next_page_token\030\002 \001(\t\"D\n\024CreateVa"
      "riantRequest\022,\n\007variant\030\001 \001(\0132\033.google.g"
      "enomics.v1.Variant\"\211\001\n\024UpdateVariantRequ"
      "est\022\022\n\nvariant_id\030\001 \001(\t\022,\n\007variant\030\002 \001(\013"
      "2\033.google.genomics.v1.Variant\022/\n\013update_"
      "mask\030\003 \001(\0132\032.google.protobuf.FieldMask\"*"
      "\n\024DeleteVariantRequest\022\022\n\nvariant_id\030\001 \001"
      "(\t\"\'\n\021GetVariantRequest\022\022\n\nvariant_id\030\001 "
      "\001(\t\"\227\002\n\024MergeVariantsRequest\022\026\n\016variant_"
      "set_id\030\001 \001(\t\022-\n\010variants\030\002 \003(\0132\033.google."
      "genomics.v1.Variant\022X\n\021info_merge_config"
      "\030\003 \003(\0132=.google.genomics.v1.MergeVariant"
      "sRequest.InfoMergeConfigEntry\032^\n\024InfoMer"
      "geConfigEntry\022\013\n\003key\030\001 \001(\t\0225\n\005value\030\002 \001("
      "\0162&.google.genomics.v1.InfoMergeOperatio"
      "n:\0028\001\"e\n\025SearchCallSetsRequest\022\027\n\017varian"
      "t_set_ids\030\001 \003(\t\022\014\n\004name\030\002 \001(\t\022\022\n\npage_to"
      "ken\030\003 \001(\t\022\021\n\tpage_size\030\004 \001(\005\"a\n\026SearchCa"
      "llSetsResponse\022.\n\tcall_sets\030\001 \003(\0132\033.goog"
      "le.genomics.v1.CallSet\022\027\n\017next_page_toke"
      "n\030\002 \001(\t\"E\n\024CreateCallSetRequest\022-\n\010call_"
      "set\030\001 \001(\0132\033.google.genomics.v1.CallSet\"\213"
      "\001\n\024UpdateCallSetRequest\022\023\n\013call_set_id\030\001"
      " \001(\t\022-\n\010call_set\030\002 \001(\0132\033.google.genomics"
      ".v1.CallSet\022/\n\013update_mask\030\003 \001(\0132\032.googl"
      "e.protobuf.FieldMask\"+\n\024DeleteCallSetReq"
      "uest\022\023\n\013call_set_id\030\001 \001(\t\"(\n\021GetCallSetR"
      "equest\022\023\n\013call_set_id\030\001 \001(\t\"\215\001\n\025StreamVa"
      "riantsRequest\022\022\n\nproject_id\030\001 \001(\t\022\026\n\016var"
      "iant_set_id\030\002 \001(\t\022\024\n\014call_set_ids\030\003 \003(\t\022"
      "\026\n\016reference_name\030\004 \001(\t\022\r\n\005start\030\005 \001(\003\022\013"
      "\n\003end\030\006 \001(\003\"G\n\026StreamVariantsResponse\022-\n"
      "\010variants\030\001 \003(\0132\033.google.genomics.v1.Var"
      "iant*]\n\022InfoMergeOperation\022$\n INFO_MERGE"
      "_OPERATION_UNSPECIFIED\020\000\022\016\n\nIGNORE_NEW\020\001"
      "\022\021\n\rMOVE_TO_CALLS\020\0022\245\001\n\027StreamingVariant"
      "Service\022\211\001\n\016StreamVariants\022).google.geno"
      "mics.v1.StreamVariantsRequest\032*.google.g"
      "enomics.v1.StreamVariantsResponse\"\036\202\323\344\223\002"
      "\030\"\023/v1/variants:stream:\001*0\0012\275\022\n\020VariantS"
      "erviceV1\022z\n\016ImportVariants\022).google.geno"
      "mics.v1.ImportVariantsRequest\032\035.google.l"
      "ongrunning.Operation\"\036\202\323\344\223\002\030\"\023/v1/varian"
      "ts:import:\001*\022\205\001\n\020CreateVariantSet\022+.goog"
      "le.genomics.v1.CreateVariantSetRequest\032\036"
      ".google.genomics.v1.VariantSet\"$\202\323\344\223\002\036\"\017"
      "/v1/variantsets:\013variant_set\022\222\001\n\020ExportV"
      "ariantSet\022+.google.genomics.v1.ExportVar"
      "iantSetRequest\032\035.google.longrunning.Oper"
      "ation\"2\202\323\344\223\002,\"\'/v1/variantsets/{variant_"
      "set_id}:export:\001*\022\203\001\n\rGetVariantSet\022(.go"
      "ogle.genomics.v1.GetVariantSetRequest\032\036."
      "google.genomics.v1.VariantSet\"(\202\323\344\223\002\"\022 /"
      "v1/variantsets/{variant_set_id}\022\223\001\n\021Sear"
      "chVariantSets\022,.google.genomics.v1.Searc"
      "hVariantSetsRequest\032-.google.genomics.v1"
      ".SearchVariantSetsResponse\"!\202\323\344\223\002\033\"\026/v1/"
      "variantsets/search:\001*\022\201\001\n\020DeleteVariantS"
      "et\022+.google.genomics.v1.DeleteVariantSet"
      "Request\032\026.google.protobuf.Empty\"(\202\323\344\223\002\"*"
      " /v1/variantsets/{variant_set_id}\022\226\001\n\020Up"
      "dateVariantSet\022+.google.genomics.v1.Upda"
      "teVariantSetRequest\032\036.google.genomics.v1"
      ".VariantSet\"5\202\323\344\223\002/2 /v1/variantsets/{va"
      "riant_set_id}:\013variant_set\022\207\001\n\016SearchVar"
      "iants\022).google.genomics.v1.SearchVariant"
      "sRequest\032*.google.genomics.v1.SearchVari"
      "antsResponse\"\036\202\323\344\223\002\030\"\023/v1/variants/searc"
      "h:\001*\022u\n\rCreateVariant\022(.google.genomics."
      "v1.CreateVariantRequest\032\033.google.genomic"
      "s.v1.Variant\"\035\202\323\344\223\002\027\"\014/v1/variants:\007vari"
      "ant\022\202\001\n\rUpdateVariant\022(.google.genomics."
      "v1.UpdateVariantRequest\032\033.google.genomic"
      "s.v1.Variant\"*\202\323\344\223\002$2\031/v1/variants/{vari"
      "ant_id}:\007variant\022t\n\rDeleteVariant\022(.goog"
      "le.genomics.v1.DeleteVariantRequest\032\026.go"
      "ogle.protobuf.Empty\"!\202\323\344\223\002\033*\031/v1/variant"
      "s/{variant_id}\022s\n\nGetVariant\022%.google.ge"
      "nomics.v1.GetVariantRequest\032\033.google.gen"
      "omics.v1.Variant\"!\202\323\344\223\002\033\022\031/v1/variants/{"
      "variant_id}\022p\n\rMergeVariants\022(.google.ge"
      "nomics.v1.MergeVariantsRequest\032\026.google."
      "protobuf.Empty\"\035\202\323\344\223\002\027\"\022/v1/variants:mer"
      "ge:\001*\022\207\001\n\016SearchCallSets\022).google.genomi"
      "cs.v1.SearchCallSetsRequest\032*.google.gen"
      "omics.v1.SearchCallSetsResponse\"\036\202\323\344\223\002\030\""
      "\023/v1/callsets/search:\001*\022v\n\rCreateCallSet"
      "\022(.google.genomics.v1.CreateCallSetReque"
      "st\032\033.google.genomics.v1.CallSet\"\036\202\323\344\223\002\030\""
      "\014/v1/callsets:\010call_set\022\204\001\n\rUpdateCallSe"
      "t\022(.google.genomics.v1.UpdateCallSetRequ"
      "est\032\033.google.genomics.v1.CallSet\",\202\323\344\223\002&"
      "2\032/v1/callsets/{call_set_id}:\010call_set\022u"
      "\n\rDeleteCallSet\022(.google.genomics.v1.Del"
      "eteCallSetRequest\032\026.google.protobuf.Empt"
      "y\"\"\202\323\344\223\002\034*\032/v1/callsets/{call_set_id}\022t\n"
      "\nGetCallSet\022%.google.genomics.v1.GetCall"
      "SetRequest\032\033.google.genomics.v1.CallSet\""
      "\"\202\323\344\223\002\034\022\032/v1/callsets/{call_set_id}Bh\n\026c"
      "om.google.genomics.v1B\rVariantsProtoP\001Z:"
      "google.golang.org/genproto/googleapis/ge"
      "nomics/v1;genomics\370\001\001b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 7389);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "google/genomics/v1/variants.proto", &protobuf_RegisterTypes);
  ::protobuf_google_2fapi_2fannotations_2eproto::AddDescriptors();
  ::protobuf_google_2flongrunning_2foperations_2eproto::AddDescriptors();
  ::protobuf_google_2fprotobuf_2fempty_2eproto::AddDescriptors();
  ::protobuf_google_2fprotobuf_2ffield_5fmask_2eproto::AddDescriptors();
  ::protobuf_google_2fprotobuf_2fstruct_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_google_2fgenomics_2fv1_2fvariants_2eproto
namespace google {
namespace genomics {
namespace v1 {
const ::google::protobuf::EnumDescriptor* VariantSetMetadata_Type_descriptor() {
  protobuf_google_2fgenomics_2fv1_2fvariants_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fgenomics_2fv1_2fvariants_2eproto::file_level_enum_descriptors[0];
}
bool VariantSetMetadata_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const VariantSetMetadata_Type VariantSetMetadata::TYPE_UNSPECIFIED;
const VariantSetMetadata_Type VariantSetMetadata::INTEGER;
const VariantSetMetadata_Type VariantSetMetadata::FLOAT;
const VariantSetMetadata_Type VariantSetMetadata::FLAG;
const VariantSetMetadata_Type VariantSetMetadata::CHARACTER;
const VariantSetMetadata_Type VariantSetMetadata::STRING;
const VariantSetMetadata_Type VariantSetMetadata::Type_MIN;
const VariantSetMetadata_Type VariantSetMetadata::Type_MAX;
const int VariantSetMetadata::Type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* ImportVariantsRequest_Format_descriptor() {
  protobuf_google_2fgenomics_2fv1_2fvariants_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fgenomics_2fv1_2fvariants_2eproto::file_level_enum_descriptors[1];
}
bool ImportVariantsRequest_Format_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ImportVariantsRequest_Format ImportVariantsRequest::FORMAT_UNSPECIFIED;
const ImportVariantsRequest_Format ImportVariantsRequest::FORMAT_VCF;
const ImportVariantsRequest_Format ImportVariantsRequest::FORMAT_COMPLETE_GENOMICS;
const ImportVariantsRequest_Format ImportVariantsRequest::Format_MIN;
const ImportVariantsRequest_Format ImportVariantsRequest::Format_MAX;
const int ImportVariantsRequest::Format_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* ExportVariantSetRequest_Format_descriptor() {
  protobuf_google_2fgenomics_2fv1_2fvariants_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fgenomics_2fv1_2fvariants_2eproto::file_level_enum_descriptors[2];
}
bool ExportVariantSetRequest_Format_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ExportVariantSetRequest_Format ExportVariantSetRequest::FORMAT_UNSPECIFIED;
const ExportVariantSetRequest_Format ExportVariantSetRequest::FORMAT_BIGQUERY;
const ExportVariantSetRequest_Format ExportVariantSetRequest::Format_MIN;
const ExportVariantSetRequest_Format ExportVariantSetRequest::Format_MAX;
const int ExportVariantSetRequest::Format_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* InfoMergeOperation_descriptor() {
  protobuf_google_2fgenomics_2fv1_2fvariants_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fgenomics_2fv1_2fvariants_2eproto::file_level_enum_descriptors[3];
}
bool InfoMergeOperation_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

VariantSetMetadata_InfoEntry_DoNotUse::VariantSetMetadata_InfoEntry_DoNotUse() {}
VariantSetMetadata_InfoEntry_DoNotUse::VariantSetMetadata_InfoEntry_DoNotUse(::google::protobuf::Arena* arena) : SuperType(arena) {}
void VariantSetMetadata_InfoEntry_DoNotUse::MergeFrom(const VariantSetMetadata_InfoEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::google::protobuf::Metadata VariantSetMetadata_InfoEntry_DoNotUse::GetMetadata() const {
  ::protobuf_google_2fgenomics_2fv1_2fvariants_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fgenomics_2fv1_2fvariants_2eproto::file_level_metadata[0];
}
void VariantSetMetadata_InfoEntry_DoNotUse::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}


// ===================================================================

void VariantSetMetadata::InitAsDefaultInstance() {
}
void VariantSetMetadata::clear_info() {
  info_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VariantSetMetadata::kKeyFieldNumber;
const int VariantSetMetadata::kValueFieldNumber;
const int VariantSetMetadata::kIdFieldNumber;
const int VariantSetMetadata::kTypeFieldNumber;
const int VariantSetMetadata::kNumberFieldNumber;
const int VariantSetMetadata::kDescriptionFieldNumber;
const int VariantSetMetadata::kInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VariantSetMetadata::VariantSetMetadata()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_google_2fgenomics_2fv1_2fvariants_2eproto::InitDefaultsVariantSetMetadata();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.genomics.v1.VariantSetMetadata)
}
VariantSetMetadata::VariantSetMetadata(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  info_(arena) {
  ::protobuf_google_2fgenomics_2fv1_2fvariants_2eproto::InitDefaultsVariantSetMetadata();
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.genomics.v1.VariantSetMetadata)
}
VariantSetMetadata::VariantSetMetadata(const VariantSetMetadata& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  info_.MergeFrom(from.info_);
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.key().size() > 0) {
    key_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key(),
      GetArenaNoVirtual());
  }
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.value().size() > 0) {
    value_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value(),
      GetArenaNoVirtual());
  }
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.id().size() > 0) {
    id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id(),
      GetArenaNoVirtual());
  }
  description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.description().size() > 0) {
    description_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.description(),
      GetArenaNoVirtual());
  }
  number_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.number().size() > 0) {
    number_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.number(),
      GetArenaNoVirtual());
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:google.genomics.v1.VariantSetMetadata)
}

void VariantSetMetadata::SharedCtor() {
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  number_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_ = 0;
  _cached_size_ = 0;
}

VariantSetMetadata::~VariantSetMetadata() {
  // @@protoc_insertion_point(destructor:google.genomics.v1.VariantSetMetadata)
  SharedDtor();
}

void VariantSetMetadata::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  description_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  number_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void VariantSetMetadata::ArenaDtor(void* object) {
  VariantSetMetadata* _this = reinterpret_cast< VariantSetMetadata* >(object);
  (void)_this;
}
void VariantSetMetadata::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void VariantSetMetadata::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VariantSetMetadata::descriptor() {
  ::protobuf_google_2fgenomics_2fv1_2fvariants_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fgenomics_2fv1_2fvariants_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const VariantSetMetadata& VariantSetMetadata::default_instance() {
  ::protobuf_google_2fgenomics_2fv1_2fvariants_2eproto::InitDefaultsVariantSetMetadata();
  return *internal_default_instance();
}

VariantSetMetadata* VariantSetMetadata::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<VariantSetMetadata>(arena);
}

void VariantSetMetadata::Clear() {
// @@protoc_insertion_point(message_clear_start:google.genomics.v1.VariantSetMetadata)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  info_.Clear();
  key_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  value_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  description_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  number_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  type_ = 0;
  _internal_metadata_.Clear();
}

bool VariantSetMetadata::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.genomics.v1.VariantSetMetadata)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string key = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->key().data(), static_cast<int>(this->key().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.genomics.v1.VariantSetMetadata.key"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string value = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->value().data(), static_cast<int>(this->value().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.genomics.v1.VariantSetMetadata.value"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, .google.protobuf.ListValue> info = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          VariantSetMetadata_InfoEntry_DoNotUse::Parser< ::google::protobuf::internal::MapField<
              VariantSetMetadata_InfoEntry_DoNotUse,
              ::std::string, ::google::protobuf::ListValue,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
              0 >,
            ::google::protobuf::Map< ::std::string, ::google::protobuf::ListValue > > parser(&info_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.genomics.v1.VariantSetMetadata.InfoEntry.key"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->id().data(), static_cast<int>(this->id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.genomics.v1.VariantSetMetadata.id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.genomics.v1.VariantSetMetadata.Type type = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::google::genomics::v1::VariantSetMetadata_Type >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string description = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_description()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->description().data(), static_cast<int>(this->description().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.genomics.v1.VariantSetMetadata.description"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string number = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_number()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->number().data(), static_cast<int>(this->number().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.genomics.v1.VariantSetMetadata.number"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.genomics.v1.VariantSetMetadata)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.genomics.v1.VariantSetMetadata)
  return false;
#undef DO_
}

void VariantSetMetadata::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.genomics.v1.VariantSetMetadata)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string key = 1;
  if (this->key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->key().data(), static_cast<int>(this->key().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.VariantSetMetadata.key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->key(), output);
  }

  // string value = 2;
  if (this->value().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->value().data(), static_cast<int>(this->value().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.VariantSetMetadata.value");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->value(), output);
  }

  // map<string, .google.protobuf.ListValue> info = 3;
  if (!this->info().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::google::protobuf::ListValue >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "google.genomics.v1.VariantSetMetadata.InfoEntry.key");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->info().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->info().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::google::protobuf::ListValue >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::google::protobuf::ListValue >::const_iterator
          it = this->info().begin();
          it != this->info().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<VariantSetMetadata_InfoEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(info_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            3, *entry, output);
        if (entry->GetArena() != NULL) {
          entry.release();
        }
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::google::protobuf::scoped_ptr<VariantSetMetadata_InfoEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::google::protobuf::ListValue >::const_iterator
          it = this->info().begin();
          it != this->info().end(); ++it) {
        entry.reset(info_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            3, *entry, output);
        if (entry->GetArena() != NULL) {
          entry.release();
        }
        Utf8Check::Check(&*it);
      }
    }
  }

  // string id = 4;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), static_cast<int>(this->id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.VariantSetMetadata.id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->id(), output);
  }

  // .google.genomics.v1.VariantSetMetadata.Type type = 5;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->type(), output);
  }

  // string description = 7;
  if (this->description().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->description().data(), static_cast<int>(this->description().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.VariantSetMetadata.description");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->description(), output);
  }

  // string number = 8;
  if (this->number().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->number().data(), static_cast<int>(this->number().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.VariantSetMetadata.number");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->number(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:google.genomics.v1.VariantSetMetadata)
}

::google::protobuf::uint8* VariantSetMetadata::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.genomics.v1.VariantSetMetadata)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string key = 1;
  if (this->key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->key().data(), static_cast<int>(this->key().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.VariantSetMetadata.key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->key(), target);
  }

  // string value = 2;
  if (this->value().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->value().data(), static_cast<int>(this->value().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.VariantSetMetadata.value");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->value(), target);
  }

  // map<string, .google.protobuf.ListValue> info = 3;
  if (!this->info().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::google::protobuf::ListValue >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "google.genomics.v1.VariantSetMetadata.InfoEntry.key");
      }
    };

    if (deterministic &&
        this->info().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->info().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::google::protobuf::ListValue >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::google::protobuf::ListValue >::const_iterator
          it = this->info().begin();
          it != this->info().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<VariantSetMetadata_InfoEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(info_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       3, *entry, deterministic, target);
;
        if (entry->GetArena() != NULL) {
          entry.release();
        }
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::google::protobuf::scoped_ptr<VariantSetMetadata_InfoEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::google::protobuf::ListValue >::const_iterator
          it = this->info().begin();
          it != this->info().end(); ++it) {
        entry.reset(info_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       3, *entry, deterministic, target);
;
        if (entry->GetArena() != NULL) {
          entry.release();
        }
        Utf8Check::Check(&*it);
      }
    }
  }

  // string id = 4;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), static_cast<int>(this->id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.VariantSetMetadata.id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->id(), target);
  }

  // .google.genomics.v1.VariantSetMetadata.Type type = 5;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->type(), target);
  }

  // string description = 7;
  if (this->description().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->description().data(), static_cast<int>(this->description().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.VariantSetMetadata.description");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->description(), target);
  }

  // string number = 8;
  if (this->number().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->number().data(), static_cast<int>(this->number().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.VariantSetMetadata.number");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->number(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.genomics.v1.VariantSetMetadata)
  return target;
}

size_t VariantSetMetadata::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.genomics.v1.VariantSetMetadata)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // map<string, .google.protobuf.ListValue> info = 3;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->info_size());
  {
    ::google::protobuf::scoped_ptr<VariantSetMetadata_InfoEntry_DoNotUse> entry;
    for (::google::protobuf::Map< ::std::string, ::google::protobuf::ListValue >::const_iterator
        it = this->info().begin();
        it != this->info().end(); ++it) {
      if (entry.get() != NULL && entry->GetArena() != NULL) {
        entry.release();
      }
      entry.reset(info_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
    if (entry.get() != NULL && entry->GetArena() != NULL) {
      entry.release();
    }
  }

  // string key = 1;
  if (this->key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->key());
  }

  // string value = 2;
  if (this->value().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->value());
  }

  // string id = 4;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->id());
  }

  // string description = 7;
  if (this->description().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->description());
  }

  // string number = 8;
  if (this->number().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->number());
  }

  // .google.genomics.v1.VariantSetMetadata.Type type = 5;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VariantSetMetadata::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.genomics.v1.VariantSetMetadata)
  GOOGLE_DCHECK_NE(&from, this);
  const VariantSetMetadata* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const VariantSetMetadata>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.genomics.v1.VariantSetMetadata)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.genomics.v1.VariantSetMetadata)
    MergeFrom(*source);
  }
}

void VariantSetMetadata::MergeFrom(const VariantSetMetadata& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.genomics.v1.VariantSetMetadata)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  info_.MergeFrom(from.info_);
  if (from.key().size() > 0) {
    set_key(from.key());
  }
  if (from.value().size() > 0) {
    set_value(from.value());
  }
  if (from.id().size() > 0) {
    set_id(from.id());
  }
  if (from.description().size() > 0) {
    set_description(from.description());
  }
  if (from.number().size() > 0) {
    set_number(from.number());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
}

void VariantSetMetadata::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.genomics.v1.VariantSetMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VariantSetMetadata::CopyFrom(const VariantSetMetadata& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.genomics.v1.VariantSetMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VariantSetMetadata::IsInitialized() const {
  return true;
}

void VariantSetMetadata::Swap(VariantSetMetadata* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    VariantSetMetadata* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void VariantSetMetadata::UnsafeArenaSwap(VariantSetMetadata* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void VariantSetMetadata::InternalSwap(VariantSetMetadata* other) {
  using std::swap;
  info_.Swap(&other->info_);
  key_.Swap(&other->key_);
  value_.Swap(&other->value_);
  id_.Swap(&other->id_);
  description_.Swap(&other->description_);
  number_.Swap(&other->number_);
  swap(type_, other->type_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata VariantSetMetadata::GetMetadata() const {
  protobuf_google_2fgenomics_2fv1_2fvariants_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fgenomics_2fv1_2fvariants_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void VariantSet::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VariantSet::kDatasetIdFieldNumber;
const int VariantSet::kIdFieldNumber;
const int VariantSet::kReferenceSetIdFieldNumber;
const int VariantSet::kReferenceBoundsFieldNumber;
const int VariantSet::kMetadataFieldNumber;
const int VariantSet::kNameFieldNumber;
const int VariantSet::kDescriptionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VariantSet::VariantSet()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_google_2fgenomics_2fv1_2fvariants_2eproto::InitDefaultsVariantSet();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.genomics.v1.VariantSet)
}
VariantSet::VariantSet(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  metadata_(arena),
  reference_bounds_(arena) {
  ::protobuf_google_2fgenomics_2fv1_2fvariants_2eproto::InitDefaultsVariantSet();
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.genomics.v1.VariantSet)
}
VariantSet::VariantSet(const VariantSet& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      metadata_(from.metadata_),
      reference_bounds_(from.reference_bounds_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  dataset_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.dataset_id().size() > 0) {
    dataset_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.dataset_id(),
      GetArenaNoVirtual());
  }
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.id().size() > 0) {
    id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id(),
      GetArenaNoVirtual());
  }
  reference_set_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.reference_set_id().size() > 0) {
    reference_set_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.reference_set_id(),
      GetArenaNoVirtual());
  }
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name(),
      GetArenaNoVirtual());
  }
  description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.description().size() > 0) {
    description_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.description(),
      GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(copy_constructor:google.genomics.v1.VariantSet)
}

void VariantSet::SharedCtor() {
  dataset_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  reference_set_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

VariantSet::~VariantSet() {
  // @@protoc_insertion_point(destructor:google.genomics.v1.VariantSet)
  SharedDtor();
}

void VariantSet::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  dataset_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  reference_set_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  description_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void VariantSet::ArenaDtor(void* object) {
  VariantSet* _this = reinterpret_cast< VariantSet* >(object);
  (void)_this;
}
void VariantSet::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void VariantSet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VariantSet::descriptor() {
  ::protobuf_google_2fgenomics_2fv1_2fvariants_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fgenomics_2fv1_2fvariants_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const VariantSet& VariantSet::default_instance() {
  ::protobuf_google_2fgenomics_2fv1_2fvariants_2eproto::InitDefaultsVariantSet();
  return *internal_default_instance();
}

VariantSet* VariantSet::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<VariantSet>(arena);
}

void VariantSet::Clear() {
// @@protoc_insertion_point(message_clear_start:google.genomics.v1.VariantSet)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  metadata_.Clear();
  reference_bounds_.Clear();
  dataset_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  reference_set_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  description_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  _internal_metadata_.Clear();
}

bool VariantSet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.genomics.v1.VariantSet)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string dataset_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dataset_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->dataset_id().data(), static_cast<int>(this->dataset_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.genomics.v1.VariantSet.dataset_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->id().data(), static_cast<int>(this->id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.genomics.v1.VariantSet.id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .google.genomics.v1.VariantSetMetadata metadata = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_metadata()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .google.genomics.v1.ReferenceBound reference_bounds = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_reference_bounds()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string reference_set_id = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_reference_set_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->reference_set_id().data(), static_cast<int>(this->reference_set_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.genomics.v1.VariantSet.reference_set_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string name = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.genomics.v1.VariantSet.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string description = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_description()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->description().data(), static_cast<int>(this->description().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.genomics.v1.VariantSet.description"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.genomics.v1.VariantSet)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.genomics.v1.VariantSet)
  return false;
#undef DO_
}

void VariantSet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.genomics.v1.VariantSet)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string dataset_id = 1;
  if (this->dataset_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->dataset_id().data(), static_cast<int>(this->dataset_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.VariantSet.dataset_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->dataset_id(), output);
  }

  // string id = 2;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), static_cast<int>(this->id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.VariantSet.id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->id(), output);
  }

  // repeated .google.genomics.v1.VariantSetMetadata metadata = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->metadata_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->metadata(static_cast<int>(i)), output);
  }

  // repeated .google.genomics.v1.ReferenceBound reference_bounds = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->reference_bounds_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->reference_bounds(static_cast<int>(i)), output);
  }

  // string reference_set_id = 6;
  if (this->reference_set_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->reference_set_id().data(), static_cast<int>(this->reference_set_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.VariantSet.reference_set_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->reference_set_id(), output);
  }

  // string name = 7;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.VariantSet.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->name(), output);
  }

  // string description = 8;
  if (this->description().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->description().data(), static_cast<int>(this->description().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.VariantSet.description");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->description(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:google.genomics.v1.VariantSet)
}

::google::protobuf::uint8* VariantSet::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.genomics.v1.VariantSet)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string dataset_id = 1;
  if (this->dataset_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->dataset_id().data(), static_cast<int>(this->dataset_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.VariantSet.dataset_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->dataset_id(), target);
  }

  // string id = 2;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), static_cast<int>(this->id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.VariantSet.id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->id(), target);
  }

  // repeated .google.genomics.v1.VariantSetMetadata metadata = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->metadata_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->metadata(static_cast<int>(i)), deterministic, target);
  }

  // repeated .google.genomics.v1.ReferenceBound reference_bounds = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->reference_bounds_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->reference_bounds(static_cast<int>(i)), deterministic, target);
  }

  // string reference_set_id = 6;
  if (this->reference_set_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->reference_set_id().data(), static_cast<int>(this->reference_set_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.VariantSet.reference_set_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->reference_set_id(), target);
  }

  // string name = 7;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.VariantSet.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->name(), target);
  }

  // string description = 8;
  if (this->description().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->description().data(), static_cast<int>(this->description().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.VariantSet.description");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->description(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.genomics.v1.VariantSet)
  return target;
}

size_t VariantSet::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.genomics.v1.VariantSet)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .google.genomics.v1.VariantSetMetadata metadata = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->metadata_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->metadata(static_cast<int>(i)));
    }
  }

  // repeated .google.genomics.v1.ReferenceBound reference_bounds = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->reference_bounds_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->reference_bounds(static_cast<int>(i)));
    }
  }

  // string dataset_id = 1;
  if (this->dataset_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->dataset_id());
  }

  // string id = 2;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->id());
  }

  // string reference_set_id = 6;
  if (this->reference_set_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->reference_set_id());
  }

  // string name = 7;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // string description = 8;
  if (this->description().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->description());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VariantSet::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.genomics.v1.VariantSet)
  GOOGLE_DCHECK_NE(&from, this);
  const VariantSet* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const VariantSet>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.genomics.v1.VariantSet)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.genomics.v1.VariantSet)
    MergeFrom(*source);
  }
}

void VariantSet::MergeFrom(const VariantSet& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.genomics.v1.VariantSet)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  metadata_.MergeFrom(from.metadata_);
  reference_bounds_.MergeFrom(from.reference_bounds_);
  if (from.dataset_id().size() > 0) {
    set_dataset_id(from.dataset_id());
  }
  if (from.id().size() > 0) {
    set_id(from.id());
  }
  if (from.reference_set_id().size() > 0) {
    set_reference_set_id(from.reference_set_id());
  }
  if (from.name().size() > 0) {
    set_name(from.name());
  }
  if (from.description().size() > 0) {
    set_description(from.description());
  }
}

void VariantSet::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.genomics.v1.VariantSet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VariantSet::CopyFrom(const VariantSet& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.genomics.v1.VariantSet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VariantSet::IsInitialized() const {
  return true;
}

void VariantSet::Swap(VariantSet* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    VariantSet* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void VariantSet::UnsafeArenaSwap(VariantSet* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void VariantSet::InternalSwap(VariantSet* other) {
  using std::swap;
  metadata_.InternalSwap(&other->metadata_);
  reference_bounds_.InternalSwap(&other->reference_bounds_);
  dataset_id_.Swap(&other->dataset_id_);
  id_.Swap(&other->id_);
  reference_set_id_.Swap(&other->reference_set_id_);
  name_.Swap(&other->name_);
  description_.Swap(&other->description_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata VariantSet::GetMetadata() const {
  protobuf_google_2fgenomics_2fv1_2fvariants_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fgenomics_2fv1_2fvariants_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

Variant_InfoEntry_DoNotUse::Variant_InfoEntry_DoNotUse() {}
Variant_InfoEntry_DoNotUse::Variant_InfoEntry_DoNotUse(::google::protobuf::Arena* arena) : SuperType(arena) {}
void Variant_InfoEntry_DoNotUse::MergeFrom(const Variant_InfoEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::google::protobuf::Metadata Variant_InfoEntry_DoNotUse::GetMetadata() const {
  ::protobuf_google_2fgenomics_2fv1_2fvariants_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fgenomics_2fv1_2fvariants_2eproto::file_level_metadata[3];
}
void Variant_InfoEntry_DoNotUse::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}


// ===================================================================

void Variant::InitAsDefaultInstance() {
}
void Variant::clear_info() {
  info_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Variant::kVariantSetIdFieldNumber;
const int Variant::kIdFieldNumber;
const int Variant::kNamesFieldNumber;
const int Variant::kCreatedFieldNumber;
const int Variant::kReferenceNameFieldNumber;
const int Variant::kStartFieldNumber;
const int Variant::kEndFieldNumber;
const int Variant::kReferenceBasesFieldNumber;
const int Variant::kAlternateBasesFieldNumber;
const int Variant::kQualityFieldNumber;
const int Variant::kFilterFieldNumber;
const int Variant::kInfoFieldNumber;
const int Variant::kCallsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Variant::Variant()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_google_2fgenomics_2fv1_2fvariants_2eproto::InitDefaultsVariant();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.genomics.v1.Variant)
}
Variant::Variant(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  names_(arena),
  alternate_bases_(arena),
  filter_(arena),
  info_(arena),
  calls_(arena) {
  ::protobuf_google_2fgenomics_2fv1_2fvariants_2eproto::InitDefaultsVariant();
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.genomics.v1.Variant)
}
Variant::Variant(const Variant& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      names_(from.names_),
      alternate_bases_(from.alternate_bases_),
      filter_(from.filter_),
      calls_(from.calls_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  info_.MergeFrom(from.info_);
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.id().size() > 0) {
    id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id(),
      GetArenaNoVirtual());
  }
  reference_bases_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.reference_bases().size() > 0) {
    reference_bases_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.reference_bases(),
      GetArenaNoVirtual());
  }
  reference_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.reference_name().size() > 0) {
    reference_name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.reference_name(),
      GetArenaNoVirtual());
  }
  variant_set_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.variant_set_id().size() > 0) {
    variant_set_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.variant_set_id(),
      GetArenaNoVirtual());
  }
  ::memcpy(&quality_, &from.quality_,
    static_cast<size_t>(reinterpret_cast<char*>(&start_) -
    reinterpret_cast<char*>(&quality_)) + sizeof(start_));
  // @@protoc_insertion_point(copy_constructor:google.genomics.v1.Variant)
}

void Variant::SharedCtor() {
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  reference_bases_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  reference_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  variant_set_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&quality_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&start_) -
      reinterpret_cast<char*>(&quality_)) + sizeof(start_));
  _cached_size_ = 0;
}

Variant::~Variant() {
  // @@protoc_insertion_point(destructor:google.genomics.v1.Variant)
  SharedDtor();
}

void Variant::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  reference_bases_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  reference_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  variant_set_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Variant::ArenaDtor(void* object) {
  Variant* _this = reinterpret_cast< Variant* >(object);
  (void)_this;
}
void Variant::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void Variant::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Variant::descriptor() {
  ::protobuf_google_2fgenomics_2fv1_2fvariants_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fgenomics_2fv1_2fvariants_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Variant& Variant::default_instance() {
  ::protobuf_google_2fgenomics_2fv1_2fvariants_2eproto::InitDefaultsVariant();
  return *internal_default_instance();
}

Variant* Variant::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<Variant>(arena);
}

void Variant::Clear() {
// @@protoc_insertion_point(message_clear_start:google.genomics.v1.Variant)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  names_.Clear();
  alternate_bases_.Clear();
  filter_.Clear();
  info_.Clear();
  calls_.Clear();
  id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  reference_bases_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  reference_name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  variant_set_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  ::memset(&quality_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&start_) -
      reinterpret_cast<char*>(&quality_)) + sizeof(start_));
  _internal_metadata_.Clear();
}

bool Variant::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.genomics.v1.Variant)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->id().data(), static_cast<int>(this->id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.genomics.v1.Variant.id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string names = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_names()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->names(this->names_size() - 1).data(),
            static_cast<int>(this->names(this->names_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.genomics.v1.Variant.names"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string reference_bases = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_reference_bases()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->reference_bases().data(), static_cast<int>(this->reference_bases().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.genomics.v1.Variant.reference_bases"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string alternate_bases = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_alternate_bases()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->alternate_bases(this->alternate_bases_size() - 1).data(),
            static_cast<int>(this->alternate_bases(this->alternate_bases_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.genomics.v1.Variant.alternate_bases"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double quality = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(65u /* 65 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &quality_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string filter = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_filter()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->filter(this->filter_size() - 1).data(),
            static_cast<int>(this->filter(this->filter_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.genomics.v1.Variant.filter"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, .google.protobuf.ListValue> info = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          Variant_InfoEntry_DoNotUse::Parser< ::google::protobuf::internal::MapField<
              Variant_InfoEntry_DoNotUse,
              ::std::string, ::google::protobuf::ListValue,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
              0 >,
            ::google::protobuf::Map< ::std::string, ::google::protobuf::ListValue > > parser(&info_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.genomics.v1.Variant.InfoEntry.key"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .google.genomics.v1.VariantCall calls = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_calls()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 created = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &created_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 end = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &end_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string reference_name = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(114u /* 114 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_reference_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->reference_name().data(), static_cast<int>(this->reference_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.genomics.v1.Variant.reference_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string variant_set_id = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(122u /* 122 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_variant_set_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->variant_set_id().data(), static_cast<int>(this->variant_set_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.genomics.v1.Variant.variant_set_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 start = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(128u /* 128 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &start_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.genomics.v1.Variant)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.genomics.v1.Variant)
  return false;
#undef DO_
}

void Variant::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.genomics.v1.Variant)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 2;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), static_cast<int>(this->id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.Variant.id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->id(), output);
  }

  // repeated string names = 3;
  for (int i = 0, n = this->names_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->names(i).data(), static_cast<int>(this->names(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.Variant.names");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->names(i), output);
  }

  // string reference_bases = 6;
  if (this->reference_bases().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->reference_bases().data(), static_cast<int>(this->reference_bases().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.Variant.reference_bases");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->reference_bases(), output);
  }

  // repeated string alternate_bases = 7;
  for (int i = 0, n = this->alternate_bases_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->alternate_bases(i).data(), static_cast<int>(this->alternate_bases(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.Variant.alternate_bases");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->alternate_bases(i), output);
  }

  // double quality = 8;
  if (this->quality() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->quality(), output);
  }

  // repeated string filter = 9;
  for (int i = 0, n = this->filter_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->filter(i).data(), static_cast<int>(this->filter(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.Variant.filter");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->filter(i), output);
  }

  // map<string, .google.protobuf.ListValue> info = 10;
  if (!this->info().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::google::protobuf::ListValue >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "google.genomics.v1.Variant.InfoEntry.key");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->info().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->info().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::google::protobuf::ListValue >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::google::protobuf::ListValue >::const_iterator
          it = this->info().begin();
          it != this->info().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<Variant_InfoEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(info_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            10, *entry, output);
        if (entry->GetArena() != NULL) {
          entry.release();
        }
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::google::protobuf::scoped_ptr<Variant_InfoEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::google::protobuf::ListValue >::const_iterator
          it = this->info().begin();
          it != this->info().end(); ++it) {
        entry.reset(info_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            10, *entry, output);
        if (entry->GetArena() != NULL) {
          entry.release();
        }
        Utf8Check::Check(&*it);
      }
    }
  }

  // repeated .google.genomics.v1.VariantCall calls = 11;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->calls_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->calls(static_cast<int>(i)), output);
  }

  // int64 created = 12;
  if (this->created() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(12, this->created(), output);
  }

  // int64 end = 13;
  if (this->end() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(13, this->end(), output);
  }

  // string reference_name = 14;
  if (this->reference_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->reference_name().data(), static_cast<int>(this->reference_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.Variant.reference_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      14, this->reference_name(), output);
  }

  // string variant_set_id = 15;
  if (this->variant_set_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->variant_set_id().data(), static_cast<int>(this->variant_set_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.Variant.variant_set_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      15, this->variant_set_id(), output);
  }

  // int64 start = 16;
  if (this->start() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(16, this->start(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:google.genomics.v1.Variant)
}

::google::protobuf::uint8* Variant::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.genomics.v1.Variant)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 2;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), static_cast<int>(this->id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.Variant.id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->id(), target);
  }

  // repeated string names = 3;
  for (int i = 0, n = this->names_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->names(i).data(), static_cast<int>(this->names(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.Variant.names");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->names(i), target);
  }

  // string reference_bases = 6;
  if (this->reference_bases().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->reference_bases().data(), static_cast<int>(this->reference_bases().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.Variant.reference_bases");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->reference_bases(), target);
  }

  // repeated string alternate_bases = 7;
  for (int i = 0, n = this->alternate_bases_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->alternate_bases(i).data(), static_cast<int>(this->alternate_bases(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.Variant.alternate_bases");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(7, this->alternate_bases(i), target);
  }

  // double quality = 8;
  if (this->quality() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->quality(), target);
  }

  // repeated string filter = 9;
  for (int i = 0, n = this->filter_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->filter(i).data(), static_cast<int>(this->filter(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.Variant.filter");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(9, this->filter(i), target);
  }

  // map<string, .google.protobuf.ListValue> info = 10;
  if (!this->info().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::google::protobuf::ListValue >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "google.genomics.v1.Variant.InfoEntry.key");
      }
    };

    if (deterministic &&
        this->info().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->info().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::google::protobuf::ListValue >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::google::protobuf::ListValue >::const_iterator
          it = this->info().begin();
          it != this->info().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<Variant_InfoEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(info_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       10, *entry, deterministic, target);
;
        if (entry->GetArena() != NULL) {
          entry.release();
        }
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::google::protobuf::scoped_ptr<Variant_InfoEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::google::protobuf::ListValue >::const_iterator
          it = this->info().begin();
          it != this->info().end(); ++it) {
        entry.reset(info_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       10, *entry, deterministic, target);
;
        if (entry->GetArena() != NULL) {
          entry.release();
        }
        Utf8Check::Check(&*it);
      }
    }
  }

  // repeated .google.genomics.v1.VariantCall calls = 11;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->calls_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        11, this->calls(static_cast<int>(i)), deterministic, target);
  }

  // int64 created = 12;
  if (this->created() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(12, this->created(), target);
  }

  // int64 end = 13;
  if (this->end() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(13, this->end(), target);
  }

  // string reference_name = 14;
  if (this->reference_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->reference_name().data(), static_cast<int>(this->reference_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.Variant.reference_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        14, this->reference_name(), target);
  }

  // string variant_set_id = 15;
  if (this->variant_set_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->variant_set_id().data(), static_cast<int>(this->variant_set_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.Variant.variant_set_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        15, this->variant_set_id(), target);
  }

  // int64 start = 16;
  if (this->start() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(16, this->start(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.genomics.v1.Variant)
  return target;
}

size_t Variant::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.genomics.v1.Variant)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated string names = 3;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->names_size());
  for (int i = 0, n = this->names_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->names(i));
  }

  // repeated string alternate_bases = 7;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->alternate_bases_size());
  for (int i = 0, n = this->alternate_bases_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->alternate_bases(i));
  }

  // repeated string filter = 9;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->filter_size());
  for (int i = 0, n = this->filter_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->filter(i));
  }

  // map<string, .google.protobuf.ListValue> info = 10;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->info_size());
  {
    ::google::protobuf::scoped_ptr<Variant_InfoEntry_DoNotUse> entry;
    for (::google::protobuf::Map< ::std::string, ::google::protobuf::ListValue >::const_iterator
        it = this->info().begin();
        it != this->info().end(); ++it) {
      if (entry.get() != NULL && entry->GetArena() != NULL) {
        entry.release();
      }
      entry.reset(info_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
    if (entry.get() != NULL && entry->GetArena() != NULL) {
      entry.release();
    }
  }

  // repeated .google.genomics.v1.VariantCall calls = 11;
  {
    unsigned int count = static_cast<unsigned int>(this->calls_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->calls(static_cast<int>(i)));
    }
  }

  // string id = 2;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->id());
  }

  // string reference_bases = 6;
  if (this->reference_bases().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->reference_bases());
  }

  // string reference_name = 14;
  if (this->reference_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->reference_name());
  }

  // string variant_set_id = 15;
  if (this->variant_set_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->variant_set_id());
  }

  // double quality = 8;
  if (this->quality() != 0) {
    total_size += 1 + 8;
  }

  // int64 created = 12;
  if (this->created() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->created());
  }

  // int64 end = 13;
  if (this->end() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->end());
  }

  // int64 start = 16;
  if (this->start() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->start());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Variant::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.genomics.v1.Variant)
  GOOGLE_DCHECK_NE(&from, this);
  const Variant* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Variant>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.genomics.v1.Variant)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.genomics.v1.Variant)
    MergeFrom(*source);
  }
}

void Variant::MergeFrom(const Variant& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.genomics.v1.Variant)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  names_.MergeFrom(from.names_);
  alternate_bases_.MergeFrom(from.alternate_bases_);
  filter_.MergeFrom(from.filter_);
  info_.MergeFrom(from.info_);
  calls_.MergeFrom(from.calls_);
  if (from.id().size() > 0) {
    set_id(from.id());
  }
  if (from.reference_bases().size() > 0) {
    set_reference_bases(from.reference_bases());
  }
  if (from.reference_name().size() > 0) {
    set_reference_name(from.reference_name());
  }
  if (from.variant_set_id().size() > 0) {
    set_variant_set_id(from.variant_set_id());
  }
  if (from.quality() != 0) {
    set_quality(from.quality());
  }
  if (from.created() != 0) {
    set_created(from.created());
  }
  if (from.end() != 0) {
    set_end(from.end());
  }
  if (from.start() != 0) {
    set_start(from.start());
  }
}

void Variant::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.genomics.v1.Variant)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Variant::CopyFrom(const Variant& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.genomics.v1.Variant)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Variant::IsInitialized() const {
  return true;
}

void Variant::Swap(Variant* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    Variant* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void Variant::UnsafeArenaSwap(Variant* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void Variant::InternalSwap(Variant* other) {
  using std::swap;
  names_.InternalSwap(&other->names_);
  alternate_bases_.InternalSwap(&other->alternate_bases_);
  filter_.InternalSwap(&other->filter_);
  info_.Swap(&other->info_);
  calls_.InternalSwap(&other->calls_);
  id_.Swap(&other->id_);
  reference_bases_.Swap(&other->reference_bases_);
  reference_name_.Swap(&other->reference_name_);
  variant_set_id_.Swap(&other->variant_set_id_);
  swap(quality_, other->quality_);
  swap(created_, other->created_);
  swap(end_, other->end_);
  swap(start_, other->start_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Variant::GetMetadata() const {
  protobuf_google_2fgenomics_2fv1_2fvariants_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fgenomics_2fv1_2fvariants_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

VariantCall_InfoEntry_DoNotUse::VariantCall_InfoEntry_DoNotUse() {}
VariantCall_InfoEntry_DoNotUse::VariantCall_InfoEntry_DoNotUse(::google::protobuf::Arena* arena) : SuperType(arena) {}
void VariantCall_InfoEntry_DoNotUse::MergeFrom(const VariantCall_InfoEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::google::protobuf::Metadata VariantCall_InfoEntry_DoNotUse::GetMetadata() const {
  ::protobuf_google_2fgenomics_2fv1_2fvariants_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fgenomics_2fv1_2fvariants_2eproto::file_level_metadata[5];
}
void VariantCall_InfoEntry_DoNotUse::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}


// ===================================================================

void VariantCall::InitAsDefaultInstance() {
}
void VariantCall::clear_info() {
  info_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VariantCall::kCallSetIdFieldNumber;
const int VariantCall::kCallSetNameFieldNumber;
const int VariantCall::kGenotypeFieldNumber;
const int VariantCall::kPhasesetFieldNumber;
const int VariantCall::kGenotypeLikelihoodFieldNumber;
const int VariantCall::kInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VariantCall::VariantCall()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_google_2fgenomics_2fv1_2fvariants_2eproto::InitDefaultsVariantCall();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.genomics.v1.VariantCall)
}
VariantCall::VariantCall(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  info_(arena),
  genotype_likelihood_(arena),
  genotype_(arena) {
  ::protobuf_google_2fgenomics_2fv1_2fvariants_2eproto::InitDefaultsVariantCall();
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.genomics.v1.VariantCall)
}
VariantCall::VariantCall(const VariantCall& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      genotype_likelihood_(from.genotype_likelihood_),
      genotype_(from.genotype_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  info_.MergeFrom(from.info_);
  phaseset_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.phaseset().size() > 0) {
    phaseset_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.phaseset(),
      GetArenaNoVirtual());
  }
  call_set_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.call_set_id().size() > 0) {
    call_set_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.call_set_id(),
      GetArenaNoVirtual());
  }
  call_set_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.call_set_name().size() > 0) {
    call_set_name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.call_set_name(),
      GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(copy_constructor:google.genomics.v1.VariantCall)
}

void VariantCall::SharedCtor() {
  phaseset_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  call_set_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  call_set_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

VariantCall::~VariantCall() {
  // @@protoc_insertion_point(destructor:google.genomics.v1.VariantCall)
  SharedDtor();
}

void VariantCall::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  phaseset_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  call_set_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  call_set_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void VariantCall::ArenaDtor(void* object) {
  VariantCall* _this = reinterpret_cast< VariantCall* >(object);
  (void)_this;
}
void VariantCall::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void VariantCall::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VariantCall::descriptor() {
  ::protobuf_google_2fgenomics_2fv1_2fvariants_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fgenomics_2fv1_2fvariants_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const VariantCall& VariantCall::default_instance() {
  ::protobuf_google_2fgenomics_2fv1_2fvariants_2eproto::InitDefaultsVariantCall();
  return *internal_default_instance();
}

VariantCall* VariantCall::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<VariantCall>(arena);
}

void VariantCall::Clear() {
// @@protoc_insertion_point(message_clear_start:google.genomics.v1.VariantCall)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  info_.Clear();
  genotype_likelihood_.Clear();
  genotype_.Clear();
  phaseset_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  call_set_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  call_set_name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  _internal_metadata_.Clear();
}

bool VariantCall::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.genomics.v1.VariantCall)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // map<string, .google.protobuf.ListValue> info = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          VariantCall_InfoEntry_DoNotUse::Parser< ::google::protobuf::internal::MapField<
              VariantCall_InfoEntry_DoNotUse,
              ::std::string, ::google::protobuf::ListValue,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
              0 >,
            ::google::protobuf::Map< ::std::string, ::google::protobuf::ListValue > > parser(&info_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.genomics.v1.VariantCall.InfoEntry.key"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string phaseset = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_phaseset()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->phaseset().data(), static_cast<int>(this->phaseset().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.genomics.v1.VariantCall.phaseset"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated double genotype_likelihood = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_genotype_likelihood())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(49u /* 49 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 50u, input, this->mutable_genotype_likelihood())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 genotype = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_genotype())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 58u, input, this->mutable_genotype())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string call_set_id = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_call_set_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->call_set_id().data(), static_cast<int>(this->call_set_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.genomics.v1.VariantCall.call_set_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string call_set_name = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_call_set_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->call_set_name().data(), static_cast<int>(this->call_set_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.genomics.v1.VariantCall.call_set_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.genomics.v1.VariantCall)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.genomics.v1.VariantCall)
  return false;
#undef DO_
}

void VariantCall::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.genomics.v1.VariantCall)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // map<string, .google.protobuf.ListValue> info = 2;
  if (!this->info().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::google::protobuf::ListValue >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "google.genomics.v1.VariantCall.InfoEntry.key");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->info().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->info().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::google::protobuf::ListValue >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::google::protobuf::ListValue >::const_iterator
          it = this->info().begin();
          it != this->info().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<VariantCall_InfoEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(info_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            2, *entry, output);
        if (entry->GetArena() != NULL) {
          entry.release();
        }
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::google::protobuf::scoped_ptr<VariantCall_InfoEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::google::protobuf::ListValue >::const_iterator
          it = this->info().begin();
          it != this->info().end(); ++it) {
        entry.reset(info_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            2, *entry, output);
        if (entry->GetArena() != NULL) {
          entry.release();
        }
        Utf8Check::Check(&*it);
      }
    }
  }

  // string phaseset = 5;
  if (this->phaseset().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->phaseset().data(), static_cast<int>(this->phaseset().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.VariantCall.phaseset");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->phaseset(), output);
  }

  // repeated double genotype_likelihood = 6;
  if (this->genotype_likelihood_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(6, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _genotype_likelihood_cached_byte_size_));
    ::google::protobuf::internal::WireFormatLite::WriteDoubleArray(
      this->genotype_likelihood().data(), this->genotype_likelihood_size(), output);
  }

  // repeated int32 genotype = 7;
  if (this->genotype_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(7, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _genotype_cached_byte_size_));
  }
  for (int i = 0, n = this->genotype_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->genotype(i), output);
  }

  // string call_set_id = 8;
  if (this->call_set_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->call_set_id().data(), static_cast<int>(this->call_set_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.VariantCall.call_set_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->call_set_id(), output);
  }

  // string call_set_name = 9;
  if (this->call_set_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->call_set_name().data(), static_cast<int>(this->call_set_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.VariantCall.call_set_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->call_set_name(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:google.genomics.v1.VariantCall)
}

::google::protobuf::uint8* VariantCall::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.genomics.v1.VariantCall)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // map<string, .google.protobuf.ListValue> info = 2;
  if (!this->info().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::google::protobuf::ListValue >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "google.genomics.v1.VariantCall.InfoEntry.key");
      }
    };

    if (deterministic &&
        this->info().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->info().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::google::protobuf::ListValue >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::google::protobuf::ListValue >::const_iterator
          it = this->info().begin();
          it != this->info().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<VariantCall_InfoEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(info_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       2, *entry, deterministic, target);
;
        if (entry->GetArena() != NULL) {
          entry.release();
        }
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::google::protobuf::scoped_ptr<VariantCall_InfoEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::google::protobuf::ListValue >::const_iterator
          it = this->info().begin();
          it != this->info().end(); ++it) {
        entry.reset(info_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       2, *entry, deterministic, target);
;
        if (entry->GetArena() != NULL) {
          entry.release();
        }
        Utf8Check::Check(&*it);
      }
    }
  }

  // string phaseset = 5;
  if (this->phaseset().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->phaseset().data(), static_cast<int>(this->phaseset().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.VariantCall.phaseset");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->phaseset(), target);
  }

  // repeated double genotype_likelihood = 6;
  if (this->genotype_likelihood_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      6,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _genotype_likelihood_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleNoTagToArray(this->genotype_likelihood_, target);
  }

  // repeated int32 genotype = 7;
  if (this->genotype_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      7,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _genotype_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->genotype_, target);
  }

  // string call_set_id = 8;
  if (this->call_set_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->call_set_id().data(), static_cast<int>(this->call_set_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.VariantCall.call_set_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->call_set_id(), target);
  }

  // string call_set_name = 9;
  if (this->call_set_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->call_set_name().data(), static_cast<int>(this->call_set_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.VariantCall.call_set_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->call_set_name(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.genomics.v1.VariantCall)
  return target;
}

size_t VariantCall::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.genomics.v1.VariantCall)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // map<string, .google.protobuf.ListValue> info = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->info_size());
  {
    ::google::protobuf::scoped_ptr<VariantCall_InfoEntry_DoNotUse> entry;
    for (::google::protobuf::Map< ::std::string, ::google::protobuf::ListValue >::const_iterator
        it = this->info().begin();
        it != this->info().end(); ++it) {
      if (entry.get() != NULL && entry->GetArena() != NULL) {
        entry.release();
      }
      entry.reset(info_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
    if (entry.get() != NULL && entry->GetArena() != NULL) {
      entry.release();
    }
  }

  // repeated double genotype_likelihood = 6;
  {
    unsigned int count = static_cast<unsigned int>(this->genotype_likelihood_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _genotype_likelihood_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated int32 genotype = 7;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->genotype_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _genotype_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // string phaseset = 5;
  if (this->phaseset().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->phaseset());
  }

  // string call_set_id = 8;
  if (this->call_set_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->call_set_id());
  }

  // string call_set_name = 9;
  if (this->call_set_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->call_set_name());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VariantCall::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.genomics.v1.VariantCall)
  GOOGLE_DCHECK_NE(&from, this);
  const VariantCall* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const VariantCall>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.genomics.v1.VariantCall)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.genomics.v1.VariantCall)
    MergeFrom(*source);
  }
}

void VariantCall::MergeFrom(const VariantCall& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.genomics.v1.VariantCall)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  info_.MergeFrom(from.info_);
  genotype_likelihood_.MergeFrom(from.genotype_likelihood_);
  genotype_.MergeFrom(from.genotype_);
  if (from.phaseset().size() > 0) {
    set_phaseset(from.phaseset());
  }
  if (from.call_set_id().size() > 0) {
    set_call_set_id(from.call_set_id());
  }
  if (from.call_set_name().size() > 0) {
    set_call_set_name(from.call_set_name());
  }
}

void VariantCall::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.genomics.v1.VariantCall)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VariantCall::CopyFrom(const VariantCall& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.genomics.v1.VariantCall)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VariantCall::IsInitialized() const {
  return true;
}

void VariantCall::Swap(VariantCall* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    VariantCall* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void VariantCall::UnsafeArenaSwap(VariantCall* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void VariantCall::InternalSwap(VariantCall* other) {
  using std::swap;
  info_.Swap(&other->info_);
  genotype_likelihood_.InternalSwap(&other->genotype_likelihood_);
  genotype_.InternalSwap(&other->genotype_);
  phaseset_.Swap(&other->phaseset_);
  call_set_id_.Swap(&other->call_set_id_);
  call_set_name_.Swap(&other->call_set_name_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata VariantCall::GetMetadata() const {
  protobuf_google_2fgenomics_2fv1_2fvariants_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fgenomics_2fv1_2fvariants_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

CallSet_InfoEntry_DoNotUse::CallSet_InfoEntry_DoNotUse() {}
CallSet_InfoEntry_DoNotUse::CallSet_InfoEntry_DoNotUse(::google::protobuf::Arena* arena) : SuperType(arena) {}
void CallSet_InfoEntry_DoNotUse::MergeFrom(const CallSet_InfoEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::google::protobuf::Metadata CallSet_InfoEntry_DoNotUse::GetMetadata() const {
  ::protobuf_google_2fgenomics_2fv1_2fvariants_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fgenomics_2fv1_2fvariants_2eproto::file_level_metadata[7];
}
void CallSet_InfoEntry_DoNotUse::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}


// ===================================================================

void CallSet::InitAsDefaultInstance() {
}
void CallSet::clear_info() {
  info_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CallSet::kIdFieldNumber;
const int CallSet::kNameFieldNumber;
const int CallSet::kSampleIdFieldNumber;
const int CallSet::kVariantSetIdsFieldNumber;
const int CallSet::kCreatedFieldNumber;
const int CallSet::kInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CallSet::CallSet()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_google_2fgenomics_2fv1_2fvariants_2eproto::InitDefaultsCallSet();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.genomics.v1.CallSet)
}
CallSet::CallSet(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  info_(arena),
  variant_set_ids_(arena) {
  ::protobuf_google_2fgenomics_2fv1_2fvariants_2eproto::InitDefaultsCallSet();
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.genomics.v1.CallSet)
}
CallSet::CallSet(const CallSet& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      variant_set_ids_(from.variant_set_ids_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  info_.MergeFrom(from.info_);
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.id().size() > 0) {
    id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id(),
      GetArenaNoVirtual());
  }
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name(),
      GetArenaNoVirtual());
  }
  sample_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.sample_id().size() > 0) {
    sample_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sample_id(),
      GetArenaNoVirtual());
  }
  created_ = from.created_;
  // @@protoc_insertion_point(copy_constructor:google.genomics.v1.CallSet)
}

void CallSet::SharedCtor() {
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sample_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  created_ = GOOGLE_LONGLONG(0);
  _cached_size_ = 0;
}

CallSet::~CallSet() {
  // @@protoc_insertion_point(destructor:google.genomics.v1.CallSet)
  SharedDtor();
}

void CallSet::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sample_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CallSet::ArenaDtor(void* object) {
  CallSet* _this = reinterpret_cast< CallSet* >(object);
  (void)_this;
}
void CallSet::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void CallSet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CallSet::descriptor() {
  ::protobuf_google_2fgenomics_2fv1_2fvariants_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fgenomics_2fv1_2fvariants_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CallSet& CallSet::default_instance() {
  ::protobuf_google_2fgenomics_2fv1_2fvariants_2eproto::InitDefaultsCallSet();
  return *internal_default_instance();
}

CallSet* CallSet::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<CallSet>(arena);
}

void CallSet::Clear() {
// @@protoc_insertion_point(message_clear_start:google.genomics.v1.CallSet)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  info_.Clear();
  variant_set_ids_.Clear();
  id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  sample_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  created_ = GOOGLE_LONGLONG(0);
  _internal_metadata_.Clear();
}

bool CallSet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.genomics.v1.CallSet)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->id().data(), static_cast<int>(this->id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.genomics.v1.CallSet.id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.genomics.v1.CallSet.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, .google.protobuf.ListValue> info = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          CallSet_InfoEntry_DoNotUse::Parser< ::google::protobuf::internal::MapField<
              CallSet_InfoEntry_DoNotUse,
              ::std::string, ::google::protobuf::ListValue,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
              0 >,
            ::google::protobuf::Map< ::std::string, ::google::protobuf::ListValue > > parser(&info_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.genomics.v1.CallSet.InfoEntry.key"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 created = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &created_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string variant_set_ids = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_variant_set_ids()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->variant_set_ids(this->variant_set_ids_size() - 1).data(),
            static_cast<int>(this->variant_set_ids(this->variant_set_ids_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.genomics.v1.CallSet.variant_set_ids"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string sample_id = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sample_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->sample_id().data(), static_cast<int>(this->sample_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.genomics.v1.CallSet.sample_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.genomics.v1.CallSet)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.genomics.v1.CallSet)
  return false;
#undef DO_
}

void CallSet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.genomics.v1.CallSet)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), static_cast<int>(this->id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.CallSet.id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.CallSet.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // map<string, .google.protobuf.ListValue> info = 4;
  if (!this->info().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::google::protobuf::ListValue >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "google.genomics.v1.CallSet.InfoEntry.key");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->info().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->info().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::google::protobuf::ListValue >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::google::protobuf::ListValue >::const_iterator
          it = this->info().begin();
          it != this->info().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<CallSet_InfoEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(info_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            4, *entry, output);
        if (entry->GetArena() != NULL) {
          entry.release();
        }
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::google::protobuf::scoped_ptr<CallSet_InfoEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::google::protobuf::ListValue >::const_iterator
          it = this->info().begin();
          it != this->info().end(); ++it) {
        entry.reset(info_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            4, *entry, output);
        if (entry->GetArena() != NULL) {
          entry.release();
        }
        Utf8Check::Check(&*it);
      }
    }
  }

  // int64 created = 5;
  if (this->created() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->created(), output);
  }

  // repeated string variant_set_ids = 6;
  for (int i = 0, n = this->variant_set_ids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->variant_set_ids(i).data(), static_cast<int>(this->variant_set_ids(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.CallSet.variant_set_ids");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->variant_set_ids(i), output);
  }

  // string sample_id = 7;
  if (this->sample_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sample_id().data(), static_cast<int>(this->sample_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.CallSet.sample_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->sample_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:google.genomics.v1.CallSet)
}

::google::protobuf::uint8* CallSet::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.genomics.v1.CallSet)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), static_cast<int>(this->id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.CallSet.id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.CallSet.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // map<string, .google.protobuf.ListValue> info = 4;
  if (!this->info().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::google::protobuf::ListValue >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "google.genomics.v1.CallSet.InfoEntry.key");
      }
    };

    if (deterministic &&
        this->info().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->info().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::google::protobuf::ListValue >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::google::protobuf::ListValue >::const_iterator
          it = this->info().begin();
          it != this->info().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<CallSet_InfoEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(info_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       4, *entry, deterministic, target);
;
        if (entry->GetArena() != NULL) {
          entry.release();
        }
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::google::protobuf::scoped_ptr<CallSet_InfoEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::google::protobuf::ListValue >::const_iterator
          it = this->info().begin();
          it != this->info().end(); ++it) {
        entry.reset(info_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       4, *entry, deterministic, target);
;
        if (entry->GetArena() != NULL) {
          entry.release();
        }
        Utf8Check::Check(&*it);
      }
    }
  }

  // int64 created = 5;
  if (this->created() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->created(), target);
  }

  // repeated string variant_set_ids = 6;
  for (int i = 0, n = this->variant_set_ids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->variant_set_ids(i).data(), static_cast<int>(this->variant_set_ids(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.CallSet.variant_set_ids");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(6, this->variant_set_ids(i), target);
  }

  // string sample_id = 7;
  if (this->sample_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sample_id().data(), static_cast<int>(this->sample_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.CallSet.sample_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->sample_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.genomics.v1.CallSet)
  return target;
}

size_t CallSet::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.genomics.v1.CallSet)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // map<string, .google.protobuf.ListValue> info = 4;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->info_size());
  {
    ::google::protobuf::scoped_ptr<CallSet_InfoEntry_DoNotUse> entry;
    for (::google::protobuf::Map< ::std::string, ::google::protobuf::ListValue >::const_iterator
        it = this->info().begin();
        it != this->info().end(); ++it) {
      if (entry.get() != NULL && entry->GetArena() != NULL) {
        entry.release();
      }
      entry.reset(info_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
    if (entry.get() != NULL && entry->GetArena() != NULL) {
      entry.release();
    }
  }

  // repeated string variant_set_ids = 6;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->variant_set_ids_size());
  for (int i = 0, n = this->variant_set_ids_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->variant_set_ids(i));
  }

  // string id = 1;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->id());
  }

  // string name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // string sample_id = 7;
  if (this->sample_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->sample_id());
  }

  // int64 created = 5;
  if (this->created() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->created());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CallSet::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.genomics.v1.CallSet)
  GOOGLE_DCHECK_NE(&from, this);
  const CallSet* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CallSet>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.genomics.v1.CallSet)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.genomics.v1.CallSet)
    MergeFrom(*source);
  }
}

void CallSet::MergeFrom(const CallSet& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.genomics.v1.CallSet)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  info_.MergeFrom(from.info_);
  variant_set_ids_.MergeFrom(from.variant_set_ids_);
  if (from.id().size() > 0) {
    set_id(from.id());
  }
  if (from.name().size() > 0) {
    set_name(from.name());
  }
  if (from.sample_id().size() > 0) {
    set_sample_id(from.sample_id());
  }
  if (from.created() != 0) {
    set_created(from.created());
  }
}

void CallSet::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.genomics.v1.CallSet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CallSet::CopyFrom(const CallSet& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.genomics.v1.CallSet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CallSet::IsInitialized() const {
  return true;
}

void CallSet::Swap(CallSet* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    CallSet* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void CallSet::UnsafeArenaSwap(CallSet* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void CallSet::InternalSwap(CallSet* other) {
  using std::swap;
  info_.Swap(&other->info_);
  variant_set_ids_.InternalSwap(&other->variant_set_ids_);
  id_.Swap(&other->id_);
  name_.Swap(&other->name_);
  sample_id_.Swap(&other->sample_id_);
  swap(created_, other->created_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CallSet::GetMetadata() const {
  protobuf_google_2fgenomics_2fv1_2fvariants_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fgenomics_2fv1_2fvariants_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ReferenceBound::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReferenceBound::kReferenceNameFieldNumber;
const int ReferenceBound::kUpperBoundFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReferenceBound::ReferenceBound()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_google_2fgenomics_2fv1_2fvariants_2eproto::InitDefaultsReferenceBound();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.genomics.v1.ReferenceBound)
}
ReferenceBound::ReferenceBound(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::protobuf_google_2fgenomics_2fv1_2fvariants_2eproto::InitDefaultsReferenceBound();
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.genomics.v1.ReferenceBound)
}
ReferenceBound::ReferenceBound(const ReferenceBound& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  reference_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.reference_name().size() > 0) {
    reference_name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.reference_name(),
      GetArenaNoVirtual());
  }
  upper_bound_ = from.upper_bound_;
  // @@protoc_insertion_point(copy_constructor:google.genomics.v1.ReferenceBound)
}

void ReferenceBound::SharedCtor() {
  reference_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  upper_bound_ = GOOGLE_LONGLONG(0);
  _cached_size_ = 0;
}

ReferenceBound::~ReferenceBound() {
  // @@protoc_insertion_point(destructor:google.genomics.v1.ReferenceBound)
  SharedDtor();
}

void ReferenceBound::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  reference_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ReferenceBound::ArenaDtor(void* object) {
  ReferenceBound* _this = reinterpret_cast< ReferenceBound* >(object);
  (void)_this;
}
void ReferenceBound::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void ReferenceBound::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReferenceBound::descriptor() {
  ::protobuf_google_2fgenomics_2fv1_2fvariants_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fgenomics_2fv1_2fvariants_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ReferenceBound& ReferenceBound::default_instance() {
  ::protobuf_google_2fgenomics_2fv1_2fvariants_2eproto::InitDefaultsReferenceBound();
  return *internal_default_instance();
}

ReferenceBound* ReferenceBound::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<ReferenceBound>(arena);
}

void ReferenceBound::Clear() {
// @@protoc_insertion_point(message_clear_start:google.genomics.v1.ReferenceBound)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  reference_name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  upper_bound_ = GOOGLE_LONGLONG(0);
  _internal_metadata_.Clear();
}

bool ReferenceBound::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.genomics.v1.ReferenceBound)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string reference_name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_reference_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->reference_name().data(), static_cast<int>(this->reference_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.genomics.v1.ReferenceBound.reference_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 upper_bound = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &upper_bound_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.genomics.v1.ReferenceBound)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.genomics.v1.ReferenceBound)
  return false;
#undef DO_
}

void ReferenceBound::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.genomics.v1.ReferenceBound)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string reference_name = 1;
  if (this->reference_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->reference_name().data(), static_cast<int>(this->reference_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.ReferenceBound.reference_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->reference_name(), output);
  }

  // int64 upper_bound = 2;
  if (this->upper_bound() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->upper_bound(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:google.genomics.v1.ReferenceBound)
}

::google::protobuf::uint8* ReferenceBound::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.genomics.v1.ReferenceBound)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string reference_name = 1;
  if (this->reference_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->reference_name().data(), static_cast<int>(this->reference_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.ReferenceBound.reference_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->reference_name(), target);
  }

  // int64 upper_bound = 2;
  if (this->upper_bound() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->upper_bound(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.genomics.v1.ReferenceBound)
  return target;
}

size_t ReferenceBound::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.genomics.v1.ReferenceBound)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string reference_name = 1;
  if (this->reference_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->reference_name());
  }

  // int64 upper_bound = 2;
  if (this->upper_bound() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->upper_bound());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReferenceBound::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.genomics.v1.ReferenceBound)
  GOOGLE_DCHECK_NE(&from, this);
  const ReferenceBound* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ReferenceBound>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.genomics.v1.ReferenceBound)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.genomics.v1.ReferenceBound)
    MergeFrom(*source);
  }
}

void ReferenceBound::MergeFrom(const ReferenceBound& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.genomics.v1.ReferenceBound)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.reference_name().size() > 0) {
    set_reference_name(from.reference_name());
  }
  if (from.upper_bound() != 0) {
    set_upper_bound(from.upper_bound());
  }
}

void ReferenceBound::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.genomics.v1.ReferenceBound)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReferenceBound::CopyFrom(const ReferenceBound& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.genomics.v1.ReferenceBound)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReferenceBound::IsInitialized() const {
  return true;
}

void ReferenceBound::Swap(ReferenceBound* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    ReferenceBound* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void ReferenceBound::UnsafeArenaSwap(ReferenceBound* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void ReferenceBound::InternalSwap(ReferenceBound* other) {
  using std::swap;
  reference_name_.Swap(&other->reference_name_);
  swap(upper_bound_, other->upper_bound_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ReferenceBound::GetMetadata() const {
  protobuf_google_2fgenomics_2fv1_2fvariants_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fgenomics_2fv1_2fvariants_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

ImportVariantsRequest_InfoMergeConfigEntry_DoNotUse::ImportVariantsRequest_InfoMergeConfigEntry_DoNotUse() {}
ImportVariantsRequest_InfoMergeConfigEntry_DoNotUse::ImportVariantsRequest_InfoMergeConfigEntry_DoNotUse(::google::protobuf::Arena* arena) : SuperType(arena) {}
void ImportVariantsRequest_InfoMergeConfigEntry_DoNotUse::MergeFrom(const ImportVariantsRequest_InfoMergeConfigEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::google::protobuf::Metadata ImportVariantsRequest_InfoMergeConfigEntry_DoNotUse::GetMetadata() const {
  ::protobuf_google_2fgenomics_2fv1_2fvariants_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fgenomics_2fv1_2fvariants_2eproto::file_level_metadata[10];
}
void ImportVariantsRequest_InfoMergeConfigEntry_DoNotUse::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}


// ===================================================================

void ImportVariantsRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ImportVariantsRequest::kVariantSetIdFieldNumber;
const int ImportVariantsRequest::kSourceUrisFieldNumber;
const int ImportVariantsRequest::kFormatFieldNumber;
const int ImportVariantsRequest::kNormalizeReferenceNamesFieldNumber;
const int ImportVariantsRequest::kInfoMergeConfigFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ImportVariantsRequest::ImportVariantsRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_google_2fgenomics_2fv1_2fvariants_2eproto::InitDefaultsImportVariantsRequest();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.genomics.v1.ImportVariantsRequest)
}
ImportVariantsRequest::ImportVariantsRequest(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  source_uris_(arena),
  info_merge_config_(arena) {
  ::protobuf_google_2fgenomics_2fv1_2fvariants_2eproto::InitDefaultsImportVariantsRequest();
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.genomics.v1.ImportVariantsRequest)
}
ImportVariantsRequest::ImportVariantsRequest(const ImportVariantsRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      source_uris_(from.source_uris_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  info_merge_config_.MergeFrom(from.info_merge_config_);
  variant_set_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.variant_set_id().size() > 0) {
    variant_set_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.variant_set_id(),
      GetArenaNoVirtual());
  }
  ::memcpy(&format_, &from.format_,
    static_cast<size_t>(reinterpret_cast<char*>(&normalize_reference_names_) -
    reinterpret_cast<char*>(&format_)) + sizeof(normalize_reference_names_));
  // @@protoc_insertion_point(copy_constructor:google.genomics.v1.ImportVariantsRequest)
}

void ImportVariantsRequest::SharedCtor() {
  variant_set_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&format_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&normalize_reference_names_) -
      reinterpret_cast<char*>(&format_)) + sizeof(normalize_reference_names_));
  _cached_size_ = 0;
}

ImportVariantsRequest::~ImportVariantsRequest() {
  // @@protoc_insertion_point(destructor:google.genomics.v1.ImportVariantsRequest)
  SharedDtor();
}

void ImportVariantsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  variant_set_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ImportVariantsRequest::ArenaDtor(void* object) {
  ImportVariantsRequest* _this = reinterpret_cast< ImportVariantsRequest* >(object);
  (void)_this;
}
void ImportVariantsRequest::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void ImportVariantsRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ImportVariantsRequest::descriptor() {
  ::protobuf_google_2fgenomics_2fv1_2fvariants_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fgenomics_2fv1_2fvariants_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ImportVariantsRequest& ImportVariantsRequest::default_instance() {
  ::protobuf_google_2fgenomics_2fv1_2fvariants_2eproto::InitDefaultsImportVariantsRequest();
  return *internal_default_instance();
}

ImportVariantsRequest* ImportVariantsRequest::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<ImportVariantsRequest>(arena);
}

void ImportVariantsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.genomics.v1.ImportVariantsRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  source_uris_.Clear();
  info_merge_config_.Clear();
  variant_set_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  ::memset(&format_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&normalize_reference_names_) -
      reinterpret_cast<char*>(&format_)) + sizeof(normalize_reference_names_));
  _internal_metadata_.Clear();
}

bool ImportVariantsRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.genomics.v1.ImportVariantsRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string variant_set_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_variant_set_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->variant_set_id().data(), static_cast<int>(this->variant_set_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.genomics.v1.ImportVariantsRequest.variant_set_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string source_uris = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_source_uris()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->source_uris(this->source_uris_size() - 1).data(),
            static_cast<int>(this->source_uris(this->source_uris_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.genomics.v1.ImportVariantsRequest.source_uris"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.genomics.v1.ImportVariantsRequest.Format format = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_format(static_cast< ::google::genomics::v1::ImportVariantsRequest_Format >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool normalize_reference_names = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &normalize_reference_names_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, .google.genomics.v1.InfoMergeOperation> info_merge_config = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          ImportVariantsRequest_InfoMergeConfigEntry_DoNotUse::Parser< ::google::protobuf::internal::MapField<
              ImportVariantsRequest_InfoMergeConfigEntry_DoNotUse,
              ::std::string, ::google::genomics::v1::InfoMergeOperation,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_ENUM,
              0 >,
            ::google::protobuf::Map< ::std::string, ::google::genomics::v1::InfoMergeOperation > > parser(&info_merge_config_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.genomics.v1.ImportVariantsRequest.InfoMergeConfigEntry.key"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.genomics.v1.ImportVariantsRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.genomics.v1.ImportVariantsRequest)
  return false;
#undef DO_
}

void ImportVariantsRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.genomics.v1.ImportVariantsRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string variant_set_id = 1;
  if (this->variant_set_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->variant_set_id().data(), static_cast<int>(this->variant_set_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.ImportVariantsRequest.variant_set_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->variant_set_id(), output);
  }

  // repeated string source_uris = 2;
  for (int i = 0, n = this->source_uris_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->source_uris(i).data(), static_cast<int>(this->source_uris(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.ImportVariantsRequest.source_uris");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->source_uris(i), output);
  }

  // .google.genomics.v1.ImportVariantsRequest.Format format = 3;
  if (this->format() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->format(), output);
  }

  // bool normalize_reference_names = 5;
  if (this->normalize_reference_names() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->normalize_reference_names(), output);
  }

  // map<string, .google.genomics.v1.InfoMergeOperation> info_merge_config = 6;
  if (!this->info_merge_config().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::google::genomics::v1::InfoMergeOperation >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "google.genomics.v1.ImportVariantsRequest.InfoMergeConfigEntry.key");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->info_merge_config().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->info_merge_config().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::google::genomics::v1::InfoMergeOperation >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::google::genomics::v1::InfoMergeOperation >::const_iterator
          it = this->info_merge_config().begin();
          it != this->info_merge_config().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<ImportVariantsRequest_InfoMergeConfigEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(info_merge_config_.NewEnumEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            6, *entry, output);
        if (entry->GetArena() != NULL) {
          entry.release();
        }
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::google::protobuf::scoped_ptr<ImportVariantsRequest_InfoMergeConfigEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::google::genomics::v1::InfoMergeOperation >::const_iterator
          it = this->info_merge_config().begin();
          it != this->info_merge_config().end(); ++it) {
        entry.reset(info_merge_config_.NewEnumEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            6, *entry, output);
        if (entry->GetArena() != NULL) {
          entry.release();
        }
        Utf8Check::Check(&*it);
      }
    }
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:google.genomics.v1.ImportVariantsRequest)
}

::google::protobuf::uint8* ImportVariantsRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.genomics.v1.ImportVariantsRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string variant_set_id = 1;
  if (this->variant_set_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->variant_set_id().data(), static_cast<int>(this->variant_set_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.ImportVariantsRequest.variant_set_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->variant_set_id(), target);
  }

  // repeated string source_uris = 2;
  for (int i = 0, n = this->source_uris_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->source_uris(i).data(), static_cast<int>(this->source_uris(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.ImportVariantsRequest.source_uris");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->source_uris(i), target);
  }

  // .google.genomics.v1.ImportVariantsRequest.Format format = 3;
  if (this->format() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->format(), target);
  }

  // bool normalize_reference_names = 5;
  if (this->normalize_reference_names() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->normalize_reference_names(), target);
  }

  // map<string, .google.genomics.v1.InfoMergeOperation> info_merge_config = 6;
  if (!this->info_merge_config().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::google::genomics::v1::InfoMergeOperation >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "google.genomics.v1.ImportVariantsRequest.InfoMergeConfigEntry.key");
      }
    };

    if (deterministic &&
        this->info_merge_config().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->info_merge_config().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::google::genomics::v1::InfoMergeOperation >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::google::genomics::v1::InfoMergeOperation >::const_iterator
          it = this->info_merge_config().begin();
          it != this->info_merge_config().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<ImportVariantsRequest_InfoMergeConfigEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(info_merge_config_.NewEnumEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       6, *entry, deterministic, target);
;
        if (entry->GetArena() != NULL) {
          entry.release();
        }
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::google::protobuf::scoped_ptr<ImportVariantsRequest_InfoMergeConfigEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::google::genomics::v1::InfoMergeOperation >::const_iterator
          it = this->info_merge_config().begin();
          it != this->info_merge_config().end(); ++it) {
        entry.reset(info_merge_config_.NewEnumEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       6, *entry, deterministic, target);
;
        if (entry->GetArena() != NULL) {
          entry.release();
        }
        Utf8Check::Check(&*it);
      }
    }
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.genomics.v1.ImportVariantsRequest)
  return target;
}

size_t ImportVariantsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.genomics.v1.ImportVariantsRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated string source_uris = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->source_uris_size());
  for (int i = 0, n = this->source_uris_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->source_uris(i));
  }

  // map<string, .google.genomics.v1.InfoMergeOperation> info_merge_config = 6;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->info_merge_config_size());
  {
    ::google::protobuf::scoped_ptr<ImportVariantsRequest_InfoMergeConfigEntry_DoNotUse> entry;
    for (::google::protobuf::Map< ::std::string, ::google::genomics::v1::InfoMergeOperation >::const_iterator
        it = this->info_merge_config().begin();
        it != this->info_merge_config().end(); ++it) {
      if (entry.get() != NULL && entry->GetArena() != NULL) {
        entry.release();
      }
      entry.reset(info_merge_config_.NewEnumEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
    if (entry.get() != NULL && entry->GetArena() != NULL) {
      entry.release();
    }
  }

  // string variant_set_id = 1;
  if (this->variant_set_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->variant_set_id());
  }

  // .google.genomics.v1.ImportVariantsRequest.Format format = 3;
  if (this->format() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->format());
  }

  // bool normalize_reference_names = 5;
  if (this->normalize_reference_names() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ImportVariantsRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.genomics.v1.ImportVariantsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ImportVariantsRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ImportVariantsRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.genomics.v1.ImportVariantsRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.genomics.v1.ImportVariantsRequest)
    MergeFrom(*source);
  }
}

void ImportVariantsRequest::MergeFrom(const ImportVariantsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.genomics.v1.ImportVariantsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  source_uris_.MergeFrom(from.source_uris_);
  info_merge_config_.MergeFrom(from.info_merge_config_);
  if (from.variant_set_id().size() > 0) {
    set_variant_set_id(from.variant_set_id());
  }
  if (from.format() != 0) {
    set_format(from.format());
  }
  if (from.normalize_reference_names() != 0) {
    set_normalize_reference_names(from.normalize_reference_names());
  }
}

void ImportVariantsRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.genomics.v1.ImportVariantsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ImportVariantsRequest::CopyFrom(const ImportVariantsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.genomics.v1.ImportVariantsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ImportVariantsRequest::IsInitialized() const {
  return true;
}

void ImportVariantsRequest::Swap(ImportVariantsRequest* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    ImportVariantsRequest* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void ImportVariantsRequest::UnsafeArenaSwap(ImportVariantsRequest* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void ImportVariantsRequest::InternalSwap(ImportVariantsRequest* other) {
  using std::swap;
  source_uris_.InternalSwap(&other->source_uris_);
  info_merge_config_.Swap(&other->info_merge_config_);
  variant_set_id_.Swap(&other->variant_set_id_);
  swap(format_, other->format_);
  swap(normalize_reference_names_, other->normalize_reference_names_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ImportVariantsRequest::GetMetadata() const {
  protobuf_google_2fgenomics_2fv1_2fvariants_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fgenomics_2fv1_2fvariants_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ImportVariantsResponse::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ImportVariantsResponse::kCallSetIdsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ImportVariantsResponse::ImportVariantsResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_google_2fgenomics_2fv1_2fvariants_2eproto::InitDefaultsImportVariantsResponse();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.genomics.v1.ImportVariantsResponse)
}
ImportVariantsResponse::ImportVariantsResponse(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  call_set_ids_(arena) {
  ::protobuf_google_2fgenomics_2fv1_2fvariants_2eproto::InitDefaultsImportVariantsResponse();
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.genomics.v1.ImportVariantsResponse)
}
ImportVariantsResponse::ImportVariantsResponse(const ImportVariantsResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      call_set_ids_(from.call_set_ids_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:google.genomics.v1.ImportVariantsResponse)
}

void ImportVariantsResponse::SharedCtor() {
  _cached_size_ = 0;
}

ImportVariantsResponse::~ImportVariantsResponse() {
  // @@protoc_insertion_point(destructor:google.genomics.v1.ImportVariantsResponse)
  SharedDtor();
}

void ImportVariantsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
}

void ImportVariantsResponse::ArenaDtor(void* object) {
  ImportVariantsResponse* _this = reinterpret_cast< ImportVariantsResponse* >(object);
  (void)_this;
}
void ImportVariantsResponse::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void ImportVariantsResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ImportVariantsResponse::descriptor() {
  ::protobuf_google_2fgenomics_2fv1_2fvariants_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fgenomics_2fv1_2fvariants_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ImportVariantsResponse& ImportVariantsResponse::default_instance() {
  ::protobuf_google_2fgenomics_2fv1_2fvariants_2eproto::InitDefaultsImportVariantsResponse();
  return *internal_default_instance();
}

ImportVariantsResponse* ImportVariantsResponse::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<ImportVariantsResponse>(arena);
}

void ImportVariantsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:google.genomics.v1.ImportVariantsResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  call_set_ids_.Clear();
  _internal_metadata_.Clear();
}

bool ImportVariantsResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.genomics.v1.ImportVariantsResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string call_set_ids = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_call_set_ids()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->call_set_ids(this->call_set_ids_size() - 1).data(),
            static_cast<int>(this->call_set_ids(this->call_set_ids_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.genomics.v1.ImportVariantsResponse.call_set_ids"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.genomics.v1.ImportVariantsResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.genomics.v1.ImportVariantsResponse)
  return false;
#undef DO_
}

void ImportVariantsResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.genomics.v1.ImportVariantsResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string call_set_ids = 1;
  for (int i = 0, n = this->call_set_ids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->call_set_ids(i).data(), static_cast<int>(this->call_set_ids(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.ImportVariantsResponse.call_set_ids");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->call_set_ids(i), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:google.genomics.v1.ImportVariantsResponse)
}

::google::protobuf::uint8* ImportVariantsResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.genomics.v1.ImportVariantsResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string call_set_ids = 1;
  for (int i = 0, n = this->call_set_ids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->call_set_ids(i).data(), static_cast<int>(this->call_set_ids(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.ImportVariantsResponse.call_set_ids");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->call_set_ids(i), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.genomics.v1.ImportVariantsResponse)
  return target;
}

size_t ImportVariantsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.genomics.v1.ImportVariantsResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated string call_set_ids = 1;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->call_set_ids_size());
  for (int i = 0, n = this->call_set_ids_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->call_set_ids(i));
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ImportVariantsResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.genomics.v1.ImportVariantsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ImportVariantsResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ImportVariantsResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.genomics.v1.ImportVariantsResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.genomics.v1.ImportVariantsResponse)
    MergeFrom(*source);
  }
}

void ImportVariantsResponse::MergeFrom(const ImportVariantsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.genomics.v1.ImportVariantsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  call_set_ids_.MergeFrom(from.call_set_ids_);
}

void ImportVariantsResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.genomics.v1.ImportVariantsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ImportVariantsResponse::CopyFrom(const ImportVariantsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.genomics.v1.ImportVariantsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ImportVariantsResponse::IsInitialized() const {
  return true;
}

void ImportVariantsResponse::Swap(ImportVariantsResponse* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    ImportVariantsResponse* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void ImportVariantsResponse::UnsafeArenaSwap(ImportVariantsResponse* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void ImportVariantsResponse::InternalSwap(ImportVariantsResponse* other) {
  using std::swap;
  call_set_ids_.InternalSwap(&other->call_set_ids_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ImportVariantsResponse::GetMetadata() const {
  protobuf_google_2fgenomics_2fv1_2fvariants_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fgenomics_2fv1_2fvariants_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CreateVariantSetRequest::InitAsDefaultInstance() {
  ::google::genomics::v1::_CreateVariantSetRequest_default_instance_._instance.get_mutable()->variant_set_ = const_cast< ::google::genomics::v1::VariantSet*>(
      ::google::genomics::v1::VariantSet::internal_default_instance());
}
void CreateVariantSetRequest::_slow_mutable_variant_set() {
  variant_set_ = ::google::protobuf::Arena::CreateMessage< ::google::genomics::v1::VariantSet >(
      GetArenaNoVirtual());
}
void CreateVariantSetRequest::unsafe_arena_set_allocated_variant_set(
    ::google::genomics::v1::VariantSet* variant_set) {
  if (GetArenaNoVirtual() == NULL) {
    delete variant_set_;
  }
  variant_set_ = variant_set;
  if (variant_set) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.genomics.v1.CreateVariantSetRequest.variant_set)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CreateVariantSetRequest::kVariantSetFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CreateVariantSetRequest::CreateVariantSetRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_google_2fgenomics_2fv1_2fvariants_2eproto::InitDefaultsCreateVariantSetRequest();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.genomics.v1.CreateVariantSetRequest)
}
CreateVariantSetRequest::CreateVariantSetRequest(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::protobuf_google_2fgenomics_2fv1_2fvariants_2eproto::InitDefaultsCreateVariantSetRequest();
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.genomics.v1.CreateVariantSetRequest)
}
CreateVariantSetRequest::CreateVariantSetRequest(const CreateVariantSetRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_variant_set()) {
    variant_set_ = new ::google::genomics::v1::VariantSet(*from.variant_set_);
  } else {
    variant_set_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:google.genomics.v1.CreateVariantSetRequest)
}

void CreateVariantSetRequest::SharedCtor() {
  variant_set_ = NULL;
  _cached_size_ = 0;
}

CreateVariantSetRequest::~CreateVariantSetRequest() {
  // @@protoc_insertion_point(destructor:google.genomics.v1.CreateVariantSetRequest)
  SharedDtor();
}

void CreateVariantSetRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  if (this != internal_default_instance()) delete variant_set_;
}

void CreateVariantSetRequest::ArenaDtor(void* object) {
  CreateVariantSetRequest* _this = reinterpret_cast< CreateVariantSetRequest* >(object);
  (void)_this;
}
void CreateVariantSetRequest::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void CreateVariantSetRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CreateVariantSetRequest::descriptor() {
  ::protobuf_google_2fgenomics_2fv1_2fvariants_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fgenomics_2fv1_2fvariants_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CreateVariantSetRequest& CreateVariantSetRequest::default_instance() {
  ::protobuf_google_2fgenomics_2fv1_2fvariants_2eproto::InitDefaultsCreateVariantSetRequest();
  return *internal_default_instance();
}

CreateVariantSetRequest* CreateVariantSetRequest::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<CreateVariantSetRequest>(arena);
}

void CreateVariantSetRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.genomics.v1.CreateVariantSetRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && variant_set_ != NULL) {
    delete variant_set_;
  }
  variant_set_ = NULL;
  _internal_metadata_.Clear();
}

bool CreateVariantSetRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.genomics.v1.CreateVariantSetRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .google.genomics.v1.VariantSet variant_set = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_variant_set()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.genomics.v1.CreateVariantSetRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.genomics.v1.CreateVariantSetRequest)
  return false;
#undef DO_
}

void CreateVariantSetRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.genomics.v1.CreateVariantSetRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.genomics.v1.VariantSet variant_set = 1;
  if (this->has_variant_set()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->variant_set_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:google.genomics.v1.CreateVariantSetRequest)
}

::google::protobuf::uint8* CreateVariantSetRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.genomics.v1.CreateVariantSetRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.genomics.v1.VariantSet variant_set = 1;
  if (this->has_variant_set()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->variant_set_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.genomics.v1.CreateVariantSetRequest)
  return target;
}

size_t CreateVariantSetRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.genomics.v1.CreateVariantSetRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .google.genomics.v1.VariantSet variant_set = 1;
  if (this->has_variant_set()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->variant_set_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CreateVariantSetRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.genomics.v1.CreateVariantSetRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CreateVariantSetRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CreateVariantSetRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.genomics.v1.CreateVariantSetRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.genomics.v1.CreateVariantSetRequest)
    MergeFrom(*source);
  }
}

void CreateVariantSetRequest::MergeFrom(const CreateVariantSetRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.genomics.v1.CreateVariantSetRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_variant_set()) {
    mutable_variant_set()->::google::genomics::v1::VariantSet::MergeFrom(from.variant_set());
  }
}

void CreateVariantSetRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.genomics.v1.CreateVariantSetRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateVariantSetRequest::CopyFrom(const CreateVariantSetRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.genomics.v1.CreateVariantSetRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateVariantSetRequest::IsInitialized() const {
  return true;
}

void CreateVariantSetRequest::Swap(CreateVariantSetRequest* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    CreateVariantSetRequest* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void CreateVariantSetRequest::UnsafeArenaSwap(CreateVariantSetRequest* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void CreateVariantSetRequest::InternalSwap(CreateVariantSetRequest* other) {
  using std::swap;
  swap(variant_set_, other->variant_set_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CreateVariantSetRequest::GetMetadata() const {
  protobuf_google_2fgenomics_2fv1_2fvariants_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fgenomics_2fv1_2fvariants_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ExportVariantSetRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ExportVariantSetRequest::kVariantSetIdFieldNumber;
const int ExportVariantSetRequest::kCallSetIdsFieldNumber;
const int ExportVariantSetRequest::kProjectIdFieldNumber;
const int ExportVariantSetRequest::kFormatFieldNumber;
const int ExportVariantSetRequest::kBigqueryDatasetFieldNumber;
const int ExportVariantSetRequest::kBigqueryTableFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ExportVariantSetRequest::ExportVariantSetRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_google_2fgenomics_2fv1_2fvariants_2eproto::InitDefaultsExportVariantSetRequest();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.genomics.v1.ExportVariantSetRequest)
}
ExportVariantSetRequest::ExportVariantSetRequest(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  call_set_ids_(arena) {
  ::protobuf_google_2fgenomics_2fv1_2fvariants_2eproto::InitDefaultsExportVariantSetRequest();
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.genomics.v1.ExportVariantSetRequest)
}
ExportVariantSetRequest::ExportVariantSetRequest(const ExportVariantSetRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      call_set_ids_(from.call_set_ids_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  variant_set_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.variant_set_id().size() > 0) {
    variant_set_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.variant_set_id(),
      GetArenaNoVirtual());
  }
  project_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.project_id().size() > 0) {
    project_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.project_id(),
      GetArenaNoVirtual());
  }
  bigquery_dataset_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.bigquery_dataset().size() > 0) {
    bigquery_dataset_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.bigquery_dataset(),
      GetArenaNoVirtual());
  }
  bigquery_table_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.bigquery_table().size() > 0) {
    bigquery_table_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.bigquery_table(),
      GetArenaNoVirtual());
  }
  format_ = from.format_;
  // @@protoc_insertion_point(copy_constructor:google.genomics.v1.ExportVariantSetRequest)
}

void ExportVariantSetRequest::SharedCtor() {
  variant_set_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  project_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bigquery_dataset_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bigquery_table_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  format_ = 0;
  _cached_size_ = 0;
}

ExportVariantSetRequest::~ExportVariantSetRequest() {
  // @@protoc_insertion_point(destructor:google.genomics.v1.ExportVariantSetRequest)
  SharedDtor();
}

void ExportVariantSetRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  variant_set_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  project_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bigquery_dataset_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bigquery_table_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ExportVariantSetRequest::ArenaDtor(void* object) {
  ExportVariantSetRequest* _this = reinterpret_cast< ExportVariantSetRequest* >(object);
  (void)_this;
}
void ExportVariantSetRequest::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void ExportVariantSetRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ExportVariantSetRequest::descriptor() {
  ::protobuf_google_2fgenomics_2fv1_2fvariants_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fgenomics_2fv1_2fvariants_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ExportVariantSetRequest& ExportVariantSetRequest::default_instance() {
  ::protobuf_google_2fgenomics_2fv1_2fvariants_2eproto::InitDefaultsExportVariantSetRequest();
  return *internal_default_instance();
}

ExportVariantSetRequest* ExportVariantSetRequest::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<ExportVariantSetRequest>(arena);
}

void ExportVariantSetRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.genomics.v1.ExportVariantSetRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  call_set_ids_.Clear();
  variant_set_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  project_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  bigquery_dataset_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  bigquery_table_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  format_ = 0;
  _internal_metadata_.Clear();
}

bool ExportVariantSetRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.genomics.v1.ExportVariantSetRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string variant_set_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_variant_set_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->variant_set_id().data(), static_cast<int>(this->variant_set_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.genomics.v1.ExportVariantSetRequest.variant_set_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string call_set_ids = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_call_set_ids()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->call_set_ids(this->call_set_ids_size() - 1).data(),
            static_cast<int>(this->call_set_ids(this->call_set_ids_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.genomics.v1.ExportVariantSetRequest.call_set_ids"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string project_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_project_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->project_id().data(), static_cast<int>(this->project_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.genomics.v1.ExportVariantSetRequest.project_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.genomics.v1.ExportVariantSetRequest.Format format = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_format(static_cast< ::google::genomics::v1::ExportVariantSetRequest_Format >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string bigquery_dataset = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bigquery_dataset()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->bigquery_dataset().data(), static_cast<int>(this->bigquery_dataset().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.genomics.v1.ExportVariantSetRequest.bigquery_dataset"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string bigquery_table = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bigquery_table()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->bigquery_table().data(), static_cast<int>(this->bigquery_table().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.genomics.v1.ExportVariantSetRequest.bigquery_table"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.genomics.v1.ExportVariantSetRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.genomics.v1.ExportVariantSetRequest)
  return false;
#undef DO_
}

void ExportVariantSetRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.genomics.v1.ExportVariantSetRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string variant_set_id = 1;
  if (this->variant_set_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->variant_set_id().data(), static_cast<int>(this->variant_set_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.ExportVariantSetRequest.variant_set_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->variant_set_id(), output);
  }

  // repeated string call_set_ids = 2;
  for (int i = 0, n = this->call_set_ids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->call_set_ids(i).data(), static_cast<int>(this->call_set_ids(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.ExportVariantSetRequest.call_set_ids");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->call_set_ids(i), output);
  }

  // string project_id = 3;
  if (this->project_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->project_id().data(), static_cast<int>(this->project_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.ExportVariantSetRequest.project_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->project_id(), output);
  }

  // .google.genomics.v1.ExportVariantSetRequest.Format format = 4;
  if (this->format() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->format(), output);
  }

  // string bigquery_dataset = 5;
  if (this->bigquery_dataset().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->bigquery_dataset().data(), static_cast<int>(this->bigquery_dataset().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.ExportVariantSetRequest.bigquery_dataset");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->bigquery_dataset(), output);
  }

  // string bigquery_table = 6;
  if (this->bigquery_table().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->bigquery_table().data(), static_cast<int>(this->bigquery_table().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.ExportVariantSetRequest.bigquery_table");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->bigquery_table(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:google.genomics.v1.ExportVariantSetRequest)
}

::google::protobuf::uint8* ExportVariantSetRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.genomics.v1.ExportVariantSetRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string variant_set_id = 1;
  if (this->variant_set_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->variant_set_id().data(), static_cast<int>(this->variant_set_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.ExportVariantSetRequest.variant_set_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->variant_set_id(), target);
  }

  // repeated string call_set_ids = 2;
  for (int i = 0, n = this->call_set_ids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->call_set_ids(i).data(), static_cast<int>(this->call_set_ids(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.ExportVariantSetRequest.call_set_ids");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->call_set_ids(i), target);
  }

  // string project_id = 3;
  if (this->project_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->project_id().data(), static_cast<int>(this->project_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.ExportVariantSetRequest.project_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->project_id(), target);
  }

  // .google.genomics.v1.ExportVariantSetRequest.Format format = 4;
  if (this->format() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->format(), target);
  }

  // string bigquery_dataset = 5;
  if (this->bigquery_dataset().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->bigquery_dataset().data(), static_cast<int>(this->bigquery_dataset().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.ExportVariantSetRequest.bigquery_dataset");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->bigquery_dataset(), target);
  }

  // string bigquery_table = 6;
  if (this->bigquery_table().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->bigquery_table().data(), static_cast<int>(this->bigquery_table().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.ExportVariantSetRequest.bigquery_table");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->bigquery_table(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.genomics.v1.ExportVariantSetRequest)
  return target;
}

size_t ExportVariantSetRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.genomics.v1.ExportVariantSetRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated string call_set_ids = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->call_set_ids_size());
  for (int i = 0, n = this->call_set_ids_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->call_set_ids(i));
  }

  // string variant_set_id = 1;
  if (this->variant_set_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->variant_set_id());
  }

  // string project_id = 3;
  if (this->project_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->project_id());
  }

  // string bigquery_dataset = 5;
  if (this->bigquery_dataset().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->bigquery_dataset());
  }

  // string bigquery_table = 6;
  if (this->bigquery_table().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->bigquery_table());
  }

  // .google.genomics.v1.ExportVariantSetRequest.Format format = 4;
  if (this->format() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->format());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ExportVariantSetRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.genomics.v1.ExportVariantSetRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ExportVariantSetRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ExportVariantSetRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.genomics.v1.ExportVariantSetRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.genomics.v1.ExportVariantSetRequest)
    MergeFrom(*source);
  }
}

void ExportVariantSetRequest::MergeFrom(const ExportVariantSetRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.genomics.v1.ExportVariantSetRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  call_set_ids_.MergeFrom(from.call_set_ids_);
  if (from.variant_set_id().size() > 0) {
    set_variant_set_id(from.variant_set_id());
  }
  if (from.project_id().size() > 0) {
    set_project_id(from.project_id());
  }
  if (from.bigquery_dataset().size() > 0) {
    set_bigquery_dataset(from.bigquery_dataset());
  }
  if (from.bigquery_table().size() > 0) {
    set_bigquery_table(from.bigquery_table());
  }
  if (from.format() != 0) {
    set_format(from.format());
  }
}

void ExportVariantSetRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.genomics.v1.ExportVariantSetRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExportVariantSetRequest::CopyFrom(const ExportVariantSetRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.genomics.v1.ExportVariantSetRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExportVariantSetRequest::IsInitialized() const {
  return true;
}

void ExportVariantSetRequest::Swap(ExportVariantSetRequest* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    ExportVariantSetRequest* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void ExportVariantSetRequest::UnsafeArenaSwap(ExportVariantSetRequest* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void ExportVariantSetRequest::InternalSwap(ExportVariantSetRequest* other) {
  using std::swap;
  call_set_ids_.InternalSwap(&other->call_set_ids_);
  variant_set_id_.Swap(&other->variant_set_id_);
  project_id_.Swap(&other->project_id_);
  bigquery_dataset_.Swap(&other->bigquery_dataset_);
  bigquery_table_.Swap(&other->bigquery_table_);
  swap(format_, other->format_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ExportVariantSetRequest::GetMetadata() const {
  protobuf_google_2fgenomics_2fv1_2fvariants_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fgenomics_2fv1_2fvariants_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void GetVariantSetRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetVariantSetRequest::kVariantSetIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetVariantSetRequest::GetVariantSetRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_google_2fgenomics_2fv1_2fvariants_2eproto::InitDefaultsGetVariantSetRequest();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.genomics.v1.GetVariantSetRequest)
}
GetVariantSetRequest::GetVariantSetRequest(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::protobuf_google_2fgenomics_2fv1_2fvariants_2eproto::InitDefaultsGetVariantSetRequest();
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.genomics.v1.GetVariantSetRequest)
}
GetVariantSetRequest::GetVariantSetRequest(const GetVariantSetRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  variant_set_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.variant_set_id().size() > 0) {
    variant_set_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.variant_set_id(),
      GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(copy_constructor:google.genomics.v1.GetVariantSetRequest)
}

void GetVariantSetRequest::SharedCtor() {
  variant_set_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

GetVariantSetRequest::~GetVariantSetRequest() {
  // @@protoc_insertion_point(destructor:google.genomics.v1.GetVariantSetRequest)
  SharedDtor();
}

void GetVariantSetRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  variant_set_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void GetVariantSetRequest::ArenaDtor(void* object) {
  GetVariantSetRequest* _this = reinterpret_cast< GetVariantSetRequest* >(object);
  (void)_this;
}
void GetVariantSetRequest::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void GetVariantSetRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetVariantSetRequest::descriptor() {
  ::protobuf_google_2fgenomics_2fv1_2fvariants_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fgenomics_2fv1_2fvariants_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GetVariantSetRequest& GetVariantSetRequest::default_instance() {
  ::protobuf_google_2fgenomics_2fv1_2fvariants_2eproto::InitDefaultsGetVariantSetRequest();
  return *internal_default_instance();
}

GetVariantSetRequest* GetVariantSetRequest::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<GetVariantSetRequest>(arena);
}

void GetVariantSetRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.genomics.v1.GetVariantSetRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  variant_set_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  _internal_metadata_.Clear();
}

bool GetVariantSetRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.genomics.v1.GetVariantSetRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string variant_set_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_variant_set_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->variant_set_id().data(), static_cast<int>(this->variant_set_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.genomics.v1.GetVariantSetRequest.variant_set_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.genomics.v1.GetVariantSetRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.genomics.v1.GetVariantSetRequest)
  return false;
#undef DO_
}

void GetVariantSetRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.genomics.v1.GetVariantSetRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string variant_set_id = 1;
  if (this->variant_set_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->variant_set_id().data(), static_cast<int>(this->variant_set_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.GetVariantSetRequest.variant_set_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->variant_set_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:google.genomics.v1.GetVariantSetRequest)
}

::google::protobuf::uint8* GetVariantSetRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.genomics.v1.GetVariantSetRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string variant_set_id = 1;
  if (this->variant_set_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->variant_set_id().data(), static_cast<int>(this->variant_set_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.GetVariantSetRequest.variant_set_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->variant_set_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.genomics.v1.GetVariantSetRequest)
  return target;
}

size_t GetVariantSetRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.genomics.v1.GetVariantSetRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string variant_set_id = 1;
  if (this->variant_set_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->variant_set_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetVariantSetRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.genomics.v1.GetVariantSetRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetVariantSetRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetVariantSetRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.genomics.v1.GetVariantSetRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.genomics.v1.GetVariantSetRequest)
    MergeFrom(*source);
  }
}

void GetVariantSetRequest::MergeFrom(const GetVariantSetRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.genomics.v1.GetVariantSetRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.variant_set_id().size() > 0) {
    set_variant_set_id(from.variant_set_id());
  }
}

void GetVariantSetRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.genomics.v1.GetVariantSetRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetVariantSetRequest::CopyFrom(const GetVariantSetRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.genomics.v1.GetVariantSetRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetVariantSetRequest::IsInitialized() const {
  return true;
}

void GetVariantSetRequest::Swap(GetVariantSetRequest* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    GetVariantSetRequest* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void GetVariantSetRequest::UnsafeArenaSwap(GetVariantSetRequest* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void GetVariantSetRequest::InternalSwap(GetVariantSetRequest* other) {
  using std::swap;
  variant_set_id_.Swap(&other->variant_set_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetVariantSetRequest::GetMetadata() const {
  protobuf_google_2fgenomics_2fv1_2fvariants_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fgenomics_2fv1_2fvariants_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void SearchVariantSetsRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SearchVariantSetsRequest::kDatasetIdsFieldNumber;
const int SearchVariantSetsRequest::kPageTokenFieldNumber;
const int SearchVariantSetsRequest::kPageSizeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SearchVariantSetsRequest::SearchVariantSetsRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_google_2fgenomics_2fv1_2fvariants_2eproto::InitDefaultsSearchVariantSetsRequest();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.genomics.v1.SearchVariantSetsRequest)
}
SearchVariantSetsRequest::SearchVariantSetsRequest(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  dataset_ids_(arena) {
  ::protobuf_google_2fgenomics_2fv1_2fvariants_2eproto::InitDefaultsSearchVariantSetsRequest();
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.genomics.v1.SearchVariantSetsRequest)
}
SearchVariantSetsRequest::SearchVariantSetsRequest(const SearchVariantSetsRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      dataset_ids_(from.dataset_ids_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  page_token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.page_token().size() > 0) {
    page_token_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.page_token(),
      GetArenaNoVirtual());
  }
  page_size_ = from.page_size_;
  // @@protoc_insertion_point(copy_constructor:google.genomics.v1.SearchVariantSetsRequest)
}

void SearchVariantSetsRequest::SharedCtor() {
  page_token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  page_size_ = 0;
  _cached_size_ = 0;
}

SearchVariantSetsRequest::~SearchVariantSetsRequest() {
  // @@protoc_insertion_point(destructor:google.genomics.v1.SearchVariantSetsRequest)
  SharedDtor();
}

void SearchVariantSetsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  page_token_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SearchVariantSetsRequest::ArenaDtor(void* object) {
  SearchVariantSetsRequest* _this = reinterpret_cast< SearchVariantSetsRequest* >(object);
  (void)_this;
}
void SearchVariantSetsRequest::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void SearchVariantSetsRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SearchVariantSetsRequest::descriptor() {
  ::protobuf_google_2fgenomics_2fv1_2fvariants_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fgenomics_2fv1_2fvariants_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SearchVariantSetsRequest& SearchVariantSetsRequest::default_instance() {
  ::protobuf_google_2fgenomics_2fv1_2fvariants_2eproto::InitDefaultsSearchVariantSetsRequest();
  return *internal_default_instance();
}

SearchVariantSetsRequest* SearchVariantSetsRequest::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<SearchVariantSetsRequest>(arena);
}

void SearchVariantSetsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.genomics.v1.SearchVariantSetsRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  dataset_ids_.Clear();
  page_token_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  page_size_ = 0;
  _internal_metadata_.Clear();
}

bool SearchVariantSetsRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.genomics.v1.SearchVariantSetsRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string dataset_ids = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_dataset_ids()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->dataset_ids(this->dataset_ids_size() - 1).data(),
            static_cast<int>(this->dataset_ids(this->dataset_ids_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.genomics.v1.SearchVariantSetsRequest.dataset_ids"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string page_token = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_page_token()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->page_token().data(), static_cast<int>(this->page_token().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.genomics.v1.SearchVariantSetsRequest.page_token"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 page_size = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &page_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.genomics.v1.SearchVariantSetsRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.genomics.v1.SearchVariantSetsRequest)
  return false;
#undef DO_
}

void SearchVariantSetsRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.genomics.v1.SearchVariantSetsRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string dataset_ids = 1;
  for (int i = 0, n = this->dataset_ids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->dataset_ids(i).data(), static_cast<int>(this->dataset_ids(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.SearchVariantSetsRequest.dataset_ids");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->dataset_ids(i), output);
  }

  // string page_token = 2;
  if (this->page_token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->page_token().data(), static_cast<int>(this->page_token().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.SearchVariantSetsRequest.page_token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->page_token(), output);
  }

  // int32 page_size = 3;
  if (this->page_size() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->page_size(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:google.genomics.v1.SearchVariantSetsRequest)
}

::google::protobuf::uint8* SearchVariantSetsRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.genomics.v1.SearchVariantSetsRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string dataset_ids = 1;
  for (int i = 0, n = this->dataset_ids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->dataset_ids(i).data(), static_cast<int>(this->dataset_ids(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.SearchVariantSetsRequest.dataset_ids");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->dataset_ids(i), target);
  }

  // string page_token = 2;
  if (this->page_token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->page_token().data(), static_cast<int>(this->page_token().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.SearchVariantSetsRequest.page_token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->page_token(), target);
  }

  // int32 page_size = 3;
  if (this->page_size() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->page_size(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.genomics.v1.SearchVariantSetsRequest)
  return target;
}

size_t SearchVariantSetsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.genomics.v1.SearchVariantSetsRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated string dataset_ids = 1;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->dataset_ids_size());
  for (int i = 0, n = this->dataset_ids_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->dataset_ids(i));
  }

  // string page_token = 2;
  if (this->page_token().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->page_token());
  }

  // int32 page_size = 3;
  if (this->page_size() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->page_size());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SearchVariantSetsRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.genomics.v1.SearchVariantSetsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SearchVariantSetsRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SearchVariantSetsRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.genomics.v1.SearchVariantSetsRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.genomics.v1.SearchVariantSetsRequest)
    MergeFrom(*source);
  }
}

void SearchVariantSetsRequest::MergeFrom(const SearchVariantSetsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.genomics.v1.SearchVariantSetsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  dataset_ids_.MergeFrom(from.dataset_ids_);
  if (from.page_token().size() > 0) {
    set_page_token(from.page_token());
  }
  if (from.page_size() != 0) {
    set_page_size(from.page_size());
  }
}

void SearchVariantSetsRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.genomics.v1.SearchVariantSetsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SearchVariantSetsRequest::CopyFrom(const SearchVariantSetsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.genomics.v1.SearchVariantSetsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SearchVariantSetsRequest::IsInitialized() const {
  return true;
}

void SearchVariantSetsRequest::Swap(SearchVariantSetsRequest* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    SearchVariantSetsRequest* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void SearchVariantSetsRequest::UnsafeArenaSwap(SearchVariantSetsRequest* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void SearchVariantSetsRequest::InternalSwap(SearchVariantSetsRequest* other) {
  using std::swap;
  dataset_ids_.InternalSwap(&other->dataset_ids_);
  page_token_.Swap(&other->page_token_);
  swap(page_size_, other->page_size_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SearchVariantSetsRequest::GetMetadata() const {
  protobuf_google_2fgenomics_2fv1_2fvariants_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fgenomics_2fv1_2fvariants_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void SearchVariantSetsResponse::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SearchVariantSetsResponse::kVariantSetsFieldNumber;
const int SearchVariantSetsResponse::kNextPageTokenFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SearchVariantSetsResponse::SearchVariantSetsResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_google_2fgenomics_2fv1_2fvariants_2eproto::InitDefaultsSearchVariantSetsResponse();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.genomics.v1.SearchVariantSetsResponse)
}
SearchVariantSetsResponse::SearchVariantSetsResponse(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  variant_sets_(arena) {
  ::protobuf_google_2fgenomics_2fv1_2fvariants_2eproto::InitDefaultsSearchVariantSetsResponse();
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.genomics.v1.SearchVariantSetsResponse)
}
SearchVariantSetsResponse::SearchVariantSetsResponse(const SearchVariantSetsResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      variant_sets_(from.variant_sets_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  next_page_token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.next_page_token().size() > 0) {
    next_page_token_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.next_page_token(),
      GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(copy_constructor:google.genomics.v1.SearchVariantSetsResponse)
}

void SearchVariantSetsResponse::SharedCtor() {
  next_page_token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

SearchVariantSetsResponse::~SearchVariantSetsResponse() {
  // @@protoc_insertion_point(destructor:google.genomics.v1.SearchVariantSetsResponse)
  SharedDtor();
}

void SearchVariantSetsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  next_page_token_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SearchVariantSetsResponse::ArenaDtor(void* object) {
  SearchVariantSetsResponse* _this = reinterpret_cast< SearchVariantSetsResponse* >(object);
  (void)_this;
}
void SearchVariantSetsResponse::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void SearchVariantSetsResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SearchVariantSetsResponse::descriptor() {
  ::protobuf_google_2fgenomics_2fv1_2fvariants_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fgenomics_2fv1_2fvariants_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SearchVariantSetsResponse& SearchVariantSetsResponse::default_instance() {
  ::protobuf_google_2fgenomics_2fv1_2fvariants_2eproto::InitDefaultsSearchVariantSetsResponse();
  return *internal_default_instance();
}

SearchVariantSetsResponse* SearchVariantSetsResponse::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<SearchVariantSetsResponse>(arena);
}

void SearchVariantSetsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:google.genomics.v1.SearchVariantSetsResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  variant_sets_.Clear();
  next_page_token_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  _internal_metadata_.Clear();
}

bool SearchVariantSetsResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.genomics.v1.SearchVariantSetsResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .google.genomics.v1.VariantSet variant_sets = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_variant_sets()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string next_page_token = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_next_page_token()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->next_page_token().data(), static_cast<int>(this->next_page_token().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.genomics.v1.SearchVariantSetsResponse.next_page_token"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.genomics.v1.SearchVariantSetsResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.genomics.v1.SearchVariantSetsResponse)
  return false;
#undef DO_
}

void SearchVariantSetsResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.genomics.v1.SearchVariantSetsResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .google.genomics.v1.VariantSet variant_sets = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->variant_sets_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->variant_sets(static_cast<int>(i)), output);
  }

  // string next_page_token = 2;
  if (this->next_page_token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->next_page_token().data(), static_cast<int>(this->next_page_token().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.SearchVariantSetsResponse.next_page_token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->next_page_token(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:google.genomics.v1.SearchVariantSetsResponse)
}

::google::protobuf::uint8* SearchVariantSetsResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.genomics.v1.SearchVariantSetsResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .google.genomics.v1.VariantSet variant_sets = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->variant_sets_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->variant_sets(static_cast<int>(i)), deterministic, target);
  }

  // string next_page_token = 2;
  if (this->next_page_token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->next_page_token().data(), static_cast<int>(this->next_page_token().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.SearchVariantSetsResponse.next_page_token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->next_page_token(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.genomics.v1.SearchVariantSetsResponse)
  return target;
}

size_t SearchVariantSetsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.genomics.v1.SearchVariantSetsResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .google.genomics.v1.VariantSet variant_sets = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->variant_sets_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->variant_sets(static_cast<int>(i)));
    }
  }

  // string next_page_token = 2;
  if (this->next_page_token().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->next_page_token());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SearchVariantSetsResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.genomics.v1.SearchVariantSetsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const SearchVariantSetsResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SearchVariantSetsResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.genomics.v1.SearchVariantSetsResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.genomics.v1.SearchVariantSetsResponse)
    MergeFrom(*source);
  }
}

void SearchVariantSetsResponse::MergeFrom(const SearchVariantSetsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.genomics.v1.SearchVariantSetsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  variant_sets_.MergeFrom(from.variant_sets_);
  if (from.next_page_token().size() > 0) {
    set_next_page_token(from.next_page_token());
  }
}

void SearchVariantSetsResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.genomics.v1.SearchVariantSetsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SearchVariantSetsResponse::CopyFrom(const SearchVariantSetsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.genomics.v1.SearchVariantSetsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SearchVariantSetsResponse::IsInitialized() const {
  return true;
}

void SearchVariantSetsResponse::Swap(SearchVariantSetsResponse* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    SearchVariantSetsResponse* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void SearchVariantSetsResponse::UnsafeArenaSwap(SearchVariantSetsResponse* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void SearchVariantSetsResponse::InternalSwap(SearchVariantSetsResponse* other) {
  using std::swap;
  variant_sets_.InternalSwap(&other->variant_sets_);
  next_page_token_.Swap(&other->next_page_token_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SearchVariantSetsResponse::GetMetadata() const {
  protobuf_google_2fgenomics_2fv1_2fvariants_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fgenomics_2fv1_2fvariants_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void DeleteVariantSetRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DeleteVariantSetRequest::kVariantSetIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DeleteVariantSetRequest::DeleteVariantSetRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_google_2fgenomics_2fv1_2fvariants_2eproto::InitDefaultsDeleteVariantSetRequest();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.genomics.v1.DeleteVariantSetRequest)
}
DeleteVariantSetRequest::DeleteVariantSetRequest(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::protobuf_google_2fgenomics_2fv1_2fvariants_2eproto::InitDefaultsDeleteVariantSetRequest();
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.genomics.v1.DeleteVariantSetRequest)
}
DeleteVariantSetRequest::DeleteVariantSetRequest(const DeleteVariantSetRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  variant_set_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.variant_set_id().size() > 0) {
    variant_set_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.variant_set_id(),
      GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(copy_constructor:google.genomics.v1.DeleteVariantSetRequest)
}

void DeleteVariantSetRequest::SharedCtor() {
  variant_set_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

DeleteVariantSetRequest::~DeleteVariantSetRequest() {
  // @@protoc_insertion_point(destructor:google.genomics.v1.DeleteVariantSetRequest)
  SharedDtor();
}

void DeleteVariantSetRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  variant_set_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void DeleteVariantSetRequest::ArenaDtor(void* object) {
  DeleteVariantSetRequest* _this = reinterpret_cast< DeleteVariantSetRequest* >(object);
  (void)_this;
}
void DeleteVariantSetRequest::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void DeleteVariantSetRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DeleteVariantSetRequest::descriptor() {
  ::protobuf_google_2fgenomics_2fv1_2fvariants_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fgenomics_2fv1_2fvariants_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DeleteVariantSetRequest& DeleteVariantSetRequest::default_instance() {
  ::protobuf_google_2fgenomics_2fv1_2fvariants_2eproto::InitDefaultsDeleteVariantSetRequest();
  return *internal_default_instance();
}

DeleteVariantSetRequest* DeleteVariantSetRequest::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<DeleteVariantSetRequest>(arena);
}

void DeleteVariantSetRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.genomics.v1.DeleteVariantSetRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  variant_set_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  _internal_metadata_.Clear();
}

bool DeleteVariantSetRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.genomics.v1.DeleteVariantSetRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string variant_set_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_variant_set_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->variant_set_id().data(), static_cast<int>(this->variant_set_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.genomics.v1.DeleteVariantSetRequest.variant_set_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.genomics.v1.DeleteVariantSetRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.genomics.v1.DeleteVariantSetRequest)
  return false;
#undef DO_
}

void DeleteVariantSetRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.genomics.v1.DeleteVariantSetRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string variant_set_id = 1;
  if (this->variant_set_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->variant_set_id().data(), static_cast<int>(this->variant_set_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.DeleteVariantSetRequest.variant_set_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->variant_set_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:google.genomics.v1.DeleteVariantSetRequest)
}

::google::protobuf::uint8* DeleteVariantSetRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.genomics.v1.DeleteVariantSetRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string variant_set_id = 1;
  if (this->variant_set_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->variant_set_id().data(), static_cast<int>(this->variant_set_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.DeleteVariantSetRequest.variant_set_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->variant_set_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.genomics.v1.DeleteVariantSetRequest)
  return target;
}

size_t DeleteVariantSetRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.genomics.v1.DeleteVariantSetRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string variant_set_id = 1;
  if (this->variant_set_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->variant_set_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeleteVariantSetRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.genomics.v1.DeleteVariantSetRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const DeleteVariantSetRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DeleteVariantSetRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.genomics.v1.DeleteVariantSetRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.genomics.v1.DeleteVariantSetRequest)
    MergeFrom(*source);
  }
}

void DeleteVariantSetRequest::MergeFrom(const DeleteVariantSetRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.genomics.v1.DeleteVariantSetRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.variant_set_id().size() > 0) {
    set_variant_set_id(from.variant_set_id());
  }
}

void DeleteVariantSetRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.genomics.v1.DeleteVariantSetRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteVariantSetRequest::CopyFrom(const DeleteVariantSetRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.genomics.v1.DeleteVariantSetRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteVariantSetRequest::IsInitialized() const {
  return true;
}

void DeleteVariantSetRequest::Swap(DeleteVariantSetRequest* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    DeleteVariantSetRequest* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void DeleteVariantSetRequest::UnsafeArenaSwap(DeleteVariantSetRequest* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void DeleteVariantSetRequest::InternalSwap(DeleteVariantSetRequest* other) {
  using std::swap;
  variant_set_id_.Swap(&other->variant_set_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DeleteVariantSetRequest::GetMetadata() const {
  protobuf_google_2fgenomics_2fv1_2fvariants_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fgenomics_2fv1_2fvariants_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void UpdateVariantSetRequest::InitAsDefaultInstance() {
  ::google::genomics::v1::_UpdateVariantSetRequest_default_instance_._instance.get_mutable()->variant_set_ = const_cast< ::google::genomics::v1::VariantSet*>(
      ::google::genomics::v1::VariantSet::internal_default_instance());
  ::google::genomics::v1::_UpdateVariantSetRequest_default_instance_._instance.get_mutable()->update_mask_ = const_cast< ::google::protobuf::FieldMask*>(
      ::google::protobuf::FieldMask::internal_default_instance());
}
void UpdateVariantSetRequest::_slow_mutable_variant_set() {
  variant_set_ = ::google::protobuf::Arena::CreateMessage< ::google::genomics::v1::VariantSet >(
      GetArenaNoVirtual());
}
void UpdateVariantSetRequest::unsafe_arena_set_allocated_variant_set(
    ::google::genomics::v1::VariantSet* variant_set) {
  if (GetArenaNoVirtual() == NULL) {
    delete variant_set_;
  }
  variant_set_ = variant_set;
  if (variant_set) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.genomics.v1.UpdateVariantSetRequest.variant_set)
}
void UpdateVariantSetRequest::_slow_mutable_update_mask() {
  update_mask_ = ::google::protobuf::Arena::Create< ::google::protobuf::FieldMask >(
      GetArenaNoVirtual());
}
void UpdateVariantSetRequest::unsafe_arena_set_allocated_update_mask(
    ::google::protobuf::FieldMask* update_mask) {
  if (GetArenaNoVirtual() == NULL) {
    delete update_mask_;
  }
  update_mask_ = update_mask;
  if (update_mask) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.genomics.v1.UpdateVariantSetRequest.update_mask)
}
void UpdateVariantSetRequest::clear_update_mask() {
  if (GetArenaNoVirtual() == NULL && update_mask_ != NULL) {
    delete update_mask_;
  }
  update_mask_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UpdateVariantSetRequest::kVariantSetIdFieldNumber;
const int UpdateVariantSetRequest::kVariantSetFieldNumber;
const int UpdateVariantSetRequest::kUpdateMaskFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UpdateVariantSetRequest::UpdateVariantSetRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_google_2fgenomics_2fv1_2fvariants_2eproto::InitDefaultsUpdateVariantSetRequest();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.genomics.v1.UpdateVariantSetRequest)
}
UpdateVariantSetRequest::UpdateVariantSetRequest(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::protobuf_google_2fgenomics_2fv1_2fvariants_2eproto::InitDefaultsUpdateVariantSetRequest();
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.genomics.v1.UpdateVariantSetRequest)
}
UpdateVariantSetRequest::UpdateVariantSetRequest(const UpdateVariantSetRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  variant_set_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.variant_set_id().size() > 0) {
    variant_set_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.variant_set_id(),
      GetArenaNoVirtual());
  }
  if (from.has_variant_set()) {
    variant_set_ = new ::google::genomics::v1::VariantSet(*from.variant_set_);
  } else {
    variant_set_ = NULL;
  }
  if (from.has_update_mask()) {
    update_mask_ = new ::google::protobuf::FieldMask(*from.update_mask_);
  } else {
    update_mask_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:google.genomics.v1.UpdateVariantSetRequest)
}

void UpdateVariantSetRequest::SharedCtor() {
  variant_set_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&variant_set_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&update_mask_) -
      reinterpret_cast<char*>(&variant_set_)) + sizeof(update_mask_));
  _cached_size_ = 0;
}

UpdateVariantSetRequest::~UpdateVariantSetRequest() {
  // @@protoc_insertion_point(destructor:google.genomics.v1.UpdateVariantSetRequest)
  SharedDtor();
}

void UpdateVariantSetRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  variant_set_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete variant_set_;
  if (this != internal_default_instance()) delete update_mask_;
}

void UpdateVariantSetRequest::ArenaDtor(void* object) {
  UpdateVariantSetRequest* _this = reinterpret_cast< UpdateVariantSetRequest* >(object);
  (void)_this;
}
void UpdateVariantSetRequest::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void UpdateVariantSetRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UpdateVariantSetRequest::descriptor() {
  ::protobuf_google_2fgenomics_2fv1_2fvariants_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fgenomics_2fv1_2fvariants_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const UpdateVariantSetRequest& UpdateVariantSetRequest::default_instance() {
  ::protobuf_google_2fgenomics_2fv1_2fvariants_2eproto::InitDefaultsUpdateVariantSetRequest();
  return *internal_default_instance();
}

UpdateVariantSetRequest* UpdateVariantSetRequest::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<UpdateVariantSetRequest>(arena);
}

void UpdateVariantSetRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.genomics.v1.UpdateVariantSetRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  variant_set_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  if (GetArenaNoVirtual() == NULL && variant_set_ != NULL) {
    delete variant_set_;
  }
  variant_set_ = NULL;
  if (GetArenaNoVirtual() == NULL && update_mask_ != NULL) {
    delete update_mask_;
  }
  update_mask_ = NULL;
  _internal_metadata_.Clear();
}

bool UpdateVariantSetRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.genomics.v1.UpdateVariantSetRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string variant_set_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_variant_set_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->variant_set_id().data(), static_cast<int>(this->variant_set_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.genomics.v1.UpdateVariantSetRequest.variant_set_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.genomics.v1.VariantSet variant_set = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_variant_set()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.FieldMask update_mask = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_update_mask()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.genomics.v1.UpdateVariantSetRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.genomics.v1.UpdateVariantSetRequest)
  return false;
#undef DO_
}

void UpdateVariantSetRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.genomics.v1.UpdateVariantSetRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string variant_set_id = 1;
  if (this->variant_set_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->variant_set_id().data(), static_cast<int>(this->variant_set_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.UpdateVariantSetRequest.variant_set_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->variant_set_id(), output);
  }

  // .google.genomics.v1.VariantSet variant_set = 2;
  if (this->has_variant_set()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->variant_set_, output);
  }

  // .google.protobuf.FieldMask update_mask = 5;
  if (this->has_update_mask()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->update_mask_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:google.genomics.v1.UpdateVariantSetRequest)
}

::google::protobuf::uint8* UpdateVariantSetRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.genomics.v1.UpdateVariantSetRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string variant_set_id = 1;
  if (this->variant_set_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->variant_set_id().data(), static_cast<int>(this->variant_set_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.UpdateVariantSetRequest.variant_set_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->variant_set_id(), target);
  }

  // .google.genomics.v1.VariantSet variant_set = 2;
  if (this->has_variant_set()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, *this->variant_set_, deterministic, target);
  }

  // .google.protobuf.FieldMask update_mask = 5;
  if (this->has_update_mask()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, *this->update_mask_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.genomics.v1.UpdateVariantSetRequest)
  return target;
}

size_t UpdateVariantSetRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.genomics.v1.UpdateVariantSetRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string variant_set_id = 1;
  if (this->variant_set_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->variant_set_id());
  }

  // .google.genomics.v1.VariantSet variant_set = 2;
  if (this->has_variant_set()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->variant_set_);
  }

  // .google.protobuf.FieldMask update_mask = 5;
  if (this->has_update_mask()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->update_mask_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpdateVariantSetRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.genomics.v1.UpdateVariantSetRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const UpdateVariantSetRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UpdateVariantSetRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.genomics.v1.UpdateVariantSetRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.genomics.v1.UpdateVariantSetRequest)
    MergeFrom(*source);
  }
}

void UpdateVariantSetRequest::MergeFrom(const UpdateVariantSetRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.genomics.v1.UpdateVariantSetRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.variant_set_id().size() > 0) {
    set_variant_set_id(from.variant_set_id());
  }
  if (from.has_variant_set()) {
    mutable_variant_set()->::google::genomics::v1::VariantSet::MergeFrom(from.variant_set());
  }
  if (from.has_update_mask()) {
    mutable_update_mask()->::google::protobuf::FieldMask::MergeFrom(from.update_mask());
  }
}

void UpdateVariantSetRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.genomics.v1.UpdateVariantSetRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateVariantSetRequest::CopyFrom(const UpdateVariantSetRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.genomics.v1.UpdateVariantSetRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateVariantSetRequest::IsInitialized() const {
  return true;
}

void UpdateVariantSetRequest::Swap(UpdateVariantSetRequest* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    UpdateVariantSetRequest* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void UpdateVariantSetRequest::UnsafeArenaSwap(UpdateVariantSetRequest* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void UpdateVariantSetRequest::InternalSwap(UpdateVariantSetRequest* other) {
  using std::swap;
  variant_set_id_.Swap(&other->variant_set_id_);
  swap(variant_set_, other->variant_set_);
  swap(update_mask_, other->update_mask_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UpdateVariantSetRequest::GetMetadata() const {
  protobuf_google_2fgenomics_2fv1_2fvariants_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fgenomics_2fv1_2fvariants_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void SearchVariantsRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SearchVariantsRequest::kVariantSetIdsFieldNumber;
const int SearchVariantsRequest::kVariantNameFieldNumber;
const int SearchVariantsRequest::kCallSetIdsFieldNumber;
const int SearchVariantsRequest::kReferenceNameFieldNumber;
const int SearchVariantsRequest::kStartFieldNumber;
const int SearchVariantsRequest::kEndFieldNumber;
const int SearchVariantsRequest::kPageTokenFieldNumber;
const int SearchVariantsRequest::kPageSizeFieldNumber;
const int SearchVariantsRequest::kMaxCallsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SearchVariantsRequest::SearchVariantsRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_google_2fgenomics_2fv1_2fvariants_2eproto::InitDefaultsSearchVariantsRequest();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.genomics.v1.SearchVariantsRequest)
}
SearchVariantsRequest::SearchVariantsRequest(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  variant_set_ids_(arena),
  call_set_ids_(arena) {
  ::protobuf_google_2fgenomics_2fv1_2fvariants_2eproto::InitDefaultsSearchVariantsRequest();
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.genomics.v1.SearchVariantsRequest)
}
SearchVariantsRequest::SearchVariantsRequest(const SearchVariantsRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      variant_set_ids_(from.variant_set_ids_),
      call_set_ids_(from.call_set_ids_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  variant_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.variant_name().size() > 0) {
    variant_name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.variant_name(),
      GetArenaNoVirtual());
  }
  reference_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.reference_name().size() > 0) {
    reference_name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.reference_name(),
      GetArenaNoVirtual());
  }
  page_token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.page_token().size() > 0) {
    page_token_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.page_token(),
      GetArenaNoVirtual());
  }
  ::memcpy(&start_, &from.start_,
    static_cast<size_t>(reinterpret_cast<char*>(&max_calls_) -
    reinterpret_cast<char*>(&start_)) + sizeof(max_calls_));
  // @@protoc_insertion_point(copy_constructor:google.genomics.v1.SearchVariantsRequest)
}

void SearchVariantsRequest::SharedCtor() {
  variant_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  reference_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  page_token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&start_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&max_calls_) -
      reinterpret_cast<char*>(&start_)) + sizeof(max_calls_));
  _cached_size_ = 0;
}

SearchVariantsRequest::~SearchVariantsRequest() {
  // @@protoc_insertion_point(destructor:google.genomics.v1.SearchVariantsRequest)
  SharedDtor();
}

void SearchVariantsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  variant_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  reference_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  page_token_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SearchVariantsRequest::ArenaDtor(void* object) {
  SearchVariantsRequest* _this = reinterpret_cast< SearchVariantsRequest* >(object);
  (void)_this;
}
void SearchVariantsRequest::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void SearchVariantsRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SearchVariantsRequest::descriptor() {
  ::protobuf_google_2fgenomics_2fv1_2fvariants_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fgenomics_2fv1_2fvariants_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SearchVariantsRequest& SearchVariantsRequest::default_instance() {
  ::protobuf_google_2fgenomics_2fv1_2fvariants_2eproto::InitDefaultsSearchVariantsRequest();
  return *internal_default_instance();
}

SearchVariantsRequest* SearchVariantsRequest::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<SearchVariantsRequest>(arena);
}

void SearchVariantsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.genomics.v1.SearchVariantsRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  variant_set_ids_.Clear();
  call_set_ids_.Clear();
  variant_name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  reference_name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  page_token_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  ::memset(&start_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&max_calls_) -
      reinterpret_cast<char*>(&start_)) + sizeof(max_calls_));
  _internal_metadata_.Clear();
}

bool SearchVariantsRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.genomics.v1.SearchVariantsRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string variant_set_ids = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_variant_set_ids()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->variant_set_ids(this->variant_set_ids_size() - 1).data(),
            static_cast<int>(this->variant_set_ids(this->variant_set_ids_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.genomics.v1.SearchVariantsRequest.variant_set_ids"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string variant_name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_variant_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->variant_name().data(), static_cast<int>(this->variant_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.genomics.v1.SearchVariantsRequest.variant_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string call_set_ids = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_call_set_ids()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->call_set_ids(this->call_set_ids_size() - 1).data(),
            static_cast<int>(this->call_set_ids(this->call_set_ids_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.genomics.v1.SearchVariantsRequest.call_set_ids"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string reference_name = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_reference_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->reference_name().data(), static_cast<int>(this->reference_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.genomics.v1.SearchVariantsRequest.reference_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 start = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &start_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 end = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &end_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string page_token = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_page_token()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->page_token().data(), static_cast<int>(this->page_token().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.genomics.v1.SearchVariantsRequest.page_token"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 page_size = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &page_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 max_calls = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_calls_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.genomics.v1.SearchVariantsRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.genomics.v1.SearchVariantsRequest)
  return false;
#undef DO_
}

void SearchVariantsRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.genomics.v1.SearchVariantsRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string variant_set_ids = 1;
  for (int i = 0, n = this->variant_set_ids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->variant_set_ids(i).data(), static_cast<int>(this->variant_set_ids(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.SearchVariantsRequest.variant_set_ids");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->variant_set_ids(i), output);
  }

  // string variant_name = 2;
  if (this->variant_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->variant_name().data(), static_cast<int>(this->variant_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.SearchVariantsRequest.variant_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->variant_name(), output);
  }

  // repeated string call_set_ids = 3;
  for (int i = 0, n = this->call_set_ids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->call_set_ids(i).data(), static_cast<int>(this->call_set_ids(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.SearchVariantsRequest.call_set_ids");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->call_set_ids(i), output);
  }

  // string reference_name = 4;
  if (this->reference_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->reference_name().data(), static_cast<int>(this->reference_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.SearchVariantsRequest.reference_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->reference_name(), output);
  }

  // int64 start = 5;
  if (this->start() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->start(), output);
  }

  // int64 end = 6;
  if (this->end() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->end(), output);
  }

  // string page_token = 7;
  if (this->page_token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->page_token().data(), static_cast<int>(this->page_token().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.SearchVariantsRequest.page_token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->page_token(), output);
  }

  // int32 page_size = 8;
  if (this->page_size() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->page_size(), output);
  }

  // int32 max_calls = 9;
  if (this->max_calls() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->max_calls(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:google.genomics.v1.SearchVariantsRequest)
}

::google::protobuf::uint8* SearchVariantsRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.genomics.v1.SearchVariantsRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string variant_set_ids = 1;
  for (int i = 0, n = this->variant_set_ids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->variant_set_ids(i).data(), static_cast<int>(this->variant_set_ids(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.SearchVariantsRequest.variant_set_ids");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->variant_set_ids(i), target);
  }

  // string variant_name = 2;
  if (this->variant_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->variant_name().data(), static_cast<int>(this->variant_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.SearchVariantsRequest.variant_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->variant_name(), target);
  }

  // repeated string call_set_ids = 3;
  for (int i = 0, n = this->call_set_ids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->call_set_ids(i).data(), static_cast<int>(this->call_set_ids(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.SearchVariantsRequest.call_set_ids");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->call_set_ids(i), target);
  }

  // string reference_name = 4;
  if (this->reference_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->reference_name().data(), static_cast<int>(this->reference_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.SearchVariantsRequest.reference_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->reference_name(), target);
  }

  // int64 start = 5;
  if (this->start() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->start(), target);
  }

  // int64 end = 6;
  if (this->end() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->end(), target);
  }

  // string page_token = 7;
  if (this->page_token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->page_token().data(), static_cast<int>(this->page_token().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.SearchVariantsRequest.page_token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->page_token(), target);
  }

  // int32 page_size = 8;
  if (this->page_size() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->page_size(), target);
  }

  // int32 max_calls = 9;
  if (this->max_calls() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->max_calls(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.genomics.v1.SearchVariantsRequest)
  return target;
}

size_t SearchVariantsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.genomics.v1.SearchVariantsRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated string variant_set_ids = 1;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->variant_set_ids_size());
  for (int i = 0, n = this->variant_set_ids_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->variant_set_ids(i));
  }

  // repeated string call_set_ids = 3;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->call_set_ids_size());
  for (int i = 0, n = this->call_set_ids_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->call_set_ids(i));
  }

  // string variant_name = 2;
  if (this->variant_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->variant_name());
  }

  // string reference_name = 4;
  if (this->reference_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->reference_name());
  }

  // string page_token = 7;
  if (this->page_token().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->page_token());
  }

  // int64 start = 5;
  if (this->start() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->start());
  }

  // int64 end = 6;
  if (this->end() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->end());
  }

  // int32 page_size = 8;
  if (this->page_size() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->page_size());
  }

  // int32 max_calls = 9;
  if (this->max_calls() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->max_calls());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SearchVariantsRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.genomics.v1.SearchVariantsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SearchVariantsRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SearchVariantsRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.genomics.v1.SearchVariantsRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.genomics.v1.SearchVariantsRequest)
    MergeFrom(*source);
  }
}

void SearchVariantsRequest::MergeFrom(const SearchVariantsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.genomics.v1.SearchVariantsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  variant_set_ids_.MergeFrom(from.variant_set_ids_);
  call_set_ids_.MergeFrom(from.call_set_ids_);
  if (from.variant_name().size() > 0) {
    set_variant_name(from.variant_name());
  }
  if (from.reference_name().size() > 0) {
    set_reference_name(from.reference_name());
  }
  if (from.page_token().size() > 0) {
    set_page_token(from.page_token());
  }
  if (from.start() != 0) {
    set_start(from.start());
  }
  if (from.end() != 0) {
    set_end(from.end());
  }
  if (from.page_size() != 0) {
    set_page_size(from.page_size());
  }
  if (from.max_calls() != 0) {
    set_max_calls(from.max_calls());
  }
}

void SearchVariantsRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.genomics.v1.SearchVariantsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SearchVariantsRequest::CopyFrom(const SearchVariantsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.genomics.v1.SearchVariantsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SearchVariantsRequest::IsInitialized() const {
  return true;
}

void SearchVariantsRequest::Swap(SearchVariantsRequest* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    SearchVariantsRequest* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void SearchVariantsRequest::UnsafeArenaSwap(SearchVariantsRequest* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void SearchVariantsRequest::InternalSwap(SearchVariantsRequest* other) {
  using std::swap;
  variant_set_ids_.InternalSwap(&other->variant_set_ids_);
  call_set_ids_.InternalSwap(&other->call_set_ids_);
  variant_name_.Swap(&other->variant_name_);
  reference_name_.Swap(&other->reference_name_);
  page_token_.Swap(&other->page_token_);
  swap(start_, other->start_);
  swap(end_, other->end_);
  swap(page_size_, other->page_size_);
  swap(max_calls_, other->max_calls_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SearchVariantsRequest::GetMetadata() const {
  protobuf_google_2fgenomics_2fv1_2fvariants_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fgenomics_2fv1_2fvariants_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void SearchVariantsResponse::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SearchVariantsResponse::kVariantsFieldNumber;
const int SearchVariantsResponse::kNextPageTokenFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SearchVariantsResponse::SearchVariantsResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_google_2fgenomics_2fv1_2fvariants_2eproto::InitDefaultsSearchVariantsResponse();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.genomics.v1.SearchVariantsResponse)
}
SearchVariantsResponse::SearchVariantsResponse(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  variants_(arena) {
  ::protobuf_google_2fgenomics_2fv1_2fvariants_2eproto::InitDefaultsSearchVariantsResponse();
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.genomics.v1.SearchVariantsResponse)
}
SearchVariantsResponse::SearchVariantsResponse(const SearchVariantsResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      variants_(from.variants_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  next_page_token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.next_page_token().size() > 0) {
    next_page_token_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.next_page_token(),
      GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(copy_constructor:google.genomics.v1.SearchVariantsResponse)
}

void SearchVariantsResponse::SharedCtor() {
  next_page_token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

SearchVariantsResponse::~SearchVariantsResponse() {
  // @@protoc_insertion_point(destructor:google.genomics.v1.SearchVariantsResponse)
  SharedDtor();
}

void SearchVariantsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  next_page_token_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SearchVariantsResponse::ArenaDtor(void* object) {
  SearchVariantsResponse* _this = reinterpret_cast< SearchVariantsResponse* >(object);
  (void)_this;
}
void SearchVariantsResponse::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void SearchVariantsResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SearchVariantsResponse::descriptor() {
  ::protobuf_google_2fgenomics_2fv1_2fvariants_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fgenomics_2fv1_2fvariants_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SearchVariantsResponse& SearchVariantsResponse::default_instance() {
  ::protobuf_google_2fgenomics_2fv1_2fvariants_2eproto::InitDefaultsSearchVariantsResponse();
  return *internal_default_instance();
}

SearchVariantsResponse* SearchVariantsResponse::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<SearchVariantsResponse>(arena);
}

void SearchVariantsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:google.genomics.v1.SearchVariantsResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  variants_.Clear();
  next_page_token_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  _internal_metadata_.Clear();
}

bool SearchVariantsResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.genomics.v1.SearchVariantsResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .google.genomics.v1.Variant variants = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_variants()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string next_page_token = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_next_page_token()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->next_page_token().data(), static_cast<int>(this->next_page_token().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.genomics.v1.SearchVariantsResponse.next_page_token"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.genomics.v1.SearchVariantsResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.genomics.v1.SearchVariantsResponse)
  return false;
#undef DO_
}

void SearchVariantsResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.genomics.v1.SearchVariantsResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .google.genomics.v1.Variant variants = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->variants_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->variants(static_cast<int>(i)), output);
  }

  // string next_page_token = 2;
  if (this->next_page_token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->next_page_token().data(), static_cast<int>(this->next_page_token().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.SearchVariantsResponse.next_page_token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->next_page_token(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:google.genomics.v1.SearchVariantsResponse)
}

::google::protobuf::uint8* SearchVariantsResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.genomics.v1.SearchVariantsResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .google.genomics.v1.Variant variants = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->variants_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->variants(static_cast<int>(i)), deterministic, target);
  }

  // string next_page_token = 2;
  if (this->next_page_token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->next_page_token().data(), static_cast<int>(this->next_page_token().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.SearchVariantsResponse.next_page_token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->next_page_token(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.genomics.v1.SearchVariantsResponse)
  return target;
}

size_t SearchVariantsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.genomics.v1.SearchVariantsResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .google.genomics.v1.Variant variants = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->variants_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->variants(static_cast<int>(i)));
    }
  }

  // string next_page_token = 2;
  if (this->next_page_token().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->next_page_token());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SearchVariantsResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.genomics.v1.SearchVariantsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const SearchVariantsResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SearchVariantsResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.genomics.v1.SearchVariantsResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.genomics.v1.SearchVariantsResponse)
    MergeFrom(*source);
  }
}

void SearchVariantsResponse::MergeFrom(const SearchVariantsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.genomics.v1.SearchVariantsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  variants_.MergeFrom(from.variants_);
  if (from.next_page_token().size() > 0) {
    set_next_page_token(from.next_page_token());
  }
}

void SearchVariantsResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.genomics.v1.SearchVariantsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SearchVariantsResponse::CopyFrom(const SearchVariantsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.genomics.v1.SearchVariantsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SearchVariantsResponse::IsInitialized() const {
  return true;
}

void SearchVariantsResponse::Swap(SearchVariantsResponse* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    SearchVariantsResponse* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void SearchVariantsResponse::UnsafeArenaSwap(SearchVariantsResponse* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void SearchVariantsResponse::InternalSwap(SearchVariantsResponse* other) {
  using std::swap;
  variants_.InternalSwap(&other->variants_);
  next_page_token_.Swap(&other->next_page_token_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SearchVariantsResponse::GetMetadata() const {
  protobuf_google_2fgenomics_2fv1_2fvariants_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fgenomics_2fv1_2fvariants_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CreateVariantRequest::InitAsDefaultInstance() {
  ::google::genomics::v1::_CreateVariantRequest_default_instance_._instance.get_mutable()->variant_ = const_cast< ::google::genomics::v1::Variant*>(
      ::google::genomics::v1::Variant::internal_default_instance());
}
void CreateVariantRequest::_slow_mutable_variant() {
  variant_ = ::google::protobuf::Arena::CreateMessage< ::google::genomics::v1::Variant >(
      GetArenaNoVirtual());
}
void CreateVariantRequest::unsafe_arena_set_allocated_variant(
    ::google::genomics::v1::Variant* variant) {
  if (GetArenaNoVirtual() == NULL) {
    delete variant_;
  }
  variant_ = variant;
  if (variant) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.genomics.v1.CreateVariantRequest.variant)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CreateVariantRequest::kVariantFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CreateVariantRequest::CreateVariantRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_google_2fgenomics_2fv1_2fvariants_2eproto::InitDefaultsCreateVariantRequest();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.genomics.v1.CreateVariantRequest)
}
CreateVariantRequest::CreateVariantRequest(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::protobuf_google_2fgenomics_2fv1_2fvariants_2eproto::InitDefaultsCreateVariantRequest();
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.genomics.v1.CreateVariantRequest)
}
CreateVariantRequest::CreateVariantRequest(const CreateVariantRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_variant()) {
    variant_ = new ::google::genomics::v1::Variant(*from.variant_);
  } else {
    variant_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:google.genomics.v1.CreateVariantRequest)
}

void CreateVariantRequest::SharedCtor() {
  variant_ = NULL;
  _cached_size_ = 0;
}

CreateVariantRequest::~CreateVariantRequest() {
  // @@protoc_insertion_point(destructor:google.genomics.v1.CreateVariantRequest)
  SharedDtor();
}

void CreateVariantRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  if (this != internal_default_instance()) delete variant_;
}

void CreateVariantRequest::ArenaDtor(void* object) {
  CreateVariantRequest* _this = reinterpret_cast< CreateVariantRequest* >(object);
  (void)_this;
}
void CreateVariantRequest::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void CreateVariantRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CreateVariantRequest::descriptor() {
  ::protobuf_google_2fgenomics_2fv1_2fvariants_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fgenomics_2fv1_2fvariants_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CreateVariantRequest& CreateVariantRequest::default_instance() {
  ::protobuf_google_2fgenomics_2fv1_2fvariants_2eproto::InitDefaultsCreateVariantRequest();
  return *internal_default_instance();
}

CreateVariantRequest* CreateVariantRequest::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<CreateVariantRequest>(arena);
}

void CreateVariantRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.genomics.v1.CreateVariantRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && variant_ != NULL) {
    delete variant_;
  }
  variant_ = NULL;
  _internal_metadata_.Clear();
}

bool CreateVariantRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.genomics.v1.CreateVariantRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .google.genomics.v1.Variant variant = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_variant()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.genomics.v1.CreateVariantRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.genomics.v1.CreateVariantRequest)
  return false;
#undef DO_
}

void CreateVariantRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.genomics.v1.CreateVariantRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.genomics.v1.Variant variant = 1;
  if (this->has_variant()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->variant_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:google.genomics.v1.CreateVariantRequest)
}

::google::protobuf::uint8* CreateVariantRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.genomics.v1.CreateVariantRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.genomics.v1.Variant variant = 1;
  if (this->has_variant()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->variant_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.genomics.v1.CreateVariantRequest)
  return target;
}

size_t CreateVariantRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.genomics.v1.CreateVariantRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .google.genomics.v1.Variant variant = 1;
  if (this->has_variant()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->variant_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CreateVariantRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.genomics.v1.CreateVariantRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CreateVariantRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CreateVariantRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.genomics.v1.CreateVariantRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.genomics.v1.CreateVariantRequest)
    MergeFrom(*source);
  }
}

void CreateVariantRequest::MergeFrom(const CreateVariantRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.genomics.v1.CreateVariantRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_variant()) {
    mutable_variant()->::google::genomics::v1::Variant::MergeFrom(from.variant());
  }
}

void CreateVariantRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.genomics.v1.CreateVariantRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateVariantRequest::CopyFrom(const CreateVariantRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.genomics.v1.CreateVariantRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateVariantRequest::IsInitialized() const {
  return true;
}

void CreateVariantRequest::Swap(CreateVariantRequest* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    CreateVariantRequest* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void CreateVariantRequest::UnsafeArenaSwap(CreateVariantRequest* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void CreateVariantRequest::InternalSwap(CreateVariantRequest* other) {
  using std::swap;
  swap(variant_, other->variant_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CreateVariantRequest::GetMetadata() const {
  protobuf_google_2fgenomics_2fv1_2fvariants_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fgenomics_2fv1_2fvariants_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void UpdateVariantRequest::InitAsDefaultInstance() {
  ::google::genomics::v1::_UpdateVariantRequest_default_instance_._instance.get_mutable()->variant_ = const_cast< ::google::genomics::v1::Variant*>(
      ::google::genomics::v1::Variant::internal_default_instance());
  ::google::genomics::v1::_UpdateVariantRequest_default_instance_._instance.get_mutable()->update_mask_ = const_cast< ::google::protobuf::FieldMask*>(
      ::google::protobuf::FieldMask::internal_default_instance());
}
void UpdateVariantRequest::_slow_mutable_variant() {
  variant_ = ::google::protobuf::Arena::CreateMessage< ::google::genomics::v1::Variant >(
      GetArenaNoVirtual());
}
void UpdateVariantRequest::unsafe_arena_set_allocated_variant(
    ::google::genomics::v1::Variant* variant) {
  if (GetArenaNoVirtual() == NULL) {
    delete variant_;
  }
  variant_ = variant;
  if (variant) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.genomics.v1.UpdateVariantRequest.variant)
}
void UpdateVariantRequest::_slow_mutable_update_mask() {
  update_mask_ = ::google::protobuf::Arena::Create< ::google::protobuf::FieldMask >(
      GetArenaNoVirtual());
}
void UpdateVariantRequest::unsafe_arena_set_allocated_update_mask(
    ::google::protobuf::FieldMask* update_mask) {
  if (GetArenaNoVirtual() == NULL) {
    delete update_mask_;
  }
  update_mask_ = update_mask;
  if (update_mask) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.genomics.v1.UpdateVariantRequest.update_mask)
}
void UpdateVariantRequest::clear_update_mask() {
  if (GetArenaNoVirtual() == NULL && update_mask_ != NULL) {
    delete update_mask_;
  }
  update_mask_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UpdateVariantRequest::kVariantIdFieldNumber;
const int UpdateVariantRequest::kVariantFieldNumber;
const int UpdateVariantRequest::kUpdateMaskFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UpdateVariantRequest::UpdateVariantRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_google_2fgenomics_2fv1_2fvariants_2eproto::InitDefaultsUpdateVariantRequest();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.genomics.v1.UpdateVariantRequest)
}
UpdateVariantRequest::UpdateVariantRequest(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::protobuf_google_2fgenomics_2fv1_2fvariants_2eproto::InitDefaultsUpdateVariantRequest();
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.genomics.v1.UpdateVariantRequest)
}
UpdateVariantRequest::UpdateVariantRequest(const UpdateVariantRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  variant_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.variant_id().size() > 0) {
    variant_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.variant_id(),
      GetArenaNoVirtual());
  }
  if (from.has_variant()) {
    variant_ = new ::google::genomics::v1::Variant(*from.variant_);
  } else {
    variant_ = NULL;
  }
  if (from.has_update_mask()) {
    update_mask_ = new ::google::protobuf::FieldMask(*from.update_mask_);
  } else {
    update_mask_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:google.genomics.v1.UpdateVariantRequest)
}

void UpdateVariantRequest::SharedCtor() {
  variant_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&variant_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&update_mask_) -
      reinterpret_cast<char*>(&variant_)) + sizeof(update_mask_));
  _cached_size_ = 0;
}

UpdateVariantRequest::~UpdateVariantRequest() {
  // @@protoc_insertion_point(destructor:google.genomics.v1.UpdateVariantRequest)
  SharedDtor();
}

void UpdateVariantRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  variant_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete variant_;
  if (this != internal_default_instance()) delete update_mask_;
}

void UpdateVariantRequest::ArenaDtor(void* object) {
  UpdateVariantRequest* _this = reinterpret_cast< UpdateVariantRequest* >(object);
  (void)_this;
}
void UpdateVariantRequest::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void UpdateVariantRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UpdateVariantRequest::descriptor() {
  ::protobuf_google_2fgenomics_2fv1_2fvariants_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fgenomics_2fv1_2fvariants_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const UpdateVariantRequest& UpdateVariantRequest::default_instance() {
  ::protobuf_google_2fgenomics_2fv1_2fvariants_2eproto::InitDefaultsUpdateVariantRequest();
  return *internal_default_instance();
}

UpdateVariantRequest* UpdateVariantRequest::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<UpdateVariantRequest>(arena);
}

void UpdateVariantRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.genomics.v1.UpdateVariantRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  variant_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  if (GetArenaNoVirtual() == NULL && variant_ != NULL) {
    delete variant_;
  }
  variant_ = NULL;
  if (GetArenaNoVirtual() == NULL && update_mask_ != NULL) {
    delete update_mask_;
  }
  update_mask_ = NULL;
  _internal_metadata_.Clear();
}

bool UpdateVariantRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.genomics.v1.UpdateVariantRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string variant_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_variant_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->variant_id().data(), static_cast<int>(this->variant_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.genomics.v1.UpdateVariantRequest.variant_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.genomics.v1.Variant variant = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_variant()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.FieldMask update_mask = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_update_mask()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.genomics.v1.UpdateVariantRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.genomics.v1.UpdateVariantRequest)
  return false;
#undef DO_
}

void UpdateVariantRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.genomics.v1.UpdateVariantRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string variant_id = 1;
  if (this->variant_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->variant_id().data(), static_cast<int>(this->variant_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.UpdateVariantRequest.variant_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->variant_id(), output);
  }

  // .google.genomics.v1.Variant variant = 2;
  if (this->has_variant()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->variant_, output);
  }

  // .google.protobuf.FieldMask update_mask = 3;
  if (this->has_update_mask()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->update_mask_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:google.genomics.v1.UpdateVariantRequest)
}

::google::protobuf::uint8* UpdateVariantRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.genomics.v1.UpdateVariantRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string variant_id = 1;
  if (this->variant_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->variant_id().data(), static_cast<int>(this->variant_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.UpdateVariantRequest.variant_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->variant_id(), target);
  }

  // .google.genomics.v1.Variant variant = 2;
  if (this->has_variant()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, *this->variant_, deterministic, target);
  }

  // .google.protobuf.FieldMask update_mask = 3;
  if (this->has_update_mask()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, *this->update_mask_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.genomics.v1.UpdateVariantRequest)
  return target;
}

size_t UpdateVariantRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.genomics.v1.UpdateVariantRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string variant_id = 1;
  if (this->variant_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->variant_id());
  }

  // .google.genomics.v1.Variant variant = 2;
  if (this->has_variant()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->variant_);
  }

  // .google.protobuf.FieldMask update_mask = 3;
  if (this->has_update_mask()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->update_mask_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpdateVariantRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.genomics.v1.UpdateVariantRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const UpdateVariantRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UpdateVariantRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.genomics.v1.UpdateVariantRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.genomics.v1.UpdateVariantRequest)
    MergeFrom(*source);
  }
}

void UpdateVariantRequest::MergeFrom(const UpdateVariantRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.genomics.v1.UpdateVariantRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.variant_id().size() > 0) {
    set_variant_id(from.variant_id());
  }
  if (from.has_variant()) {
    mutable_variant()->::google::genomics::v1::Variant::MergeFrom(from.variant());
  }
  if (from.has_update_mask()) {
    mutable_update_mask()->::google::protobuf::FieldMask::MergeFrom(from.update_mask());
  }
}

void UpdateVariantRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.genomics.v1.UpdateVariantRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateVariantRequest::CopyFrom(const UpdateVariantRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.genomics.v1.UpdateVariantRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateVariantRequest::IsInitialized() const {
  return true;
}

void UpdateVariantRequest::Swap(UpdateVariantRequest* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    UpdateVariantRequest* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void UpdateVariantRequest::UnsafeArenaSwap(UpdateVariantRequest* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void UpdateVariantRequest::InternalSwap(UpdateVariantRequest* other) {
  using std::swap;
  variant_id_.Swap(&other->variant_id_);
  swap(variant_, other->variant_);
  swap(update_mask_, other->update_mask_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UpdateVariantRequest::GetMetadata() const {
  protobuf_google_2fgenomics_2fv1_2fvariants_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fgenomics_2fv1_2fvariants_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void DeleteVariantRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DeleteVariantRequest::kVariantIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DeleteVariantRequest::DeleteVariantRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_google_2fgenomics_2fv1_2fvariants_2eproto::InitDefaultsDeleteVariantRequest();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.genomics.v1.DeleteVariantRequest)
}
DeleteVariantRequest::DeleteVariantRequest(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::protobuf_google_2fgenomics_2fv1_2fvariants_2eproto::InitDefaultsDeleteVariantRequest();
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.genomics.v1.DeleteVariantRequest)
}
DeleteVariantRequest::DeleteVariantRequest(const DeleteVariantRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  variant_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.variant_id().size() > 0) {
    variant_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.variant_id(),
      GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(copy_constructor:google.genomics.v1.DeleteVariantRequest)
}

void DeleteVariantRequest::SharedCtor() {
  variant_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

DeleteVariantRequest::~DeleteVariantRequest() {
  // @@protoc_insertion_point(destructor:google.genomics.v1.DeleteVariantRequest)
  SharedDtor();
}

void DeleteVariantRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  variant_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void DeleteVariantRequest::ArenaDtor(void* object) {
  DeleteVariantRequest* _this = reinterpret_cast< DeleteVariantRequest* >(object);
  (void)_this;
}
void DeleteVariantRequest::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void DeleteVariantRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DeleteVariantRequest::descriptor() {
  ::protobuf_google_2fgenomics_2fv1_2fvariants_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fgenomics_2fv1_2fvariants_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DeleteVariantRequest& DeleteVariantRequest::default_instance() {
  ::protobuf_google_2fgenomics_2fv1_2fvariants_2eproto::InitDefaultsDeleteVariantRequest();
  return *internal_default_instance();
}

DeleteVariantRequest* DeleteVariantRequest::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<DeleteVariantRequest>(arena);
}

void DeleteVariantRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.genomics.v1.DeleteVariantRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  variant_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  _internal_metadata_.Clear();
}

bool DeleteVariantRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.genomics.v1.DeleteVariantRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string variant_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_variant_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->variant_id().data(), static_cast<int>(this->variant_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.genomics.v1.DeleteVariantRequest.variant_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.genomics.v1.DeleteVariantRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.genomics.v1.DeleteVariantRequest)
  return false;
#undef DO_
}

void DeleteVariantRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.genomics.v1.DeleteVariantRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string variant_id = 1;
  if (this->variant_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->variant_id().data(), static_cast<int>(this->variant_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.DeleteVariantRequest.variant_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->variant_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:google.genomics.v1.DeleteVariantRequest)
}

::google::protobuf::uint8* DeleteVariantRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.genomics.v1.DeleteVariantRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string variant_id = 1;
  if (this->variant_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->variant_id().data(), static_cast<int>(this->variant_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.DeleteVariantRequest.variant_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->variant_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.genomics.v1.DeleteVariantRequest)
  return target;
}

size_t DeleteVariantRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.genomics.v1.DeleteVariantRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string variant_id = 1;
  if (this->variant_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->variant_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeleteVariantRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.genomics.v1.DeleteVariantRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const DeleteVariantRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DeleteVariantRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.genomics.v1.DeleteVariantRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.genomics.v1.DeleteVariantRequest)
    MergeFrom(*source);
  }
}

void DeleteVariantRequest::MergeFrom(const DeleteVariantRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.genomics.v1.DeleteVariantRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.variant_id().size() > 0) {
    set_variant_id(from.variant_id());
  }
}

void DeleteVariantRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.genomics.v1.DeleteVariantRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteVariantRequest::CopyFrom(const DeleteVariantRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.genomics.v1.DeleteVariantRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteVariantRequest::IsInitialized() const {
  return true;
}

void DeleteVariantRequest::Swap(DeleteVariantRequest* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    DeleteVariantRequest* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void DeleteVariantRequest::UnsafeArenaSwap(DeleteVariantRequest* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void DeleteVariantRequest::InternalSwap(DeleteVariantRequest* other) {
  using std::swap;
  variant_id_.Swap(&other->variant_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DeleteVariantRequest::GetMetadata() const {
  protobuf_google_2fgenomics_2fv1_2fvariants_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fgenomics_2fv1_2fvariants_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void GetVariantRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetVariantRequest::kVariantIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetVariantRequest::GetVariantRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_google_2fgenomics_2fv1_2fvariants_2eproto::InitDefaultsGetVariantRequest();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.genomics.v1.GetVariantRequest)
}
GetVariantRequest::GetVariantRequest(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::protobuf_google_2fgenomics_2fv1_2fvariants_2eproto::InitDefaultsGetVariantRequest();
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.genomics.v1.GetVariantRequest)
}
GetVariantRequest::GetVariantRequest(const GetVariantRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  variant_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.variant_id().size() > 0) {
    variant_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.variant_id(),
      GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(copy_constructor:google.genomics.v1.GetVariantRequest)
}

void GetVariantRequest::SharedCtor() {
  variant_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

GetVariantRequest::~GetVariantRequest() {
  // @@protoc_insertion_point(destructor:google.genomics.v1.GetVariantRequest)
  SharedDtor();
}

void GetVariantRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  variant_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void GetVariantRequest::ArenaDtor(void* object) {
  GetVariantRequest* _this = reinterpret_cast< GetVariantRequest* >(object);
  (void)_this;
}
void GetVariantRequest::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void GetVariantRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetVariantRequest::descriptor() {
  ::protobuf_google_2fgenomics_2fv1_2fvariants_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fgenomics_2fv1_2fvariants_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GetVariantRequest& GetVariantRequest::default_instance() {
  ::protobuf_google_2fgenomics_2fv1_2fvariants_2eproto::InitDefaultsGetVariantRequest();
  return *internal_default_instance();
}

GetVariantRequest* GetVariantRequest::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<GetVariantRequest>(arena);
}

void GetVariantRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.genomics.v1.GetVariantRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  variant_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  _internal_metadata_.Clear();
}

bool GetVariantRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.genomics.v1.GetVariantRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string variant_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_variant_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->variant_id().data(), static_cast<int>(this->variant_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.genomics.v1.GetVariantRequest.variant_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.genomics.v1.GetVariantRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.genomics.v1.GetVariantRequest)
  return false;
#undef DO_
}

void GetVariantRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.genomics.v1.GetVariantRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string variant_id = 1;
  if (this->variant_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->variant_id().data(), static_cast<int>(this->variant_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.GetVariantRequest.variant_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->variant_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:google.genomics.v1.GetVariantRequest)
}

::google::protobuf::uint8* GetVariantRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.genomics.v1.GetVariantRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string variant_id = 1;
  if (this->variant_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->variant_id().data(), static_cast<int>(this->variant_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.GetVariantRequest.variant_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->variant_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.genomics.v1.GetVariantRequest)
  return target;
}

size_t GetVariantRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.genomics.v1.GetVariantRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string variant_id = 1;
  if (this->variant_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->variant_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetVariantRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.genomics.v1.GetVariantRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetVariantRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetVariantRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.genomics.v1.GetVariantRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.genomics.v1.GetVariantRequest)
    MergeFrom(*source);
  }
}

void GetVariantRequest::MergeFrom(const GetVariantRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.genomics.v1.GetVariantRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.variant_id().size() > 0) {
    set_variant_id(from.variant_id());
  }
}

void GetVariantRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.genomics.v1.GetVariantRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetVariantRequest::CopyFrom(const GetVariantRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.genomics.v1.GetVariantRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetVariantRequest::IsInitialized() const {
  return true;
}

void GetVariantRequest::Swap(GetVariantRequest* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    GetVariantRequest* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void GetVariantRequest::UnsafeArenaSwap(GetVariantRequest* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void GetVariantRequest::InternalSwap(GetVariantRequest* other) {
  using std::swap;
  variant_id_.Swap(&other->variant_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetVariantRequest::GetMetadata() const {
  protobuf_google_2fgenomics_2fv1_2fvariants_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fgenomics_2fv1_2fvariants_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

MergeVariantsRequest_InfoMergeConfigEntry_DoNotUse::MergeVariantsRequest_InfoMergeConfigEntry_DoNotUse() {}
MergeVariantsRequest_InfoMergeConfigEntry_DoNotUse::MergeVariantsRequest_InfoMergeConfigEntry_DoNotUse(::google::protobuf::Arena* arena) : SuperType(arena) {}
void MergeVariantsRequest_InfoMergeConfigEntry_DoNotUse::MergeFrom(const MergeVariantsRequest_InfoMergeConfigEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::google::protobuf::Metadata MergeVariantsRequest_InfoMergeConfigEntry_DoNotUse::GetMetadata() const {
  ::protobuf_google_2fgenomics_2fv1_2fvariants_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fgenomics_2fv1_2fvariants_2eproto::file_level_metadata[26];
}
void MergeVariantsRequest_InfoMergeConfigEntry_DoNotUse::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}


// ===================================================================

void MergeVariantsRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MergeVariantsRequest::kVariantSetIdFieldNumber;
const int MergeVariantsRequest::kVariantsFieldNumber;
const int MergeVariantsRequest::kInfoMergeConfigFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MergeVariantsRequest::MergeVariantsRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_google_2fgenomics_2fv1_2fvariants_2eproto::InitDefaultsMergeVariantsRequest();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.genomics.v1.MergeVariantsRequest)
}
MergeVariantsRequest::MergeVariantsRequest(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  variants_(arena),
  info_merge_config_(arena) {
  ::protobuf_google_2fgenomics_2fv1_2fvariants_2eproto::InitDefaultsMergeVariantsRequest();
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.genomics.v1.MergeVariantsRequest)
}
MergeVariantsRequest::MergeVariantsRequest(const MergeVariantsRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      variants_(from.variants_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  info_merge_config_.MergeFrom(from.info_merge_config_);
  variant_set_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.variant_set_id().size() > 0) {
    variant_set_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.variant_set_id(),
      GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(copy_constructor:google.genomics.v1.MergeVariantsRequest)
}

void MergeVariantsRequest::SharedCtor() {
  variant_set_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

MergeVariantsRequest::~MergeVariantsRequest() {
  // @@protoc_insertion_point(destructor:google.genomics.v1.MergeVariantsRequest)
  SharedDtor();
}

void MergeVariantsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  variant_set_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void MergeVariantsRequest::ArenaDtor(void* object) {
  MergeVariantsRequest* _this = reinterpret_cast< MergeVariantsRequest* >(object);
  (void)_this;
}
void MergeVariantsRequest::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void MergeVariantsRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MergeVariantsRequest::descriptor() {
  ::protobuf_google_2fgenomics_2fv1_2fvariants_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fgenomics_2fv1_2fvariants_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MergeVariantsRequest& MergeVariantsRequest::default_instance() {
  ::protobuf_google_2fgenomics_2fv1_2fvariants_2eproto::InitDefaultsMergeVariantsRequest();
  return *internal_default_instance();
}

MergeVariantsRequest* MergeVariantsRequest::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<MergeVariantsRequest>(arena);
}

void MergeVariantsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.genomics.v1.MergeVariantsRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  variants_.Clear();
  info_merge_config_.Clear();
  variant_set_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  _internal_metadata_.Clear();
}

bool MergeVariantsRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.genomics.v1.MergeVariantsRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string variant_set_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_variant_set_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->variant_set_id().data(), static_cast<int>(this->variant_set_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.genomics.v1.MergeVariantsRequest.variant_set_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .google.genomics.v1.Variant variants = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_variants()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, .google.genomics.v1.InfoMergeOperation> info_merge_config = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          MergeVariantsRequest_InfoMergeConfigEntry_DoNotUse::Parser< ::google::protobuf::internal::MapField<
              MergeVariantsRequest_InfoMergeConfigEntry_DoNotUse,
              ::std::string, ::google::genomics::v1::InfoMergeOperation,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_ENUM,
              0 >,
            ::google::protobuf::Map< ::std::string, ::google::genomics::v1::InfoMergeOperation > > parser(&info_merge_config_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.genomics.v1.MergeVariantsRequest.InfoMergeConfigEntry.key"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.genomics.v1.MergeVariantsRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.genomics.v1.MergeVariantsRequest)
  return false;
#undef DO_
}

void MergeVariantsRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.genomics.v1.MergeVariantsRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string variant_set_id = 1;
  if (this->variant_set_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->variant_set_id().data(), static_cast<int>(this->variant_set_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.MergeVariantsRequest.variant_set_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->variant_set_id(), output);
  }

  // repeated .google.genomics.v1.Variant variants = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->variants_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->variants(static_cast<int>(i)), output);
  }

  // map<string, .google.genomics.v1.InfoMergeOperation> info_merge_config = 3;
  if (!this->info_merge_config().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::google::genomics::v1::InfoMergeOperation >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "google.genomics.v1.MergeVariantsRequest.InfoMergeConfigEntry.key");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->info_merge_config().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->info_merge_config().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::google::genomics::v1::InfoMergeOperation >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::google::genomics::v1::InfoMergeOperation >::const_iterator
          it = this->info_merge_config().begin();
          it != this->info_merge_config().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<MergeVariantsRequest_InfoMergeConfigEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(info_merge_config_.NewEnumEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            3, *entry, output);
        if (entry->GetArena() != NULL) {
          entry.release();
        }
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::google::protobuf::scoped_ptr<MergeVariantsRequest_InfoMergeConfigEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::google::genomics::v1::InfoMergeOperation >::const_iterator
          it = this->info_merge_config().begin();
          it != this->info_merge_config().end(); ++it) {
        entry.reset(info_merge_config_.NewEnumEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            3, *entry, output);
        if (entry->GetArena() != NULL) {
          entry.release();
        }
        Utf8Check::Check(&*it);
      }
    }
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:google.genomics.v1.MergeVariantsRequest)
}

::google::protobuf::uint8* MergeVariantsRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.genomics.v1.MergeVariantsRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string variant_set_id = 1;
  if (this->variant_set_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->variant_set_id().data(), static_cast<int>(this->variant_set_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.MergeVariantsRequest.variant_set_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->variant_set_id(), target);
  }

  // repeated .google.genomics.v1.Variant variants = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->variants_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->variants(static_cast<int>(i)), deterministic, target);
  }

  // map<string, .google.genomics.v1.InfoMergeOperation> info_merge_config = 3;
  if (!this->info_merge_config().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::google::genomics::v1::InfoMergeOperation >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "google.genomics.v1.MergeVariantsRequest.InfoMergeConfigEntry.key");
      }
    };

    if (deterministic &&
        this->info_merge_config().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->info_merge_config().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::google::genomics::v1::InfoMergeOperation >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::google::genomics::v1::InfoMergeOperation >::const_iterator
          it = this->info_merge_config().begin();
          it != this->info_merge_config().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<MergeVariantsRequest_InfoMergeConfigEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(info_merge_config_.NewEnumEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       3, *entry, deterministic, target);
;
        if (entry->GetArena() != NULL) {
          entry.release();
        }
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::google::protobuf::scoped_ptr<MergeVariantsRequest_InfoMergeConfigEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::google::genomics::v1::InfoMergeOperation >::const_iterator
          it = this->info_merge_config().begin();
          it != this->info_merge_config().end(); ++it) {
        entry.reset(info_merge_config_.NewEnumEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       3, *entry, deterministic, target);
;
        if (entry->GetArena() != NULL) {
          entry.release();
        }
        Utf8Check::Check(&*it);
      }
    }
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.genomics.v1.MergeVariantsRequest)
  return target;
}

size_t MergeVariantsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.genomics.v1.MergeVariantsRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .google.genomics.v1.Variant variants = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->variants_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->variants(static_cast<int>(i)));
    }
  }

  // map<string, .google.genomics.v1.InfoMergeOperation> info_merge_config = 3;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->info_merge_config_size());
  {
    ::google::protobuf::scoped_ptr<MergeVariantsRequest_InfoMergeConfigEntry_DoNotUse> entry;
    for (::google::protobuf::Map< ::std::string, ::google::genomics::v1::InfoMergeOperation >::const_iterator
        it = this->info_merge_config().begin();
        it != this->info_merge_config().end(); ++it) {
      if (entry.get() != NULL && entry->GetArena() != NULL) {
        entry.release();
      }
      entry.reset(info_merge_config_.NewEnumEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
    if (entry.get() != NULL && entry->GetArena() != NULL) {
      entry.release();
    }
  }

  // string variant_set_id = 1;
  if (this->variant_set_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->variant_set_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MergeVariantsRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.genomics.v1.MergeVariantsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const MergeVariantsRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MergeVariantsRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.genomics.v1.MergeVariantsRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.genomics.v1.MergeVariantsRequest)
    MergeFrom(*source);
  }
}

void MergeVariantsRequest::MergeFrom(const MergeVariantsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.genomics.v1.MergeVariantsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  variants_.MergeFrom(from.variants_);
  info_merge_config_.MergeFrom(from.info_merge_config_);
  if (from.variant_set_id().size() > 0) {
    set_variant_set_id(from.variant_set_id());
  }
}

void MergeVariantsRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.genomics.v1.MergeVariantsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MergeVariantsRequest::CopyFrom(const MergeVariantsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.genomics.v1.MergeVariantsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MergeVariantsRequest::IsInitialized() const {
  return true;
}

void MergeVariantsRequest::Swap(MergeVariantsRequest* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    MergeVariantsRequest* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void MergeVariantsRequest::UnsafeArenaSwap(MergeVariantsRequest* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void MergeVariantsRequest::InternalSwap(MergeVariantsRequest* other) {
  using std::swap;
  variants_.InternalSwap(&other->variants_);
  info_merge_config_.Swap(&other->info_merge_config_);
  variant_set_id_.Swap(&other->variant_set_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MergeVariantsRequest::GetMetadata() const {
  protobuf_google_2fgenomics_2fv1_2fvariants_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fgenomics_2fv1_2fvariants_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void SearchCallSetsRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SearchCallSetsRequest::kVariantSetIdsFieldNumber;
const int SearchCallSetsRequest::kNameFieldNumber;
const int SearchCallSetsRequest::kPageTokenFieldNumber;
const int SearchCallSetsRequest::kPageSizeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SearchCallSetsRequest::SearchCallSetsRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_google_2fgenomics_2fv1_2fvariants_2eproto::InitDefaultsSearchCallSetsRequest();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.genomics.v1.SearchCallSetsRequest)
}
SearchCallSetsRequest::SearchCallSetsRequest(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  variant_set_ids_(arena) {
  ::protobuf_google_2fgenomics_2fv1_2fvariants_2eproto::InitDefaultsSearchCallSetsRequest();
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.genomics.v1.SearchCallSetsRequest)
}
SearchCallSetsRequest::SearchCallSetsRequest(const SearchCallSetsRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      variant_set_ids_(from.variant_set_ids_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name(),
      GetArenaNoVirtual());
  }
  page_token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.page_token().size() > 0) {
    page_token_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.page_token(),
      GetArenaNoVirtual());
  }
  page_size_ = from.page_size_;
  // @@protoc_insertion_point(copy_constructor:google.genomics.v1.SearchCallSetsRequest)
}

void SearchCallSetsRequest::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  page_token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  page_size_ = 0;
  _cached_size_ = 0;
}

SearchCallSetsRequest::~SearchCallSetsRequest() {
  // @@protoc_insertion_point(destructor:google.genomics.v1.SearchCallSetsRequest)
  SharedDtor();
}

void SearchCallSetsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  page_token_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SearchCallSetsRequest::ArenaDtor(void* object) {
  SearchCallSetsRequest* _this = reinterpret_cast< SearchCallSetsRequest* >(object);
  (void)_this;
}
void SearchCallSetsRequest::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void SearchCallSetsRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SearchCallSetsRequest::descriptor() {
  ::protobuf_google_2fgenomics_2fv1_2fvariants_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fgenomics_2fv1_2fvariants_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SearchCallSetsRequest& SearchCallSetsRequest::default_instance() {
  ::protobuf_google_2fgenomics_2fv1_2fvariants_2eproto::InitDefaultsSearchCallSetsRequest();
  return *internal_default_instance();
}

SearchCallSetsRequest* SearchCallSetsRequest::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<SearchCallSetsRequest>(arena);
}

void SearchCallSetsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.genomics.v1.SearchCallSetsRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  variant_set_ids_.Clear();
  name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  page_token_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  page_size_ = 0;
  _internal_metadata_.Clear();
}

bool SearchCallSetsRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.genomics.v1.SearchCallSetsRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string variant_set_ids = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_variant_set_ids()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->variant_set_ids(this->variant_set_ids_size() - 1).data(),
            static_cast<int>(this->variant_set_ids(this->variant_set_ids_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.genomics.v1.SearchCallSetsRequest.variant_set_ids"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.genomics.v1.SearchCallSetsRequest.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string page_token = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_page_token()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->page_token().data(), static_cast<int>(this->page_token().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.genomics.v1.SearchCallSetsRequest.page_token"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 page_size = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &page_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.genomics.v1.SearchCallSetsRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.genomics.v1.SearchCallSetsRequest)
  return false;
#undef DO_
}

void SearchCallSetsRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.genomics.v1.SearchCallSetsRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string variant_set_ids = 1;
  for (int i = 0, n = this->variant_set_ids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->variant_set_ids(i).data(), static_cast<int>(this->variant_set_ids(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.SearchCallSetsRequest.variant_set_ids");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->variant_set_ids(i), output);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.SearchCallSetsRequest.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // string page_token = 3;
  if (this->page_token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->page_token().data(), static_cast<int>(this->page_token().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.SearchCallSetsRequest.page_token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->page_token(), output);
  }

  // int32 page_size = 4;
  if (this->page_size() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->page_size(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:google.genomics.v1.SearchCallSetsRequest)
}

::google::protobuf::uint8* SearchCallSetsRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.genomics.v1.SearchCallSetsRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string variant_set_ids = 1;
  for (int i = 0, n = this->variant_set_ids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->variant_set_ids(i).data(), static_cast<int>(this->variant_set_ids(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.SearchCallSetsRequest.variant_set_ids");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->variant_set_ids(i), target);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.SearchCallSetsRequest.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // string page_token = 3;
  if (this->page_token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->page_token().data(), static_cast<int>(this->page_token().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.SearchCallSetsRequest.page_token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->page_token(), target);
  }

  // int32 page_size = 4;
  if (this->page_size() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->page_size(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.genomics.v1.SearchCallSetsRequest)
  return target;
}

size_t SearchCallSetsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.genomics.v1.SearchCallSetsRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated string variant_set_ids = 1;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->variant_set_ids_size());
  for (int i = 0, n = this->variant_set_ids_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->variant_set_ids(i));
  }

  // string name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // string page_token = 3;
  if (this->page_token().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->page_token());
  }

  // int32 page_size = 4;
  if (this->page_size() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->page_size());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SearchCallSetsRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.genomics.v1.SearchCallSetsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SearchCallSetsRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SearchCallSetsRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.genomics.v1.SearchCallSetsRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.genomics.v1.SearchCallSetsRequest)
    MergeFrom(*source);
  }
}

void SearchCallSetsRequest::MergeFrom(const SearchCallSetsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.genomics.v1.SearchCallSetsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  variant_set_ids_.MergeFrom(from.variant_set_ids_);
  if (from.name().size() > 0) {
    set_name(from.name());
  }
  if (from.page_token().size() > 0) {
    set_page_token(from.page_token());
  }
  if (from.page_size() != 0) {
    set_page_size(from.page_size());
  }
}

void SearchCallSetsRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.genomics.v1.SearchCallSetsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SearchCallSetsRequest::CopyFrom(const SearchCallSetsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.genomics.v1.SearchCallSetsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SearchCallSetsRequest::IsInitialized() const {
  return true;
}

void SearchCallSetsRequest::Swap(SearchCallSetsRequest* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    SearchCallSetsRequest* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void SearchCallSetsRequest::UnsafeArenaSwap(SearchCallSetsRequest* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void SearchCallSetsRequest::InternalSwap(SearchCallSetsRequest* other) {
  using std::swap;
  variant_set_ids_.InternalSwap(&other->variant_set_ids_);
  name_.Swap(&other->name_);
  page_token_.Swap(&other->page_token_);
  swap(page_size_, other->page_size_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SearchCallSetsRequest::GetMetadata() const {
  protobuf_google_2fgenomics_2fv1_2fvariants_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fgenomics_2fv1_2fvariants_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void SearchCallSetsResponse::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SearchCallSetsResponse::kCallSetsFieldNumber;
const int SearchCallSetsResponse::kNextPageTokenFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SearchCallSetsResponse::SearchCallSetsResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_google_2fgenomics_2fv1_2fvariants_2eproto::InitDefaultsSearchCallSetsResponse();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.genomics.v1.SearchCallSetsResponse)
}
SearchCallSetsResponse::SearchCallSetsResponse(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  call_sets_(arena) {
  ::protobuf_google_2fgenomics_2fv1_2fvariants_2eproto::InitDefaultsSearchCallSetsResponse();
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.genomics.v1.SearchCallSetsResponse)
}
SearchCallSetsResponse::SearchCallSetsResponse(const SearchCallSetsResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      call_sets_(from.call_sets_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  next_page_token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.next_page_token().size() > 0) {
    next_page_token_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.next_page_token(),
      GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(copy_constructor:google.genomics.v1.SearchCallSetsResponse)
}

void SearchCallSetsResponse::SharedCtor() {
  next_page_token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

SearchCallSetsResponse::~SearchCallSetsResponse() {
  // @@protoc_insertion_point(destructor:google.genomics.v1.SearchCallSetsResponse)
  SharedDtor();
}

void SearchCallSetsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  next_page_token_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SearchCallSetsResponse::ArenaDtor(void* object) {
  SearchCallSetsResponse* _this = reinterpret_cast< SearchCallSetsResponse* >(object);
  (void)_this;
}
void SearchCallSetsResponse::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void SearchCallSetsResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SearchCallSetsResponse::descriptor() {
  ::protobuf_google_2fgenomics_2fv1_2fvariants_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fgenomics_2fv1_2fvariants_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SearchCallSetsResponse& SearchCallSetsResponse::default_instance() {
  ::protobuf_google_2fgenomics_2fv1_2fvariants_2eproto::InitDefaultsSearchCallSetsResponse();
  return *internal_default_instance();
}

SearchCallSetsResponse* SearchCallSetsResponse::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<SearchCallSetsResponse>(arena);
}

void SearchCallSetsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:google.genomics.v1.SearchCallSetsResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  call_sets_.Clear();
  next_page_token_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  _internal_metadata_.Clear();
}

bool SearchCallSetsResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.genomics.v1.SearchCallSetsResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .google.genomics.v1.CallSet call_sets = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_call_sets()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string next_page_token = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_next_page_token()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->next_page_token().data(), static_cast<int>(this->next_page_token().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.genomics.v1.SearchCallSetsResponse.next_page_token"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.genomics.v1.SearchCallSetsResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.genomics.v1.SearchCallSetsResponse)
  return false;
#undef DO_
}

void SearchCallSetsResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.genomics.v1.SearchCallSetsResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .google.genomics.v1.CallSet call_sets = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->call_sets_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->call_sets(static_cast<int>(i)), output);
  }

  // string next_page_token = 2;
  if (this->next_page_token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->next_page_token().data(), static_cast<int>(this->next_page_token().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.SearchCallSetsResponse.next_page_token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->next_page_token(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:google.genomics.v1.SearchCallSetsResponse)
}

::google::protobuf::uint8* SearchCallSetsResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.genomics.v1.SearchCallSetsResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .google.genomics.v1.CallSet call_sets = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->call_sets_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->call_sets(static_cast<int>(i)), deterministic, target);
  }

  // string next_page_token = 2;
  if (this->next_page_token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->next_page_token().data(), static_cast<int>(this->next_page_token().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.SearchCallSetsResponse.next_page_token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->next_page_token(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.genomics.v1.SearchCallSetsResponse)
  return target;
}

size_t SearchCallSetsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.genomics.v1.SearchCallSetsResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .google.genomics.v1.CallSet call_sets = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->call_sets_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->call_sets(static_cast<int>(i)));
    }
  }

  // string next_page_token = 2;
  if (this->next_page_token().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->next_page_token());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SearchCallSetsResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.genomics.v1.SearchCallSetsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const SearchCallSetsResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SearchCallSetsResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.genomics.v1.SearchCallSetsResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.genomics.v1.SearchCallSetsResponse)
    MergeFrom(*source);
  }
}

void SearchCallSetsResponse::MergeFrom(const SearchCallSetsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.genomics.v1.SearchCallSetsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  call_sets_.MergeFrom(from.call_sets_);
  if (from.next_page_token().size() > 0) {
    set_next_page_token(from.next_page_token());
  }
}

void SearchCallSetsResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.genomics.v1.SearchCallSetsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SearchCallSetsResponse::CopyFrom(const SearchCallSetsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.genomics.v1.SearchCallSetsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SearchCallSetsResponse::IsInitialized() const {
  return true;
}

void SearchCallSetsResponse::Swap(SearchCallSetsResponse* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    SearchCallSetsResponse* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void SearchCallSetsResponse::UnsafeArenaSwap(SearchCallSetsResponse* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void SearchCallSetsResponse::InternalSwap(SearchCallSetsResponse* other) {
  using std::swap;
  call_sets_.InternalSwap(&other->call_sets_);
  next_page_token_.Swap(&other->next_page_token_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SearchCallSetsResponse::GetMetadata() const {
  protobuf_google_2fgenomics_2fv1_2fvariants_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fgenomics_2fv1_2fvariants_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CreateCallSetRequest::InitAsDefaultInstance() {
  ::google::genomics::v1::_CreateCallSetRequest_default_instance_._instance.get_mutable()->call_set_ = const_cast< ::google::genomics::v1::CallSet*>(
      ::google::genomics::v1::CallSet::internal_default_instance());
}
void CreateCallSetRequest::_slow_mutable_call_set() {
  call_set_ = ::google::protobuf::Arena::CreateMessage< ::google::genomics::v1::CallSet >(
      GetArenaNoVirtual());
}
void CreateCallSetRequest::unsafe_arena_set_allocated_call_set(
    ::google::genomics::v1::CallSet* call_set) {
  if (GetArenaNoVirtual() == NULL) {
    delete call_set_;
  }
  call_set_ = call_set;
  if (call_set) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.genomics.v1.CreateCallSetRequest.call_set)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CreateCallSetRequest::kCallSetFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CreateCallSetRequest::CreateCallSetRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_google_2fgenomics_2fv1_2fvariants_2eproto::InitDefaultsCreateCallSetRequest();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.genomics.v1.CreateCallSetRequest)
}
CreateCallSetRequest::CreateCallSetRequest(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::protobuf_google_2fgenomics_2fv1_2fvariants_2eproto::InitDefaultsCreateCallSetRequest();
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.genomics.v1.CreateCallSetRequest)
}
CreateCallSetRequest::CreateCallSetRequest(const CreateCallSetRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_call_set()) {
    call_set_ = new ::google::genomics::v1::CallSet(*from.call_set_);
  } else {
    call_set_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:google.genomics.v1.CreateCallSetRequest)
}

void CreateCallSetRequest::SharedCtor() {
  call_set_ = NULL;
  _cached_size_ = 0;
}

CreateCallSetRequest::~CreateCallSetRequest() {
  // @@protoc_insertion_point(destructor:google.genomics.v1.CreateCallSetRequest)
  SharedDtor();
}

void CreateCallSetRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  if (this != internal_default_instance()) delete call_set_;
}

void CreateCallSetRequest::ArenaDtor(void* object) {
  CreateCallSetRequest* _this = reinterpret_cast< CreateCallSetRequest* >(object);
  (void)_this;
}
void CreateCallSetRequest::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void CreateCallSetRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CreateCallSetRequest::descriptor() {
  ::protobuf_google_2fgenomics_2fv1_2fvariants_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fgenomics_2fv1_2fvariants_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CreateCallSetRequest& CreateCallSetRequest::default_instance() {
  ::protobuf_google_2fgenomics_2fv1_2fvariants_2eproto::InitDefaultsCreateCallSetRequest();
  return *internal_default_instance();
}

CreateCallSetRequest* CreateCallSetRequest::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<CreateCallSetRequest>(arena);
}

void CreateCallSetRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.genomics.v1.CreateCallSetRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && call_set_ != NULL) {
    delete call_set_;
  }
  call_set_ = NULL;
  _internal_metadata_.Clear();
}

bool CreateCallSetRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.genomics.v1.CreateCallSetRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .google.genomics.v1.CallSet call_set = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_call_set()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.genomics.v1.CreateCallSetRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.genomics.v1.CreateCallSetRequest)
  return false;
#undef DO_
}

void CreateCallSetRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.genomics.v1.CreateCallSetRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.genomics.v1.CallSet call_set = 1;
  if (this->has_call_set()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->call_set_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:google.genomics.v1.CreateCallSetRequest)
}

::google::protobuf::uint8* CreateCallSetRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.genomics.v1.CreateCallSetRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.genomics.v1.CallSet call_set = 1;
  if (this->has_call_set()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->call_set_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.genomics.v1.CreateCallSetRequest)
  return target;
}

size_t CreateCallSetRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.genomics.v1.CreateCallSetRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .google.genomics.v1.CallSet call_set = 1;
  if (this->has_call_set()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->call_set_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CreateCallSetRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.genomics.v1.CreateCallSetRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CreateCallSetRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CreateCallSetRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.genomics.v1.CreateCallSetRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.genomics.v1.CreateCallSetRequest)
    MergeFrom(*source);
  }
}

void CreateCallSetRequest::MergeFrom(const CreateCallSetRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.genomics.v1.CreateCallSetRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_call_set()) {
    mutable_call_set()->::google::genomics::v1::CallSet::MergeFrom(from.call_set());
  }
}

void CreateCallSetRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.genomics.v1.CreateCallSetRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateCallSetRequest::CopyFrom(const CreateCallSetRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.genomics.v1.CreateCallSetRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateCallSetRequest::IsInitialized() const {
  return true;
}

void CreateCallSetRequest::Swap(CreateCallSetRequest* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    CreateCallSetRequest* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void CreateCallSetRequest::UnsafeArenaSwap(CreateCallSetRequest* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void CreateCallSetRequest::InternalSwap(CreateCallSetRequest* other) {
  using std::swap;
  swap(call_set_, other->call_set_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CreateCallSetRequest::GetMetadata() const {
  protobuf_google_2fgenomics_2fv1_2fvariants_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fgenomics_2fv1_2fvariants_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void UpdateCallSetRequest::InitAsDefaultInstance() {
  ::google::genomics::v1::_UpdateCallSetRequest_default_instance_._instance.get_mutable()->call_set_ = const_cast< ::google::genomics::v1::CallSet*>(
      ::google::genomics::v1::CallSet::internal_default_instance());
  ::google::genomics::v1::_UpdateCallSetRequest_default_instance_._instance.get_mutable()->update_mask_ = const_cast< ::google::protobuf::FieldMask*>(
      ::google::protobuf::FieldMask::internal_default_instance());
}
void UpdateCallSetRequest::_slow_mutable_call_set() {
  call_set_ = ::google::protobuf::Arena::CreateMessage< ::google::genomics::v1::CallSet >(
      GetArenaNoVirtual());
}
void UpdateCallSetRequest::unsafe_arena_set_allocated_call_set(
    ::google::genomics::v1::CallSet* call_set) {
  if (GetArenaNoVirtual() == NULL) {
    delete call_set_;
  }
  call_set_ = call_set;
  if (call_set) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.genomics.v1.UpdateCallSetRequest.call_set)
}
void UpdateCallSetRequest::_slow_mutable_update_mask() {
  update_mask_ = ::google::protobuf::Arena::Create< ::google::protobuf::FieldMask >(
      GetArenaNoVirtual());
}
void UpdateCallSetRequest::unsafe_arena_set_allocated_update_mask(
    ::google::protobuf::FieldMask* update_mask) {
  if (GetArenaNoVirtual() == NULL) {
    delete update_mask_;
  }
  update_mask_ = update_mask;
  if (update_mask) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.genomics.v1.UpdateCallSetRequest.update_mask)
}
void UpdateCallSetRequest::clear_update_mask() {
  if (GetArenaNoVirtual() == NULL && update_mask_ != NULL) {
    delete update_mask_;
  }
  update_mask_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UpdateCallSetRequest::kCallSetIdFieldNumber;
const int UpdateCallSetRequest::kCallSetFieldNumber;
const int UpdateCallSetRequest::kUpdateMaskFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UpdateCallSetRequest::UpdateCallSetRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_google_2fgenomics_2fv1_2fvariants_2eproto::InitDefaultsUpdateCallSetRequest();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.genomics.v1.UpdateCallSetRequest)
}
UpdateCallSetRequest::UpdateCallSetRequest(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::protobuf_google_2fgenomics_2fv1_2fvariants_2eproto::InitDefaultsUpdateCallSetRequest();
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.genomics.v1.UpdateCallSetRequest)
}
UpdateCallSetRequest::UpdateCallSetRequest(const UpdateCallSetRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  call_set_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.call_set_id().size() > 0) {
    call_set_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.call_set_id(),
      GetArenaNoVirtual());
  }
  if (from.has_call_set()) {
    call_set_ = new ::google::genomics::v1::CallSet(*from.call_set_);
  } else {
    call_set_ = NULL;
  }
  if (from.has_update_mask()) {
    update_mask_ = new ::google::protobuf::FieldMask(*from.update_mask_);
  } else {
    update_mask_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:google.genomics.v1.UpdateCallSetRequest)
}

void UpdateCallSetRequest::SharedCtor() {
  call_set_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&call_set_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&update_mask_) -
      reinterpret_cast<char*>(&call_set_)) + sizeof(update_mask_));
  _cached_size_ = 0;
}

UpdateCallSetRequest::~UpdateCallSetRequest() {
  // @@protoc_insertion_point(destructor:google.genomics.v1.UpdateCallSetRequest)
  SharedDtor();
}

void UpdateCallSetRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  call_set_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete call_set_;
  if (this != internal_default_instance()) delete update_mask_;
}

void UpdateCallSetRequest::ArenaDtor(void* object) {
  UpdateCallSetRequest* _this = reinterpret_cast< UpdateCallSetRequest* >(object);
  (void)_this;
}
void UpdateCallSetRequest::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void UpdateCallSetRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UpdateCallSetRequest::descriptor() {
  ::protobuf_google_2fgenomics_2fv1_2fvariants_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fgenomics_2fv1_2fvariants_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const UpdateCallSetRequest& UpdateCallSetRequest::default_instance() {
  ::protobuf_google_2fgenomics_2fv1_2fvariants_2eproto::InitDefaultsUpdateCallSetRequest();
  return *internal_default_instance();
}

UpdateCallSetRequest* UpdateCallSetRequest::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<UpdateCallSetRequest>(arena);
}

void UpdateCallSetRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.genomics.v1.UpdateCallSetRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  call_set_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  if (GetArenaNoVirtual() == NULL && call_set_ != NULL) {
    delete call_set_;
  }
  call_set_ = NULL;
  if (GetArenaNoVirtual() == NULL && update_mask_ != NULL) {
    delete update_mask_;
  }
  update_mask_ = NULL;
  _internal_metadata_.Clear();
}

bool UpdateCallSetRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.genomics.v1.UpdateCallSetRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string call_set_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_call_set_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->call_set_id().data(), static_cast<int>(this->call_set_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.genomics.v1.UpdateCallSetRequest.call_set_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.genomics.v1.CallSet call_set = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_call_set()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.FieldMask update_mask = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_update_mask()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.genomics.v1.UpdateCallSetRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.genomics.v1.UpdateCallSetRequest)
  return false;
#undef DO_
}

void UpdateCallSetRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.genomics.v1.UpdateCallSetRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string call_set_id = 1;
  if (this->call_set_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->call_set_id().data(), static_cast<int>(this->call_set_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.UpdateCallSetRequest.call_set_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->call_set_id(), output);
  }

  // .google.genomics.v1.CallSet call_set = 2;
  if (this->has_call_set()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->call_set_, output);
  }

  // .google.protobuf.FieldMask update_mask = 3;
  if (this->has_update_mask()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->update_mask_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:google.genomics.v1.UpdateCallSetRequest)
}

::google::protobuf::uint8* UpdateCallSetRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.genomics.v1.UpdateCallSetRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string call_set_id = 1;
  if (this->call_set_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->call_set_id().data(), static_cast<int>(this->call_set_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.UpdateCallSetRequest.call_set_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->call_set_id(), target);
  }

  // .google.genomics.v1.CallSet call_set = 2;
  if (this->has_call_set()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, *this->call_set_, deterministic, target);
  }

  // .google.protobuf.FieldMask update_mask = 3;
  if (this->has_update_mask()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, *this->update_mask_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.genomics.v1.UpdateCallSetRequest)
  return target;
}

size_t UpdateCallSetRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.genomics.v1.UpdateCallSetRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string call_set_id = 1;
  if (this->call_set_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->call_set_id());
  }

  // .google.genomics.v1.CallSet call_set = 2;
  if (this->has_call_set()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->call_set_);
  }

  // .google.protobuf.FieldMask update_mask = 3;
  if (this->has_update_mask()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->update_mask_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpdateCallSetRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.genomics.v1.UpdateCallSetRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const UpdateCallSetRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UpdateCallSetRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.genomics.v1.UpdateCallSetRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.genomics.v1.UpdateCallSetRequest)
    MergeFrom(*source);
  }
}

void UpdateCallSetRequest::MergeFrom(const UpdateCallSetRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.genomics.v1.UpdateCallSetRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.call_set_id().size() > 0) {
    set_call_set_id(from.call_set_id());
  }
  if (from.has_call_set()) {
    mutable_call_set()->::google::genomics::v1::CallSet::MergeFrom(from.call_set());
  }
  if (from.has_update_mask()) {
    mutable_update_mask()->::google::protobuf::FieldMask::MergeFrom(from.update_mask());
  }
}

void UpdateCallSetRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.genomics.v1.UpdateCallSetRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateCallSetRequest::CopyFrom(const UpdateCallSetRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.genomics.v1.UpdateCallSetRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateCallSetRequest::IsInitialized() const {
  return true;
}

void UpdateCallSetRequest::Swap(UpdateCallSetRequest* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    UpdateCallSetRequest* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void UpdateCallSetRequest::UnsafeArenaSwap(UpdateCallSetRequest* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void UpdateCallSetRequest::InternalSwap(UpdateCallSetRequest* other) {
  using std::swap;
  call_set_id_.Swap(&other->call_set_id_);
  swap(call_set_, other->call_set_);
  swap(update_mask_, other->update_mask_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UpdateCallSetRequest::GetMetadata() const {
  protobuf_google_2fgenomics_2fv1_2fvariants_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fgenomics_2fv1_2fvariants_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void DeleteCallSetRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DeleteCallSetRequest::kCallSetIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DeleteCallSetRequest::DeleteCallSetRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_google_2fgenomics_2fv1_2fvariants_2eproto::InitDefaultsDeleteCallSetRequest();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.genomics.v1.DeleteCallSetRequest)
}
DeleteCallSetRequest::DeleteCallSetRequest(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::protobuf_google_2fgenomics_2fv1_2fvariants_2eproto::InitDefaultsDeleteCallSetRequest();
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.genomics.v1.DeleteCallSetRequest)
}
DeleteCallSetRequest::DeleteCallSetRequest(const DeleteCallSetRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  call_set_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.call_set_id().size() > 0) {
    call_set_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.call_set_id(),
      GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(copy_constructor:google.genomics.v1.DeleteCallSetRequest)
}

void DeleteCallSetRequest::SharedCtor() {
  call_set_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

DeleteCallSetRequest::~DeleteCallSetRequest() {
  // @@protoc_insertion_point(destructor:google.genomics.v1.DeleteCallSetRequest)
  SharedDtor();
}

void DeleteCallSetRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  call_set_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void DeleteCallSetRequest::ArenaDtor(void* object) {
  DeleteCallSetRequest* _this = reinterpret_cast< DeleteCallSetRequest* >(object);
  (void)_this;
}
void DeleteCallSetRequest::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void DeleteCallSetRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DeleteCallSetRequest::descriptor() {
  ::protobuf_google_2fgenomics_2fv1_2fvariants_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fgenomics_2fv1_2fvariants_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DeleteCallSetRequest& DeleteCallSetRequest::default_instance() {
  ::protobuf_google_2fgenomics_2fv1_2fvariants_2eproto::InitDefaultsDeleteCallSetRequest();
  return *internal_default_instance();
}

DeleteCallSetRequest* DeleteCallSetRequest::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<DeleteCallSetRequest>(arena);
}

void DeleteCallSetRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.genomics.v1.DeleteCallSetRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  call_set_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  _internal_metadata_.Clear();
}

bool DeleteCallSetRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.genomics.v1.DeleteCallSetRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string call_set_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_call_set_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->call_set_id().data(), static_cast<int>(this->call_set_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.genomics.v1.DeleteCallSetRequest.call_set_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.genomics.v1.DeleteCallSetRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.genomics.v1.DeleteCallSetRequest)
  return false;
#undef DO_
}

void DeleteCallSetRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.genomics.v1.DeleteCallSetRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string call_set_id = 1;
  if (this->call_set_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->call_set_id().data(), static_cast<int>(this->call_set_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.DeleteCallSetRequest.call_set_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->call_set_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:google.genomics.v1.DeleteCallSetRequest)
}

::google::protobuf::uint8* DeleteCallSetRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.genomics.v1.DeleteCallSetRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string call_set_id = 1;
  if (this->call_set_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->call_set_id().data(), static_cast<int>(this->call_set_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.DeleteCallSetRequest.call_set_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->call_set_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.genomics.v1.DeleteCallSetRequest)
  return target;
}

size_t DeleteCallSetRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.genomics.v1.DeleteCallSetRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string call_set_id = 1;
  if (this->call_set_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->call_set_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeleteCallSetRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.genomics.v1.DeleteCallSetRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const DeleteCallSetRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DeleteCallSetRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.genomics.v1.DeleteCallSetRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.genomics.v1.DeleteCallSetRequest)
    MergeFrom(*source);
  }
}

void DeleteCallSetRequest::MergeFrom(const DeleteCallSetRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.genomics.v1.DeleteCallSetRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.call_set_id().size() > 0) {
    set_call_set_id(from.call_set_id());
  }
}

void DeleteCallSetRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.genomics.v1.DeleteCallSetRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteCallSetRequest::CopyFrom(const DeleteCallSetRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.genomics.v1.DeleteCallSetRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteCallSetRequest::IsInitialized() const {
  return true;
}

void DeleteCallSetRequest::Swap(DeleteCallSetRequest* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    DeleteCallSetRequest* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void DeleteCallSetRequest::UnsafeArenaSwap(DeleteCallSetRequest* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void DeleteCallSetRequest::InternalSwap(DeleteCallSetRequest* other) {
  using std::swap;
  call_set_id_.Swap(&other->call_set_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DeleteCallSetRequest::GetMetadata() const {
  protobuf_google_2fgenomics_2fv1_2fvariants_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fgenomics_2fv1_2fvariants_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void GetCallSetRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetCallSetRequest::kCallSetIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetCallSetRequest::GetCallSetRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_google_2fgenomics_2fv1_2fvariants_2eproto::InitDefaultsGetCallSetRequest();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.genomics.v1.GetCallSetRequest)
}
GetCallSetRequest::GetCallSetRequest(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::protobuf_google_2fgenomics_2fv1_2fvariants_2eproto::InitDefaultsGetCallSetRequest();
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.genomics.v1.GetCallSetRequest)
}
GetCallSetRequest::GetCallSetRequest(const GetCallSetRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  call_set_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.call_set_id().size() > 0) {
    call_set_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.call_set_id(),
      GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(copy_constructor:google.genomics.v1.GetCallSetRequest)
}

void GetCallSetRequest::SharedCtor() {
  call_set_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

GetCallSetRequest::~GetCallSetRequest() {
  // @@protoc_insertion_point(destructor:google.genomics.v1.GetCallSetRequest)
  SharedDtor();
}

void GetCallSetRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  call_set_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void GetCallSetRequest::ArenaDtor(void* object) {
  GetCallSetRequest* _this = reinterpret_cast< GetCallSetRequest* >(object);
  (void)_this;
}
void GetCallSetRequest::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void GetCallSetRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetCallSetRequest::descriptor() {
  ::protobuf_google_2fgenomics_2fv1_2fvariants_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fgenomics_2fv1_2fvariants_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GetCallSetRequest& GetCallSetRequest::default_instance() {
  ::protobuf_google_2fgenomics_2fv1_2fvariants_2eproto::InitDefaultsGetCallSetRequest();
  return *internal_default_instance();
}

GetCallSetRequest* GetCallSetRequest::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<GetCallSetRequest>(arena);
}

void GetCallSetRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.genomics.v1.GetCallSetRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  call_set_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  _internal_metadata_.Clear();
}

bool GetCallSetRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.genomics.v1.GetCallSetRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string call_set_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_call_set_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->call_set_id().data(), static_cast<int>(this->call_set_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.genomics.v1.GetCallSetRequest.call_set_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.genomics.v1.GetCallSetRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.genomics.v1.GetCallSetRequest)
  return false;
#undef DO_
}

void GetCallSetRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.genomics.v1.GetCallSetRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string call_set_id = 1;
  if (this->call_set_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->call_set_id().data(), static_cast<int>(this->call_set_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.GetCallSetRequest.call_set_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->call_set_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:google.genomics.v1.GetCallSetRequest)
}

::google::protobuf::uint8* GetCallSetRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.genomics.v1.GetCallSetRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string call_set_id = 1;
  if (this->call_set_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->call_set_id().data(), static_cast<int>(this->call_set_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.GetCallSetRequest.call_set_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->call_set_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.genomics.v1.GetCallSetRequest)
  return target;
}

size_t GetCallSetRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.genomics.v1.GetCallSetRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string call_set_id = 1;
  if (this->call_set_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->call_set_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetCallSetRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.genomics.v1.GetCallSetRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetCallSetRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetCallSetRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.genomics.v1.GetCallSetRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.genomics.v1.GetCallSetRequest)
    MergeFrom(*source);
  }
}

void GetCallSetRequest::MergeFrom(const GetCallSetRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.genomics.v1.GetCallSetRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.call_set_id().size() > 0) {
    set_call_set_id(from.call_set_id());
  }
}

void GetCallSetRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.genomics.v1.GetCallSetRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetCallSetRequest::CopyFrom(const GetCallSetRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.genomics.v1.GetCallSetRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetCallSetRequest::IsInitialized() const {
  return true;
}

void GetCallSetRequest::Swap(GetCallSetRequest* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    GetCallSetRequest* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void GetCallSetRequest::UnsafeArenaSwap(GetCallSetRequest* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void GetCallSetRequest::InternalSwap(GetCallSetRequest* other) {
  using std::swap;
  call_set_id_.Swap(&other->call_set_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetCallSetRequest::GetMetadata() const {
  protobuf_google_2fgenomics_2fv1_2fvariants_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fgenomics_2fv1_2fvariants_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void StreamVariantsRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StreamVariantsRequest::kProjectIdFieldNumber;
const int StreamVariantsRequest::kVariantSetIdFieldNumber;
const int StreamVariantsRequest::kCallSetIdsFieldNumber;
const int StreamVariantsRequest::kReferenceNameFieldNumber;
const int StreamVariantsRequest::kStartFieldNumber;
const int StreamVariantsRequest::kEndFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StreamVariantsRequest::StreamVariantsRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_google_2fgenomics_2fv1_2fvariants_2eproto::InitDefaultsStreamVariantsRequest();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.genomics.v1.StreamVariantsRequest)
}
StreamVariantsRequest::StreamVariantsRequest(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  call_set_ids_(arena) {
  ::protobuf_google_2fgenomics_2fv1_2fvariants_2eproto::InitDefaultsStreamVariantsRequest();
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.genomics.v1.StreamVariantsRequest)
}
StreamVariantsRequest::StreamVariantsRequest(const StreamVariantsRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      call_set_ids_(from.call_set_ids_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  project_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.project_id().size() > 0) {
    project_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.project_id(),
      GetArenaNoVirtual());
  }
  variant_set_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.variant_set_id().size() > 0) {
    variant_set_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.variant_set_id(),
      GetArenaNoVirtual());
  }
  reference_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.reference_name().size() > 0) {
    reference_name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.reference_name(),
      GetArenaNoVirtual());
  }
  ::memcpy(&start_, &from.start_,
    static_cast<size_t>(reinterpret_cast<char*>(&end_) -
    reinterpret_cast<char*>(&start_)) + sizeof(end_));
  // @@protoc_insertion_point(copy_constructor:google.genomics.v1.StreamVariantsRequest)
}

void StreamVariantsRequest::SharedCtor() {
  project_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  variant_set_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  reference_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&start_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&end_) -
      reinterpret_cast<char*>(&start_)) + sizeof(end_));
  _cached_size_ = 0;
}

StreamVariantsRequest::~StreamVariantsRequest() {
  // @@protoc_insertion_point(destructor:google.genomics.v1.StreamVariantsRequest)
  SharedDtor();
}

void StreamVariantsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  project_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  variant_set_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  reference_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void StreamVariantsRequest::ArenaDtor(void* object) {
  StreamVariantsRequest* _this = reinterpret_cast< StreamVariantsRequest* >(object);
  (void)_this;
}
void StreamVariantsRequest::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void StreamVariantsRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StreamVariantsRequest::descriptor() {
  ::protobuf_google_2fgenomics_2fv1_2fvariants_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fgenomics_2fv1_2fvariants_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const StreamVariantsRequest& StreamVariantsRequest::default_instance() {
  ::protobuf_google_2fgenomics_2fv1_2fvariants_2eproto::InitDefaultsStreamVariantsRequest();
  return *internal_default_instance();
}

StreamVariantsRequest* StreamVariantsRequest::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<StreamVariantsRequest>(arena);
}

void StreamVariantsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.genomics.v1.StreamVariantsRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  call_set_ids_.Clear();
  project_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  variant_set_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  reference_name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  ::memset(&start_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&end_) -
      reinterpret_cast<char*>(&start_)) + sizeof(end_));
  _internal_metadata_.Clear();
}

bool StreamVariantsRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.genomics.v1.StreamVariantsRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string project_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_project_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->project_id().data(), static_cast<int>(this->project_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.genomics.v1.StreamVariantsRequest.project_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string variant_set_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_variant_set_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->variant_set_id().data(), static_cast<int>(this->variant_set_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.genomics.v1.StreamVariantsRequest.variant_set_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string call_set_ids = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_call_set_ids()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->call_set_ids(this->call_set_ids_size() - 1).data(),
            static_cast<int>(this->call_set_ids(this->call_set_ids_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.genomics.v1.StreamVariantsRequest.call_set_ids"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string reference_name = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_reference_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->reference_name().data(), static_cast<int>(this->reference_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.genomics.v1.StreamVariantsRequest.reference_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 start = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &start_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 end = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &end_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.genomics.v1.StreamVariantsRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.genomics.v1.StreamVariantsRequest)
  return false;
#undef DO_
}

void StreamVariantsRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.genomics.v1.StreamVariantsRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string project_id = 1;
  if (this->project_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->project_id().data(), static_cast<int>(this->project_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.StreamVariantsRequest.project_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->project_id(), output);
  }

  // string variant_set_id = 2;
  if (this->variant_set_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->variant_set_id().data(), static_cast<int>(this->variant_set_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.StreamVariantsRequest.variant_set_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->variant_set_id(), output);
  }

  // repeated string call_set_ids = 3;
  for (int i = 0, n = this->call_set_ids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->call_set_ids(i).data(), static_cast<int>(this->call_set_ids(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.StreamVariantsRequest.call_set_ids");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->call_set_ids(i), output);
  }

  // string reference_name = 4;
  if (this->reference_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->reference_name().data(), static_cast<int>(this->reference_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.StreamVariantsRequest.reference_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->reference_name(), output);
  }

  // int64 start = 5;
  if (this->start() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->start(), output);
  }

  // int64 end = 6;
  if (this->end() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->end(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:google.genomics.v1.StreamVariantsRequest)
}

::google::protobuf::uint8* StreamVariantsRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.genomics.v1.StreamVariantsRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string project_id = 1;
  if (this->project_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->project_id().data(), static_cast<int>(this->project_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.StreamVariantsRequest.project_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->project_id(), target);
  }

  // string variant_set_id = 2;
  if (this->variant_set_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->variant_set_id().data(), static_cast<int>(this->variant_set_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.StreamVariantsRequest.variant_set_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->variant_set_id(), target);
  }

  // repeated string call_set_ids = 3;
  for (int i = 0, n = this->call_set_ids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->call_set_ids(i).data(), static_cast<int>(this->call_set_ids(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.StreamVariantsRequest.call_set_ids");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->call_set_ids(i), target);
  }

  // string reference_name = 4;
  if (this->reference_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->reference_name().data(), static_cast<int>(this->reference_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.StreamVariantsRequest.reference_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->reference_name(), target);
  }

  // int64 start = 5;
  if (this->start() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->start(), target);
  }

  // int64 end = 6;
  if (this->end() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->end(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.genomics.v1.StreamVariantsRequest)
  return target;
}

size_t StreamVariantsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.genomics.v1.StreamVariantsRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated string call_set_ids = 3;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->call_set_ids_size());
  for (int i = 0, n = this->call_set_ids_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->call_set_ids(i));
  }

  // string project_id = 1;
  if (this->project_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->project_id());
  }

  // string variant_set_id = 2;
  if (this->variant_set_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->variant_set_id());
  }

  // string reference_name = 4;
  if (this->reference_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->reference_name());
  }

  // int64 start = 5;
  if (this->start() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->start());
  }

  // int64 end = 6;
  if (this->end() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->end());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StreamVariantsRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.genomics.v1.StreamVariantsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const StreamVariantsRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const StreamVariantsRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.genomics.v1.StreamVariantsRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.genomics.v1.StreamVariantsRequest)
    MergeFrom(*source);
  }
}

void StreamVariantsRequest::MergeFrom(const StreamVariantsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.genomics.v1.StreamVariantsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  call_set_ids_.MergeFrom(from.call_set_ids_);
  if (from.project_id().size() > 0) {
    set_project_id(from.project_id());
  }
  if (from.variant_set_id().size() > 0) {
    set_variant_set_id(from.variant_set_id());
  }
  if (from.reference_name().size() > 0) {
    set_reference_name(from.reference_name());
  }
  if (from.start() != 0) {
    set_start(from.start());
  }
  if (from.end() != 0) {
    set_end(from.end());
  }
}

void StreamVariantsRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.genomics.v1.StreamVariantsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StreamVariantsRequest::CopyFrom(const StreamVariantsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.genomics.v1.StreamVariantsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StreamVariantsRequest::IsInitialized() const {
  return true;
}

void StreamVariantsRequest::Swap(StreamVariantsRequest* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    StreamVariantsRequest* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void StreamVariantsRequest::UnsafeArenaSwap(StreamVariantsRequest* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void StreamVariantsRequest::InternalSwap(StreamVariantsRequest* other) {
  using std::swap;
  call_set_ids_.InternalSwap(&other->call_set_ids_);
  project_id_.Swap(&other->project_id_);
  variant_set_id_.Swap(&other->variant_set_id_);
  reference_name_.Swap(&other->reference_name_);
  swap(start_, other->start_);
  swap(end_, other->end_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata StreamVariantsRequest::GetMetadata() const {
  protobuf_google_2fgenomics_2fv1_2fvariants_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fgenomics_2fv1_2fvariants_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void StreamVariantsResponse::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StreamVariantsResponse::kVariantsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StreamVariantsResponse::StreamVariantsResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_google_2fgenomics_2fv1_2fvariants_2eproto::InitDefaultsStreamVariantsResponse();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.genomics.v1.StreamVariantsResponse)
}
StreamVariantsResponse::StreamVariantsResponse(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  variants_(arena) {
  ::protobuf_google_2fgenomics_2fv1_2fvariants_2eproto::InitDefaultsStreamVariantsResponse();
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.genomics.v1.StreamVariantsResponse)
}
StreamVariantsResponse::StreamVariantsResponse(const StreamVariantsResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      variants_(from.variants_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:google.genomics.v1.StreamVariantsResponse)
}

void StreamVariantsResponse::SharedCtor() {
  _cached_size_ = 0;
}

StreamVariantsResponse::~StreamVariantsResponse() {
  // @@protoc_insertion_point(destructor:google.genomics.v1.StreamVariantsResponse)
  SharedDtor();
}

void StreamVariantsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
}

void StreamVariantsResponse::ArenaDtor(void* object) {
  StreamVariantsResponse* _this = reinterpret_cast< StreamVariantsResponse* >(object);
  (void)_this;
}
void StreamVariantsResponse::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void StreamVariantsResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StreamVariantsResponse::descriptor() {
  ::protobuf_google_2fgenomics_2fv1_2fvariants_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fgenomics_2fv1_2fvariants_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const StreamVariantsResponse& StreamVariantsResponse::default_instance() {
  ::protobuf_google_2fgenomics_2fv1_2fvariants_2eproto::InitDefaultsStreamVariantsResponse();
  return *internal_default_instance();
}

StreamVariantsResponse* StreamVariantsResponse::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<StreamVariantsResponse>(arena);
}

void StreamVariantsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:google.genomics.v1.StreamVariantsResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  variants_.Clear();
  _internal_metadata_.Clear();
}

bool StreamVariantsResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.genomics.v1.StreamVariantsResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .google.genomics.v1.Variant variants = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_variants()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.genomics.v1.StreamVariantsResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.genomics.v1.StreamVariantsResponse)
  return false;
#undef DO_
}

void StreamVariantsResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.genomics.v1.StreamVariantsResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .google.genomics.v1.Variant variants = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->variants_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->variants(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:google.genomics.v1.StreamVariantsResponse)
}

::google::protobuf::uint8* StreamVariantsResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.genomics.v1.StreamVariantsResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .google.genomics.v1.Variant variants = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->variants_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->variants(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.genomics.v1.StreamVariantsResponse)
  return target;
}

size_t StreamVariantsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.genomics.v1.StreamVariantsResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .google.genomics.v1.Variant variants = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->variants_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->variants(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StreamVariantsResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.genomics.v1.StreamVariantsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const StreamVariantsResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const StreamVariantsResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.genomics.v1.StreamVariantsResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.genomics.v1.StreamVariantsResponse)
    MergeFrom(*source);
  }
}

void StreamVariantsResponse::MergeFrom(const StreamVariantsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.genomics.v1.StreamVariantsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  variants_.MergeFrom(from.variants_);
}

void StreamVariantsResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.genomics.v1.StreamVariantsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StreamVariantsResponse::CopyFrom(const StreamVariantsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.genomics.v1.StreamVariantsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StreamVariantsResponse::IsInitialized() const {
  return true;
}

void StreamVariantsResponse::Swap(StreamVariantsResponse* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    StreamVariantsResponse* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void StreamVariantsResponse::UnsafeArenaSwap(StreamVariantsResponse* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void StreamVariantsResponse::InternalSwap(StreamVariantsResponse* other) {
  using std::swap;
  variants_.InternalSwap(&other->variants_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata StreamVariantsResponse::GetMetadata() const {
  protobuf_google_2fgenomics_2fv1_2fvariants_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fgenomics_2fv1_2fvariants_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace genomics
}  // namespace google

// @@protoc_insertion_point(global_scope)
