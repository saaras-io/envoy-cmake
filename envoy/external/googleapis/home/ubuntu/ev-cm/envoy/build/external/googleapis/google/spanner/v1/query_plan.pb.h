// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/spanner/v1/query_plan.proto

#ifndef PROTOBUF_google_2fspanner_2fv1_2fquery_5fplan_2eproto__INCLUDED
#define PROTOBUF_google_2fspanner_2fv1_2fquery_5fplan_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "google/api/annotations.pb.h"
#include <google/protobuf/struct.pb.h>
// @@protoc_insertion_point(includes)

namespace protobuf_google_2fspanner_2fv1_2fquery_5fplan_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[5];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsPlanNode_ChildLinkImpl();
void InitDefaultsPlanNode_ChildLink();
void InitDefaultsPlanNode_ShortRepresentation_SubqueriesEntry_DoNotUseImpl();
void InitDefaultsPlanNode_ShortRepresentation_SubqueriesEntry_DoNotUse();
void InitDefaultsPlanNode_ShortRepresentationImpl();
void InitDefaultsPlanNode_ShortRepresentation();
void InitDefaultsPlanNodeImpl();
void InitDefaultsPlanNode();
void InitDefaultsQueryPlanImpl();
void InitDefaultsQueryPlan();
inline void InitDefaults() {
  InitDefaultsPlanNode_ChildLink();
  InitDefaultsPlanNode_ShortRepresentation_SubqueriesEntry_DoNotUse();
  InitDefaultsPlanNode_ShortRepresentation();
  InitDefaultsPlanNode();
  InitDefaultsQueryPlan();
}
}  // namespace protobuf_google_2fspanner_2fv1_2fquery_5fplan_2eproto
namespace google {
namespace spanner {
namespace v1 {
class PlanNode;
class PlanNodeDefaultTypeInternal;
extern PlanNodeDefaultTypeInternal _PlanNode_default_instance_;
class PlanNode_ChildLink;
class PlanNode_ChildLinkDefaultTypeInternal;
extern PlanNode_ChildLinkDefaultTypeInternal _PlanNode_ChildLink_default_instance_;
class PlanNode_ShortRepresentation;
class PlanNode_ShortRepresentationDefaultTypeInternal;
extern PlanNode_ShortRepresentationDefaultTypeInternal _PlanNode_ShortRepresentation_default_instance_;
class PlanNode_ShortRepresentation_SubqueriesEntry_DoNotUse;
class PlanNode_ShortRepresentation_SubqueriesEntry_DoNotUseDefaultTypeInternal;
extern PlanNode_ShortRepresentation_SubqueriesEntry_DoNotUseDefaultTypeInternal _PlanNode_ShortRepresentation_SubqueriesEntry_DoNotUse_default_instance_;
class QueryPlan;
class QueryPlanDefaultTypeInternal;
extern QueryPlanDefaultTypeInternal _QueryPlan_default_instance_;
}  // namespace v1
}  // namespace spanner
}  // namespace google
namespace google {
namespace spanner {
namespace v1 {

enum PlanNode_Kind {
  PlanNode_Kind_KIND_UNSPECIFIED = 0,
  PlanNode_Kind_RELATIONAL = 1,
  PlanNode_Kind_SCALAR = 2,
  PlanNode_Kind_PlanNode_Kind_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  PlanNode_Kind_PlanNode_Kind_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool PlanNode_Kind_IsValid(int value);
const PlanNode_Kind PlanNode_Kind_Kind_MIN = PlanNode_Kind_KIND_UNSPECIFIED;
const PlanNode_Kind PlanNode_Kind_Kind_MAX = PlanNode_Kind_SCALAR;
const int PlanNode_Kind_Kind_ARRAYSIZE = PlanNode_Kind_Kind_MAX + 1;

const ::google::protobuf::EnumDescriptor* PlanNode_Kind_descriptor();
inline const ::std::string& PlanNode_Kind_Name(PlanNode_Kind value) {
  return ::google::protobuf::internal::NameOfEnum(
    PlanNode_Kind_descriptor(), value);
}
inline bool PlanNode_Kind_Parse(
    const ::std::string& name, PlanNode_Kind* value) {
  return ::google::protobuf::internal::ParseNamedEnum<PlanNode_Kind>(
    PlanNode_Kind_descriptor(), name, value);
}
// ===================================================================

class PlanNode_ChildLink : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.spanner.v1.PlanNode.ChildLink) */ {
 public:
  PlanNode_ChildLink();
  virtual ~PlanNode_ChildLink();

  PlanNode_ChildLink(const PlanNode_ChildLink& from);

  inline PlanNode_ChildLink& operator=(const PlanNode_ChildLink& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PlanNode_ChildLink(PlanNode_ChildLink&& from) noexcept
    : PlanNode_ChildLink() {
    *this = ::std::move(from);
  }

  inline PlanNode_ChildLink& operator=(PlanNode_ChildLink&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PlanNode_ChildLink& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PlanNode_ChildLink* internal_default_instance() {
    return reinterpret_cast<const PlanNode_ChildLink*>(
               &_PlanNode_ChildLink_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(PlanNode_ChildLink* other);
  friend void swap(PlanNode_ChildLink& a, PlanNode_ChildLink& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PlanNode_ChildLink* New() const PROTOBUF_FINAL { return New(NULL); }

  PlanNode_ChildLink* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const PlanNode_ChildLink& from);
  void MergeFrom(const PlanNode_ChildLink& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(PlanNode_ChildLink* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string type = 2;
  void clear_type();
  static const int kTypeFieldNumber = 2;
  const ::std::string& type() const;
  void set_type(const ::std::string& value);
  #if LANG_CXX11
  void set_type(::std::string&& value);
  #endif
  void set_type(const char* value);
  void set_type(const char* value, size_t size);
  ::std::string* mutable_type();
  ::std::string* release_type();
  void set_allocated_type(::std::string* type);

  // string variable = 3;
  void clear_variable();
  static const int kVariableFieldNumber = 3;
  const ::std::string& variable() const;
  void set_variable(const ::std::string& value);
  #if LANG_CXX11
  void set_variable(::std::string&& value);
  #endif
  void set_variable(const char* value);
  void set_variable(const char* value, size_t size);
  ::std::string* mutable_variable();
  ::std::string* release_variable();
  void set_allocated_variable(::std::string* variable);

  // int32 child_index = 1;
  void clear_child_index();
  static const int kChildIndexFieldNumber = 1;
  ::google::protobuf::int32 child_index() const;
  void set_child_index(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:google.spanner.v1.PlanNode.ChildLink)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr type_;
  ::google::protobuf::internal::ArenaStringPtr variable_;
  ::google::protobuf::int32 child_index_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fspanner_2fv1_2fquery_5fplan_2eproto::TableStruct;
  friend void ::protobuf_google_2fspanner_2fv1_2fquery_5fplan_2eproto::InitDefaultsPlanNode_ChildLinkImpl();
};
// -------------------------------------------------------------------

class PlanNode_ShortRepresentation_SubqueriesEntry_DoNotUse : public ::google::protobuf::internal::MapEntry<PlanNode_ShortRepresentation_SubqueriesEntry_DoNotUse, 
    ::std::string, ::google::protobuf::int32,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_INT32,
    0 > {
public:
  typedef ::google::protobuf::internal::MapEntry<PlanNode_ShortRepresentation_SubqueriesEntry_DoNotUse, 
    ::std::string, ::google::protobuf::int32,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_INT32,
    0 > SuperType;
  PlanNode_ShortRepresentation_SubqueriesEntry_DoNotUse();
  PlanNode_ShortRepresentation_SubqueriesEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const PlanNode_ShortRepresentation_SubqueriesEntry_DoNotUse& other);
  static const PlanNode_ShortRepresentation_SubqueriesEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const PlanNode_ShortRepresentation_SubqueriesEntry_DoNotUse*>(&_PlanNode_ShortRepresentation_SubqueriesEntry_DoNotUse_default_instance_); }
  void MergeFrom(const ::google::protobuf::Message& other) PROTOBUF_FINAL;
  ::google::protobuf::Metadata GetMetadata() const;
};

// -------------------------------------------------------------------

class PlanNode_ShortRepresentation : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.spanner.v1.PlanNode.ShortRepresentation) */ {
 public:
  PlanNode_ShortRepresentation();
  virtual ~PlanNode_ShortRepresentation();

  PlanNode_ShortRepresentation(const PlanNode_ShortRepresentation& from);

  inline PlanNode_ShortRepresentation& operator=(const PlanNode_ShortRepresentation& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PlanNode_ShortRepresentation(PlanNode_ShortRepresentation&& from) noexcept
    : PlanNode_ShortRepresentation() {
    *this = ::std::move(from);
  }

  inline PlanNode_ShortRepresentation& operator=(PlanNode_ShortRepresentation&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PlanNode_ShortRepresentation& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PlanNode_ShortRepresentation* internal_default_instance() {
    return reinterpret_cast<const PlanNode_ShortRepresentation*>(
               &_PlanNode_ShortRepresentation_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(PlanNode_ShortRepresentation* other);
  friend void swap(PlanNode_ShortRepresentation& a, PlanNode_ShortRepresentation& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PlanNode_ShortRepresentation* New() const PROTOBUF_FINAL { return New(NULL); }

  PlanNode_ShortRepresentation* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const PlanNode_ShortRepresentation& from);
  void MergeFrom(const PlanNode_ShortRepresentation& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(PlanNode_ShortRepresentation* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // map<string, int32> subqueries = 2;
  int subqueries_size() const;
  void clear_subqueries();
  static const int kSubqueriesFieldNumber = 2;
  const ::google::protobuf::Map< ::std::string, ::google::protobuf::int32 >&
      subqueries() const;
  ::google::protobuf::Map< ::std::string, ::google::protobuf::int32 >*
      mutable_subqueries();

  // string description = 1;
  void clear_description();
  static const int kDescriptionFieldNumber = 1;
  const ::std::string& description() const;
  void set_description(const ::std::string& value);
  #if LANG_CXX11
  void set_description(::std::string&& value);
  #endif
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  ::std::string* mutable_description();
  ::std::string* release_description();
  void set_allocated_description(::std::string* description);

  // @@protoc_insertion_point(class_scope:google.spanner.v1.PlanNode.ShortRepresentation)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::MapField<
      PlanNode_ShortRepresentation_SubqueriesEntry_DoNotUse,
      ::std::string, ::google::protobuf::int32,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_INT32,
      0 > subqueries_;
  ::google::protobuf::internal::ArenaStringPtr description_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fspanner_2fv1_2fquery_5fplan_2eproto::TableStruct;
  friend void ::protobuf_google_2fspanner_2fv1_2fquery_5fplan_2eproto::InitDefaultsPlanNode_ShortRepresentationImpl();
};
// -------------------------------------------------------------------

class PlanNode : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.spanner.v1.PlanNode) */ {
 public:
  PlanNode();
  virtual ~PlanNode();

  PlanNode(const PlanNode& from);

  inline PlanNode& operator=(const PlanNode& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PlanNode(PlanNode&& from) noexcept
    : PlanNode() {
    *this = ::std::move(from);
  }

  inline PlanNode& operator=(PlanNode&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PlanNode& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PlanNode* internal_default_instance() {
    return reinterpret_cast<const PlanNode*>(
               &_PlanNode_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(PlanNode* other);
  friend void swap(PlanNode& a, PlanNode& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PlanNode* New() const PROTOBUF_FINAL { return New(NULL); }

  PlanNode* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const PlanNode& from);
  void MergeFrom(const PlanNode& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(PlanNode* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef PlanNode_ChildLink ChildLink;
  typedef PlanNode_ShortRepresentation ShortRepresentation;

  typedef PlanNode_Kind Kind;
  static const Kind KIND_UNSPECIFIED =
    PlanNode_Kind_KIND_UNSPECIFIED;
  static const Kind RELATIONAL =
    PlanNode_Kind_RELATIONAL;
  static const Kind SCALAR =
    PlanNode_Kind_SCALAR;
  static inline bool Kind_IsValid(int value) {
    return PlanNode_Kind_IsValid(value);
  }
  static const Kind Kind_MIN =
    PlanNode_Kind_Kind_MIN;
  static const Kind Kind_MAX =
    PlanNode_Kind_Kind_MAX;
  static const int Kind_ARRAYSIZE =
    PlanNode_Kind_Kind_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Kind_descriptor() {
    return PlanNode_Kind_descriptor();
  }
  static inline const ::std::string& Kind_Name(Kind value) {
    return PlanNode_Kind_Name(value);
  }
  static inline bool Kind_Parse(const ::std::string& name,
      Kind* value) {
    return PlanNode_Kind_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated .google.spanner.v1.PlanNode.ChildLink child_links = 4;
  int child_links_size() const;
  void clear_child_links();
  static const int kChildLinksFieldNumber = 4;
  const ::google::spanner::v1::PlanNode_ChildLink& child_links(int index) const;
  ::google::spanner::v1::PlanNode_ChildLink* mutable_child_links(int index);
  ::google::spanner::v1::PlanNode_ChildLink* add_child_links();
  ::google::protobuf::RepeatedPtrField< ::google::spanner::v1::PlanNode_ChildLink >*
      mutable_child_links();
  const ::google::protobuf::RepeatedPtrField< ::google::spanner::v1::PlanNode_ChildLink >&
      child_links() const;

  // string display_name = 3;
  void clear_display_name();
  static const int kDisplayNameFieldNumber = 3;
  const ::std::string& display_name() const;
  void set_display_name(const ::std::string& value);
  #if LANG_CXX11
  void set_display_name(::std::string&& value);
  #endif
  void set_display_name(const char* value);
  void set_display_name(const char* value, size_t size);
  ::std::string* mutable_display_name();
  ::std::string* release_display_name();
  void set_allocated_display_name(::std::string* display_name);

  // .google.spanner.v1.PlanNode.ShortRepresentation short_representation = 5;
  bool has_short_representation() const;
  void clear_short_representation();
  static const int kShortRepresentationFieldNumber = 5;
  const ::google::spanner::v1::PlanNode_ShortRepresentation& short_representation() const;
  ::google::spanner::v1::PlanNode_ShortRepresentation* release_short_representation();
  ::google::spanner::v1::PlanNode_ShortRepresentation* mutable_short_representation();
  void set_allocated_short_representation(::google::spanner::v1::PlanNode_ShortRepresentation* short_representation);

  // .google.protobuf.Struct metadata = 6;
  bool has_metadata() const;
  void clear_metadata();
  static const int kMetadataFieldNumber = 6;
  const ::google::protobuf::Struct& metadata() const;
  ::google::protobuf::Struct* release_metadata();
  ::google::protobuf::Struct* mutable_metadata();
  void set_allocated_metadata(::google::protobuf::Struct* metadata);

  // .google.protobuf.Struct execution_stats = 7;
  bool has_execution_stats() const;
  void clear_execution_stats();
  static const int kExecutionStatsFieldNumber = 7;
  const ::google::protobuf::Struct& execution_stats() const;
  ::google::protobuf::Struct* release_execution_stats();
  ::google::protobuf::Struct* mutable_execution_stats();
  void set_allocated_execution_stats(::google::protobuf::Struct* execution_stats);

  // int32 index = 1;
  void clear_index();
  static const int kIndexFieldNumber = 1;
  ::google::protobuf::int32 index() const;
  void set_index(::google::protobuf::int32 value);

  // .google.spanner.v1.PlanNode.Kind kind = 2;
  void clear_kind();
  static const int kKindFieldNumber = 2;
  ::google::spanner::v1::PlanNode_Kind kind() const;
  void set_kind(::google::spanner::v1::PlanNode_Kind value);

  // @@protoc_insertion_point(class_scope:google.spanner.v1.PlanNode)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::google::spanner::v1::PlanNode_ChildLink > child_links_;
  ::google::protobuf::internal::ArenaStringPtr display_name_;
  ::google::spanner::v1::PlanNode_ShortRepresentation* short_representation_;
  ::google::protobuf::Struct* metadata_;
  ::google::protobuf::Struct* execution_stats_;
  ::google::protobuf::int32 index_;
  int kind_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fspanner_2fv1_2fquery_5fplan_2eproto::TableStruct;
  friend void ::protobuf_google_2fspanner_2fv1_2fquery_5fplan_2eproto::InitDefaultsPlanNodeImpl();
};
// -------------------------------------------------------------------

class QueryPlan : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.spanner.v1.QueryPlan) */ {
 public:
  QueryPlan();
  virtual ~QueryPlan();

  QueryPlan(const QueryPlan& from);

  inline QueryPlan& operator=(const QueryPlan& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  QueryPlan(QueryPlan&& from) noexcept
    : QueryPlan() {
    *this = ::std::move(from);
  }

  inline QueryPlan& operator=(QueryPlan&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const QueryPlan& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const QueryPlan* internal_default_instance() {
    return reinterpret_cast<const QueryPlan*>(
               &_QueryPlan_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(QueryPlan* other);
  friend void swap(QueryPlan& a, QueryPlan& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline QueryPlan* New() const PROTOBUF_FINAL { return New(NULL); }

  QueryPlan* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const QueryPlan& from);
  void MergeFrom(const QueryPlan& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(QueryPlan* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .google.spanner.v1.PlanNode plan_nodes = 1;
  int plan_nodes_size() const;
  void clear_plan_nodes();
  static const int kPlanNodesFieldNumber = 1;
  const ::google::spanner::v1::PlanNode& plan_nodes(int index) const;
  ::google::spanner::v1::PlanNode* mutable_plan_nodes(int index);
  ::google::spanner::v1::PlanNode* add_plan_nodes();
  ::google::protobuf::RepeatedPtrField< ::google::spanner::v1::PlanNode >*
      mutable_plan_nodes();
  const ::google::protobuf::RepeatedPtrField< ::google::spanner::v1::PlanNode >&
      plan_nodes() const;

  // @@protoc_insertion_point(class_scope:google.spanner.v1.QueryPlan)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::google::spanner::v1::PlanNode > plan_nodes_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fspanner_2fv1_2fquery_5fplan_2eproto::TableStruct;
  friend void ::protobuf_google_2fspanner_2fv1_2fquery_5fplan_2eproto::InitDefaultsQueryPlanImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// PlanNode_ChildLink

// int32 child_index = 1;
inline void PlanNode_ChildLink::clear_child_index() {
  child_index_ = 0;
}
inline ::google::protobuf::int32 PlanNode_ChildLink::child_index() const {
  // @@protoc_insertion_point(field_get:google.spanner.v1.PlanNode.ChildLink.child_index)
  return child_index_;
}
inline void PlanNode_ChildLink::set_child_index(::google::protobuf::int32 value) {
  
  child_index_ = value;
  // @@protoc_insertion_point(field_set:google.spanner.v1.PlanNode.ChildLink.child_index)
}

// string type = 2;
inline void PlanNode_ChildLink::clear_type() {
  type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PlanNode_ChildLink::type() const {
  // @@protoc_insertion_point(field_get:google.spanner.v1.PlanNode.ChildLink.type)
  return type_.GetNoArena();
}
inline void PlanNode_ChildLink::set_type(const ::std::string& value) {
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.spanner.v1.PlanNode.ChildLink.type)
}
#if LANG_CXX11
inline void PlanNode_ChildLink::set_type(::std::string&& value) {
  
  type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.spanner.v1.PlanNode.ChildLink.type)
}
#endif
inline void PlanNode_ChildLink::set_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.spanner.v1.PlanNode.ChildLink.type)
}
inline void PlanNode_ChildLink::set_type(const char* value, size_t size) {
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.spanner.v1.PlanNode.ChildLink.type)
}
inline ::std::string* PlanNode_ChildLink::mutable_type() {
  
  // @@protoc_insertion_point(field_mutable:google.spanner.v1.PlanNode.ChildLink.type)
  return type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PlanNode_ChildLink::release_type() {
  // @@protoc_insertion_point(field_release:google.spanner.v1.PlanNode.ChildLink.type)
  
  return type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PlanNode_ChildLink::set_allocated_type(::std::string* type) {
  if (type != NULL) {
    
  } else {
    
  }
  type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), type);
  // @@protoc_insertion_point(field_set_allocated:google.spanner.v1.PlanNode.ChildLink.type)
}

// string variable = 3;
inline void PlanNode_ChildLink::clear_variable() {
  variable_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PlanNode_ChildLink::variable() const {
  // @@protoc_insertion_point(field_get:google.spanner.v1.PlanNode.ChildLink.variable)
  return variable_.GetNoArena();
}
inline void PlanNode_ChildLink::set_variable(const ::std::string& value) {
  
  variable_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.spanner.v1.PlanNode.ChildLink.variable)
}
#if LANG_CXX11
inline void PlanNode_ChildLink::set_variable(::std::string&& value) {
  
  variable_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.spanner.v1.PlanNode.ChildLink.variable)
}
#endif
inline void PlanNode_ChildLink::set_variable(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  variable_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.spanner.v1.PlanNode.ChildLink.variable)
}
inline void PlanNode_ChildLink::set_variable(const char* value, size_t size) {
  
  variable_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.spanner.v1.PlanNode.ChildLink.variable)
}
inline ::std::string* PlanNode_ChildLink::mutable_variable() {
  
  // @@protoc_insertion_point(field_mutable:google.spanner.v1.PlanNode.ChildLink.variable)
  return variable_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PlanNode_ChildLink::release_variable() {
  // @@protoc_insertion_point(field_release:google.spanner.v1.PlanNode.ChildLink.variable)
  
  return variable_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PlanNode_ChildLink::set_allocated_variable(::std::string* variable) {
  if (variable != NULL) {
    
  } else {
    
  }
  variable_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), variable);
  // @@protoc_insertion_point(field_set_allocated:google.spanner.v1.PlanNode.ChildLink.variable)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// PlanNode_ShortRepresentation

// string description = 1;
inline void PlanNode_ShortRepresentation::clear_description() {
  description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PlanNode_ShortRepresentation::description() const {
  // @@protoc_insertion_point(field_get:google.spanner.v1.PlanNode.ShortRepresentation.description)
  return description_.GetNoArena();
}
inline void PlanNode_ShortRepresentation::set_description(const ::std::string& value) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.spanner.v1.PlanNode.ShortRepresentation.description)
}
#if LANG_CXX11
inline void PlanNode_ShortRepresentation::set_description(::std::string&& value) {
  
  description_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.spanner.v1.PlanNode.ShortRepresentation.description)
}
#endif
inline void PlanNode_ShortRepresentation::set_description(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.spanner.v1.PlanNode.ShortRepresentation.description)
}
inline void PlanNode_ShortRepresentation::set_description(const char* value, size_t size) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.spanner.v1.PlanNode.ShortRepresentation.description)
}
inline ::std::string* PlanNode_ShortRepresentation::mutable_description() {
  
  // @@protoc_insertion_point(field_mutable:google.spanner.v1.PlanNode.ShortRepresentation.description)
  return description_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PlanNode_ShortRepresentation::release_description() {
  // @@protoc_insertion_point(field_release:google.spanner.v1.PlanNode.ShortRepresentation.description)
  
  return description_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PlanNode_ShortRepresentation::set_allocated_description(::std::string* description) {
  if (description != NULL) {
    
  } else {
    
  }
  description_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:google.spanner.v1.PlanNode.ShortRepresentation.description)
}

// map<string, int32> subqueries = 2;
inline int PlanNode_ShortRepresentation::subqueries_size() const {
  return subqueries_.size();
}
inline void PlanNode_ShortRepresentation::clear_subqueries() {
  subqueries_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::google::protobuf::int32 >&
PlanNode_ShortRepresentation::subqueries() const {
  // @@protoc_insertion_point(field_map:google.spanner.v1.PlanNode.ShortRepresentation.subqueries)
  return subqueries_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::google::protobuf::int32 >*
PlanNode_ShortRepresentation::mutable_subqueries() {
  // @@protoc_insertion_point(field_mutable_map:google.spanner.v1.PlanNode.ShortRepresentation.subqueries)
  return subqueries_.MutableMap();
}

// -------------------------------------------------------------------

// PlanNode

// int32 index = 1;
inline void PlanNode::clear_index() {
  index_ = 0;
}
inline ::google::protobuf::int32 PlanNode::index() const {
  // @@protoc_insertion_point(field_get:google.spanner.v1.PlanNode.index)
  return index_;
}
inline void PlanNode::set_index(::google::protobuf::int32 value) {
  
  index_ = value;
  // @@protoc_insertion_point(field_set:google.spanner.v1.PlanNode.index)
}

// .google.spanner.v1.PlanNode.Kind kind = 2;
inline void PlanNode::clear_kind() {
  kind_ = 0;
}
inline ::google::spanner::v1::PlanNode_Kind PlanNode::kind() const {
  // @@protoc_insertion_point(field_get:google.spanner.v1.PlanNode.kind)
  return static_cast< ::google::spanner::v1::PlanNode_Kind >(kind_);
}
inline void PlanNode::set_kind(::google::spanner::v1::PlanNode_Kind value) {
  
  kind_ = value;
  // @@protoc_insertion_point(field_set:google.spanner.v1.PlanNode.kind)
}

// string display_name = 3;
inline void PlanNode::clear_display_name() {
  display_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PlanNode::display_name() const {
  // @@protoc_insertion_point(field_get:google.spanner.v1.PlanNode.display_name)
  return display_name_.GetNoArena();
}
inline void PlanNode::set_display_name(const ::std::string& value) {
  
  display_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.spanner.v1.PlanNode.display_name)
}
#if LANG_CXX11
inline void PlanNode::set_display_name(::std::string&& value) {
  
  display_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.spanner.v1.PlanNode.display_name)
}
#endif
inline void PlanNode::set_display_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  display_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.spanner.v1.PlanNode.display_name)
}
inline void PlanNode::set_display_name(const char* value, size_t size) {
  
  display_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.spanner.v1.PlanNode.display_name)
}
inline ::std::string* PlanNode::mutable_display_name() {
  
  // @@protoc_insertion_point(field_mutable:google.spanner.v1.PlanNode.display_name)
  return display_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PlanNode::release_display_name() {
  // @@protoc_insertion_point(field_release:google.spanner.v1.PlanNode.display_name)
  
  return display_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PlanNode::set_allocated_display_name(::std::string* display_name) {
  if (display_name != NULL) {
    
  } else {
    
  }
  display_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), display_name);
  // @@protoc_insertion_point(field_set_allocated:google.spanner.v1.PlanNode.display_name)
}

// repeated .google.spanner.v1.PlanNode.ChildLink child_links = 4;
inline int PlanNode::child_links_size() const {
  return child_links_.size();
}
inline void PlanNode::clear_child_links() {
  child_links_.Clear();
}
inline const ::google::spanner::v1::PlanNode_ChildLink& PlanNode::child_links(int index) const {
  // @@protoc_insertion_point(field_get:google.spanner.v1.PlanNode.child_links)
  return child_links_.Get(index);
}
inline ::google::spanner::v1::PlanNode_ChildLink* PlanNode::mutable_child_links(int index) {
  // @@protoc_insertion_point(field_mutable:google.spanner.v1.PlanNode.child_links)
  return child_links_.Mutable(index);
}
inline ::google::spanner::v1::PlanNode_ChildLink* PlanNode::add_child_links() {
  // @@protoc_insertion_point(field_add:google.spanner.v1.PlanNode.child_links)
  return child_links_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::google::spanner::v1::PlanNode_ChildLink >*
PlanNode::mutable_child_links() {
  // @@protoc_insertion_point(field_mutable_list:google.spanner.v1.PlanNode.child_links)
  return &child_links_;
}
inline const ::google::protobuf::RepeatedPtrField< ::google::spanner::v1::PlanNode_ChildLink >&
PlanNode::child_links() const {
  // @@protoc_insertion_point(field_list:google.spanner.v1.PlanNode.child_links)
  return child_links_;
}

// .google.spanner.v1.PlanNode.ShortRepresentation short_representation = 5;
inline bool PlanNode::has_short_representation() const {
  return this != internal_default_instance() && short_representation_ != NULL;
}
inline void PlanNode::clear_short_representation() {
  if (GetArenaNoVirtual() == NULL && short_representation_ != NULL) {
    delete short_representation_;
  }
  short_representation_ = NULL;
}
inline const ::google::spanner::v1::PlanNode_ShortRepresentation& PlanNode::short_representation() const {
  const ::google::spanner::v1::PlanNode_ShortRepresentation* p = short_representation_;
  // @@protoc_insertion_point(field_get:google.spanner.v1.PlanNode.short_representation)
  return p != NULL ? *p : *reinterpret_cast<const ::google::spanner::v1::PlanNode_ShortRepresentation*>(
      &::google::spanner::v1::_PlanNode_ShortRepresentation_default_instance_);
}
inline ::google::spanner::v1::PlanNode_ShortRepresentation* PlanNode::release_short_representation() {
  // @@protoc_insertion_point(field_release:google.spanner.v1.PlanNode.short_representation)
  
  ::google::spanner::v1::PlanNode_ShortRepresentation* temp = short_representation_;
  short_representation_ = NULL;
  return temp;
}
inline ::google::spanner::v1::PlanNode_ShortRepresentation* PlanNode::mutable_short_representation() {
  
  if (short_representation_ == NULL) {
    short_representation_ = new ::google::spanner::v1::PlanNode_ShortRepresentation;
  }
  // @@protoc_insertion_point(field_mutable:google.spanner.v1.PlanNode.short_representation)
  return short_representation_;
}
inline void PlanNode::set_allocated_short_representation(::google::spanner::v1::PlanNode_ShortRepresentation* short_representation) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete short_representation_;
  }
  if (short_representation) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      short_representation = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, short_representation, submessage_arena);
    }
    
  } else {
    
  }
  short_representation_ = short_representation;
  // @@protoc_insertion_point(field_set_allocated:google.spanner.v1.PlanNode.short_representation)
}

// .google.protobuf.Struct metadata = 6;
inline bool PlanNode::has_metadata() const {
  return this != internal_default_instance() && metadata_ != NULL;
}
inline const ::google::protobuf::Struct& PlanNode::metadata() const {
  const ::google::protobuf::Struct* p = metadata_;
  // @@protoc_insertion_point(field_get:google.spanner.v1.PlanNode.metadata)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::Struct*>(
      &::google::protobuf::_Struct_default_instance_);
}
inline ::google::protobuf::Struct* PlanNode::release_metadata() {
  // @@protoc_insertion_point(field_release:google.spanner.v1.PlanNode.metadata)
  
  ::google::protobuf::Struct* temp = metadata_;
  metadata_ = NULL;
  return temp;
}
inline ::google::protobuf::Struct* PlanNode::mutable_metadata() {
  
  if (metadata_ == NULL) {
    metadata_ = new ::google::protobuf::Struct;
  }
  // @@protoc_insertion_point(field_mutable:google.spanner.v1.PlanNode.metadata)
  return metadata_;
}
inline void PlanNode::set_allocated_metadata(::google::protobuf::Struct* metadata) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(metadata_);
  }
  if (metadata) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast< ::google::protobuf::MessageLite*>(metadata)->GetArena();
    if (message_arena != submessage_arena) {
      metadata = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, metadata, submessage_arena);
    }
    
  } else {
    
  }
  metadata_ = metadata;
  // @@protoc_insertion_point(field_set_allocated:google.spanner.v1.PlanNode.metadata)
}

// .google.protobuf.Struct execution_stats = 7;
inline bool PlanNode::has_execution_stats() const {
  return this != internal_default_instance() && execution_stats_ != NULL;
}
inline const ::google::protobuf::Struct& PlanNode::execution_stats() const {
  const ::google::protobuf::Struct* p = execution_stats_;
  // @@protoc_insertion_point(field_get:google.spanner.v1.PlanNode.execution_stats)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::Struct*>(
      &::google::protobuf::_Struct_default_instance_);
}
inline ::google::protobuf::Struct* PlanNode::release_execution_stats() {
  // @@protoc_insertion_point(field_release:google.spanner.v1.PlanNode.execution_stats)
  
  ::google::protobuf::Struct* temp = execution_stats_;
  execution_stats_ = NULL;
  return temp;
}
inline ::google::protobuf::Struct* PlanNode::mutable_execution_stats() {
  
  if (execution_stats_ == NULL) {
    execution_stats_ = new ::google::protobuf::Struct;
  }
  // @@protoc_insertion_point(field_mutable:google.spanner.v1.PlanNode.execution_stats)
  return execution_stats_;
}
inline void PlanNode::set_allocated_execution_stats(::google::protobuf::Struct* execution_stats) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(execution_stats_);
  }
  if (execution_stats) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast< ::google::protobuf::MessageLite*>(execution_stats)->GetArena();
    if (message_arena != submessage_arena) {
      execution_stats = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, execution_stats, submessage_arena);
    }
    
  } else {
    
  }
  execution_stats_ = execution_stats;
  // @@protoc_insertion_point(field_set_allocated:google.spanner.v1.PlanNode.execution_stats)
}

// -------------------------------------------------------------------

// QueryPlan

// repeated .google.spanner.v1.PlanNode plan_nodes = 1;
inline int QueryPlan::plan_nodes_size() const {
  return plan_nodes_.size();
}
inline void QueryPlan::clear_plan_nodes() {
  plan_nodes_.Clear();
}
inline const ::google::spanner::v1::PlanNode& QueryPlan::plan_nodes(int index) const {
  // @@protoc_insertion_point(field_get:google.spanner.v1.QueryPlan.plan_nodes)
  return plan_nodes_.Get(index);
}
inline ::google::spanner::v1::PlanNode* QueryPlan::mutable_plan_nodes(int index) {
  // @@protoc_insertion_point(field_mutable:google.spanner.v1.QueryPlan.plan_nodes)
  return plan_nodes_.Mutable(index);
}
inline ::google::spanner::v1::PlanNode* QueryPlan::add_plan_nodes() {
  // @@protoc_insertion_point(field_add:google.spanner.v1.QueryPlan.plan_nodes)
  return plan_nodes_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::google::spanner::v1::PlanNode >*
QueryPlan::mutable_plan_nodes() {
  // @@protoc_insertion_point(field_mutable_list:google.spanner.v1.QueryPlan.plan_nodes)
  return &plan_nodes_;
}
inline const ::google::protobuf::RepeatedPtrField< ::google::spanner::v1::PlanNode >&
QueryPlan::plan_nodes() const {
  // @@protoc_insertion_point(field_list:google.spanner.v1.QueryPlan.plan_nodes)
  return plan_nodes_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace spanner
}  // namespace google

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::google::spanner::v1::PlanNode_Kind> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::google::spanner::v1::PlanNode_Kind>() {
  return ::google::spanner::v1::PlanNode_Kind_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_google_2fspanner_2fv1_2fquery_5fplan_2eproto__INCLUDED
