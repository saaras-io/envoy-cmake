// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: google/spanner/v1/spanner.proto

#include "google/spanner/v1/spanner.pb.h"
#include "google/spanner/v1/spanner.grpc.pb.h"

#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace google {
namespace spanner {
namespace v1 {

static const char* Spanner_method_names[] = {
  "/google.spanner.v1.Spanner/CreateSession",
  "/google.spanner.v1.Spanner/GetSession",
  "/google.spanner.v1.Spanner/DeleteSession",
  "/google.spanner.v1.Spanner/ExecuteSql",
  "/google.spanner.v1.Spanner/ExecuteStreamingSql",
  "/google.spanner.v1.Spanner/Read",
  "/google.spanner.v1.Spanner/StreamingRead",
  "/google.spanner.v1.Spanner/BeginTransaction",
  "/google.spanner.v1.Spanner/Commit",
  "/google.spanner.v1.Spanner/Rollback",
};

std::unique_ptr< Spanner::Stub> Spanner::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< Spanner::Stub> stub(new Spanner::Stub(channel));
  return stub;
}

Spanner::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_CreateSession_(Spanner_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetSession_(Spanner_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DeleteSession_(Spanner_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ExecuteSql_(Spanner_method_names[3], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ExecuteStreamingSql_(Spanner_method_names[4], ::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_Read_(Spanner_method_names[5], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_StreamingRead_(Spanner_method_names[6], ::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_BeginTransaction_(Spanner_method_names[7], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Commit_(Spanner_method_names[8], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Rollback_(Spanner_method_names[9], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status Spanner::Stub::CreateSession(::grpc::ClientContext* context, const ::google::spanner::v1::CreateSessionRequest& request, ::google::spanner::v1::Session* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_CreateSession_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::google::spanner::v1::Session>* Spanner::Stub::AsyncCreateSessionRaw(::grpc::ClientContext* context, const ::google::spanner::v1::CreateSessionRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::spanner::v1::Session>::Create(channel_.get(), cq, rpcmethod_CreateSession_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::google::spanner::v1::Session>* Spanner::Stub::PrepareAsyncCreateSessionRaw(::grpc::ClientContext* context, const ::google::spanner::v1::CreateSessionRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::spanner::v1::Session>::Create(channel_.get(), cq, rpcmethod_CreateSession_, context, request, false);
}

::grpc::Status Spanner::Stub::GetSession(::grpc::ClientContext* context, const ::google::spanner::v1::GetSessionRequest& request, ::google::spanner::v1::Session* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetSession_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::google::spanner::v1::Session>* Spanner::Stub::AsyncGetSessionRaw(::grpc::ClientContext* context, const ::google::spanner::v1::GetSessionRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::spanner::v1::Session>::Create(channel_.get(), cq, rpcmethod_GetSession_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::google::spanner::v1::Session>* Spanner::Stub::PrepareAsyncGetSessionRaw(::grpc::ClientContext* context, const ::google::spanner::v1::GetSessionRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::spanner::v1::Session>::Create(channel_.get(), cq, rpcmethod_GetSession_, context, request, false);
}

::grpc::Status Spanner::Stub::DeleteSession(::grpc::ClientContext* context, const ::google::spanner::v1::DeleteSessionRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_DeleteSession_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Spanner::Stub::AsyncDeleteSessionRaw(::grpc::ClientContext* context, const ::google::spanner::v1::DeleteSessionRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::protobuf::Empty>::Create(channel_.get(), cq, rpcmethod_DeleteSession_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Spanner::Stub::PrepareAsyncDeleteSessionRaw(::grpc::ClientContext* context, const ::google::spanner::v1::DeleteSessionRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::protobuf::Empty>::Create(channel_.get(), cq, rpcmethod_DeleteSession_, context, request, false);
}

::grpc::Status Spanner::Stub::ExecuteSql(::grpc::ClientContext* context, const ::google::spanner::v1::ExecuteSqlRequest& request, ::google::spanner::v1::ResultSet* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_ExecuteSql_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::google::spanner::v1::ResultSet>* Spanner::Stub::AsyncExecuteSqlRaw(::grpc::ClientContext* context, const ::google::spanner::v1::ExecuteSqlRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::spanner::v1::ResultSet>::Create(channel_.get(), cq, rpcmethod_ExecuteSql_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::google::spanner::v1::ResultSet>* Spanner::Stub::PrepareAsyncExecuteSqlRaw(::grpc::ClientContext* context, const ::google::spanner::v1::ExecuteSqlRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::spanner::v1::ResultSet>::Create(channel_.get(), cq, rpcmethod_ExecuteSql_, context, request, false);
}

::grpc::ClientReader< ::google::spanner::v1::PartialResultSet>* Spanner::Stub::ExecuteStreamingSqlRaw(::grpc::ClientContext* context, const ::google::spanner::v1::ExecuteSqlRequest& request) {
  return ::grpc::internal::ClientReaderFactory< ::google::spanner::v1::PartialResultSet>::Create(channel_.get(), rpcmethod_ExecuteStreamingSql_, context, request);
}

::grpc::ClientAsyncReader< ::google::spanner::v1::PartialResultSet>* Spanner::Stub::AsyncExecuteStreamingSqlRaw(::grpc::ClientContext* context, const ::google::spanner::v1::ExecuteSqlRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::google::spanner::v1::PartialResultSet>::Create(channel_.get(), cq, rpcmethod_ExecuteStreamingSql_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::google::spanner::v1::PartialResultSet>* Spanner::Stub::PrepareAsyncExecuteStreamingSqlRaw(::grpc::ClientContext* context, const ::google::spanner::v1::ExecuteSqlRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::google::spanner::v1::PartialResultSet>::Create(channel_.get(), cq, rpcmethod_ExecuteStreamingSql_, context, request, false, nullptr);
}

::grpc::Status Spanner::Stub::Read(::grpc::ClientContext* context, const ::google::spanner::v1::ReadRequest& request, ::google::spanner::v1::ResultSet* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Read_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::google::spanner::v1::ResultSet>* Spanner::Stub::AsyncReadRaw(::grpc::ClientContext* context, const ::google::spanner::v1::ReadRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::spanner::v1::ResultSet>::Create(channel_.get(), cq, rpcmethod_Read_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::google::spanner::v1::ResultSet>* Spanner::Stub::PrepareAsyncReadRaw(::grpc::ClientContext* context, const ::google::spanner::v1::ReadRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::spanner::v1::ResultSet>::Create(channel_.get(), cq, rpcmethod_Read_, context, request, false);
}

::grpc::ClientReader< ::google::spanner::v1::PartialResultSet>* Spanner::Stub::StreamingReadRaw(::grpc::ClientContext* context, const ::google::spanner::v1::ReadRequest& request) {
  return ::grpc::internal::ClientReaderFactory< ::google::spanner::v1::PartialResultSet>::Create(channel_.get(), rpcmethod_StreamingRead_, context, request);
}

::grpc::ClientAsyncReader< ::google::spanner::v1::PartialResultSet>* Spanner::Stub::AsyncStreamingReadRaw(::grpc::ClientContext* context, const ::google::spanner::v1::ReadRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::google::spanner::v1::PartialResultSet>::Create(channel_.get(), cq, rpcmethod_StreamingRead_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::google::spanner::v1::PartialResultSet>* Spanner::Stub::PrepareAsyncStreamingReadRaw(::grpc::ClientContext* context, const ::google::spanner::v1::ReadRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::google::spanner::v1::PartialResultSet>::Create(channel_.get(), cq, rpcmethod_StreamingRead_, context, request, false, nullptr);
}

::grpc::Status Spanner::Stub::BeginTransaction(::grpc::ClientContext* context, const ::google::spanner::v1::BeginTransactionRequest& request, ::google::spanner::v1::Transaction* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_BeginTransaction_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::google::spanner::v1::Transaction>* Spanner::Stub::AsyncBeginTransactionRaw(::grpc::ClientContext* context, const ::google::spanner::v1::BeginTransactionRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::spanner::v1::Transaction>::Create(channel_.get(), cq, rpcmethod_BeginTransaction_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::google::spanner::v1::Transaction>* Spanner::Stub::PrepareAsyncBeginTransactionRaw(::grpc::ClientContext* context, const ::google::spanner::v1::BeginTransactionRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::spanner::v1::Transaction>::Create(channel_.get(), cq, rpcmethod_BeginTransaction_, context, request, false);
}

::grpc::Status Spanner::Stub::Commit(::grpc::ClientContext* context, const ::google::spanner::v1::CommitRequest& request, ::google::spanner::v1::CommitResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Commit_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::google::spanner::v1::CommitResponse>* Spanner::Stub::AsyncCommitRaw(::grpc::ClientContext* context, const ::google::spanner::v1::CommitRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::spanner::v1::CommitResponse>::Create(channel_.get(), cq, rpcmethod_Commit_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::google::spanner::v1::CommitResponse>* Spanner::Stub::PrepareAsyncCommitRaw(::grpc::ClientContext* context, const ::google::spanner::v1::CommitRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::spanner::v1::CommitResponse>::Create(channel_.get(), cq, rpcmethod_Commit_, context, request, false);
}

::grpc::Status Spanner::Stub::Rollback(::grpc::ClientContext* context, const ::google::spanner::v1::RollbackRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Rollback_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Spanner::Stub::AsyncRollbackRaw(::grpc::ClientContext* context, const ::google::spanner::v1::RollbackRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::protobuf::Empty>::Create(channel_.get(), cq, rpcmethod_Rollback_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Spanner::Stub::PrepareAsyncRollbackRaw(::grpc::ClientContext* context, const ::google::spanner::v1::RollbackRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::protobuf::Empty>::Create(channel_.get(), cq, rpcmethod_Rollback_, context, request, false);
}

Spanner::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Spanner_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Spanner::Service, ::google::spanner::v1::CreateSessionRequest, ::google::spanner::v1::Session>(
          std::mem_fn(&Spanner::Service::CreateSession), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Spanner_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Spanner::Service, ::google::spanner::v1::GetSessionRequest, ::google::spanner::v1::Session>(
          std::mem_fn(&Spanner::Service::GetSession), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Spanner_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Spanner::Service, ::google::spanner::v1::DeleteSessionRequest, ::google::protobuf::Empty>(
          std::mem_fn(&Spanner::Service::DeleteSession), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Spanner_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Spanner::Service, ::google::spanner::v1::ExecuteSqlRequest, ::google::spanner::v1::ResultSet>(
          std::mem_fn(&Spanner::Service::ExecuteSql), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Spanner_method_names[4],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< Spanner::Service, ::google::spanner::v1::ExecuteSqlRequest, ::google::spanner::v1::PartialResultSet>(
          std::mem_fn(&Spanner::Service::ExecuteStreamingSql), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Spanner_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Spanner::Service, ::google::spanner::v1::ReadRequest, ::google::spanner::v1::ResultSet>(
          std::mem_fn(&Spanner::Service::Read), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Spanner_method_names[6],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< Spanner::Service, ::google::spanner::v1::ReadRequest, ::google::spanner::v1::PartialResultSet>(
          std::mem_fn(&Spanner::Service::StreamingRead), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Spanner_method_names[7],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Spanner::Service, ::google::spanner::v1::BeginTransactionRequest, ::google::spanner::v1::Transaction>(
          std::mem_fn(&Spanner::Service::BeginTransaction), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Spanner_method_names[8],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Spanner::Service, ::google::spanner::v1::CommitRequest, ::google::spanner::v1::CommitResponse>(
          std::mem_fn(&Spanner::Service::Commit), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Spanner_method_names[9],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Spanner::Service, ::google::spanner::v1::RollbackRequest, ::google::protobuf::Empty>(
          std::mem_fn(&Spanner::Service::Rollback), this)));
}

Spanner::Service::~Service() {
}

::grpc::Status Spanner::Service::CreateSession(::grpc::ServerContext* context, const ::google::spanner::v1::CreateSessionRequest* request, ::google::spanner::v1::Session* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Spanner::Service::GetSession(::grpc::ServerContext* context, const ::google::spanner::v1::GetSessionRequest* request, ::google::spanner::v1::Session* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Spanner::Service::DeleteSession(::grpc::ServerContext* context, const ::google::spanner::v1::DeleteSessionRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Spanner::Service::ExecuteSql(::grpc::ServerContext* context, const ::google::spanner::v1::ExecuteSqlRequest* request, ::google::spanner::v1::ResultSet* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Spanner::Service::ExecuteStreamingSql(::grpc::ServerContext* context, const ::google::spanner::v1::ExecuteSqlRequest* request, ::grpc::ServerWriter< ::google::spanner::v1::PartialResultSet>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Spanner::Service::Read(::grpc::ServerContext* context, const ::google::spanner::v1::ReadRequest* request, ::google::spanner::v1::ResultSet* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Spanner::Service::StreamingRead(::grpc::ServerContext* context, const ::google::spanner::v1::ReadRequest* request, ::grpc::ServerWriter< ::google::spanner::v1::PartialResultSet>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Spanner::Service::BeginTransaction(::grpc::ServerContext* context, const ::google::spanner::v1::BeginTransactionRequest* request, ::google::spanner::v1::Transaction* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Spanner::Service::Commit(::grpc::ServerContext* context, const ::google::spanner::v1::CommitRequest* request, ::google::spanner::v1::CommitResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Spanner::Service::Rollback(::grpc::ServerContext* context, const ::google::spanner::v1::RollbackRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace google
}  // namespace spanner
}  // namespace v1

