// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: google/monitoring/v3/metric_service.proto

#include "google/monitoring/v3/metric_service.pb.h"
#include "google/monitoring/v3/metric_service.grpc.pb.h"

#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace google {
namespace monitoring {
namespace v3 {

static const char* MetricService_method_names[] = {
  "/google.monitoring.v3.MetricService/ListMonitoredResourceDescriptors",
  "/google.monitoring.v3.MetricService/GetMonitoredResourceDescriptor",
  "/google.monitoring.v3.MetricService/ListMetricDescriptors",
  "/google.monitoring.v3.MetricService/GetMetricDescriptor",
  "/google.monitoring.v3.MetricService/CreateMetricDescriptor",
  "/google.monitoring.v3.MetricService/DeleteMetricDescriptor",
  "/google.monitoring.v3.MetricService/ListTimeSeries",
  "/google.monitoring.v3.MetricService/CreateTimeSeries",
};

std::unique_ptr< MetricService::Stub> MetricService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< MetricService::Stub> stub(new MetricService::Stub(channel));
  return stub;
}

MetricService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_ListMonitoredResourceDescriptors_(MetricService_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetMonitoredResourceDescriptor_(MetricService_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ListMetricDescriptors_(MetricService_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetMetricDescriptor_(MetricService_method_names[3], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CreateMetricDescriptor_(MetricService_method_names[4], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DeleteMetricDescriptor_(MetricService_method_names[5], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ListTimeSeries_(MetricService_method_names[6], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CreateTimeSeries_(MetricService_method_names[7], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status MetricService::Stub::ListMonitoredResourceDescriptors(::grpc::ClientContext* context, const ::google::monitoring::v3::ListMonitoredResourceDescriptorsRequest& request, ::google::monitoring::v3::ListMonitoredResourceDescriptorsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_ListMonitoredResourceDescriptors_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::google::monitoring::v3::ListMonitoredResourceDescriptorsResponse>* MetricService::Stub::AsyncListMonitoredResourceDescriptorsRaw(::grpc::ClientContext* context, const ::google::monitoring::v3::ListMonitoredResourceDescriptorsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::monitoring::v3::ListMonitoredResourceDescriptorsResponse>::Create(channel_.get(), cq, rpcmethod_ListMonitoredResourceDescriptors_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::google::monitoring::v3::ListMonitoredResourceDescriptorsResponse>* MetricService::Stub::PrepareAsyncListMonitoredResourceDescriptorsRaw(::grpc::ClientContext* context, const ::google::monitoring::v3::ListMonitoredResourceDescriptorsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::monitoring::v3::ListMonitoredResourceDescriptorsResponse>::Create(channel_.get(), cq, rpcmethod_ListMonitoredResourceDescriptors_, context, request, false);
}

::grpc::Status MetricService::Stub::GetMonitoredResourceDescriptor(::grpc::ClientContext* context, const ::google::monitoring::v3::GetMonitoredResourceDescriptorRequest& request, ::google::api::MonitoredResourceDescriptor* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetMonitoredResourceDescriptor_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::google::api::MonitoredResourceDescriptor>* MetricService::Stub::AsyncGetMonitoredResourceDescriptorRaw(::grpc::ClientContext* context, const ::google::monitoring::v3::GetMonitoredResourceDescriptorRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::api::MonitoredResourceDescriptor>::Create(channel_.get(), cq, rpcmethod_GetMonitoredResourceDescriptor_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::google::api::MonitoredResourceDescriptor>* MetricService::Stub::PrepareAsyncGetMonitoredResourceDescriptorRaw(::grpc::ClientContext* context, const ::google::monitoring::v3::GetMonitoredResourceDescriptorRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::api::MonitoredResourceDescriptor>::Create(channel_.get(), cq, rpcmethod_GetMonitoredResourceDescriptor_, context, request, false);
}

::grpc::Status MetricService::Stub::ListMetricDescriptors(::grpc::ClientContext* context, const ::google::monitoring::v3::ListMetricDescriptorsRequest& request, ::google::monitoring::v3::ListMetricDescriptorsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_ListMetricDescriptors_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::google::monitoring::v3::ListMetricDescriptorsResponse>* MetricService::Stub::AsyncListMetricDescriptorsRaw(::grpc::ClientContext* context, const ::google::monitoring::v3::ListMetricDescriptorsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::monitoring::v3::ListMetricDescriptorsResponse>::Create(channel_.get(), cq, rpcmethod_ListMetricDescriptors_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::google::monitoring::v3::ListMetricDescriptorsResponse>* MetricService::Stub::PrepareAsyncListMetricDescriptorsRaw(::grpc::ClientContext* context, const ::google::monitoring::v3::ListMetricDescriptorsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::monitoring::v3::ListMetricDescriptorsResponse>::Create(channel_.get(), cq, rpcmethod_ListMetricDescriptors_, context, request, false);
}

::grpc::Status MetricService::Stub::GetMetricDescriptor(::grpc::ClientContext* context, const ::google::monitoring::v3::GetMetricDescriptorRequest& request, ::google::api::MetricDescriptor* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetMetricDescriptor_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::google::api::MetricDescriptor>* MetricService::Stub::AsyncGetMetricDescriptorRaw(::grpc::ClientContext* context, const ::google::monitoring::v3::GetMetricDescriptorRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::api::MetricDescriptor>::Create(channel_.get(), cq, rpcmethod_GetMetricDescriptor_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::google::api::MetricDescriptor>* MetricService::Stub::PrepareAsyncGetMetricDescriptorRaw(::grpc::ClientContext* context, const ::google::monitoring::v3::GetMetricDescriptorRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::api::MetricDescriptor>::Create(channel_.get(), cq, rpcmethod_GetMetricDescriptor_, context, request, false);
}

::grpc::Status MetricService::Stub::CreateMetricDescriptor(::grpc::ClientContext* context, const ::google::monitoring::v3::CreateMetricDescriptorRequest& request, ::google::api::MetricDescriptor* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_CreateMetricDescriptor_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::google::api::MetricDescriptor>* MetricService::Stub::AsyncCreateMetricDescriptorRaw(::grpc::ClientContext* context, const ::google::monitoring::v3::CreateMetricDescriptorRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::api::MetricDescriptor>::Create(channel_.get(), cq, rpcmethod_CreateMetricDescriptor_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::google::api::MetricDescriptor>* MetricService::Stub::PrepareAsyncCreateMetricDescriptorRaw(::grpc::ClientContext* context, const ::google::monitoring::v3::CreateMetricDescriptorRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::api::MetricDescriptor>::Create(channel_.get(), cq, rpcmethod_CreateMetricDescriptor_, context, request, false);
}

::grpc::Status MetricService::Stub::DeleteMetricDescriptor(::grpc::ClientContext* context, const ::google::monitoring::v3::DeleteMetricDescriptorRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_DeleteMetricDescriptor_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* MetricService::Stub::AsyncDeleteMetricDescriptorRaw(::grpc::ClientContext* context, const ::google::monitoring::v3::DeleteMetricDescriptorRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::protobuf::Empty>::Create(channel_.get(), cq, rpcmethod_DeleteMetricDescriptor_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* MetricService::Stub::PrepareAsyncDeleteMetricDescriptorRaw(::grpc::ClientContext* context, const ::google::monitoring::v3::DeleteMetricDescriptorRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::protobuf::Empty>::Create(channel_.get(), cq, rpcmethod_DeleteMetricDescriptor_, context, request, false);
}

::grpc::Status MetricService::Stub::ListTimeSeries(::grpc::ClientContext* context, const ::google::monitoring::v3::ListTimeSeriesRequest& request, ::google::monitoring::v3::ListTimeSeriesResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_ListTimeSeries_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::google::monitoring::v3::ListTimeSeriesResponse>* MetricService::Stub::AsyncListTimeSeriesRaw(::grpc::ClientContext* context, const ::google::monitoring::v3::ListTimeSeriesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::monitoring::v3::ListTimeSeriesResponse>::Create(channel_.get(), cq, rpcmethod_ListTimeSeries_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::google::monitoring::v3::ListTimeSeriesResponse>* MetricService::Stub::PrepareAsyncListTimeSeriesRaw(::grpc::ClientContext* context, const ::google::monitoring::v3::ListTimeSeriesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::monitoring::v3::ListTimeSeriesResponse>::Create(channel_.get(), cq, rpcmethod_ListTimeSeries_, context, request, false);
}

::grpc::Status MetricService::Stub::CreateTimeSeries(::grpc::ClientContext* context, const ::google::monitoring::v3::CreateTimeSeriesRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_CreateTimeSeries_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* MetricService::Stub::AsyncCreateTimeSeriesRaw(::grpc::ClientContext* context, const ::google::monitoring::v3::CreateTimeSeriesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::protobuf::Empty>::Create(channel_.get(), cq, rpcmethod_CreateTimeSeries_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* MetricService::Stub::PrepareAsyncCreateTimeSeriesRaw(::grpc::ClientContext* context, const ::google::monitoring::v3::CreateTimeSeriesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::protobuf::Empty>::Create(channel_.get(), cq, rpcmethod_CreateTimeSeries_, context, request, false);
}

MetricService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MetricService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MetricService::Service, ::google::monitoring::v3::ListMonitoredResourceDescriptorsRequest, ::google::monitoring::v3::ListMonitoredResourceDescriptorsResponse>(
          std::mem_fn(&MetricService::Service::ListMonitoredResourceDescriptors), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MetricService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MetricService::Service, ::google::monitoring::v3::GetMonitoredResourceDescriptorRequest, ::google::api::MonitoredResourceDescriptor>(
          std::mem_fn(&MetricService::Service::GetMonitoredResourceDescriptor), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MetricService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MetricService::Service, ::google::monitoring::v3::ListMetricDescriptorsRequest, ::google::monitoring::v3::ListMetricDescriptorsResponse>(
          std::mem_fn(&MetricService::Service::ListMetricDescriptors), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MetricService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MetricService::Service, ::google::monitoring::v3::GetMetricDescriptorRequest, ::google::api::MetricDescriptor>(
          std::mem_fn(&MetricService::Service::GetMetricDescriptor), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MetricService_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MetricService::Service, ::google::monitoring::v3::CreateMetricDescriptorRequest, ::google::api::MetricDescriptor>(
          std::mem_fn(&MetricService::Service::CreateMetricDescriptor), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MetricService_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MetricService::Service, ::google::monitoring::v3::DeleteMetricDescriptorRequest, ::google::protobuf::Empty>(
          std::mem_fn(&MetricService::Service::DeleteMetricDescriptor), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MetricService_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MetricService::Service, ::google::monitoring::v3::ListTimeSeriesRequest, ::google::monitoring::v3::ListTimeSeriesResponse>(
          std::mem_fn(&MetricService::Service::ListTimeSeries), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MetricService_method_names[7],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MetricService::Service, ::google::monitoring::v3::CreateTimeSeriesRequest, ::google::protobuf::Empty>(
          std::mem_fn(&MetricService::Service::CreateTimeSeries), this)));
}

MetricService::Service::~Service() {
}

::grpc::Status MetricService::Service::ListMonitoredResourceDescriptors(::grpc::ServerContext* context, const ::google::monitoring::v3::ListMonitoredResourceDescriptorsRequest* request, ::google::monitoring::v3::ListMonitoredResourceDescriptorsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MetricService::Service::GetMonitoredResourceDescriptor(::grpc::ServerContext* context, const ::google::monitoring::v3::GetMonitoredResourceDescriptorRequest* request, ::google::api::MonitoredResourceDescriptor* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MetricService::Service::ListMetricDescriptors(::grpc::ServerContext* context, const ::google::monitoring::v3::ListMetricDescriptorsRequest* request, ::google::monitoring::v3::ListMetricDescriptorsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MetricService::Service::GetMetricDescriptor(::grpc::ServerContext* context, const ::google::monitoring::v3::GetMetricDescriptorRequest* request, ::google::api::MetricDescriptor* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MetricService::Service::CreateMetricDescriptor(::grpc::ServerContext* context, const ::google::monitoring::v3::CreateMetricDescriptorRequest* request, ::google::api::MetricDescriptor* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MetricService::Service::DeleteMetricDescriptor(::grpc::ServerContext* context, const ::google::monitoring::v3::DeleteMetricDescriptorRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MetricService::Service::ListTimeSeries(::grpc::ServerContext* context, const ::google::monitoring::v3::ListTimeSeriesRequest* request, ::google::monitoring::v3::ListTimeSeriesResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MetricService::Service::CreateTimeSeries(::grpc::ServerContext* context, const ::google::monitoring::v3::CreateTimeSeriesRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace google
}  // namespace monitoring
}  // namespace v3

