// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/cloud/vision/v1/image_annotator.proto

#ifndef PROTOBUF_google_2fcloud_2fvision_2fv1_2fimage_5fannotator_2eproto__INCLUDED
#define PROTOBUF_google_2fcloud_2fvision_2fv1_2fimage_5fannotator_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "google/api/annotations.pb.h"
#include "google/cloud/vision/v1/geometry.pb.h"
#include "google/cloud/vision/v1/text_annotation.pb.h"
#include "google/cloud/vision/v1/web_detection.pb.h"
#include "google/rpc/status.pb.h"
#include "google/type/color.pb.h"
#include "google/type/latlng.pb.h"
// @@protoc_insertion_point(includes)

namespace protobuf_google_2fcloud_2fvision_2fv1_2fimage_5fannotator_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[21];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsFeatureImpl();
void InitDefaultsFeature();
void InitDefaultsImageSourceImpl();
void InitDefaultsImageSource();
void InitDefaultsImageImpl();
void InitDefaultsImage();
void InitDefaultsFaceAnnotation_LandmarkImpl();
void InitDefaultsFaceAnnotation_Landmark();
void InitDefaultsFaceAnnotationImpl();
void InitDefaultsFaceAnnotation();
void InitDefaultsLocationInfoImpl();
void InitDefaultsLocationInfo();
void InitDefaultsPropertyImpl();
void InitDefaultsProperty();
void InitDefaultsEntityAnnotationImpl();
void InitDefaultsEntityAnnotation();
void InitDefaultsSafeSearchAnnotationImpl();
void InitDefaultsSafeSearchAnnotation();
void InitDefaultsLatLongRectImpl();
void InitDefaultsLatLongRect();
void InitDefaultsColorInfoImpl();
void InitDefaultsColorInfo();
void InitDefaultsDominantColorsAnnotationImpl();
void InitDefaultsDominantColorsAnnotation();
void InitDefaultsImagePropertiesImpl();
void InitDefaultsImageProperties();
void InitDefaultsCropHintImpl();
void InitDefaultsCropHint();
void InitDefaultsCropHintsAnnotationImpl();
void InitDefaultsCropHintsAnnotation();
void InitDefaultsCropHintsParamsImpl();
void InitDefaultsCropHintsParams();
void InitDefaultsImageContextImpl();
void InitDefaultsImageContext();
void InitDefaultsAnnotateImageRequestImpl();
void InitDefaultsAnnotateImageRequest();
void InitDefaultsAnnotateImageResponseImpl();
void InitDefaultsAnnotateImageResponse();
void InitDefaultsBatchAnnotateImagesRequestImpl();
void InitDefaultsBatchAnnotateImagesRequest();
void InitDefaultsBatchAnnotateImagesResponseImpl();
void InitDefaultsBatchAnnotateImagesResponse();
inline void InitDefaults() {
  InitDefaultsFeature();
  InitDefaultsImageSource();
  InitDefaultsImage();
  InitDefaultsFaceAnnotation_Landmark();
  InitDefaultsFaceAnnotation();
  InitDefaultsLocationInfo();
  InitDefaultsProperty();
  InitDefaultsEntityAnnotation();
  InitDefaultsSafeSearchAnnotation();
  InitDefaultsLatLongRect();
  InitDefaultsColorInfo();
  InitDefaultsDominantColorsAnnotation();
  InitDefaultsImageProperties();
  InitDefaultsCropHint();
  InitDefaultsCropHintsAnnotation();
  InitDefaultsCropHintsParams();
  InitDefaultsImageContext();
  InitDefaultsAnnotateImageRequest();
  InitDefaultsAnnotateImageResponse();
  InitDefaultsBatchAnnotateImagesRequest();
  InitDefaultsBatchAnnotateImagesResponse();
}
}  // namespace protobuf_google_2fcloud_2fvision_2fv1_2fimage_5fannotator_2eproto
namespace google {
namespace cloud {
namespace vision {
namespace v1 {
class AnnotateImageRequest;
class AnnotateImageRequestDefaultTypeInternal;
extern AnnotateImageRequestDefaultTypeInternal _AnnotateImageRequest_default_instance_;
class AnnotateImageResponse;
class AnnotateImageResponseDefaultTypeInternal;
extern AnnotateImageResponseDefaultTypeInternal _AnnotateImageResponse_default_instance_;
class BatchAnnotateImagesRequest;
class BatchAnnotateImagesRequestDefaultTypeInternal;
extern BatchAnnotateImagesRequestDefaultTypeInternal _BatchAnnotateImagesRequest_default_instance_;
class BatchAnnotateImagesResponse;
class BatchAnnotateImagesResponseDefaultTypeInternal;
extern BatchAnnotateImagesResponseDefaultTypeInternal _BatchAnnotateImagesResponse_default_instance_;
class ColorInfo;
class ColorInfoDefaultTypeInternal;
extern ColorInfoDefaultTypeInternal _ColorInfo_default_instance_;
class CropHint;
class CropHintDefaultTypeInternal;
extern CropHintDefaultTypeInternal _CropHint_default_instance_;
class CropHintsAnnotation;
class CropHintsAnnotationDefaultTypeInternal;
extern CropHintsAnnotationDefaultTypeInternal _CropHintsAnnotation_default_instance_;
class CropHintsParams;
class CropHintsParamsDefaultTypeInternal;
extern CropHintsParamsDefaultTypeInternal _CropHintsParams_default_instance_;
class DominantColorsAnnotation;
class DominantColorsAnnotationDefaultTypeInternal;
extern DominantColorsAnnotationDefaultTypeInternal _DominantColorsAnnotation_default_instance_;
class EntityAnnotation;
class EntityAnnotationDefaultTypeInternal;
extern EntityAnnotationDefaultTypeInternal _EntityAnnotation_default_instance_;
class FaceAnnotation;
class FaceAnnotationDefaultTypeInternal;
extern FaceAnnotationDefaultTypeInternal _FaceAnnotation_default_instance_;
class FaceAnnotation_Landmark;
class FaceAnnotation_LandmarkDefaultTypeInternal;
extern FaceAnnotation_LandmarkDefaultTypeInternal _FaceAnnotation_Landmark_default_instance_;
class Feature;
class FeatureDefaultTypeInternal;
extern FeatureDefaultTypeInternal _Feature_default_instance_;
class Image;
class ImageDefaultTypeInternal;
extern ImageDefaultTypeInternal _Image_default_instance_;
class ImageContext;
class ImageContextDefaultTypeInternal;
extern ImageContextDefaultTypeInternal _ImageContext_default_instance_;
class ImageProperties;
class ImagePropertiesDefaultTypeInternal;
extern ImagePropertiesDefaultTypeInternal _ImageProperties_default_instance_;
class ImageSource;
class ImageSourceDefaultTypeInternal;
extern ImageSourceDefaultTypeInternal _ImageSource_default_instance_;
class LatLongRect;
class LatLongRectDefaultTypeInternal;
extern LatLongRectDefaultTypeInternal _LatLongRect_default_instance_;
class LocationInfo;
class LocationInfoDefaultTypeInternal;
extern LocationInfoDefaultTypeInternal _LocationInfo_default_instance_;
class Property;
class PropertyDefaultTypeInternal;
extern PropertyDefaultTypeInternal _Property_default_instance_;
class SafeSearchAnnotation;
class SafeSearchAnnotationDefaultTypeInternal;
extern SafeSearchAnnotationDefaultTypeInternal _SafeSearchAnnotation_default_instance_;
}  // namespace v1
}  // namespace vision
}  // namespace cloud
}  // namespace google
namespace google {
namespace cloud {
namespace vision {
namespace v1 {

enum Feature_Type {
  Feature_Type_TYPE_UNSPECIFIED = 0,
  Feature_Type_FACE_DETECTION = 1,
  Feature_Type_LANDMARK_DETECTION = 2,
  Feature_Type_LOGO_DETECTION = 3,
  Feature_Type_LABEL_DETECTION = 4,
  Feature_Type_TEXT_DETECTION = 5,
  Feature_Type_DOCUMENT_TEXT_DETECTION = 11,
  Feature_Type_SAFE_SEARCH_DETECTION = 6,
  Feature_Type_IMAGE_PROPERTIES = 7,
  Feature_Type_CROP_HINTS = 9,
  Feature_Type_WEB_DETECTION = 10,
  Feature_Type_Feature_Type_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  Feature_Type_Feature_Type_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool Feature_Type_IsValid(int value);
const Feature_Type Feature_Type_Type_MIN = Feature_Type_TYPE_UNSPECIFIED;
const Feature_Type Feature_Type_Type_MAX = Feature_Type_DOCUMENT_TEXT_DETECTION;
const int Feature_Type_Type_ARRAYSIZE = Feature_Type_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* Feature_Type_descriptor();
inline const ::std::string& Feature_Type_Name(Feature_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    Feature_Type_descriptor(), value);
}
inline bool Feature_Type_Parse(
    const ::std::string& name, Feature_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Feature_Type>(
    Feature_Type_descriptor(), name, value);
}
enum FaceAnnotation_Landmark_Type {
  FaceAnnotation_Landmark_Type_UNKNOWN_LANDMARK = 0,
  FaceAnnotation_Landmark_Type_LEFT_EYE = 1,
  FaceAnnotation_Landmark_Type_RIGHT_EYE = 2,
  FaceAnnotation_Landmark_Type_LEFT_OF_LEFT_EYEBROW = 3,
  FaceAnnotation_Landmark_Type_RIGHT_OF_LEFT_EYEBROW = 4,
  FaceAnnotation_Landmark_Type_LEFT_OF_RIGHT_EYEBROW = 5,
  FaceAnnotation_Landmark_Type_RIGHT_OF_RIGHT_EYEBROW = 6,
  FaceAnnotation_Landmark_Type_MIDPOINT_BETWEEN_EYES = 7,
  FaceAnnotation_Landmark_Type_NOSE_TIP = 8,
  FaceAnnotation_Landmark_Type_UPPER_LIP = 9,
  FaceAnnotation_Landmark_Type_LOWER_LIP = 10,
  FaceAnnotation_Landmark_Type_MOUTH_LEFT = 11,
  FaceAnnotation_Landmark_Type_MOUTH_RIGHT = 12,
  FaceAnnotation_Landmark_Type_MOUTH_CENTER = 13,
  FaceAnnotation_Landmark_Type_NOSE_BOTTOM_RIGHT = 14,
  FaceAnnotation_Landmark_Type_NOSE_BOTTOM_LEFT = 15,
  FaceAnnotation_Landmark_Type_NOSE_BOTTOM_CENTER = 16,
  FaceAnnotation_Landmark_Type_LEFT_EYE_TOP_BOUNDARY = 17,
  FaceAnnotation_Landmark_Type_LEFT_EYE_RIGHT_CORNER = 18,
  FaceAnnotation_Landmark_Type_LEFT_EYE_BOTTOM_BOUNDARY = 19,
  FaceAnnotation_Landmark_Type_LEFT_EYE_LEFT_CORNER = 20,
  FaceAnnotation_Landmark_Type_RIGHT_EYE_TOP_BOUNDARY = 21,
  FaceAnnotation_Landmark_Type_RIGHT_EYE_RIGHT_CORNER = 22,
  FaceAnnotation_Landmark_Type_RIGHT_EYE_BOTTOM_BOUNDARY = 23,
  FaceAnnotation_Landmark_Type_RIGHT_EYE_LEFT_CORNER = 24,
  FaceAnnotation_Landmark_Type_LEFT_EYEBROW_UPPER_MIDPOINT = 25,
  FaceAnnotation_Landmark_Type_RIGHT_EYEBROW_UPPER_MIDPOINT = 26,
  FaceAnnotation_Landmark_Type_LEFT_EAR_TRAGION = 27,
  FaceAnnotation_Landmark_Type_RIGHT_EAR_TRAGION = 28,
  FaceAnnotation_Landmark_Type_LEFT_EYE_PUPIL = 29,
  FaceAnnotation_Landmark_Type_RIGHT_EYE_PUPIL = 30,
  FaceAnnotation_Landmark_Type_FOREHEAD_GLABELLA = 31,
  FaceAnnotation_Landmark_Type_CHIN_GNATHION = 32,
  FaceAnnotation_Landmark_Type_CHIN_LEFT_GONION = 33,
  FaceAnnotation_Landmark_Type_CHIN_RIGHT_GONION = 34,
  FaceAnnotation_Landmark_Type_FaceAnnotation_Landmark_Type_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  FaceAnnotation_Landmark_Type_FaceAnnotation_Landmark_Type_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool FaceAnnotation_Landmark_Type_IsValid(int value);
const FaceAnnotation_Landmark_Type FaceAnnotation_Landmark_Type_Type_MIN = FaceAnnotation_Landmark_Type_UNKNOWN_LANDMARK;
const FaceAnnotation_Landmark_Type FaceAnnotation_Landmark_Type_Type_MAX = FaceAnnotation_Landmark_Type_CHIN_RIGHT_GONION;
const int FaceAnnotation_Landmark_Type_Type_ARRAYSIZE = FaceAnnotation_Landmark_Type_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* FaceAnnotation_Landmark_Type_descriptor();
inline const ::std::string& FaceAnnotation_Landmark_Type_Name(FaceAnnotation_Landmark_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    FaceAnnotation_Landmark_Type_descriptor(), value);
}
inline bool FaceAnnotation_Landmark_Type_Parse(
    const ::std::string& name, FaceAnnotation_Landmark_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<FaceAnnotation_Landmark_Type>(
    FaceAnnotation_Landmark_Type_descriptor(), name, value);
}
enum Likelihood {
  UNKNOWN = 0,
  VERY_UNLIKELY = 1,
  UNLIKELY = 2,
  POSSIBLE = 3,
  LIKELY = 4,
  VERY_LIKELY = 5,
  Likelihood_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  Likelihood_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool Likelihood_IsValid(int value);
const Likelihood Likelihood_MIN = UNKNOWN;
const Likelihood Likelihood_MAX = VERY_LIKELY;
const int Likelihood_ARRAYSIZE = Likelihood_MAX + 1;

const ::google::protobuf::EnumDescriptor* Likelihood_descriptor();
inline const ::std::string& Likelihood_Name(Likelihood value) {
  return ::google::protobuf::internal::NameOfEnum(
    Likelihood_descriptor(), value);
}
inline bool Likelihood_Parse(
    const ::std::string& name, Likelihood* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Likelihood>(
    Likelihood_descriptor(), name, value);
}
// ===================================================================

class Feature : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.cloud.vision.v1.Feature) */ {
 public:
  Feature();
  virtual ~Feature();

  Feature(const Feature& from);

  inline Feature& operator=(const Feature& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Feature(Feature&& from) noexcept
    : Feature() {
    *this = ::std::move(from);
  }

  inline Feature& operator=(Feature&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const Feature& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Feature* internal_default_instance() {
    return reinterpret_cast<const Feature*>(
               &_Feature_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void UnsafeArenaSwap(Feature* other);
  void Swap(Feature* other);
  friend void swap(Feature& a, Feature& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Feature* New() const PROTOBUF_FINAL { return New(NULL); }

  Feature* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Feature& from);
  void MergeFrom(const Feature& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Feature* other);
  protected:
  explicit Feature(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef Feature_Type Type;
  static const Type TYPE_UNSPECIFIED =
    Feature_Type_TYPE_UNSPECIFIED;
  static const Type FACE_DETECTION =
    Feature_Type_FACE_DETECTION;
  static const Type LANDMARK_DETECTION =
    Feature_Type_LANDMARK_DETECTION;
  static const Type LOGO_DETECTION =
    Feature_Type_LOGO_DETECTION;
  static const Type LABEL_DETECTION =
    Feature_Type_LABEL_DETECTION;
  static const Type TEXT_DETECTION =
    Feature_Type_TEXT_DETECTION;
  static const Type DOCUMENT_TEXT_DETECTION =
    Feature_Type_DOCUMENT_TEXT_DETECTION;
  static const Type SAFE_SEARCH_DETECTION =
    Feature_Type_SAFE_SEARCH_DETECTION;
  static const Type IMAGE_PROPERTIES =
    Feature_Type_IMAGE_PROPERTIES;
  static const Type CROP_HINTS =
    Feature_Type_CROP_HINTS;
  static const Type WEB_DETECTION =
    Feature_Type_WEB_DETECTION;
  static inline bool Type_IsValid(int value) {
    return Feature_Type_IsValid(value);
  }
  static const Type Type_MIN =
    Feature_Type_Type_MIN;
  static const Type Type_MAX =
    Feature_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    Feature_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Type_descriptor() {
    return Feature_Type_descriptor();
  }
  static inline const ::std::string& Type_Name(Type value) {
    return Feature_Type_Name(value);
  }
  static inline bool Type_Parse(const ::std::string& name,
      Type* value) {
    return Feature_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // .google.cloud.vision.v1.Feature.Type type = 1;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::google::cloud::vision::v1::Feature_Type type() const;
  void set_type(::google::cloud::vision::v1::Feature_Type value);

  // int32 max_results = 2;
  void clear_max_results();
  static const int kMaxResultsFieldNumber = 2;
  ::google::protobuf::int32 max_results() const;
  void set_max_results(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:google.cloud.vision.v1.Feature)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int type_;
  ::google::protobuf::int32 max_results_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fcloud_2fvision_2fv1_2fimage_5fannotator_2eproto::TableStruct;
  friend void ::protobuf_google_2fcloud_2fvision_2fv1_2fimage_5fannotator_2eproto::InitDefaultsFeatureImpl();
};
// -------------------------------------------------------------------

class ImageSource : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.cloud.vision.v1.ImageSource) */ {
 public:
  ImageSource();
  virtual ~ImageSource();

  ImageSource(const ImageSource& from);

  inline ImageSource& operator=(const ImageSource& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ImageSource(ImageSource&& from) noexcept
    : ImageSource() {
    *this = ::std::move(from);
  }

  inline ImageSource& operator=(ImageSource&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const ImageSource& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ImageSource* internal_default_instance() {
    return reinterpret_cast<const ImageSource*>(
               &_ImageSource_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void UnsafeArenaSwap(ImageSource* other);
  void Swap(ImageSource* other);
  friend void swap(ImageSource& a, ImageSource& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ImageSource* New() const PROTOBUF_FINAL { return New(NULL); }

  ImageSource* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ImageSource& from);
  void MergeFrom(const ImageSource& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ImageSource* other);
  protected:
  explicit ImageSource(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string gcs_image_uri = 1;
  void clear_gcs_image_uri();
  static const int kGcsImageUriFieldNumber = 1;
  const ::std::string& gcs_image_uri() const;
  void set_gcs_image_uri(const ::std::string& value);
  #if LANG_CXX11
  void set_gcs_image_uri(::std::string&& value);
  #endif
  void set_gcs_image_uri(const char* value);
  void set_gcs_image_uri(const char* value, size_t size);
  ::std::string* mutable_gcs_image_uri();
  ::std::string* release_gcs_image_uri();
  void set_allocated_gcs_image_uri(::std::string* gcs_image_uri);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_gcs_image_uri();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_gcs_image_uri(
      ::std::string* gcs_image_uri);

  // string image_uri = 2;
  void clear_image_uri();
  static const int kImageUriFieldNumber = 2;
  const ::std::string& image_uri() const;
  void set_image_uri(const ::std::string& value);
  #if LANG_CXX11
  void set_image_uri(::std::string&& value);
  #endif
  void set_image_uri(const char* value);
  void set_image_uri(const char* value, size_t size);
  ::std::string* mutable_image_uri();
  ::std::string* release_image_uri();
  void set_allocated_image_uri(::std::string* image_uri);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_image_uri();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_image_uri(
      ::std::string* image_uri);

  // @@protoc_insertion_point(class_scope:google.cloud.vision.v1.ImageSource)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::ArenaStringPtr gcs_image_uri_;
  ::google::protobuf::internal::ArenaStringPtr image_uri_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fcloud_2fvision_2fv1_2fimage_5fannotator_2eproto::TableStruct;
  friend void ::protobuf_google_2fcloud_2fvision_2fv1_2fimage_5fannotator_2eproto::InitDefaultsImageSourceImpl();
};
// -------------------------------------------------------------------

class Image : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.cloud.vision.v1.Image) */ {
 public:
  Image();
  virtual ~Image();

  Image(const Image& from);

  inline Image& operator=(const Image& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Image(Image&& from) noexcept
    : Image() {
    *this = ::std::move(from);
  }

  inline Image& operator=(Image&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const Image& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Image* internal_default_instance() {
    return reinterpret_cast<const Image*>(
               &_Image_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void UnsafeArenaSwap(Image* other);
  void Swap(Image* other);
  friend void swap(Image& a, Image& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Image* New() const PROTOBUF_FINAL { return New(NULL); }

  Image* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Image& from);
  void MergeFrom(const Image& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Image* other);
  protected:
  explicit Image(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes content = 1;
  void clear_content();
  static const int kContentFieldNumber = 1;
  const ::std::string& content() const;
  void set_content(const ::std::string& value);
  #if LANG_CXX11
  void set_content(::std::string&& value);
  #endif
  void set_content(const char* value);
  void set_content(const void* value, size_t size);
  ::std::string* mutable_content();
  ::std::string* release_content();
  void set_allocated_content(::std::string* content);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_content();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_content(
      ::std::string* content);

  // .google.cloud.vision.v1.ImageSource source = 2;
  bool has_source() const;
  void clear_source();
  static const int kSourceFieldNumber = 2;
  private:
  void _slow_mutable_source();
  public:
  const ::google::cloud::vision::v1::ImageSource& source() const;
  ::google::cloud::vision::v1::ImageSource* release_source();
  ::google::cloud::vision::v1::ImageSource* mutable_source();
  void set_allocated_source(::google::cloud::vision::v1::ImageSource* source);
  void unsafe_arena_set_allocated_source(
      ::google::cloud::vision::v1::ImageSource* source);
  ::google::cloud::vision::v1::ImageSource* unsafe_arena_release_source();

  // @@protoc_insertion_point(class_scope:google.cloud.vision.v1.Image)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::ArenaStringPtr content_;
  ::google::cloud::vision::v1::ImageSource* source_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fcloud_2fvision_2fv1_2fimage_5fannotator_2eproto::TableStruct;
  friend void ::protobuf_google_2fcloud_2fvision_2fv1_2fimage_5fannotator_2eproto::InitDefaultsImageImpl();
};
// -------------------------------------------------------------------

class FaceAnnotation_Landmark : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.cloud.vision.v1.FaceAnnotation.Landmark) */ {
 public:
  FaceAnnotation_Landmark();
  virtual ~FaceAnnotation_Landmark();

  FaceAnnotation_Landmark(const FaceAnnotation_Landmark& from);

  inline FaceAnnotation_Landmark& operator=(const FaceAnnotation_Landmark& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FaceAnnotation_Landmark(FaceAnnotation_Landmark&& from) noexcept
    : FaceAnnotation_Landmark() {
    *this = ::std::move(from);
  }

  inline FaceAnnotation_Landmark& operator=(FaceAnnotation_Landmark&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const FaceAnnotation_Landmark& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FaceAnnotation_Landmark* internal_default_instance() {
    return reinterpret_cast<const FaceAnnotation_Landmark*>(
               &_FaceAnnotation_Landmark_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void UnsafeArenaSwap(FaceAnnotation_Landmark* other);
  void Swap(FaceAnnotation_Landmark* other);
  friend void swap(FaceAnnotation_Landmark& a, FaceAnnotation_Landmark& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FaceAnnotation_Landmark* New() const PROTOBUF_FINAL { return New(NULL); }

  FaceAnnotation_Landmark* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const FaceAnnotation_Landmark& from);
  void MergeFrom(const FaceAnnotation_Landmark& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(FaceAnnotation_Landmark* other);
  protected:
  explicit FaceAnnotation_Landmark(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef FaceAnnotation_Landmark_Type Type;
  static const Type UNKNOWN_LANDMARK =
    FaceAnnotation_Landmark_Type_UNKNOWN_LANDMARK;
  static const Type LEFT_EYE =
    FaceAnnotation_Landmark_Type_LEFT_EYE;
  static const Type RIGHT_EYE =
    FaceAnnotation_Landmark_Type_RIGHT_EYE;
  static const Type LEFT_OF_LEFT_EYEBROW =
    FaceAnnotation_Landmark_Type_LEFT_OF_LEFT_EYEBROW;
  static const Type RIGHT_OF_LEFT_EYEBROW =
    FaceAnnotation_Landmark_Type_RIGHT_OF_LEFT_EYEBROW;
  static const Type LEFT_OF_RIGHT_EYEBROW =
    FaceAnnotation_Landmark_Type_LEFT_OF_RIGHT_EYEBROW;
  static const Type RIGHT_OF_RIGHT_EYEBROW =
    FaceAnnotation_Landmark_Type_RIGHT_OF_RIGHT_EYEBROW;
  static const Type MIDPOINT_BETWEEN_EYES =
    FaceAnnotation_Landmark_Type_MIDPOINT_BETWEEN_EYES;
  static const Type NOSE_TIP =
    FaceAnnotation_Landmark_Type_NOSE_TIP;
  static const Type UPPER_LIP =
    FaceAnnotation_Landmark_Type_UPPER_LIP;
  static const Type LOWER_LIP =
    FaceAnnotation_Landmark_Type_LOWER_LIP;
  static const Type MOUTH_LEFT =
    FaceAnnotation_Landmark_Type_MOUTH_LEFT;
  static const Type MOUTH_RIGHT =
    FaceAnnotation_Landmark_Type_MOUTH_RIGHT;
  static const Type MOUTH_CENTER =
    FaceAnnotation_Landmark_Type_MOUTH_CENTER;
  static const Type NOSE_BOTTOM_RIGHT =
    FaceAnnotation_Landmark_Type_NOSE_BOTTOM_RIGHT;
  static const Type NOSE_BOTTOM_LEFT =
    FaceAnnotation_Landmark_Type_NOSE_BOTTOM_LEFT;
  static const Type NOSE_BOTTOM_CENTER =
    FaceAnnotation_Landmark_Type_NOSE_BOTTOM_CENTER;
  static const Type LEFT_EYE_TOP_BOUNDARY =
    FaceAnnotation_Landmark_Type_LEFT_EYE_TOP_BOUNDARY;
  static const Type LEFT_EYE_RIGHT_CORNER =
    FaceAnnotation_Landmark_Type_LEFT_EYE_RIGHT_CORNER;
  static const Type LEFT_EYE_BOTTOM_BOUNDARY =
    FaceAnnotation_Landmark_Type_LEFT_EYE_BOTTOM_BOUNDARY;
  static const Type LEFT_EYE_LEFT_CORNER =
    FaceAnnotation_Landmark_Type_LEFT_EYE_LEFT_CORNER;
  static const Type RIGHT_EYE_TOP_BOUNDARY =
    FaceAnnotation_Landmark_Type_RIGHT_EYE_TOP_BOUNDARY;
  static const Type RIGHT_EYE_RIGHT_CORNER =
    FaceAnnotation_Landmark_Type_RIGHT_EYE_RIGHT_CORNER;
  static const Type RIGHT_EYE_BOTTOM_BOUNDARY =
    FaceAnnotation_Landmark_Type_RIGHT_EYE_BOTTOM_BOUNDARY;
  static const Type RIGHT_EYE_LEFT_CORNER =
    FaceAnnotation_Landmark_Type_RIGHT_EYE_LEFT_CORNER;
  static const Type LEFT_EYEBROW_UPPER_MIDPOINT =
    FaceAnnotation_Landmark_Type_LEFT_EYEBROW_UPPER_MIDPOINT;
  static const Type RIGHT_EYEBROW_UPPER_MIDPOINT =
    FaceAnnotation_Landmark_Type_RIGHT_EYEBROW_UPPER_MIDPOINT;
  static const Type LEFT_EAR_TRAGION =
    FaceAnnotation_Landmark_Type_LEFT_EAR_TRAGION;
  static const Type RIGHT_EAR_TRAGION =
    FaceAnnotation_Landmark_Type_RIGHT_EAR_TRAGION;
  static const Type LEFT_EYE_PUPIL =
    FaceAnnotation_Landmark_Type_LEFT_EYE_PUPIL;
  static const Type RIGHT_EYE_PUPIL =
    FaceAnnotation_Landmark_Type_RIGHT_EYE_PUPIL;
  static const Type FOREHEAD_GLABELLA =
    FaceAnnotation_Landmark_Type_FOREHEAD_GLABELLA;
  static const Type CHIN_GNATHION =
    FaceAnnotation_Landmark_Type_CHIN_GNATHION;
  static const Type CHIN_LEFT_GONION =
    FaceAnnotation_Landmark_Type_CHIN_LEFT_GONION;
  static const Type CHIN_RIGHT_GONION =
    FaceAnnotation_Landmark_Type_CHIN_RIGHT_GONION;
  static inline bool Type_IsValid(int value) {
    return FaceAnnotation_Landmark_Type_IsValid(value);
  }
  static const Type Type_MIN =
    FaceAnnotation_Landmark_Type_Type_MIN;
  static const Type Type_MAX =
    FaceAnnotation_Landmark_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    FaceAnnotation_Landmark_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Type_descriptor() {
    return FaceAnnotation_Landmark_Type_descriptor();
  }
  static inline const ::std::string& Type_Name(Type value) {
    return FaceAnnotation_Landmark_Type_Name(value);
  }
  static inline bool Type_Parse(const ::std::string& name,
      Type* value) {
    return FaceAnnotation_Landmark_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // .google.cloud.vision.v1.Position position = 4;
  bool has_position() const;
  void clear_position();
  static const int kPositionFieldNumber = 4;
  private:
  void _slow_mutable_position();
  public:
  const ::google::cloud::vision::v1::Position& position() const;
  ::google::cloud::vision::v1::Position* release_position();
  ::google::cloud::vision::v1::Position* mutable_position();
  void set_allocated_position(::google::cloud::vision::v1::Position* position);
  void unsafe_arena_set_allocated_position(
      ::google::cloud::vision::v1::Position* position);
  ::google::cloud::vision::v1::Position* unsafe_arena_release_position();

  // .google.cloud.vision.v1.FaceAnnotation.Landmark.Type type = 3;
  void clear_type();
  static const int kTypeFieldNumber = 3;
  ::google::cloud::vision::v1::FaceAnnotation_Landmark_Type type() const;
  void set_type(::google::cloud::vision::v1::FaceAnnotation_Landmark_Type value);

  // @@protoc_insertion_point(class_scope:google.cloud.vision.v1.FaceAnnotation.Landmark)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::cloud::vision::v1::Position* position_;
  int type_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fcloud_2fvision_2fv1_2fimage_5fannotator_2eproto::TableStruct;
  friend void ::protobuf_google_2fcloud_2fvision_2fv1_2fimage_5fannotator_2eproto::InitDefaultsFaceAnnotation_LandmarkImpl();
};
// -------------------------------------------------------------------

class FaceAnnotation : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.cloud.vision.v1.FaceAnnotation) */ {
 public:
  FaceAnnotation();
  virtual ~FaceAnnotation();

  FaceAnnotation(const FaceAnnotation& from);

  inline FaceAnnotation& operator=(const FaceAnnotation& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FaceAnnotation(FaceAnnotation&& from) noexcept
    : FaceAnnotation() {
    *this = ::std::move(from);
  }

  inline FaceAnnotation& operator=(FaceAnnotation&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const FaceAnnotation& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FaceAnnotation* internal_default_instance() {
    return reinterpret_cast<const FaceAnnotation*>(
               &_FaceAnnotation_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void UnsafeArenaSwap(FaceAnnotation* other);
  void Swap(FaceAnnotation* other);
  friend void swap(FaceAnnotation& a, FaceAnnotation& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FaceAnnotation* New() const PROTOBUF_FINAL { return New(NULL); }

  FaceAnnotation* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const FaceAnnotation& from);
  void MergeFrom(const FaceAnnotation& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(FaceAnnotation* other);
  protected:
  explicit FaceAnnotation(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef FaceAnnotation_Landmark Landmark;

  // accessors -------------------------------------------------------

  // repeated .google.cloud.vision.v1.FaceAnnotation.Landmark landmarks = 3;
  int landmarks_size() const;
  void clear_landmarks();
  static const int kLandmarksFieldNumber = 3;
  const ::google::cloud::vision::v1::FaceAnnotation_Landmark& landmarks(int index) const;
  ::google::cloud::vision::v1::FaceAnnotation_Landmark* mutable_landmarks(int index);
  ::google::cloud::vision::v1::FaceAnnotation_Landmark* add_landmarks();
  ::google::protobuf::RepeatedPtrField< ::google::cloud::vision::v1::FaceAnnotation_Landmark >*
      mutable_landmarks();
  const ::google::protobuf::RepeatedPtrField< ::google::cloud::vision::v1::FaceAnnotation_Landmark >&
      landmarks() const;

  // .google.cloud.vision.v1.BoundingPoly bounding_poly = 1;
  bool has_bounding_poly() const;
  void clear_bounding_poly();
  static const int kBoundingPolyFieldNumber = 1;
  private:
  void _slow_mutable_bounding_poly();
  public:
  const ::google::cloud::vision::v1::BoundingPoly& bounding_poly() const;
  ::google::cloud::vision::v1::BoundingPoly* release_bounding_poly();
  ::google::cloud::vision::v1::BoundingPoly* mutable_bounding_poly();
  void set_allocated_bounding_poly(::google::cloud::vision::v1::BoundingPoly* bounding_poly);
  void unsafe_arena_set_allocated_bounding_poly(
      ::google::cloud::vision::v1::BoundingPoly* bounding_poly);
  ::google::cloud::vision::v1::BoundingPoly* unsafe_arena_release_bounding_poly();

  // .google.cloud.vision.v1.BoundingPoly fd_bounding_poly = 2;
  bool has_fd_bounding_poly() const;
  void clear_fd_bounding_poly();
  static const int kFdBoundingPolyFieldNumber = 2;
  private:
  void _slow_mutable_fd_bounding_poly();
  public:
  const ::google::cloud::vision::v1::BoundingPoly& fd_bounding_poly() const;
  ::google::cloud::vision::v1::BoundingPoly* release_fd_bounding_poly();
  ::google::cloud::vision::v1::BoundingPoly* mutable_fd_bounding_poly();
  void set_allocated_fd_bounding_poly(::google::cloud::vision::v1::BoundingPoly* fd_bounding_poly);
  void unsafe_arena_set_allocated_fd_bounding_poly(
      ::google::cloud::vision::v1::BoundingPoly* fd_bounding_poly);
  ::google::cloud::vision::v1::BoundingPoly* unsafe_arena_release_fd_bounding_poly();

  // float roll_angle = 4;
  void clear_roll_angle();
  static const int kRollAngleFieldNumber = 4;
  float roll_angle() const;
  void set_roll_angle(float value);

  // float pan_angle = 5;
  void clear_pan_angle();
  static const int kPanAngleFieldNumber = 5;
  float pan_angle() const;
  void set_pan_angle(float value);

  // float tilt_angle = 6;
  void clear_tilt_angle();
  static const int kTiltAngleFieldNumber = 6;
  float tilt_angle() const;
  void set_tilt_angle(float value);

  // float detection_confidence = 7;
  void clear_detection_confidence();
  static const int kDetectionConfidenceFieldNumber = 7;
  float detection_confidence() const;
  void set_detection_confidence(float value);

  // float landmarking_confidence = 8;
  void clear_landmarking_confidence();
  static const int kLandmarkingConfidenceFieldNumber = 8;
  float landmarking_confidence() const;
  void set_landmarking_confidence(float value);

  // .google.cloud.vision.v1.Likelihood joy_likelihood = 9;
  void clear_joy_likelihood();
  static const int kJoyLikelihoodFieldNumber = 9;
  ::google::cloud::vision::v1::Likelihood joy_likelihood() const;
  void set_joy_likelihood(::google::cloud::vision::v1::Likelihood value);

  // .google.cloud.vision.v1.Likelihood sorrow_likelihood = 10;
  void clear_sorrow_likelihood();
  static const int kSorrowLikelihoodFieldNumber = 10;
  ::google::cloud::vision::v1::Likelihood sorrow_likelihood() const;
  void set_sorrow_likelihood(::google::cloud::vision::v1::Likelihood value);

  // .google.cloud.vision.v1.Likelihood anger_likelihood = 11;
  void clear_anger_likelihood();
  static const int kAngerLikelihoodFieldNumber = 11;
  ::google::cloud::vision::v1::Likelihood anger_likelihood() const;
  void set_anger_likelihood(::google::cloud::vision::v1::Likelihood value);

  // .google.cloud.vision.v1.Likelihood surprise_likelihood = 12;
  void clear_surprise_likelihood();
  static const int kSurpriseLikelihoodFieldNumber = 12;
  ::google::cloud::vision::v1::Likelihood surprise_likelihood() const;
  void set_surprise_likelihood(::google::cloud::vision::v1::Likelihood value);

  // .google.cloud.vision.v1.Likelihood under_exposed_likelihood = 13;
  void clear_under_exposed_likelihood();
  static const int kUnderExposedLikelihoodFieldNumber = 13;
  ::google::cloud::vision::v1::Likelihood under_exposed_likelihood() const;
  void set_under_exposed_likelihood(::google::cloud::vision::v1::Likelihood value);

  // .google.cloud.vision.v1.Likelihood blurred_likelihood = 14;
  void clear_blurred_likelihood();
  static const int kBlurredLikelihoodFieldNumber = 14;
  ::google::cloud::vision::v1::Likelihood blurred_likelihood() const;
  void set_blurred_likelihood(::google::cloud::vision::v1::Likelihood value);

  // .google.cloud.vision.v1.Likelihood headwear_likelihood = 15;
  void clear_headwear_likelihood();
  static const int kHeadwearLikelihoodFieldNumber = 15;
  ::google::cloud::vision::v1::Likelihood headwear_likelihood() const;
  void set_headwear_likelihood(::google::cloud::vision::v1::Likelihood value);

  // @@protoc_insertion_point(class_scope:google.cloud.vision.v1.FaceAnnotation)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::RepeatedPtrField< ::google::cloud::vision::v1::FaceAnnotation_Landmark > landmarks_;
  ::google::cloud::vision::v1::BoundingPoly* bounding_poly_;
  ::google::cloud::vision::v1::BoundingPoly* fd_bounding_poly_;
  float roll_angle_;
  float pan_angle_;
  float tilt_angle_;
  float detection_confidence_;
  float landmarking_confidence_;
  int joy_likelihood_;
  int sorrow_likelihood_;
  int anger_likelihood_;
  int surprise_likelihood_;
  int under_exposed_likelihood_;
  int blurred_likelihood_;
  int headwear_likelihood_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fcloud_2fvision_2fv1_2fimage_5fannotator_2eproto::TableStruct;
  friend void ::protobuf_google_2fcloud_2fvision_2fv1_2fimage_5fannotator_2eproto::InitDefaultsFaceAnnotationImpl();
};
// -------------------------------------------------------------------

class LocationInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.cloud.vision.v1.LocationInfo) */ {
 public:
  LocationInfo();
  virtual ~LocationInfo();

  LocationInfo(const LocationInfo& from);

  inline LocationInfo& operator=(const LocationInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LocationInfo(LocationInfo&& from) noexcept
    : LocationInfo() {
    *this = ::std::move(from);
  }

  inline LocationInfo& operator=(LocationInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const LocationInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LocationInfo* internal_default_instance() {
    return reinterpret_cast<const LocationInfo*>(
               &_LocationInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    5;

  void UnsafeArenaSwap(LocationInfo* other);
  void Swap(LocationInfo* other);
  friend void swap(LocationInfo& a, LocationInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LocationInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  LocationInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const LocationInfo& from);
  void MergeFrom(const LocationInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(LocationInfo* other);
  protected:
  explicit LocationInfo(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.type.LatLng lat_lng = 1;
  bool has_lat_lng() const;
  void clear_lat_lng();
  static const int kLatLngFieldNumber = 1;
  private:
  void _slow_mutable_lat_lng();
  public:
  const ::google::type::LatLng& lat_lng() const;
  ::google::type::LatLng* release_lat_lng();
  ::google::type::LatLng* mutable_lat_lng();
  void set_allocated_lat_lng(::google::type::LatLng* lat_lng);
  void unsafe_arena_set_allocated_lat_lng(
      ::google::type::LatLng* lat_lng);
  ::google::type::LatLng* unsafe_arena_release_lat_lng();

  // @@protoc_insertion_point(class_scope:google.cloud.vision.v1.LocationInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::type::LatLng* lat_lng_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fcloud_2fvision_2fv1_2fimage_5fannotator_2eproto::TableStruct;
  friend void ::protobuf_google_2fcloud_2fvision_2fv1_2fimage_5fannotator_2eproto::InitDefaultsLocationInfoImpl();
};
// -------------------------------------------------------------------

class Property : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.cloud.vision.v1.Property) */ {
 public:
  Property();
  virtual ~Property();

  Property(const Property& from);

  inline Property& operator=(const Property& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Property(Property&& from) noexcept
    : Property() {
    *this = ::std::move(from);
  }

  inline Property& operator=(Property&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const Property& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Property* internal_default_instance() {
    return reinterpret_cast<const Property*>(
               &_Property_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    6;

  void UnsafeArenaSwap(Property* other);
  void Swap(Property* other);
  friend void swap(Property& a, Property& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Property* New() const PROTOBUF_FINAL { return New(NULL); }

  Property* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Property& from);
  void MergeFrom(const Property& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Property* other);
  protected:
  explicit Property(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_name();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_name(
      ::std::string* name);

  // string value = 2;
  void clear_value();
  static const int kValueFieldNumber = 2;
  const ::std::string& value() const;
  void set_value(const ::std::string& value);
  #if LANG_CXX11
  void set_value(::std::string&& value);
  #endif
  void set_value(const char* value);
  void set_value(const char* value, size_t size);
  ::std::string* mutable_value();
  ::std::string* release_value();
  void set_allocated_value(::std::string* value);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_value();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_value(
      ::std::string* value);

  // @@protoc_insertion_point(class_scope:google.cloud.vision.v1.Property)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr value_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fcloud_2fvision_2fv1_2fimage_5fannotator_2eproto::TableStruct;
  friend void ::protobuf_google_2fcloud_2fvision_2fv1_2fimage_5fannotator_2eproto::InitDefaultsPropertyImpl();
};
// -------------------------------------------------------------------

class EntityAnnotation : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.cloud.vision.v1.EntityAnnotation) */ {
 public:
  EntityAnnotation();
  virtual ~EntityAnnotation();

  EntityAnnotation(const EntityAnnotation& from);

  inline EntityAnnotation& operator=(const EntityAnnotation& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  EntityAnnotation(EntityAnnotation&& from) noexcept
    : EntityAnnotation() {
    *this = ::std::move(from);
  }

  inline EntityAnnotation& operator=(EntityAnnotation&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const EntityAnnotation& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EntityAnnotation* internal_default_instance() {
    return reinterpret_cast<const EntityAnnotation*>(
               &_EntityAnnotation_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    7;

  void UnsafeArenaSwap(EntityAnnotation* other);
  void Swap(EntityAnnotation* other);
  friend void swap(EntityAnnotation& a, EntityAnnotation& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline EntityAnnotation* New() const PROTOBUF_FINAL { return New(NULL); }

  EntityAnnotation* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const EntityAnnotation& from);
  void MergeFrom(const EntityAnnotation& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(EntityAnnotation* other);
  protected:
  explicit EntityAnnotation(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .google.cloud.vision.v1.LocationInfo locations = 8;
  int locations_size() const;
  void clear_locations();
  static const int kLocationsFieldNumber = 8;
  const ::google::cloud::vision::v1::LocationInfo& locations(int index) const;
  ::google::cloud::vision::v1::LocationInfo* mutable_locations(int index);
  ::google::cloud::vision::v1::LocationInfo* add_locations();
  ::google::protobuf::RepeatedPtrField< ::google::cloud::vision::v1::LocationInfo >*
      mutable_locations();
  const ::google::protobuf::RepeatedPtrField< ::google::cloud::vision::v1::LocationInfo >&
      locations() const;

  // repeated .google.cloud.vision.v1.Property properties = 9;
  int properties_size() const;
  void clear_properties();
  static const int kPropertiesFieldNumber = 9;
  const ::google::cloud::vision::v1::Property& properties(int index) const;
  ::google::cloud::vision::v1::Property* mutable_properties(int index);
  ::google::cloud::vision::v1::Property* add_properties();
  ::google::protobuf::RepeatedPtrField< ::google::cloud::vision::v1::Property >*
      mutable_properties();
  const ::google::protobuf::RepeatedPtrField< ::google::cloud::vision::v1::Property >&
      properties() const;

  // string mid = 1;
  void clear_mid();
  static const int kMidFieldNumber = 1;
  const ::std::string& mid() const;
  void set_mid(const ::std::string& value);
  #if LANG_CXX11
  void set_mid(::std::string&& value);
  #endif
  void set_mid(const char* value);
  void set_mid(const char* value, size_t size);
  ::std::string* mutable_mid();
  ::std::string* release_mid();
  void set_allocated_mid(::std::string* mid);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_mid();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_mid(
      ::std::string* mid);

  // string locale = 2;
  void clear_locale();
  static const int kLocaleFieldNumber = 2;
  const ::std::string& locale() const;
  void set_locale(const ::std::string& value);
  #if LANG_CXX11
  void set_locale(::std::string&& value);
  #endif
  void set_locale(const char* value);
  void set_locale(const char* value, size_t size);
  ::std::string* mutable_locale();
  ::std::string* release_locale();
  void set_allocated_locale(::std::string* locale);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_locale();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_locale(
      ::std::string* locale);

  // string description = 3;
  void clear_description();
  static const int kDescriptionFieldNumber = 3;
  const ::std::string& description() const;
  void set_description(const ::std::string& value);
  #if LANG_CXX11
  void set_description(::std::string&& value);
  #endif
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  ::std::string* mutable_description();
  ::std::string* release_description();
  void set_allocated_description(::std::string* description);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_description();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_description(
      ::std::string* description);

  // .google.cloud.vision.v1.BoundingPoly bounding_poly = 7;
  bool has_bounding_poly() const;
  void clear_bounding_poly();
  static const int kBoundingPolyFieldNumber = 7;
  private:
  void _slow_mutable_bounding_poly();
  public:
  const ::google::cloud::vision::v1::BoundingPoly& bounding_poly() const;
  ::google::cloud::vision::v1::BoundingPoly* release_bounding_poly();
  ::google::cloud::vision::v1::BoundingPoly* mutable_bounding_poly();
  void set_allocated_bounding_poly(::google::cloud::vision::v1::BoundingPoly* bounding_poly);
  void unsafe_arena_set_allocated_bounding_poly(
      ::google::cloud::vision::v1::BoundingPoly* bounding_poly);
  ::google::cloud::vision::v1::BoundingPoly* unsafe_arena_release_bounding_poly();

  // float score = 4;
  void clear_score();
  static const int kScoreFieldNumber = 4;
  float score() const;
  void set_score(float value);

  // float confidence = 5;
  void clear_confidence();
  static const int kConfidenceFieldNumber = 5;
  float confidence() const;
  void set_confidence(float value);

  // float topicality = 6;
  void clear_topicality();
  static const int kTopicalityFieldNumber = 6;
  float topicality() const;
  void set_topicality(float value);

  // @@protoc_insertion_point(class_scope:google.cloud.vision.v1.EntityAnnotation)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::RepeatedPtrField< ::google::cloud::vision::v1::LocationInfo > locations_;
  ::google::protobuf::RepeatedPtrField< ::google::cloud::vision::v1::Property > properties_;
  ::google::protobuf::internal::ArenaStringPtr mid_;
  ::google::protobuf::internal::ArenaStringPtr locale_;
  ::google::protobuf::internal::ArenaStringPtr description_;
  ::google::cloud::vision::v1::BoundingPoly* bounding_poly_;
  float score_;
  float confidence_;
  float topicality_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fcloud_2fvision_2fv1_2fimage_5fannotator_2eproto::TableStruct;
  friend void ::protobuf_google_2fcloud_2fvision_2fv1_2fimage_5fannotator_2eproto::InitDefaultsEntityAnnotationImpl();
};
// -------------------------------------------------------------------

class SafeSearchAnnotation : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.cloud.vision.v1.SafeSearchAnnotation) */ {
 public:
  SafeSearchAnnotation();
  virtual ~SafeSearchAnnotation();

  SafeSearchAnnotation(const SafeSearchAnnotation& from);

  inline SafeSearchAnnotation& operator=(const SafeSearchAnnotation& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SafeSearchAnnotation(SafeSearchAnnotation&& from) noexcept
    : SafeSearchAnnotation() {
    *this = ::std::move(from);
  }

  inline SafeSearchAnnotation& operator=(SafeSearchAnnotation&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const SafeSearchAnnotation& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SafeSearchAnnotation* internal_default_instance() {
    return reinterpret_cast<const SafeSearchAnnotation*>(
               &_SafeSearchAnnotation_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    8;

  void UnsafeArenaSwap(SafeSearchAnnotation* other);
  void Swap(SafeSearchAnnotation* other);
  friend void swap(SafeSearchAnnotation& a, SafeSearchAnnotation& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SafeSearchAnnotation* New() const PROTOBUF_FINAL { return New(NULL); }

  SafeSearchAnnotation* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SafeSearchAnnotation& from);
  void MergeFrom(const SafeSearchAnnotation& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SafeSearchAnnotation* other);
  protected:
  explicit SafeSearchAnnotation(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.cloud.vision.v1.Likelihood adult = 1;
  void clear_adult();
  static const int kAdultFieldNumber = 1;
  ::google::cloud::vision::v1::Likelihood adult() const;
  void set_adult(::google::cloud::vision::v1::Likelihood value);

  // .google.cloud.vision.v1.Likelihood spoof = 2;
  void clear_spoof();
  static const int kSpoofFieldNumber = 2;
  ::google::cloud::vision::v1::Likelihood spoof() const;
  void set_spoof(::google::cloud::vision::v1::Likelihood value);

  // .google.cloud.vision.v1.Likelihood medical = 3;
  void clear_medical();
  static const int kMedicalFieldNumber = 3;
  ::google::cloud::vision::v1::Likelihood medical() const;
  void set_medical(::google::cloud::vision::v1::Likelihood value);

  // .google.cloud.vision.v1.Likelihood violence = 4;
  void clear_violence();
  static const int kViolenceFieldNumber = 4;
  ::google::cloud::vision::v1::Likelihood violence() const;
  void set_violence(::google::cloud::vision::v1::Likelihood value);

  // @@protoc_insertion_point(class_scope:google.cloud.vision.v1.SafeSearchAnnotation)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int adult_;
  int spoof_;
  int medical_;
  int violence_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fcloud_2fvision_2fv1_2fimage_5fannotator_2eproto::TableStruct;
  friend void ::protobuf_google_2fcloud_2fvision_2fv1_2fimage_5fannotator_2eproto::InitDefaultsSafeSearchAnnotationImpl();
};
// -------------------------------------------------------------------

class LatLongRect : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.cloud.vision.v1.LatLongRect) */ {
 public:
  LatLongRect();
  virtual ~LatLongRect();

  LatLongRect(const LatLongRect& from);

  inline LatLongRect& operator=(const LatLongRect& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LatLongRect(LatLongRect&& from) noexcept
    : LatLongRect() {
    *this = ::std::move(from);
  }

  inline LatLongRect& operator=(LatLongRect&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const LatLongRect& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LatLongRect* internal_default_instance() {
    return reinterpret_cast<const LatLongRect*>(
               &_LatLongRect_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    9;

  void UnsafeArenaSwap(LatLongRect* other);
  void Swap(LatLongRect* other);
  friend void swap(LatLongRect& a, LatLongRect& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LatLongRect* New() const PROTOBUF_FINAL { return New(NULL); }

  LatLongRect* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const LatLongRect& from);
  void MergeFrom(const LatLongRect& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(LatLongRect* other);
  protected:
  explicit LatLongRect(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.type.LatLng min_lat_lng = 1;
  bool has_min_lat_lng() const;
  void clear_min_lat_lng();
  static const int kMinLatLngFieldNumber = 1;
  private:
  void _slow_mutable_min_lat_lng();
  public:
  const ::google::type::LatLng& min_lat_lng() const;
  ::google::type::LatLng* release_min_lat_lng();
  ::google::type::LatLng* mutable_min_lat_lng();
  void set_allocated_min_lat_lng(::google::type::LatLng* min_lat_lng);
  void unsafe_arena_set_allocated_min_lat_lng(
      ::google::type::LatLng* min_lat_lng);
  ::google::type::LatLng* unsafe_arena_release_min_lat_lng();

  // .google.type.LatLng max_lat_lng = 2;
  bool has_max_lat_lng() const;
  void clear_max_lat_lng();
  static const int kMaxLatLngFieldNumber = 2;
  private:
  void _slow_mutable_max_lat_lng();
  public:
  const ::google::type::LatLng& max_lat_lng() const;
  ::google::type::LatLng* release_max_lat_lng();
  ::google::type::LatLng* mutable_max_lat_lng();
  void set_allocated_max_lat_lng(::google::type::LatLng* max_lat_lng);
  void unsafe_arena_set_allocated_max_lat_lng(
      ::google::type::LatLng* max_lat_lng);
  ::google::type::LatLng* unsafe_arena_release_max_lat_lng();

  // @@protoc_insertion_point(class_scope:google.cloud.vision.v1.LatLongRect)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::type::LatLng* min_lat_lng_;
  ::google::type::LatLng* max_lat_lng_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fcloud_2fvision_2fv1_2fimage_5fannotator_2eproto::TableStruct;
  friend void ::protobuf_google_2fcloud_2fvision_2fv1_2fimage_5fannotator_2eproto::InitDefaultsLatLongRectImpl();
};
// -------------------------------------------------------------------

class ColorInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.cloud.vision.v1.ColorInfo) */ {
 public:
  ColorInfo();
  virtual ~ColorInfo();

  ColorInfo(const ColorInfo& from);

  inline ColorInfo& operator=(const ColorInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ColorInfo(ColorInfo&& from) noexcept
    : ColorInfo() {
    *this = ::std::move(from);
  }

  inline ColorInfo& operator=(ColorInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const ColorInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ColorInfo* internal_default_instance() {
    return reinterpret_cast<const ColorInfo*>(
               &_ColorInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    10;

  void UnsafeArenaSwap(ColorInfo* other);
  void Swap(ColorInfo* other);
  friend void swap(ColorInfo& a, ColorInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ColorInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  ColorInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ColorInfo& from);
  void MergeFrom(const ColorInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ColorInfo* other);
  protected:
  explicit ColorInfo(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.type.Color color = 1;
  bool has_color() const;
  void clear_color();
  static const int kColorFieldNumber = 1;
  private:
  void _slow_mutable_color();
  public:
  const ::google::type::Color& color() const;
  ::google::type::Color* release_color();
  ::google::type::Color* mutable_color();
  void set_allocated_color(::google::type::Color* color);
  void unsafe_arena_set_allocated_color(
      ::google::type::Color* color);
  ::google::type::Color* unsafe_arena_release_color();

  // float score = 2;
  void clear_score();
  static const int kScoreFieldNumber = 2;
  float score() const;
  void set_score(float value);

  // float pixel_fraction = 3;
  void clear_pixel_fraction();
  static const int kPixelFractionFieldNumber = 3;
  float pixel_fraction() const;
  void set_pixel_fraction(float value);

  // @@protoc_insertion_point(class_scope:google.cloud.vision.v1.ColorInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::type::Color* color_;
  float score_;
  float pixel_fraction_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fcloud_2fvision_2fv1_2fimage_5fannotator_2eproto::TableStruct;
  friend void ::protobuf_google_2fcloud_2fvision_2fv1_2fimage_5fannotator_2eproto::InitDefaultsColorInfoImpl();
};
// -------------------------------------------------------------------

class DominantColorsAnnotation : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.cloud.vision.v1.DominantColorsAnnotation) */ {
 public:
  DominantColorsAnnotation();
  virtual ~DominantColorsAnnotation();

  DominantColorsAnnotation(const DominantColorsAnnotation& from);

  inline DominantColorsAnnotation& operator=(const DominantColorsAnnotation& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DominantColorsAnnotation(DominantColorsAnnotation&& from) noexcept
    : DominantColorsAnnotation() {
    *this = ::std::move(from);
  }

  inline DominantColorsAnnotation& operator=(DominantColorsAnnotation&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const DominantColorsAnnotation& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DominantColorsAnnotation* internal_default_instance() {
    return reinterpret_cast<const DominantColorsAnnotation*>(
               &_DominantColorsAnnotation_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    11;

  void UnsafeArenaSwap(DominantColorsAnnotation* other);
  void Swap(DominantColorsAnnotation* other);
  friend void swap(DominantColorsAnnotation& a, DominantColorsAnnotation& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DominantColorsAnnotation* New() const PROTOBUF_FINAL { return New(NULL); }

  DominantColorsAnnotation* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DominantColorsAnnotation& from);
  void MergeFrom(const DominantColorsAnnotation& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DominantColorsAnnotation* other);
  protected:
  explicit DominantColorsAnnotation(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .google.cloud.vision.v1.ColorInfo colors = 1;
  int colors_size() const;
  void clear_colors();
  static const int kColorsFieldNumber = 1;
  const ::google::cloud::vision::v1::ColorInfo& colors(int index) const;
  ::google::cloud::vision::v1::ColorInfo* mutable_colors(int index);
  ::google::cloud::vision::v1::ColorInfo* add_colors();
  ::google::protobuf::RepeatedPtrField< ::google::cloud::vision::v1::ColorInfo >*
      mutable_colors();
  const ::google::protobuf::RepeatedPtrField< ::google::cloud::vision::v1::ColorInfo >&
      colors() const;

  // @@protoc_insertion_point(class_scope:google.cloud.vision.v1.DominantColorsAnnotation)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::RepeatedPtrField< ::google::cloud::vision::v1::ColorInfo > colors_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fcloud_2fvision_2fv1_2fimage_5fannotator_2eproto::TableStruct;
  friend void ::protobuf_google_2fcloud_2fvision_2fv1_2fimage_5fannotator_2eproto::InitDefaultsDominantColorsAnnotationImpl();
};
// -------------------------------------------------------------------

class ImageProperties : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.cloud.vision.v1.ImageProperties) */ {
 public:
  ImageProperties();
  virtual ~ImageProperties();

  ImageProperties(const ImageProperties& from);

  inline ImageProperties& operator=(const ImageProperties& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ImageProperties(ImageProperties&& from) noexcept
    : ImageProperties() {
    *this = ::std::move(from);
  }

  inline ImageProperties& operator=(ImageProperties&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const ImageProperties& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ImageProperties* internal_default_instance() {
    return reinterpret_cast<const ImageProperties*>(
               &_ImageProperties_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    12;

  void UnsafeArenaSwap(ImageProperties* other);
  void Swap(ImageProperties* other);
  friend void swap(ImageProperties& a, ImageProperties& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ImageProperties* New() const PROTOBUF_FINAL { return New(NULL); }

  ImageProperties* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ImageProperties& from);
  void MergeFrom(const ImageProperties& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ImageProperties* other);
  protected:
  explicit ImageProperties(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.cloud.vision.v1.DominantColorsAnnotation dominant_colors = 1;
  bool has_dominant_colors() const;
  void clear_dominant_colors();
  static const int kDominantColorsFieldNumber = 1;
  private:
  void _slow_mutable_dominant_colors();
  public:
  const ::google::cloud::vision::v1::DominantColorsAnnotation& dominant_colors() const;
  ::google::cloud::vision::v1::DominantColorsAnnotation* release_dominant_colors();
  ::google::cloud::vision::v1::DominantColorsAnnotation* mutable_dominant_colors();
  void set_allocated_dominant_colors(::google::cloud::vision::v1::DominantColorsAnnotation* dominant_colors);
  void unsafe_arena_set_allocated_dominant_colors(
      ::google::cloud::vision::v1::DominantColorsAnnotation* dominant_colors);
  ::google::cloud::vision::v1::DominantColorsAnnotation* unsafe_arena_release_dominant_colors();

  // @@protoc_insertion_point(class_scope:google.cloud.vision.v1.ImageProperties)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::cloud::vision::v1::DominantColorsAnnotation* dominant_colors_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fcloud_2fvision_2fv1_2fimage_5fannotator_2eproto::TableStruct;
  friend void ::protobuf_google_2fcloud_2fvision_2fv1_2fimage_5fannotator_2eproto::InitDefaultsImagePropertiesImpl();
};
// -------------------------------------------------------------------

class CropHint : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.cloud.vision.v1.CropHint) */ {
 public:
  CropHint();
  virtual ~CropHint();

  CropHint(const CropHint& from);

  inline CropHint& operator=(const CropHint& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CropHint(CropHint&& from) noexcept
    : CropHint() {
    *this = ::std::move(from);
  }

  inline CropHint& operator=(CropHint&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const CropHint& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CropHint* internal_default_instance() {
    return reinterpret_cast<const CropHint*>(
               &_CropHint_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    13;

  void UnsafeArenaSwap(CropHint* other);
  void Swap(CropHint* other);
  friend void swap(CropHint& a, CropHint& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CropHint* New() const PROTOBUF_FINAL { return New(NULL); }

  CropHint* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CropHint& from);
  void MergeFrom(const CropHint& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CropHint* other);
  protected:
  explicit CropHint(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.cloud.vision.v1.BoundingPoly bounding_poly = 1;
  bool has_bounding_poly() const;
  void clear_bounding_poly();
  static const int kBoundingPolyFieldNumber = 1;
  private:
  void _slow_mutable_bounding_poly();
  public:
  const ::google::cloud::vision::v1::BoundingPoly& bounding_poly() const;
  ::google::cloud::vision::v1::BoundingPoly* release_bounding_poly();
  ::google::cloud::vision::v1::BoundingPoly* mutable_bounding_poly();
  void set_allocated_bounding_poly(::google::cloud::vision::v1::BoundingPoly* bounding_poly);
  void unsafe_arena_set_allocated_bounding_poly(
      ::google::cloud::vision::v1::BoundingPoly* bounding_poly);
  ::google::cloud::vision::v1::BoundingPoly* unsafe_arena_release_bounding_poly();

  // float confidence = 2;
  void clear_confidence();
  static const int kConfidenceFieldNumber = 2;
  float confidence() const;
  void set_confidence(float value);

  // float importance_fraction = 3;
  void clear_importance_fraction();
  static const int kImportanceFractionFieldNumber = 3;
  float importance_fraction() const;
  void set_importance_fraction(float value);

  // @@protoc_insertion_point(class_scope:google.cloud.vision.v1.CropHint)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::cloud::vision::v1::BoundingPoly* bounding_poly_;
  float confidence_;
  float importance_fraction_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fcloud_2fvision_2fv1_2fimage_5fannotator_2eproto::TableStruct;
  friend void ::protobuf_google_2fcloud_2fvision_2fv1_2fimage_5fannotator_2eproto::InitDefaultsCropHintImpl();
};
// -------------------------------------------------------------------

class CropHintsAnnotation : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.cloud.vision.v1.CropHintsAnnotation) */ {
 public:
  CropHintsAnnotation();
  virtual ~CropHintsAnnotation();

  CropHintsAnnotation(const CropHintsAnnotation& from);

  inline CropHintsAnnotation& operator=(const CropHintsAnnotation& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CropHintsAnnotation(CropHintsAnnotation&& from) noexcept
    : CropHintsAnnotation() {
    *this = ::std::move(from);
  }

  inline CropHintsAnnotation& operator=(CropHintsAnnotation&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const CropHintsAnnotation& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CropHintsAnnotation* internal_default_instance() {
    return reinterpret_cast<const CropHintsAnnotation*>(
               &_CropHintsAnnotation_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    14;

  void UnsafeArenaSwap(CropHintsAnnotation* other);
  void Swap(CropHintsAnnotation* other);
  friend void swap(CropHintsAnnotation& a, CropHintsAnnotation& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CropHintsAnnotation* New() const PROTOBUF_FINAL { return New(NULL); }

  CropHintsAnnotation* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CropHintsAnnotation& from);
  void MergeFrom(const CropHintsAnnotation& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CropHintsAnnotation* other);
  protected:
  explicit CropHintsAnnotation(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .google.cloud.vision.v1.CropHint crop_hints = 1;
  int crop_hints_size() const;
  void clear_crop_hints();
  static const int kCropHintsFieldNumber = 1;
  const ::google::cloud::vision::v1::CropHint& crop_hints(int index) const;
  ::google::cloud::vision::v1::CropHint* mutable_crop_hints(int index);
  ::google::cloud::vision::v1::CropHint* add_crop_hints();
  ::google::protobuf::RepeatedPtrField< ::google::cloud::vision::v1::CropHint >*
      mutable_crop_hints();
  const ::google::protobuf::RepeatedPtrField< ::google::cloud::vision::v1::CropHint >&
      crop_hints() const;

  // @@protoc_insertion_point(class_scope:google.cloud.vision.v1.CropHintsAnnotation)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::RepeatedPtrField< ::google::cloud::vision::v1::CropHint > crop_hints_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fcloud_2fvision_2fv1_2fimage_5fannotator_2eproto::TableStruct;
  friend void ::protobuf_google_2fcloud_2fvision_2fv1_2fimage_5fannotator_2eproto::InitDefaultsCropHintsAnnotationImpl();
};
// -------------------------------------------------------------------

class CropHintsParams : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.cloud.vision.v1.CropHintsParams) */ {
 public:
  CropHintsParams();
  virtual ~CropHintsParams();

  CropHintsParams(const CropHintsParams& from);

  inline CropHintsParams& operator=(const CropHintsParams& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CropHintsParams(CropHintsParams&& from) noexcept
    : CropHintsParams() {
    *this = ::std::move(from);
  }

  inline CropHintsParams& operator=(CropHintsParams&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const CropHintsParams& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CropHintsParams* internal_default_instance() {
    return reinterpret_cast<const CropHintsParams*>(
               &_CropHintsParams_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    15;

  void UnsafeArenaSwap(CropHintsParams* other);
  void Swap(CropHintsParams* other);
  friend void swap(CropHintsParams& a, CropHintsParams& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CropHintsParams* New() const PROTOBUF_FINAL { return New(NULL); }

  CropHintsParams* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CropHintsParams& from);
  void MergeFrom(const CropHintsParams& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CropHintsParams* other);
  protected:
  explicit CropHintsParams(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated float aspect_ratios = 1;
  int aspect_ratios_size() const;
  void clear_aspect_ratios();
  static const int kAspectRatiosFieldNumber = 1;
  float aspect_ratios(int index) const;
  void set_aspect_ratios(int index, float value);
  void add_aspect_ratios(float value);
  const ::google::protobuf::RepeatedField< float >&
      aspect_ratios() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_aspect_ratios();

  // @@protoc_insertion_point(class_scope:google.cloud.vision.v1.CropHintsParams)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::RepeatedField< float > aspect_ratios_;
  mutable int _aspect_ratios_cached_byte_size_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fcloud_2fvision_2fv1_2fimage_5fannotator_2eproto::TableStruct;
  friend void ::protobuf_google_2fcloud_2fvision_2fv1_2fimage_5fannotator_2eproto::InitDefaultsCropHintsParamsImpl();
};
// -------------------------------------------------------------------

class ImageContext : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.cloud.vision.v1.ImageContext) */ {
 public:
  ImageContext();
  virtual ~ImageContext();

  ImageContext(const ImageContext& from);

  inline ImageContext& operator=(const ImageContext& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ImageContext(ImageContext&& from) noexcept
    : ImageContext() {
    *this = ::std::move(from);
  }

  inline ImageContext& operator=(ImageContext&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const ImageContext& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ImageContext* internal_default_instance() {
    return reinterpret_cast<const ImageContext*>(
               &_ImageContext_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    16;

  void UnsafeArenaSwap(ImageContext* other);
  void Swap(ImageContext* other);
  friend void swap(ImageContext& a, ImageContext& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ImageContext* New() const PROTOBUF_FINAL { return New(NULL); }

  ImageContext* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ImageContext& from);
  void MergeFrom(const ImageContext& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ImageContext* other);
  protected:
  explicit ImageContext(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string language_hints = 2;
  int language_hints_size() const;
  void clear_language_hints();
  static const int kLanguageHintsFieldNumber = 2;
  const ::std::string& language_hints(int index) const;
  ::std::string* mutable_language_hints(int index);
  void set_language_hints(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_language_hints(int index, ::std::string&& value);
  #endif
  void set_language_hints(int index, const char* value);
  void set_language_hints(int index, const char* value, size_t size);
  ::std::string* add_language_hints();
  void add_language_hints(const ::std::string& value);
  #if LANG_CXX11
  void add_language_hints(::std::string&& value);
  #endif
  void add_language_hints(const char* value);
  void add_language_hints(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& language_hints() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_language_hints();

  // .google.cloud.vision.v1.LatLongRect lat_long_rect = 1;
  bool has_lat_long_rect() const;
  void clear_lat_long_rect();
  static const int kLatLongRectFieldNumber = 1;
  private:
  void _slow_mutable_lat_long_rect();
  public:
  const ::google::cloud::vision::v1::LatLongRect& lat_long_rect() const;
  ::google::cloud::vision::v1::LatLongRect* release_lat_long_rect();
  ::google::cloud::vision::v1::LatLongRect* mutable_lat_long_rect();
  void set_allocated_lat_long_rect(::google::cloud::vision::v1::LatLongRect* lat_long_rect);
  void unsafe_arena_set_allocated_lat_long_rect(
      ::google::cloud::vision::v1::LatLongRect* lat_long_rect);
  ::google::cloud::vision::v1::LatLongRect* unsafe_arena_release_lat_long_rect();

  // .google.cloud.vision.v1.CropHintsParams crop_hints_params = 4;
  bool has_crop_hints_params() const;
  void clear_crop_hints_params();
  static const int kCropHintsParamsFieldNumber = 4;
  private:
  void _slow_mutable_crop_hints_params();
  public:
  const ::google::cloud::vision::v1::CropHintsParams& crop_hints_params() const;
  ::google::cloud::vision::v1::CropHintsParams* release_crop_hints_params();
  ::google::cloud::vision::v1::CropHintsParams* mutable_crop_hints_params();
  void set_allocated_crop_hints_params(::google::cloud::vision::v1::CropHintsParams* crop_hints_params);
  void unsafe_arena_set_allocated_crop_hints_params(
      ::google::cloud::vision::v1::CropHintsParams* crop_hints_params);
  ::google::cloud::vision::v1::CropHintsParams* unsafe_arena_release_crop_hints_params();

  // @@protoc_insertion_point(class_scope:google.cloud.vision.v1.ImageContext)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::RepeatedPtrField< ::std::string> language_hints_;
  ::google::cloud::vision::v1::LatLongRect* lat_long_rect_;
  ::google::cloud::vision::v1::CropHintsParams* crop_hints_params_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fcloud_2fvision_2fv1_2fimage_5fannotator_2eproto::TableStruct;
  friend void ::protobuf_google_2fcloud_2fvision_2fv1_2fimage_5fannotator_2eproto::InitDefaultsImageContextImpl();
};
// -------------------------------------------------------------------

class AnnotateImageRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.cloud.vision.v1.AnnotateImageRequest) */ {
 public:
  AnnotateImageRequest();
  virtual ~AnnotateImageRequest();

  AnnotateImageRequest(const AnnotateImageRequest& from);

  inline AnnotateImageRequest& operator=(const AnnotateImageRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AnnotateImageRequest(AnnotateImageRequest&& from) noexcept
    : AnnotateImageRequest() {
    *this = ::std::move(from);
  }

  inline AnnotateImageRequest& operator=(AnnotateImageRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const AnnotateImageRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AnnotateImageRequest* internal_default_instance() {
    return reinterpret_cast<const AnnotateImageRequest*>(
               &_AnnotateImageRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    17;

  void UnsafeArenaSwap(AnnotateImageRequest* other);
  void Swap(AnnotateImageRequest* other);
  friend void swap(AnnotateImageRequest& a, AnnotateImageRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AnnotateImageRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  AnnotateImageRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const AnnotateImageRequest& from);
  void MergeFrom(const AnnotateImageRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(AnnotateImageRequest* other);
  protected:
  explicit AnnotateImageRequest(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .google.cloud.vision.v1.Feature features = 2;
  int features_size() const;
  void clear_features();
  static const int kFeaturesFieldNumber = 2;
  const ::google::cloud::vision::v1::Feature& features(int index) const;
  ::google::cloud::vision::v1::Feature* mutable_features(int index);
  ::google::cloud::vision::v1::Feature* add_features();
  ::google::protobuf::RepeatedPtrField< ::google::cloud::vision::v1::Feature >*
      mutable_features();
  const ::google::protobuf::RepeatedPtrField< ::google::cloud::vision::v1::Feature >&
      features() const;

  // .google.cloud.vision.v1.Image image = 1;
  bool has_image() const;
  void clear_image();
  static const int kImageFieldNumber = 1;
  private:
  void _slow_mutable_image();
  public:
  const ::google::cloud::vision::v1::Image& image() const;
  ::google::cloud::vision::v1::Image* release_image();
  ::google::cloud::vision::v1::Image* mutable_image();
  void set_allocated_image(::google::cloud::vision::v1::Image* image);
  void unsafe_arena_set_allocated_image(
      ::google::cloud::vision::v1::Image* image);
  ::google::cloud::vision::v1::Image* unsafe_arena_release_image();

  // .google.cloud.vision.v1.ImageContext image_context = 3;
  bool has_image_context() const;
  void clear_image_context();
  static const int kImageContextFieldNumber = 3;
  private:
  void _slow_mutable_image_context();
  public:
  const ::google::cloud::vision::v1::ImageContext& image_context() const;
  ::google::cloud::vision::v1::ImageContext* release_image_context();
  ::google::cloud::vision::v1::ImageContext* mutable_image_context();
  void set_allocated_image_context(::google::cloud::vision::v1::ImageContext* image_context);
  void unsafe_arena_set_allocated_image_context(
      ::google::cloud::vision::v1::ImageContext* image_context);
  ::google::cloud::vision::v1::ImageContext* unsafe_arena_release_image_context();

  // @@protoc_insertion_point(class_scope:google.cloud.vision.v1.AnnotateImageRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::RepeatedPtrField< ::google::cloud::vision::v1::Feature > features_;
  ::google::cloud::vision::v1::Image* image_;
  ::google::cloud::vision::v1::ImageContext* image_context_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fcloud_2fvision_2fv1_2fimage_5fannotator_2eproto::TableStruct;
  friend void ::protobuf_google_2fcloud_2fvision_2fv1_2fimage_5fannotator_2eproto::InitDefaultsAnnotateImageRequestImpl();
};
// -------------------------------------------------------------------

class AnnotateImageResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.cloud.vision.v1.AnnotateImageResponse) */ {
 public:
  AnnotateImageResponse();
  virtual ~AnnotateImageResponse();

  AnnotateImageResponse(const AnnotateImageResponse& from);

  inline AnnotateImageResponse& operator=(const AnnotateImageResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AnnotateImageResponse(AnnotateImageResponse&& from) noexcept
    : AnnotateImageResponse() {
    *this = ::std::move(from);
  }

  inline AnnotateImageResponse& operator=(AnnotateImageResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const AnnotateImageResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AnnotateImageResponse* internal_default_instance() {
    return reinterpret_cast<const AnnotateImageResponse*>(
               &_AnnotateImageResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    18;

  void UnsafeArenaSwap(AnnotateImageResponse* other);
  void Swap(AnnotateImageResponse* other);
  friend void swap(AnnotateImageResponse& a, AnnotateImageResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AnnotateImageResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  AnnotateImageResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const AnnotateImageResponse& from);
  void MergeFrom(const AnnotateImageResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(AnnotateImageResponse* other);
  protected:
  explicit AnnotateImageResponse(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .google.cloud.vision.v1.FaceAnnotation face_annotations = 1;
  int face_annotations_size() const;
  void clear_face_annotations();
  static const int kFaceAnnotationsFieldNumber = 1;
  const ::google::cloud::vision::v1::FaceAnnotation& face_annotations(int index) const;
  ::google::cloud::vision::v1::FaceAnnotation* mutable_face_annotations(int index);
  ::google::cloud::vision::v1::FaceAnnotation* add_face_annotations();
  ::google::protobuf::RepeatedPtrField< ::google::cloud::vision::v1::FaceAnnotation >*
      mutable_face_annotations();
  const ::google::protobuf::RepeatedPtrField< ::google::cloud::vision::v1::FaceAnnotation >&
      face_annotations() const;

  // repeated .google.cloud.vision.v1.EntityAnnotation landmark_annotations = 2;
  int landmark_annotations_size() const;
  void clear_landmark_annotations();
  static const int kLandmarkAnnotationsFieldNumber = 2;
  const ::google::cloud::vision::v1::EntityAnnotation& landmark_annotations(int index) const;
  ::google::cloud::vision::v1::EntityAnnotation* mutable_landmark_annotations(int index);
  ::google::cloud::vision::v1::EntityAnnotation* add_landmark_annotations();
  ::google::protobuf::RepeatedPtrField< ::google::cloud::vision::v1::EntityAnnotation >*
      mutable_landmark_annotations();
  const ::google::protobuf::RepeatedPtrField< ::google::cloud::vision::v1::EntityAnnotation >&
      landmark_annotations() const;

  // repeated .google.cloud.vision.v1.EntityAnnotation logo_annotations = 3;
  int logo_annotations_size() const;
  void clear_logo_annotations();
  static const int kLogoAnnotationsFieldNumber = 3;
  const ::google::cloud::vision::v1::EntityAnnotation& logo_annotations(int index) const;
  ::google::cloud::vision::v1::EntityAnnotation* mutable_logo_annotations(int index);
  ::google::cloud::vision::v1::EntityAnnotation* add_logo_annotations();
  ::google::protobuf::RepeatedPtrField< ::google::cloud::vision::v1::EntityAnnotation >*
      mutable_logo_annotations();
  const ::google::protobuf::RepeatedPtrField< ::google::cloud::vision::v1::EntityAnnotation >&
      logo_annotations() const;

  // repeated .google.cloud.vision.v1.EntityAnnotation label_annotations = 4;
  int label_annotations_size() const;
  void clear_label_annotations();
  static const int kLabelAnnotationsFieldNumber = 4;
  const ::google::cloud::vision::v1::EntityAnnotation& label_annotations(int index) const;
  ::google::cloud::vision::v1::EntityAnnotation* mutable_label_annotations(int index);
  ::google::cloud::vision::v1::EntityAnnotation* add_label_annotations();
  ::google::protobuf::RepeatedPtrField< ::google::cloud::vision::v1::EntityAnnotation >*
      mutable_label_annotations();
  const ::google::protobuf::RepeatedPtrField< ::google::cloud::vision::v1::EntityAnnotation >&
      label_annotations() const;

  // repeated .google.cloud.vision.v1.EntityAnnotation text_annotations = 5;
  int text_annotations_size() const;
  void clear_text_annotations();
  static const int kTextAnnotationsFieldNumber = 5;
  const ::google::cloud::vision::v1::EntityAnnotation& text_annotations(int index) const;
  ::google::cloud::vision::v1::EntityAnnotation* mutable_text_annotations(int index);
  ::google::cloud::vision::v1::EntityAnnotation* add_text_annotations();
  ::google::protobuf::RepeatedPtrField< ::google::cloud::vision::v1::EntityAnnotation >*
      mutable_text_annotations();
  const ::google::protobuf::RepeatedPtrField< ::google::cloud::vision::v1::EntityAnnotation >&
      text_annotations() const;

  // .google.cloud.vision.v1.SafeSearchAnnotation safe_search_annotation = 6;
  bool has_safe_search_annotation() const;
  void clear_safe_search_annotation();
  static const int kSafeSearchAnnotationFieldNumber = 6;
  private:
  void _slow_mutable_safe_search_annotation();
  public:
  const ::google::cloud::vision::v1::SafeSearchAnnotation& safe_search_annotation() const;
  ::google::cloud::vision::v1::SafeSearchAnnotation* release_safe_search_annotation();
  ::google::cloud::vision::v1::SafeSearchAnnotation* mutable_safe_search_annotation();
  void set_allocated_safe_search_annotation(::google::cloud::vision::v1::SafeSearchAnnotation* safe_search_annotation);
  void unsafe_arena_set_allocated_safe_search_annotation(
      ::google::cloud::vision::v1::SafeSearchAnnotation* safe_search_annotation);
  ::google::cloud::vision::v1::SafeSearchAnnotation* unsafe_arena_release_safe_search_annotation();

  // .google.cloud.vision.v1.ImageProperties image_properties_annotation = 8;
  bool has_image_properties_annotation() const;
  void clear_image_properties_annotation();
  static const int kImagePropertiesAnnotationFieldNumber = 8;
  private:
  void _slow_mutable_image_properties_annotation();
  public:
  const ::google::cloud::vision::v1::ImageProperties& image_properties_annotation() const;
  ::google::cloud::vision::v1::ImageProperties* release_image_properties_annotation();
  ::google::cloud::vision::v1::ImageProperties* mutable_image_properties_annotation();
  void set_allocated_image_properties_annotation(::google::cloud::vision::v1::ImageProperties* image_properties_annotation);
  void unsafe_arena_set_allocated_image_properties_annotation(
      ::google::cloud::vision::v1::ImageProperties* image_properties_annotation);
  ::google::cloud::vision::v1::ImageProperties* unsafe_arena_release_image_properties_annotation();

  // .google.rpc.Status error = 9;
  bool has_error() const;
  void clear_error();
  static const int kErrorFieldNumber = 9;
  private:
  void _slow_mutable_error();
  public:
  const ::google::rpc::Status& error() const;
  ::google::rpc::Status* release_error();
  ::google::rpc::Status* mutable_error();
  void set_allocated_error(::google::rpc::Status* error);
  void unsafe_arena_set_allocated_error(
      ::google::rpc::Status* error);
  ::google::rpc::Status* unsafe_arena_release_error();

  // .google.cloud.vision.v1.CropHintsAnnotation crop_hints_annotation = 11;
  bool has_crop_hints_annotation() const;
  void clear_crop_hints_annotation();
  static const int kCropHintsAnnotationFieldNumber = 11;
  private:
  void _slow_mutable_crop_hints_annotation();
  public:
  const ::google::cloud::vision::v1::CropHintsAnnotation& crop_hints_annotation() const;
  ::google::cloud::vision::v1::CropHintsAnnotation* release_crop_hints_annotation();
  ::google::cloud::vision::v1::CropHintsAnnotation* mutable_crop_hints_annotation();
  void set_allocated_crop_hints_annotation(::google::cloud::vision::v1::CropHintsAnnotation* crop_hints_annotation);
  void unsafe_arena_set_allocated_crop_hints_annotation(
      ::google::cloud::vision::v1::CropHintsAnnotation* crop_hints_annotation);
  ::google::cloud::vision::v1::CropHintsAnnotation* unsafe_arena_release_crop_hints_annotation();

  // .google.cloud.vision.v1.TextAnnotation full_text_annotation = 12;
  bool has_full_text_annotation() const;
  void clear_full_text_annotation();
  static const int kFullTextAnnotationFieldNumber = 12;
  private:
  void _slow_mutable_full_text_annotation();
  public:
  const ::google::cloud::vision::v1::TextAnnotation& full_text_annotation() const;
  ::google::cloud::vision::v1::TextAnnotation* release_full_text_annotation();
  ::google::cloud::vision::v1::TextAnnotation* mutable_full_text_annotation();
  void set_allocated_full_text_annotation(::google::cloud::vision::v1::TextAnnotation* full_text_annotation);
  void unsafe_arena_set_allocated_full_text_annotation(
      ::google::cloud::vision::v1::TextAnnotation* full_text_annotation);
  ::google::cloud::vision::v1::TextAnnotation* unsafe_arena_release_full_text_annotation();

  // .google.cloud.vision.v1.WebDetection web_detection = 13;
  bool has_web_detection() const;
  void clear_web_detection();
  static const int kWebDetectionFieldNumber = 13;
  private:
  void _slow_mutable_web_detection();
  public:
  const ::google::cloud::vision::v1::WebDetection& web_detection() const;
  ::google::cloud::vision::v1::WebDetection* release_web_detection();
  ::google::cloud::vision::v1::WebDetection* mutable_web_detection();
  void set_allocated_web_detection(::google::cloud::vision::v1::WebDetection* web_detection);
  void unsafe_arena_set_allocated_web_detection(
      ::google::cloud::vision::v1::WebDetection* web_detection);
  ::google::cloud::vision::v1::WebDetection* unsafe_arena_release_web_detection();

  // @@protoc_insertion_point(class_scope:google.cloud.vision.v1.AnnotateImageResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::RepeatedPtrField< ::google::cloud::vision::v1::FaceAnnotation > face_annotations_;
  ::google::protobuf::RepeatedPtrField< ::google::cloud::vision::v1::EntityAnnotation > landmark_annotations_;
  ::google::protobuf::RepeatedPtrField< ::google::cloud::vision::v1::EntityAnnotation > logo_annotations_;
  ::google::protobuf::RepeatedPtrField< ::google::cloud::vision::v1::EntityAnnotation > label_annotations_;
  ::google::protobuf::RepeatedPtrField< ::google::cloud::vision::v1::EntityAnnotation > text_annotations_;
  ::google::cloud::vision::v1::SafeSearchAnnotation* safe_search_annotation_;
  ::google::cloud::vision::v1::ImageProperties* image_properties_annotation_;
  ::google::rpc::Status* error_;
  ::google::cloud::vision::v1::CropHintsAnnotation* crop_hints_annotation_;
  ::google::cloud::vision::v1::TextAnnotation* full_text_annotation_;
  ::google::cloud::vision::v1::WebDetection* web_detection_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fcloud_2fvision_2fv1_2fimage_5fannotator_2eproto::TableStruct;
  friend void ::protobuf_google_2fcloud_2fvision_2fv1_2fimage_5fannotator_2eproto::InitDefaultsAnnotateImageResponseImpl();
};
// -------------------------------------------------------------------

class BatchAnnotateImagesRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.cloud.vision.v1.BatchAnnotateImagesRequest) */ {
 public:
  BatchAnnotateImagesRequest();
  virtual ~BatchAnnotateImagesRequest();

  BatchAnnotateImagesRequest(const BatchAnnotateImagesRequest& from);

  inline BatchAnnotateImagesRequest& operator=(const BatchAnnotateImagesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  BatchAnnotateImagesRequest(BatchAnnotateImagesRequest&& from) noexcept
    : BatchAnnotateImagesRequest() {
    *this = ::std::move(from);
  }

  inline BatchAnnotateImagesRequest& operator=(BatchAnnotateImagesRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const BatchAnnotateImagesRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BatchAnnotateImagesRequest* internal_default_instance() {
    return reinterpret_cast<const BatchAnnotateImagesRequest*>(
               &_BatchAnnotateImagesRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    19;

  void UnsafeArenaSwap(BatchAnnotateImagesRequest* other);
  void Swap(BatchAnnotateImagesRequest* other);
  friend void swap(BatchAnnotateImagesRequest& a, BatchAnnotateImagesRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BatchAnnotateImagesRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  BatchAnnotateImagesRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const BatchAnnotateImagesRequest& from);
  void MergeFrom(const BatchAnnotateImagesRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(BatchAnnotateImagesRequest* other);
  protected:
  explicit BatchAnnotateImagesRequest(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .google.cloud.vision.v1.AnnotateImageRequest requests = 1;
  int requests_size() const;
  void clear_requests();
  static const int kRequestsFieldNumber = 1;
  const ::google::cloud::vision::v1::AnnotateImageRequest& requests(int index) const;
  ::google::cloud::vision::v1::AnnotateImageRequest* mutable_requests(int index);
  ::google::cloud::vision::v1::AnnotateImageRequest* add_requests();
  ::google::protobuf::RepeatedPtrField< ::google::cloud::vision::v1::AnnotateImageRequest >*
      mutable_requests();
  const ::google::protobuf::RepeatedPtrField< ::google::cloud::vision::v1::AnnotateImageRequest >&
      requests() const;

  // @@protoc_insertion_point(class_scope:google.cloud.vision.v1.BatchAnnotateImagesRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::RepeatedPtrField< ::google::cloud::vision::v1::AnnotateImageRequest > requests_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fcloud_2fvision_2fv1_2fimage_5fannotator_2eproto::TableStruct;
  friend void ::protobuf_google_2fcloud_2fvision_2fv1_2fimage_5fannotator_2eproto::InitDefaultsBatchAnnotateImagesRequestImpl();
};
// -------------------------------------------------------------------

class BatchAnnotateImagesResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.cloud.vision.v1.BatchAnnotateImagesResponse) */ {
 public:
  BatchAnnotateImagesResponse();
  virtual ~BatchAnnotateImagesResponse();

  BatchAnnotateImagesResponse(const BatchAnnotateImagesResponse& from);

  inline BatchAnnotateImagesResponse& operator=(const BatchAnnotateImagesResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  BatchAnnotateImagesResponse(BatchAnnotateImagesResponse&& from) noexcept
    : BatchAnnotateImagesResponse() {
    *this = ::std::move(from);
  }

  inline BatchAnnotateImagesResponse& operator=(BatchAnnotateImagesResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const BatchAnnotateImagesResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BatchAnnotateImagesResponse* internal_default_instance() {
    return reinterpret_cast<const BatchAnnotateImagesResponse*>(
               &_BatchAnnotateImagesResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    20;

  void UnsafeArenaSwap(BatchAnnotateImagesResponse* other);
  void Swap(BatchAnnotateImagesResponse* other);
  friend void swap(BatchAnnotateImagesResponse& a, BatchAnnotateImagesResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BatchAnnotateImagesResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  BatchAnnotateImagesResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const BatchAnnotateImagesResponse& from);
  void MergeFrom(const BatchAnnotateImagesResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(BatchAnnotateImagesResponse* other);
  protected:
  explicit BatchAnnotateImagesResponse(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .google.cloud.vision.v1.AnnotateImageResponse responses = 1;
  int responses_size() const;
  void clear_responses();
  static const int kResponsesFieldNumber = 1;
  const ::google::cloud::vision::v1::AnnotateImageResponse& responses(int index) const;
  ::google::cloud::vision::v1::AnnotateImageResponse* mutable_responses(int index);
  ::google::cloud::vision::v1::AnnotateImageResponse* add_responses();
  ::google::protobuf::RepeatedPtrField< ::google::cloud::vision::v1::AnnotateImageResponse >*
      mutable_responses();
  const ::google::protobuf::RepeatedPtrField< ::google::cloud::vision::v1::AnnotateImageResponse >&
      responses() const;

  // @@protoc_insertion_point(class_scope:google.cloud.vision.v1.BatchAnnotateImagesResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::RepeatedPtrField< ::google::cloud::vision::v1::AnnotateImageResponse > responses_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fcloud_2fvision_2fv1_2fimage_5fannotator_2eproto::TableStruct;
  friend void ::protobuf_google_2fcloud_2fvision_2fv1_2fimage_5fannotator_2eproto::InitDefaultsBatchAnnotateImagesResponseImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Feature

// .google.cloud.vision.v1.Feature.Type type = 1;
inline void Feature::clear_type() {
  type_ = 0;
}
inline ::google::cloud::vision::v1::Feature_Type Feature::type() const {
  // @@protoc_insertion_point(field_get:google.cloud.vision.v1.Feature.type)
  return static_cast< ::google::cloud::vision::v1::Feature_Type >(type_);
}
inline void Feature::set_type(::google::cloud::vision::v1::Feature_Type value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:google.cloud.vision.v1.Feature.type)
}

// int32 max_results = 2;
inline void Feature::clear_max_results() {
  max_results_ = 0;
}
inline ::google::protobuf::int32 Feature::max_results() const {
  // @@protoc_insertion_point(field_get:google.cloud.vision.v1.Feature.max_results)
  return max_results_;
}
inline void Feature::set_max_results(::google::protobuf::int32 value) {
  
  max_results_ = value;
  // @@protoc_insertion_point(field_set:google.cloud.vision.v1.Feature.max_results)
}

// -------------------------------------------------------------------

// ImageSource

// string gcs_image_uri = 1;
inline void ImageSource::clear_gcs_image_uri() {
  gcs_image_uri_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& ImageSource::gcs_image_uri() const {
  // @@protoc_insertion_point(field_get:google.cloud.vision.v1.ImageSource.gcs_image_uri)
  return gcs_image_uri_.Get();
}
inline void ImageSource::set_gcs_image_uri(const ::std::string& value) {
  
  gcs_image_uri_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.cloud.vision.v1.ImageSource.gcs_image_uri)
}
#if LANG_CXX11
inline void ImageSource::set_gcs_image_uri(::std::string&& value) {
  
  gcs_image_uri_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.vision.v1.ImageSource.gcs_image_uri)
}
#endif
inline void ImageSource::set_gcs_image_uri(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  gcs_image_uri_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.cloud.vision.v1.ImageSource.gcs_image_uri)
}
inline void ImageSource::set_gcs_image_uri(const char* value,
    size_t size) {
  
  gcs_image_uri_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.cloud.vision.v1.ImageSource.gcs_image_uri)
}
inline ::std::string* ImageSource::mutable_gcs_image_uri() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.vision.v1.ImageSource.gcs_image_uri)
  return gcs_image_uri_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ImageSource::release_gcs_image_uri() {
  // @@protoc_insertion_point(field_release:google.cloud.vision.v1.ImageSource.gcs_image_uri)
  
  return gcs_image_uri_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ImageSource::set_allocated_gcs_image_uri(::std::string* gcs_image_uri) {
  if (gcs_image_uri != NULL) {
    
  } else {
    
  }
  gcs_image_uri_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), gcs_image_uri,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.cloud.vision.v1.ImageSource.gcs_image_uri)
}
inline ::std::string* ImageSource::unsafe_arena_release_gcs_image_uri() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.cloud.vision.v1.ImageSource.gcs_image_uri)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return gcs_image_uri_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ImageSource::unsafe_arena_set_allocated_gcs_image_uri(
    ::std::string* gcs_image_uri) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (gcs_image_uri != NULL) {
    
  } else {
    
  }
  gcs_image_uri_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      gcs_image_uri, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.vision.v1.ImageSource.gcs_image_uri)
}

// string image_uri = 2;
inline void ImageSource::clear_image_uri() {
  image_uri_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& ImageSource::image_uri() const {
  // @@protoc_insertion_point(field_get:google.cloud.vision.v1.ImageSource.image_uri)
  return image_uri_.Get();
}
inline void ImageSource::set_image_uri(const ::std::string& value) {
  
  image_uri_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.cloud.vision.v1.ImageSource.image_uri)
}
#if LANG_CXX11
inline void ImageSource::set_image_uri(::std::string&& value) {
  
  image_uri_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.vision.v1.ImageSource.image_uri)
}
#endif
inline void ImageSource::set_image_uri(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  image_uri_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.cloud.vision.v1.ImageSource.image_uri)
}
inline void ImageSource::set_image_uri(const char* value,
    size_t size) {
  
  image_uri_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.cloud.vision.v1.ImageSource.image_uri)
}
inline ::std::string* ImageSource::mutable_image_uri() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.vision.v1.ImageSource.image_uri)
  return image_uri_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ImageSource::release_image_uri() {
  // @@protoc_insertion_point(field_release:google.cloud.vision.v1.ImageSource.image_uri)
  
  return image_uri_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ImageSource::set_allocated_image_uri(::std::string* image_uri) {
  if (image_uri != NULL) {
    
  } else {
    
  }
  image_uri_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), image_uri,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.cloud.vision.v1.ImageSource.image_uri)
}
inline ::std::string* ImageSource::unsafe_arena_release_image_uri() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.cloud.vision.v1.ImageSource.image_uri)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return image_uri_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ImageSource::unsafe_arena_set_allocated_image_uri(
    ::std::string* image_uri) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (image_uri != NULL) {
    
  } else {
    
  }
  image_uri_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      image_uri, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.vision.v1.ImageSource.image_uri)
}

// -------------------------------------------------------------------

// Image

// bytes content = 1;
inline void Image::clear_content() {
  content_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& Image::content() const {
  // @@protoc_insertion_point(field_get:google.cloud.vision.v1.Image.content)
  return content_.Get();
}
inline void Image::set_content(const ::std::string& value) {
  
  content_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.cloud.vision.v1.Image.content)
}
#if LANG_CXX11
inline void Image::set_content(::std::string&& value) {
  
  content_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.vision.v1.Image.content)
}
#endif
inline void Image::set_content(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  content_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.cloud.vision.v1.Image.content)
}
inline void Image::set_content(const void* value,
    size_t size) {
  
  content_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.cloud.vision.v1.Image.content)
}
inline ::std::string* Image::mutable_content() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.vision.v1.Image.content)
  return content_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* Image::release_content() {
  // @@protoc_insertion_point(field_release:google.cloud.vision.v1.Image.content)
  
  return content_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void Image::set_allocated_content(::std::string* content) {
  if (content != NULL) {
    
  } else {
    
  }
  content_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), content,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.cloud.vision.v1.Image.content)
}
inline ::std::string* Image::unsafe_arena_release_content() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.cloud.vision.v1.Image.content)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return content_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void Image::unsafe_arena_set_allocated_content(
    ::std::string* content) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (content != NULL) {
    
  } else {
    
  }
  content_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      content, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.vision.v1.Image.content)
}

// .google.cloud.vision.v1.ImageSource source = 2;
inline bool Image::has_source() const {
  return this != internal_default_instance() && source_ != NULL;
}
inline void Image::clear_source() {
  if (GetArenaNoVirtual() == NULL && source_ != NULL) {
    delete source_;
  }
  source_ = NULL;
}
inline const ::google::cloud::vision::v1::ImageSource& Image::source() const {
  const ::google::cloud::vision::v1::ImageSource* p = source_;
  // @@protoc_insertion_point(field_get:google.cloud.vision.v1.Image.source)
  return p != NULL ? *p : *reinterpret_cast<const ::google::cloud::vision::v1::ImageSource*>(
      &::google::cloud::vision::v1::_ImageSource_default_instance_);
}
inline ::google::cloud::vision::v1::ImageSource* Image::release_source() {
  // @@protoc_insertion_point(field_release:google.cloud.vision.v1.Image.source)
  
  ::google::cloud::vision::v1::ImageSource* temp = source_;
  if (GetArenaNoVirtual() != NULL) {
    temp = ::google::protobuf::internal::DuplicateIfNonNull(temp, NULL);
  }
  source_ = NULL;
  return temp;
}
inline ::google::cloud::vision::v1::ImageSource* Image::unsafe_arena_release_source() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.cloud.vision.v1.Image.source)
  
  ::google::cloud::vision::v1::ImageSource* temp = source_;
  source_ = NULL;
  return temp;
}
inline ::google::cloud::vision::v1::ImageSource* Image::mutable_source() {
  
  if (source_ == NULL) {
    _slow_mutable_source();
  }
  // @@protoc_insertion_point(field_mutable:google.cloud.vision.v1.Image.source)
  return source_;
}
inline void Image::set_allocated_source(::google::cloud::vision::v1::ImageSource* source) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete source_;
  }
  if (source) {
    ::google::protobuf::Arena* submessage_arena =
      ::google::protobuf::Arena::GetArena(source);
    if (message_arena != submessage_arena) {
      source = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, source, submessage_arena);
    }
    
  } else {
    
  }
  source_ = source;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.vision.v1.Image.source)
}

// -------------------------------------------------------------------

// FaceAnnotation_Landmark

// .google.cloud.vision.v1.FaceAnnotation.Landmark.Type type = 3;
inline void FaceAnnotation_Landmark::clear_type() {
  type_ = 0;
}
inline ::google::cloud::vision::v1::FaceAnnotation_Landmark_Type FaceAnnotation_Landmark::type() const {
  // @@protoc_insertion_point(field_get:google.cloud.vision.v1.FaceAnnotation.Landmark.type)
  return static_cast< ::google::cloud::vision::v1::FaceAnnotation_Landmark_Type >(type_);
}
inline void FaceAnnotation_Landmark::set_type(::google::cloud::vision::v1::FaceAnnotation_Landmark_Type value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:google.cloud.vision.v1.FaceAnnotation.Landmark.type)
}

// .google.cloud.vision.v1.Position position = 4;
inline bool FaceAnnotation_Landmark::has_position() const {
  return this != internal_default_instance() && position_ != NULL;
}
inline const ::google::cloud::vision::v1::Position& FaceAnnotation_Landmark::position() const {
  const ::google::cloud::vision::v1::Position* p = position_;
  // @@protoc_insertion_point(field_get:google.cloud.vision.v1.FaceAnnotation.Landmark.position)
  return p != NULL ? *p : *reinterpret_cast<const ::google::cloud::vision::v1::Position*>(
      &::google::cloud::vision::v1::_Position_default_instance_);
}
inline ::google::cloud::vision::v1::Position* FaceAnnotation_Landmark::release_position() {
  // @@protoc_insertion_point(field_release:google.cloud.vision.v1.FaceAnnotation.Landmark.position)
  
  ::google::cloud::vision::v1::Position* temp = position_;
  if (GetArenaNoVirtual() != NULL) {
    temp = ::google::protobuf::internal::DuplicateIfNonNull(temp, NULL);
  }
  position_ = NULL;
  return temp;
}
inline ::google::cloud::vision::v1::Position* FaceAnnotation_Landmark::unsafe_arena_release_position() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.cloud.vision.v1.FaceAnnotation.Landmark.position)
  
  ::google::cloud::vision::v1::Position* temp = position_;
  position_ = NULL;
  return temp;
}
inline ::google::cloud::vision::v1::Position* FaceAnnotation_Landmark::mutable_position() {
  
  if (position_ == NULL) {
    _slow_mutable_position();
  }
  // @@protoc_insertion_point(field_mutable:google.cloud.vision.v1.FaceAnnotation.Landmark.position)
  return position_;
}
inline void FaceAnnotation_Landmark::set_allocated_position(::google::cloud::vision::v1::Position* position) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(position_);
  }
  if (position) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast< ::google::protobuf::MessageLite*>(position)->GetArena();
    if (message_arena != submessage_arena) {
      position = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, position, submessage_arena);
    }
    
  } else {
    
  }
  position_ = position;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.vision.v1.FaceAnnotation.Landmark.position)
}

// -------------------------------------------------------------------

// FaceAnnotation

// .google.cloud.vision.v1.BoundingPoly bounding_poly = 1;
inline bool FaceAnnotation::has_bounding_poly() const {
  return this != internal_default_instance() && bounding_poly_ != NULL;
}
inline const ::google::cloud::vision::v1::BoundingPoly& FaceAnnotation::bounding_poly() const {
  const ::google::cloud::vision::v1::BoundingPoly* p = bounding_poly_;
  // @@protoc_insertion_point(field_get:google.cloud.vision.v1.FaceAnnotation.bounding_poly)
  return p != NULL ? *p : *reinterpret_cast<const ::google::cloud::vision::v1::BoundingPoly*>(
      &::google::cloud::vision::v1::_BoundingPoly_default_instance_);
}
inline ::google::cloud::vision::v1::BoundingPoly* FaceAnnotation::release_bounding_poly() {
  // @@protoc_insertion_point(field_release:google.cloud.vision.v1.FaceAnnotation.bounding_poly)
  
  ::google::cloud::vision::v1::BoundingPoly* temp = bounding_poly_;
  if (GetArenaNoVirtual() != NULL) {
    temp = ::google::protobuf::internal::DuplicateIfNonNull(temp, NULL);
  }
  bounding_poly_ = NULL;
  return temp;
}
inline ::google::cloud::vision::v1::BoundingPoly* FaceAnnotation::unsafe_arena_release_bounding_poly() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.cloud.vision.v1.FaceAnnotation.bounding_poly)
  
  ::google::cloud::vision::v1::BoundingPoly* temp = bounding_poly_;
  bounding_poly_ = NULL;
  return temp;
}
inline ::google::cloud::vision::v1::BoundingPoly* FaceAnnotation::mutable_bounding_poly() {
  
  if (bounding_poly_ == NULL) {
    _slow_mutable_bounding_poly();
  }
  // @@protoc_insertion_point(field_mutable:google.cloud.vision.v1.FaceAnnotation.bounding_poly)
  return bounding_poly_;
}
inline void FaceAnnotation::set_allocated_bounding_poly(::google::cloud::vision::v1::BoundingPoly* bounding_poly) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(bounding_poly_);
  }
  if (bounding_poly) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast< ::google::protobuf::MessageLite*>(bounding_poly)->GetArena();
    if (message_arena != submessage_arena) {
      bounding_poly = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, bounding_poly, submessage_arena);
    }
    
  } else {
    
  }
  bounding_poly_ = bounding_poly;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.vision.v1.FaceAnnotation.bounding_poly)
}

// .google.cloud.vision.v1.BoundingPoly fd_bounding_poly = 2;
inline bool FaceAnnotation::has_fd_bounding_poly() const {
  return this != internal_default_instance() && fd_bounding_poly_ != NULL;
}
inline const ::google::cloud::vision::v1::BoundingPoly& FaceAnnotation::fd_bounding_poly() const {
  const ::google::cloud::vision::v1::BoundingPoly* p = fd_bounding_poly_;
  // @@protoc_insertion_point(field_get:google.cloud.vision.v1.FaceAnnotation.fd_bounding_poly)
  return p != NULL ? *p : *reinterpret_cast<const ::google::cloud::vision::v1::BoundingPoly*>(
      &::google::cloud::vision::v1::_BoundingPoly_default_instance_);
}
inline ::google::cloud::vision::v1::BoundingPoly* FaceAnnotation::release_fd_bounding_poly() {
  // @@protoc_insertion_point(field_release:google.cloud.vision.v1.FaceAnnotation.fd_bounding_poly)
  
  ::google::cloud::vision::v1::BoundingPoly* temp = fd_bounding_poly_;
  if (GetArenaNoVirtual() != NULL) {
    temp = ::google::protobuf::internal::DuplicateIfNonNull(temp, NULL);
  }
  fd_bounding_poly_ = NULL;
  return temp;
}
inline ::google::cloud::vision::v1::BoundingPoly* FaceAnnotation::unsafe_arena_release_fd_bounding_poly() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.cloud.vision.v1.FaceAnnotation.fd_bounding_poly)
  
  ::google::cloud::vision::v1::BoundingPoly* temp = fd_bounding_poly_;
  fd_bounding_poly_ = NULL;
  return temp;
}
inline ::google::cloud::vision::v1::BoundingPoly* FaceAnnotation::mutable_fd_bounding_poly() {
  
  if (fd_bounding_poly_ == NULL) {
    _slow_mutable_fd_bounding_poly();
  }
  // @@protoc_insertion_point(field_mutable:google.cloud.vision.v1.FaceAnnotation.fd_bounding_poly)
  return fd_bounding_poly_;
}
inline void FaceAnnotation::set_allocated_fd_bounding_poly(::google::cloud::vision::v1::BoundingPoly* fd_bounding_poly) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(fd_bounding_poly_);
  }
  if (fd_bounding_poly) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast< ::google::protobuf::MessageLite*>(fd_bounding_poly)->GetArena();
    if (message_arena != submessage_arena) {
      fd_bounding_poly = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, fd_bounding_poly, submessage_arena);
    }
    
  } else {
    
  }
  fd_bounding_poly_ = fd_bounding_poly;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.vision.v1.FaceAnnotation.fd_bounding_poly)
}

// repeated .google.cloud.vision.v1.FaceAnnotation.Landmark landmarks = 3;
inline int FaceAnnotation::landmarks_size() const {
  return landmarks_.size();
}
inline void FaceAnnotation::clear_landmarks() {
  landmarks_.Clear();
}
inline const ::google::cloud::vision::v1::FaceAnnotation_Landmark& FaceAnnotation::landmarks(int index) const {
  // @@protoc_insertion_point(field_get:google.cloud.vision.v1.FaceAnnotation.landmarks)
  return landmarks_.Get(index);
}
inline ::google::cloud::vision::v1::FaceAnnotation_Landmark* FaceAnnotation::mutable_landmarks(int index) {
  // @@protoc_insertion_point(field_mutable:google.cloud.vision.v1.FaceAnnotation.landmarks)
  return landmarks_.Mutable(index);
}
inline ::google::cloud::vision::v1::FaceAnnotation_Landmark* FaceAnnotation::add_landmarks() {
  // @@protoc_insertion_point(field_add:google.cloud.vision.v1.FaceAnnotation.landmarks)
  return landmarks_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::google::cloud::vision::v1::FaceAnnotation_Landmark >*
FaceAnnotation::mutable_landmarks() {
  // @@protoc_insertion_point(field_mutable_list:google.cloud.vision.v1.FaceAnnotation.landmarks)
  return &landmarks_;
}
inline const ::google::protobuf::RepeatedPtrField< ::google::cloud::vision::v1::FaceAnnotation_Landmark >&
FaceAnnotation::landmarks() const {
  // @@protoc_insertion_point(field_list:google.cloud.vision.v1.FaceAnnotation.landmarks)
  return landmarks_;
}

// float roll_angle = 4;
inline void FaceAnnotation::clear_roll_angle() {
  roll_angle_ = 0;
}
inline float FaceAnnotation::roll_angle() const {
  // @@protoc_insertion_point(field_get:google.cloud.vision.v1.FaceAnnotation.roll_angle)
  return roll_angle_;
}
inline void FaceAnnotation::set_roll_angle(float value) {
  
  roll_angle_ = value;
  // @@protoc_insertion_point(field_set:google.cloud.vision.v1.FaceAnnotation.roll_angle)
}

// float pan_angle = 5;
inline void FaceAnnotation::clear_pan_angle() {
  pan_angle_ = 0;
}
inline float FaceAnnotation::pan_angle() const {
  // @@protoc_insertion_point(field_get:google.cloud.vision.v1.FaceAnnotation.pan_angle)
  return pan_angle_;
}
inline void FaceAnnotation::set_pan_angle(float value) {
  
  pan_angle_ = value;
  // @@protoc_insertion_point(field_set:google.cloud.vision.v1.FaceAnnotation.pan_angle)
}

// float tilt_angle = 6;
inline void FaceAnnotation::clear_tilt_angle() {
  tilt_angle_ = 0;
}
inline float FaceAnnotation::tilt_angle() const {
  // @@protoc_insertion_point(field_get:google.cloud.vision.v1.FaceAnnotation.tilt_angle)
  return tilt_angle_;
}
inline void FaceAnnotation::set_tilt_angle(float value) {
  
  tilt_angle_ = value;
  // @@protoc_insertion_point(field_set:google.cloud.vision.v1.FaceAnnotation.tilt_angle)
}

// float detection_confidence = 7;
inline void FaceAnnotation::clear_detection_confidence() {
  detection_confidence_ = 0;
}
inline float FaceAnnotation::detection_confidence() const {
  // @@protoc_insertion_point(field_get:google.cloud.vision.v1.FaceAnnotation.detection_confidence)
  return detection_confidence_;
}
inline void FaceAnnotation::set_detection_confidence(float value) {
  
  detection_confidence_ = value;
  // @@protoc_insertion_point(field_set:google.cloud.vision.v1.FaceAnnotation.detection_confidence)
}

// float landmarking_confidence = 8;
inline void FaceAnnotation::clear_landmarking_confidence() {
  landmarking_confidence_ = 0;
}
inline float FaceAnnotation::landmarking_confidence() const {
  // @@protoc_insertion_point(field_get:google.cloud.vision.v1.FaceAnnotation.landmarking_confidence)
  return landmarking_confidence_;
}
inline void FaceAnnotation::set_landmarking_confidence(float value) {
  
  landmarking_confidence_ = value;
  // @@protoc_insertion_point(field_set:google.cloud.vision.v1.FaceAnnotation.landmarking_confidence)
}

// .google.cloud.vision.v1.Likelihood joy_likelihood = 9;
inline void FaceAnnotation::clear_joy_likelihood() {
  joy_likelihood_ = 0;
}
inline ::google::cloud::vision::v1::Likelihood FaceAnnotation::joy_likelihood() const {
  // @@protoc_insertion_point(field_get:google.cloud.vision.v1.FaceAnnotation.joy_likelihood)
  return static_cast< ::google::cloud::vision::v1::Likelihood >(joy_likelihood_);
}
inline void FaceAnnotation::set_joy_likelihood(::google::cloud::vision::v1::Likelihood value) {
  
  joy_likelihood_ = value;
  // @@protoc_insertion_point(field_set:google.cloud.vision.v1.FaceAnnotation.joy_likelihood)
}

// .google.cloud.vision.v1.Likelihood sorrow_likelihood = 10;
inline void FaceAnnotation::clear_sorrow_likelihood() {
  sorrow_likelihood_ = 0;
}
inline ::google::cloud::vision::v1::Likelihood FaceAnnotation::sorrow_likelihood() const {
  // @@protoc_insertion_point(field_get:google.cloud.vision.v1.FaceAnnotation.sorrow_likelihood)
  return static_cast< ::google::cloud::vision::v1::Likelihood >(sorrow_likelihood_);
}
inline void FaceAnnotation::set_sorrow_likelihood(::google::cloud::vision::v1::Likelihood value) {
  
  sorrow_likelihood_ = value;
  // @@protoc_insertion_point(field_set:google.cloud.vision.v1.FaceAnnotation.sorrow_likelihood)
}

// .google.cloud.vision.v1.Likelihood anger_likelihood = 11;
inline void FaceAnnotation::clear_anger_likelihood() {
  anger_likelihood_ = 0;
}
inline ::google::cloud::vision::v1::Likelihood FaceAnnotation::anger_likelihood() const {
  // @@protoc_insertion_point(field_get:google.cloud.vision.v1.FaceAnnotation.anger_likelihood)
  return static_cast< ::google::cloud::vision::v1::Likelihood >(anger_likelihood_);
}
inline void FaceAnnotation::set_anger_likelihood(::google::cloud::vision::v1::Likelihood value) {
  
  anger_likelihood_ = value;
  // @@protoc_insertion_point(field_set:google.cloud.vision.v1.FaceAnnotation.anger_likelihood)
}

// .google.cloud.vision.v1.Likelihood surprise_likelihood = 12;
inline void FaceAnnotation::clear_surprise_likelihood() {
  surprise_likelihood_ = 0;
}
inline ::google::cloud::vision::v1::Likelihood FaceAnnotation::surprise_likelihood() const {
  // @@protoc_insertion_point(field_get:google.cloud.vision.v1.FaceAnnotation.surprise_likelihood)
  return static_cast< ::google::cloud::vision::v1::Likelihood >(surprise_likelihood_);
}
inline void FaceAnnotation::set_surprise_likelihood(::google::cloud::vision::v1::Likelihood value) {
  
  surprise_likelihood_ = value;
  // @@protoc_insertion_point(field_set:google.cloud.vision.v1.FaceAnnotation.surprise_likelihood)
}

// .google.cloud.vision.v1.Likelihood under_exposed_likelihood = 13;
inline void FaceAnnotation::clear_under_exposed_likelihood() {
  under_exposed_likelihood_ = 0;
}
inline ::google::cloud::vision::v1::Likelihood FaceAnnotation::under_exposed_likelihood() const {
  // @@protoc_insertion_point(field_get:google.cloud.vision.v1.FaceAnnotation.under_exposed_likelihood)
  return static_cast< ::google::cloud::vision::v1::Likelihood >(under_exposed_likelihood_);
}
inline void FaceAnnotation::set_under_exposed_likelihood(::google::cloud::vision::v1::Likelihood value) {
  
  under_exposed_likelihood_ = value;
  // @@protoc_insertion_point(field_set:google.cloud.vision.v1.FaceAnnotation.under_exposed_likelihood)
}

// .google.cloud.vision.v1.Likelihood blurred_likelihood = 14;
inline void FaceAnnotation::clear_blurred_likelihood() {
  blurred_likelihood_ = 0;
}
inline ::google::cloud::vision::v1::Likelihood FaceAnnotation::blurred_likelihood() const {
  // @@protoc_insertion_point(field_get:google.cloud.vision.v1.FaceAnnotation.blurred_likelihood)
  return static_cast< ::google::cloud::vision::v1::Likelihood >(blurred_likelihood_);
}
inline void FaceAnnotation::set_blurred_likelihood(::google::cloud::vision::v1::Likelihood value) {
  
  blurred_likelihood_ = value;
  // @@protoc_insertion_point(field_set:google.cloud.vision.v1.FaceAnnotation.blurred_likelihood)
}

// .google.cloud.vision.v1.Likelihood headwear_likelihood = 15;
inline void FaceAnnotation::clear_headwear_likelihood() {
  headwear_likelihood_ = 0;
}
inline ::google::cloud::vision::v1::Likelihood FaceAnnotation::headwear_likelihood() const {
  // @@protoc_insertion_point(field_get:google.cloud.vision.v1.FaceAnnotation.headwear_likelihood)
  return static_cast< ::google::cloud::vision::v1::Likelihood >(headwear_likelihood_);
}
inline void FaceAnnotation::set_headwear_likelihood(::google::cloud::vision::v1::Likelihood value) {
  
  headwear_likelihood_ = value;
  // @@protoc_insertion_point(field_set:google.cloud.vision.v1.FaceAnnotation.headwear_likelihood)
}

// -------------------------------------------------------------------

// LocationInfo

// .google.type.LatLng lat_lng = 1;
inline bool LocationInfo::has_lat_lng() const {
  return this != internal_default_instance() && lat_lng_ != NULL;
}
inline const ::google::type::LatLng& LocationInfo::lat_lng() const {
  const ::google::type::LatLng* p = lat_lng_;
  // @@protoc_insertion_point(field_get:google.cloud.vision.v1.LocationInfo.lat_lng)
  return p != NULL ? *p : *reinterpret_cast<const ::google::type::LatLng*>(
      &::google::type::_LatLng_default_instance_);
}
inline ::google::type::LatLng* LocationInfo::release_lat_lng() {
  // @@protoc_insertion_point(field_release:google.cloud.vision.v1.LocationInfo.lat_lng)
  
  ::google::type::LatLng* temp = lat_lng_;
  if (GetArenaNoVirtual() != NULL) {
    temp = ::google::protobuf::internal::DuplicateIfNonNull(temp, NULL);
  }
  lat_lng_ = NULL;
  return temp;
}
inline ::google::type::LatLng* LocationInfo::unsafe_arena_release_lat_lng() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.cloud.vision.v1.LocationInfo.lat_lng)
  
  ::google::type::LatLng* temp = lat_lng_;
  lat_lng_ = NULL;
  return temp;
}
inline ::google::type::LatLng* LocationInfo::mutable_lat_lng() {
  
  if (lat_lng_ == NULL) {
    _slow_mutable_lat_lng();
  }
  // @@protoc_insertion_point(field_mutable:google.cloud.vision.v1.LocationInfo.lat_lng)
  return lat_lng_;
}
inline void LocationInfo::set_allocated_lat_lng(::google::type::LatLng* lat_lng) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(lat_lng_);
  }
  if (lat_lng) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      lat_lng = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, lat_lng, submessage_arena);
    }
    
  } else {
    
  }
  lat_lng_ = lat_lng;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.vision.v1.LocationInfo.lat_lng)
}

// -------------------------------------------------------------------

// Property

// string name = 1;
inline void Property::clear_name() {
  name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& Property::name() const {
  // @@protoc_insertion_point(field_get:google.cloud.vision.v1.Property.name)
  return name_.Get();
}
inline void Property::set_name(const ::std::string& value) {
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.cloud.vision.v1.Property.name)
}
#if LANG_CXX11
inline void Property::set_name(::std::string&& value) {
  
  name_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.vision.v1.Property.name)
}
#endif
inline void Property::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.cloud.vision.v1.Property.name)
}
inline void Property::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.cloud.vision.v1.Property.name)
}
inline ::std::string* Property::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.vision.v1.Property.name)
  return name_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* Property::release_name() {
  // @@protoc_insertion_point(field_release:google.cloud.vision.v1.Property.name)
  
  return name_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void Property::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.cloud.vision.v1.Property.name)
}
inline ::std::string* Property::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.cloud.vision.v1.Property.name)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return name_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void Property::unsafe_arena_set_allocated_name(
    ::std::string* name) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (name != NULL) {
    
  } else {
    
  }
  name_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      name, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.vision.v1.Property.name)
}

// string value = 2;
inline void Property::clear_value() {
  value_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& Property::value() const {
  // @@protoc_insertion_point(field_get:google.cloud.vision.v1.Property.value)
  return value_.Get();
}
inline void Property::set_value(const ::std::string& value) {
  
  value_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.cloud.vision.v1.Property.value)
}
#if LANG_CXX11
inline void Property::set_value(::std::string&& value) {
  
  value_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.vision.v1.Property.value)
}
#endif
inline void Property::set_value(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  value_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.cloud.vision.v1.Property.value)
}
inline void Property::set_value(const char* value,
    size_t size) {
  
  value_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.cloud.vision.v1.Property.value)
}
inline ::std::string* Property::mutable_value() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.vision.v1.Property.value)
  return value_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* Property::release_value() {
  // @@protoc_insertion_point(field_release:google.cloud.vision.v1.Property.value)
  
  return value_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void Property::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    
  } else {
    
  }
  value_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.cloud.vision.v1.Property.value)
}
inline ::std::string* Property::unsafe_arena_release_value() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.cloud.vision.v1.Property.value)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return value_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void Property::unsafe_arena_set_allocated_value(
    ::std::string* value) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (value != NULL) {
    
  } else {
    
  }
  value_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.vision.v1.Property.value)
}

// -------------------------------------------------------------------

// EntityAnnotation

// string mid = 1;
inline void EntityAnnotation::clear_mid() {
  mid_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& EntityAnnotation::mid() const {
  // @@protoc_insertion_point(field_get:google.cloud.vision.v1.EntityAnnotation.mid)
  return mid_.Get();
}
inline void EntityAnnotation::set_mid(const ::std::string& value) {
  
  mid_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.cloud.vision.v1.EntityAnnotation.mid)
}
#if LANG_CXX11
inline void EntityAnnotation::set_mid(::std::string&& value) {
  
  mid_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.vision.v1.EntityAnnotation.mid)
}
#endif
inline void EntityAnnotation::set_mid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  mid_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.cloud.vision.v1.EntityAnnotation.mid)
}
inline void EntityAnnotation::set_mid(const char* value,
    size_t size) {
  
  mid_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.cloud.vision.v1.EntityAnnotation.mid)
}
inline ::std::string* EntityAnnotation::mutable_mid() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.vision.v1.EntityAnnotation.mid)
  return mid_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* EntityAnnotation::release_mid() {
  // @@protoc_insertion_point(field_release:google.cloud.vision.v1.EntityAnnotation.mid)
  
  return mid_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void EntityAnnotation::set_allocated_mid(::std::string* mid) {
  if (mid != NULL) {
    
  } else {
    
  }
  mid_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), mid,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.cloud.vision.v1.EntityAnnotation.mid)
}
inline ::std::string* EntityAnnotation::unsafe_arena_release_mid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.cloud.vision.v1.EntityAnnotation.mid)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return mid_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void EntityAnnotation::unsafe_arena_set_allocated_mid(
    ::std::string* mid) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (mid != NULL) {
    
  } else {
    
  }
  mid_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      mid, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.vision.v1.EntityAnnotation.mid)
}

// string locale = 2;
inline void EntityAnnotation::clear_locale() {
  locale_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& EntityAnnotation::locale() const {
  // @@protoc_insertion_point(field_get:google.cloud.vision.v1.EntityAnnotation.locale)
  return locale_.Get();
}
inline void EntityAnnotation::set_locale(const ::std::string& value) {
  
  locale_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.cloud.vision.v1.EntityAnnotation.locale)
}
#if LANG_CXX11
inline void EntityAnnotation::set_locale(::std::string&& value) {
  
  locale_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.vision.v1.EntityAnnotation.locale)
}
#endif
inline void EntityAnnotation::set_locale(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  locale_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.cloud.vision.v1.EntityAnnotation.locale)
}
inline void EntityAnnotation::set_locale(const char* value,
    size_t size) {
  
  locale_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.cloud.vision.v1.EntityAnnotation.locale)
}
inline ::std::string* EntityAnnotation::mutable_locale() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.vision.v1.EntityAnnotation.locale)
  return locale_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* EntityAnnotation::release_locale() {
  // @@protoc_insertion_point(field_release:google.cloud.vision.v1.EntityAnnotation.locale)
  
  return locale_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void EntityAnnotation::set_allocated_locale(::std::string* locale) {
  if (locale != NULL) {
    
  } else {
    
  }
  locale_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), locale,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.cloud.vision.v1.EntityAnnotation.locale)
}
inline ::std::string* EntityAnnotation::unsafe_arena_release_locale() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.cloud.vision.v1.EntityAnnotation.locale)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return locale_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void EntityAnnotation::unsafe_arena_set_allocated_locale(
    ::std::string* locale) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (locale != NULL) {
    
  } else {
    
  }
  locale_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      locale, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.vision.v1.EntityAnnotation.locale)
}

// string description = 3;
inline void EntityAnnotation::clear_description() {
  description_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& EntityAnnotation::description() const {
  // @@protoc_insertion_point(field_get:google.cloud.vision.v1.EntityAnnotation.description)
  return description_.Get();
}
inline void EntityAnnotation::set_description(const ::std::string& value) {
  
  description_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.cloud.vision.v1.EntityAnnotation.description)
}
#if LANG_CXX11
inline void EntityAnnotation::set_description(::std::string&& value) {
  
  description_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.vision.v1.EntityAnnotation.description)
}
#endif
inline void EntityAnnotation::set_description(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  description_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.cloud.vision.v1.EntityAnnotation.description)
}
inline void EntityAnnotation::set_description(const char* value,
    size_t size) {
  
  description_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.cloud.vision.v1.EntityAnnotation.description)
}
inline ::std::string* EntityAnnotation::mutable_description() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.vision.v1.EntityAnnotation.description)
  return description_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* EntityAnnotation::release_description() {
  // @@protoc_insertion_point(field_release:google.cloud.vision.v1.EntityAnnotation.description)
  
  return description_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void EntityAnnotation::set_allocated_description(::std::string* description) {
  if (description != NULL) {
    
  } else {
    
  }
  description_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), description,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.cloud.vision.v1.EntityAnnotation.description)
}
inline ::std::string* EntityAnnotation::unsafe_arena_release_description() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.cloud.vision.v1.EntityAnnotation.description)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return description_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void EntityAnnotation::unsafe_arena_set_allocated_description(
    ::std::string* description) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (description != NULL) {
    
  } else {
    
  }
  description_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      description, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.vision.v1.EntityAnnotation.description)
}

// float score = 4;
inline void EntityAnnotation::clear_score() {
  score_ = 0;
}
inline float EntityAnnotation::score() const {
  // @@protoc_insertion_point(field_get:google.cloud.vision.v1.EntityAnnotation.score)
  return score_;
}
inline void EntityAnnotation::set_score(float value) {
  
  score_ = value;
  // @@protoc_insertion_point(field_set:google.cloud.vision.v1.EntityAnnotation.score)
}

// float confidence = 5;
inline void EntityAnnotation::clear_confidence() {
  confidence_ = 0;
}
inline float EntityAnnotation::confidence() const {
  // @@protoc_insertion_point(field_get:google.cloud.vision.v1.EntityAnnotation.confidence)
  return confidence_;
}
inline void EntityAnnotation::set_confidence(float value) {
  
  confidence_ = value;
  // @@protoc_insertion_point(field_set:google.cloud.vision.v1.EntityAnnotation.confidence)
}

// float topicality = 6;
inline void EntityAnnotation::clear_topicality() {
  topicality_ = 0;
}
inline float EntityAnnotation::topicality() const {
  // @@protoc_insertion_point(field_get:google.cloud.vision.v1.EntityAnnotation.topicality)
  return topicality_;
}
inline void EntityAnnotation::set_topicality(float value) {
  
  topicality_ = value;
  // @@protoc_insertion_point(field_set:google.cloud.vision.v1.EntityAnnotation.topicality)
}

// .google.cloud.vision.v1.BoundingPoly bounding_poly = 7;
inline bool EntityAnnotation::has_bounding_poly() const {
  return this != internal_default_instance() && bounding_poly_ != NULL;
}
inline const ::google::cloud::vision::v1::BoundingPoly& EntityAnnotation::bounding_poly() const {
  const ::google::cloud::vision::v1::BoundingPoly* p = bounding_poly_;
  // @@protoc_insertion_point(field_get:google.cloud.vision.v1.EntityAnnotation.bounding_poly)
  return p != NULL ? *p : *reinterpret_cast<const ::google::cloud::vision::v1::BoundingPoly*>(
      &::google::cloud::vision::v1::_BoundingPoly_default_instance_);
}
inline ::google::cloud::vision::v1::BoundingPoly* EntityAnnotation::release_bounding_poly() {
  // @@protoc_insertion_point(field_release:google.cloud.vision.v1.EntityAnnotation.bounding_poly)
  
  ::google::cloud::vision::v1::BoundingPoly* temp = bounding_poly_;
  if (GetArenaNoVirtual() != NULL) {
    temp = ::google::protobuf::internal::DuplicateIfNonNull(temp, NULL);
  }
  bounding_poly_ = NULL;
  return temp;
}
inline ::google::cloud::vision::v1::BoundingPoly* EntityAnnotation::unsafe_arena_release_bounding_poly() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.cloud.vision.v1.EntityAnnotation.bounding_poly)
  
  ::google::cloud::vision::v1::BoundingPoly* temp = bounding_poly_;
  bounding_poly_ = NULL;
  return temp;
}
inline ::google::cloud::vision::v1::BoundingPoly* EntityAnnotation::mutable_bounding_poly() {
  
  if (bounding_poly_ == NULL) {
    _slow_mutable_bounding_poly();
  }
  // @@protoc_insertion_point(field_mutable:google.cloud.vision.v1.EntityAnnotation.bounding_poly)
  return bounding_poly_;
}
inline void EntityAnnotation::set_allocated_bounding_poly(::google::cloud::vision::v1::BoundingPoly* bounding_poly) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(bounding_poly_);
  }
  if (bounding_poly) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast< ::google::protobuf::MessageLite*>(bounding_poly)->GetArena();
    if (message_arena != submessage_arena) {
      bounding_poly = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, bounding_poly, submessage_arena);
    }
    
  } else {
    
  }
  bounding_poly_ = bounding_poly;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.vision.v1.EntityAnnotation.bounding_poly)
}

// repeated .google.cloud.vision.v1.LocationInfo locations = 8;
inline int EntityAnnotation::locations_size() const {
  return locations_.size();
}
inline void EntityAnnotation::clear_locations() {
  locations_.Clear();
}
inline const ::google::cloud::vision::v1::LocationInfo& EntityAnnotation::locations(int index) const {
  // @@protoc_insertion_point(field_get:google.cloud.vision.v1.EntityAnnotation.locations)
  return locations_.Get(index);
}
inline ::google::cloud::vision::v1::LocationInfo* EntityAnnotation::mutable_locations(int index) {
  // @@protoc_insertion_point(field_mutable:google.cloud.vision.v1.EntityAnnotation.locations)
  return locations_.Mutable(index);
}
inline ::google::cloud::vision::v1::LocationInfo* EntityAnnotation::add_locations() {
  // @@protoc_insertion_point(field_add:google.cloud.vision.v1.EntityAnnotation.locations)
  return locations_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::google::cloud::vision::v1::LocationInfo >*
EntityAnnotation::mutable_locations() {
  // @@protoc_insertion_point(field_mutable_list:google.cloud.vision.v1.EntityAnnotation.locations)
  return &locations_;
}
inline const ::google::protobuf::RepeatedPtrField< ::google::cloud::vision::v1::LocationInfo >&
EntityAnnotation::locations() const {
  // @@protoc_insertion_point(field_list:google.cloud.vision.v1.EntityAnnotation.locations)
  return locations_;
}

// repeated .google.cloud.vision.v1.Property properties = 9;
inline int EntityAnnotation::properties_size() const {
  return properties_.size();
}
inline void EntityAnnotation::clear_properties() {
  properties_.Clear();
}
inline const ::google::cloud::vision::v1::Property& EntityAnnotation::properties(int index) const {
  // @@protoc_insertion_point(field_get:google.cloud.vision.v1.EntityAnnotation.properties)
  return properties_.Get(index);
}
inline ::google::cloud::vision::v1::Property* EntityAnnotation::mutable_properties(int index) {
  // @@protoc_insertion_point(field_mutable:google.cloud.vision.v1.EntityAnnotation.properties)
  return properties_.Mutable(index);
}
inline ::google::cloud::vision::v1::Property* EntityAnnotation::add_properties() {
  // @@protoc_insertion_point(field_add:google.cloud.vision.v1.EntityAnnotation.properties)
  return properties_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::google::cloud::vision::v1::Property >*
EntityAnnotation::mutable_properties() {
  // @@protoc_insertion_point(field_mutable_list:google.cloud.vision.v1.EntityAnnotation.properties)
  return &properties_;
}
inline const ::google::protobuf::RepeatedPtrField< ::google::cloud::vision::v1::Property >&
EntityAnnotation::properties() const {
  // @@protoc_insertion_point(field_list:google.cloud.vision.v1.EntityAnnotation.properties)
  return properties_;
}

// -------------------------------------------------------------------

// SafeSearchAnnotation

// .google.cloud.vision.v1.Likelihood adult = 1;
inline void SafeSearchAnnotation::clear_adult() {
  adult_ = 0;
}
inline ::google::cloud::vision::v1::Likelihood SafeSearchAnnotation::adult() const {
  // @@protoc_insertion_point(field_get:google.cloud.vision.v1.SafeSearchAnnotation.adult)
  return static_cast< ::google::cloud::vision::v1::Likelihood >(adult_);
}
inline void SafeSearchAnnotation::set_adult(::google::cloud::vision::v1::Likelihood value) {
  
  adult_ = value;
  // @@protoc_insertion_point(field_set:google.cloud.vision.v1.SafeSearchAnnotation.adult)
}

// .google.cloud.vision.v1.Likelihood spoof = 2;
inline void SafeSearchAnnotation::clear_spoof() {
  spoof_ = 0;
}
inline ::google::cloud::vision::v1::Likelihood SafeSearchAnnotation::spoof() const {
  // @@protoc_insertion_point(field_get:google.cloud.vision.v1.SafeSearchAnnotation.spoof)
  return static_cast< ::google::cloud::vision::v1::Likelihood >(spoof_);
}
inline void SafeSearchAnnotation::set_spoof(::google::cloud::vision::v1::Likelihood value) {
  
  spoof_ = value;
  // @@protoc_insertion_point(field_set:google.cloud.vision.v1.SafeSearchAnnotation.spoof)
}

// .google.cloud.vision.v1.Likelihood medical = 3;
inline void SafeSearchAnnotation::clear_medical() {
  medical_ = 0;
}
inline ::google::cloud::vision::v1::Likelihood SafeSearchAnnotation::medical() const {
  // @@protoc_insertion_point(field_get:google.cloud.vision.v1.SafeSearchAnnotation.medical)
  return static_cast< ::google::cloud::vision::v1::Likelihood >(medical_);
}
inline void SafeSearchAnnotation::set_medical(::google::cloud::vision::v1::Likelihood value) {
  
  medical_ = value;
  // @@protoc_insertion_point(field_set:google.cloud.vision.v1.SafeSearchAnnotation.medical)
}

// .google.cloud.vision.v1.Likelihood violence = 4;
inline void SafeSearchAnnotation::clear_violence() {
  violence_ = 0;
}
inline ::google::cloud::vision::v1::Likelihood SafeSearchAnnotation::violence() const {
  // @@protoc_insertion_point(field_get:google.cloud.vision.v1.SafeSearchAnnotation.violence)
  return static_cast< ::google::cloud::vision::v1::Likelihood >(violence_);
}
inline void SafeSearchAnnotation::set_violence(::google::cloud::vision::v1::Likelihood value) {
  
  violence_ = value;
  // @@protoc_insertion_point(field_set:google.cloud.vision.v1.SafeSearchAnnotation.violence)
}

// -------------------------------------------------------------------

// LatLongRect

// .google.type.LatLng min_lat_lng = 1;
inline bool LatLongRect::has_min_lat_lng() const {
  return this != internal_default_instance() && min_lat_lng_ != NULL;
}
inline const ::google::type::LatLng& LatLongRect::min_lat_lng() const {
  const ::google::type::LatLng* p = min_lat_lng_;
  // @@protoc_insertion_point(field_get:google.cloud.vision.v1.LatLongRect.min_lat_lng)
  return p != NULL ? *p : *reinterpret_cast<const ::google::type::LatLng*>(
      &::google::type::_LatLng_default_instance_);
}
inline ::google::type::LatLng* LatLongRect::release_min_lat_lng() {
  // @@protoc_insertion_point(field_release:google.cloud.vision.v1.LatLongRect.min_lat_lng)
  
  ::google::type::LatLng* temp = min_lat_lng_;
  if (GetArenaNoVirtual() != NULL) {
    temp = ::google::protobuf::internal::DuplicateIfNonNull(temp, NULL);
  }
  min_lat_lng_ = NULL;
  return temp;
}
inline ::google::type::LatLng* LatLongRect::unsafe_arena_release_min_lat_lng() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.cloud.vision.v1.LatLongRect.min_lat_lng)
  
  ::google::type::LatLng* temp = min_lat_lng_;
  min_lat_lng_ = NULL;
  return temp;
}
inline ::google::type::LatLng* LatLongRect::mutable_min_lat_lng() {
  
  if (min_lat_lng_ == NULL) {
    _slow_mutable_min_lat_lng();
  }
  // @@protoc_insertion_point(field_mutable:google.cloud.vision.v1.LatLongRect.min_lat_lng)
  return min_lat_lng_;
}
inline void LatLongRect::set_allocated_min_lat_lng(::google::type::LatLng* min_lat_lng) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(min_lat_lng_);
  }
  if (min_lat_lng) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      min_lat_lng = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, min_lat_lng, submessage_arena);
    }
    
  } else {
    
  }
  min_lat_lng_ = min_lat_lng;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.vision.v1.LatLongRect.min_lat_lng)
}

// .google.type.LatLng max_lat_lng = 2;
inline bool LatLongRect::has_max_lat_lng() const {
  return this != internal_default_instance() && max_lat_lng_ != NULL;
}
inline const ::google::type::LatLng& LatLongRect::max_lat_lng() const {
  const ::google::type::LatLng* p = max_lat_lng_;
  // @@protoc_insertion_point(field_get:google.cloud.vision.v1.LatLongRect.max_lat_lng)
  return p != NULL ? *p : *reinterpret_cast<const ::google::type::LatLng*>(
      &::google::type::_LatLng_default_instance_);
}
inline ::google::type::LatLng* LatLongRect::release_max_lat_lng() {
  // @@protoc_insertion_point(field_release:google.cloud.vision.v1.LatLongRect.max_lat_lng)
  
  ::google::type::LatLng* temp = max_lat_lng_;
  if (GetArenaNoVirtual() != NULL) {
    temp = ::google::protobuf::internal::DuplicateIfNonNull(temp, NULL);
  }
  max_lat_lng_ = NULL;
  return temp;
}
inline ::google::type::LatLng* LatLongRect::unsafe_arena_release_max_lat_lng() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.cloud.vision.v1.LatLongRect.max_lat_lng)
  
  ::google::type::LatLng* temp = max_lat_lng_;
  max_lat_lng_ = NULL;
  return temp;
}
inline ::google::type::LatLng* LatLongRect::mutable_max_lat_lng() {
  
  if (max_lat_lng_ == NULL) {
    _slow_mutable_max_lat_lng();
  }
  // @@protoc_insertion_point(field_mutable:google.cloud.vision.v1.LatLongRect.max_lat_lng)
  return max_lat_lng_;
}
inline void LatLongRect::set_allocated_max_lat_lng(::google::type::LatLng* max_lat_lng) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(max_lat_lng_);
  }
  if (max_lat_lng) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      max_lat_lng = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, max_lat_lng, submessage_arena);
    }
    
  } else {
    
  }
  max_lat_lng_ = max_lat_lng;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.vision.v1.LatLongRect.max_lat_lng)
}

// -------------------------------------------------------------------

// ColorInfo

// .google.type.Color color = 1;
inline bool ColorInfo::has_color() const {
  return this != internal_default_instance() && color_ != NULL;
}
inline const ::google::type::Color& ColorInfo::color() const {
  const ::google::type::Color* p = color_;
  // @@protoc_insertion_point(field_get:google.cloud.vision.v1.ColorInfo.color)
  return p != NULL ? *p : *reinterpret_cast<const ::google::type::Color*>(
      &::google::type::_Color_default_instance_);
}
inline ::google::type::Color* ColorInfo::release_color() {
  // @@protoc_insertion_point(field_release:google.cloud.vision.v1.ColorInfo.color)
  
  ::google::type::Color* temp = color_;
  if (GetArenaNoVirtual() != NULL) {
    temp = ::google::protobuf::internal::DuplicateIfNonNull(temp, NULL);
  }
  color_ = NULL;
  return temp;
}
inline ::google::type::Color* ColorInfo::unsafe_arena_release_color() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.cloud.vision.v1.ColorInfo.color)
  
  ::google::type::Color* temp = color_;
  color_ = NULL;
  return temp;
}
inline ::google::type::Color* ColorInfo::mutable_color() {
  
  if (color_ == NULL) {
    _slow_mutable_color();
  }
  // @@protoc_insertion_point(field_mutable:google.cloud.vision.v1.ColorInfo.color)
  return color_;
}
inline void ColorInfo::set_allocated_color(::google::type::Color* color) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(color_);
  }
  if (color) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      color = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, color, submessage_arena);
    }
    
  } else {
    
  }
  color_ = color;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.vision.v1.ColorInfo.color)
}

// float score = 2;
inline void ColorInfo::clear_score() {
  score_ = 0;
}
inline float ColorInfo::score() const {
  // @@protoc_insertion_point(field_get:google.cloud.vision.v1.ColorInfo.score)
  return score_;
}
inline void ColorInfo::set_score(float value) {
  
  score_ = value;
  // @@protoc_insertion_point(field_set:google.cloud.vision.v1.ColorInfo.score)
}

// float pixel_fraction = 3;
inline void ColorInfo::clear_pixel_fraction() {
  pixel_fraction_ = 0;
}
inline float ColorInfo::pixel_fraction() const {
  // @@protoc_insertion_point(field_get:google.cloud.vision.v1.ColorInfo.pixel_fraction)
  return pixel_fraction_;
}
inline void ColorInfo::set_pixel_fraction(float value) {
  
  pixel_fraction_ = value;
  // @@protoc_insertion_point(field_set:google.cloud.vision.v1.ColorInfo.pixel_fraction)
}

// -------------------------------------------------------------------

// DominantColorsAnnotation

// repeated .google.cloud.vision.v1.ColorInfo colors = 1;
inline int DominantColorsAnnotation::colors_size() const {
  return colors_.size();
}
inline void DominantColorsAnnotation::clear_colors() {
  colors_.Clear();
}
inline const ::google::cloud::vision::v1::ColorInfo& DominantColorsAnnotation::colors(int index) const {
  // @@protoc_insertion_point(field_get:google.cloud.vision.v1.DominantColorsAnnotation.colors)
  return colors_.Get(index);
}
inline ::google::cloud::vision::v1::ColorInfo* DominantColorsAnnotation::mutable_colors(int index) {
  // @@protoc_insertion_point(field_mutable:google.cloud.vision.v1.DominantColorsAnnotation.colors)
  return colors_.Mutable(index);
}
inline ::google::cloud::vision::v1::ColorInfo* DominantColorsAnnotation::add_colors() {
  // @@protoc_insertion_point(field_add:google.cloud.vision.v1.DominantColorsAnnotation.colors)
  return colors_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::google::cloud::vision::v1::ColorInfo >*
DominantColorsAnnotation::mutable_colors() {
  // @@protoc_insertion_point(field_mutable_list:google.cloud.vision.v1.DominantColorsAnnotation.colors)
  return &colors_;
}
inline const ::google::protobuf::RepeatedPtrField< ::google::cloud::vision::v1::ColorInfo >&
DominantColorsAnnotation::colors() const {
  // @@protoc_insertion_point(field_list:google.cloud.vision.v1.DominantColorsAnnotation.colors)
  return colors_;
}

// -------------------------------------------------------------------

// ImageProperties

// .google.cloud.vision.v1.DominantColorsAnnotation dominant_colors = 1;
inline bool ImageProperties::has_dominant_colors() const {
  return this != internal_default_instance() && dominant_colors_ != NULL;
}
inline void ImageProperties::clear_dominant_colors() {
  if (GetArenaNoVirtual() == NULL && dominant_colors_ != NULL) {
    delete dominant_colors_;
  }
  dominant_colors_ = NULL;
}
inline const ::google::cloud::vision::v1::DominantColorsAnnotation& ImageProperties::dominant_colors() const {
  const ::google::cloud::vision::v1::DominantColorsAnnotation* p = dominant_colors_;
  // @@protoc_insertion_point(field_get:google.cloud.vision.v1.ImageProperties.dominant_colors)
  return p != NULL ? *p : *reinterpret_cast<const ::google::cloud::vision::v1::DominantColorsAnnotation*>(
      &::google::cloud::vision::v1::_DominantColorsAnnotation_default_instance_);
}
inline ::google::cloud::vision::v1::DominantColorsAnnotation* ImageProperties::release_dominant_colors() {
  // @@protoc_insertion_point(field_release:google.cloud.vision.v1.ImageProperties.dominant_colors)
  
  ::google::cloud::vision::v1::DominantColorsAnnotation* temp = dominant_colors_;
  if (GetArenaNoVirtual() != NULL) {
    temp = ::google::protobuf::internal::DuplicateIfNonNull(temp, NULL);
  }
  dominant_colors_ = NULL;
  return temp;
}
inline ::google::cloud::vision::v1::DominantColorsAnnotation* ImageProperties::unsafe_arena_release_dominant_colors() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.cloud.vision.v1.ImageProperties.dominant_colors)
  
  ::google::cloud::vision::v1::DominantColorsAnnotation* temp = dominant_colors_;
  dominant_colors_ = NULL;
  return temp;
}
inline ::google::cloud::vision::v1::DominantColorsAnnotation* ImageProperties::mutable_dominant_colors() {
  
  if (dominant_colors_ == NULL) {
    _slow_mutable_dominant_colors();
  }
  // @@protoc_insertion_point(field_mutable:google.cloud.vision.v1.ImageProperties.dominant_colors)
  return dominant_colors_;
}
inline void ImageProperties::set_allocated_dominant_colors(::google::cloud::vision::v1::DominantColorsAnnotation* dominant_colors) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete dominant_colors_;
  }
  if (dominant_colors) {
    ::google::protobuf::Arena* submessage_arena =
      ::google::protobuf::Arena::GetArena(dominant_colors);
    if (message_arena != submessage_arena) {
      dominant_colors = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, dominant_colors, submessage_arena);
    }
    
  } else {
    
  }
  dominant_colors_ = dominant_colors;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.vision.v1.ImageProperties.dominant_colors)
}

// -------------------------------------------------------------------

// CropHint

// .google.cloud.vision.v1.BoundingPoly bounding_poly = 1;
inline bool CropHint::has_bounding_poly() const {
  return this != internal_default_instance() && bounding_poly_ != NULL;
}
inline const ::google::cloud::vision::v1::BoundingPoly& CropHint::bounding_poly() const {
  const ::google::cloud::vision::v1::BoundingPoly* p = bounding_poly_;
  // @@protoc_insertion_point(field_get:google.cloud.vision.v1.CropHint.bounding_poly)
  return p != NULL ? *p : *reinterpret_cast<const ::google::cloud::vision::v1::BoundingPoly*>(
      &::google::cloud::vision::v1::_BoundingPoly_default_instance_);
}
inline ::google::cloud::vision::v1::BoundingPoly* CropHint::release_bounding_poly() {
  // @@protoc_insertion_point(field_release:google.cloud.vision.v1.CropHint.bounding_poly)
  
  ::google::cloud::vision::v1::BoundingPoly* temp = bounding_poly_;
  if (GetArenaNoVirtual() != NULL) {
    temp = ::google::protobuf::internal::DuplicateIfNonNull(temp, NULL);
  }
  bounding_poly_ = NULL;
  return temp;
}
inline ::google::cloud::vision::v1::BoundingPoly* CropHint::unsafe_arena_release_bounding_poly() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.cloud.vision.v1.CropHint.bounding_poly)
  
  ::google::cloud::vision::v1::BoundingPoly* temp = bounding_poly_;
  bounding_poly_ = NULL;
  return temp;
}
inline ::google::cloud::vision::v1::BoundingPoly* CropHint::mutable_bounding_poly() {
  
  if (bounding_poly_ == NULL) {
    _slow_mutable_bounding_poly();
  }
  // @@protoc_insertion_point(field_mutable:google.cloud.vision.v1.CropHint.bounding_poly)
  return bounding_poly_;
}
inline void CropHint::set_allocated_bounding_poly(::google::cloud::vision::v1::BoundingPoly* bounding_poly) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(bounding_poly_);
  }
  if (bounding_poly) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast< ::google::protobuf::MessageLite*>(bounding_poly)->GetArena();
    if (message_arena != submessage_arena) {
      bounding_poly = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, bounding_poly, submessage_arena);
    }
    
  } else {
    
  }
  bounding_poly_ = bounding_poly;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.vision.v1.CropHint.bounding_poly)
}

// float confidence = 2;
inline void CropHint::clear_confidence() {
  confidence_ = 0;
}
inline float CropHint::confidence() const {
  // @@protoc_insertion_point(field_get:google.cloud.vision.v1.CropHint.confidence)
  return confidence_;
}
inline void CropHint::set_confidence(float value) {
  
  confidence_ = value;
  // @@protoc_insertion_point(field_set:google.cloud.vision.v1.CropHint.confidence)
}

// float importance_fraction = 3;
inline void CropHint::clear_importance_fraction() {
  importance_fraction_ = 0;
}
inline float CropHint::importance_fraction() const {
  // @@protoc_insertion_point(field_get:google.cloud.vision.v1.CropHint.importance_fraction)
  return importance_fraction_;
}
inline void CropHint::set_importance_fraction(float value) {
  
  importance_fraction_ = value;
  // @@protoc_insertion_point(field_set:google.cloud.vision.v1.CropHint.importance_fraction)
}

// -------------------------------------------------------------------

// CropHintsAnnotation

// repeated .google.cloud.vision.v1.CropHint crop_hints = 1;
inline int CropHintsAnnotation::crop_hints_size() const {
  return crop_hints_.size();
}
inline void CropHintsAnnotation::clear_crop_hints() {
  crop_hints_.Clear();
}
inline const ::google::cloud::vision::v1::CropHint& CropHintsAnnotation::crop_hints(int index) const {
  // @@protoc_insertion_point(field_get:google.cloud.vision.v1.CropHintsAnnotation.crop_hints)
  return crop_hints_.Get(index);
}
inline ::google::cloud::vision::v1::CropHint* CropHintsAnnotation::mutable_crop_hints(int index) {
  // @@protoc_insertion_point(field_mutable:google.cloud.vision.v1.CropHintsAnnotation.crop_hints)
  return crop_hints_.Mutable(index);
}
inline ::google::cloud::vision::v1::CropHint* CropHintsAnnotation::add_crop_hints() {
  // @@protoc_insertion_point(field_add:google.cloud.vision.v1.CropHintsAnnotation.crop_hints)
  return crop_hints_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::google::cloud::vision::v1::CropHint >*
CropHintsAnnotation::mutable_crop_hints() {
  // @@protoc_insertion_point(field_mutable_list:google.cloud.vision.v1.CropHintsAnnotation.crop_hints)
  return &crop_hints_;
}
inline const ::google::protobuf::RepeatedPtrField< ::google::cloud::vision::v1::CropHint >&
CropHintsAnnotation::crop_hints() const {
  // @@protoc_insertion_point(field_list:google.cloud.vision.v1.CropHintsAnnotation.crop_hints)
  return crop_hints_;
}

// -------------------------------------------------------------------

// CropHintsParams

// repeated float aspect_ratios = 1;
inline int CropHintsParams::aspect_ratios_size() const {
  return aspect_ratios_.size();
}
inline void CropHintsParams::clear_aspect_ratios() {
  aspect_ratios_.Clear();
}
inline float CropHintsParams::aspect_ratios(int index) const {
  // @@protoc_insertion_point(field_get:google.cloud.vision.v1.CropHintsParams.aspect_ratios)
  return aspect_ratios_.Get(index);
}
inline void CropHintsParams::set_aspect_ratios(int index, float value) {
  aspect_ratios_.Set(index, value);
  // @@protoc_insertion_point(field_set:google.cloud.vision.v1.CropHintsParams.aspect_ratios)
}
inline void CropHintsParams::add_aspect_ratios(float value) {
  aspect_ratios_.Add(value);
  // @@protoc_insertion_point(field_add:google.cloud.vision.v1.CropHintsParams.aspect_ratios)
}
inline const ::google::protobuf::RepeatedField< float >&
CropHintsParams::aspect_ratios() const {
  // @@protoc_insertion_point(field_list:google.cloud.vision.v1.CropHintsParams.aspect_ratios)
  return aspect_ratios_;
}
inline ::google::protobuf::RepeatedField< float >*
CropHintsParams::mutable_aspect_ratios() {
  // @@protoc_insertion_point(field_mutable_list:google.cloud.vision.v1.CropHintsParams.aspect_ratios)
  return &aspect_ratios_;
}

// -------------------------------------------------------------------

// ImageContext

// .google.cloud.vision.v1.LatLongRect lat_long_rect = 1;
inline bool ImageContext::has_lat_long_rect() const {
  return this != internal_default_instance() && lat_long_rect_ != NULL;
}
inline void ImageContext::clear_lat_long_rect() {
  if (GetArenaNoVirtual() == NULL && lat_long_rect_ != NULL) {
    delete lat_long_rect_;
  }
  lat_long_rect_ = NULL;
}
inline const ::google::cloud::vision::v1::LatLongRect& ImageContext::lat_long_rect() const {
  const ::google::cloud::vision::v1::LatLongRect* p = lat_long_rect_;
  // @@protoc_insertion_point(field_get:google.cloud.vision.v1.ImageContext.lat_long_rect)
  return p != NULL ? *p : *reinterpret_cast<const ::google::cloud::vision::v1::LatLongRect*>(
      &::google::cloud::vision::v1::_LatLongRect_default_instance_);
}
inline ::google::cloud::vision::v1::LatLongRect* ImageContext::release_lat_long_rect() {
  // @@protoc_insertion_point(field_release:google.cloud.vision.v1.ImageContext.lat_long_rect)
  
  ::google::cloud::vision::v1::LatLongRect* temp = lat_long_rect_;
  if (GetArenaNoVirtual() != NULL) {
    temp = ::google::protobuf::internal::DuplicateIfNonNull(temp, NULL);
  }
  lat_long_rect_ = NULL;
  return temp;
}
inline ::google::cloud::vision::v1::LatLongRect* ImageContext::unsafe_arena_release_lat_long_rect() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.cloud.vision.v1.ImageContext.lat_long_rect)
  
  ::google::cloud::vision::v1::LatLongRect* temp = lat_long_rect_;
  lat_long_rect_ = NULL;
  return temp;
}
inline ::google::cloud::vision::v1::LatLongRect* ImageContext::mutable_lat_long_rect() {
  
  if (lat_long_rect_ == NULL) {
    _slow_mutable_lat_long_rect();
  }
  // @@protoc_insertion_point(field_mutable:google.cloud.vision.v1.ImageContext.lat_long_rect)
  return lat_long_rect_;
}
inline void ImageContext::set_allocated_lat_long_rect(::google::cloud::vision::v1::LatLongRect* lat_long_rect) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete lat_long_rect_;
  }
  if (lat_long_rect) {
    ::google::protobuf::Arena* submessage_arena =
      ::google::protobuf::Arena::GetArena(lat_long_rect);
    if (message_arena != submessage_arena) {
      lat_long_rect = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, lat_long_rect, submessage_arena);
    }
    
  } else {
    
  }
  lat_long_rect_ = lat_long_rect;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.vision.v1.ImageContext.lat_long_rect)
}

// repeated string language_hints = 2;
inline int ImageContext::language_hints_size() const {
  return language_hints_.size();
}
inline void ImageContext::clear_language_hints() {
  language_hints_.Clear();
}
inline const ::std::string& ImageContext::language_hints(int index) const {
  // @@protoc_insertion_point(field_get:google.cloud.vision.v1.ImageContext.language_hints)
  return language_hints_.Get(index);
}
inline ::std::string* ImageContext::mutable_language_hints(int index) {
  // @@protoc_insertion_point(field_mutable:google.cloud.vision.v1.ImageContext.language_hints)
  return language_hints_.Mutable(index);
}
inline void ImageContext::set_language_hints(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:google.cloud.vision.v1.ImageContext.language_hints)
  language_hints_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void ImageContext::set_language_hints(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:google.cloud.vision.v1.ImageContext.language_hints)
  language_hints_.Mutable(index)->assign(std::move(value));
}
#endif
inline void ImageContext::set_language_hints(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  language_hints_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:google.cloud.vision.v1.ImageContext.language_hints)
}
inline void ImageContext::set_language_hints(int index, const char* value, size_t size) {
  language_hints_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:google.cloud.vision.v1.ImageContext.language_hints)
}
inline ::std::string* ImageContext::add_language_hints() {
  // @@protoc_insertion_point(field_add_mutable:google.cloud.vision.v1.ImageContext.language_hints)
  return language_hints_.Add();
}
inline void ImageContext::add_language_hints(const ::std::string& value) {
  language_hints_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:google.cloud.vision.v1.ImageContext.language_hints)
}
#if LANG_CXX11
inline void ImageContext::add_language_hints(::std::string&& value) {
  language_hints_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:google.cloud.vision.v1.ImageContext.language_hints)
}
#endif
inline void ImageContext::add_language_hints(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  language_hints_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:google.cloud.vision.v1.ImageContext.language_hints)
}
inline void ImageContext::add_language_hints(const char* value, size_t size) {
  language_hints_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:google.cloud.vision.v1.ImageContext.language_hints)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
ImageContext::language_hints() const {
  // @@protoc_insertion_point(field_list:google.cloud.vision.v1.ImageContext.language_hints)
  return language_hints_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
ImageContext::mutable_language_hints() {
  // @@protoc_insertion_point(field_mutable_list:google.cloud.vision.v1.ImageContext.language_hints)
  return &language_hints_;
}

// .google.cloud.vision.v1.CropHintsParams crop_hints_params = 4;
inline bool ImageContext::has_crop_hints_params() const {
  return this != internal_default_instance() && crop_hints_params_ != NULL;
}
inline void ImageContext::clear_crop_hints_params() {
  if (GetArenaNoVirtual() == NULL && crop_hints_params_ != NULL) {
    delete crop_hints_params_;
  }
  crop_hints_params_ = NULL;
}
inline const ::google::cloud::vision::v1::CropHintsParams& ImageContext::crop_hints_params() const {
  const ::google::cloud::vision::v1::CropHintsParams* p = crop_hints_params_;
  // @@protoc_insertion_point(field_get:google.cloud.vision.v1.ImageContext.crop_hints_params)
  return p != NULL ? *p : *reinterpret_cast<const ::google::cloud::vision::v1::CropHintsParams*>(
      &::google::cloud::vision::v1::_CropHintsParams_default_instance_);
}
inline ::google::cloud::vision::v1::CropHintsParams* ImageContext::release_crop_hints_params() {
  // @@protoc_insertion_point(field_release:google.cloud.vision.v1.ImageContext.crop_hints_params)
  
  ::google::cloud::vision::v1::CropHintsParams* temp = crop_hints_params_;
  if (GetArenaNoVirtual() != NULL) {
    temp = ::google::protobuf::internal::DuplicateIfNonNull(temp, NULL);
  }
  crop_hints_params_ = NULL;
  return temp;
}
inline ::google::cloud::vision::v1::CropHintsParams* ImageContext::unsafe_arena_release_crop_hints_params() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.cloud.vision.v1.ImageContext.crop_hints_params)
  
  ::google::cloud::vision::v1::CropHintsParams* temp = crop_hints_params_;
  crop_hints_params_ = NULL;
  return temp;
}
inline ::google::cloud::vision::v1::CropHintsParams* ImageContext::mutable_crop_hints_params() {
  
  if (crop_hints_params_ == NULL) {
    _slow_mutable_crop_hints_params();
  }
  // @@protoc_insertion_point(field_mutable:google.cloud.vision.v1.ImageContext.crop_hints_params)
  return crop_hints_params_;
}
inline void ImageContext::set_allocated_crop_hints_params(::google::cloud::vision::v1::CropHintsParams* crop_hints_params) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete crop_hints_params_;
  }
  if (crop_hints_params) {
    ::google::protobuf::Arena* submessage_arena =
      ::google::protobuf::Arena::GetArena(crop_hints_params);
    if (message_arena != submessage_arena) {
      crop_hints_params = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, crop_hints_params, submessage_arena);
    }
    
  } else {
    
  }
  crop_hints_params_ = crop_hints_params;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.vision.v1.ImageContext.crop_hints_params)
}

// -------------------------------------------------------------------

// AnnotateImageRequest

// .google.cloud.vision.v1.Image image = 1;
inline bool AnnotateImageRequest::has_image() const {
  return this != internal_default_instance() && image_ != NULL;
}
inline void AnnotateImageRequest::clear_image() {
  if (GetArenaNoVirtual() == NULL && image_ != NULL) {
    delete image_;
  }
  image_ = NULL;
}
inline const ::google::cloud::vision::v1::Image& AnnotateImageRequest::image() const {
  const ::google::cloud::vision::v1::Image* p = image_;
  // @@protoc_insertion_point(field_get:google.cloud.vision.v1.AnnotateImageRequest.image)
  return p != NULL ? *p : *reinterpret_cast<const ::google::cloud::vision::v1::Image*>(
      &::google::cloud::vision::v1::_Image_default_instance_);
}
inline ::google::cloud::vision::v1::Image* AnnotateImageRequest::release_image() {
  // @@protoc_insertion_point(field_release:google.cloud.vision.v1.AnnotateImageRequest.image)
  
  ::google::cloud::vision::v1::Image* temp = image_;
  if (GetArenaNoVirtual() != NULL) {
    temp = ::google::protobuf::internal::DuplicateIfNonNull(temp, NULL);
  }
  image_ = NULL;
  return temp;
}
inline ::google::cloud::vision::v1::Image* AnnotateImageRequest::unsafe_arena_release_image() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.cloud.vision.v1.AnnotateImageRequest.image)
  
  ::google::cloud::vision::v1::Image* temp = image_;
  image_ = NULL;
  return temp;
}
inline ::google::cloud::vision::v1::Image* AnnotateImageRequest::mutable_image() {
  
  if (image_ == NULL) {
    _slow_mutable_image();
  }
  // @@protoc_insertion_point(field_mutable:google.cloud.vision.v1.AnnotateImageRequest.image)
  return image_;
}
inline void AnnotateImageRequest::set_allocated_image(::google::cloud::vision::v1::Image* image) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete image_;
  }
  if (image) {
    ::google::protobuf::Arena* submessage_arena =
      ::google::protobuf::Arena::GetArena(image);
    if (message_arena != submessage_arena) {
      image = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, image, submessage_arena);
    }
    
  } else {
    
  }
  image_ = image;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.vision.v1.AnnotateImageRequest.image)
}

// repeated .google.cloud.vision.v1.Feature features = 2;
inline int AnnotateImageRequest::features_size() const {
  return features_.size();
}
inline void AnnotateImageRequest::clear_features() {
  features_.Clear();
}
inline const ::google::cloud::vision::v1::Feature& AnnotateImageRequest::features(int index) const {
  // @@protoc_insertion_point(field_get:google.cloud.vision.v1.AnnotateImageRequest.features)
  return features_.Get(index);
}
inline ::google::cloud::vision::v1::Feature* AnnotateImageRequest::mutable_features(int index) {
  // @@protoc_insertion_point(field_mutable:google.cloud.vision.v1.AnnotateImageRequest.features)
  return features_.Mutable(index);
}
inline ::google::cloud::vision::v1::Feature* AnnotateImageRequest::add_features() {
  // @@protoc_insertion_point(field_add:google.cloud.vision.v1.AnnotateImageRequest.features)
  return features_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::google::cloud::vision::v1::Feature >*
AnnotateImageRequest::mutable_features() {
  // @@protoc_insertion_point(field_mutable_list:google.cloud.vision.v1.AnnotateImageRequest.features)
  return &features_;
}
inline const ::google::protobuf::RepeatedPtrField< ::google::cloud::vision::v1::Feature >&
AnnotateImageRequest::features() const {
  // @@protoc_insertion_point(field_list:google.cloud.vision.v1.AnnotateImageRequest.features)
  return features_;
}

// .google.cloud.vision.v1.ImageContext image_context = 3;
inline bool AnnotateImageRequest::has_image_context() const {
  return this != internal_default_instance() && image_context_ != NULL;
}
inline void AnnotateImageRequest::clear_image_context() {
  if (GetArenaNoVirtual() == NULL && image_context_ != NULL) {
    delete image_context_;
  }
  image_context_ = NULL;
}
inline const ::google::cloud::vision::v1::ImageContext& AnnotateImageRequest::image_context() const {
  const ::google::cloud::vision::v1::ImageContext* p = image_context_;
  // @@protoc_insertion_point(field_get:google.cloud.vision.v1.AnnotateImageRequest.image_context)
  return p != NULL ? *p : *reinterpret_cast<const ::google::cloud::vision::v1::ImageContext*>(
      &::google::cloud::vision::v1::_ImageContext_default_instance_);
}
inline ::google::cloud::vision::v1::ImageContext* AnnotateImageRequest::release_image_context() {
  // @@protoc_insertion_point(field_release:google.cloud.vision.v1.AnnotateImageRequest.image_context)
  
  ::google::cloud::vision::v1::ImageContext* temp = image_context_;
  if (GetArenaNoVirtual() != NULL) {
    temp = ::google::protobuf::internal::DuplicateIfNonNull(temp, NULL);
  }
  image_context_ = NULL;
  return temp;
}
inline ::google::cloud::vision::v1::ImageContext* AnnotateImageRequest::unsafe_arena_release_image_context() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.cloud.vision.v1.AnnotateImageRequest.image_context)
  
  ::google::cloud::vision::v1::ImageContext* temp = image_context_;
  image_context_ = NULL;
  return temp;
}
inline ::google::cloud::vision::v1::ImageContext* AnnotateImageRequest::mutable_image_context() {
  
  if (image_context_ == NULL) {
    _slow_mutable_image_context();
  }
  // @@protoc_insertion_point(field_mutable:google.cloud.vision.v1.AnnotateImageRequest.image_context)
  return image_context_;
}
inline void AnnotateImageRequest::set_allocated_image_context(::google::cloud::vision::v1::ImageContext* image_context) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete image_context_;
  }
  if (image_context) {
    ::google::protobuf::Arena* submessage_arena =
      ::google::protobuf::Arena::GetArena(image_context);
    if (message_arena != submessage_arena) {
      image_context = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, image_context, submessage_arena);
    }
    
  } else {
    
  }
  image_context_ = image_context;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.vision.v1.AnnotateImageRequest.image_context)
}

// -------------------------------------------------------------------

// AnnotateImageResponse

// repeated .google.cloud.vision.v1.FaceAnnotation face_annotations = 1;
inline int AnnotateImageResponse::face_annotations_size() const {
  return face_annotations_.size();
}
inline void AnnotateImageResponse::clear_face_annotations() {
  face_annotations_.Clear();
}
inline const ::google::cloud::vision::v1::FaceAnnotation& AnnotateImageResponse::face_annotations(int index) const {
  // @@protoc_insertion_point(field_get:google.cloud.vision.v1.AnnotateImageResponse.face_annotations)
  return face_annotations_.Get(index);
}
inline ::google::cloud::vision::v1::FaceAnnotation* AnnotateImageResponse::mutable_face_annotations(int index) {
  // @@protoc_insertion_point(field_mutable:google.cloud.vision.v1.AnnotateImageResponse.face_annotations)
  return face_annotations_.Mutable(index);
}
inline ::google::cloud::vision::v1::FaceAnnotation* AnnotateImageResponse::add_face_annotations() {
  // @@protoc_insertion_point(field_add:google.cloud.vision.v1.AnnotateImageResponse.face_annotations)
  return face_annotations_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::google::cloud::vision::v1::FaceAnnotation >*
AnnotateImageResponse::mutable_face_annotations() {
  // @@protoc_insertion_point(field_mutable_list:google.cloud.vision.v1.AnnotateImageResponse.face_annotations)
  return &face_annotations_;
}
inline const ::google::protobuf::RepeatedPtrField< ::google::cloud::vision::v1::FaceAnnotation >&
AnnotateImageResponse::face_annotations() const {
  // @@protoc_insertion_point(field_list:google.cloud.vision.v1.AnnotateImageResponse.face_annotations)
  return face_annotations_;
}

// repeated .google.cloud.vision.v1.EntityAnnotation landmark_annotations = 2;
inline int AnnotateImageResponse::landmark_annotations_size() const {
  return landmark_annotations_.size();
}
inline void AnnotateImageResponse::clear_landmark_annotations() {
  landmark_annotations_.Clear();
}
inline const ::google::cloud::vision::v1::EntityAnnotation& AnnotateImageResponse::landmark_annotations(int index) const {
  // @@protoc_insertion_point(field_get:google.cloud.vision.v1.AnnotateImageResponse.landmark_annotations)
  return landmark_annotations_.Get(index);
}
inline ::google::cloud::vision::v1::EntityAnnotation* AnnotateImageResponse::mutable_landmark_annotations(int index) {
  // @@protoc_insertion_point(field_mutable:google.cloud.vision.v1.AnnotateImageResponse.landmark_annotations)
  return landmark_annotations_.Mutable(index);
}
inline ::google::cloud::vision::v1::EntityAnnotation* AnnotateImageResponse::add_landmark_annotations() {
  // @@protoc_insertion_point(field_add:google.cloud.vision.v1.AnnotateImageResponse.landmark_annotations)
  return landmark_annotations_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::google::cloud::vision::v1::EntityAnnotation >*
AnnotateImageResponse::mutable_landmark_annotations() {
  // @@protoc_insertion_point(field_mutable_list:google.cloud.vision.v1.AnnotateImageResponse.landmark_annotations)
  return &landmark_annotations_;
}
inline const ::google::protobuf::RepeatedPtrField< ::google::cloud::vision::v1::EntityAnnotation >&
AnnotateImageResponse::landmark_annotations() const {
  // @@protoc_insertion_point(field_list:google.cloud.vision.v1.AnnotateImageResponse.landmark_annotations)
  return landmark_annotations_;
}

// repeated .google.cloud.vision.v1.EntityAnnotation logo_annotations = 3;
inline int AnnotateImageResponse::logo_annotations_size() const {
  return logo_annotations_.size();
}
inline void AnnotateImageResponse::clear_logo_annotations() {
  logo_annotations_.Clear();
}
inline const ::google::cloud::vision::v1::EntityAnnotation& AnnotateImageResponse::logo_annotations(int index) const {
  // @@protoc_insertion_point(field_get:google.cloud.vision.v1.AnnotateImageResponse.logo_annotations)
  return logo_annotations_.Get(index);
}
inline ::google::cloud::vision::v1::EntityAnnotation* AnnotateImageResponse::mutable_logo_annotations(int index) {
  // @@protoc_insertion_point(field_mutable:google.cloud.vision.v1.AnnotateImageResponse.logo_annotations)
  return logo_annotations_.Mutable(index);
}
inline ::google::cloud::vision::v1::EntityAnnotation* AnnotateImageResponse::add_logo_annotations() {
  // @@protoc_insertion_point(field_add:google.cloud.vision.v1.AnnotateImageResponse.logo_annotations)
  return logo_annotations_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::google::cloud::vision::v1::EntityAnnotation >*
AnnotateImageResponse::mutable_logo_annotations() {
  // @@protoc_insertion_point(field_mutable_list:google.cloud.vision.v1.AnnotateImageResponse.logo_annotations)
  return &logo_annotations_;
}
inline const ::google::protobuf::RepeatedPtrField< ::google::cloud::vision::v1::EntityAnnotation >&
AnnotateImageResponse::logo_annotations() const {
  // @@protoc_insertion_point(field_list:google.cloud.vision.v1.AnnotateImageResponse.logo_annotations)
  return logo_annotations_;
}

// repeated .google.cloud.vision.v1.EntityAnnotation label_annotations = 4;
inline int AnnotateImageResponse::label_annotations_size() const {
  return label_annotations_.size();
}
inline void AnnotateImageResponse::clear_label_annotations() {
  label_annotations_.Clear();
}
inline const ::google::cloud::vision::v1::EntityAnnotation& AnnotateImageResponse::label_annotations(int index) const {
  // @@protoc_insertion_point(field_get:google.cloud.vision.v1.AnnotateImageResponse.label_annotations)
  return label_annotations_.Get(index);
}
inline ::google::cloud::vision::v1::EntityAnnotation* AnnotateImageResponse::mutable_label_annotations(int index) {
  // @@protoc_insertion_point(field_mutable:google.cloud.vision.v1.AnnotateImageResponse.label_annotations)
  return label_annotations_.Mutable(index);
}
inline ::google::cloud::vision::v1::EntityAnnotation* AnnotateImageResponse::add_label_annotations() {
  // @@protoc_insertion_point(field_add:google.cloud.vision.v1.AnnotateImageResponse.label_annotations)
  return label_annotations_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::google::cloud::vision::v1::EntityAnnotation >*
AnnotateImageResponse::mutable_label_annotations() {
  // @@protoc_insertion_point(field_mutable_list:google.cloud.vision.v1.AnnotateImageResponse.label_annotations)
  return &label_annotations_;
}
inline const ::google::protobuf::RepeatedPtrField< ::google::cloud::vision::v1::EntityAnnotation >&
AnnotateImageResponse::label_annotations() const {
  // @@protoc_insertion_point(field_list:google.cloud.vision.v1.AnnotateImageResponse.label_annotations)
  return label_annotations_;
}

// repeated .google.cloud.vision.v1.EntityAnnotation text_annotations = 5;
inline int AnnotateImageResponse::text_annotations_size() const {
  return text_annotations_.size();
}
inline void AnnotateImageResponse::clear_text_annotations() {
  text_annotations_.Clear();
}
inline const ::google::cloud::vision::v1::EntityAnnotation& AnnotateImageResponse::text_annotations(int index) const {
  // @@protoc_insertion_point(field_get:google.cloud.vision.v1.AnnotateImageResponse.text_annotations)
  return text_annotations_.Get(index);
}
inline ::google::cloud::vision::v1::EntityAnnotation* AnnotateImageResponse::mutable_text_annotations(int index) {
  // @@protoc_insertion_point(field_mutable:google.cloud.vision.v1.AnnotateImageResponse.text_annotations)
  return text_annotations_.Mutable(index);
}
inline ::google::cloud::vision::v1::EntityAnnotation* AnnotateImageResponse::add_text_annotations() {
  // @@protoc_insertion_point(field_add:google.cloud.vision.v1.AnnotateImageResponse.text_annotations)
  return text_annotations_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::google::cloud::vision::v1::EntityAnnotation >*
AnnotateImageResponse::mutable_text_annotations() {
  // @@protoc_insertion_point(field_mutable_list:google.cloud.vision.v1.AnnotateImageResponse.text_annotations)
  return &text_annotations_;
}
inline const ::google::protobuf::RepeatedPtrField< ::google::cloud::vision::v1::EntityAnnotation >&
AnnotateImageResponse::text_annotations() const {
  // @@protoc_insertion_point(field_list:google.cloud.vision.v1.AnnotateImageResponse.text_annotations)
  return text_annotations_;
}

// .google.cloud.vision.v1.TextAnnotation full_text_annotation = 12;
inline bool AnnotateImageResponse::has_full_text_annotation() const {
  return this != internal_default_instance() && full_text_annotation_ != NULL;
}
inline const ::google::cloud::vision::v1::TextAnnotation& AnnotateImageResponse::full_text_annotation() const {
  const ::google::cloud::vision::v1::TextAnnotation* p = full_text_annotation_;
  // @@protoc_insertion_point(field_get:google.cloud.vision.v1.AnnotateImageResponse.full_text_annotation)
  return p != NULL ? *p : *reinterpret_cast<const ::google::cloud::vision::v1::TextAnnotation*>(
      &::google::cloud::vision::v1::_TextAnnotation_default_instance_);
}
inline ::google::cloud::vision::v1::TextAnnotation* AnnotateImageResponse::release_full_text_annotation() {
  // @@protoc_insertion_point(field_release:google.cloud.vision.v1.AnnotateImageResponse.full_text_annotation)
  
  ::google::cloud::vision::v1::TextAnnotation* temp = full_text_annotation_;
  if (GetArenaNoVirtual() != NULL) {
    temp = ::google::protobuf::internal::DuplicateIfNonNull(temp, NULL);
  }
  full_text_annotation_ = NULL;
  return temp;
}
inline ::google::cloud::vision::v1::TextAnnotation* AnnotateImageResponse::unsafe_arena_release_full_text_annotation() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.cloud.vision.v1.AnnotateImageResponse.full_text_annotation)
  
  ::google::cloud::vision::v1::TextAnnotation* temp = full_text_annotation_;
  full_text_annotation_ = NULL;
  return temp;
}
inline ::google::cloud::vision::v1::TextAnnotation* AnnotateImageResponse::mutable_full_text_annotation() {
  
  if (full_text_annotation_ == NULL) {
    _slow_mutable_full_text_annotation();
  }
  // @@protoc_insertion_point(field_mutable:google.cloud.vision.v1.AnnotateImageResponse.full_text_annotation)
  return full_text_annotation_;
}
inline void AnnotateImageResponse::set_allocated_full_text_annotation(::google::cloud::vision::v1::TextAnnotation* full_text_annotation) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(full_text_annotation_);
  }
  if (full_text_annotation) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast< ::google::protobuf::MessageLite*>(full_text_annotation)->GetArena();
    if (message_arena != submessage_arena) {
      full_text_annotation = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, full_text_annotation, submessage_arena);
    }
    
  } else {
    
  }
  full_text_annotation_ = full_text_annotation;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.vision.v1.AnnotateImageResponse.full_text_annotation)
}

// .google.cloud.vision.v1.SafeSearchAnnotation safe_search_annotation = 6;
inline bool AnnotateImageResponse::has_safe_search_annotation() const {
  return this != internal_default_instance() && safe_search_annotation_ != NULL;
}
inline void AnnotateImageResponse::clear_safe_search_annotation() {
  if (GetArenaNoVirtual() == NULL && safe_search_annotation_ != NULL) {
    delete safe_search_annotation_;
  }
  safe_search_annotation_ = NULL;
}
inline const ::google::cloud::vision::v1::SafeSearchAnnotation& AnnotateImageResponse::safe_search_annotation() const {
  const ::google::cloud::vision::v1::SafeSearchAnnotation* p = safe_search_annotation_;
  // @@protoc_insertion_point(field_get:google.cloud.vision.v1.AnnotateImageResponse.safe_search_annotation)
  return p != NULL ? *p : *reinterpret_cast<const ::google::cloud::vision::v1::SafeSearchAnnotation*>(
      &::google::cloud::vision::v1::_SafeSearchAnnotation_default_instance_);
}
inline ::google::cloud::vision::v1::SafeSearchAnnotation* AnnotateImageResponse::release_safe_search_annotation() {
  // @@protoc_insertion_point(field_release:google.cloud.vision.v1.AnnotateImageResponse.safe_search_annotation)
  
  ::google::cloud::vision::v1::SafeSearchAnnotation* temp = safe_search_annotation_;
  if (GetArenaNoVirtual() != NULL) {
    temp = ::google::protobuf::internal::DuplicateIfNonNull(temp, NULL);
  }
  safe_search_annotation_ = NULL;
  return temp;
}
inline ::google::cloud::vision::v1::SafeSearchAnnotation* AnnotateImageResponse::unsafe_arena_release_safe_search_annotation() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.cloud.vision.v1.AnnotateImageResponse.safe_search_annotation)
  
  ::google::cloud::vision::v1::SafeSearchAnnotation* temp = safe_search_annotation_;
  safe_search_annotation_ = NULL;
  return temp;
}
inline ::google::cloud::vision::v1::SafeSearchAnnotation* AnnotateImageResponse::mutable_safe_search_annotation() {
  
  if (safe_search_annotation_ == NULL) {
    _slow_mutable_safe_search_annotation();
  }
  // @@protoc_insertion_point(field_mutable:google.cloud.vision.v1.AnnotateImageResponse.safe_search_annotation)
  return safe_search_annotation_;
}
inline void AnnotateImageResponse::set_allocated_safe_search_annotation(::google::cloud::vision::v1::SafeSearchAnnotation* safe_search_annotation) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete safe_search_annotation_;
  }
  if (safe_search_annotation) {
    ::google::protobuf::Arena* submessage_arena =
      ::google::protobuf::Arena::GetArena(safe_search_annotation);
    if (message_arena != submessage_arena) {
      safe_search_annotation = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, safe_search_annotation, submessage_arena);
    }
    
  } else {
    
  }
  safe_search_annotation_ = safe_search_annotation;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.vision.v1.AnnotateImageResponse.safe_search_annotation)
}

// .google.cloud.vision.v1.ImageProperties image_properties_annotation = 8;
inline bool AnnotateImageResponse::has_image_properties_annotation() const {
  return this != internal_default_instance() && image_properties_annotation_ != NULL;
}
inline void AnnotateImageResponse::clear_image_properties_annotation() {
  if (GetArenaNoVirtual() == NULL && image_properties_annotation_ != NULL) {
    delete image_properties_annotation_;
  }
  image_properties_annotation_ = NULL;
}
inline const ::google::cloud::vision::v1::ImageProperties& AnnotateImageResponse::image_properties_annotation() const {
  const ::google::cloud::vision::v1::ImageProperties* p = image_properties_annotation_;
  // @@protoc_insertion_point(field_get:google.cloud.vision.v1.AnnotateImageResponse.image_properties_annotation)
  return p != NULL ? *p : *reinterpret_cast<const ::google::cloud::vision::v1::ImageProperties*>(
      &::google::cloud::vision::v1::_ImageProperties_default_instance_);
}
inline ::google::cloud::vision::v1::ImageProperties* AnnotateImageResponse::release_image_properties_annotation() {
  // @@protoc_insertion_point(field_release:google.cloud.vision.v1.AnnotateImageResponse.image_properties_annotation)
  
  ::google::cloud::vision::v1::ImageProperties* temp = image_properties_annotation_;
  if (GetArenaNoVirtual() != NULL) {
    temp = ::google::protobuf::internal::DuplicateIfNonNull(temp, NULL);
  }
  image_properties_annotation_ = NULL;
  return temp;
}
inline ::google::cloud::vision::v1::ImageProperties* AnnotateImageResponse::unsafe_arena_release_image_properties_annotation() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.cloud.vision.v1.AnnotateImageResponse.image_properties_annotation)
  
  ::google::cloud::vision::v1::ImageProperties* temp = image_properties_annotation_;
  image_properties_annotation_ = NULL;
  return temp;
}
inline ::google::cloud::vision::v1::ImageProperties* AnnotateImageResponse::mutable_image_properties_annotation() {
  
  if (image_properties_annotation_ == NULL) {
    _slow_mutable_image_properties_annotation();
  }
  // @@protoc_insertion_point(field_mutable:google.cloud.vision.v1.AnnotateImageResponse.image_properties_annotation)
  return image_properties_annotation_;
}
inline void AnnotateImageResponse::set_allocated_image_properties_annotation(::google::cloud::vision::v1::ImageProperties* image_properties_annotation) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete image_properties_annotation_;
  }
  if (image_properties_annotation) {
    ::google::protobuf::Arena* submessage_arena =
      ::google::protobuf::Arena::GetArena(image_properties_annotation);
    if (message_arena != submessage_arena) {
      image_properties_annotation = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, image_properties_annotation, submessage_arena);
    }
    
  } else {
    
  }
  image_properties_annotation_ = image_properties_annotation;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.vision.v1.AnnotateImageResponse.image_properties_annotation)
}

// .google.cloud.vision.v1.CropHintsAnnotation crop_hints_annotation = 11;
inline bool AnnotateImageResponse::has_crop_hints_annotation() const {
  return this != internal_default_instance() && crop_hints_annotation_ != NULL;
}
inline void AnnotateImageResponse::clear_crop_hints_annotation() {
  if (GetArenaNoVirtual() == NULL && crop_hints_annotation_ != NULL) {
    delete crop_hints_annotation_;
  }
  crop_hints_annotation_ = NULL;
}
inline const ::google::cloud::vision::v1::CropHintsAnnotation& AnnotateImageResponse::crop_hints_annotation() const {
  const ::google::cloud::vision::v1::CropHintsAnnotation* p = crop_hints_annotation_;
  // @@protoc_insertion_point(field_get:google.cloud.vision.v1.AnnotateImageResponse.crop_hints_annotation)
  return p != NULL ? *p : *reinterpret_cast<const ::google::cloud::vision::v1::CropHintsAnnotation*>(
      &::google::cloud::vision::v1::_CropHintsAnnotation_default_instance_);
}
inline ::google::cloud::vision::v1::CropHintsAnnotation* AnnotateImageResponse::release_crop_hints_annotation() {
  // @@protoc_insertion_point(field_release:google.cloud.vision.v1.AnnotateImageResponse.crop_hints_annotation)
  
  ::google::cloud::vision::v1::CropHintsAnnotation* temp = crop_hints_annotation_;
  if (GetArenaNoVirtual() != NULL) {
    temp = ::google::protobuf::internal::DuplicateIfNonNull(temp, NULL);
  }
  crop_hints_annotation_ = NULL;
  return temp;
}
inline ::google::cloud::vision::v1::CropHintsAnnotation* AnnotateImageResponse::unsafe_arena_release_crop_hints_annotation() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.cloud.vision.v1.AnnotateImageResponse.crop_hints_annotation)
  
  ::google::cloud::vision::v1::CropHintsAnnotation* temp = crop_hints_annotation_;
  crop_hints_annotation_ = NULL;
  return temp;
}
inline ::google::cloud::vision::v1::CropHintsAnnotation* AnnotateImageResponse::mutable_crop_hints_annotation() {
  
  if (crop_hints_annotation_ == NULL) {
    _slow_mutable_crop_hints_annotation();
  }
  // @@protoc_insertion_point(field_mutable:google.cloud.vision.v1.AnnotateImageResponse.crop_hints_annotation)
  return crop_hints_annotation_;
}
inline void AnnotateImageResponse::set_allocated_crop_hints_annotation(::google::cloud::vision::v1::CropHintsAnnotation* crop_hints_annotation) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete crop_hints_annotation_;
  }
  if (crop_hints_annotation) {
    ::google::protobuf::Arena* submessage_arena =
      ::google::protobuf::Arena::GetArena(crop_hints_annotation);
    if (message_arena != submessage_arena) {
      crop_hints_annotation = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, crop_hints_annotation, submessage_arena);
    }
    
  } else {
    
  }
  crop_hints_annotation_ = crop_hints_annotation;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.vision.v1.AnnotateImageResponse.crop_hints_annotation)
}

// .google.cloud.vision.v1.WebDetection web_detection = 13;
inline bool AnnotateImageResponse::has_web_detection() const {
  return this != internal_default_instance() && web_detection_ != NULL;
}
inline const ::google::cloud::vision::v1::WebDetection& AnnotateImageResponse::web_detection() const {
  const ::google::cloud::vision::v1::WebDetection* p = web_detection_;
  // @@protoc_insertion_point(field_get:google.cloud.vision.v1.AnnotateImageResponse.web_detection)
  return p != NULL ? *p : *reinterpret_cast<const ::google::cloud::vision::v1::WebDetection*>(
      &::google::cloud::vision::v1::_WebDetection_default_instance_);
}
inline ::google::cloud::vision::v1::WebDetection* AnnotateImageResponse::release_web_detection() {
  // @@protoc_insertion_point(field_release:google.cloud.vision.v1.AnnotateImageResponse.web_detection)
  
  ::google::cloud::vision::v1::WebDetection* temp = web_detection_;
  if (GetArenaNoVirtual() != NULL) {
    temp = ::google::protobuf::internal::DuplicateIfNonNull(temp, NULL);
  }
  web_detection_ = NULL;
  return temp;
}
inline ::google::cloud::vision::v1::WebDetection* AnnotateImageResponse::unsafe_arena_release_web_detection() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.cloud.vision.v1.AnnotateImageResponse.web_detection)
  
  ::google::cloud::vision::v1::WebDetection* temp = web_detection_;
  web_detection_ = NULL;
  return temp;
}
inline ::google::cloud::vision::v1::WebDetection* AnnotateImageResponse::mutable_web_detection() {
  
  if (web_detection_ == NULL) {
    _slow_mutable_web_detection();
  }
  // @@protoc_insertion_point(field_mutable:google.cloud.vision.v1.AnnotateImageResponse.web_detection)
  return web_detection_;
}
inline void AnnotateImageResponse::set_allocated_web_detection(::google::cloud::vision::v1::WebDetection* web_detection) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(web_detection_);
  }
  if (web_detection) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast< ::google::protobuf::MessageLite*>(web_detection)->GetArena();
    if (message_arena != submessage_arena) {
      web_detection = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, web_detection, submessage_arena);
    }
    
  } else {
    
  }
  web_detection_ = web_detection;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.vision.v1.AnnotateImageResponse.web_detection)
}

// .google.rpc.Status error = 9;
inline bool AnnotateImageResponse::has_error() const {
  return this != internal_default_instance() && error_ != NULL;
}
inline const ::google::rpc::Status& AnnotateImageResponse::error() const {
  const ::google::rpc::Status* p = error_;
  // @@protoc_insertion_point(field_get:google.cloud.vision.v1.AnnotateImageResponse.error)
  return p != NULL ? *p : *reinterpret_cast<const ::google::rpc::Status*>(
      &::google::rpc::_Status_default_instance_);
}
inline ::google::rpc::Status* AnnotateImageResponse::release_error() {
  // @@protoc_insertion_point(field_release:google.cloud.vision.v1.AnnotateImageResponse.error)
  
  ::google::rpc::Status* temp = error_;
  if (GetArenaNoVirtual() != NULL) {
    temp = ::google::protobuf::internal::DuplicateIfNonNull(temp, NULL);
  }
  error_ = NULL;
  return temp;
}
inline ::google::rpc::Status* AnnotateImageResponse::unsafe_arena_release_error() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.cloud.vision.v1.AnnotateImageResponse.error)
  
  ::google::rpc::Status* temp = error_;
  error_ = NULL;
  return temp;
}
inline ::google::rpc::Status* AnnotateImageResponse::mutable_error() {
  
  if (error_ == NULL) {
    _slow_mutable_error();
  }
  // @@protoc_insertion_point(field_mutable:google.cloud.vision.v1.AnnotateImageResponse.error)
  return error_;
}
inline void AnnotateImageResponse::set_allocated_error(::google::rpc::Status* error) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(error_);
  }
  if (error) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      error = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, error, submessage_arena);
    }
    
  } else {
    
  }
  error_ = error;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.vision.v1.AnnotateImageResponse.error)
}

// -------------------------------------------------------------------

// BatchAnnotateImagesRequest

// repeated .google.cloud.vision.v1.AnnotateImageRequest requests = 1;
inline int BatchAnnotateImagesRequest::requests_size() const {
  return requests_.size();
}
inline void BatchAnnotateImagesRequest::clear_requests() {
  requests_.Clear();
}
inline const ::google::cloud::vision::v1::AnnotateImageRequest& BatchAnnotateImagesRequest::requests(int index) const {
  // @@protoc_insertion_point(field_get:google.cloud.vision.v1.BatchAnnotateImagesRequest.requests)
  return requests_.Get(index);
}
inline ::google::cloud::vision::v1::AnnotateImageRequest* BatchAnnotateImagesRequest::mutable_requests(int index) {
  // @@protoc_insertion_point(field_mutable:google.cloud.vision.v1.BatchAnnotateImagesRequest.requests)
  return requests_.Mutable(index);
}
inline ::google::cloud::vision::v1::AnnotateImageRequest* BatchAnnotateImagesRequest::add_requests() {
  // @@protoc_insertion_point(field_add:google.cloud.vision.v1.BatchAnnotateImagesRequest.requests)
  return requests_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::google::cloud::vision::v1::AnnotateImageRequest >*
BatchAnnotateImagesRequest::mutable_requests() {
  // @@protoc_insertion_point(field_mutable_list:google.cloud.vision.v1.BatchAnnotateImagesRequest.requests)
  return &requests_;
}
inline const ::google::protobuf::RepeatedPtrField< ::google::cloud::vision::v1::AnnotateImageRequest >&
BatchAnnotateImagesRequest::requests() const {
  // @@protoc_insertion_point(field_list:google.cloud.vision.v1.BatchAnnotateImagesRequest.requests)
  return requests_;
}

// -------------------------------------------------------------------

// BatchAnnotateImagesResponse

// repeated .google.cloud.vision.v1.AnnotateImageResponse responses = 1;
inline int BatchAnnotateImagesResponse::responses_size() const {
  return responses_.size();
}
inline void BatchAnnotateImagesResponse::clear_responses() {
  responses_.Clear();
}
inline const ::google::cloud::vision::v1::AnnotateImageResponse& BatchAnnotateImagesResponse::responses(int index) const {
  // @@protoc_insertion_point(field_get:google.cloud.vision.v1.BatchAnnotateImagesResponse.responses)
  return responses_.Get(index);
}
inline ::google::cloud::vision::v1::AnnotateImageResponse* BatchAnnotateImagesResponse::mutable_responses(int index) {
  // @@protoc_insertion_point(field_mutable:google.cloud.vision.v1.BatchAnnotateImagesResponse.responses)
  return responses_.Mutable(index);
}
inline ::google::cloud::vision::v1::AnnotateImageResponse* BatchAnnotateImagesResponse::add_responses() {
  // @@protoc_insertion_point(field_add:google.cloud.vision.v1.BatchAnnotateImagesResponse.responses)
  return responses_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::google::cloud::vision::v1::AnnotateImageResponse >*
BatchAnnotateImagesResponse::mutable_responses() {
  // @@protoc_insertion_point(field_mutable_list:google.cloud.vision.v1.BatchAnnotateImagesResponse.responses)
  return &responses_;
}
inline const ::google::protobuf::RepeatedPtrField< ::google::cloud::vision::v1::AnnotateImageResponse >&
BatchAnnotateImagesResponse::responses() const {
  // @@protoc_insertion_point(field_list:google.cloud.vision.v1.BatchAnnotateImagesResponse.responses)
  return responses_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace vision
}  // namespace cloud
}  // namespace google

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::google::cloud::vision::v1::Feature_Type> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::google::cloud::vision::v1::Feature_Type>() {
  return ::google::cloud::vision::v1::Feature_Type_descriptor();
}
template <> struct is_proto_enum< ::google::cloud::vision::v1::FaceAnnotation_Landmark_Type> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::google::cloud::vision::v1::FaceAnnotation_Landmark_Type>() {
  return ::google::cloud::vision::v1::FaceAnnotation_Landmark_Type_descriptor();
}
template <> struct is_proto_enum< ::google::cloud::vision::v1::Likelihood> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::google::cloud::vision::v1::Likelihood>() {
  return ::google::cloud::vision::v1::Likelihood_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_google_2fcloud_2fvision_2fv1_2fimage_5fannotator_2eproto__INCLUDED
