// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/devtools/source/v1/source_context.proto

#ifndef PROTOBUF_google_2fdevtools_2fsource_2fv1_2fsource_5fcontext_2eproto__INCLUDED
#define PROTOBUF_google_2fdevtools_2fsource_2fv1_2fsource_5fcontext_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "google/api/annotations.pb.h"
// @@protoc_insertion_point(includes)

namespace protobuf_google_2fdevtools_2fsource_2fv1_2fsource_5fcontext_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[11];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsSourceContextImpl();
void InitDefaultsSourceContext();
void InitDefaultsExtendedSourceContext_LabelsEntry_DoNotUseImpl();
void InitDefaultsExtendedSourceContext_LabelsEntry_DoNotUse();
void InitDefaultsExtendedSourceContextImpl();
void InitDefaultsExtendedSourceContext();
void InitDefaultsAliasContextImpl();
void InitDefaultsAliasContext();
void InitDefaultsCloudRepoSourceContextImpl();
void InitDefaultsCloudRepoSourceContext();
void InitDefaultsCloudWorkspaceSourceContextImpl();
void InitDefaultsCloudWorkspaceSourceContext();
void InitDefaultsGerritSourceContextImpl();
void InitDefaultsGerritSourceContext();
void InitDefaultsGitSourceContextImpl();
void InitDefaultsGitSourceContext();
void InitDefaultsRepoIdImpl();
void InitDefaultsRepoId();
void InitDefaultsProjectRepoIdImpl();
void InitDefaultsProjectRepoId();
void InitDefaultsCloudWorkspaceIdImpl();
void InitDefaultsCloudWorkspaceId();
inline void InitDefaults() {
  InitDefaultsSourceContext();
  InitDefaultsExtendedSourceContext_LabelsEntry_DoNotUse();
  InitDefaultsExtendedSourceContext();
  InitDefaultsAliasContext();
  InitDefaultsCloudRepoSourceContext();
  InitDefaultsCloudWorkspaceSourceContext();
  InitDefaultsGerritSourceContext();
  InitDefaultsGitSourceContext();
  InitDefaultsRepoId();
  InitDefaultsProjectRepoId();
  InitDefaultsCloudWorkspaceId();
}
}  // namespace protobuf_google_2fdevtools_2fsource_2fv1_2fsource_5fcontext_2eproto
namespace google {
namespace devtools {
namespace source {
namespace v1 {
class AliasContext;
class AliasContextDefaultTypeInternal;
extern AliasContextDefaultTypeInternal _AliasContext_default_instance_;
class CloudRepoSourceContext;
class CloudRepoSourceContextDefaultTypeInternal;
extern CloudRepoSourceContextDefaultTypeInternal _CloudRepoSourceContext_default_instance_;
class CloudWorkspaceId;
class CloudWorkspaceIdDefaultTypeInternal;
extern CloudWorkspaceIdDefaultTypeInternal _CloudWorkspaceId_default_instance_;
class CloudWorkspaceSourceContext;
class CloudWorkspaceSourceContextDefaultTypeInternal;
extern CloudWorkspaceSourceContextDefaultTypeInternal _CloudWorkspaceSourceContext_default_instance_;
class ExtendedSourceContext;
class ExtendedSourceContextDefaultTypeInternal;
extern ExtendedSourceContextDefaultTypeInternal _ExtendedSourceContext_default_instance_;
class ExtendedSourceContext_LabelsEntry_DoNotUse;
class ExtendedSourceContext_LabelsEntry_DoNotUseDefaultTypeInternal;
extern ExtendedSourceContext_LabelsEntry_DoNotUseDefaultTypeInternal _ExtendedSourceContext_LabelsEntry_DoNotUse_default_instance_;
class GerritSourceContext;
class GerritSourceContextDefaultTypeInternal;
extern GerritSourceContextDefaultTypeInternal _GerritSourceContext_default_instance_;
class GitSourceContext;
class GitSourceContextDefaultTypeInternal;
extern GitSourceContextDefaultTypeInternal _GitSourceContext_default_instance_;
class ProjectRepoId;
class ProjectRepoIdDefaultTypeInternal;
extern ProjectRepoIdDefaultTypeInternal _ProjectRepoId_default_instance_;
class RepoId;
class RepoIdDefaultTypeInternal;
extern RepoIdDefaultTypeInternal _RepoId_default_instance_;
class SourceContext;
class SourceContextDefaultTypeInternal;
extern SourceContextDefaultTypeInternal _SourceContext_default_instance_;
}  // namespace v1
}  // namespace source
}  // namespace devtools
}  // namespace google
namespace google {
namespace devtools {
namespace source {
namespace v1 {

enum AliasContext_Kind {
  AliasContext_Kind_ANY = 0,
  AliasContext_Kind_FIXED = 1,
  AliasContext_Kind_MOVABLE = 2,
  AliasContext_Kind_OTHER = 4,
  AliasContext_Kind_AliasContext_Kind_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  AliasContext_Kind_AliasContext_Kind_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool AliasContext_Kind_IsValid(int value);
const AliasContext_Kind AliasContext_Kind_Kind_MIN = AliasContext_Kind_ANY;
const AliasContext_Kind AliasContext_Kind_Kind_MAX = AliasContext_Kind_OTHER;
const int AliasContext_Kind_Kind_ARRAYSIZE = AliasContext_Kind_Kind_MAX + 1;

const ::google::protobuf::EnumDescriptor* AliasContext_Kind_descriptor();
inline const ::std::string& AliasContext_Kind_Name(AliasContext_Kind value) {
  return ::google::protobuf::internal::NameOfEnum(
    AliasContext_Kind_descriptor(), value);
}
inline bool AliasContext_Kind_Parse(
    const ::std::string& name, AliasContext_Kind* value) {
  return ::google::protobuf::internal::ParseNamedEnum<AliasContext_Kind>(
    AliasContext_Kind_descriptor(), name, value);
}
// ===================================================================

class SourceContext : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.devtools.source.v1.SourceContext) */ {
 public:
  SourceContext();
  virtual ~SourceContext();

  SourceContext(const SourceContext& from);

  inline SourceContext& operator=(const SourceContext& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SourceContext(SourceContext&& from) noexcept
    : SourceContext() {
    *this = ::std::move(from);
  }

  inline SourceContext& operator=(SourceContext&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SourceContext& default_instance();

  enum ContextCase {
    kCloudRepo = 1,
    kCloudWorkspace = 2,
    kGerrit = 3,
    kGit = 6,
    CONTEXT_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SourceContext* internal_default_instance() {
    return reinterpret_cast<const SourceContext*>(
               &_SourceContext_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(SourceContext* other);
  friend void swap(SourceContext& a, SourceContext& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SourceContext* New() const PROTOBUF_FINAL { return New(NULL); }

  SourceContext* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SourceContext& from);
  void MergeFrom(const SourceContext& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SourceContext* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.devtools.source.v1.CloudRepoSourceContext cloud_repo = 1;
  bool has_cloud_repo() const;
  void clear_cloud_repo();
  static const int kCloudRepoFieldNumber = 1;
  const ::google::devtools::source::v1::CloudRepoSourceContext& cloud_repo() const;
  ::google::devtools::source::v1::CloudRepoSourceContext* release_cloud_repo();
  ::google::devtools::source::v1::CloudRepoSourceContext* mutable_cloud_repo();
  void set_allocated_cloud_repo(::google::devtools::source::v1::CloudRepoSourceContext* cloud_repo);

  // .google.devtools.source.v1.CloudWorkspaceSourceContext cloud_workspace = 2;
  bool has_cloud_workspace() const;
  void clear_cloud_workspace();
  static const int kCloudWorkspaceFieldNumber = 2;
  const ::google::devtools::source::v1::CloudWorkspaceSourceContext& cloud_workspace() const;
  ::google::devtools::source::v1::CloudWorkspaceSourceContext* release_cloud_workspace();
  ::google::devtools::source::v1::CloudWorkspaceSourceContext* mutable_cloud_workspace();
  void set_allocated_cloud_workspace(::google::devtools::source::v1::CloudWorkspaceSourceContext* cloud_workspace);

  // .google.devtools.source.v1.GerritSourceContext gerrit = 3;
  bool has_gerrit() const;
  void clear_gerrit();
  static const int kGerritFieldNumber = 3;
  const ::google::devtools::source::v1::GerritSourceContext& gerrit() const;
  ::google::devtools::source::v1::GerritSourceContext* release_gerrit();
  ::google::devtools::source::v1::GerritSourceContext* mutable_gerrit();
  void set_allocated_gerrit(::google::devtools::source::v1::GerritSourceContext* gerrit);

  // .google.devtools.source.v1.GitSourceContext git = 6;
  bool has_git() const;
  void clear_git();
  static const int kGitFieldNumber = 6;
  const ::google::devtools::source::v1::GitSourceContext& git() const;
  ::google::devtools::source::v1::GitSourceContext* release_git();
  ::google::devtools::source::v1::GitSourceContext* mutable_git();
  void set_allocated_git(::google::devtools::source::v1::GitSourceContext* git);

  ContextCase context_case() const;
  // @@protoc_insertion_point(class_scope:google.devtools.source.v1.SourceContext)
 private:
  void set_has_cloud_repo();
  void set_has_cloud_workspace();
  void set_has_gerrit();
  void set_has_git();

  inline bool has_context() const;
  void clear_context();
  inline void clear_has_context();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  union ContextUnion {
    ContextUnion() {}
    ::google::devtools::source::v1::CloudRepoSourceContext* cloud_repo_;
    ::google::devtools::source::v1::CloudWorkspaceSourceContext* cloud_workspace_;
    ::google::devtools::source::v1::GerritSourceContext* gerrit_;
    ::google::devtools::source::v1::GitSourceContext* git_;
  } context_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::protobuf_google_2fdevtools_2fsource_2fv1_2fsource_5fcontext_2eproto::TableStruct;
  friend void ::protobuf_google_2fdevtools_2fsource_2fv1_2fsource_5fcontext_2eproto::InitDefaultsSourceContextImpl();
};
// -------------------------------------------------------------------

class ExtendedSourceContext_LabelsEntry_DoNotUse : public ::google::protobuf::internal::MapEntry<ExtendedSourceContext_LabelsEntry_DoNotUse, 
    ::std::string, ::std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    0 > {
public:
  typedef ::google::protobuf::internal::MapEntry<ExtendedSourceContext_LabelsEntry_DoNotUse, 
    ::std::string, ::std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    0 > SuperType;
  ExtendedSourceContext_LabelsEntry_DoNotUse();
  ExtendedSourceContext_LabelsEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const ExtendedSourceContext_LabelsEntry_DoNotUse& other);
  static const ExtendedSourceContext_LabelsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const ExtendedSourceContext_LabelsEntry_DoNotUse*>(&_ExtendedSourceContext_LabelsEntry_DoNotUse_default_instance_); }
  void MergeFrom(const ::google::protobuf::Message& other) PROTOBUF_FINAL;
  ::google::protobuf::Metadata GetMetadata() const;
};

// -------------------------------------------------------------------

class ExtendedSourceContext : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.devtools.source.v1.ExtendedSourceContext) */ {
 public:
  ExtendedSourceContext();
  virtual ~ExtendedSourceContext();

  ExtendedSourceContext(const ExtendedSourceContext& from);

  inline ExtendedSourceContext& operator=(const ExtendedSourceContext& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ExtendedSourceContext(ExtendedSourceContext&& from) noexcept
    : ExtendedSourceContext() {
    *this = ::std::move(from);
  }

  inline ExtendedSourceContext& operator=(ExtendedSourceContext&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ExtendedSourceContext& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ExtendedSourceContext* internal_default_instance() {
    return reinterpret_cast<const ExtendedSourceContext*>(
               &_ExtendedSourceContext_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(ExtendedSourceContext* other);
  friend void swap(ExtendedSourceContext& a, ExtendedSourceContext& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ExtendedSourceContext* New() const PROTOBUF_FINAL { return New(NULL); }

  ExtendedSourceContext* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ExtendedSourceContext& from);
  void MergeFrom(const ExtendedSourceContext& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ExtendedSourceContext* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // map<string, string> labels = 2;
  int labels_size() const;
  void clear_labels();
  static const int kLabelsFieldNumber = 2;
  const ::google::protobuf::Map< ::std::string, ::std::string >&
      labels() const;
  ::google::protobuf::Map< ::std::string, ::std::string >*
      mutable_labels();

  // .google.devtools.source.v1.SourceContext context = 1;
  bool has_context() const;
  void clear_context();
  static const int kContextFieldNumber = 1;
  const ::google::devtools::source::v1::SourceContext& context() const;
  ::google::devtools::source::v1::SourceContext* release_context();
  ::google::devtools::source::v1::SourceContext* mutable_context();
  void set_allocated_context(::google::devtools::source::v1::SourceContext* context);

  // @@protoc_insertion_point(class_scope:google.devtools.source.v1.ExtendedSourceContext)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::MapField<
      ExtendedSourceContext_LabelsEntry_DoNotUse,
      ::std::string, ::std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      0 > labels_;
  ::google::devtools::source::v1::SourceContext* context_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fdevtools_2fsource_2fv1_2fsource_5fcontext_2eproto::TableStruct;
  friend void ::protobuf_google_2fdevtools_2fsource_2fv1_2fsource_5fcontext_2eproto::InitDefaultsExtendedSourceContextImpl();
};
// -------------------------------------------------------------------

class AliasContext : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.devtools.source.v1.AliasContext) */ {
 public:
  AliasContext();
  virtual ~AliasContext();

  AliasContext(const AliasContext& from);

  inline AliasContext& operator=(const AliasContext& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AliasContext(AliasContext&& from) noexcept
    : AliasContext() {
    *this = ::std::move(from);
  }

  inline AliasContext& operator=(AliasContext&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const AliasContext& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AliasContext* internal_default_instance() {
    return reinterpret_cast<const AliasContext*>(
               &_AliasContext_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(AliasContext* other);
  friend void swap(AliasContext& a, AliasContext& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AliasContext* New() const PROTOBUF_FINAL { return New(NULL); }

  AliasContext* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const AliasContext& from);
  void MergeFrom(const AliasContext& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(AliasContext* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef AliasContext_Kind Kind;
  static const Kind ANY =
    AliasContext_Kind_ANY;
  static const Kind FIXED =
    AliasContext_Kind_FIXED;
  static const Kind MOVABLE =
    AliasContext_Kind_MOVABLE;
  static const Kind OTHER =
    AliasContext_Kind_OTHER;
  static inline bool Kind_IsValid(int value) {
    return AliasContext_Kind_IsValid(value);
  }
  static const Kind Kind_MIN =
    AliasContext_Kind_Kind_MIN;
  static const Kind Kind_MAX =
    AliasContext_Kind_Kind_MAX;
  static const int Kind_ARRAYSIZE =
    AliasContext_Kind_Kind_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Kind_descriptor() {
    return AliasContext_Kind_descriptor();
  }
  static inline const ::std::string& Kind_Name(Kind value) {
    return AliasContext_Kind_Name(value);
  }
  static inline bool Kind_Parse(const ::std::string& name,
      Kind* value) {
    return AliasContext_Kind_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // string name = 2;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // .google.devtools.source.v1.AliasContext.Kind kind = 1;
  void clear_kind();
  static const int kKindFieldNumber = 1;
  ::google::devtools::source::v1::AliasContext_Kind kind() const;
  void set_kind(::google::devtools::source::v1::AliasContext_Kind value);

  // @@protoc_insertion_point(class_scope:google.devtools.source.v1.AliasContext)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  int kind_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fdevtools_2fsource_2fv1_2fsource_5fcontext_2eproto::TableStruct;
  friend void ::protobuf_google_2fdevtools_2fsource_2fv1_2fsource_5fcontext_2eproto::InitDefaultsAliasContextImpl();
};
// -------------------------------------------------------------------

class CloudRepoSourceContext : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.devtools.source.v1.CloudRepoSourceContext) */ {
 public:
  CloudRepoSourceContext();
  virtual ~CloudRepoSourceContext();

  CloudRepoSourceContext(const CloudRepoSourceContext& from);

  inline CloudRepoSourceContext& operator=(const CloudRepoSourceContext& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CloudRepoSourceContext(CloudRepoSourceContext&& from) noexcept
    : CloudRepoSourceContext() {
    *this = ::std::move(from);
  }

  inline CloudRepoSourceContext& operator=(CloudRepoSourceContext&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CloudRepoSourceContext& default_instance();

  enum RevisionCase {
    kRevisionId = 2,
    kAliasName = 3,
    kAliasContext = 4,
    REVISION_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CloudRepoSourceContext* internal_default_instance() {
    return reinterpret_cast<const CloudRepoSourceContext*>(
               &_CloudRepoSourceContext_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(CloudRepoSourceContext* other);
  friend void swap(CloudRepoSourceContext& a, CloudRepoSourceContext& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CloudRepoSourceContext* New() const PROTOBUF_FINAL { return New(NULL); }

  CloudRepoSourceContext* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CloudRepoSourceContext& from);
  void MergeFrom(const CloudRepoSourceContext& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CloudRepoSourceContext* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.devtools.source.v1.RepoId repo_id = 1;
  bool has_repo_id() const;
  void clear_repo_id();
  static const int kRepoIdFieldNumber = 1;
  const ::google::devtools::source::v1::RepoId& repo_id() const;
  ::google::devtools::source::v1::RepoId* release_repo_id();
  ::google::devtools::source::v1::RepoId* mutable_repo_id();
  void set_allocated_repo_id(::google::devtools::source::v1::RepoId* repo_id);

  // string revision_id = 2;
  private:
  bool has_revision_id() const;
  public:
  void clear_revision_id();
  static const int kRevisionIdFieldNumber = 2;
  const ::std::string& revision_id() const;
  void set_revision_id(const ::std::string& value);
  #if LANG_CXX11
  void set_revision_id(::std::string&& value);
  #endif
  void set_revision_id(const char* value);
  void set_revision_id(const char* value, size_t size);
  ::std::string* mutable_revision_id();
  ::std::string* release_revision_id();
  void set_allocated_revision_id(::std::string* revision_id);

  // string alias_name = 3;
  private:
  bool has_alias_name() const;
  public:
  void clear_alias_name();
  static const int kAliasNameFieldNumber = 3;
  const ::std::string& alias_name() const;
  void set_alias_name(const ::std::string& value);
  #if LANG_CXX11
  void set_alias_name(::std::string&& value);
  #endif
  void set_alias_name(const char* value);
  void set_alias_name(const char* value, size_t size);
  ::std::string* mutable_alias_name();
  ::std::string* release_alias_name();
  void set_allocated_alias_name(::std::string* alias_name);

  // .google.devtools.source.v1.AliasContext alias_context = 4;
  bool has_alias_context() const;
  void clear_alias_context();
  static const int kAliasContextFieldNumber = 4;
  const ::google::devtools::source::v1::AliasContext& alias_context() const;
  ::google::devtools::source::v1::AliasContext* release_alias_context();
  ::google::devtools::source::v1::AliasContext* mutable_alias_context();
  void set_allocated_alias_context(::google::devtools::source::v1::AliasContext* alias_context);

  RevisionCase revision_case() const;
  // @@protoc_insertion_point(class_scope:google.devtools.source.v1.CloudRepoSourceContext)
 private:
  void set_has_revision_id();
  void set_has_alias_name();
  void set_has_alias_context();

  inline bool has_revision() const;
  void clear_revision();
  inline void clear_has_revision();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::devtools::source::v1::RepoId* repo_id_;
  union RevisionUnion {
    RevisionUnion() {}
    ::google::protobuf::internal::ArenaStringPtr revision_id_;
    ::google::protobuf::internal::ArenaStringPtr alias_name_;
    ::google::devtools::source::v1::AliasContext* alias_context_;
  } revision_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::protobuf_google_2fdevtools_2fsource_2fv1_2fsource_5fcontext_2eproto::TableStruct;
  friend void ::protobuf_google_2fdevtools_2fsource_2fv1_2fsource_5fcontext_2eproto::InitDefaultsCloudRepoSourceContextImpl();
};
// -------------------------------------------------------------------

class CloudWorkspaceSourceContext : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.devtools.source.v1.CloudWorkspaceSourceContext) */ {
 public:
  CloudWorkspaceSourceContext();
  virtual ~CloudWorkspaceSourceContext();

  CloudWorkspaceSourceContext(const CloudWorkspaceSourceContext& from);

  inline CloudWorkspaceSourceContext& operator=(const CloudWorkspaceSourceContext& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CloudWorkspaceSourceContext(CloudWorkspaceSourceContext&& from) noexcept
    : CloudWorkspaceSourceContext() {
    *this = ::std::move(from);
  }

  inline CloudWorkspaceSourceContext& operator=(CloudWorkspaceSourceContext&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CloudWorkspaceSourceContext& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CloudWorkspaceSourceContext* internal_default_instance() {
    return reinterpret_cast<const CloudWorkspaceSourceContext*>(
               &_CloudWorkspaceSourceContext_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    5;

  void Swap(CloudWorkspaceSourceContext* other);
  friend void swap(CloudWorkspaceSourceContext& a, CloudWorkspaceSourceContext& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CloudWorkspaceSourceContext* New() const PROTOBUF_FINAL { return New(NULL); }

  CloudWorkspaceSourceContext* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CloudWorkspaceSourceContext& from);
  void MergeFrom(const CloudWorkspaceSourceContext& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CloudWorkspaceSourceContext* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string snapshot_id = 2;
  void clear_snapshot_id();
  static const int kSnapshotIdFieldNumber = 2;
  const ::std::string& snapshot_id() const;
  void set_snapshot_id(const ::std::string& value);
  #if LANG_CXX11
  void set_snapshot_id(::std::string&& value);
  #endif
  void set_snapshot_id(const char* value);
  void set_snapshot_id(const char* value, size_t size);
  ::std::string* mutable_snapshot_id();
  ::std::string* release_snapshot_id();
  void set_allocated_snapshot_id(::std::string* snapshot_id);

  // .google.devtools.source.v1.CloudWorkspaceId workspace_id = 1;
  bool has_workspace_id() const;
  void clear_workspace_id();
  static const int kWorkspaceIdFieldNumber = 1;
  const ::google::devtools::source::v1::CloudWorkspaceId& workspace_id() const;
  ::google::devtools::source::v1::CloudWorkspaceId* release_workspace_id();
  ::google::devtools::source::v1::CloudWorkspaceId* mutable_workspace_id();
  void set_allocated_workspace_id(::google::devtools::source::v1::CloudWorkspaceId* workspace_id);

  // @@protoc_insertion_point(class_scope:google.devtools.source.v1.CloudWorkspaceSourceContext)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr snapshot_id_;
  ::google::devtools::source::v1::CloudWorkspaceId* workspace_id_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fdevtools_2fsource_2fv1_2fsource_5fcontext_2eproto::TableStruct;
  friend void ::protobuf_google_2fdevtools_2fsource_2fv1_2fsource_5fcontext_2eproto::InitDefaultsCloudWorkspaceSourceContextImpl();
};
// -------------------------------------------------------------------

class GerritSourceContext : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.devtools.source.v1.GerritSourceContext) */ {
 public:
  GerritSourceContext();
  virtual ~GerritSourceContext();

  GerritSourceContext(const GerritSourceContext& from);

  inline GerritSourceContext& operator=(const GerritSourceContext& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GerritSourceContext(GerritSourceContext&& from) noexcept
    : GerritSourceContext() {
    *this = ::std::move(from);
  }

  inline GerritSourceContext& operator=(GerritSourceContext&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GerritSourceContext& default_instance();

  enum RevisionCase {
    kRevisionId = 3,
    kAliasName = 4,
    kAliasContext = 5,
    REVISION_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GerritSourceContext* internal_default_instance() {
    return reinterpret_cast<const GerritSourceContext*>(
               &_GerritSourceContext_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    6;

  void Swap(GerritSourceContext* other);
  friend void swap(GerritSourceContext& a, GerritSourceContext& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GerritSourceContext* New() const PROTOBUF_FINAL { return New(NULL); }

  GerritSourceContext* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GerritSourceContext& from);
  void MergeFrom(const GerritSourceContext& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GerritSourceContext* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string host_uri = 1;
  void clear_host_uri();
  static const int kHostUriFieldNumber = 1;
  const ::std::string& host_uri() const;
  void set_host_uri(const ::std::string& value);
  #if LANG_CXX11
  void set_host_uri(::std::string&& value);
  #endif
  void set_host_uri(const char* value);
  void set_host_uri(const char* value, size_t size);
  ::std::string* mutable_host_uri();
  ::std::string* release_host_uri();
  void set_allocated_host_uri(::std::string* host_uri);

  // string gerrit_project = 2;
  void clear_gerrit_project();
  static const int kGerritProjectFieldNumber = 2;
  const ::std::string& gerrit_project() const;
  void set_gerrit_project(const ::std::string& value);
  #if LANG_CXX11
  void set_gerrit_project(::std::string&& value);
  #endif
  void set_gerrit_project(const char* value);
  void set_gerrit_project(const char* value, size_t size);
  ::std::string* mutable_gerrit_project();
  ::std::string* release_gerrit_project();
  void set_allocated_gerrit_project(::std::string* gerrit_project);

  // string revision_id = 3;
  private:
  bool has_revision_id() const;
  public:
  void clear_revision_id();
  static const int kRevisionIdFieldNumber = 3;
  const ::std::string& revision_id() const;
  void set_revision_id(const ::std::string& value);
  #if LANG_CXX11
  void set_revision_id(::std::string&& value);
  #endif
  void set_revision_id(const char* value);
  void set_revision_id(const char* value, size_t size);
  ::std::string* mutable_revision_id();
  ::std::string* release_revision_id();
  void set_allocated_revision_id(::std::string* revision_id);

  // string alias_name = 4;
  private:
  bool has_alias_name() const;
  public:
  void clear_alias_name();
  static const int kAliasNameFieldNumber = 4;
  const ::std::string& alias_name() const;
  void set_alias_name(const ::std::string& value);
  #if LANG_CXX11
  void set_alias_name(::std::string&& value);
  #endif
  void set_alias_name(const char* value);
  void set_alias_name(const char* value, size_t size);
  ::std::string* mutable_alias_name();
  ::std::string* release_alias_name();
  void set_allocated_alias_name(::std::string* alias_name);

  // .google.devtools.source.v1.AliasContext alias_context = 5;
  bool has_alias_context() const;
  void clear_alias_context();
  static const int kAliasContextFieldNumber = 5;
  const ::google::devtools::source::v1::AliasContext& alias_context() const;
  ::google::devtools::source::v1::AliasContext* release_alias_context();
  ::google::devtools::source::v1::AliasContext* mutable_alias_context();
  void set_allocated_alias_context(::google::devtools::source::v1::AliasContext* alias_context);

  RevisionCase revision_case() const;
  // @@protoc_insertion_point(class_scope:google.devtools.source.v1.GerritSourceContext)
 private:
  void set_has_revision_id();
  void set_has_alias_name();
  void set_has_alias_context();

  inline bool has_revision() const;
  void clear_revision();
  inline void clear_has_revision();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr host_uri_;
  ::google::protobuf::internal::ArenaStringPtr gerrit_project_;
  union RevisionUnion {
    RevisionUnion() {}
    ::google::protobuf::internal::ArenaStringPtr revision_id_;
    ::google::protobuf::internal::ArenaStringPtr alias_name_;
    ::google::devtools::source::v1::AliasContext* alias_context_;
  } revision_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::protobuf_google_2fdevtools_2fsource_2fv1_2fsource_5fcontext_2eproto::TableStruct;
  friend void ::protobuf_google_2fdevtools_2fsource_2fv1_2fsource_5fcontext_2eproto::InitDefaultsGerritSourceContextImpl();
};
// -------------------------------------------------------------------

class GitSourceContext : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.devtools.source.v1.GitSourceContext) */ {
 public:
  GitSourceContext();
  virtual ~GitSourceContext();

  GitSourceContext(const GitSourceContext& from);

  inline GitSourceContext& operator=(const GitSourceContext& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GitSourceContext(GitSourceContext&& from) noexcept
    : GitSourceContext() {
    *this = ::std::move(from);
  }

  inline GitSourceContext& operator=(GitSourceContext&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GitSourceContext& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GitSourceContext* internal_default_instance() {
    return reinterpret_cast<const GitSourceContext*>(
               &_GitSourceContext_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    7;

  void Swap(GitSourceContext* other);
  friend void swap(GitSourceContext& a, GitSourceContext& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GitSourceContext* New() const PROTOBUF_FINAL { return New(NULL); }

  GitSourceContext* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GitSourceContext& from);
  void MergeFrom(const GitSourceContext& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GitSourceContext* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string url = 1;
  void clear_url();
  static const int kUrlFieldNumber = 1;
  const ::std::string& url() const;
  void set_url(const ::std::string& value);
  #if LANG_CXX11
  void set_url(::std::string&& value);
  #endif
  void set_url(const char* value);
  void set_url(const char* value, size_t size);
  ::std::string* mutable_url();
  ::std::string* release_url();
  void set_allocated_url(::std::string* url);

  // string revision_id = 2;
  void clear_revision_id();
  static const int kRevisionIdFieldNumber = 2;
  const ::std::string& revision_id() const;
  void set_revision_id(const ::std::string& value);
  #if LANG_CXX11
  void set_revision_id(::std::string&& value);
  #endif
  void set_revision_id(const char* value);
  void set_revision_id(const char* value, size_t size);
  ::std::string* mutable_revision_id();
  ::std::string* release_revision_id();
  void set_allocated_revision_id(::std::string* revision_id);

  // @@protoc_insertion_point(class_scope:google.devtools.source.v1.GitSourceContext)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr url_;
  ::google::protobuf::internal::ArenaStringPtr revision_id_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fdevtools_2fsource_2fv1_2fsource_5fcontext_2eproto::TableStruct;
  friend void ::protobuf_google_2fdevtools_2fsource_2fv1_2fsource_5fcontext_2eproto::InitDefaultsGitSourceContextImpl();
};
// -------------------------------------------------------------------

class RepoId : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.devtools.source.v1.RepoId) */ {
 public:
  RepoId();
  virtual ~RepoId();

  RepoId(const RepoId& from);

  inline RepoId& operator=(const RepoId& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RepoId(RepoId&& from) noexcept
    : RepoId() {
    *this = ::std::move(from);
  }

  inline RepoId& operator=(RepoId&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RepoId& default_instance();

  enum IdCase {
    kProjectRepoId = 1,
    kUid = 2,
    ID_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RepoId* internal_default_instance() {
    return reinterpret_cast<const RepoId*>(
               &_RepoId_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    8;

  void Swap(RepoId* other);
  friend void swap(RepoId& a, RepoId& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RepoId* New() const PROTOBUF_FINAL { return New(NULL); }

  RepoId* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const RepoId& from);
  void MergeFrom(const RepoId& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(RepoId* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.devtools.source.v1.ProjectRepoId project_repo_id = 1;
  bool has_project_repo_id() const;
  void clear_project_repo_id();
  static const int kProjectRepoIdFieldNumber = 1;
  const ::google::devtools::source::v1::ProjectRepoId& project_repo_id() const;
  ::google::devtools::source::v1::ProjectRepoId* release_project_repo_id();
  ::google::devtools::source::v1::ProjectRepoId* mutable_project_repo_id();
  void set_allocated_project_repo_id(::google::devtools::source::v1::ProjectRepoId* project_repo_id);

  // string uid = 2;
  private:
  bool has_uid() const;
  public:
  void clear_uid();
  static const int kUidFieldNumber = 2;
  const ::std::string& uid() const;
  void set_uid(const ::std::string& value);
  #if LANG_CXX11
  void set_uid(::std::string&& value);
  #endif
  void set_uid(const char* value);
  void set_uid(const char* value, size_t size);
  ::std::string* mutable_uid();
  ::std::string* release_uid();
  void set_allocated_uid(::std::string* uid);

  IdCase id_case() const;
  // @@protoc_insertion_point(class_scope:google.devtools.source.v1.RepoId)
 private:
  void set_has_project_repo_id();
  void set_has_uid();

  inline bool has_id() const;
  void clear_id();
  inline void clear_has_id();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  union IdUnion {
    IdUnion() {}
    ::google::devtools::source::v1::ProjectRepoId* project_repo_id_;
    ::google::protobuf::internal::ArenaStringPtr uid_;
  } id_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::protobuf_google_2fdevtools_2fsource_2fv1_2fsource_5fcontext_2eproto::TableStruct;
  friend void ::protobuf_google_2fdevtools_2fsource_2fv1_2fsource_5fcontext_2eproto::InitDefaultsRepoIdImpl();
};
// -------------------------------------------------------------------

class ProjectRepoId : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.devtools.source.v1.ProjectRepoId) */ {
 public:
  ProjectRepoId();
  virtual ~ProjectRepoId();

  ProjectRepoId(const ProjectRepoId& from);

  inline ProjectRepoId& operator=(const ProjectRepoId& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ProjectRepoId(ProjectRepoId&& from) noexcept
    : ProjectRepoId() {
    *this = ::std::move(from);
  }

  inline ProjectRepoId& operator=(ProjectRepoId&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ProjectRepoId& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ProjectRepoId* internal_default_instance() {
    return reinterpret_cast<const ProjectRepoId*>(
               &_ProjectRepoId_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    9;

  void Swap(ProjectRepoId* other);
  friend void swap(ProjectRepoId& a, ProjectRepoId& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ProjectRepoId* New() const PROTOBUF_FINAL { return New(NULL); }

  ProjectRepoId* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ProjectRepoId& from);
  void MergeFrom(const ProjectRepoId& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ProjectRepoId* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string project_id = 1;
  void clear_project_id();
  static const int kProjectIdFieldNumber = 1;
  const ::std::string& project_id() const;
  void set_project_id(const ::std::string& value);
  #if LANG_CXX11
  void set_project_id(::std::string&& value);
  #endif
  void set_project_id(const char* value);
  void set_project_id(const char* value, size_t size);
  ::std::string* mutable_project_id();
  ::std::string* release_project_id();
  void set_allocated_project_id(::std::string* project_id);

  // string repo_name = 2;
  void clear_repo_name();
  static const int kRepoNameFieldNumber = 2;
  const ::std::string& repo_name() const;
  void set_repo_name(const ::std::string& value);
  #if LANG_CXX11
  void set_repo_name(::std::string&& value);
  #endif
  void set_repo_name(const char* value);
  void set_repo_name(const char* value, size_t size);
  ::std::string* mutable_repo_name();
  ::std::string* release_repo_name();
  void set_allocated_repo_name(::std::string* repo_name);

  // @@protoc_insertion_point(class_scope:google.devtools.source.v1.ProjectRepoId)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr project_id_;
  ::google::protobuf::internal::ArenaStringPtr repo_name_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fdevtools_2fsource_2fv1_2fsource_5fcontext_2eproto::TableStruct;
  friend void ::protobuf_google_2fdevtools_2fsource_2fv1_2fsource_5fcontext_2eproto::InitDefaultsProjectRepoIdImpl();
};
// -------------------------------------------------------------------

class CloudWorkspaceId : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.devtools.source.v1.CloudWorkspaceId) */ {
 public:
  CloudWorkspaceId();
  virtual ~CloudWorkspaceId();

  CloudWorkspaceId(const CloudWorkspaceId& from);

  inline CloudWorkspaceId& operator=(const CloudWorkspaceId& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CloudWorkspaceId(CloudWorkspaceId&& from) noexcept
    : CloudWorkspaceId() {
    *this = ::std::move(from);
  }

  inline CloudWorkspaceId& operator=(CloudWorkspaceId&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CloudWorkspaceId& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CloudWorkspaceId* internal_default_instance() {
    return reinterpret_cast<const CloudWorkspaceId*>(
               &_CloudWorkspaceId_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    10;

  void Swap(CloudWorkspaceId* other);
  friend void swap(CloudWorkspaceId& a, CloudWorkspaceId& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CloudWorkspaceId* New() const PROTOBUF_FINAL { return New(NULL); }

  CloudWorkspaceId* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CloudWorkspaceId& from);
  void MergeFrom(const CloudWorkspaceId& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CloudWorkspaceId* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 2;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // .google.devtools.source.v1.RepoId repo_id = 1;
  bool has_repo_id() const;
  void clear_repo_id();
  static const int kRepoIdFieldNumber = 1;
  const ::google::devtools::source::v1::RepoId& repo_id() const;
  ::google::devtools::source::v1::RepoId* release_repo_id();
  ::google::devtools::source::v1::RepoId* mutable_repo_id();
  void set_allocated_repo_id(::google::devtools::source::v1::RepoId* repo_id);

  // @@protoc_insertion_point(class_scope:google.devtools.source.v1.CloudWorkspaceId)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::devtools::source::v1::RepoId* repo_id_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fdevtools_2fsource_2fv1_2fsource_5fcontext_2eproto::TableStruct;
  friend void ::protobuf_google_2fdevtools_2fsource_2fv1_2fsource_5fcontext_2eproto::InitDefaultsCloudWorkspaceIdImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SourceContext

// .google.devtools.source.v1.CloudRepoSourceContext cloud_repo = 1;
inline bool SourceContext::has_cloud_repo() const {
  return context_case() == kCloudRepo;
}
inline void SourceContext::set_has_cloud_repo() {
  _oneof_case_[0] = kCloudRepo;
}
inline void SourceContext::clear_cloud_repo() {
  if (has_cloud_repo()) {
    delete context_.cloud_repo_;
    clear_has_context();
  }
}
inline ::google::devtools::source::v1::CloudRepoSourceContext* SourceContext::release_cloud_repo() {
  // @@protoc_insertion_point(field_release:google.devtools.source.v1.SourceContext.cloud_repo)
  if (has_cloud_repo()) {
    clear_has_context();
      ::google::devtools::source::v1::CloudRepoSourceContext* temp = context_.cloud_repo_;
    context_.cloud_repo_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::devtools::source::v1::CloudRepoSourceContext& SourceContext::cloud_repo() const {
  // @@protoc_insertion_point(field_get:google.devtools.source.v1.SourceContext.cloud_repo)
  return has_cloud_repo()
      ? *context_.cloud_repo_
      : *reinterpret_cast< ::google::devtools::source::v1::CloudRepoSourceContext*>(&::google::devtools::source::v1::_CloudRepoSourceContext_default_instance_);
}
inline ::google::devtools::source::v1::CloudRepoSourceContext* SourceContext::mutable_cloud_repo() {
  if (!has_cloud_repo()) {
    clear_context();
    set_has_cloud_repo();
    context_.cloud_repo_ = new ::google::devtools::source::v1::CloudRepoSourceContext;
  }
  // @@protoc_insertion_point(field_mutable:google.devtools.source.v1.SourceContext.cloud_repo)
  return context_.cloud_repo_;
}

// .google.devtools.source.v1.CloudWorkspaceSourceContext cloud_workspace = 2;
inline bool SourceContext::has_cloud_workspace() const {
  return context_case() == kCloudWorkspace;
}
inline void SourceContext::set_has_cloud_workspace() {
  _oneof_case_[0] = kCloudWorkspace;
}
inline void SourceContext::clear_cloud_workspace() {
  if (has_cloud_workspace()) {
    delete context_.cloud_workspace_;
    clear_has_context();
  }
}
inline ::google::devtools::source::v1::CloudWorkspaceSourceContext* SourceContext::release_cloud_workspace() {
  // @@protoc_insertion_point(field_release:google.devtools.source.v1.SourceContext.cloud_workspace)
  if (has_cloud_workspace()) {
    clear_has_context();
      ::google::devtools::source::v1::CloudWorkspaceSourceContext* temp = context_.cloud_workspace_;
    context_.cloud_workspace_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::devtools::source::v1::CloudWorkspaceSourceContext& SourceContext::cloud_workspace() const {
  // @@protoc_insertion_point(field_get:google.devtools.source.v1.SourceContext.cloud_workspace)
  return has_cloud_workspace()
      ? *context_.cloud_workspace_
      : *reinterpret_cast< ::google::devtools::source::v1::CloudWorkspaceSourceContext*>(&::google::devtools::source::v1::_CloudWorkspaceSourceContext_default_instance_);
}
inline ::google::devtools::source::v1::CloudWorkspaceSourceContext* SourceContext::mutable_cloud_workspace() {
  if (!has_cloud_workspace()) {
    clear_context();
    set_has_cloud_workspace();
    context_.cloud_workspace_ = new ::google::devtools::source::v1::CloudWorkspaceSourceContext;
  }
  // @@protoc_insertion_point(field_mutable:google.devtools.source.v1.SourceContext.cloud_workspace)
  return context_.cloud_workspace_;
}

// .google.devtools.source.v1.GerritSourceContext gerrit = 3;
inline bool SourceContext::has_gerrit() const {
  return context_case() == kGerrit;
}
inline void SourceContext::set_has_gerrit() {
  _oneof_case_[0] = kGerrit;
}
inline void SourceContext::clear_gerrit() {
  if (has_gerrit()) {
    delete context_.gerrit_;
    clear_has_context();
  }
}
inline ::google::devtools::source::v1::GerritSourceContext* SourceContext::release_gerrit() {
  // @@protoc_insertion_point(field_release:google.devtools.source.v1.SourceContext.gerrit)
  if (has_gerrit()) {
    clear_has_context();
      ::google::devtools::source::v1::GerritSourceContext* temp = context_.gerrit_;
    context_.gerrit_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::devtools::source::v1::GerritSourceContext& SourceContext::gerrit() const {
  // @@protoc_insertion_point(field_get:google.devtools.source.v1.SourceContext.gerrit)
  return has_gerrit()
      ? *context_.gerrit_
      : *reinterpret_cast< ::google::devtools::source::v1::GerritSourceContext*>(&::google::devtools::source::v1::_GerritSourceContext_default_instance_);
}
inline ::google::devtools::source::v1::GerritSourceContext* SourceContext::mutable_gerrit() {
  if (!has_gerrit()) {
    clear_context();
    set_has_gerrit();
    context_.gerrit_ = new ::google::devtools::source::v1::GerritSourceContext;
  }
  // @@protoc_insertion_point(field_mutable:google.devtools.source.v1.SourceContext.gerrit)
  return context_.gerrit_;
}

// .google.devtools.source.v1.GitSourceContext git = 6;
inline bool SourceContext::has_git() const {
  return context_case() == kGit;
}
inline void SourceContext::set_has_git() {
  _oneof_case_[0] = kGit;
}
inline void SourceContext::clear_git() {
  if (has_git()) {
    delete context_.git_;
    clear_has_context();
  }
}
inline ::google::devtools::source::v1::GitSourceContext* SourceContext::release_git() {
  // @@protoc_insertion_point(field_release:google.devtools.source.v1.SourceContext.git)
  if (has_git()) {
    clear_has_context();
      ::google::devtools::source::v1::GitSourceContext* temp = context_.git_;
    context_.git_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::devtools::source::v1::GitSourceContext& SourceContext::git() const {
  // @@protoc_insertion_point(field_get:google.devtools.source.v1.SourceContext.git)
  return has_git()
      ? *context_.git_
      : *reinterpret_cast< ::google::devtools::source::v1::GitSourceContext*>(&::google::devtools::source::v1::_GitSourceContext_default_instance_);
}
inline ::google::devtools::source::v1::GitSourceContext* SourceContext::mutable_git() {
  if (!has_git()) {
    clear_context();
    set_has_git();
    context_.git_ = new ::google::devtools::source::v1::GitSourceContext;
  }
  // @@protoc_insertion_point(field_mutable:google.devtools.source.v1.SourceContext.git)
  return context_.git_;
}

inline bool SourceContext::has_context() const {
  return context_case() != CONTEXT_NOT_SET;
}
inline void SourceContext::clear_has_context() {
  _oneof_case_[0] = CONTEXT_NOT_SET;
}
inline SourceContext::ContextCase SourceContext::context_case() const {
  return SourceContext::ContextCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// ExtendedSourceContext

// .google.devtools.source.v1.SourceContext context = 1;
inline bool ExtendedSourceContext::has_context() const {
  return this != internal_default_instance() && context_ != NULL;
}
inline void ExtendedSourceContext::clear_context() {
  if (GetArenaNoVirtual() == NULL && context_ != NULL) {
    delete context_;
  }
  context_ = NULL;
}
inline const ::google::devtools::source::v1::SourceContext& ExtendedSourceContext::context() const {
  const ::google::devtools::source::v1::SourceContext* p = context_;
  // @@protoc_insertion_point(field_get:google.devtools.source.v1.ExtendedSourceContext.context)
  return p != NULL ? *p : *reinterpret_cast<const ::google::devtools::source::v1::SourceContext*>(
      &::google::devtools::source::v1::_SourceContext_default_instance_);
}
inline ::google::devtools::source::v1::SourceContext* ExtendedSourceContext::release_context() {
  // @@protoc_insertion_point(field_release:google.devtools.source.v1.ExtendedSourceContext.context)
  
  ::google::devtools::source::v1::SourceContext* temp = context_;
  context_ = NULL;
  return temp;
}
inline ::google::devtools::source::v1::SourceContext* ExtendedSourceContext::mutable_context() {
  
  if (context_ == NULL) {
    context_ = new ::google::devtools::source::v1::SourceContext;
  }
  // @@protoc_insertion_point(field_mutable:google.devtools.source.v1.ExtendedSourceContext.context)
  return context_;
}
inline void ExtendedSourceContext::set_allocated_context(::google::devtools::source::v1::SourceContext* context) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete context_;
  }
  if (context) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      context = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, context, submessage_arena);
    }
    
  } else {
    
  }
  context_ = context;
  // @@protoc_insertion_point(field_set_allocated:google.devtools.source.v1.ExtendedSourceContext.context)
}

// map<string, string> labels = 2;
inline int ExtendedSourceContext::labels_size() const {
  return labels_.size();
}
inline void ExtendedSourceContext::clear_labels() {
  labels_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::std::string >&
ExtendedSourceContext::labels() const {
  // @@protoc_insertion_point(field_map:google.devtools.source.v1.ExtendedSourceContext.labels)
  return labels_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::std::string >*
ExtendedSourceContext::mutable_labels() {
  // @@protoc_insertion_point(field_mutable_map:google.devtools.source.v1.ExtendedSourceContext.labels)
  return labels_.MutableMap();
}

// -------------------------------------------------------------------

// AliasContext

// .google.devtools.source.v1.AliasContext.Kind kind = 1;
inline void AliasContext::clear_kind() {
  kind_ = 0;
}
inline ::google::devtools::source::v1::AliasContext_Kind AliasContext::kind() const {
  // @@protoc_insertion_point(field_get:google.devtools.source.v1.AliasContext.kind)
  return static_cast< ::google::devtools::source::v1::AliasContext_Kind >(kind_);
}
inline void AliasContext::set_kind(::google::devtools::source::v1::AliasContext_Kind value) {
  
  kind_ = value;
  // @@protoc_insertion_point(field_set:google.devtools.source.v1.AliasContext.kind)
}

// string name = 2;
inline void AliasContext::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AliasContext::name() const {
  // @@protoc_insertion_point(field_get:google.devtools.source.v1.AliasContext.name)
  return name_.GetNoArena();
}
inline void AliasContext::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.devtools.source.v1.AliasContext.name)
}
#if LANG_CXX11
inline void AliasContext::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.devtools.source.v1.AliasContext.name)
}
#endif
inline void AliasContext::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.devtools.source.v1.AliasContext.name)
}
inline void AliasContext::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.devtools.source.v1.AliasContext.name)
}
inline ::std::string* AliasContext::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:google.devtools.source.v1.AliasContext.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AliasContext::release_name() {
  // @@protoc_insertion_point(field_release:google.devtools.source.v1.AliasContext.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AliasContext::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:google.devtools.source.v1.AliasContext.name)
}

// -------------------------------------------------------------------

// CloudRepoSourceContext

// .google.devtools.source.v1.RepoId repo_id = 1;
inline bool CloudRepoSourceContext::has_repo_id() const {
  return this != internal_default_instance() && repo_id_ != NULL;
}
inline void CloudRepoSourceContext::clear_repo_id() {
  if (GetArenaNoVirtual() == NULL && repo_id_ != NULL) {
    delete repo_id_;
  }
  repo_id_ = NULL;
}
inline const ::google::devtools::source::v1::RepoId& CloudRepoSourceContext::repo_id() const {
  const ::google::devtools::source::v1::RepoId* p = repo_id_;
  // @@protoc_insertion_point(field_get:google.devtools.source.v1.CloudRepoSourceContext.repo_id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::devtools::source::v1::RepoId*>(
      &::google::devtools::source::v1::_RepoId_default_instance_);
}
inline ::google::devtools::source::v1::RepoId* CloudRepoSourceContext::release_repo_id() {
  // @@protoc_insertion_point(field_release:google.devtools.source.v1.CloudRepoSourceContext.repo_id)
  
  ::google::devtools::source::v1::RepoId* temp = repo_id_;
  repo_id_ = NULL;
  return temp;
}
inline ::google::devtools::source::v1::RepoId* CloudRepoSourceContext::mutable_repo_id() {
  
  if (repo_id_ == NULL) {
    repo_id_ = new ::google::devtools::source::v1::RepoId;
  }
  // @@protoc_insertion_point(field_mutable:google.devtools.source.v1.CloudRepoSourceContext.repo_id)
  return repo_id_;
}
inline void CloudRepoSourceContext::set_allocated_repo_id(::google::devtools::source::v1::RepoId* repo_id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete repo_id_;
  }
  if (repo_id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      repo_id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, repo_id, submessage_arena);
    }
    
  } else {
    
  }
  repo_id_ = repo_id;
  // @@protoc_insertion_point(field_set_allocated:google.devtools.source.v1.CloudRepoSourceContext.repo_id)
}

// string revision_id = 2;
inline bool CloudRepoSourceContext::has_revision_id() const {
  return revision_case() == kRevisionId;
}
inline void CloudRepoSourceContext::set_has_revision_id() {
  _oneof_case_[0] = kRevisionId;
}
inline void CloudRepoSourceContext::clear_revision_id() {
  if (has_revision_id()) {
    revision_.revision_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_revision();
  }
}
inline const ::std::string& CloudRepoSourceContext::revision_id() const {
  // @@protoc_insertion_point(field_get:google.devtools.source.v1.CloudRepoSourceContext.revision_id)
  if (has_revision_id()) {
    return revision_.revision_id_.GetNoArena();
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
inline void CloudRepoSourceContext::set_revision_id(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:google.devtools.source.v1.CloudRepoSourceContext.revision_id)
  if (!has_revision_id()) {
    clear_revision();
    set_has_revision_id();
    revision_.revision_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  revision_.revision_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.devtools.source.v1.CloudRepoSourceContext.revision_id)
}
#if LANG_CXX11
inline void CloudRepoSourceContext::set_revision_id(::std::string&& value) {
  // @@protoc_insertion_point(field_set:google.devtools.source.v1.CloudRepoSourceContext.revision_id)
  if (!has_revision_id()) {
    clear_revision();
    set_has_revision_id();
    revision_.revision_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  revision_.revision_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.devtools.source.v1.CloudRepoSourceContext.revision_id)
}
#endif
inline void CloudRepoSourceContext::set_revision_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  if (!has_revision_id()) {
    clear_revision();
    set_has_revision_id();
    revision_.revision_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  revision_.revision_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.devtools.source.v1.CloudRepoSourceContext.revision_id)
}
inline void CloudRepoSourceContext::set_revision_id(const char* value, size_t size) {
  if (!has_revision_id()) {
    clear_revision();
    set_has_revision_id();
    revision_.revision_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  revision_.revision_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.devtools.source.v1.CloudRepoSourceContext.revision_id)
}
inline ::std::string* CloudRepoSourceContext::mutable_revision_id() {
  if (!has_revision_id()) {
    clear_revision();
    set_has_revision_id();
    revision_.revision_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:google.devtools.source.v1.CloudRepoSourceContext.revision_id)
  return revision_.revision_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CloudRepoSourceContext::release_revision_id() {
  // @@protoc_insertion_point(field_release:google.devtools.source.v1.CloudRepoSourceContext.revision_id)
  if (has_revision_id()) {
    clear_has_revision();
    return revision_.revision_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
inline void CloudRepoSourceContext::set_allocated_revision_id(::std::string* revision_id) {
  if (!has_revision_id()) {
    revision_.revision_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_revision();
  if (revision_id != NULL) {
    set_has_revision_id();
    revision_.revision_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        revision_id);
  }
  // @@protoc_insertion_point(field_set_allocated:google.devtools.source.v1.CloudRepoSourceContext.revision_id)
}

// string alias_name = 3;
inline bool CloudRepoSourceContext::has_alias_name() const {
  return revision_case() == kAliasName;
}
inline void CloudRepoSourceContext::set_has_alias_name() {
  _oneof_case_[0] = kAliasName;
}
inline void CloudRepoSourceContext::clear_alias_name() {
  if (has_alias_name()) {
    revision_.alias_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_revision();
  }
}
inline const ::std::string& CloudRepoSourceContext::alias_name() const {
  // @@protoc_insertion_point(field_get:google.devtools.source.v1.CloudRepoSourceContext.alias_name)
  if (has_alias_name()) {
    return revision_.alias_name_.GetNoArena();
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
inline void CloudRepoSourceContext::set_alias_name(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:google.devtools.source.v1.CloudRepoSourceContext.alias_name)
  if (!has_alias_name()) {
    clear_revision();
    set_has_alias_name();
    revision_.alias_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  revision_.alias_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.devtools.source.v1.CloudRepoSourceContext.alias_name)
}
#if LANG_CXX11
inline void CloudRepoSourceContext::set_alias_name(::std::string&& value) {
  // @@protoc_insertion_point(field_set:google.devtools.source.v1.CloudRepoSourceContext.alias_name)
  if (!has_alias_name()) {
    clear_revision();
    set_has_alias_name();
    revision_.alias_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  revision_.alias_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.devtools.source.v1.CloudRepoSourceContext.alias_name)
}
#endif
inline void CloudRepoSourceContext::set_alias_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  if (!has_alias_name()) {
    clear_revision();
    set_has_alias_name();
    revision_.alias_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  revision_.alias_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.devtools.source.v1.CloudRepoSourceContext.alias_name)
}
inline void CloudRepoSourceContext::set_alias_name(const char* value, size_t size) {
  if (!has_alias_name()) {
    clear_revision();
    set_has_alias_name();
    revision_.alias_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  revision_.alias_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.devtools.source.v1.CloudRepoSourceContext.alias_name)
}
inline ::std::string* CloudRepoSourceContext::mutable_alias_name() {
  if (!has_alias_name()) {
    clear_revision();
    set_has_alias_name();
    revision_.alias_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:google.devtools.source.v1.CloudRepoSourceContext.alias_name)
  return revision_.alias_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CloudRepoSourceContext::release_alias_name() {
  // @@protoc_insertion_point(field_release:google.devtools.source.v1.CloudRepoSourceContext.alias_name)
  if (has_alias_name()) {
    clear_has_revision();
    return revision_.alias_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
inline void CloudRepoSourceContext::set_allocated_alias_name(::std::string* alias_name) {
  if (!has_alias_name()) {
    revision_.alias_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_revision();
  if (alias_name != NULL) {
    set_has_alias_name();
    revision_.alias_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        alias_name);
  }
  // @@protoc_insertion_point(field_set_allocated:google.devtools.source.v1.CloudRepoSourceContext.alias_name)
}

// .google.devtools.source.v1.AliasContext alias_context = 4;
inline bool CloudRepoSourceContext::has_alias_context() const {
  return revision_case() == kAliasContext;
}
inline void CloudRepoSourceContext::set_has_alias_context() {
  _oneof_case_[0] = kAliasContext;
}
inline void CloudRepoSourceContext::clear_alias_context() {
  if (has_alias_context()) {
    delete revision_.alias_context_;
    clear_has_revision();
  }
}
inline ::google::devtools::source::v1::AliasContext* CloudRepoSourceContext::release_alias_context() {
  // @@protoc_insertion_point(field_release:google.devtools.source.v1.CloudRepoSourceContext.alias_context)
  if (has_alias_context()) {
    clear_has_revision();
      ::google::devtools::source::v1::AliasContext* temp = revision_.alias_context_;
    revision_.alias_context_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::devtools::source::v1::AliasContext& CloudRepoSourceContext::alias_context() const {
  // @@protoc_insertion_point(field_get:google.devtools.source.v1.CloudRepoSourceContext.alias_context)
  return has_alias_context()
      ? *revision_.alias_context_
      : *reinterpret_cast< ::google::devtools::source::v1::AliasContext*>(&::google::devtools::source::v1::_AliasContext_default_instance_);
}
inline ::google::devtools::source::v1::AliasContext* CloudRepoSourceContext::mutable_alias_context() {
  if (!has_alias_context()) {
    clear_revision();
    set_has_alias_context();
    revision_.alias_context_ = new ::google::devtools::source::v1::AliasContext;
  }
  // @@protoc_insertion_point(field_mutable:google.devtools.source.v1.CloudRepoSourceContext.alias_context)
  return revision_.alias_context_;
}

inline bool CloudRepoSourceContext::has_revision() const {
  return revision_case() != REVISION_NOT_SET;
}
inline void CloudRepoSourceContext::clear_has_revision() {
  _oneof_case_[0] = REVISION_NOT_SET;
}
inline CloudRepoSourceContext::RevisionCase CloudRepoSourceContext::revision_case() const {
  return CloudRepoSourceContext::RevisionCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// CloudWorkspaceSourceContext

// .google.devtools.source.v1.CloudWorkspaceId workspace_id = 1;
inline bool CloudWorkspaceSourceContext::has_workspace_id() const {
  return this != internal_default_instance() && workspace_id_ != NULL;
}
inline void CloudWorkspaceSourceContext::clear_workspace_id() {
  if (GetArenaNoVirtual() == NULL && workspace_id_ != NULL) {
    delete workspace_id_;
  }
  workspace_id_ = NULL;
}
inline const ::google::devtools::source::v1::CloudWorkspaceId& CloudWorkspaceSourceContext::workspace_id() const {
  const ::google::devtools::source::v1::CloudWorkspaceId* p = workspace_id_;
  // @@protoc_insertion_point(field_get:google.devtools.source.v1.CloudWorkspaceSourceContext.workspace_id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::devtools::source::v1::CloudWorkspaceId*>(
      &::google::devtools::source::v1::_CloudWorkspaceId_default_instance_);
}
inline ::google::devtools::source::v1::CloudWorkspaceId* CloudWorkspaceSourceContext::release_workspace_id() {
  // @@protoc_insertion_point(field_release:google.devtools.source.v1.CloudWorkspaceSourceContext.workspace_id)
  
  ::google::devtools::source::v1::CloudWorkspaceId* temp = workspace_id_;
  workspace_id_ = NULL;
  return temp;
}
inline ::google::devtools::source::v1::CloudWorkspaceId* CloudWorkspaceSourceContext::mutable_workspace_id() {
  
  if (workspace_id_ == NULL) {
    workspace_id_ = new ::google::devtools::source::v1::CloudWorkspaceId;
  }
  // @@protoc_insertion_point(field_mutable:google.devtools.source.v1.CloudWorkspaceSourceContext.workspace_id)
  return workspace_id_;
}
inline void CloudWorkspaceSourceContext::set_allocated_workspace_id(::google::devtools::source::v1::CloudWorkspaceId* workspace_id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete workspace_id_;
  }
  if (workspace_id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      workspace_id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, workspace_id, submessage_arena);
    }
    
  } else {
    
  }
  workspace_id_ = workspace_id;
  // @@protoc_insertion_point(field_set_allocated:google.devtools.source.v1.CloudWorkspaceSourceContext.workspace_id)
}

// string snapshot_id = 2;
inline void CloudWorkspaceSourceContext::clear_snapshot_id() {
  snapshot_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CloudWorkspaceSourceContext::snapshot_id() const {
  // @@protoc_insertion_point(field_get:google.devtools.source.v1.CloudWorkspaceSourceContext.snapshot_id)
  return snapshot_id_.GetNoArena();
}
inline void CloudWorkspaceSourceContext::set_snapshot_id(const ::std::string& value) {
  
  snapshot_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.devtools.source.v1.CloudWorkspaceSourceContext.snapshot_id)
}
#if LANG_CXX11
inline void CloudWorkspaceSourceContext::set_snapshot_id(::std::string&& value) {
  
  snapshot_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.devtools.source.v1.CloudWorkspaceSourceContext.snapshot_id)
}
#endif
inline void CloudWorkspaceSourceContext::set_snapshot_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  snapshot_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.devtools.source.v1.CloudWorkspaceSourceContext.snapshot_id)
}
inline void CloudWorkspaceSourceContext::set_snapshot_id(const char* value, size_t size) {
  
  snapshot_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.devtools.source.v1.CloudWorkspaceSourceContext.snapshot_id)
}
inline ::std::string* CloudWorkspaceSourceContext::mutable_snapshot_id() {
  
  // @@protoc_insertion_point(field_mutable:google.devtools.source.v1.CloudWorkspaceSourceContext.snapshot_id)
  return snapshot_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CloudWorkspaceSourceContext::release_snapshot_id() {
  // @@protoc_insertion_point(field_release:google.devtools.source.v1.CloudWorkspaceSourceContext.snapshot_id)
  
  return snapshot_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CloudWorkspaceSourceContext::set_allocated_snapshot_id(::std::string* snapshot_id) {
  if (snapshot_id != NULL) {
    
  } else {
    
  }
  snapshot_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), snapshot_id);
  // @@protoc_insertion_point(field_set_allocated:google.devtools.source.v1.CloudWorkspaceSourceContext.snapshot_id)
}

// -------------------------------------------------------------------

// GerritSourceContext

// string host_uri = 1;
inline void GerritSourceContext::clear_host_uri() {
  host_uri_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GerritSourceContext::host_uri() const {
  // @@protoc_insertion_point(field_get:google.devtools.source.v1.GerritSourceContext.host_uri)
  return host_uri_.GetNoArena();
}
inline void GerritSourceContext::set_host_uri(const ::std::string& value) {
  
  host_uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.devtools.source.v1.GerritSourceContext.host_uri)
}
#if LANG_CXX11
inline void GerritSourceContext::set_host_uri(::std::string&& value) {
  
  host_uri_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.devtools.source.v1.GerritSourceContext.host_uri)
}
#endif
inline void GerritSourceContext::set_host_uri(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  host_uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.devtools.source.v1.GerritSourceContext.host_uri)
}
inline void GerritSourceContext::set_host_uri(const char* value, size_t size) {
  
  host_uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.devtools.source.v1.GerritSourceContext.host_uri)
}
inline ::std::string* GerritSourceContext::mutable_host_uri() {
  
  // @@protoc_insertion_point(field_mutable:google.devtools.source.v1.GerritSourceContext.host_uri)
  return host_uri_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GerritSourceContext::release_host_uri() {
  // @@protoc_insertion_point(field_release:google.devtools.source.v1.GerritSourceContext.host_uri)
  
  return host_uri_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GerritSourceContext::set_allocated_host_uri(::std::string* host_uri) {
  if (host_uri != NULL) {
    
  } else {
    
  }
  host_uri_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), host_uri);
  // @@protoc_insertion_point(field_set_allocated:google.devtools.source.v1.GerritSourceContext.host_uri)
}

// string gerrit_project = 2;
inline void GerritSourceContext::clear_gerrit_project() {
  gerrit_project_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GerritSourceContext::gerrit_project() const {
  // @@protoc_insertion_point(field_get:google.devtools.source.v1.GerritSourceContext.gerrit_project)
  return gerrit_project_.GetNoArena();
}
inline void GerritSourceContext::set_gerrit_project(const ::std::string& value) {
  
  gerrit_project_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.devtools.source.v1.GerritSourceContext.gerrit_project)
}
#if LANG_CXX11
inline void GerritSourceContext::set_gerrit_project(::std::string&& value) {
  
  gerrit_project_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.devtools.source.v1.GerritSourceContext.gerrit_project)
}
#endif
inline void GerritSourceContext::set_gerrit_project(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  gerrit_project_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.devtools.source.v1.GerritSourceContext.gerrit_project)
}
inline void GerritSourceContext::set_gerrit_project(const char* value, size_t size) {
  
  gerrit_project_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.devtools.source.v1.GerritSourceContext.gerrit_project)
}
inline ::std::string* GerritSourceContext::mutable_gerrit_project() {
  
  // @@protoc_insertion_point(field_mutable:google.devtools.source.v1.GerritSourceContext.gerrit_project)
  return gerrit_project_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GerritSourceContext::release_gerrit_project() {
  // @@protoc_insertion_point(field_release:google.devtools.source.v1.GerritSourceContext.gerrit_project)
  
  return gerrit_project_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GerritSourceContext::set_allocated_gerrit_project(::std::string* gerrit_project) {
  if (gerrit_project != NULL) {
    
  } else {
    
  }
  gerrit_project_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), gerrit_project);
  // @@protoc_insertion_point(field_set_allocated:google.devtools.source.v1.GerritSourceContext.gerrit_project)
}

// string revision_id = 3;
inline bool GerritSourceContext::has_revision_id() const {
  return revision_case() == kRevisionId;
}
inline void GerritSourceContext::set_has_revision_id() {
  _oneof_case_[0] = kRevisionId;
}
inline void GerritSourceContext::clear_revision_id() {
  if (has_revision_id()) {
    revision_.revision_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_revision();
  }
}
inline const ::std::string& GerritSourceContext::revision_id() const {
  // @@protoc_insertion_point(field_get:google.devtools.source.v1.GerritSourceContext.revision_id)
  if (has_revision_id()) {
    return revision_.revision_id_.GetNoArena();
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
inline void GerritSourceContext::set_revision_id(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:google.devtools.source.v1.GerritSourceContext.revision_id)
  if (!has_revision_id()) {
    clear_revision();
    set_has_revision_id();
    revision_.revision_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  revision_.revision_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.devtools.source.v1.GerritSourceContext.revision_id)
}
#if LANG_CXX11
inline void GerritSourceContext::set_revision_id(::std::string&& value) {
  // @@protoc_insertion_point(field_set:google.devtools.source.v1.GerritSourceContext.revision_id)
  if (!has_revision_id()) {
    clear_revision();
    set_has_revision_id();
    revision_.revision_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  revision_.revision_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.devtools.source.v1.GerritSourceContext.revision_id)
}
#endif
inline void GerritSourceContext::set_revision_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  if (!has_revision_id()) {
    clear_revision();
    set_has_revision_id();
    revision_.revision_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  revision_.revision_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.devtools.source.v1.GerritSourceContext.revision_id)
}
inline void GerritSourceContext::set_revision_id(const char* value, size_t size) {
  if (!has_revision_id()) {
    clear_revision();
    set_has_revision_id();
    revision_.revision_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  revision_.revision_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.devtools.source.v1.GerritSourceContext.revision_id)
}
inline ::std::string* GerritSourceContext::mutable_revision_id() {
  if (!has_revision_id()) {
    clear_revision();
    set_has_revision_id();
    revision_.revision_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:google.devtools.source.v1.GerritSourceContext.revision_id)
  return revision_.revision_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GerritSourceContext::release_revision_id() {
  // @@protoc_insertion_point(field_release:google.devtools.source.v1.GerritSourceContext.revision_id)
  if (has_revision_id()) {
    clear_has_revision();
    return revision_.revision_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
inline void GerritSourceContext::set_allocated_revision_id(::std::string* revision_id) {
  if (!has_revision_id()) {
    revision_.revision_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_revision();
  if (revision_id != NULL) {
    set_has_revision_id();
    revision_.revision_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        revision_id);
  }
  // @@protoc_insertion_point(field_set_allocated:google.devtools.source.v1.GerritSourceContext.revision_id)
}

// string alias_name = 4;
inline bool GerritSourceContext::has_alias_name() const {
  return revision_case() == kAliasName;
}
inline void GerritSourceContext::set_has_alias_name() {
  _oneof_case_[0] = kAliasName;
}
inline void GerritSourceContext::clear_alias_name() {
  if (has_alias_name()) {
    revision_.alias_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_revision();
  }
}
inline const ::std::string& GerritSourceContext::alias_name() const {
  // @@protoc_insertion_point(field_get:google.devtools.source.v1.GerritSourceContext.alias_name)
  if (has_alias_name()) {
    return revision_.alias_name_.GetNoArena();
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
inline void GerritSourceContext::set_alias_name(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:google.devtools.source.v1.GerritSourceContext.alias_name)
  if (!has_alias_name()) {
    clear_revision();
    set_has_alias_name();
    revision_.alias_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  revision_.alias_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.devtools.source.v1.GerritSourceContext.alias_name)
}
#if LANG_CXX11
inline void GerritSourceContext::set_alias_name(::std::string&& value) {
  // @@protoc_insertion_point(field_set:google.devtools.source.v1.GerritSourceContext.alias_name)
  if (!has_alias_name()) {
    clear_revision();
    set_has_alias_name();
    revision_.alias_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  revision_.alias_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.devtools.source.v1.GerritSourceContext.alias_name)
}
#endif
inline void GerritSourceContext::set_alias_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  if (!has_alias_name()) {
    clear_revision();
    set_has_alias_name();
    revision_.alias_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  revision_.alias_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.devtools.source.v1.GerritSourceContext.alias_name)
}
inline void GerritSourceContext::set_alias_name(const char* value, size_t size) {
  if (!has_alias_name()) {
    clear_revision();
    set_has_alias_name();
    revision_.alias_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  revision_.alias_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.devtools.source.v1.GerritSourceContext.alias_name)
}
inline ::std::string* GerritSourceContext::mutable_alias_name() {
  if (!has_alias_name()) {
    clear_revision();
    set_has_alias_name();
    revision_.alias_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:google.devtools.source.v1.GerritSourceContext.alias_name)
  return revision_.alias_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GerritSourceContext::release_alias_name() {
  // @@protoc_insertion_point(field_release:google.devtools.source.v1.GerritSourceContext.alias_name)
  if (has_alias_name()) {
    clear_has_revision();
    return revision_.alias_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
inline void GerritSourceContext::set_allocated_alias_name(::std::string* alias_name) {
  if (!has_alias_name()) {
    revision_.alias_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_revision();
  if (alias_name != NULL) {
    set_has_alias_name();
    revision_.alias_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        alias_name);
  }
  // @@protoc_insertion_point(field_set_allocated:google.devtools.source.v1.GerritSourceContext.alias_name)
}

// .google.devtools.source.v1.AliasContext alias_context = 5;
inline bool GerritSourceContext::has_alias_context() const {
  return revision_case() == kAliasContext;
}
inline void GerritSourceContext::set_has_alias_context() {
  _oneof_case_[0] = kAliasContext;
}
inline void GerritSourceContext::clear_alias_context() {
  if (has_alias_context()) {
    delete revision_.alias_context_;
    clear_has_revision();
  }
}
inline ::google::devtools::source::v1::AliasContext* GerritSourceContext::release_alias_context() {
  // @@protoc_insertion_point(field_release:google.devtools.source.v1.GerritSourceContext.alias_context)
  if (has_alias_context()) {
    clear_has_revision();
      ::google::devtools::source::v1::AliasContext* temp = revision_.alias_context_;
    revision_.alias_context_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::devtools::source::v1::AliasContext& GerritSourceContext::alias_context() const {
  // @@protoc_insertion_point(field_get:google.devtools.source.v1.GerritSourceContext.alias_context)
  return has_alias_context()
      ? *revision_.alias_context_
      : *reinterpret_cast< ::google::devtools::source::v1::AliasContext*>(&::google::devtools::source::v1::_AliasContext_default_instance_);
}
inline ::google::devtools::source::v1::AliasContext* GerritSourceContext::mutable_alias_context() {
  if (!has_alias_context()) {
    clear_revision();
    set_has_alias_context();
    revision_.alias_context_ = new ::google::devtools::source::v1::AliasContext;
  }
  // @@protoc_insertion_point(field_mutable:google.devtools.source.v1.GerritSourceContext.alias_context)
  return revision_.alias_context_;
}

inline bool GerritSourceContext::has_revision() const {
  return revision_case() != REVISION_NOT_SET;
}
inline void GerritSourceContext::clear_has_revision() {
  _oneof_case_[0] = REVISION_NOT_SET;
}
inline GerritSourceContext::RevisionCase GerritSourceContext::revision_case() const {
  return GerritSourceContext::RevisionCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// GitSourceContext

// string url = 1;
inline void GitSourceContext::clear_url() {
  url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GitSourceContext::url() const {
  // @@protoc_insertion_point(field_get:google.devtools.source.v1.GitSourceContext.url)
  return url_.GetNoArena();
}
inline void GitSourceContext::set_url(const ::std::string& value) {
  
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.devtools.source.v1.GitSourceContext.url)
}
#if LANG_CXX11
inline void GitSourceContext::set_url(::std::string&& value) {
  
  url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.devtools.source.v1.GitSourceContext.url)
}
#endif
inline void GitSourceContext::set_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.devtools.source.v1.GitSourceContext.url)
}
inline void GitSourceContext::set_url(const char* value, size_t size) {
  
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.devtools.source.v1.GitSourceContext.url)
}
inline ::std::string* GitSourceContext::mutable_url() {
  
  // @@protoc_insertion_point(field_mutable:google.devtools.source.v1.GitSourceContext.url)
  return url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GitSourceContext::release_url() {
  // @@protoc_insertion_point(field_release:google.devtools.source.v1.GitSourceContext.url)
  
  return url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GitSourceContext::set_allocated_url(::std::string* url) {
  if (url != NULL) {
    
  } else {
    
  }
  url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), url);
  // @@protoc_insertion_point(field_set_allocated:google.devtools.source.v1.GitSourceContext.url)
}

// string revision_id = 2;
inline void GitSourceContext::clear_revision_id() {
  revision_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GitSourceContext::revision_id() const {
  // @@protoc_insertion_point(field_get:google.devtools.source.v1.GitSourceContext.revision_id)
  return revision_id_.GetNoArena();
}
inline void GitSourceContext::set_revision_id(const ::std::string& value) {
  
  revision_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.devtools.source.v1.GitSourceContext.revision_id)
}
#if LANG_CXX11
inline void GitSourceContext::set_revision_id(::std::string&& value) {
  
  revision_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.devtools.source.v1.GitSourceContext.revision_id)
}
#endif
inline void GitSourceContext::set_revision_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  revision_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.devtools.source.v1.GitSourceContext.revision_id)
}
inline void GitSourceContext::set_revision_id(const char* value, size_t size) {
  
  revision_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.devtools.source.v1.GitSourceContext.revision_id)
}
inline ::std::string* GitSourceContext::mutable_revision_id() {
  
  // @@protoc_insertion_point(field_mutable:google.devtools.source.v1.GitSourceContext.revision_id)
  return revision_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GitSourceContext::release_revision_id() {
  // @@protoc_insertion_point(field_release:google.devtools.source.v1.GitSourceContext.revision_id)
  
  return revision_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GitSourceContext::set_allocated_revision_id(::std::string* revision_id) {
  if (revision_id != NULL) {
    
  } else {
    
  }
  revision_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), revision_id);
  // @@protoc_insertion_point(field_set_allocated:google.devtools.source.v1.GitSourceContext.revision_id)
}

// -------------------------------------------------------------------

// RepoId

// .google.devtools.source.v1.ProjectRepoId project_repo_id = 1;
inline bool RepoId::has_project_repo_id() const {
  return id_case() == kProjectRepoId;
}
inline void RepoId::set_has_project_repo_id() {
  _oneof_case_[0] = kProjectRepoId;
}
inline void RepoId::clear_project_repo_id() {
  if (has_project_repo_id()) {
    delete id_.project_repo_id_;
    clear_has_id();
  }
}
inline ::google::devtools::source::v1::ProjectRepoId* RepoId::release_project_repo_id() {
  // @@protoc_insertion_point(field_release:google.devtools.source.v1.RepoId.project_repo_id)
  if (has_project_repo_id()) {
    clear_has_id();
      ::google::devtools::source::v1::ProjectRepoId* temp = id_.project_repo_id_;
    id_.project_repo_id_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::devtools::source::v1::ProjectRepoId& RepoId::project_repo_id() const {
  // @@protoc_insertion_point(field_get:google.devtools.source.v1.RepoId.project_repo_id)
  return has_project_repo_id()
      ? *id_.project_repo_id_
      : *reinterpret_cast< ::google::devtools::source::v1::ProjectRepoId*>(&::google::devtools::source::v1::_ProjectRepoId_default_instance_);
}
inline ::google::devtools::source::v1::ProjectRepoId* RepoId::mutable_project_repo_id() {
  if (!has_project_repo_id()) {
    clear_id();
    set_has_project_repo_id();
    id_.project_repo_id_ = new ::google::devtools::source::v1::ProjectRepoId;
  }
  // @@protoc_insertion_point(field_mutable:google.devtools.source.v1.RepoId.project_repo_id)
  return id_.project_repo_id_;
}

// string uid = 2;
inline bool RepoId::has_uid() const {
  return id_case() == kUid;
}
inline void RepoId::set_has_uid() {
  _oneof_case_[0] = kUid;
}
inline void RepoId::clear_uid() {
  if (has_uid()) {
    id_.uid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_id();
  }
}
inline const ::std::string& RepoId::uid() const {
  // @@protoc_insertion_point(field_get:google.devtools.source.v1.RepoId.uid)
  if (has_uid()) {
    return id_.uid_.GetNoArena();
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
inline void RepoId::set_uid(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:google.devtools.source.v1.RepoId.uid)
  if (!has_uid()) {
    clear_id();
    set_has_uid();
    id_.uid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  id_.uid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.devtools.source.v1.RepoId.uid)
}
#if LANG_CXX11
inline void RepoId::set_uid(::std::string&& value) {
  // @@protoc_insertion_point(field_set:google.devtools.source.v1.RepoId.uid)
  if (!has_uid()) {
    clear_id();
    set_has_uid();
    id_.uid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  id_.uid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.devtools.source.v1.RepoId.uid)
}
#endif
inline void RepoId::set_uid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  if (!has_uid()) {
    clear_id();
    set_has_uid();
    id_.uid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  id_.uid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.devtools.source.v1.RepoId.uid)
}
inline void RepoId::set_uid(const char* value, size_t size) {
  if (!has_uid()) {
    clear_id();
    set_has_uid();
    id_.uid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  id_.uid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.devtools.source.v1.RepoId.uid)
}
inline ::std::string* RepoId::mutable_uid() {
  if (!has_uid()) {
    clear_id();
    set_has_uid();
    id_.uid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:google.devtools.source.v1.RepoId.uid)
  return id_.uid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RepoId::release_uid() {
  // @@protoc_insertion_point(field_release:google.devtools.source.v1.RepoId.uid)
  if (has_uid()) {
    clear_has_id();
    return id_.uid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
inline void RepoId::set_allocated_uid(::std::string* uid) {
  if (!has_uid()) {
    id_.uid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_id();
  if (uid != NULL) {
    set_has_uid();
    id_.uid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        uid);
  }
  // @@protoc_insertion_point(field_set_allocated:google.devtools.source.v1.RepoId.uid)
}

inline bool RepoId::has_id() const {
  return id_case() != ID_NOT_SET;
}
inline void RepoId::clear_has_id() {
  _oneof_case_[0] = ID_NOT_SET;
}
inline RepoId::IdCase RepoId::id_case() const {
  return RepoId::IdCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// ProjectRepoId

// string project_id = 1;
inline void ProjectRepoId::clear_project_id() {
  project_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ProjectRepoId::project_id() const {
  // @@protoc_insertion_point(field_get:google.devtools.source.v1.ProjectRepoId.project_id)
  return project_id_.GetNoArena();
}
inline void ProjectRepoId::set_project_id(const ::std::string& value) {
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.devtools.source.v1.ProjectRepoId.project_id)
}
#if LANG_CXX11
inline void ProjectRepoId::set_project_id(::std::string&& value) {
  
  project_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.devtools.source.v1.ProjectRepoId.project_id)
}
#endif
inline void ProjectRepoId::set_project_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.devtools.source.v1.ProjectRepoId.project_id)
}
inline void ProjectRepoId::set_project_id(const char* value, size_t size) {
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.devtools.source.v1.ProjectRepoId.project_id)
}
inline ::std::string* ProjectRepoId::mutable_project_id() {
  
  // @@protoc_insertion_point(field_mutable:google.devtools.source.v1.ProjectRepoId.project_id)
  return project_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ProjectRepoId::release_project_id() {
  // @@protoc_insertion_point(field_release:google.devtools.source.v1.ProjectRepoId.project_id)
  
  return project_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ProjectRepoId::set_allocated_project_id(::std::string* project_id) {
  if (project_id != NULL) {
    
  } else {
    
  }
  project_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), project_id);
  // @@protoc_insertion_point(field_set_allocated:google.devtools.source.v1.ProjectRepoId.project_id)
}

// string repo_name = 2;
inline void ProjectRepoId::clear_repo_name() {
  repo_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ProjectRepoId::repo_name() const {
  // @@protoc_insertion_point(field_get:google.devtools.source.v1.ProjectRepoId.repo_name)
  return repo_name_.GetNoArena();
}
inline void ProjectRepoId::set_repo_name(const ::std::string& value) {
  
  repo_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.devtools.source.v1.ProjectRepoId.repo_name)
}
#if LANG_CXX11
inline void ProjectRepoId::set_repo_name(::std::string&& value) {
  
  repo_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.devtools.source.v1.ProjectRepoId.repo_name)
}
#endif
inline void ProjectRepoId::set_repo_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  repo_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.devtools.source.v1.ProjectRepoId.repo_name)
}
inline void ProjectRepoId::set_repo_name(const char* value, size_t size) {
  
  repo_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.devtools.source.v1.ProjectRepoId.repo_name)
}
inline ::std::string* ProjectRepoId::mutable_repo_name() {
  
  // @@protoc_insertion_point(field_mutable:google.devtools.source.v1.ProjectRepoId.repo_name)
  return repo_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ProjectRepoId::release_repo_name() {
  // @@protoc_insertion_point(field_release:google.devtools.source.v1.ProjectRepoId.repo_name)
  
  return repo_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ProjectRepoId::set_allocated_repo_name(::std::string* repo_name) {
  if (repo_name != NULL) {
    
  } else {
    
  }
  repo_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), repo_name);
  // @@protoc_insertion_point(field_set_allocated:google.devtools.source.v1.ProjectRepoId.repo_name)
}

// -------------------------------------------------------------------

// CloudWorkspaceId

// .google.devtools.source.v1.RepoId repo_id = 1;
inline bool CloudWorkspaceId::has_repo_id() const {
  return this != internal_default_instance() && repo_id_ != NULL;
}
inline void CloudWorkspaceId::clear_repo_id() {
  if (GetArenaNoVirtual() == NULL && repo_id_ != NULL) {
    delete repo_id_;
  }
  repo_id_ = NULL;
}
inline const ::google::devtools::source::v1::RepoId& CloudWorkspaceId::repo_id() const {
  const ::google::devtools::source::v1::RepoId* p = repo_id_;
  // @@protoc_insertion_point(field_get:google.devtools.source.v1.CloudWorkspaceId.repo_id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::devtools::source::v1::RepoId*>(
      &::google::devtools::source::v1::_RepoId_default_instance_);
}
inline ::google::devtools::source::v1::RepoId* CloudWorkspaceId::release_repo_id() {
  // @@protoc_insertion_point(field_release:google.devtools.source.v1.CloudWorkspaceId.repo_id)
  
  ::google::devtools::source::v1::RepoId* temp = repo_id_;
  repo_id_ = NULL;
  return temp;
}
inline ::google::devtools::source::v1::RepoId* CloudWorkspaceId::mutable_repo_id() {
  
  if (repo_id_ == NULL) {
    repo_id_ = new ::google::devtools::source::v1::RepoId;
  }
  // @@protoc_insertion_point(field_mutable:google.devtools.source.v1.CloudWorkspaceId.repo_id)
  return repo_id_;
}
inline void CloudWorkspaceId::set_allocated_repo_id(::google::devtools::source::v1::RepoId* repo_id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete repo_id_;
  }
  if (repo_id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      repo_id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, repo_id, submessage_arena);
    }
    
  } else {
    
  }
  repo_id_ = repo_id;
  // @@protoc_insertion_point(field_set_allocated:google.devtools.source.v1.CloudWorkspaceId.repo_id)
}

// string name = 2;
inline void CloudWorkspaceId::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CloudWorkspaceId::name() const {
  // @@protoc_insertion_point(field_get:google.devtools.source.v1.CloudWorkspaceId.name)
  return name_.GetNoArena();
}
inline void CloudWorkspaceId::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.devtools.source.v1.CloudWorkspaceId.name)
}
#if LANG_CXX11
inline void CloudWorkspaceId::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.devtools.source.v1.CloudWorkspaceId.name)
}
#endif
inline void CloudWorkspaceId::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.devtools.source.v1.CloudWorkspaceId.name)
}
inline void CloudWorkspaceId::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.devtools.source.v1.CloudWorkspaceId.name)
}
inline ::std::string* CloudWorkspaceId::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:google.devtools.source.v1.CloudWorkspaceId.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CloudWorkspaceId::release_name() {
  // @@protoc_insertion_point(field_release:google.devtools.source.v1.CloudWorkspaceId.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CloudWorkspaceId::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:google.devtools.source.v1.CloudWorkspaceId.name)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace source
}  // namespace devtools
}  // namespace google

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::google::devtools::source::v1::AliasContext_Kind> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::google::devtools::source::v1::AliasContext_Kind>() {
  return ::google::devtools::source::v1::AliasContext_Kind_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_google_2fdevtools_2fsource_2fv1_2fsource_5fcontext_2eproto__INCLUDED
