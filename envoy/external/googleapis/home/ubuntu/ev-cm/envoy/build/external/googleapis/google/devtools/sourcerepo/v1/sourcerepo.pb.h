// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/devtools/sourcerepo/v1/sourcerepo.proto

#ifndef PROTOBUF_google_2fdevtools_2fsourcerepo_2fv1_2fsourcerepo_2eproto__INCLUDED
#define PROTOBUF_google_2fdevtools_2fsourcerepo_2fv1_2fsourcerepo_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "google/api/annotations.pb.h"
#include "google/api/auth.pb.h"
#include "google/iam/v1/iam_policy.pb.h"
#include "google/iam/v1/policy.pb.h"
#include <google/protobuf/empty.pb.h>
// @@protoc_insertion_point(includes)

namespace protobuf_google_2fdevtools_2fsourcerepo_2fv1_2fsourcerepo_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[7];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsRepoImpl();
void InitDefaultsRepo();
void InitDefaultsMirrorConfigImpl();
void InitDefaultsMirrorConfig();
void InitDefaultsGetRepoRequestImpl();
void InitDefaultsGetRepoRequest();
void InitDefaultsListReposRequestImpl();
void InitDefaultsListReposRequest();
void InitDefaultsListReposResponseImpl();
void InitDefaultsListReposResponse();
void InitDefaultsCreateRepoRequestImpl();
void InitDefaultsCreateRepoRequest();
void InitDefaultsDeleteRepoRequestImpl();
void InitDefaultsDeleteRepoRequest();
inline void InitDefaults() {
  InitDefaultsRepo();
  InitDefaultsMirrorConfig();
  InitDefaultsGetRepoRequest();
  InitDefaultsListReposRequest();
  InitDefaultsListReposResponse();
  InitDefaultsCreateRepoRequest();
  InitDefaultsDeleteRepoRequest();
}
}  // namespace protobuf_google_2fdevtools_2fsourcerepo_2fv1_2fsourcerepo_2eproto
namespace google {
namespace devtools {
namespace sourcerepo {
namespace v1 {
class CreateRepoRequest;
class CreateRepoRequestDefaultTypeInternal;
extern CreateRepoRequestDefaultTypeInternal _CreateRepoRequest_default_instance_;
class DeleteRepoRequest;
class DeleteRepoRequestDefaultTypeInternal;
extern DeleteRepoRequestDefaultTypeInternal _DeleteRepoRequest_default_instance_;
class GetRepoRequest;
class GetRepoRequestDefaultTypeInternal;
extern GetRepoRequestDefaultTypeInternal _GetRepoRequest_default_instance_;
class ListReposRequest;
class ListReposRequestDefaultTypeInternal;
extern ListReposRequestDefaultTypeInternal _ListReposRequest_default_instance_;
class ListReposResponse;
class ListReposResponseDefaultTypeInternal;
extern ListReposResponseDefaultTypeInternal _ListReposResponse_default_instance_;
class MirrorConfig;
class MirrorConfigDefaultTypeInternal;
extern MirrorConfigDefaultTypeInternal _MirrorConfig_default_instance_;
class Repo;
class RepoDefaultTypeInternal;
extern RepoDefaultTypeInternal _Repo_default_instance_;
}  // namespace v1
}  // namespace sourcerepo
}  // namespace devtools
}  // namespace google
namespace google {
namespace devtools {
namespace sourcerepo {
namespace v1 {

// ===================================================================

class Repo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.devtools.sourcerepo.v1.Repo) */ {
 public:
  Repo();
  virtual ~Repo();

  Repo(const Repo& from);

  inline Repo& operator=(const Repo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Repo(Repo&& from) noexcept
    : Repo() {
    *this = ::std::move(from);
  }

  inline Repo& operator=(Repo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Repo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Repo* internal_default_instance() {
    return reinterpret_cast<const Repo*>(
               &_Repo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(Repo* other);
  friend void swap(Repo& a, Repo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Repo* New() const PROTOBUF_FINAL { return New(NULL); }

  Repo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Repo& from);
  void MergeFrom(const Repo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Repo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // string url = 3;
  void clear_url();
  static const int kUrlFieldNumber = 3;
  const ::std::string& url() const;
  void set_url(const ::std::string& value);
  #if LANG_CXX11
  void set_url(::std::string&& value);
  #endif
  void set_url(const char* value);
  void set_url(const char* value, size_t size);
  ::std::string* mutable_url();
  ::std::string* release_url();
  void set_allocated_url(::std::string* url);

  // .google.devtools.sourcerepo.v1.MirrorConfig mirror_config = 4;
  bool has_mirror_config() const;
  void clear_mirror_config();
  static const int kMirrorConfigFieldNumber = 4;
  const ::google::devtools::sourcerepo::v1::MirrorConfig& mirror_config() const;
  ::google::devtools::sourcerepo::v1::MirrorConfig* release_mirror_config();
  ::google::devtools::sourcerepo::v1::MirrorConfig* mutable_mirror_config();
  void set_allocated_mirror_config(::google::devtools::sourcerepo::v1::MirrorConfig* mirror_config);

  // int64 size = 2;
  void clear_size();
  static const int kSizeFieldNumber = 2;
  ::google::protobuf::int64 size() const;
  void set_size(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:google.devtools.sourcerepo.v1.Repo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr url_;
  ::google::devtools::sourcerepo::v1::MirrorConfig* mirror_config_;
  ::google::protobuf::int64 size_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fdevtools_2fsourcerepo_2fv1_2fsourcerepo_2eproto::TableStruct;
  friend void ::protobuf_google_2fdevtools_2fsourcerepo_2fv1_2fsourcerepo_2eproto::InitDefaultsRepoImpl();
};
// -------------------------------------------------------------------

class MirrorConfig : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.devtools.sourcerepo.v1.MirrorConfig) */ {
 public:
  MirrorConfig();
  virtual ~MirrorConfig();

  MirrorConfig(const MirrorConfig& from);

  inline MirrorConfig& operator=(const MirrorConfig& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MirrorConfig(MirrorConfig&& from) noexcept
    : MirrorConfig() {
    *this = ::std::move(from);
  }

  inline MirrorConfig& operator=(MirrorConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const MirrorConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MirrorConfig* internal_default_instance() {
    return reinterpret_cast<const MirrorConfig*>(
               &_MirrorConfig_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(MirrorConfig* other);
  friend void swap(MirrorConfig& a, MirrorConfig& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MirrorConfig* New() const PROTOBUF_FINAL { return New(NULL); }

  MirrorConfig* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const MirrorConfig& from);
  void MergeFrom(const MirrorConfig& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(MirrorConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string url = 1;
  void clear_url();
  static const int kUrlFieldNumber = 1;
  const ::std::string& url() const;
  void set_url(const ::std::string& value);
  #if LANG_CXX11
  void set_url(::std::string&& value);
  #endif
  void set_url(const char* value);
  void set_url(const char* value, size_t size);
  ::std::string* mutable_url();
  ::std::string* release_url();
  void set_allocated_url(::std::string* url);

  // string webhook_id = 2;
  void clear_webhook_id();
  static const int kWebhookIdFieldNumber = 2;
  const ::std::string& webhook_id() const;
  void set_webhook_id(const ::std::string& value);
  #if LANG_CXX11
  void set_webhook_id(::std::string&& value);
  #endif
  void set_webhook_id(const char* value);
  void set_webhook_id(const char* value, size_t size);
  ::std::string* mutable_webhook_id();
  ::std::string* release_webhook_id();
  void set_allocated_webhook_id(::std::string* webhook_id);

  // string deploy_key_id = 3;
  void clear_deploy_key_id();
  static const int kDeployKeyIdFieldNumber = 3;
  const ::std::string& deploy_key_id() const;
  void set_deploy_key_id(const ::std::string& value);
  #if LANG_CXX11
  void set_deploy_key_id(::std::string&& value);
  #endif
  void set_deploy_key_id(const char* value);
  void set_deploy_key_id(const char* value, size_t size);
  ::std::string* mutable_deploy_key_id();
  ::std::string* release_deploy_key_id();
  void set_allocated_deploy_key_id(::std::string* deploy_key_id);

  // @@protoc_insertion_point(class_scope:google.devtools.sourcerepo.v1.MirrorConfig)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr url_;
  ::google::protobuf::internal::ArenaStringPtr webhook_id_;
  ::google::protobuf::internal::ArenaStringPtr deploy_key_id_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fdevtools_2fsourcerepo_2fv1_2fsourcerepo_2eproto::TableStruct;
  friend void ::protobuf_google_2fdevtools_2fsourcerepo_2fv1_2fsourcerepo_2eproto::InitDefaultsMirrorConfigImpl();
};
// -------------------------------------------------------------------

class GetRepoRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.devtools.sourcerepo.v1.GetRepoRequest) */ {
 public:
  GetRepoRequest();
  virtual ~GetRepoRequest();

  GetRepoRequest(const GetRepoRequest& from);

  inline GetRepoRequest& operator=(const GetRepoRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetRepoRequest(GetRepoRequest&& from) noexcept
    : GetRepoRequest() {
    *this = ::std::move(from);
  }

  inline GetRepoRequest& operator=(GetRepoRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetRepoRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetRepoRequest* internal_default_instance() {
    return reinterpret_cast<const GetRepoRequest*>(
               &_GetRepoRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(GetRepoRequest* other);
  friend void swap(GetRepoRequest& a, GetRepoRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetRepoRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  GetRepoRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GetRepoRequest& from);
  void MergeFrom(const GetRepoRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GetRepoRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:google.devtools.sourcerepo.v1.GetRepoRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fdevtools_2fsourcerepo_2fv1_2fsourcerepo_2eproto::TableStruct;
  friend void ::protobuf_google_2fdevtools_2fsourcerepo_2fv1_2fsourcerepo_2eproto::InitDefaultsGetRepoRequestImpl();
};
// -------------------------------------------------------------------

class ListReposRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.devtools.sourcerepo.v1.ListReposRequest) */ {
 public:
  ListReposRequest();
  virtual ~ListReposRequest();

  ListReposRequest(const ListReposRequest& from);

  inline ListReposRequest& operator=(const ListReposRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ListReposRequest(ListReposRequest&& from) noexcept
    : ListReposRequest() {
    *this = ::std::move(from);
  }

  inline ListReposRequest& operator=(ListReposRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ListReposRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListReposRequest* internal_default_instance() {
    return reinterpret_cast<const ListReposRequest*>(
               &_ListReposRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(ListReposRequest* other);
  friend void swap(ListReposRequest& a, ListReposRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ListReposRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  ListReposRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ListReposRequest& from);
  void MergeFrom(const ListReposRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ListReposRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // string page_token = 3;
  void clear_page_token();
  static const int kPageTokenFieldNumber = 3;
  const ::std::string& page_token() const;
  void set_page_token(const ::std::string& value);
  #if LANG_CXX11
  void set_page_token(::std::string&& value);
  #endif
  void set_page_token(const char* value);
  void set_page_token(const char* value, size_t size);
  ::std::string* mutable_page_token();
  ::std::string* release_page_token();
  void set_allocated_page_token(::std::string* page_token);

  // int32 page_size = 2;
  void clear_page_size();
  static const int kPageSizeFieldNumber = 2;
  ::google::protobuf::int32 page_size() const;
  void set_page_size(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:google.devtools.sourcerepo.v1.ListReposRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr page_token_;
  ::google::protobuf::int32 page_size_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fdevtools_2fsourcerepo_2fv1_2fsourcerepo_2eproto::TableStruct;
  friend void ::protobuf_google_2fdevtools_2fsourcerepo_2fv1_2fsourcerepo_2eproto::InitDefaultsListReposRequestImpl();
};
// -------------------------------------------------------------------

class ListReposResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.devtools.sourcerepo.v1.ListReposResponse) */ {
 public:
  ListReposResponse();
  virtual ~ListReposResponse();

  ListReposResponse(const ListReposResponse& from);

  inline ListReposResponse& operator=(const ListReposResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ListReposResponse(ListReposResponse&& from) noexcept
    : ListReposResponse() {
    *this = ::std::move(from);
  }

  inline ListReposResponse& operator=(ListReposResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ListReposResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListReposResponse* internal_default_instance() {
    return reinterpret_cast<const ListReposResponse*>(
               &_ListReposResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(ListReposResponse* other);
  friend void swap(ListReposResponse& a, ListReposResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ListReposResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  ListReposResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ListReposResponse& from);
  void MergeFrom(const ListReposResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ListReposResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .google.devtools.sourcerepo.v1.Repo repos = 1;
  int repos_size() const;
  void clear_repos();
  static const int kReposFieldNumber = 1;
  const ::google::devtools::sourcerepo::v1::Repo& repos(int index) const;
  ::google::devtools::sourcerepo::v1::Repo* mutable_repos(int index);
  ::google::devtools::sourcerepo::v1::Repo* add_repos();
  ::google::protobuf::RepeatedPtrField< ::google::devtools::sourcerepo::v1::Repo >*
      mutable_repos();
  const ::google::protobuf::RepeatedPtrField< ::google::devtools::sourcerepo::v1::Repo >&
      repos() const;

  // string next_page_token = 2;
  void clear_next_page_token();
  static const int kNextPageTokenFieldNumber = 2;
  const ::std::string& next_page_token() const;
  void set_next_page_token(const ::std::string& value);
  #if LANG_CXX11
  void set_next_page_token(::std::string&& value);
  #endif
  void set_next_page_token(const char* value);
  void set_next_page_token(const char* value, size_t size);
  ::std::string* mutable_next_page_token();
  ::std::string* release_next_page_token();
  void set_allocated_next_page_token(::std::string* next_page_token);

  // @@protoc_insertion_point(class_scope:google.devtools.sourcerepo.v1.ListReposResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::google::devtools::sourcerepo::v1::Repo > repos_;
  ::google::protobuf::internal::ArenaStringPtr next_page_token_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fdevtools_2fsourcerepo_2fv1_2fsourcerepo_2eproto::TableStruct;
  friend void ::protobuf_google_2fdevtools_2fsourcerepo_2fv1_2fsourcerepo_2eproto::InitDefaultsListReposResponseImpl();
};
// -------------------------------------------------------------------

class CreateRepoRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.devtools.sourcerepo.v1.CreateRepoRequest) */ {
 public:
  CreateRepoRequest();
  virtual ~CreateRepoRequest();

  CreateRepoRequest(const CreateRepoRequest& from);

  inline CreateRepoRequest& operator=(const CreateRepoRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CreateRepoRequest(CreateRepoRequest&& from) noexcept
    : CreateRepoRequest() {
    *this = ::std::move(from);
  }

  inline CreateRepoRequest& operator=(CreateRepoRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CreateRepoRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreateRepoRequest* internal_default_instance() {
    return reinterpret_cast<const CreateRepoRequest*>(
               &_CreateRepoRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    5;

  void Swap(CreateRepoRequest* other);
  friend void swap(CreateRepoRequest& a, CreateRepoRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CreateRepoRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  CreateRepoRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CreateRepoRequest& from);
  void MergeFrom(const CreateRepoRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CreateRepoRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string parent = 1;
  void clear_parent();
  static const int kParentFieldNumber = 1;
  const ::std::string& parent() const;
  void set_parent(const ::std::string& value);
  #if LANG_CXX11
  void set_parent(::std::string&& value);
  #endif
  void set_parent(const char* value);
  void set_parent(const char* value, size_t size);
  ::std::string* mutable_parent();
  ::std::string* release_parent();
  void set_allocated_parent(::std::string* parent);

  // .google.devtools.sourcerepo.v1.Repo repo = 2;
  bool has_repo() const;
  void clear_repo();
  static const int kRepoFieldNumber = 2;
  const ::google::devtools::sourcerepo::v1::Repo& repo() const;
  ::google::devtools::sourcerepo::v1::Repo* release_repo();
  ::google::devtools::sourcerepo::v1::Repo* mutable_repo();
  void set_allocated_repo(::google::devtools::sourcerepo::v1::Repo* repo);

  // @@protoc_insertion_point(class_scope:google.devtools.sourcerepo.v1.CreateRepoRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr parent_;
  ::google::devtools::sourcerepo::v1::Repo* repo_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fdevtools_2fsourcerepo_2fv1_2fsourcerepo_2eproto::TableStruct;
  friend void ::protobuf_google_2fdevtools_2fsourcerepo_2fv1_2fsourcerepo_2eproto::InitDefaultsCreateRepoRequestImpl();
};
// -------------------------------------------------------------------

class DeleteRepoRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.devtools.sourcerepo.v1.DeleteRepoRequest) */ {
 public:
  DeleteRepoRequest();
  virtual ~DeleteRepoRequest();

  DeleteRepoRequest(const DeleteRepoRequest& from);

  inline DeleteRepoRequest& operator=(const DeleteRepoRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DeleteRepoRequest(DeleteRepoRequest&& from) noexcept
    : DeleteRepoRequest() {
    *this = ::std::move(from);
  }

  inline DeleteRepoRequest& operator=(DeleteRepoRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DeleteRepoRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeleteRepoRequest* internal_default_instance() {
    return reinterpret_cast<const DeleteRepoRequest*>(
               &_DeleteRepoRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    6;

  void Swap(DeleteRepoRequest* other);
  friend void swap(DeleteRepoRequest& a, DeleteRepoRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DeleteRepoRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  DeleteRepoRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DeleteRepoRequest& from);
  void MergeFrom(const DeleteRepoRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DeleteRepoRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:google.devtools.sourcerepo.v1.DeleteRepoRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fdevtools_2fsourcerepo_2fv1_2fsourcerepo_2eproto::TableStruct;
  friend void ::protobuf_google_2fdevtools_2fsourcerepo_2fv1_2fsourcerepo_2eproto::InitDefaultsDeleteRepoRequestImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Repo

// string name = 1;
inline void Repo::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Repo::name() const {
  // @@protoc_insertion_point(field_get:google.devtools.sourcerepo.v1.Repo.name)
  return name_.GetNoArena();
}
inline void Repo::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.devtools.sourcerepo.v1.Repo.name)
}
#if LANG_CXX11
inline void Repo::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.devtools.sourcerepo.v1.Repo.name)
}
#endif
inline void Repo::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.devtools.sourcerepo.v1.Repo.name)
}
inline void Repo::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.devtools.sourcerepo.v1.Repo.name)
}
inline ::std::string* Repo::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:google.devtools.sourcerepo.v1.Repo.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Repo::release_name() {
  // @@protoc_insertion_point(field_release:google.devtools.sourcerepo.v1.Repo.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Repo::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:google.devtools.sourcerepo.v1.Repo.name)
}

// int64 size = 2;
inline void Repo::clear_size() {
  size_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 Repo::size() const {
  // @@protoc_insertion_point(field_get:google.devtools.sourcerepo.v1.Repo.size)
  return size_;
}
inline void Repo::set_size(::google::protobuf::int64 value) {
  
  size_ = value;
  // @@protoc_insertion_point(field_set:google.devtools.sourcerepo.v1.Repo.size)
}

// string url = 3;
inline void Repo::clear_url() {
  url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Repo::url() const {
  // @@protoc_insertion_point(field_get:google.devtools.sourcerepo.v1.Repo.url)
  return url_.GetNoArena();
}
inline void Repo::set_url(const ::std::string& value) {
  
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.devtools.sourcerepo.v1.Repo.url)
}
#if LANG_CXX11
inline void Repo::set_url(::std::string&& value) {
  
  url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.devtools.sourcerepo.v1.Repo.url)
}
#endif
inline void Repo::set_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.devtools.sourcerepo.v1.Repo.url)
}
inline void Repo::set_url(const char* value, size_t size) {
  
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.devtools.sourcerepo.v1.Repo.url)
}
inline ::std::string* Repo::mutable_url() {
  
  // @@protoc_insertion_point(field_mutable:google.devtools.sourcerepo.v1.Repo.url)
  return url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Repo::release_url() {
  // @@protoc_insertion_point(field_release:google.devtools.sourcerepo.v1.Repo.url)
  
  return url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Repo::set_allocated_url(::std::string* url) {
  if (url != NULL) {
    
  } else {
    
  }
  url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), url);
  // @@protoc_insertion_point(field_set_allocated:google.devtools.sourcerepo.v1.Repo.url)
}

// .google.devtools.sourcerepo.v1.MirrorConfig mirror_config = 4;
inline bool Repo::has_mirror_config() const {
  return this != internal_default_instance() && mirror_config_ != NULL;
}
inline void Repo::clear_mirror_config() {
  if (GetArenaNoVirtual() == NULL && mirror_config_ != NULL) {
    delete mirror_config_;
  }
  mirror_config_ = NULL;
}
inline const ::google::devtools::sourcerepo::v1::MirrorConfig& Repo::mirror_config() const {
  const ::google::devtools::sourcerepo::v1::MirrorConfig* p = mirror_config_;
  // @@protoc_insertion_point(field_get:google.devtools.sourcerepo.v1.Repo.mirror_config)
  return p != NULL ? *p : *reinterpret_cast<const ::google::devtools::sourcerepo::v1::MirrorConfig*>(
      &::google::devtools::sourcerepo::v1::_MirrorConfig_default_instance_);
}
inline ::google::devtools::sourcerepo::v1::MirrorConfig* Repo::release_mirror_config() {
  // @@protoc_insertion_point(field_release:google.devtools.sourcerepo.v1.Repo.mirror_config)
  
  ::google::devtools::sourcerepo::v1::MirrorConfig* temp = mirror_config_;
  mirror_config_ = NULL;
  return temp;
}
inline ::google::devtools::sourcerepo::v1::MirrorConfig* Repo::mutable_mirror_config() {
  
  if (mirror_config_ == NULL) {
    mirror_config_ = new ::google::devtools::sourcerepo::v1::MirrorConfig;
  }
  // @@protoc_insertion_point(field_mutable:google.devtools.sourcerepo.v1.Repo.mirror_config)
  return mirror_config_;
}
inline void Repo::set_allocated_mirror_config(::google::devtools::sourcerepo::v1::MirrorConfig* mirror_config) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete mirror_config_;
  }
  if (mirror_config) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      mirror_config = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, mirror_config, submessage_arena);
    }
    
  } else {
    
  }
  mirror_config_ = mirror_config;
  // @@protoc_insertion_point(field_set_allocated:google.devtools.sourcerepo.v1.Repo.mirror_config)
}

// -------------------------------------------------------------------

// MirrorConfig

// string url = 1;
inline void MirrorConfig::clear_url() {
  url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MirrorConfig::url() const {
  // @@protoc_insertion_point(field_get:google.devtools.sourcerepo.v1.MirrorConfig.url)
  return url_.GetNoArena();
}
inline void MirrorConfig::set_url(const ::std::string& value) {
  
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.devtools.sourcerepo.v1.MirrorConfig.url)
}
#if LANG_CXX11
inline void MirrorConfig::set_url(::std::string&& value) {
  
  url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.devtools.sourcerepo.v1.MirrorConfig.url)
}
#endif
inline void MirrorConfig::set_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.devtools.sourcerepo.v1.MirrorConfig.url)
}
inline void MirrorConfig::set_url(const char* value, size_t size) {
  
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.devtools.sourcerepo.v1.MirrorConfig.url)
}
inline ::std::string* MirrorConfig::mutable_url() {
  
  // @@protoc_insertion_point(field_mutable:google.devtools.sourcerepo.v1.MirrorConfig.url)
  return url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MirrorConfig::release_url() {
  // @@protoc_insertion_point(field_release:google.devtools.sourcerepo.v1.MirrorConfig.url)
  
  return url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MirrorConfig::set_allocated_url(::std::string* url) {
  if (url != NULL) {
    
  } else {
    
  }
  url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), url);
  // @@protoc_insertion_point(field_set_allocated:google.devtools.sourcerepo.v1.MirrorConfig.url)
}

// string webhook_id = 2;
inline void MirrorConfig::clear_webhook_id() {
  webhook_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MirrorConfig::webhook_id() const {
  // @@protoc_insertion_point(field_get:google.devtools.sourcerepo.v1.MirrorConfig.webhook_id)
  return webhook_id_.GetNoArena();
}
inline void MirrorConfig::set_webhook_id(const ::std::string& value) {
  
  webhook_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.devtools.sourcerepo.v1.MirrorConfig.webhook_id)
}
#if LANG_CXX11
inline void MirrorConfig::set_webhook_id(::std::string&& value) {
  
  webhook_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.devtools.sourcerepo.v1.MirrorConfig.webhook_id)
}
#endif
inline void MirrorConfig::set_webhook_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  webhook_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.devtools.sourcerepo.v1.MirrorConfig.webhook_id)
}
inline void MirrorConfig::set_webhook_id(const char* value, size_t size) {
  
  webhook_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.devtools.sourcerepo.v1.MirrorConfig.webhook_id)
}
inline ::std::string* MirrorConfig::mutable_webhook_id() {
  
  // @@protoc_insertion_point(field_mutable:google.devtools.sourcerepo.v1.MirrorConfig.webhook_id)
  return webhook_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MirrorConfig::release_webhook_id() {
  // @@protoc_insertion_point(field_release:google.devtools.sourcerepo.v1.MirrorConfig.webhook_id)
  
  return webhook_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MirrorConfig::set_allocated_webhook_id(::std::string* webhook_id) {
  if (webhook_id != NULL) {
    
  } else {
    
  }
  webhook_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), webhook_id);
  // @@protoc_insertion_point(field_set_allocated:google.devtools.sourcerepo.v1.MirrorConfig.webhook_id)
}

// string deploy_key_id = 3;
inline void MirrorConfig::clear_deploy_key_id() {
  deploy_key_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MirrorConfig::deploy_key_id() const {
  // @@protoc_insertion_point(field_get:google.devtools.sourcerepo.v1.MirrorConfig.deploy_key_id)
  return deploy_key_id_.GetNoArena();
}
inline void MirrorConfig::set_deploy_key_id(const ::std::string& value) {
  
  deploy_key_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.devtools.sourcerepo.v1.MirrorConfig.deploy_key_id)
}
#if LANG_CXX11
inline void MirrorConfig::set_deploy_key_id(::std::string&& value) {
  
  deploy_key_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.devtools.sourcerepo.v1.MirrorConfig.deploy_key_id)
}
#endif
inline void MirrorConfig::set_deploy_key_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  deploy_key_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.devtools.sourcerepo.v1.MirrorConfig.deploy_key_id)
}
inline void MirrorConfig::set_deploy_key_id(const char* value, size_t size) {
  
  deploy_key_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.devtools.sourcerepo.v1.MirrorConfig.deploy_key_id)
}
inline ::std::string* MirrorConfig::mutable_deploy_key_id() {
  
  // @@protoc_insertion_point(field_mutable:google.devtools.sourcerepo.v1.MirrorConfig.deploy_key_id)
  return deploy_key_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MirrorConfig::release_deploy_key_id() {
  // @@protoc_insertion_point(field_release:google.devtools.sourcerepo.v1.MirrorConfig.deploy_key_id)
  
  return deploy_key_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MirrorConfig::set_allocated_deploy_key_id(::std::string* deploy_key_id) {
  if (deploy_key_id != NULL) {
    
  } else {
    
  }
  deploy_key_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), deploy_key_id);
  // @@protoc_insertion_point(field_set_allocated:google.devtools.sourcerepo.v1.MirrorConfig.deploy_key_id)
}

// -------------------------------------------------------------------

// GetRepoRequest

// string name = 1;
inline void GetRepoRequest::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetRepoRequest::name() const {
  // @@protoc_insertion_point(field_get:google.devtools.sourcerepo.v1.GetRepoRequest.name)
  return name_.GetNoArena();
}
inline void GetRepoRequest::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.devtools.sourcerepo.v1.GetRepoRequest.name)
}
#if LANG_CXX11
inline void GetRepoRequest::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.devtools.sourcerepo.v1.GetRepoRequest.name)
}
#endif
inline void GetRepoRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.devtools.sourcerepo.v1.GetRepoRequest.name)
}
inline void GetRepoRequest::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.devtools.sourcerepo.v1.GetRepoRequest.name)
}
inline ::std::string* GetRepoRequest::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:google.devtools.sourcerepo.v1.GetRepoRequest.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetRepoRequest::release_name() {
  // @@protoc_insertion_point(field_release:google.devtools.sourcerepo.v1.GetRepoRequest.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetRepoRequest::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:google.devtools.sourcerepo.v1.GetRepoRequest.name)
}

// -------------------------------------------------------------------

// ListReposRequest

// string name = 1;
inline void ListReposRequest::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ListReposRequest::name() const {
  // @@protoc_insertion_point(field_get:google.devtools.sourcerepo.v1.ListReposRequest.name)
  return name_.GetNoArena();
}
inline void ListReposRequest::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.devtools.sourcerepo.v1.ListReposRequest.name)
}
#if LANG_CXX11
inline void ListReposRequest::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.devtools.sourcerepo.v1.ListReposRequest.name)
}
#endif
inline void ListReposRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.devtools.sourcerepo.v1.ListReposRequest.name)
}
inline void ListReposRequest::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.devtools.sourcerepo.v1.ListReposRequest.name)
}
inline ::std::string* ListReposRequest::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:google.devtools.sourcerepo.v1.ListReposRequest.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ListReposRequest::release_name() {
  // @@protoc_insertion_point(field_release:google.devtools.sourcerepo.v1.ListReposRequest.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ListReposRequest::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:google.devtools.sourcerepo.v1.ListReposRequest.name)
}

// int32 page_size = 2;
inline void ListReposRequest::clear_page_size() {
  page_size_ = 0;
}
inline ::google::protobuf::int32 ListReposRequest::page_size() const {
  // @@protoc_insertion_point(field_get:google.devtools.sourcerepo.v1.ListReposRequest.page_size)
  return page_size_;
}
inline void ListReposRequest::set_page_size(::google::protobuf::int32 value) {
  
  page_size_ = value;
  // @@protoc_insertion_point(field_set:google.devtools.sourcerepo.v1.ListReposRequest.page_size)
}

// string page_token = 3;
inline void ListReposRequest::clear_page_token() {
  page_token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ListReposRequest::page_token() const {
  // @@protoc_insertion_point(field_get:google.devtools.sourcerepo.v1.ListReposRequest.page_token)
  return page_token_.GetNoArena();
}
inline void ListReposRequest::set_page_token(const ::std::string& value) {
  
  page_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.devtools.sourcerepo.v1.ListReposRequest.page_token)
}
#if LANG_CXX11
inline void ListReposRequest::set_page_token(::std::string&& value) {
  
  page_token_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.devtools.sourcerepo.v1.ListReposRequest.page_token)
}
#endif
inline void ListReposRequest::set_page_token(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  page_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.devtools.sourcerepo.v1.ListReposRequest.page_token)
}
inline void ListReposRequest::set_page_token(const char* value, size_t size) {
  
  page_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.devtools.sourcerepo.v1.ListReposRequest.page_token)
}
inline ::std::string* ListReposRequest::mutable_page_token() {
  
  // @@protoc_insertion_point(field_mutable:google.devtools.sourcerepo.v1.ListReposRequest.page_token)
  return page_token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ListReposRequest::release_page_token() {
  // @@protoc_insertion_point(field_release:google.devtools.sourcerepo.v1.ListReposRequest.page_token)
  
  return page_token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ListReposRequest::set_allocated_page_token(::std::string* page_token) {
  if (page_token != NULL) {
    
  } else {
    
  }
  page_token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), page_token);
  // @@protoc_insertion_point(field_set_allocated:google.devtools.sourcerepo.v1.ListReposRequest.page_token)
}

// -------------------------------------------------------------------

// ListReposResponse

// repeated .google.devtools.sourcerepo.v1.Repo repos = 1;
inline int ListReposResponse::repos_size() const {
  return repos_.size();
}
inline void ListReposResponse::clear_repos() {
  repos_.Clear();
}
inline const ::google::devtools::sourcerepo::v1::Repo& ListReposResponse::repos(int index) const {
  // @@protoc_insertion_point(field_get:google.devtools.sourcerepo.v1.ListReposResponse.repos)
  return repos_.Get(index);
}
inline ::google::devtools::sourcerepo::v1::Repo* ListReposResponse::mutable_repos(int index) {
  // @@protoc_insertion_point(field_mutable:google.devtools.sourcerepo.v1.ListReposResponse.repos)
  return repos_.Mutable(index);
}
inline ::google::devtools::sourcerepo::v1::Repo* ListReposResponse::add_repos() {
  // @@protoc_insertion_point(field_add:google.devtools.sourcerepo.v1.ListReposResponse.repos)
  return repos_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::google::devtools::sourcerepo::v1::Repo >*
ListReposResponse::mutable_repos() {
  // @@protoc_insertion_point(field_mutable_list:google.devtools.sourcerepo.v1.ListReposResponse.repos)
  return &repos_;
}
inline const ::google::protobuf::RepeatedPtrField< ::google::devtools::sourcerepo::v1::Repo >&
ListReposResponse::repos() const {
  // @@protoc_insertion_point(field_list:google.devtools.sourcerepo.v1.ListReposResponse.repos)
  return repos_;
}

// string next_page_token = 2;
inline void ListReposResponse::clear_next_page_token() {
  next_page_token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ListReposResponse::next_page_token() const {
  // @@protoc_insertion_point(field_get:google.devtools.sourcerepo.v1.ListReposResponse.next_page_token)
  return next_page_token_.GetNoArena();
}
inline void ListReposResponse::set_next_page_token(const ::std::string& value) {
  
  next_page_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.devtools.sourcerepo.v1.ListReposResponse.next_page_token)
}
#if LANG_CXX11
inline void ListReposResponse::set_next_page_token(::std::string&& value) {
  
  next_page_token_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.devtools.sourcerepo.v1.ListReposResponse.next_page_token)
}
#endif
inline void ListReposResponse::set_next_page_token(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  next_page_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.devtools.sourcerepo.v1.ListReposResponse.next_page_token)
}
inline void ListReposResponse::set_next_page_token(const char* value, size_t size) {
  
  next_page_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.devtools.sourcerepo.v1.ListReposResponse.next_page_token)
}
inline ::std::string* ListReposResponse::mutable_next_page_token() {
  
  // @@protoc_insertion_point(field_mutable:google.devtools.sourcerepo.v1.ListReposResponse.next_page_token)
  return next_page_token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ListReposResponse::release_next_page_token() {
  // @@protoc_insertion_point(field_release:google.devtools.sourcerepo.v1.ListReposResponse.next_page_token)
  
  return next_page_token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ListReposResponse::set_allocated_next_page_token(::std::string* next_page_token) {
  if (next_page_token != NULL) {
    
  } else {
    
  }
  next_page_token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), next_page_token);
  // @@protoc_insertion_point(field_set_allocated:google.devtools.sourcerepo.v1.ListReposResponse.next_page_token)
}

// -------------------------------------------------------------------

// CreateRepoRequest

// string parent = 1;
inline void CreateRepoRequest::clear_parent() {
  parent_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CreateRepoRequest::parent() const {
  // @@protoc_insertion_point(field_get:google.devtools.sourcerepo.v1.CreateRepoRequest.parent)
  return parent_.GetNoArena();
}
inline void CreateRepoRequest::set_parent(const ::std::string& value) {
  
  parent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.devtools.sourcerepo.v1.CreateRepoRequest.parent)
}
#if LANG_CXX11
inline void CreateRepoRequest::set_parent(::std::string&& value) {
  
  parent_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.devtools.sourcerepo.v1.CreateRepoRequest.parent)
}
#endif
inline void CreateRepoRequest::set_parent(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  parent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.devtools.sourcerepo.v1.CreateRepoRequest.parent)
}
inline void CreateRepoRequest::set_parent(const char* value, size_t size) {
  
  parent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.devtools.sourcerepo.v1.CreateRepoRequest.parent)
}
inline ::std::string* CreateRepoRequest::mutable_parent() {
  
  // @@protoc_insertion_point(field_mutable:google.devtools.sourcerepo.v1.CreateRepoRequest.parent)
  return parent_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CreateRepoRequest::release_parent() {
  // @@protoc_insertion_point(field_release:google.devtools.sourcerepo.v1.CreateRepoRequest.parent)
  
  return parent_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CreateRepoRequest::set_allocated_parent(::std::string* parent) {
  if (parent != NULL) {
    
  } else {
    
  }
  parent_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), parent);
  // @@protoc_insertion_point(field_set_allocated:google.devtools.sourcerepo.v1.CreateRepoRequest.parent)
}

// .google.devtools.sourcerepo.v1.Repo repo = 2;
inline bool CreateRepoRequest::has_repo() const {
  return this != internal_default_instance() && repo_ != NULL;
}
inline void CreateRepoRequest::clear_repo() {
  if (GetArenaNoVirtual() == NULL && repo_ != NULL) {
    delete repo_;
  }
  repo_ = NULL;
}
inline const ::google::devtools::sourcerepo::v1::Repo& CreateRepoRequest::repo() const {
  const ::google::devtools::sourcerepo::v1::Repo* p = repo_;
  // @@protoc_insertion_point(field_get:google.devtools.sourcerepo.v1.CreateRepoRequest.repo)
  return p != NULL ? *p : *reinterpret_cast<const ::google::devtools::sourcerepo::v1::Repo*>(
      &::google::devtools::sourcerepo::v1::_Repo_default_instance_);
}
inline ::google::devtools::sourcerepo::v1::Repo* CreateRepoRequest::release_repo() {
  // @@protoc_insertion_point(field_release:google.devtools.sourcerepo.v1.CreateRepoRequest.repo)
  
  ::google::devtools::sourcerepo::v1::Repo* temp = repo_;
  repo_ = NULL;
  return temp;
}
inline ::google::devtools::sourcerepo::v1::Repo* CreateRepoRequest::mutable_repo() {
  
  if (repo_ == NULL) {
    repo_ = new ::google::devtools::sourcerepo::v1::Repo;
  }
  // @@protoc_insertion_point(field_mutable:google.devtools.sourcerepo.v1.CreateRepoRequest.repo)
  return repo_;
}
inline void CreateRepoRequest::set_allocated_repo(::google::devtools::sourcerepo::v1::Repo* repo) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete repo_;
  }
  if (repo) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      repo = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, repo, submessage_arena);
    }
    
  } else {
    
  }
  repo_ = repo;
  // @@protoc_insertion_point(field_set_allocated:google.devtools.sourcerepo.v1.CreateRepoRequest.repo)
}

// -------------------------------------------------------------------

// DeleteRepoRequest

// string name = 1;
inline void DeleteRepoRequest::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DeleteRepoRequest::name() const {
  // @@protoc_insertion_point(field_get:google.devtools.sourcerepo.v1.DeleteRepoRequest.name)
  return name_.GetNoArena();
}
inline void DeleteRepoRequest::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.devtools.sourcerepo.v1.DeleteRepoRequest.name)
}
#if LANG_CXX11
inline void DeleteRepoRequest::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.devtools.sourcerepo.v1.DeleteRepoRequest.name)
}
#endif
inline void DeleteRepoRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.devtools.sourcerepo.v1.DeleteRepoRequest.name)
}
inline void DeleteRepoRequest::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.devtools.sourcerepo.v1.DeleteRepoRequest.name)
}
inline ::std::string* DeleteRepoRequest::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:google.devtools.sourcerepo.v1.DeleteRepoRequest.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DeleteRepoRequest::release_name() {
  // @@protoc_insertion_point(field_release:google.devtools.sourcerepo.v1.DeleteRepoRequest.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DeleteRepoRequest::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:google.devtools.sourcerepo.v1.DeleteRepoRequest.name)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace sourcerepo
}  // namespace devtools
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_google_2fdevtools_2fsourcerepo_2fv1_2fsourcerepo_2eproto__INCLUDED
