// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/datastore/v1beta3/datastore.proto

#ifndef PROTOBUF_google_2fdatastore_2fv1beta3_2fdatastore_2eproto__INCLUDED
#define PROTOBUF_google_2fdatastore_2fv1beta3_2fdatastore_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "google/api/annotations.pb.h"
#include "google/datastore/v1beta3/entity.pb.h"
#include "google/datastore/v1beta3/query.pb.h"
// @@protoc_insertion_point(includes)

namespace protobuf_google_2fdatastore_2fv1beta3_2fdatastore_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[18];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsLookupRequestImpl();
void InitDefaultsLookupRequest();
void InitDefaultsLookupResponseImpl();
void InitDefaultsLookupResponse();
void InitDefaultsRunQueryRequestImpl();
void InitDefaultsRunQueryRequest();
void InitDefaultsRunQueryResponseImpl();
void InitDefaultsRunQueryResponse();
void InitDefaultsBeginTransactionRequestImpl();
void InitDefaultsBeginTransactionRequest();
void InitDefaultsBeginTransactionResponseImpl();
void InitDefaultsBeginTransactionResponse();
void InitDefaultsRollbackRequestImpl();
void InitDefaultsRollbackRequest();
void InitDefaultsRollbackResponseImpl();
void InitDefaultsRollbackResponse();
void InitDefaultsCommitRequestImpl();
void InitDefaultsCommitRequest();
void InitDefaultsCommitResponseImpl();
void InitDefaultsCommitResponse();
void InitDefaultsAllocateIdsRequestImpl();
void InitDefaultsAllocateIdsRequest();
void InitDefaultsAllocateIdsResponseImpl();
void InitDefaultsAllocateIdsResponse();
void InitDefaultsMutationImpl();
void InitDefaultsMutation();
void InitDefaultsMutationResultImpl();
void InitDefaultsMutationResult();
void InitDefaultsReadOptionsImpl();
void InitDefaultsReadOptions();
void InitDefaultsTransactionOptions_ReadWriteImpl();
void InitDefaultsTransactionOptions_ReadWrite();
void InitDefaultsTransactionOptions_ReadOnlyImpl();
void InitDefaultsTransactionOptions_ReadOnly();
void InitDefaultsTransactionOptionsImpl();
void InitDefaultsTransactionOptions();
inline void InitDefaults() {
  InitDefaultsLookupRequest();
  InitDefaultsLookupResponse();
  InitDefaultsRunQueryRequest();
  InitDefaultsRunQueryResponse();
  InitDefaultsBeginTransactionRequest();
  InitDefaultsBeginTransactionResponse();
  InitDefaultsRollbackRequest();
  InitDefaultsRollbackResponse();
  InitDefaultsCommitRequest();
  InitDefaultsCommitResponse();
  InitDefaultsAllocateIdsRequest();
  InitDefaultsAllocateIdsResponse();
  InitDefaultsMutation();
  InitDefaultsMutationResult();
  InitDefaultsReadOptions();
  InitDefaultsTransactionOptions_ReadWrite();
  InitDefaultsTransactionOptions_ReadOnly();
  InitDefaultsTransactionOptions();
}
}  // namespace protobuf_google_2fdatastore_2fv1beta3_2fdatastore_2eproto
namespace google {
namespace datastore {
namespace v1beta3 {
class AllocateIdsRequest;
class AllocateIdsRequestDefaultTypeInternal;
extern AllocateIdsRequestDefaultTypeInternal _AllocateIdsRequest_default_instance_;
class AllocateIdsResponse;
class AllocateIdsResponseDefaultTypeInternal;
extern AllocateIdsResponseDefaultTypeInternal _AllocateIdsResponse_default_instance_;
class BeginTransactionRequest;
class BeginTransactionRequestDefaultTypeInternal;
extern BeginTransactionRequestDefaultTypeInternal _BeginTransactionRequest_default_instance_;
class BeginTransactionResponse;
class BeginTransactionResponseDefaultTypeInternal;
extern BeginTransactionResponseDefaultTypeInternal _BeginTransactionResponse_default_instance_;
class CommitRequest;
class CommitRequestDefaultTypeInternal;
extern CommitRequestDefaultTypeInternal _CommitRequest_default_instance_;
class CommitResponse;
class CommitResponseDefaultTypeInternal;
extern CommitResponseDefaultTypeInternal _CommitResponse_default_instance_;
class LookupRequest;
class LookupRequestDefaultTypeInternal;
extern LookupRequestDefaultTypeInternal _LookupRequest_default_instance_;
class LookupResponse;
class LookupResponseDefaultTypeInternal;
extern LookupResponseDefaultTypeInternal _LookupResponse_default_instance_;
class Mutation;
class MutationDefaultTypeInternal;
extern MutationDefaultTypeInternal _Mutation_default_instance_;
class MutationResult;
class MutationResultDefaultTypeInternal;
extern MutationResultDefaultTypeInternal _MutationResult_default_instance_;
class ReadOptions;
class ReadOptionsDefaultTypeInternal;
extern ReadOptionsDefaultTypeInternal _ReadOptions_default_instance_;
class RollbackRequest;
class RollbackRequestDefaultTypeInternal;
extern RollbackRequestDefaultTypeInternal _RollbackRequest_default_instance_;
class RollbackResponse;
class RollbackResponseDefaultTypeInternal;
extern RollbackResponseDefaultTypeInternal _RollbackResponse_default_instance_;
class RunQueryRequest;
class RunQueryRequestDefaultTypeInternal;
extern RunQueryRequestDefaultTypeInternal _RunQueryRequest_default_instance_;
class RunQueryResponse;
class RunQueryResponseDefaultTypeInternal;
extern RunQueryResponseDefaultTypeInternal _RunQueryResponse_default_instance_;
class TransactionOptions;
class TransactionOptionsDefaultTypeInternal;
extern TransactionOptionsDefaultTypeInternal _TransactionOptions_default_instance_;
class TransactionOptions_ReadOnly;
class TransactionOptions_ReadOnlyDefaultTypeInternal;
extern TransactionOptions_ReadOnlyDefaultTypeInternal _TransactionOptions_ReadOnly_default_instance_;
class TransactionOptions_ReadWrite;
class TransactionOptions_ReadWriteDefaultTypeInternal;
extern TransactionOptions_ReadWriteDefaultTypeInternal _TransactionOptions_ReadWrite_default_instance_;
}  // namespace v1beta3
}  // namespace datastore
}  // namespace google
namespace google {
namespace datastore {
namespace v1beta3 {

enum CommitRequest_Mode {
  CommitRequest_Mode_MODE_UNSPECIFIED = 0,
  CommitRequest_Mode_TRANSACTIONAL = 1,
  CommitRequest_Mode_NON_TRANSACTIONAL = 2,
  CommitRequest_Mode_CommitRequest_Mode_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  CommitRequest_Mode_CommitRequest_Mode_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool CommitRequest_Mode_IsValid(int value);
const CommitRequest_Mode CommitRequest_Mode_Mode_MIN = CommitRequest_Mode_MODE_UNSPECIFIED;
const CommitRequest_Mode CommitRequest_Mode_Mode_MAX = CommitRequest_Mode_NON_TRANSACTIONAL;
const int CommitRequest_Mode_Mode_ARRAYSIZE = CommitRequest_Mode_Mode_MAX + 1;

const ::google::protobuf::EnumDescriptor* CommitRequest_Mode_descriptor();
inline const ::std::string& CommitRequest_Mode_Name(CommitRequest_Mode value) {
  return ::google::protobuf::internal::NameOfEnum(
    CommitRequest_Mode_descriptor(), value);
}
inline bool CommitRequest_Mode_Parse(
    const ::std::string& name, CommitRequest_Mode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CommitRequest_Mode>(
    CommitRequest_Mode_descriptor(), name, value);
}
enum ReadOptions_ReadConsistency {
  ReadOptions_ReadConsistency_READ_CONSISTENCY_UNSPECIFIED = 0,
  ReadOptions_ReadConsistency_STRONG = 1,
  ReadOptions_ReadConsistency_EVENTUAL = 2,
  ReadOptions_ReadConsistency_ReadOptions_ReadConsistency_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  ReadOptions_ReadConsistency_ReadOptions_ReadConsistency_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool ReadOptions_ReadConsistency_IsValid(int value);
const ReadOptions_ReadConsistency ReadOptions_ReadConsistency_ReadConsistency_MIN = ReadOptions_ReadConsistency_READ_CONSISTENCY_UNSPECIFIED;
const ReadOptions_ReadConsistency ReadOptions_ReadConsistency_ReadConsistency_MAX = ReadOptions_ReadConsistency_EVENTUAL;
const int ReadOptions_ReadConsistency_ReadConsistency_ARRAYSIZE = ReadOptions_ReadConsistency_ReadConsistency_MAX + 1;

const ::google::protobuf::EnumDescriptor* ReadOptions_ReadConsistency_descriptor();
inline const ::std::string& ReadOptions_ReadConsistency_Name(ReadOptions_ReadConsistency value) {
  return ::google::protobuf::internal::NameOfEnum(
    ReadOptions_ReadConsistency_descriptor(), value);
}
inline bool ReadOptions_ReadConsistency_Parse(
    const ::std::string& name, ReadOptions_ReadConsistency* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ReadOptions_ReadConsistency>(
    ReadOptions_ReadConsistency_descriptor(), name, value);
}
// ===================================================================

class LookupRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.datastore.v1beta3.LookupRequest) */ {
 public:
  LookupRequest();
  virtual ~LookupRequest();

  LookupRequest(const LookupRequest& from);

  inline LookupRequest& operator=(const LookupRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LookupRequest(LookupRequest&& from) noexcept
    : LookupRequest() {
    *this = ::std::move(from);
  }

  inline LookupRequest& operator=(LookupRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const LookupRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LookupRequest* internal_default_instance() {
    return reinterpret_cast<const LookupRequest*>(
               &_LookupRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(LookupRequest* other);
  friend void swap(LookupRequest& a, LookupRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LookupRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  LookupRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const LookupRequest& from);
  void MergeFrom(const LookupRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(LookupRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .google.datastore.v1beta3.Key keys = 3;
  int keys_size() const;
  void clear_keys();
  static const int kKeysFieldNumber = 3;
  const ::google::datastore::v1beta3::Key& keys(int index) const;
  ::google::datastore::v1beta3::Key* mutable_keys(int index);
  ::google::datastore::v1beta3::Key* add_keys();
  ::google::protobuf::RepeatedPtrField< ::google::datastore::v1beta3::Key >*
      mutable_keys();
  const ::google::protobuf::RepeatedPtrField< ::google::datastore::v1beta3::Key >&
      keys() const;

  // string project_id = 8;
  void clear_project_id();
  static const int kProjectIdFieldNumber = 8;
  const ::std::string& project_id() const;
  void set_project_id(const ::std::string& value);
  #if LANG_CXX11
  void set_project_id(::std::string&& value);
  #endif
  void set_project_id(const char* value);
  void set_project_id(const char* value, size_t size);
  ::std::string* mutable_project_id();
  ::std::string* release_project_id();
  void set_allocated_project_id(::std::string* project_id);

  // .google.datastore.v1beta3.ReadOptions read_options = 1;
  bool has_read_options() const;
  void clear_read_options();
  static const int kReadOptionsFieldNumber = 1;
  const ::google::datastore::v1beta3::ReadOptions& read_options() const;
  ::google::datastore::v1beta3::ReadOptions* release_read_options();
  ::google::datastore::v1beta3::ReadOptions* mutable_read_options();
  void set_allocated_read_options(::google::datastore::v1beta3::ReadOptions* read_options);

  // @@protoc_insertion_point(class_scope:google.datastore.v1beta3.LookupRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::google::datastore::v1beta3::Key > keys_;
  ::google::protobuf::internal::ArenaStringPtr project_id_;
  ::google::datastore::v1beta3::ReadOptions* read_options_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fdatastore_2fv1beta3_2fdatastore_2eproto::TableStruct;
  friend void ::protobuf_google_2fdatastore_2fv1beta3_2fdatastore_2eproto::InitDefaultsLookupRequestImpl();
};
// -------------------------------------------------------------------

class LookupResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.datastore.v1beta3.LookupResponse) */ {
 public:
  LookupResponse();
  virtual ~LookupResponse();

  LookupResponse(const LookupResponse& from);

  inline LookupResponse& operator=(const LookupResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LookupResponse(LookupResponse&& from) noexcept
    : LookupResponse() {
    *this = ::std::move(from);
  }

  inline LookupResponse& operator=(LookupResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const LookupResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LookupResponse* internal_default_instance() {
    return reinterpret_cast<const LookupResponse*>(
               &_LookupResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(LookupResponse* other);
  friend void swap(LookupResponse& a, LookupResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LookupResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  LookupResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const LookupResponse& from);
  void MergeFrom(const LookupResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(LookupResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .google.datastore.v1beta3.EntityResult found = 1;
  int found_size() const;
  void clear_found();
  static const int kFoundFieldNumber = 1;
  const ::google::datastore::v1beta3::EntityResult& found(int index) const;
  ::google::datastore::v1beta3::EntityResult* mutable_found(int index);
  ::google::datastore::v1beta3::EntityResult* add_found();
  ::google::protobuf::RepeatedPtrField< ::google::datastore::v1beta3::EntityResult >*
      mutable_found();
  const ::google::protobuf::RepeatedPtrField< ::google::datastore::v1beta3::EntityResult >&
      found() const;

  // repeated .google.datastore.v1beta3.EntityResult missing = 2;
  int missing_size() const;
  void clear_missing();
  static const int kMissingFieldNumber = 2;
  const ::google::datastore::v1beta3::EntityResult& missing(int index) const;
  ::google::datastore::v1beta3::EntityResult* mutable_missing(int index);
  ::google::datastore::v1beta3::EntityResult* add_missing();
  ::google::protobuf::RepeatedPtrField< ::google::datastore::v1beta3::EntityResult >*
      mutable_missing();
  const ::google::protobuf::RepeatedPtrField< ::google::datastore::v1beta3::EntityResult >&
      missing() const;

  // repeated .google.datastore.v1beta3.Key deferred = 3;
  int deferred_size() const;
  void clear_deferred();
  static const int kDeferredFieldNumber = 3;
  const ::google::datastore::v1beta3::Key& deferred(int index) const;
  ::google::datastore::v1beta3::Key* mutable_deferred(int index);
  ::google::datastore::v1beta3::Key* add_deferred();
  ::google::protobuf::RepeatedPtrField< ::google::datastore::v1beta3::Key >*
      mutable_deferred();
  const ::google::protobuf::RepeatedPtrField< ::google::datastore::v1beta3::Key >&
      deferred() const;

  // @@protoc_insertion_point(class_scope:google.datastore.v1beta3.LookupResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::google::datastore::v1beta3::EntityResult > found_;
  ::google::protobuf::RepeatedPtrField< ::google::datastore::v1beta3::EntityResult > missing_;
  ::google::protobuf::RepeatedPtrField< ::google::datastore::v1beta3::Key > deferred_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fdatastore_2fv1beta3_2fdatastore_2eproto::TableStruct;
  friend void ::protobuf_google_2fdatastore_2fv1beta3_2fdatastore_2eproto::InitDefaultsLookupResponseImpl();
};
// -------------------------------------------------------------------

class RunQueryRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.datastore.v1beta3.RunQueryRequest) */ {
 public:
  RunQueryRequest();
  virtual ~RunQueryRequest();

  RunQueryRequest(const RunQueryRequest& from);

  inline RunQueryRequest& operator=(const RunQueryRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RunQueryRequest(RunQueryRequest&& from) noexcept
    : RunQueryRequest() {
    *this = ::std::move(from);
  }

  inline RunQueryRequest& operator=(RunQueryRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RunQueryRequest& default_instance();

  enum QueryTypeCase {
    kQuery = 3,
    kGqlQuery = 7,
    QUERY_TYPE_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RunQueryRequest* internal_default_instance() {
    return reinterpret_cast<const RunQueryRequest*>(
               &_RunQueryRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(RunQueryRequest* other);
  friend void swap(RunQueryRequest& a, RunQueryRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RunQueryRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  RunQueryRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const RunQueryRequest& from);
  void MergeFrom(const RunQueryRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(RunQueryRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string project_id = 8;
  void clear_project_id();
  static const int kProjectIdFieldNumber = 8;
  const ::std::string& project_id() const;
  void set_project_id(const ::std::string& value);
  #if LANG_CXX11
  void set_project_id(::std::string&& value);
  #endif
  void set_project_id(const char* value);
  void set_project_id(const char* value, size_t size);
  ::std::string* mutable_project_id();
  ::std::string* release_project_id();
  void set_allocated_project_id(::std::string* project_id);

  // .google.datastore.v1beta3.ReadOptions read_options = 1;
  bool has_read_options() const;
  void clear_read_options();
  static const int kReadOptionsFieldNumber = 1;
  const ::google::datastore::v1beta3::ReadOptions& read_options() const;
  ::google::datastore::v1beta3::ReadOptions* release_read_options();
  ::google::datastore::v1beta3::ReadOptions* mutable_read_options();
  void set_allocated_read_options(::google::datastore::v1beta3::ReadOptions* read_options);

  // .google.datastore.v1beta3.PartitionId partition_id = 2;
  bool has_partition_id() const;
  void clear_partition_id();
  static const int kPartitionIdFieldNumber = 2;
  const ::google::datastore::v1beta3::PartitionId& partition_id() const;
  ::google::datastore::v1beta3::PartitionId* release_partition_id();
  ::google::datastore::v1beta3::PartitionId* mutable_partition_id();
  void set_allocated_partition_id(::google::datastore::v1beta3::PartitionId* partition_id);

  // .google.datastore.v1beta3.Query query = 3;
  bool has_query() const;
  void clear_query();
  static const int kQueryFieldNumber = 3;
  const ::google::datastore::v1beta3::Query& query() const;
  ::google::datastore::v1beta3::Query* release_query();
  ::google::datastore::v1beta3::Query* mutable_query();
  void set_allocated_query(::google::datastore::v1beta3::Query* query);

  // .google.datastore.v1beta3.GqlQuery gql_query = 7;
  bool has_gql_query() const;
  void clear_gql_query();
  static const int kGqlQueryFieldNumber = 7;
  const ::google::datastore::v1beta3::GqlQuery& gql_query() const;
  ::google::datastore::v1beta3::GqlQuery* release_gql_query();
  ::google::datastore::v1beta3::GqlQuery* mutable_gql_query();
  void set_allocated_gql_query(::google::datastore::v1beta3::GqlQuery* gql_query);

  QueryTypeCase query_type_case() const;
  // @@protoc_insertion_point(class_scope:google.datastore.v1beta3.RunQueryRequest)
 private:
  void set_has_query();
  void set_has_gql_query();

  inline bool has_query_type() const;
  void clear_query_type();
  inline void clear_has_query_type();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr project_id_;
  ::google::datastore::v1beta3::ReadOptions* read_options_;
  ::google::datastore::v1beta3::PartitionId* partition_id_;
  union QueryTypeUnion {
    QueryTypeUnion() {}
    ::google::datastore::v1beta3::Query* query_;
    ::google::datastore::v1beta3::GqlQuery* gql_query_;
  } query_type_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::protobuf_google_2fdatastore_2fv1beta3_2fdatastore_2eproto::TableStruct;
  friend void ::protobuf_google_2fdatastore_2fv1beta3_2fdatastore_2eproto::InitDefaultsRunQueryRequestImpl();
};
// -------------------------------------------------------------------

class RunQueryResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.datastore.v1beta3.RunQueryResponse) */ {
 public:
  RunQueryResponse();
  virtual ~RunQueryResponse();

  RunQueryResponse(const RunQueryResponse& from);

  inline RunQueryResponse& operator=(const RunQueryResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RunQueryResponse(RunQueryResponse&& from) noexcept
    : RunQueryResponse() {
    *this = ::std::move(from);
  }

  inline RunQueryResponse& operator=(RunQueryResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RunQueryResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RunQueryResponse* internal_default_instance() {
    return reinterpret_cast<const RunQueryResponse*>(
               &_RunQueryResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(RunQueryResponse* other);
  friend void swap(RunQueryResponse& a, RunQueryResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RunQueryResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  RunQueryResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const RunQueryResponse& from);
  void MergeFrom(const RunQueryResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(RunQueryResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.datastore.v1beta3.QueryResultBatch batch = 1;
  bool has_batch() const;
  void clear_batch();
  static const int kBatchFieldNumber = 1;
  const ::google::datastore::v1beta3::QueryResultBatch& batch() const;
  ::google::datastore::v1beta3::QueryResultBatch* release_batch();
  ::google::datastore::v1beta3::QueryResultBatch* mutable_batch();
  void set_allocated_batch(::google::datastore::v1beta3::QueryResultBatch* batch);

  // .google.datastore.v1beta3.Query query = 2;
  bool has_query() const;
  void clear_query();
  static const int kQueryFieldNumber = 2;
  const ::google::datastore::v1beta3::Query& query() const;
  ::google::datastore::v1beta3::Query* release_query();
  ::google::datastore::v1beta3::Query* mutable_query();
  void set_allocated_query(::google::datastore::v1beta3::Query* query);

  // @@protoc_insertion_point(class_scope:google.datastore.v1beta3.RunQueryResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::datastore::v1beta3::QueryResultBatch* batch_;
  ::google::datastore::v1beta3::Query* query_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fdatastore_2fv1beta3_2fdatastore_2eproto::TableStruct;
  friend void ::protobuf_google_2fdatastore_2fv1beta3_2fdatastore_2eproto::InitDefaultsRunQueryResponseImpl();
};
// -------------------------------------------------------------------

class BeginTransactionRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.datastore.v1beta3.BeginTransactionRequest) */ {
 public:
  BeginTransactionRequest();
  virtual ~BeginTransactionRequest();

  BeginTransactionRequest(const BeginTransactionRequest& from);

  inline BeginTransactionRequest& operator=(const BeginTransactionRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  BeginTransactionRequest(BeginTransactionRequest&& from) noexcept
    : BeginTransactionRequest() {
    *this = ::std::move(from);
  }

  inline BeginTransactionRequest& operator=(BeginTransactionRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const BeginTransactionRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BeginTransactionRequest* internal_default_instance() {
    return reinterpret_cast<const BeginTransactionRequest*>(
               &_BeginTransactionRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(BeginTransactionRequest* other);
  friend void swap(BeginTransactionRequest& a, BeginTransactionRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BeginTransactionRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  BeginTransactionRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const BeginTransactionRequest& from);
  void MergeFrom(const BeginTransactionRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(BeginTransactionRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string project_id = 8;
  void clear_project_id();
  static const int kProjectIdFieldNumber = 8;
  const ::std::string& project_id() const;
  void set_project_id(const ::std::string& value);
  #if LANG_CXX11
  void set_project_id(::std::string&& value);
  #endif
  void set_project_id(const char* value);
  void set_project_id(const char* value, size_t size);
  ::std::string* mutable_project_id();
  ::std::string* release_project_id();
  void set_allocated_project_id(::std::string* project_id);

  // .google.datastore.v1beta3.TransactionOptions transaction_options = 10;
  bool has_transaction_options() const;
  void clear_transaction_options();
  static const int kTransactionOptionsFieldNumber = 10;
  const ::google::datastore::v1beta3::TransactionOptions& transaction_options() const;
  ::google::datastore::v1beta3::TransactionOptions* release_transaction_options();
  ::google::datastore::v1beta3::TransactionOptions* mutable_transaction_options();
  void set_allocated_transaction_options(::google::datastore::v1beta3::TransactionOptions* transaction_options);

  // @@protoc_insertion_point(class_scope:google.datastore.v1beta3.BeginTransactionRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr project_id_;
  ::google::datastore::v1beta3::TransactionOptions* transaction_options_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fdatastore_2fv1beta3_2fdatastore_2eproto::TableStruct;
  friend void ::protobuf_google_2fdatastore_2fv1beta3_2fdatastore_2eproto::InitDefaultsBeginTransactionRequestImpl();
};
// -------------------------------------------------------------------

class BeginTransactionResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.datastore.v1beta3.BeginTransactionResponse) */ {
 public:
  BeginTransactionResponse();
  virtual ~BeginTransactionResponse();

  BeginTransactionResponse(const BeginTransactionResponse& from);

  inline BeginTransactionResponse& operator=(const BeginTransactionResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  BeginTransactionResponse(BeginTransactionResponse&& from) noexcept
    : BeginTransactionResponse() {
    *this = ::std::move(from);
  }

  inline BeginTransactionResponse& operator=(BeginTransactionResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const BeginTransactionResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BeginTransactionResponse* internal_default_instance() {
    return reinterpret_cast<const BeginTransactionResponse*>(
               &_BeginTransactionResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    5;

  void Swap(BeginTransactionResponse* other);
  friend void swap(BeginTransactionResponse& a, BeginTransactionResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BeginTransactionResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  BeginTransactionResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const BeginTransactionResponse& from);
  void MergeFrom(const BeginTransactionResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(BeginTransactionResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes transaction = 1;
  void clear_transaction();
  static const int kTransactionFieldNumber = 1;
  const ::std::string& transaction() const;
  void set_transaction(const ::std::string& value);
  #if LANG_CXX11
  void set_transaction(::std::string&& value);
  #endif
  void set_transaction(const char* value);
  void set_transaction(const void* value, size_t size);
  ::std::string* mutable_transaction();
  ::std::string* release_transaction();
  void set_allocated_transaction(::std::string* transaction);

  // @@protoc_insertion_point(class_scope:google.datastore.v1beta3.BeginTransactionResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr transaction_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fdatastore_2fv1beta3_2fdatastore_2eproto::TableStruct;
  friend void ::protobuf_google_2fdatastore_2fv1beta3_2fdatastore_2eproto::InitDefaultsBeginTransactionResponseImpl();
};
// -------------------------------------------------------------------

class RollbackRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.datastore.v1beta3.RollbackRequest) */ {
 public:
  RollbackRequest();
  virtual ~RollbackRequest();

  RollbackRequest(const RollbackRequest& from);

  inline RollbackRequest& operator=(const RollbackRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RollbackRequest(RollbackRequest&& from) noexcept
    : RollbackRequest() {
    *this = ::std::move(from);
  }

  inline RollbackRequest& operator=(RollbackRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RollbackRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RollbackRequest* internal_default_instance() {
    return reinterpret_cast<const RollbackRequest*>(
               &_RollbackRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    6;

  void Swap(RollbackRequest* other);
  friend void swap(RollbackRequest& a, RollbackRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RollbackRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  RollbackRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const RollbackRequest& from);
  void MergeFrom(const RollbackRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(RollbackRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes transaction = 1;
  void clear_transaction();
  static const int kTransactionFieldNumber = 1;
  const ::std::string& transaction() const;
  void set_transaction(const ::std::string& value);
  #if LANG_CXX11
  void set_transaction(::std::string&& value);
  #endif
  void set_transaction(const char* value);
  void set_transaction(const void* value, size_t size);
  ::std::string* mutable_transaction();
  ::std::string* release_transaction();
  void set_allocated_transaction(::std::string* transaction);

  // string project_id = 8;
  void clear_project_id();
  static const int kProjectIdFieldNumber = 8;
  const ::std::string& project_id() const;
  void set_project_id(const ::std::string& value);
  #if LANG_CXX11
  void set_project_id(::std::string&& value);
  #endif
  void set_project_id(const char* value);
  void set_project_id(const char* value, size_t size);
  ::std::string* mutable_project_id();
  ::std::string* release_project_id();
  void set_allocated_project_id(::std::string* project_id);

  // @@protoc_insertion_point(class_scope:google.datastore.v1beta3.RollbackRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr transaction_;
  ::google::protobuf::internal::ArenaStringPtr project_id_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fdatastore_2fv1beta3_2fdatastore_2eproto::TableStruct;
  friend void ::protobuf_google_2fdatastore_2fv1beta3_2fdatastore_2eproto::InitDefaultsRollbackRequestImpl();
};
// -------------------------------------------------------------------

class RollbackResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.datastore.v1beta3.RollbackResponse) */ {
 public:
  RollbackResponse();
  virtual ~RollbackResponse();

  RollbackResponse(const RollbackResponse& from);

  inline RollbackResponse& operator=(const RollbackResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RollbackResponse(RollbackResponse&& from) noexcept
    : RollbackResponse() {
    *this = ::std::move(from);
  }

  inline RollbackResponse& operator=(RollbackResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RollbackResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RollbackResponse* internal_default_instance() {
    return reinterpret_cast<const RollbackResponse*>(
               &_RollbackResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    7;

  void Swap(RollbackResponse* other);
  friend void swap(RollbackResponse& a, RollbackResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RollbackResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  RollbackResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const RollbackResponse& from);
  void MergeFrom(const RollbackResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(RollbackResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:google.datastore.v1beta3.RollbackResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fdatastore_2fv1beta3_2fdatastore_2eproto::TableStruct;
  friend void ::protobuf_google_2fdatastore_2fv1beta3_2fdatastore_2eproto::InitDefaultsRollbackResponseImpl();
};
// -------------------------------------------------------------------

class CommitRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.datastore.v1beta3.CommitRequest) */ {
 public:
  CommitRequest();
  virtual ~CommitRequest();

  CommitRequest(const CommitRequest& from);

  inline CommitRequest& operator=(const CommitRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CommitRequest(CommitRequest&& from) noexcept
    : CommitRequest() {
    *this = ::std::move(from);
  }

  inline CommitRequest& operator=(CommitRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CommitRequest& default_instance();

  enum TransactionSelectorCase {
    kTransaction = 1,
    TRANSACTION_SELECTOR_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CommitRequest* internal_default_instance() {
    return reinterpret_cast<const CommitRequest*>(
               &_CommitRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    8;

  void Swap(CommitRequest* other);
  friend void swap(CommitRequest& a, CommitRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CommitRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  CommitRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CommitRequest& from);
  void MergeFrom(const CommitRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CommitRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef CommitRequest_Mode Mode;
  static const Mode MODE_UNSPECIFIED =
    CommitRequest_Mode_MODE_UNSPECIFIED;
  static const Mode TRANSACTIONAL =
    CommitRequest_Mode_TRANSACTIONAL;
  static const Mode NON_TRANSACTIONAL =
    CommitRequest_Mode_NON_TRANSACTIONAL;
  static inline bool Mode_IsValid(int value) {
    return CommitRequest_Mode_IsValid(value);
  }
  static const Mode Mode_MIN =
    CommitRequest_Mode_Mode_MIN;
  static const Mode Mode_MAX =
    CommitRequest_Mode_Mode_MAX;
  static const int Mode_ARRAYSIZE =
    CommitRequest_Mode_Mode_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Mode_descriptor() {
    return CommitRequest_Mode_descriptor();
  }
  static inline const ::std::string& Mode_Name(Mode value) {
    return CommitRequest_Mode_Name(value);
  }
  static inline bool Mode_Parse(const ::std::string& name,
      Mode* value) {
    return CommitRequest_Mode_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated .google.datastore.v1beta3.Mutation mutations = 6;
  int mutations_size() const;
  void clear_mutations();
  static const int kMutationsFieldNumber = 6;
  const ::google::datastore::v1beta3::Mutation& mutations(int index) const;
  ::google::datastore::v1beta3::Mutation* mutable_mutations(int index);
  ::google::datastore::v1beta3::Mutation* add_mutations();
  ::google::protobuf::RepeatedPtrField< ::google::datastore::v1beta3::Mutation >*
      mutable_mutations();
  const ::google::protobuf::RepeatedPtrField< ::google::datastore::v1beta3::Mutation >&
      mutations() const;

  // string project_id = 8;
  void clear_project_id();
  static const int kProjectIdFieldNumber = 8;
  const ::std::string& project_id() const;
  void set_project_id(const ::std::string& value);
  #if LANG_CXX11
  void set_project_id(::std::string&& value);
  #endif
  void set_project_id(const char* value);
  void set_project_id(const char* value, size_t size);
  ::std::string* mutable_project_id();
  ::std::string* release_project_id();
  void set_allocated_project_id(::std::string* project_id);

  // .google.datastore.v1beta3.CommitRequest.Mode mode = 5;
  void clear_mode();
  static const int kModeFieldNumber = 5;
  ::google::datastore::v1beta3::CommitRequest_Mode mode() const;
  void set_mode(::google::datastore::v1beta3::CommitRequest_Mode value);

  // bytes transaction = 1;
  private:
  bool has_transaction() const;
  public:
  void clear_transaction();
  static const int kTransactionFieldNumber = 1;
  const ::std::string& transaction() const;
  void set_transaction(const ::std::string& value);
  #if LANG_CXX11
  void set_transaction(::std::string&& value);
  #endif
  void set_transaction(const char* value);
  void set_transaction(const void* value, size_t size);
  ::std::string* mutable_transaction();
  ::std::string* release_transaction();
  void set_allocated_transaction(::std::string* transaction);

  TransactionSelectorCase transaction_selector_case() const;
  // @@protoc_insertion_point(class_scope:google.datastore.v1beta3.CommitRequest)
 private:
  void set_has_transaction();

  inline bool has_transaction_selector() const;
  void clear_transaction_selector();
  inline void clear_has_transaction_selector();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::google::datastore::v1beta3::Mutation > mutations_;
  ::google::protobuf::internal::ArenaStringPtr project_id_;
  int mode_;
  union TransactionSelectorUnion {
    TransactionSelectorUnion() {}
    ::google::protobuf::internal::ArenaStringPtr transaction_;
  } transaction_selector_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::protobuf_google_2fdatastore_2fv1beta3_2fdatastore_2eproto::TableStruct;
  friend void ::protobuf_google_2fdatastore_2fv1beta3_2fdatastore_2eproto::InitDefaultsCommitRequestImpl();
};
// -------------------------------------------------------------------

class CommitResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.datastore.v1beta3.CommitResponse) */ {
 public:
  CommitResponse();
  virtual ~CommitResponse();

  CommitResponse(const CommitResponse& from);

  inline CommitResponse& operator=(const CommitResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CommitResponse(CommitResponse&& from) noexcept
    : CommitResponse() {
    *this = ::std::move(from);
  }

  inline CommitResponse& operator=(CommitResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CommitResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CommitResponse* internal_default_instance() {
    return reinterpret_cast<const CommitResponse*>(
               &_CommitResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    9;

  void Swap(CommitResponse* other);
  friend void swap(CommitResponse& a, CommitResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CommitResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  CommitResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CommitResponse& from);
  void MergeFrom(const CommitResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CommitResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .google.datastore.v1beta3.MutationResult mutation_results = 3;
  int mutation_results_size() const;
  void clear_mutation_results();
  static const int kMutationResultsFieldNumber = 3;
  const ::google::datastore::v1beta3::MutationResult& mutation_results(int index) const;
  ::google::datastore::v1beta3::MutationResult* mutable_mutation_results(int index);
  ::google::datastore::v1beta3::MutationResult* add_mutation_results();
  ::google::protobuf::RepeatedPtrField< ::google::datastore::v1beta3::MutationResult >*
      mutable_mutation_results();
  const ::google::protobuf::RepeatedPtrField< ::google::datastore::v1beta3::MutationResult >&
      mutation_results() const;

  // int32 index_updates = 4;
  void clear_index_updates();
  static const int kIndexUpdatesFieldNumber = 4;
  ::google::protobuf::int32 index_updates() const;
  void set_index_updates(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:google.datastore.v1beta3.CommitResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::google::datastore::v1beta3::MutationResult > mutation_results_;
  ::google::protobuf::int32 index_updates_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fdatastore_2fv1beta3_2fdatastore_2eproto::TableStruct;
  friend void ::protobuf_google_2fdatastore_2fv1beta3_2fdatastore_2eproto::InitDefaultsCommitResponseImpl();
};
// -------------------------------------------------------------------

class AllocateIdsRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.datastore.v1beta3.AllocateIdsRequest) */ {
 public:
  AllocateIdsRequest();
  virtual ~AllocateIdsRequest();

  AllocateIdsRequest(const AllocateIdsRequest& from);

  inline AllocateIdsRequest& operator=(const AllocateIdsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AllocateIdsRequest(AllocateIdsRequest&& from) noexcept
    : AllocateIdsRequest() {
    *this = ::std::move(from);
  }

  inline AllocateIdsRequest& operator=(AllocateIdsRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const AllocateIdsRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AllocateIdsRequest* internal_default_instance() {
    return reinterpret_cast<const AllocateIdsRequest*>(
               &_AllocateIdsRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    10;

  void Swap(AllocateIdsRequest* other);
  friend void swap(AllocateIdsRequest& a, AllocateIdsRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AllocateIdsRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  AllocateIdsRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const AllocateIdsRequest& from);
  void MergeFrom(const AllocateIdsRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(AllocateIdsRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .google.datastore.v1beta3.Key keys = 1;
  int keys_size() const;
  void clear_keys();
  static const int kKeysFieldNumber = 1;
  const ::google::datastore::v1beta3::Key& keys(int index) const;
  ::google::datastore::v1beta3::Key* mutable_keys(int index);
  ::google::datastore::v1beta3::Key* add_keys();
  ::google::protobuf::RepeatedPtrField< ::google::datastore::v1beta3::Key >*
      mutable_keys();
  const ::google::protobuf::RepeatedPtrField< ::google::datastore::v1beta3::Key >&
      keys() const;

  // string project_id = 8;
  void clear_project_id();
  static const int kProjectIdFieldNumber = 8;
  const ::std::string& project_id() const;
  void set_project_id(const ::std::string& value);
  #if LANG_CXX11
  void set_project_id(::std::string&& value);
  #endif
  void set_project_id(const char* value);
  void set_project_id(const char* value, size_t size);
  ::std::string* mutable_project_id();
  ::std::string* release_project_id();
  void set_allocated_project_id(::std::string* project_id);

  // @@protoc_insertion_point(class_scope:google.datastore.v1beta3.AllocateIdsRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::google::datastore::v1beta3::Key > keys_;
  ::google::protobuf::internal::ArenaStringPtr project_id_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fdatastore_2fv1beta3_2fdatastore_2eproto::TableStruct;
  friend void ::protobuf_google_2fdatastore_2fv1beta3_2fdatastore_2eproto::InitDefaultsAllocateIdsRequestImpl();
};
// -------------------------------------------------------------------

class AllocateIdsResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.datastore.v1beta3.AllocateIdsResponse) */ {
 public:
  AllocateIdsResponse();
  virtual ~AllocateIdsResponse();

  AllocateIdsResponse(const AllocateIdsResponse& from);

  inline AllocateIdsResponse& operator=(const AllocateIdsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AllocateIdsResponse(AllocateIdsResponse&& from) noexcept
    : AllocateIdsResponse() {
    *this = ::std::move(from);
  }

  inline AllocateIdsResponse& operator=(AllocateIdsResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const AllocateIdsResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AllocateIdsResponse* internal_default_instance() {
    return reinterpret_cast<const AllocateIdsResponse*>(
               &_AllocateIdsResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    11;

  void Swap(AllocateIdsResponse* other);
  friend void swap(AllocateIdsResponse& a, AllocateIdsResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AllocateIdsResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  AllocateIdsResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const AllocateIdsResponse& from);
  void MergeFrom(const AllocateIdsResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(AllocateIdsResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .google.datastore.v1beta3.Key keys = 1;
  int keys_size() const;
  void clear_keys();
  static const int kKeysFieldNumber = 1;
  const ::google::datastore::v1beta3::Key& keys(int index) const;
  ::google::datastore::v1beta3::Key* mutable_keys(int index);
  ::google::datastore::v1beta3::Key* add_keys();
  ::google::protobuf::RepeatedPtrField< ::google::datastore::v1beta3::Key >*
      mutable_keys();
  const ::google::protobuf::RepeatedPtrField< ::google::datastore::v1beta3::Key >&
      keys() const;

  // @@protoc_insertion_point(class_scope:google.datastore.v1beta3.AllocateIdsResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::google::datastore::v1beta3::Key > keys_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fdatastore_2fv1beta3_2fdatastore_2eproto::TableStruct;
  friend void ::protobuf_google_2fdatastore_2fv1beta3_2fdatastore_2eproto::InitDefaultsAllocateIdsResponseImpl();
};
// -------------------------------------------------------------------

class Mutation : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.datastore.v1beta3.Mutation) */ {
 public:
  Mutation();
  virtual ~Mutation();

  Mutation(const Mutation& from);

  inline Mutation& operator=(const Mutation& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Mutation(Mutation&& from) noexcept
    : Mutation() {
    *this = ::std::move(from);
  }

  inline Mutation& operator=(Mutation&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Mutation& default_instance();

  enum OperationCase {
    kInsert = 4,
    kUpdate = 5,
    kUpsert = 6,
    kDelete = 7,
    OPERATION_NOT_SET = 0,
  };

  enum ConflictDetectionStrategyCase {
    kBaseVersion = 8,
    CONFLICT_DETECTION_STRATEGY_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Mutation* internal_default_instance() {
    return reinterpret_cast<const Mutation*>(
               &_Mutation_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    12;

  void Swap(Mutation* other);
  friend void swap(Mutation& a, Mutation& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Mutation* New() const PROTOBUF_FINAL { return New(NULL); }

  Mutation* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Mutation& from);
  void MergeFrom(const Mutation& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Mutation* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.datastore.v1beta3.Entity insert = 4;
  bool has_insert() const;
  void clear_insert();
  static const int kInsertFieldNumber = 4;
  const ::google::datastore::v1beta3::Entity& insert() const;
  ::google::datastore::v1beta3::Entity* release_insert();
  ::google::datastore::v1beta3::Entity* mutable_insert();
  void set_allocated_insert(::google::datastore::v1beta3::Entity* insert);

  // .google.datastore.v1beta3.Entity update = 5;
  bool has_update() const;
  void clear_update();
  static const int kUpdateFieldNumber = 5;
  const ::google::datastore::v1beta3::Entity& update() const;
  ::google::datastore::v1beta3::Entity* release_update();
  ::google::datastore::v1beta3::Entity* mutable_update();
  void set_allocated_update(::google::datastore::v1beta3::Entity* update);

  // .google.datastore.v1beta3.Entity upsert = 6;
  bool has_upsert() const;
  void clear_upsert();
  static const int kUpsertFieldNumber = 6;
  const ::google::datastore::v1beta3::Entity& upsert() const;
  ::google::datastore::v1beta3::Entity* release_upsert();
  ::google::datastore::v1beta3::Entity* mutable_upsert();
  void set_allocated_upsert(::google::datastore::v1beta3::Entity* upsert);

  // .google.datastore.v1beta3.Key delete = 7;
  bool has_delete_() const;
  void clear_delete_();
  static const int kDeleteFieldNumber = 7;
  const ::google::datastore::v1beta3::Key& delete_() const;
  ::google::datastore::v1beta3::Key* release_delete_();
  ::google::datastore::v1beta3::Key* mutable_delete_();
  void set_allocated_delete_(::google::datastore::v1beta3::Key* delete_);

  // int64 base_version = 8;
  private:
  bool has_base_version() const;
  public:
  void clear_base_version();
  static const int kBaseVersionFieldNumber = 8;
  ::google::protobuf::int64 base_version() const;
  void set_base_version(::google::protobuf::int64 value);

  OperationCase operation_case() const;
  ConflictDetectionStrategyCase conflict_detection_strategy_case() const;
  // @@protoc_insertion_point(class_scope:google.datastore.v1beta3.Mutation)
 private:
  void set_has_insert();
  void set_has_update();
  void set_has_upsert();
  void set_has_delete_();
  void set_has_base_version();

  inline bool has_operation() const;
  void clear_operation();
  inline void clear_has_operation();

  inline bool has_conflict_detection_strategy() const;
  void clear_conflict_detection_strategy();
  inline void clear_has_conflict_detection_strategy();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  union OperationUnion {
    OperationUnion() {}
    ::google::datastore::v1beta3::Entity* insert_;
    ::google::datastore::v1beta3::Entity* update_;
    ::google::datastore::v1beta3::Entity* upsert_;
    ::google::datastore::v1beta3::Key* delete__;
  } operation_;
  union ConflictDetectionStrategyUnion {
    ConflictDetectionStrategyUnion() {}
    ::google::protobuf::int64 base_version_;
  } conflict_detection_strategy_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[2];

  friend struct ::protobuf_google_2fdatastore_2fv1beta3_2fdatastore_2eproto::TableStruct;
  friend void ::protobuf_google_2fdatastore_2fv1beta3_2fdatastore_2eproto::InitDefaultsMutationImpl();
};
// -------------------------------------------------------------------

class MutationResult : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.datastore.v1beta3.MutationResult) */ {
 public:
  MutationResult();
  virtual ~MutationResult();

  MutationResult(const MutationResult& from);

  inline MutationResult& operator=(const MutationResult& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MutationResult(MutationResult&& from) noexcept
    : MutationResult() {
    *this = ::std::move(from);
  }

  inline MutationResult& operator=(MutationResult&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const MutationResult& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MutationResult* internal_default_instance() {
    return reinterpret_cast<const MutationResult*>(
               &_MutationResult_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    13;

  void Swap(MutationResult* other);
  friend void swap(MutationResult& a, MutationResult& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MutationResult* New() const PROTOBUF_FINAL { return New(NULL); }

  MutationResult* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const MutationResult& from);
  void MergeFrom(const MutationResult& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(MutationResult* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.datastore.v1beta3.Key key = 3;
  bool has_key() const;
  void clear_key();
  static const int kKeyFieldNumber = 3;
  const ::google::datastore::v1beta3::Key& key() const;
  ::google::datastore::v1beta3::Key* release_key();
  ::google::datastore::v1beta3::Key* mutable_key();
  void set_allocated_key(::google::datastore::v1beta3::Key* key);

  // int64 version = 4;
  void clear_version();
  static const int kVersionFieldNumber = 4;
  ::google::protobuf::int64 version() const;
  void set_version(::google::protobuf::int64 value);

  // bool conflict_detected = 5;
  void clear_conflict_detected();
  static const int kConflictDetectedFieldNumber = 5;
  bool conflict_detected() const;
  void set_conflict_detected(bool value);

  // @@protoc_insertion_point(class_scope:google.datastore.v1beta3.MutationResult)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::datastore::v1beta3::Key* key_;
  ::google::protobuf::int64 version_;
  bool conflict_detected_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fdatastore_2fv1beta3_2fdatastore_2eproto::TableStruct;
  friend void ::protobuf_google_2fdatastore_2fv1beta3_2fdatastore_2eproto::InitDefaultsMutationResultImpl();
};
// -------------------------------------------------------------------

class ReadOptions : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.datastore.v1beta3.ReadOptions) */ {
 public:
  ReadOptions();
  virtual ~ReadOptions();

  ReadOptions(const ReadOptions& from);

  inline ReadOptions& operator=(const ReadOptions& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ReadOptions(ReadOptions&& from) noexcept
    : ReadOptions() {
    *this = ::std::move(from);
  }

  inline ReadOptions& operator=(ReadOptions&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ReadOptions& default_instance();

  enum ConsistencyTypeCase {
    kReadConsistency = 1,
    kTransaction = 2,
    CONSISTENCY_TYPE_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReadOptions* internal_default_instance() {
    return reinterpret_cast<const ReadOptions*>(
               &_ReadOptions_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    14;

  void Swap(ReadOptions* other);
  friend void swap(ReadOptions& a, ReadOptions& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ReadOptions* New() const PROTOBUF_FINAL { return New(NULL); }

  ReadOptions* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ReadOptions& from);
  void MergeFrom(const ReadOptions& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ReadOptions* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef ReadOptions_ReadConsistency ReadConsistency;
  static const ReadConsistency READ_CONSISTENCY_UNSPECIFIED =
    ReadOptions_ReadConsistency_READ_CONSISTENCY_UNSPECIFIED;
  static const ReadConsistency STRONG =
    ReadOptions_ReadConsistency_STRONG;
  static const ReadConsistency EVENTUAL =
    ReadOptions_ReadConsistency_EVENTUAL;
  static inline bool ReadConsistency_IsValid(int value) {
    return ReadOptions_ReadConsistency_IsValid(value);
  }
  static const ReadConsistency ReadConsistency_MIN =
    ReadOptions_ReadConsistency_ReadConsistency_MIN;
  static const ReadConsistency ReadConsistency_MAX =
    ReadOptions_ReadConsistency_ReadConsistency_MAX;
  static const int ReadConsistency_ARRAYSIZE =
    ReadOptions_ReadConsistency_ReadConsistency_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ReadConsistency_descriptor() {
    return ReadOptions_ReadConsistency_descriptor();
  }
  static inline const ::std::string& ReadConsistency_Name(ReadConsistency value) {
    return ReadOptions_ReadConsistency_Name(value);
  }
  static inline bool ReadConsistency_Parse(const ::std::string& name,
      ReadConsistency* value) {
    return ReadOptions_ReadConsistency_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // .google.datastore.v1beta3.ReadOptions.ReadConsistency read_consistency = 1;
  private:
  bool has_read_consistency() const;
  public:
  void clear_read_consistency();
  static const int kReadConsistencyFieldNumber = 1;
  ::google::datastore::v1beta3::ReadOptions_ReadConsistency read_consistency() const;
  void set_read_consistency(::google::datastore::v1beta3::ReadOptions_ReadConsistency value);

  // bytes transaction = 2;
  private:
  bool has_transaction() const;
  public:
  void clear_transaction();
  static const int kTransactionFieldNumber = 2;
  const ::std::string& transaction() const;
  void set_transaction(const ::std::string& value);
  #if LANG_CXX11
  void set_transaction(::std::string&& value);
  #endif
  void set_transaction(const char* value);
  void set_transaction(const void* value, size_t size);
  ::std::string* mutable_transaction();
  ::std::string* release_transaction();
  void set_allocated_transaction(::std::string* transaction);

  ConsistencyTypeCase consistency_type_case() const;
  // @@protoc_insertion_point(class_scope:google.datastore.v1beta3.ReadOptions)
 private:
  void set_has_read_consistency();
  void set_has_transaction();

  inline bool has_consistency_type() const;
  void clear_consistency_type();
  inline void clear_has_consistency_type();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  union ConsistencyTypeUnion {
    ConsistencyTypeUnion() {}
    int read_consistency_;
    ::google::protobuf::internal::ArenaStringPtr transaction_;
  } consistency_type_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::protobuf_google_2fdatastore_2fv1beta3_2fdatastore_2eproto::TableStruct;
  friend void ::protobuf_google_2fdatastore_2fv1beta3_2fdatastore_2eproto::InitDefaultsReadOptionsImpl();
};
// -------------------------------------------------------------------

class TransactionOptions_ReadWrite : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.datastore.v1beta3.TransactionOptions.ReadWrite) */ {
 public:
  TransactionOptions_ReadWrite();
  virtual ~TransactionOptions_ReadWrite();

  TransactionOptions_ReadWrite(const TransactionOptions_ReadWrite& from);

  inline TransactionOptions_ReadWrite& operator=(const TransactionOptions_ReadWrite& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TransactionOptions_ReadWrite(TransactionOptions_ReadWrite&& from) noexcept
    : TransactionOptions_ReadWrite() {
    *this = ::std::move(from);
  }

  inline TransactionOptions_ReadWrite& operator=(TransactionOptions_ReadWrite&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const TransactionOptions_ReadWrite& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TransactionOptions_ReadWrite* internal_default_instance() {
    return reinterpret_cast<const TransactionOptions_ReadWrite*>(
               &_TransactionOptions_ReadWrite_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    15;

  void Swap(TransactionOptions_ReadWrite* other);
  friend void swap(TransactionOptions_ReadWrite& a, TransactionOptions_ReadWrite& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TransactionOptions_ReadWrite* New() const PROTOBUF_FINAL { return New(NULL); }

  TransactionOptions_ReadWrite* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const TransactionOptions_ReadWrite& from);
  void MergeFrom(const TransactionOptions_ReadWrite& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TransactionOptions_ReadWrite* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes previous_transaction = 1;
  void clear_previous_transaction();
  static const int kPreviousTransactionFieldNumber = 1;
  const ::std::string& previous_transaction() const;
  void set_previous_transaction(const ::std::string& value);
  #if LANG_CXX11
  void set_previous_transaction(::std::string&& value);
  #endif
  void set_previous_transaction(const char* value);
  void set_previous_transaction(const void* value, size_t size);
  ::std::string* mutable_previous_transaction();
  ::std::string* release_previous_transaction();
  void set_allocated_previous_transaction(::std::string* previous_transaction);

  // @@protoc_insertion_point(class_scope:google.datastore.v1beta3.TransactionOptions.ReadWrite)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr previous_transaction_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fdatastore_2fv1beta3_2fdatastore_2eproto::TableStruct;
  friend void ::protobuf_google_2fdatastore_2fv1beta3_2fdatastore_2eproto::InitDefaultsTransactionOptions_ReadWriteImpl();
};
// -------------------------------------------------------------------

class TransactionOptions_ReadOnly : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.datastore.v1beta3.TransactionOptions.ReadOnly) */ {
 public:
  TransactionOptions_ReadOnly();
  virtual ~TransactionOptions_ReadOnly();

  TransactionOptions_ReadOnly(const TransactionOptions_ReadOnly& from);

  inline TransactionOptions_ReadOnly& operator=(const TransactionOptions_ReadOnly& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TransactionOptions_ReadOnly(TransactionOptions_ReadOnly&& from) noexcept
    : TransactionOptions_ReadOnly() {
    *this = ::std::move(from);
  }

  inline TransactionOptions_ReadOnly& operator=(TransactionOptions_ReadOnly&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const TransactionOptions_ReadOnly& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TransactionOptions_ReadOnly* internal_default_instance() {
    return reinterpret_cast<const TransactionOptions_ReadOnly*>(
               &_TransactionOptions_ReadOnly_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    16;

  void Swap(TransactionOptions_ReadOnly* other);
  friend void swap(TransactionOptions_ReadOnly& a, TransactionOptions_ReadOnly& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TransactionOptions_ReadOnly* New() const PROTOBUF_FINAL { return New(NULL); }

  TransactionOptions_ReadOnly* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const TransactionOptions_ReadOnly& from);
  void MergeFrom(const TransactionOptions_ReadOnly& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TransactionOptions_ReadOnly* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:google.datastore.v1beta3.TransactionOptions.ReadOnly)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fdatastore_2fv1beta3_2fdatastore_2eproto::TableStruct;
  friend void ::protobuf_google_2fdatastore_2fv1beta3_2fdatastore_2eproto::InitDefaultsTransactionOptions_ReadOnlyImpl();
};
// -------------------------------------------------------------------

class TransactionOptions : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.datastore.v1beta3.TransactionOptions) */ {
 public:
  TransactionOptions();
  virtual ~TransactionOptions();

  TransactionOptions(const TransactionOptions& from);

  inline TransactionOptions& operator=(const TransactionOptions& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TransactionOptions(TransactionOptions&& from) noexcept
    : TransactionOptions() {
    *this = ::std::move(from);
  }

  inline TransactionOptions& operator=(TransactionOptions&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const TransactionOptions& default_instance();

  enum ModeCase {
    kReadWrite = 1,
    kReadOnly = 2,
    MODE_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TransactionOptions* internal_default_instance() {
    return reinterpret_cast<const TransactionOptions*>(
               &_TransactionOptions_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    17;

  void Swap(TransactionOptions* other);
  friend void swap(TransactionOptions& a, TransactionOptions& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TransactionOptions* New() const PROTOBUF_FINAL { return New(NULL); }

  TransactionOptions* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const TransactionOptions& from);
  void MergeFrom(const TransactionOptions& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TransactionOptions* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef TransactionOptions_ReadWrite ReadWrite;
  typedef TransactionOptions_ReadOnly ReadOnly;

  // accessors -------------------------------------------------------

  // .google.datastore.v1beta3.TransactionOptions.ReadWrite read_write = 1;
  bool has_read_write() const;
  void clear_read_write();
  static const int kReadWriteFieldNumber = 1;
  const ::google::datastore::v1beta3::TransactionOptions_ReadWrite& read_write() const;
  ::google::datastore::v1beta3::TransactionOptions_ReadWrite* release_read_write();
  ::google::datastore::v1beta3::TransactionOptions_ReadWrite* mutable_read_write();
  void set_allocated_read_write(::google::datastore::v1beta3::TransactionOptions_ReadWrite* read_write);

  // .google.datastore.v1beta3.TransactionOptions.ReadOnly read_only = 2;
  bool has_read_only() const;
  void clear_read_only();
  static const int kReadOnlyFieldNumber = 2;
  const ::google::datastore::v1beta3::TransactionOptions_ReadOnly& read_only() const;
  ::google::datastore::v1beta3::TransactionOptions_ReadOnly* release_read_only();
  ::google::datastore::v1beta3::TransactionOptions_ReadOnly* mutable_read_only();
  void set_allocated_read_only(::google::datastore::v1beta3::TransactionOptions_ReadOnly* read_only);

  ModeCase mode_case() const;
  // @@protoc_insertion_point(class_scope:google.datastore.v1beta3.TransactionOptions)
 private:
  void set_has_read_write();
  void set_has_read_only();

  inline bool has_mode() const;
  void clear_mode();
  inline void clear_has_mode();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  union ModeUnion {
    ModeUnion() {}
    ::google::datastore::v1beta3::TransactionOptions_ReadWrite* read_write_;
    ::google::datastore::v1beta3::TransactionOptions_ReadOnly* read_only_;
  } mode_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::protobuf_google_2fdatastore_2fv1beta3_2fdatastore_2eproto::TableStruct;
  friend void ::protobuf_google_2fdatastore_2fv1beta3_2fdatastore_2eproto::InitDefaultsTransactionOptionsImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// LookupRequest

// string project_id = 8;
inline void LookupRequest::clear_project_id() {
  project_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LookupRequest::project_id() const {
  // @@protoc_insertion_point(field_get:google.datastore.v1beta3.LookupRequest.project_id)
  return project_id_.GetNoArena();
}
inline void LookupRequest::set_project_id(const ::std::string& value) {
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.datastore.v1beta3.LookupRequest.project_id)
}
#if LANG_CXX11
inline void LookupRequest::set_project_id(::std::string&& value) {
  
  project_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.datastore.v1beta3.LookupRequest.project_id)
}
#endif
inline void LookupRequest::set_project_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.datastore.v1beta3.LookupRequest.project_id)
}
inline void LookupRequest::set_project_id(const char* value, size_t size) {
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.datastore.v1beta3.LookupRequest.project_id)
}
inline ::std::string* LookupRequest::mutable_project_id() {
  
  // @@protoc_insertion_point(field_mutable:google.datastore.v1beta3.LookupRequest.project_id)
  return project_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LookupRequest::release_project_id() {
  // @@protoc_insertion_point(field_release:google.datastore.v1beta3.LookupRequest.project_id)
  
  return project_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LookupRequest::set_allocated_project_id(::std::string* project_id) {
  if (project_id != NULL) {
    
  } else {
    
  }
  project_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), project_id);
  // @@protoc_insertion_point(field_set_allocated:google.datastore.v1beta3.LookupRequest.project_id)
}

// .google.datastore.v1beta3.ReadOptions read_options = 1;
inline bool LookupRequest::has_read_options() const {
  return this != internal_default_instance() && read_options_ != NULL;
}
inline void LookupRequest::clear_read_options() {
  if (GetArenaNoVirtual() == NULL && read_options_ != NULL) {
    delete read_options_;
  }
  read_options_ = NULL;
}
inline const ::google::datastore::v1beta3::ReadOptions& LookupRequest::read_options() const {
  const ::google::datastore::v1beta3::ReadOptions* p = read_options_;
  // @@protoc_insertion_point(field_get:google.datastore.v1beta3.LookupRequest.read_options)
  return p != NULL ? *p : *reinterpret_cast<const ::google::datastore::v1beta3::ReadOptions*>(
      &::google::datastore::v1beta3::_ReadOptions_default_instance_);
}
inline ::google::datastore::v1beta3::ReadOptions* LookupRequest::release_read_options() {
  // @@protoc_insertion_point(field_release:google.datastore.v1beta3.LookupRequest.read_options)
  
  ::google::datastore::v1beta3::ReadOptions* temp = read_options_;
  read_options_ = NULL;
  return temp;
}
inline ::google::datastore::v1beta3::ReadOptions* LookupRequest::mutable_read_options() {
  
  if (read_options_ == NULL) {
    read_options_ = new ::google::datastore::v1beta3::ReadOptions;
  }
  // @@protoc_insertion_point(field_mutable:google.datastore.v1beta3.LookupRequest.read_options)
  return read_options_;
}
inline void LookupRequest::set_allocated_read_options(::google::datastore::v1beta3::ReadOptions* read_options) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete read_options_;
  }
  if (read_options) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      read_options = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, read_options, submessage_arena);
    }
    
  } else {
    
  }
  read_options_ = read_options;
  // @@protoc_insertion_point(field_set_allocated:google.datastore.v1beta3.LookupRequest.read_options)
}

// repeated .google.datastore.v1beta3.Key keys = 3;
inline int LookupRequest::keys_size() const {
  return keys_.size();
}
inline const ::google::datastore::v1beta3::Key& LookupRequest::keys(int index) const {
  // @@protoc_insertion_point(field_get:google.datastore.v1beta3.LookupRequest.keys)
  return keys_.Get(index);
}
inline ::google::datastore::v1beta3::Key* LookupRequest::mutable_keys(int index) {
  // @@protoc_insertion_point(field_mutable:google.datastore.v1beta3.LookupRequest.keys)
  return keys_.Mutable(index);
}
inline ::google::datastore::v1beta3::Key* LookupRequest::add_keys() {
  // @@protoc_insertion_point(field_add:google.datastore.v1beta3.LookupRequest.keys)
  return keys_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::google::datastore::v1beta3::Key >*
LookupRequest::mutable_keys() {
  // @@protoc_insertion_point(field_mutable_list:google.datastore.v1beta3.LookupRequest.keys)
  return &keys_;
}
inline const ::google::protobuf::RepeatedPtrField< ::google::datastore::v1beta3::Key >&
LookupRequest::keys() const {
  // @@protoc_insertion_point(field_list:google.datastore.v1beta3.LookupRequest.keys)
  return keys_;
}

// -------------------------------------------------------------------

// LookupResponse

// repeated .google.datastore.v1beta3.EntityResult found = 1;
inline int LookupResponse::found_size() const {
  return found_.size();
}
inline const ::google::datastore::v1beta3::EntityResult& LookupResponse::found(int index) const {
  // @@protoc_insertion_point(field_get:google.datastore.v1beta3.LookupResponse.found)
  return found_.Get(index);
}
inline ::google::datastore::v1beta3::EntityResult* LookupResponse::mutable_found(int index) {
  // @@protoc_insertion_point(field_mutable:google.datastore.v1beta3.LookupResponse.found)
  return found_.Mutable(index);
}
inline ::google::datastore::v1beta3::EntityResult* LookupResponse::add_found() {
  // @@protoc_insertion_point(field_add:google.datastore.v1beta3.LookupResponse.found)
  return found_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::google::datastore::v1beta3::EntityResult >*
LookupResponse::mutable_found() {
  // @@protoc_insertion_point(field_mutable_list:google.datastore.v1beta3.LookupResponse.found)
  return &found_;
}
inline const ::google::protobuf::RepeatedPtrField< ::google::datastore::v1beta3::EntityResult >&
LookupResponse::found() const {
  // @@protoc_insertion_point(field_list:google.datastore.v1beta3.LookupResponse.found)
  return found_;
}

// repeated .google.datastore.v1beta3.EntityResult missing = 2;
inline int LookupResponse::missing_size() const {
  return missing_.size();
}
inline const ::google::datastore::v1beta3::EntityResult& LookupResponse::missing(int index) const {
  // @@protoc_insertion_point(field_get:google.datastore.v1beta3.LookupResponse.missing)
  return missing_.Get(index);
}
inline ::google::datastore::v1beta3::EntityResult* LookupResponse::mutable_missing(int index) {
  // @@protoc_insertion_point(field_mutable:google.datastore.v1beta3.LookupResponse.missing)
  return missing_.Mutable(index);
}
inline ::google::datastore::v1beta3::EntityResult* LookupResponse::add_missing() {
  // @@protoc_insertion_point(field_add:google.datastore.v1beta3.LookupResponse.missing)
  return missing_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::google::datastore::v1beta3::EntityResult >*
LookupResponse::mutable_missing() {
  // @@protoc_insertion_point(field_mutable_list:google.datastore.v1beta3.LookupResponse.missing)
  return &missing_;
}
inline const ::google::protobuf::RepeatedPtrField< ::google::datastore::v1beta3::EntityResult >&
LookupResponse::missing() const {
  // @@protoc_insertion_point(field_list:google.datastore.v1beta3.LookupResponse.missing)
  return missing_;
}

// repeated .google.datastore.v1beta3.Key deferred = 3;
inline int LookupResponse::deferred_size() const {
  return deferred_.size();
}
inline const ::google::datastore::v1beta3::Key& LookupResponse::deferred(int index) const {
  // @@protoc_insertion_point(field_get:google.datastore.v1beta3.LookupResponse.deferred)
  return deferred_.Get(index);
}
inline ::google::datastore::v1beta3::Key* LookupResponse::mutable_deferred(int index) {
  // @@protoc_insertion_point(field_mutable:google.datastore.v1beta3.LookupResponse.deferred)
  return deferred_.Mutable(index);
}
inline ::google::datastore::v1beta3::Key* LookupResponse::add_deferred() {
  // @@protoc_insertion_point(field_add:google.datastore.v1beta3.LookupResponse.deferred)
  return deferred_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::google::datastore::v1beta3::Key >*
LookupResponse::mutable_deferred() {
  // @@protoc_insertion_point(field_mutable_list:google.datastore.v1beta3.LookupResponse.deferred)
  return &deferred_;
}
inline const ::google::protobuf::RepeatedPtrField< ::google::datastore::v1beta3::Key >&
LookupResponse::deferred() const {
  // @@protoc_insertion_point(field_list:google.datastore.v1beta3.LookupResponse.deferred)
  return deferred_;
}

// -------------------------------------------------------------------

// RunQueryRequest

// string project_id = 8;
inline void RunQueryRequest::clear_project_id() {
  project_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RunQueryRequest::project_id() const {
  // @@protoc_insertion_point(field_get:google.datastore.v1beta3.RunQueryRequest.project_id)
  return project_id_.GetNoArena();
}
inline void RunQueryRequest::set_project_id(const ::std::string& value) {
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.datastore.v1beta3.RunQueryRequest.project_id)
}
#if LANG_CXX11
inline void RunQueryRequest::set_project_id(::std::string&& value) {
  
  project_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.datastore.v1beta3.RunQueryRequest.project_id)
}
#endif
inline void RunQueryRequest::set_project_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.datastore.v1beta3.RunQueryRequest.project_id)
}
inline void RunQueryRequest::set_project_id(const char* value, size_t size) {
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.datastore.v1beta3.RunQueryRequest.project_id)
}
inline ::std::string* RunQueryRequest::mutable_project_id() {
  
  // @@protoc_insertion_point(field_mutable:google.datastore.v1beta3.RunQueryRequest.project_id)
  return project_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RunQueryRequest::release_project_id() {
  // @@protoc_insertion_point(field_release:google.datastore.v1beta3.RunQueryRequest.project_id)
  
  return project_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RunQueryRequest::set_allocated_project_id(::std::string* project_id) {
  if (project_id != NULL) {
    
  } else {
    
  }
  project_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), project_id);
  // @@protoc_insertion_point(field_set_allocated:google.datastore.v1beta3.RunQueryRequest.project_id)
}

// .google.datastore.v1beta3.PartitionId partition_id = 2;
inline bool RunQueryRequest::has_partition_id() const {
  return this != internal_default_instance() && partition_id_ != NULL;
}
inline const ::google::datastore::v1beta3::PartitionId& RunQueryRequest::partition_id() const {
  const ::google::datastore::v1beta3::PartitionId* p = partition_id_;
  // @@protoc_insertion_point(field_get:google.datastore.v1beta3.RunQueryRequest.partition_id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::datastore::v1beta3::PartitionId*>(
      &::google::datastore::v1beta3::_PartitionId_default_instance_);
}
inline ::google::datastore::v1beta3::PartitionId* RunQueryRequest::release_partition_id() {
  // @@protoc_insertion_point(field_release:google.datastore.v1beta3.RunQueryRequest.partition_id)
  
  ::google::datastore::v1beta3::PartitionId* temp = partition_id_;
  partition_id_ = NULL;
  return temp;
}
inline ::google::datastore::v1beta3::PartitionId* RunQueryRequest::mutable_partition_id() {
  
  if (partition_id_ == NULL) {
    partition_id_ = new ::google::datastore::v1beta3::PartitionId;
  }
  // @@protoc_insertion_point(field_mutable:google.datastore.v1beta3.RunQueryRequest.partition_id)
  return partition_id_;
}
inline void RunQueryRequest::set_allocated_partition_id(::google::datastore::v1beta3::PartitionId* partition_id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(partition_id_);
  }
  if (partition_id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      partition_id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, partition_id, submessage_arena);
    }
    
  } else {
    
  }
  partition_id_ = partition_id;
  // @@protoc_insertion_point(field_set_allocated:google.datastore.v1beta3.RunQueryRequest.partition_id)
}

// .google.datastore.v1beta3.ReadOptions read_options = 1;
inline bool RunQueryRequest::has_read_options() const {
  return this != internal_default_instance() && read_options_ != NULL;
}
inline void RunQueryRequest::clear_read_options() {
  if (GetArenaNoVirtual() == NULL && read_options_ != NULL) {
    delete read_options_;
  }
  read_options_ = NULL;
}
inline const ::google::datastore::v1beta3::ReadOptions& RunQueryRequest::read_options() const {
  const ::google::datastore::v1beta3::ReadOptions* p = read_options_;
  // @@protoc_insertion_point(field_get:google.datastore.v1beta3.RunQueryRequest.read_options)
  return p != NULL ? *p : *reinterpret_cast<const ::google::datastore::v1beta3::ReadOptions*>(
      &::google::datastore::v1beta3::_ReadOptions_default_instance_);
}
inline ::google::datastore::v1beta3::ReadOptions* RunQueryRequest::release_read_options() {
  // @@protoc_insertion_point(field_release:google.datastore.v1beta3.RunQueryRequest.read_options)
  
  ::google::datastore::v1beta3::ReadOptions* temp = read_options_;
  read_options_ = NULL;
  return temp;
}
inline ::google::datastore::v1beta3::ReadOptions* RunQueryRequest::mutable_read_options() {
  
  if (read_options_ == NULL) {
    read_options_ = new ::google::datastore::v1beta3::ReadOptions;
  }
  // @@protoc_insertion_point(field_mutable:google.datastore.v1beta3.RunQueryRequest.read_options)
  return read_options_;
}
inline void RunQueryRequest::set_allocated_read_options(::google::datastore::v1beta3::ReadOptions* read_options) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete read_options_;
  }
  if (read_options) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      read_options = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, read_options, submessage_arena);
    }
    
  } else {
    
  }
  read_options_ = read_options;
  // @@protoc_insertion_point(field_set_allocated:google.datastore.v1beta3.RunQueryRequest.read_options)
}

// .google.datastore.v1beta3.Query query = 3;
inline bool RunQueryRequest::has_query() const {
  return query_type_case() == kQuery;
}
inline void RunQueryRequest::set_has_query() {
  _oneof_case_[0] = kQuery;
}
inline ::google::datastore::v1beta3::Query* RunQueryRequest::release_query() {
  // @@protoc_insertion_point(field_release:google.datastore.v1beta3.RunQueryRequest.query)
  if (has_query()) {
    clear_has_query_type();
      ::google::datastore::v1beta3::Query* temp = query_type_.query_;
    query_type_.query_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::datastore::v1beta3::Query& RunQueryRequest::query() const {
  // @@protoc_insertion_point(field_get:google.datastore.v1beta3.RunQueryRequest.query)
  return has_query()
      ? *query_type_.query_
      : *reinterpret_cast< ::google::datastore::v1beta3::Query*>(&::google::datastore::v1beta3::_Query_default_instance_);
}
inline ::google::datastore::v1beta3::Query* RunQueryRequest::mutable_query() {
  if (!has_query()) {
    clear_query_type();
    set_has_query();
    query_type_.query_ = new ::google::datastore::v1beta3::Query;
  }
  // @@protoc_insertion_point(field_mutable:google.datastore.v1beta3.RunQueryRequest.query)
  return query_type_.query_;
}

// .google.datastore.v1beta3.GqlQuery gql_query = 7;
inline bool RunQueryRequest::has_gql_query() const {
  return query_type_case() == kGqlQuery;
}
inline void RunQueryRequest::set_has_gql_query() {
  _oneof_case_[0] = kGqlQuery;
}
inline ::google::datastore::v1beta3::GqlQuery* RunQueryRequest::release_gql_query() {
  // @@protoc_insertion_point(field_release:google.datastore.v1beta3.RunQueryRequest.gql_query)
  if (has_gql_query()) {
    clear_has_query_type();
      ::google::datastore::v1beta3::GqlQuery* temp = query_type_.gql_query_;
    query_type_.gql_query_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::datastore::v1beta3::GqlQuery& RunQueryRequest::gql_query() const {
  // @@protoc_insertion_point(field_get:google.datastore.v1beta3.RunQueryRequest.gql_query)
  return has_gql_query()
      ? *query_type_.gql_query_
      : *reinterpret_cast< ::google::datastore::v1beta3::GqlQuery*>(&::google::datastore::v1beta3::_GqlQuery_default_instance_);
}
inline ::google::datastore::v1beta3::GqlQuery* RunQueryRequest::mutable_gql_query() {
  if (!has_gql_query()) {
    clear_query_type();
    set_has_gql_query();
    query_type_.gql_query_ = new ::google::datastore::v1beta3::GqlQuery;
  }
  // @@protoc_insertion_point(field_mutable:google.datastore.v1beta3.RunQueryRequest.gql_query)
  return query_type_.gql_query_;
}

inline bool RunQueryRequest::has_query_type() const {
  return query_type_case() != QUERY_TYPE_NOT_SET;
}
inline void RunQueryRequest::clear_has_query_type() {
  _oneof_case_[0] = QUERY_TYPE_NOT_SET;
}
inline RunQueryRequest::QueryTypeCase RunQueryRequest::query_type_case() const {
  return RunQueryRequest::QueryTypeCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// RunQueryResponse

// .google.datastore.v1beta3.QueryResultBatch batch = 1;
inline bool RunQueryResponse::has_batch() const {
  return this != internal_default_instance() && batch_ != NULL;
}
inline const ::google::datastore::v1beta3::QueryResultBatch& RunQueryResponse::batch() const {
  const ::google::datastore::v1beta3::QueryResultBatch* p = batch_;
  // @@protoc_insertion_point(field_get:google.datastore.v1beta3.RunQueryResponse.batch)
  return p != NULL ? *p : *reinterpret_cast<const ::google::datastore::v1beta3::QueryResultBatch*>(
      &::google::datastore::v1beta3::_QueryResultBatch_default_instance_);
}
inline ::google::datastore::v1beta3::QueryResultBatch* RunQueryResponse::release_batch() {
  // @@protoc_insertion_point(field_release:google.datastore.v1beta3.RunQueryResponse.batch)
  
  ::google::datastore::v1beta3::QueryResultBatch* temp = batch_;
  batch_ = NULL;
  return temp;
}
inline ::google::datastore::v1beta3::QueryResultBatch* RunQueryResponse::mutable_batch() {
  
  if (batch_ == NULL) {
    batch_ = new ::google::datastore::v1beta3::QueryResultBatch;
  }
  // @@protoc_insertion_point(field_mutable:google.datastore.v1beta3.RunQueryResponse.batch)
  return batch_;
}
inline void RunQueryResponse::set_allocated_batch(::google::datastore::v1beta3::QueryResultBatch* batch) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(batch_);
  }
  if (batch) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      batch = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, batch, submessage_arena);
    }
    
  } else {
    
  }
  batch_ = batch;
  // @@protoc_insertion_point(field_set_allocated:google.datastore.v1beta3.RunQueryResponse.batch)
}

// .google.datastore.v1beta3.Query query = 2;
inline bool RunQueryResponse::has_query() const {
  return this != internal_default_instance() && query_ != NULL;
}
inline const ::google::datastore::v1beta3::Query& RunQueryResponse::query() const {
  const ::google::datastore::v1beta3::Query* p = query_;
  // @@protoc_insertion_point(field_get:google.datastore.v1beta3.RunQueryResponse.query)
  return p != NULL ? *p : *reinterpret_cast<const ::google::datastore::v1beta3::Query*>(
      &::google::datastore::v1beta3::_Query_default_instance_);
}
inline ::google::datastore::v1beta3::Query* RunQueryResponse::release_query() {
  // @@protoc_insertion_point(field_release:google.datastore.v1beta3.RunQueryResponse.query)
  
  ::google::datastore::v1beta3::Query* temp = query_;
  query_ = NULL;
  return temp;
}
inline ::google::datastore::v1beta3::Query* RunQueryResponse::mutable_query() {
  
  if (query_ == NULL) {
    query_ = new ::google::datastore::v1beta3::Query;
  }
  // @@protoc_insertion_point(field_mutable:google.datastore.v1beta3.RunQueryResponse.query)
  return query_;
}
inline void RunQueryResponse::set_allocated_query(::google::datastore::v1beta3::Query* query) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(query_);
  }
  if (query) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      query = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, query, submessage_arena);
    }
    
  } else {
    
  }
  query_ = query;
  // @@protoc_insertion_point(field_set_allocated:google.datastore.v1beta3.RunQueryResponse.query)
}

// -------------------------------------------------------------------

// BeginTransactionRequest

// string project_id = 8;
inline void BeginTransactionRequest::clear_project_id() {
  project_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& BeginTransactionRequest::project_id() const {
  // @@protoc_insertion_point(field_get:google.datastore.v1beta3.BeginTransactionRequest.project_id)
  return project_id_.GetNoArena();
}
inline void BeginTransactionRequest::set_project_id(const ::std::string& value) {
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.datastore.v1beta3.BeginTransactionRequest.project_id)
}
#if LANG_CXX11
inline void BeginTransactionRequest::set_project_id(::std::string&& value) {
  
  project_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.datastore.v1beta3.BeginTransactionRequest.project_id)
}
#endif
inline void BeginTransactionRequest::set_project_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.datastore.v1beta3.BeginTransactionRequest.project_id)
}
inline void BeginTransactionRequest::set_project_id(const char* value, size_t size) {
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.datastore.v1beta3.BeginTransactionRequest.project_id)
}
inline ::std::string* BeginTransactionRequest::mutable_project_id() {
  
  // @@protoc_insertion_point(field_mutable:google.datastore.v1beta3.BeginTransactionRequest.project_id)
  return project_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BeginTransactionRequest::release_project_id() {
  // @@protoc_insertion_point(field_release:google.datastore.v1beta3.BeginTransactionRequest.project_id)
  
  return project_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BeginTransactionRequest::set_allocated_project_id(::std::string* project_id) {
  if (project_id != NULL) {
    
  } else {
    
  }
  project_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), project_id);
  // @@protoc_insertion_point(field_set_allocated:google.datastore.v1beta3.BeginTransactionRequest.project_id)
}

// .google.datastore.v1beta3.TransactionOptions transaction_options = 10;
inline bool BeginTransactionRequest::has_transaction_options() const {
  return this != internal_default_instance() && transaction_options_ != NULL;
}
inline void BeginTransactionRequest::clear_transaction_options() {
  if (GetArenaNoVirtual() == NULL && transaction_options_ != NULL) {
    delete transaction_options_;
  }
  transaction_options_ = NULL;
}
inline const ::google::datastore::v1beta3::TransactionOptions& BeginTransactionRequest::transaction_options() const {
  const ::google::datastore::v1beta3::TransactionOptions* p = transaction_options_;
  // @@protoc_insertion_point(field_get:google.datastore.v1beta3.BeginTransactionRequest.transaction_options)
  return p != NULL ? *p : *reinterpret_cast<const ::google::datastore::v1beta3::TransactionOptions*>(
      &::google::datastore::v1beta3::_TransactionOptions_default_instance_);
}
inline ::google::datastore::v1beta3::TransactionOptions* BeginTransactionRequest::release_transaction_options() {
  // @@protoc_insertion_point(field_release:google.datastore.v1beta3.BeginTransactionRequest.transaction_options)
  
  ::google::datastore::v1beta3::TransactionOptions* temp = transaction_options_;
  transaction_options_ = NULL;
  return temp;
}
inline ::google::datastore::v1beta3::TransactionOptions* BeginTransactionRequest::mutable_transaction_options() {
  
  if (transaction_options_ == NULL) {
    transaction_options_ = new ::google::datastore::v1beta3::TransactionOptions;
  }
  // @@protoc_insertion_point(field_mutable:google.datastore.v1beta3.BeginTransactionRequest.transaction_options)
  return transaction_options_;
}
inline void BeginTransactionRequest::set_allocated_transaction_options(::google::datastore::v1beta3::TransactionOptions* transaction_options) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete transaction_options_;
  }
  if (transaction_options) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      transaction_options = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, transaction_options, submessage_arena);
    }
    
  } else {
    
  }
  transaction_options_ = transaction_options;
  // @@protoc_insertion_point(field_set_allocated:google.datastore.v1beta3.BeginTransactionRequest.transaction_options)
}

// -------------------------------------------------------------------

// BeginTransactionResponse

// bytes transaction = 1;
inline void BeginTransactionResponse::clear_transaction() {
  transaction_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& BeginTransactionResponse::transaction() const {
  // @@protoc_insertion_point(field_get:google.datastore.v1beta3.BeginTransactionResponse.transaction)
  return transaction_.GetNoArena();
}
inline void BeginTransactionResponse::set_transaction(const ::std::string& value) {
  
  transaction_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.datastore.v1beta3.BeginTransactionResponse.transaction)
}
#if LANG_CXX11
inline void BeginTransactionResponse::set_transaction(::std::string&& value) {
  
  transaction_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.datastore.v1beta3.BeginTransactionResponse.transaction)
}
#endif
inline void BeginTransactionResponse::set_transaction(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  transaction_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.datastore.v1beta3.BeginTransactionResponse.transaction)
}
inline void BeginTransactionResponse::set_transaction(const void* value, size_t size) {
  
  transaction_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.datastore.v1beta3.BeginTransactionResponse.transaction)
}
inline ::std::string* BeginTransactionResponse::mutable_transaction() {
  
  // @@protoc_insertion_point(field_mutable:google.datastore.v1beta3.BeginTransactionResponse.transaction)
  return transaction_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BeginTransactionResponse::release_transaction() {
  // @@protoc_insertion_point(field_release:google.datastore.v1beta3.BeginTransactionResponse.transaction)
  
  return transaction_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BeginTransactionResponse::set_allocated_transaction(::std::string* transaction) {
  if (transaction != NULL) {
    
  } else {
    
  }
  transaction_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), transaction);
  // @@protoc_insertion_point(field_set_allocated:google.datastore.v1beta3.BeginTransactionResponse.transaction)
}

// -------------------------------------------------------------------

// RollbackRequest

// string project_id = 8;
inline void RollbackRequest::clear_project_id() {
  project_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RollbackRequest::project_id() const {
  // @@protoc_insertion_point(field_get:google.datastore.v1beta3.RollbackRequest.project_id)
  return project_id_.GetNoArena();
}
inline void RollbackRequest::set_project_id(const ::std::string& value) {
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.datastore.v1beta3.RollbackRequest.project_id)
}
#if LANG_CXX11
inline void RollbackRequest::set_project_id(::std::string&& value) {
  
  project_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.datastore.v1beta3.RollbackRequest.project_id)
}
#endif
inline void RollbackRequest::set_project_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.datastore.v1beta3.RollbackRequest.project_id)
}
inline void RollbackRequest::set_project_id(const char* value, size_t size) {
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.datastore.v1beta3.RollbackRequest.project_id)
}
inline ::std::string* RollbackRequest::mutable_project_id() {
  
  // @@protoc_insertion_point(field_mutable:google.datastore.v1beta3.RollbackRequest.project_id)
  return project_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RollbackRequest::release_project_id() {
  // @@protoc_insertion_point(field_release:google.datastore.v1beta3.RollbackRequest.project_id)
  
  return project_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RollbackRequest::set_allocated_project_id(::std::string* project_id) {
  if (project_id != NULL) {
    
  } else {
    
  }
  project_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), project_id);
  // @@protoc_insertion_point(field_set_allocated:google.datastore.v1beta3.RollbackRequest.project_id)
}

// bytes transaction = 1;
inline void RollbackRequest::clear_transaction() {
  transaction_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RollbackRequest::transaction() const {
  // @@protoc_insertion_point(field_get:google.datastore.v1beta3.RollbackRequest.transaction)
  return transaction_.GetNoArena();
}
inline void RollbackRequest::set_transaction(const ::std::string& value) {
  
  transaction_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.datastore.v1beta3.RollbackRequest.transaction)
}
#if LANG_CXX11
inline void RollbackRequest::set_transaction(::std::string&& value) {
  
  transaction_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.datastore.v1beta3.RollbackRequest.transaction)
}
#endif
inline void RollbackRequest::set_transaction(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  transaction_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.datastore.v1beta3.RollbackRequest.transaction)
}
inline void RollbackRequest::set_transaction(const void* value, size_t size) {
  
  transaction_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.datastore.v1beta3.RollbackRequest.transaction)
}
inline ::std::string* RollbackRequest::mutable_transaction() {
  
  // @@protoc_insertion_point(field_mutable:google.datastore.v1beta3.RollbackRequest.transaction)
  return transaction_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RollbackRequest::release_transaction() {
  // @@protoc_insertion_point(field_release:google.datastore.v1beta3.RollbackRequest.transaction)
  
  return transaction_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RollbackRequest::set_allocated_transaction(::std::string* transaction) {
  if (transaction != NULL) {
    
  } else {
    
  }
  transaction_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), transaction);
  // @@protoc_insertion_point(field_set_allocated:google.datastore.v1beta3.RollbackRequest.transaction)
}

// -------------------------------------------------------------------

// RollbackResponse

// -------------------------------------------------------------------

// CommitRequest

// string project_id = 8;
inline void CommitRequest::clear_project_id() {
  project_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CommitRequest::project_id() const {
  // @@protoc_insertion_point(field_get:google.datastore.v1beta3.CommitRequest.project_id)
  return project_id_.GetNoArena();
}
inline void CommitRequest::set_project_id(const ::std::string& value) {
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.datastore.v1beta3.CommitRequest.project_id)
}
#if LANG_CXX11
inline void CommitRequest::set_project_id(::std::string&& value) {
  
  project_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.datastore.v1beta3.CommitRequest.project_id)
}
#endif
inline void CommitRequest::set_project_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.datastore.v1beta3.CommitRequest.project_id)
}
inline void CommitRequest::set_project_id(const char* value, size_t size) {
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.datastore.v1beta3.CommitRequest.project_id)
}
inline ::std::string* CommitRequest::mutable_project_id() {
  
  // @@protoc_insertion_point(field_mutable:google.datastore.v1beta3.CommitRequest.project_id)
  return project_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CommitRequest::release_project_id() {
  // @@protoc_insertion_point(field_release:google.datastore.v1beta3.CommitRequest.project_id)
  
  return project_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CommitRequest::set_allocated_project_id(::std::string* project_id) {
  if (project_id != NULL) {
    
  } else {
    
  }
  project_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), project_id);
  // @@protoc_insertion_point(field_set_allocated:google.datastore.v1beta3.CommitRequest.project_id)
}

// .google.datastore.v1beta3.CommitRequest.Mode mode = 5;
inline void CommitRequest::clear_mode() {
  mode_ = 0;
}
inline ::google::datastore::v1beta3::CommitRequest_Mode CommitRequest::mode() const {
  // @@protoc_insertion_point(field_get:google.datastore.v1beta3.CommitRequest.mode)
  return static_cast< ::google::datastore::v1beta3::CommitRequest_Mode >(mode_);
}
inline void CommitRequest::set_mode(::google::datastore::v1beta3::CommitRequest_Mode value) {
  
  mode_ = value;
  // @@protoc_insertion_point(field_set:google.datastore.v1beta3.CommitRequest.mode)
}

// bytes transaction = 1;
inline bool CommitRequest::has_transaction() const {
  return transaction_selector_case() == kTransaction;
}
inline void CommitRequest::set_has_transaction() {
  _oneof_case_[0] = kTransaction;
}
inline void CommitRequest::clear_transaction() {
  if (has_transaction()) {
    transaction_selector_.transaction_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_transaction_selector();
  }
}
inline const ::std::string& CommitRequest::transaction() const {
  // @@protoc_insertion_point(field_get:google.datastore.v1beta3.CommitRequest.transaction)
  if (has_transaction()) {
    return transaction_selector_.transaction_.GetNoArena();
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
inline void CommitRequest::set_transaction(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:google.datastore.v1beta3.CommitRequest.transaction)
  if (!has_transaction()) {
    clear_transaction_selector();
    set_has_transaction();
    transaction_selector_.transaction_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  transaction_selector_.transaction_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.datastore.v1beta3.CommitRequest.transaction)
}
#if LANG_CXX11
inline void CommitRequest::set_transaction(::std::string&& value) {
  // @@protoc_insertion_point(field_set:google.datastore.v1beta3.CommitRequest.transaction)
  if (!has_transaction()) {
    clear_transaction_selector();
    set_has_transaction();
    transaction_selector_.transaction_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  transaction_selector_.transaction_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.datastore.v1beta3.CommitRequest.transaction)
}
#endif
inline void CommitRequest::set_transaction(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  if (!has_transaction()) {
    clear_transaction_selector();
    set_has_transaction();
    transaction_selector_.transaction_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  transaction_selector_.transaction_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.datastore.v1beta3.CommitRequest.transaction)
}
inline void CommitRequest::set_transaction(const void* value, size_t size) {
  if (!has_transaction()) {
    clear_transaction_selector();
    set_has_transaction();
    transaction_selector_.transaction_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  transaction_selector_.transaction_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.datastore.v1beta3.CommitRequest.transaction)
}
inline ::std::string* CommitRequest::mutable_transaction() {
  if (!has_transaction()) {
    clear_transaction_selector();
    set_has_transaction();
    transaction_selector_.transaction_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:google.datastore.v1beta3.CommitRequest.transaction)
  return transaction_selector_.transaction_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CommitRequest::release_transaction() {
  // @@protoc_insertion_point(field_release:google.datastore.v1beta3.CommitRequest.transaction)
  if (has_transaction()) {
    clear_has_transaction_selector();
    return transaction_selector_.transaction_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
inline void CommitRequest::set_allocated_transaction(::std::string* transaction) {
  if (!has_transaction()) {
    transaction_selector_.transaction_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_transaction_selector();
  if (transaction != NULL) {
    set_has_transaction();
    transaction_selector_.transaction_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        transaction);
  }
  // @@protoc_insertion_point(field_set_allocated:google.datastore.v1beta3.CommitRequest.transaction)
}

// repeated .google.datastore.v1beta3.Mutation mutations = 6;
inline int CommitRequest::mutations_size() const {
  return mutations_.size();
}
inline void CommitRequest::clear_mutations() {
  mutations_.Clear();
}
inline const ::google::datastore::v1beta3::Mutation& CommitRequest::mutations(int index) const {
  // @@protoc_insertion_point(field_get:google.datastore.v1beta3.CommitRequest.mutations)
  return mutations_.Get(index);
}
inline ::google::datastore::v1beta3::Mutation* CommitRequest::mutable_mutations(int index) {
  // @@protoc_insertion_point(field_mutable:google.datastore.v1beta3.CommitRequest.mutations)
  return mutations_.Mutable(index);
}
inline ::google::datastore::v1beta3::Mutation* CommitRequest::add_mutations() {
  // @@protoc_insertion_point(field_add:google.datastore.v1beta3.CommitRequest.mutations)
  return mutations_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::google::datastore::v1beta3::Mutation >*
CommitRequest::mutable_mutations() {
  // @@protoc_insertion_point(field_mutable_list:google.datastore.v1beta3.CommitRequest.mutations)
  return &mutations_;
}
inline const ::google::protobuf::RepeatedPtrField< ::google::datastore::v1beta3::Mutation >&
CommitRequest::mutations() const {
  // @@protoc_insertion_point(field_list:google.datastore.v1beta3.CommitRequest.mutations)
  return mutations_;
}

inline bool CommitRequest::has_transaction_selector() const {
  return transaction_selector_case() != TRANSACTION_SELECTOR_NOT_SET;
}
inline void CommitRequest::clear_has_transaction_selector() {
  _oneof_case_[0] = TRANSACTION_SELECTOR_NOT_SET;
}
inline CommitRequest::TransactionSelectorCase CommitRequest::transaction_selector_case() const {
  return CommitRequest::TransactionSelectorCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// CommitResponse

// repeated .google.datastore.v1beta3.MutationResult mutation_results = 3;
inline int CommitResponse::mutation_results_size() const {
  return mutation_results_.size();
}
inline void CommitResponse::clear_mutation_results() {
  mutation_results_.Clear();
}
inline const ::google::datastore::v1beta3::MutationResult& CommitResponse::mutation_results(int index) const {
  // @@protoc_insertion_point(field_get:google.datastore.v1beta3.CommitResponse.mutation_results)
  return mutation_results_.Get(index);
}
inline ::google::datastore::v1beta3::MutationResult* CommitResponse::mutable_mutation_results(int index) {
  // @@protoc_insertion_point(field_mutable:google.datastore.v1beta3.CommitResponse.mutation_results)
  return mutation_results_.Mutable(index);
}
inline ::google::datastore::v1beta3::MutationResult* CommitResponse::add_mutation_results() {
  // @@protoc_insertion_point(field_add:google.datastore.v1beta3.CommitResponse.mutation_results)
  return mutation_results_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::google::datastore::v1beta3::MutationResult >*
CommitResponse::mutable_mutation_results() {
  // @@protoc_insertion_point(field_mutable_list:google.datastore.v1beta3.CommitResponse.mutation_results)
  return &mutation_results_;
}
inline const ::google::protobuf::RepeatedPtrField< ::google::datastore::v1beta3::MutationResult >&
CommitResponse::mutation_results() const {
  // @@protoc_insertion_point(field_list:google.datastore.v1beta3.CommitResponse.mutation_results)
  return mutation_results_;
}

// int32 index_updates = 4;
inline void CommitResponse::clear_index_updates() {
  index_updates_ = 0;
}
inline ::google::protobuf::int32 CommitResponse::index_updates() const {
  // @@protoc_insertion_point(field_get:google.datastore.v1beta3.CommitResponse.index_updates)
  return index_updates_;
}
inline void CommitResponse::set_index_updates(::google::protobuf::int32 value) {
  
  index_updates_ = value;
  // @@protoc_insertion_point(field_set:google.datastore.v1beta3.CommitResponse.index_updates)
}

// -------------------------------------------------------------------

// AllocateIdsRequest

// string project_id = 8;
inline void AllocateIdsRequest::clear_project_id() {
  project_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AllocateIdsRequest::project_id() const {
  // @@protoc_insertion_point(field_get:google.datastore.v1beta3.AllocateIdsRequest.project_id)
  return project_id_.GetNoArena();
}
inline void AllocateIdsRequest::set_project_id(const ::std::string& value) {
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.datastore.v1beta3.AllocateIdsRequest.project_id)
}
#if LANG_CXX11
inline void AllocateIdsRequest::set_project_id(::std::string&& value) {
  
  project_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.datastore.v1beta3.AllocateIdsRequest.project_id)
}
#endif
inline void AllocateIdsRequest::set_project_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.datastore.v1beta3.AllocateIdsRequest.project_id)
}
inline void AllocateIdsRequest::set_project_id(const char* value, size_t size) {
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.datastore.v1beta3.AllocateIdsRequest.project_id)
}
inline ::std::string* AllocateIdsRequest::mutable_project_id() {
  
  // @@protoc_insertion_point(field_mutable:google.datastore.v1beta3.AllocateIdsRequest.project_id)
  return project_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AllocateIdsRequest::release_project_id() {
  // @@protoc_insertion_point(field_release:google.datastore.v1beta3.AllocateIdsRequest.project_id)
  
  return project_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AllocateIdsRequest::set_allocated_project_id(::std::string* project_id) {
  if (project_id != NULL) {
    
  } else {
    
  }
  project_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), project_id);
  // @@protoc_insertion_point(field_set_allocated:google.datastore.v1beta3.AllocateIdsRequest.project_id)
}

// repeated .google.datastore.v1beta3.Key keys = 1;
inline int AllocateIdsRequest::keys_size() const {
  return keys_.size();
}
inline const ::google::datastore::v1beta3::Key& AllocateIdsRequest::keys(int index) const {
  // @@protoc_insertion_point(field_get:google.datastore.v1beta3.AllocateIdsRequest.keys)
  return keys_.Get(index);
}
inline ::google::datastore::v1beta3::Key* AllocateIdsRequest::mutable_keys(int index) {
  // @@protoc_insertion_point(field_mutable:google.datastore.v1beta3.AllocateIdsRequest.keys)
  return keys_.Mutable(index);
}
inline ::google::datastore::v1beta3::Key* AllocateIdsRequest::add_keys() {
  // @@protoc_insertion_point(field_add:google.datastore.v1beta3.AllocateIdsRequest.keys)
  return keys_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::google::datastore::v1beta3::Key >*
AllocateIdsRequest::mutable_keys() {
  // @@protoc_insertion_point(field_mutable_list:google.datastore.v1beta3.AllocateIdsRequest.keys)
  return &keys_;
}
inline const ::google::protobuf::RepeatedPtrField< ::google::datastore::v1beta3::Key >&
AllocateIdsRequest::keys() const {
  // @@protoc_insertion_point(field_list:google.datastore.v1beta3.AllocateIdsRequest.keys)
  return keys_;
}

// -------------------------------------------------------------------

// AllocateIdsResponse

// repeated .google.datastore.v1beta3.Key keys = 1;
inline int AllocateIdsResponse::keys_size() const {
  return keys_.size();
}
inline const ::google::datastore::v1beta3::Key& AllocateIdsResponse::keys(int index) const {
  // @@protoc_insertion_point(field_get:google.datastore.v1beta3.AllocateIdsResponse.keys)
  return keys_.Get(index);
}
inline ::google::datastore::v1beta3::Key* AllocateIdsResponse::mutable_keys(int index) {
  // @@protoc_insertion_point(field_mutable:google.datastore.v1beta3.AllocateIdsResponse.keys)
  return keys_.Mutable(index);
}
inline ::google::datastore::v1beta3::Key* AllocateIdsResponse::add_keys() {
  // @@protoc_insertion_point(field_add:google.datastore.v1beta3.AllocateIdsResponse.keys)
  return keys_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::google::datastore::v1beta3::Key >*
AllocateIdsResponse::mutable_keys() {
  // @@protoc_insertion_point(field_mutable_list:google.datastore.v1beta3.AllocateIdsResponse.keys)
  return &keys_;
}
inline const ::google::protobuf::RepeatedPtrField< ::google::datastore::v1beta3::Key >&
AllocateIdsResponse::keys() const {
  // @@protoc_insertion_point(field_list:google.datastore.v1beta3.AllocateIdsResponse.keys)
  return keys_;
}

// -------------------------------------------------------------------

// Mutation

// .google.datastore.v1beta3.Entity insert = 4;
inline bool Mutation::has_insert() const {
  return operation_case() == kInsert;
}
inline void Mutation::set_has_insert() {
  _oneof_case_[0] = kInsert;
}
inline ::google::datastore::v1beta3::Entity* Mutation::release_insert() {
  // @@protoc_insertion_point(field_release:google.datastore.v1beta3.Mutation.insert)
  if (has_insert()) {
    clear_has_operation();
      ::google::datastore::v1beta3::Entity* temp = operation_.insert_;
    operation_.insert_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::datastore::v1beta3::Entity& Mutation::insert() const {
  // @@protoc_insertion_point(field_get:google.datastore.v1beta3.Mutation.insert)
  return has_insert()
      ? *operation_.insert_
      : *reinterpret_cast< ::google::datastore::v1beta3::Entity*>(&::google::datastore::v1beta3::_Entity_default_instance_);
}
inline ::google::datastore::v1beta3::Entity* Mutation::mutable_insert() {
  if (!has_insert()) {
    clear_operation();
    set_has_insert();
    operation_.insert_ = new ::google::datastore::v1beta3::Entity;
  }
  // @@protoc_insertion_point(field_mutable:google.datastore.v1beta3.Mutation.insert)
  return operation_.insert_;
}

// .google.datastore.v1beta3.Entity update = 5;
inline bool Mutation::has_update() const {
  return operation_case() == kUpdate;
}
inline void Mutation::set_has_update() {
  _oneof_case_[0] = kUpdate;
}
inline ::google::datastore::v1beta3::Entity* Mutation::release_update() {
  // @@protoc_insertion_point(field_release:google.datastore.v1beta3.Mutation.update)
  if (has_update()) {
    clear_has_operation();
      ::google::datastore::v1beta3::Entity* temp = operation_.update_;
    operation_.update_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::datastore::v1beta3::Entity& Mutation::update() const {
  // @@protoc_insertion_point(field_get:google.datastore.v1beta3.Mutation.update)
  return has_update()
      ? *operation_.update_
      : *reinterpret_cast< ::google::datastore::v1beta3::Entity*>(&::google::datastore::v1beta3::_Entity_default_instance_);
}
inline ::google::datastore::v1beta3::Entity* Mutation::mutable_update() {
  if (!has_update()) {
    clear_operation();
    set_has_update();
    operation_.update_ = new ::google::datastore::v1beta3::Entity;
  }
  // @@protoc_insertion_point(field_mutable:google.datastore.v1beta3.Mutation.update)
  return operation_.update_;
}

// .google.datastore.v1beta3.Entity upsert = 6;
inline bool Mutation::has_upsert() const {
  return operation_case() == kUpsert;
}
inline void Mutation::set_has_upsert() {
  _oneof_case_[0] = kUpsert;
}
inline ::google::datastore::v1beta3::Entity* Mutation::release_upsert() {
  // @@protoc_insertion_point(field_release:google.datastore.v1beta3.Mutation.upsert)
  if (has_upsert()) {
    clear_has_operation();
      ::google::datastore::v1beta3::Entity* temp = operation_.upsert_;
    operation_.upsert_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::datastore::v1beta3::Entity& Mutation::upsert() const {
  // @@protoc_insertion_point(field_get:google.datastore.v1beta3.Mutation.upsert)
  return has_upsert()
      ? *operation_.upsert_
      : *reinterpret_cast< ::google::datastore::v1beta3::Entity*>(&::google::datastore::v1beta3::_Entity_default_instance_);
}
inline ::google::datastore::v1beta3::Entity* Mutation::mutable_upsert() {
  if (!has_upsert()) {
    clear_operation();
    set_has_upsert();
    operation_.upsert_ = new ::google::datastore::v1beta3::Entity;
  }
  // @@protoc_insertion_point(field_mutable:google.datastore.v1beta3.Mutation.upsert)
  return operation_.upsert_;
}

// .google.datastore.v1beta3.Key delete = 7;
inline bool Mutation::has_delete_() const {
  return operation_case() == kDelete;
}
inline void Mutation::set_has_delete_() {
  _oneof_case_[0] = kDelete;
}
inline ::google::datastore::v1beta3::Key* Mutation::release_delete_() {
  // @@protoc_insertion_point(field_release:google.datastore.v1beta3.Mutation.delete)
  if (has_delete_()) {
    clear_has_operation();
      ::google::datastore::v1beta3::Key* temp = operation_.delete__;
    operation_.delete__ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::datastore::v1beta3::Key& Mutation::delete_() const {
  // @@protoc_insertion_point(field_get:google.datastore.v1beta3.Mutation.delete)
  return has_delete_()
      ? *operation_.delete__
      : *reinterpret_cast< ::google::datastore::v1beta3::Key*>(&::google::datastore::v1beta3::_Key_default_instance_);
}
inline ::google::datastore::v1beta3::Key* Mutation::mutable_delete_() {
  if (!has_delete_()) {
    clear_operation();
    set_has_delete_();
    operation_.delete__ = new ::google::datastore::v1beta3::Key;
  }
  // @@protoc_insertion_point(field_mutable:google.datastore.v1beta3.Mutation.delete)
  return operation_.delete__;
}

// int64 base_version = 8;
inline bool Mutation::has_base_version() const {
  return conflict_detection_strategy_case() == kBaseVersion;
}
inline void Mutation::set_has_base_version() {
  _oneof_case_[1] = kBaseVersion;
}
inline void Mutation::clear_base_version() {
  if (has_base_version()) {
    conflict_detection_strategy_.base_version_ = GOOGLE_LONGLONG(0);
    clear_has_conflict_detection_strategy();
  }
}
inline ::google::protobuf::int64 Mutation::base_version() const {
  // @@protoc_insertion_point(field_get:google.datastore.v1beta3.Mutation.base_version)
  if (has_base_version()) {
    return conflict_detection_strategy_.base_version_;
  }
  return GOOGLE_LONGLONG(0);
}
inline void Mutation::set_base_version(::google::protobuf::int64 value) {
  if (!has_base_version()) {
    clear_conflict_detection_strategy();
    set_has_base_version();
  }
  conflict_detection_strategy_.base_version_ = value;
  // @@protoc_insertion_point(field_set:google.datastore.v1beta3.Mutation.base_version)
}

inline bool Mutation::has_operation() const {
  return operation_case() != OPERATION_NOT_SET;
}
inline void Mutation::clear_has_operation() {
  _oneof_case_[0] = OPERATION_NOT_SET;
}
inline bool Mutation::has_conflict_detection_strategy() const {
  return conflict_detection_strategy_case() != CONFLICT_DETECTION_STRATEGY_NOT_SET;
}
inline void Mutation::clear_has_conflict_detection_strategy() {
  _oneof_case_[1] = CONFLICT_DETECTION_STRATEGY_NOT_SET;
}
inline Mutation::OperationCase Mutation::operation_case() const {
  return Mutation::OperationCase(_oneof_case_[0]);
}
inline Mutation::ConflictDetectionStrategyCase Mutation::conflict_detection_strategy_case() const {
  return Mutation::ConflictDetectionStrategyCase(_oneof_case_[1]);
}
// -------------------------------------------------------------------

// MutationResult

// .google.datastore.v1beta3.Key key = 3;
inline bool MutationResult::has_key() const {
  return this != internal_default_instance() && key_ != NULL;
}
inline const ::google::datastore::v1beta3::Key& MutationResult::key() const {
  const ::google::datastore::v1beta3::Key* p = key_;
  // @@protoc_insertion_point(field_get:google.datastore.v1beta3.MutationResult.key)
  return p != NULL ? *p : *reinterpret_cast<const ::google::datastore::v1beta3::Key*>(
      &::google::datastore::v1beta3::_Key_default_instance_);
}
inline ::google::datastore::v1beta3::Key* MutationResult::release_key() {
  // @@protoc_insertion_point(field_release:google.datastore.v1beta3.MutationResult.key)
  
  ::google::datastore::v1beta3::Key* temp = key_;
  key_ = NULL;
  return temp;
}
inline ::google::datastore::v1beta3::Key* MutationResult::mutable_key() {
  
  if (key_ == NULL) {
    key_ = new ::google::datastore::v1beta3::Key;
  }
  // @@protoc_insertion_point(field_mutable:google.datastore.v1beta3.MutationResult.key)
  return key_;
}
inline void MutationResult::set_allocated_key(::google::datastore::v1beta3::Key* key) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(key_);
  }
  if (key) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      key = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, key, submessage_arena);
    }
    
  } else {
    
  }
  key_ = key;
  // @@protoc_insertion_point(field_set_allocated:google.datastore.v1beta3.MutationResult.key)
}

// int64 version = 4;
inline void MutationResult::clear_version() {
  version_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 MutationResult::version() const {
  // @@protoc_insertion_point(field_get:google.datastore.v1beta3.MutationResult.version)
  return version_;
}
inline void MutationResult::set_version(::google::protobuf::int64 value) {
  
  version_ = value;
  // @@protoc_insertion_point(field_set:google.datastore.v1beta3.MutationResult.version)
}

// bool conflict_detected = 5;
inline void MutationResult::clear_conflict_detected() {
  conflict_detected_ = false;
}
inline bool MutationResult::conflict_detected() const {
  // @@protoc_insertion_point(field_get:google.datastore.v1beta3.MutationResult.conflict_detected)
  return conflict_detected_;
}
inline void MutationResult::set_conflict_detected(bool value) {
  
  conflict_detected_ = value;
  // @@protoc_insertion_point(field_set:google.datastore.v1beta3.MutationResult.conflict_detected)
}

// -------------------------------------------------------------------

// ReadOptions

// .google.datastore.v1beta3.ReadOptions.ReadConsistency read_consistency = 1;
inline bool ReadOptions::has_read_consistency() const {
  return consistency_type_case() == kReadConsistency;
}
inline void ReadOptions::set_has_read_consistency() {
  _oneof_case_[0] = kReadConsistency;
}
inline void ReadOptions::clear_read_consistency() {
  if (has_read_consistency()) {
    consistency_type_.read_consistency_ = 0;
    clear_has_consistency_type();
  }
}
inline ::google::datastore::v1beta3::ReadOptions_ReadConsistency ReadOptions::read_consistency() const {
  // @@protoc_insertion_point(field_get:google.datastore.v1beta3.ReadOptions.read_consistency)
  if (has_read_consistency()) {
    return static_cast< ::google::datastore::v1beta3::ReadOptions_ReadConsistency >(consistency_type_.read_consistency_);
  }
  return static_cast< ::google::datastore::v1beta3::ReadOptions_ReadConsistency >(0);
}
inline void ReadOptions::set_read_consistency(::google::datastore::v1beta3::ReadOptions_ReadConsistency value) {
  if (!has_read_consistency()) {
    clear_consistency_type();
    set_has_read_consistency();
  }
  consistency_type_.read_consistency_ = value;
  // @@protoc_insertion_point(field_set:google.datastore.v1beta3.ReadOptions.read_consistency)
}

// bytes transaction = 2;
inline bool ReadOptions::has_transaction() const {
  return consistency_type_case() == kTransaction;
}
inline void ReadOptions::set_has_transaction() {
  _oneof_case_[0] = kTransaction;
}
inline void ReadOptions::clear_transaction() {
  if (has_transaction()) {
    consistency_type_.transaction_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_consistency_type();
  }
}
inline const ::std::string& ReadOptions::transaction() const {
  // @@protoc_insertion_point(field_get:google.datastore.v1beta3.ReadOptions.transaction)
  if (has_transaction()) {
    return consistency_type_.transaction_.GetNoArena();
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
inline void ReadOptions::set_transaction(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:google.datastore.v1beta3.ReadOptions.transaction)
  if (!has_transaction()) {
    clear_consistency_type();
    set_has_transaction();
    consistency_type_.transaction_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  consistency_type_.transaction_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.datastore.v1beta3.ReadOptions.transaction)
}
#if LANG_CXX11
inline void ReadOptions::set_transaction(::std::string&& value) {
  // @@protoc_insertion_point(field_set:google.datastore.v1beta3.ReadOptions.transaction)
  if (!has_transaction()) {
    clear_consistency_type();
    set_has_transaction();
    consistency_type_.transaction_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  consistency_type_.transaction_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.datastore.v1beta3.ReadOptions.transaction)
}
#endif
inline void ReadOptions::set_transaction(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  if (!has_transaction()) {
    clear_consistency_type();
    set_has_transaction();
    consistency_type_.transaction_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  consistency_type_.transaction_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.datastore.v1beta3.ReadOptions.transaction)
}
inline void ReadOptions::set_transaction(const void* value, size_t size) {
  if (!has_transaction()) {
    clear_consistency_type();
    set_has_transaction();
    consistency_type_.transaction_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  consistency_type_.transaction_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.datastore.v1beta3.ReadOptions.transaction)
}
inline ::std::string* ReadOptions::mutable_transaction() {
  if (!has_transaction()) {
    clear_consistency_type();
    set_has_transaction();
    consistency_type_.transaction_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:google.datastore.v1beta3.ReadOptions.transaction)
  return consistency_type_.transaction_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ReadOptions::release_transaction() {
  // @@protoc_insertion_point(field_release:google.datastore.v1beta3.ReadOptions.transaction)
  if (has_transaction()) {
    clear_has_consistency_type();
    return consistency_type_.transaction_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
inline void ReadOptions::set_allocated_transaction(::std::string* transaction) {
  if (!has_transaction()) {
    consistency_type_.transaction_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_consistency_type();
  if (transaction != NULL) {
    set_has_transaction();
    consistency_type_.transaction_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        transaction);
  }
  // @@protoc_insertion_point(field_set_allocated:google.datastore.v1beta3.ReadOptions.transaction)
}

inline bool ReadOptions::has_consistency_type() const {
  return consistency_type_case() != CONSISTENCY_TYPE_NOT_SET;
}
inline void ReadOptions::clear_has_consistency_type() {
  _oneof_case_[0] = CONSISTENCY_TYPE_NOT_SET;
}
inline ReadOptions::ConsistencyTypeCase ReadOptions::consistency_type_case() const {
  return ReadOptions::ConsistencyTypeCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// TransactionOptions_ReadWrite

// bytes previous_transaction = 1;
inline void TransactionOptions_ReadWrite::clear_previous_transaction() {
  previous_transaction_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TransactionOptions_ReadWrite::previous_transaction() const {
  // @@protoc_insertion_point(field_get:google.datastore.v1beta3.TransactionOptions.ReadWrite.previous_transaction)
  return previous_transaction_.GetNoArena();
}
inline void TransactionOptions_ReadWrite::set_previous_transaction(const ::std::string& value) {
  
  previous_transaction_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.datastore.v1beta3.TransactionOptions.ReadWrite.previous_transaction)
}
#if LANG_CXX11
inline void TransactionOptions_ReadWrite::set_previous_transaction(::std::string&& value) {
  
  previous_transaction_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.datastore.v1beta3.TransactionOptions.ReadWrite.previous_transaction)
}
#endif
inline void TransactionOptions_ReadWrite::set_previous_transaction(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  previous_transaction_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.datastore.v1beta3.TransactionOptions.ReadWrite.previous_transaction)
}
inline void TransactionOptions_ReadWrite::set_previous_transaction(const void* value, size_t size) {
  
  previous_transaction_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.datastore.v1beta3.TransactionOptions.ReadWrite.previous_transaction)
}
inline ::std::string* TransactionOptions_ReadWrite::mutable_previous_transaction() {
  
  // @@protoc_insertion_point(field_mutable:google.datastore.v1beta3.TransactionOptions.ReadWrite.previous_transaction)
  return previous_transaction_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TransactionOptions_ReadWrite::release_previous_transaction() {
  // @@protoc_insertion_point(field_release:google.datastore.v1beta3.TransactionOptions.ReadWrite.previous_transaction)
  
  return previous_transaction_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TransactionOptions_ReadWrite::set_allocated_previous_transaction(::std::string* previous_transaction) {
  if (previous_transaction != NULL) {
    
  } else {
    
  }
  previous_transaction_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), previous_transaction);
  // @@protoc_insertion_point(field_set_allocated:google.datastore.v1beta3.TransactionOptions.ReadWrite.previous_transaction)
}

// -------------------------------------------------------------------

// TransactionOptions_ReadOnly

// -------------------------------------------------------------------

// TransactionOptions

// .google.datastore.v1beta3.TransactionOptions.ReadWrite read_write = 1;
inline bool TransactionOptions::has_read_write() const {
  return mode_case() == kReadWrite;
}
inline void TransactionOptions::set_has_read_write() {
  _oneof_case_[0] = kReadWrite;
}
inline void TransactionOptions::clear_read_write() {
  if (has_read_write()) {
    delete mode_.read_write_;
    clear_has_mode();
  }
}
inline ::google::datastore::v1beta3::TransactionOptions_ReadWrite* TransactionOptions::release_read_write() {
  // @@protoc_insertion_point(field_release:google.datastore.v1beta3.TransactionOptions.read_write)
  if (has_read_write()) {
    clear_has_mode();
      ::google::datastore::v1beta3::TransactionOptions_ReadWrite* temp = mode_.read_write_;
    mode_.read_write_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::datastore::v1beta3::TransactionOptions_ReadWrite& TransactionOptions::read_write() const {
  // @@protoc_insertion_point(field_get:google.datastore.v1beta3.TransactionOptions.read_write)
  return has_read_write()
      ? *mode_.read_write_
      : *reinterpret_cast< ::google::datastore::v1beta3::TransactionOptions_ReadWrite*>(&::google::datastore::v1beta3::_TransactionOptions_ReadWrite_default_instance_);
}
inline ::google::datastore::v1beta3::TransactionOptions_ReadWrite* TransactionOptions::mutable_read_write() {
  if (!has_read_write()) {
    clear_mode();
    set_has_read_write();
    mode_.read_write_ = new ::google::datastore::v1beta3::TransactionOptions_ReadWrite;
  }
  // @@protoc_insertion_point(field_mutable:google.datastore.v1beta3.TransactionOptions.read_write)
  return mode_.read_write_;
}

// .google.datastore.v1beta3.TransactionOptions.ReadOnly read_only = 2;
inline bool TransactionOptions::has_read_only() const {
  return mode_case() == kReadOnly;
}
inline void TransactionOptions::set_has_read_only() {
  _oneof_case_[0] = kReadOnly;
}
inline void TransactionOptions::clear_read_only() {
  if (has_read_only()) {
    delete mode_.read_only_;
    clear_has_mode();
  }
}
inline ::google::datastore::v1beta3::TransactionOptions_ReadOnly* TransactionOptions::release_read_only() {
  // @@protoc_insertion_point(field_release:google.datastore.v1beta3.TransactionOptions.read_only)
  if (has_read_only()) {
    clear_has_mode();
      ::google::datastore::v1beta3::TransactionOptions_ReadOnly* temp = mode_.read_only_;
    mode_.read_only_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::datastore::v1beta3::TransactionOptions_ReadOnly& TransactionOptions::read_only() const {
  // @@protoc_insertion_point(field_get:google.datastore.v1beta3.TransactionOptions.read_only)
  return has_read_only()
      ? *mode_.read_only_
      : *reinterpret_cast< ::google::datastore::v1beta3::TransactionOptions_ReadOnly*>(&::google::datastore::v1beta3::_TransactionOptions_ReadOnly_default_instance_);
}
inline ::google::datastore::v1beta3::TransactionOptions_ReadOnly* TransactionOptions::mutable_read_only() {
  if (!has_read_only()) {
    clear_mode();
    set_has_read_only();
    mode_.read_only_ = new ::google::datastore::v1beta3::TransactionOptions_ReadOnly;
  }
  // @@protoc_insertion_point(field_mutable:google.datastore.v1beta3.TransactionOptions.read_only)
  return mode_.read_only_;
}

inline bool TransactionOptions::has_mode() const {
  return mode_case() != MODE_NOT_SET;
}
inline void TransactionOptions::clear_has_mode() {
  _oneof_case_[0] = MODE_NOT_SET;
}
inline TransactionOptions::ModeCase TransactionOptions::mode_case() const {
  return TransactionOptions::ModeCase(_oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1beta3
}  // namespace datastore
}  // namespace google

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::google::datastore::v1beta3::CommitRequest_Mode> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::google::datastore::v1beta3::CommitRequest_Mode>() {
  return ::google::datastore::v1beta3::CommitRequest_Mode_descriptor();
}
template <> struct is_proto_enum< ::google::datastore::v1beta3::ReadOptions_ReadConsistency> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::google::datastore::v1beta3::ReadOptions_ReadConsistency>() {
  return ::google::datastore::v1beta3::ReadOptions_ReadConsistency_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_google_2fdatastore_2fv1beta3_2fdatastore_2eproto__INCLUDED
