// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/cloud/functions/v1beta2/functions.proto

#ifndef PROTOBUF_google_2fcloud_2ffunctions_2fv1beta2_2ffunctions_2eproto__INCLUDED
#define PROTOBUF_google_2fcloud_2ffunctions_2fv1beta2_2ffunctions_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "google/api/annotations.pb.h"
#include "google/api/auth.pb.h"
#include "google/cloud/functions/v1beta2/operations.pb.h"
#include "google/longrunning/operations.pb.h"
#include <google/protobuf/duration.pb.h>
#include <google/protobuf/timestamp.pb.h>
// @@protoc_insertion_point(includes)

namespace protobuf_google_2fcloud_2ffunctions_2fv1beta2_2ffunctions_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[12];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsCloudFunctionImpl();
void InitDefaultsCloudFunction();
void InitDefaultsHTTPSTriggerImpl();
void InitDefaultsHTTPSTrigger();
void InitDefaultsEventTriggerImpl();
void InitDefaultsEventTrigger();
void InitDefaultsSourceRepositoryImpl();
void InitDefaultsSourceRepository();
void InitDefaultsCreateFunctionRequestImpl();
void InitDefaultsCreateFunctionRequest();
void InitDefaultsUpdateFunctionRequestImpl();
void InitDefaultsUpdateFunctionRequest();
void InitDefaultsGetFunctionRequestImpl();
void InitDefaultsGetFunctionRequest();
void InitDefaultsListFunctionsRequestImpl();
void InitDefaultsListFunctionsRequest();
void InitDefaultsListFunctionsResponseImpl();
void InitDefaultsListFunctionsResponse();
void InitDefaultsDeleteFunctionRequestImpl();
void InitDefaultsDeleteFunctionRequest();
void InitDefaultsCallFunctionRequestImpl();
void InitDefaultsCallFunctionRequest();
void InitDefaultsCallFunctionResponseImpl();
void InitDefaultsCallFunctionResponse();
inline void InitDefaults() {
  InitDefaultsCloudFunction();
  InitDefaultsHTTPSTrigger();
  InitDefaultsEventTrigger();
  InitDefaultsSourceRepository();
  InitDefaultsCreateFunctionRequest();
  InitDefaultsUpdateFunctionRequest();
  InitDefaultsGetFunctionRequest();
  InitDefaultsListFunctionsRequest();
  InitDefaultsListFunctionsResponse();
  InitDefaultsDeleteFunctionRequest();
  InitDefaultsCallFunctionRequest();
  InitDefaultsCallFunctionResponse();
}
}  // namespace protobuf_google_2fcloud_2ffunctions_2fv1beta2_2ffunctions_2eproto
namespace google {
namespace cloud {
namespace functions {
namespace v1beta2 {
class CallFunctionRequest;
class CallFunctionRequestDefaultTypeInternal;
extern CallFunctionRequestDefaultTypeInternal _CallFunctionRequest_default_instance_;
class CallFunctionResponse;
class CallFunctionResponseDefaultTypeInternal;
extern CallFunctionResponseDefaultTypeInternal _CallFunctionResponse_default_instance_;
class CloudFunction;
class CloudFunctionDefaultTypeInternal;
extern CloudFunctionDefaultTypeInternal _CloudFunction_default_instance_;
class CreateFunctionRequest;
class CreateFunctionRequestDefaultTypeInternal;
extern CreateFunctionRequestDefaultTypeInternal _CreateFunctionRequest_default_instance_;
class DeleteFunctionRequest;
class DeleteFunctionRequestDefaultTypeInternal;
extern DeleteFunctionRequestDefaultTypeInternal _DeleteFunctionRequest_default_instance_;
class EventTrigger;
class EventTriggerDefaultTypeInternal;
extern EventTriggerDefaultTypeInternal _EventTrigger_default_instance_;
class GetFunctionRequest;
class GetFunctionRequestDefaultTypeInternal;
extern GetFunctionRequestDefaultTypeInternal _GetFunctionRequest_default_instance_;
class HTTPSTrigger;
class HTTPSTriggerDefaultTypeInternal;
extern HTTPSTriggerDefaultTypeInternal _HTTPSTrigger_default_instance_;
class ListFunctionsRequest;
class ListFunctionsRequestDefaultTypeInternal;
extern ListFunctionsRequestDefaultTypeInternal _ListFunctionsRequest_default_instance_;
class ListFunctionsResponse;
class ListFunctionsResponseDefaultTypeInternal;
extern ListFunctionsResponseDefaultTypeInternal _ListFunctionsResponse_default_instance_;
class SourceRepository;
class SourceRepositoryDefaultTypeInternal;
extern SourceRepositoryDefaultTypeInternal _SourceRepository_default_instance_;
class UpdateFunctionRequest;
class UpdateFunctionRequestDefaultTypeInternal;
extern UpdateFunctionRequestDefaultTypeInternal _UpdateFunctionRequest_default_instance_;
}  // namespace v1beta2
}  // namespace functions
}  // namespace cloud
}  // namespace google
namespace google {
namespace cloud {
namespace functions {
namespace v1beta2 {

enum CloudFunctionStatus {
  STATUS_UNSPECIFIED = 0,
  READY = 1,
  FAILED = 2,
  DEPLOYING = 3,
  DELETING = 4,
  CloudFunctionStatus_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  CloudFunctionStatus_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool CloudFunctionStatus_IsValid(int value);
const CloudFunctionStatus CloudFunctionStatus_MIN = STATUS_UNSPECIFIED;
const CloudFunctionStatus CloudFunctionStatus_MAX = DELETING;
const int CloudFunctionStatus_ARRAYSIZE = CloudFunctionStatus_MAX + 1;

const ::google::protobuf::EnumDescriptor* CloudFunctionStatus_descriptor();
inline const ::std::string& CloudFunctionStatus_Name(CloudFunctionStatus value) {
  return ::google::protobuf::internal::NameOfEnum(
    CloudFunctionStatus_descriptor(), value);
}
inline bool CloudFunctionStatus_Parse(
    const ::std::string& name, CloudFunctionStatus* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CloudFunctionStatus>(
    CloudFunctionStatus_descriptor(), name, value);
}
// ===================================================================

class CloudFunction : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.cloud.functions.v1beta2.CloudFunction) */ {
 public:
  CloudFunction();
  virtual ~CloudFunction();

  CloudFunction(const CloudFunction& from);

  inline CloudFunction& operator=(const CloudFunction& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CloudFunction(CloudFunction&& from) noexcept
    : CloudFunction() {
    *this = ::std::move(from);
  }

  inline CloudFunction& operator=(CloudFunction&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CloudFunction& default_instance();

  enum SourceCodeCase {
    kSourceArchiveUrl = 14,
    kSourceRepository = 3,
    SOURCE_CODE_NOT_SET = 0,
  };

  enum TriggerCase {
    kHttpsTrigger = 6,
    kEventTrigger = 12,
    TRIGGER_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CloudFunction* internal_default_instance() {
    return reinterpret_cast<const CloudFunction*>(
               &_CloudFunction_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(CloudFunction* other);
  friend void swap(CloudFunction& a, CloudFunction& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CloudFunction* New() const PROTOBUF_FINAL { return New(NULL); }

  CloudFunction* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CloudFunction& from);
  void MergeFrom(const CloudFunction& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CloudFunction* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // string latest_operation = 8;
  void clear_latest_operation();
  static const int kLatestOperationFieldNumber = 8;
  const ::std::string& latest_operation() const;
  void set_latest_operation(const ::std::string& value);
  #if LANG_CXX11
  void set_latest_operation(::std::string&& value);
  #endif
  void set_latest_operation(const char* value);
  void set_latest_operation(const char* value, size_t size);
  ::std::string* mutable_latest_operation();
  ::std::string* release_latest_operation();
  void set_allocated_latest_operation(::std::string* latest_operation);

  // string entry_point = 9;
  void clear_entry_point();
  static const int kEntryPointFieldNumber = 9;
  const ::std::string& entry_point() const;
  void set_entry_point(const ::std::string& value);
  #if LANG_CXX11
  void set_entry_point(::std::string&& value);
  #endif
  void set_entry_point(const char* value);
  void set_entry_point(const char* value, size_t size);
  ::std::string* mutable_entry_point();
  ::std::string* release_entry_point();
  void set_allocated_entry_point(::std::string* entry_point);

  // string service_account = 13;
  void clear_service_account();
  static const int kServiceAccountFieldNumber = 13;
  const ::std::string& service_account() const;
  void set_service_account(const ::std::string& value);
  #if LANG_CXX11
  void set_service_account(::std::string&& value);
  #endif
  void set_service_account(const char* value);
  void set_service_account(const char* value, size_t size);
  ::std::string* mutable_service_account();
  ::std::string* release_service_account();
  void set_allocated_service_account(::std::string* service_account);

  // .google.protobuf.Duration timeout = 10;
  bool has_timeout() const;
  void clear_timeout();
  static const int kTimeoutFieldNumber = 10;
  const ::google::protobuf::Duration& timeout() const;
  ::google::protobuf::Duration* release_timeout();
  ::google::protobuf::Duration* mutable_timeout();
  void set_allocated_timeout(::google::protobuf::Duration* timeout);

  // .google.protobuf.Timestamp update_time = 15;
  bool has_update_time() const;
  void clear_update_time();
  static const int kUpdateTimeFieldNumber = 15;
  const ::google::protobuf::Timestamp& update_time() const;
  ::google::protobuf::Timestamp* release_update_time();
  ::google::protobuf::Timestamp* mutable_update_time();
  void set_allocated_update_time(::google::protobuf::Timestamp* update_time);

  // .google.cloud.functions.v1beta2.CloudFunctionStatus status = 7;
  void clear_status();
  static const int kStatusFieldNumber = 7;
  ::google::cloud::functions::v1beta2::CloudFunctionStatus status() const;
  void set_status(::google::cloud::functions::v1beta2::CloudFunctionStatus value);

  // int32 available_memory_mb = 11;
  void clear_available_memory_mb();
  static const int kAvailableMemoryMbFieldNumber = 11;
  ::google::protobuf::int32 available_memory_mb() const;
  void set_available_memory_mb(::google::protobuf::int32 value);

  // string source_archive_url = 14;
  private:
  bool has_source_archive_url() const;
  public:
  void clear_source_archive_url();
  static const int kSourceArchiveUrlFieldNumber = 14;
  const ::std::string& source_archive_url() const;
  void set_source_archive_url(const ::std::string& value);
  #if LANG_CXX11
  void set_source_archive_url(::std::string&& value);
  #endif
  void set_source_archive_url(const char* value);
  void set_source_archive_url(const char* value, size_t size);
  ::std::string* mutable_source_archive_url();
  ::std::string* release_source_archive_url();
  void set_allocated_source_archive_url(::std::string* source_archive_url);

  // .google.cloud.functions.v1beta2.SourceRepository source_repository = 3;
  bool has_source_repository() const;
  void clear_source_repository();
  static const int kSourceRepositoryFieldNumber = 3;
  const ::google::cloud::functions::v1beta2::SourceRepository& source_repository() const;
  ::google::cloud::functions::v1beta2::SourceRepository* release_source_repository();
  ::google::cloud::functions::v1beta2::SourceRepository* mutable_source_repository();
  void set_allocated_source_repository(::google::cloud::functions::v1beta2::SourceRepository* source_repository);

  // .google.cloud.functions.v1beta2.HTTPSTrigger https_trigger = 6;
  bool has_https_trigger() const;
  void clear_https_trigger();
  static const int kHttpsTriggerFieldNumber = 6;
  const ::google::cloud::functions::v1beta2::HTTPSTrigger& https_trigger() const;
  ::google::cloud::functions::v1beta2::HTTPSTrigger* release_https_trigger();
  ::google::cloud::functions::v1beta2::HTTPSTrigger* mutable_https_trigger();
  void set_allocated_https_trigger(::google::cloud::functions::v1beta2::HTTPSTrigger* https_trigger);

  // .google.cloud.functions.v1beta2.EventTrigger event_trigger = 12;
  bool has_event_trigger() const;
  void clear_event_trigger();
  static const int kEventTriggerFieldNumber = 12;
  const ::google::cloud::functions::v1beta2::EventTrigger& event_trigger() const;
  ::google::cloud::functions::v1beta2::EventTrigger* release_event_trigger();
  ::google::cloud::functions::v1beta2::EventTrigger* mutable_event_trigger();
  void set_allocated_event_trigger(::google::cloud::functions::v1beta2::EventTrigger* event_trigger);

  SourceCodeCase source_code_case() const;
  TriggerCase trigger_case() const;
  // @@protoc_insertion_point(class_scope:google.cloud.functions.v1beta2.CloudFunction)
 private:
  void set_has_source_archive_url();
  void set_has_source_repository();
  void set_has_https_trigger();
  void set_has_event_trigger();

  inline bool has_source_code() const;
  void clear_source_code();
  inline void clear_has_source_code();

  inline bool has_trigger() const;
  void clear_trigger();
  inline void clear_has_trigger();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr latest_operation_;
  ::google::protobuf::internal::ArenaStringPtr entry_point_;
  ::google::protobuf::internal::ArenaStringPtr service_account_;
  ::google::protobuf::Duration* timeout_;
  ::google::protobuf::Timestamp* update_time_;
  int status_;
  ::google::protobuf::int32 available_memory_mb_;
  union SourceCodeUnion {
    SourceCodeUnion() {}
    ::google::protobuf::internal::ArenaStringPtr source_archive_url_;
    ::google::cloud::functions::v1beta2::SourceRepository* source_repository_;
  } source_code_;
  union TriggerUnion {
    TriggerUnion() {}
    ::google::cloud::functions::v1beta2::HTTPSTrigger* https_trigger_;
    ::google::cloud::functions::v1beta2::EventTrigger* event_trigger_;
  } trigger_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[2];

  friend struct ::protobuf_google_2fcloud_2ffunctions_2fv1beta2_2ffunctions_2eproto::TableStruct;
  friend void ::protobuf_google_2fcloud_2ffunctions_2fv1beta2_2ffunctions_2eproto::InitDefaultsCloudFunctionImpl();
};
// -------------------------------------------------------------------

class HTTPSTrigger : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.cloud.functions.v1beta2.HTTPSTrigger) */ {
 public:
  HTTPSTrigger();
  virtual ~HTTPSTrigger();

  HTTPSTrigger(const HTTPSTrigger& from);

  inline HTTPSTrigger& operator=(const HTTPSTrigger& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  HTTPSTrigger(HTTPSTrigger&& from) noexcept
    : HTTPSTrigger() {
    *this = ::std::move(from);
  }

  inline HTTPSTrigger& operator=(HTTPSTrigger&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const HTTPSTrigger& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const HTTPSTrigger* internal_default_instance() {
    return reinterpret_cast<const HTTPSTrigger*>(
               &_HTTPSTrigger_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(HTTPSTrigger* other);
  friend void swap(HTTPSTrigger& a, HTTPSTrigger& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline HTTPSTrigger* New() const PROTOBUF_FINAL { return New(NULL); }

  HTTPSTrigger* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const HTTPSTrigger& from);
  void MergeFrom(const HTTPSTrigger& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(HTTPSTrigger* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string url = 1;
  void clear_url();
  static const int kUrlFieldNumber = 1;
  const ::std::string& url() const;
  void set_url(const ::std::string& value);
  #if LANG_CXX11
  void set_url(::std::string&& value);
  #endif
  void set_url(const char* value);
  void set_url(const char* value, size_t size);
  ::std::string* mutable_url();
  ::std::string* release_url();
  void set_allocated_url(::std::string* url);

  // @@protoc_insertion_point(class_scope:google.cloud.functions.v1beta2.HTTPSTrigger)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr url_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fcloud_2ffunctions_2fv1beta2_2ffunctions_2eproto::TableStruct;
  friend void ::protobuf_google_2fcloud_2ffunctions_2fv1beta2_2ffunctions_2eproto::InitDefaultsHTTPSTriggerImpl();
};
// -------------------------------------------------------------------

class EventTrigger : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.cloud.functions.v1beta2.EventTrigger) */ {
 public:
  EventTrigger();
  virtual ~EventTrigger();

  EventTrigger(const EventTrigger& from);

  inline EventTrigger& operator=(const EventTrigger& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  EventTrigger(EventTrigger&& from) noexcept
    : EventTrigger() {
    *this = ::std::move(from);
  }

  inline EventTrigger& operator=(EventTrigger&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const EventTrigger& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EventTrigger* internal_default_instance() {
    return reinterpret_cast<const EventTrigger*>(
               &_EventTrigger_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(EventTrigger* other);
  friend void swap(EventTrigger& a, EventTrigger& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline EventTrigger* New() const PROTOBUF_FINAL { return New(NULL); }

  EventTrigger* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const EventTrigger& from);
  void MergeFrom(const EventTrigger& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(EventTrigger* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string event_type = 1;
  void clear_event_type();
  static const int kEventTypeFieldNumber = 1;
  const ::std::string& event_type() const;
  void set_event_type(const ::std::string& value);
  #if LANG_CXX11
  void set_event_type(::std::string&& value);
  #endif
  void set_event_type(const char* value);
  void set_event_type(const char* value, size_t size);
  ::std::string* mutable_event_type();
  ::std::string* release_event_type();
  void set_allocated_event_type(::std::string* event_type);

  // string resource = 2;
  void clear_resource();
  static const int kResourceFieldNumber = 2;
  const ::std::string& resource() const;
  void set_resource(const ::std::string& value);
  #if LANG_CXX11
  void set_resource(::std::string&& value);
  #endif
  void set_resource(const char* value);
  void set_resource(const char* value, size_t size);
  ::std::string* mutable_resource();
  ::std::string* release_resource();
  void set_allocated_resource(::std::string* resource);

  // @@protoc_insertion_point(class_scope:google.cloud.functions.v1beta2.EventTrigger)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr event_type_;
  ::google::protobuf::internal::ArenaStringPtr resource_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fcloud_2ffunctions_2fv1beta2_2ffunctions_2eproto::TableStruct;
  friend void ::protobuf_google_2fcloud_2ffunctions_2fv1beta2_2ffunctions_2eproto::InitDefaultsEventTriggerImpl();
};
// -------------------------------------------------------------------

class SourceRepository : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.cloud.functions.v1beta2.SourceRepository) */ {
 public:
  SourceRepository();
  virtual ~SourceRepository();

  SourceRepository(const SourceRepository& from);

  inline SourceRepository& operator=(const SourceRepository& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SourceRepository(SourceRepository&& from) noexcept
    : SourceRepository() {
    *this = ::std::move(from);
  }

  inline SourceRepository& operator=(SourceRepository&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SourceRepository& default_instance();

  enum VersionCase {
    kBranch = 3,
    kTag = 4,
    kRevision = 5,
    VERSION_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SourceRepository* internal_default_instance() {
    return reinterpret_cast<const SourceRepository*>(
               &_SourceRepository_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(SourceRepository* other);
  friend void swap(SourceRepository& a, SourceRepository& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SourceRepository* New() const PROTOBUF_FINAL { return New(NULL); }

  SourceRepository* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SourceRepository& from);
  void MergeFrom(const SourceRepository& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SourceRepository* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string repository_url = 1;
  void clear_repository_url();
  static const int kRepositoryUrlFieldNumber = 1;
  const ::std::string& repository_url() const;
  void set_repository_url(const ::std::string& value);
  #if LANG_CXX11
  void set_repository_url(::std::string&& value);
  #endif
  void set_repository_url(const char* value);
  void set_repository_url(const char* value, size_t size);
  ::std::string* mutable_repository_url();
  ::std::string* release_repository_url();
  void set_allocated_repository_url(::std::string* repository_url);

  // string source_path = 2;
  void clear_source_path();
  static const int kSourcePathFieldNumber = 2;
  const ::std::string& source_path() const;
  void set_source_path(const ::std::string& value);
  #if LANG_CXX11
  void set_source_path(::std::string&& value);
  #endif
  void set_source_path(const char* value);
  void set_source_path(const char* value, size_t size);
  ::std::string* mutable_source_path();
  ::std::string* release_source_path();
  void set_allocated_source_path(::std::string* source_path);

  // string deployed_revision = 6;
  void clear_deployed_revision();
  static const int kDeployedRevisionFieldNumber = 6;
  const ::std::string& deployed_revision() const;
  void set_deployed_revision(const ::std::string& value);
  #if LANG_CXX11
  void set_deployed_revision(::std::string&& value);
  #endif
  void set_deployed_revision(const char* value);
  void set_deployed_revision(const char* value, size_t size);
  ::std::string* mutable_deployed_revision();
  ::std::string* release_deployed_revision();
  void set_allocated_deployed_revision(::std::string* deployed_revision);

  // string branch = 3;
  private:
  bool has_branch() const;
  public:
  void clear_branch();
  static const int kBranchFieldNumber = 3;
  const ::std::string& branch() const;
  void set_branch(const ::std::string& value);
  #if LANG_CXX11
  void set_branch(::std::string&& value);
  #endif
  void set_branch(const char* value);
  void set_branch(const char* value, size_t size);
  ::std::string* mutable_branch();
  ::std::string* release_branch();
  void set_allocated_branch(::std::string* branch);

  // string tag = 4;
  private:
  bool has_tag() const;
  public:
  void clear_tag();
  static const int kTagFieldNumber = 4;
  const ::std::string& tag() const;
  void set_tag(const ::std::string& value);
  #if LANG_CXX11
  void set_tag(::std::string&& value);
  #endif
  void set_tag(const char* value);
  void set_tag(const char* value, size_t size);
  ::std::string* mutable_tag();
  ::std::string* release_tag();
  void set_allocated_tag(::std::string* tag);

  // string revision = 5;
  private:
  bool has_revision() const;
  public:
  void clear_revision();
  static const int kRevisionFieldNumber = 5;
  const ::std::string& revision() const;
  void set_revision(const ::std::string& value);
  #if LANG_CXX11
  void set_revision(::std::string&& value);
  #endif
  void set_revision(const char* value);
  void set_revision(const char* value, size_t size);
  ::std::string* mutable_revision();
  ::std::string* release_revision();
  void set_allocated_revision(::std::string* revision);

  VersionCase version_case() const;
  // @@protoc_insertion_point(class_scope:google.cloud.functions.v1beta2.SourceRepository)
 private:
  void set_has_branch();
  void set_has_tag();
  void set_has_revision();

  inline bool has_version() const;
  void clear_version();
  inline void clear_has_version();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr repository_url_;
  ::google::protobuf::internal::ArenaStringPtr source_path_;
  ::google::protobuf::internal::ArenaStringPtr deployed_revision_;
  union VersionUnion {
    VersionUnion() {}
    ::google::protobuf::internal::ArenaStringPtr branch_;
    ::google::protobuf::internal::ArenaStringPtr tag_;
    ::google::protobuf::internal::ArenaStringPtr revision_;
  } version_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::protobuf_google_2fcloud_2ffunctions_2fv1beta2_2ffunctions_2eproto::TableStruct;
  friend void ::protobuf_google_2fcloud_2ffunctions_2fv1beta2_2ffunctions_2eproto::InitDefaultsSourceRepositoryImpl();
};
// -------------------------------------------------------------------

class CreateFunctionRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.cloud.functions.v1beta2.CreateFunctionRequest) */ {
 public:
  CreateFunctionRequest();
  virtual ~CreateFunctionRequest();

  CreateFunctionRequest(const CreateFunctionRequest& from);

  inline CreateFunctionRequest& operator=(const CreateFunctionRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CreateFunctionRequest(CreateFunctionRequest&& from) noexcept
    : CreateFunctionRequest() {
    *this = ::std::move(from);
  }

  inline CreateFunctionRequest& operator=(CreateFunctionRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CreateFunctionRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreateFunctionRequest* internal_default_instance() {
    return reinterpret_cast<const CreateFunctionRequest*>(
               &_CreateFunctionRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(CreateFunctionRequest* other);
  friend void swap(CreateFunctionRequest& a, CreateFunctionRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CreateFunctionRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  CreateFunctionRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CreateFunctionRequest& from);
  void MergeFrom(const CreateFunctionRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CreateFunctionRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string location = 1;
  void clear_location();
  static const int kLocationFieldNumber = 1;
  const ::std::string& location() const;
  void set_location(const ::std::string& value);
  #if LANG_CXX11
  void set_location(::std::string&& value);
  #endif
  void set_location(const char* value);
  void set_location(const char* value, size_t size);
  ::std::string* mutable_location();
  ::std::string* release_location();
  void set_allocated_location(::std::string* location);

  // .google.cloud.functions.v1beta2.CloudFunction function = 2;
  bool has_function() const;
  void clear_function();
  static const int kFunctionFieldNumber = 2;
  const ::google::cloud::functions::v1beta2::CloudFunction& function() const;
  ::google::cloud::functions::v1beta2::CloudFunction* release_function();
  ::google::cloud::functions::v1beta2::CloudFunction* mutable_function();
  void set_allocated_function(::google::cloud::functions::v1beta2::CloudFunction* function);

  // @@protoc_insertion_point(class_scope:google.cloud.functions.v1beta2.CreateFunctionRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr location_;
  ::google::cloud::functions::v1beta2::CloudFunction* function_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fcloud_2ffunctions_2fv1beta2_2ffunctions_2eproto::TableStruct;
  friend void ::protobuf_google_2fcloud_2ffunctions_2fv1beta2_2ffunctions_2eproto::InitDefaultsCreateFunctionRequestImpl();
};
// -------------------------------------------------------------------

class UpdateFunctionRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.cloud.functions.v1beta2.UpdateFunctionRequest) */ {
 public:
  UpdateFunctionRequest();
  virtual ~UpdateFunctionRequest();

  UpdateFunctionRequest(const UpdateFunctionRequest& from);

  inline UpdateFunctionRequest& operator=(const UpdateFunctionRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UpdateFunctionRequest(UpdateFunctionRequest&& from) noexcept
    : UpdateFunctionRequest() {
    *this = ::std::move(from);
  }

  inline UpdateFunctionRequest& operator=(UpdateFunctionRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const UpdateFunctionRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UpdateFunctionRequest* internal_default_instance() {
    return reinterpret_cast<const UpdateFunctionRequest*>(
               &_UpdateFunctionRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    5;

  void Swap(UpdateFunctionRequest* other);
  friend void swap(UpdateFunctionRequest& a, UpdateFunctionRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UpdateFunctionRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  UpdateFunctionRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const UpdateFunctionRequest& from);
  void MergeFrom(const UpdateFunctionRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(UpdateFunctionRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // .google.cloud.functions.v1beta2.CloudFunction function = 2;
  bool has_function() const;
  void clear_function();
  static const int kFunctionFieldNumber = 2;
  const ::google::cloud::functions::v1beta2::CloudFunction& function() const;
  ::google::cloud::functions::v1beta2::CloudFunction* release_function();
  ::google::cloud::functions::v1beta2::CloudFunction* mutable_function();
  void set_allocated_function(::google::cloud::functions::v1beta2::CloudFunction* function);

  // @@protoc_insertion_point(class_scope:google.cloud.functions.v1beta2.UpdateFunctionRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::cloud::functions::v1beta2::CloudFunction* function_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fcloud_2ffunctions_2fv1beta2_2ffunctions_2eproto::TableStruct;
  friend void ::protobuf_google_2fcloud_2ffunctions_2fv1beta2_2ffunctions_2eproto::InitDefaultsUpdateFunctionRequestImpl();
};
// -------------------------------------------------------------------

class GetFunctionRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.cloud.functions.v1beta2.GetFunctionRequest) */ {
 public:
  GetFunctionRequest();
  virtual ~GetFunctionRequest();

  GetFunctionRequest(const GetFunctionRequest& from);

  inline GetFunctionRequest& operator=(const GetFunctionRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetFunctionRequest(GetFunctionRequest&& from) noexcept
    : GetFunctionRequest() {
    *this = ::std::move(from);
  }

  inline GetFunctionRequest& operator=(GetFunctionRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetFunctionRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetFunctionRequest* internal_default_instance() {
    return reinterpret_cast<const GetFunctionRequest*>(
               &_GetFunctionRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    6;

  void Swap(GetFunctionRequest* other);
  friend void swap(GetFunctionRequest& a, GetFunctionRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetFunctionRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  GetFunctionRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GetFunctionRequest& from);
  void MergeFrom(const GetFunctionRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GetFunctionRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:google.cloud.functions.v1beta2.GetFunctionRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fcloud_2ffunctions_2fv1beta2_2ffunctions_2eproto::TableStruct;
  friend void ::protobuf_google_2fcloud_2ffunctions_2fv1beta2_2ffunctions_2eproto::InitDefaultsGetFunctionRequestImpl();
};
// -------------------------------------------------------------------

class ListFunctionsRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.cloud.functions.v1beta2.ListFunctionsRequest) */ {
 public:
  ListFunctionsRequest();
  virtual ~ListFunctionsRequest();

  ListFunctionsRequest(const ListFunctionsRequest& from);

  inline ListFunctionsRequest& operator=(const ListFunctionsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ListFunctionsRequest(ListFunctionsRequest&& from) noexcept
    : ListFunctionsRequest() {
    *this = ::std::move(from);
  }

  inline ListFunctionsRequest& operator=(ListFunctionsRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ListFunctionsRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListFunctionsRequest* internal_default_instance() {
    return reinterpret_cast<const ListFunctionsRequest*>(
               &_ListFunctionsRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    7;

  void Swap(ListFunctionsRequest* other);
  friend void swap(ListFunctionsRequest& a, ListFunctionsRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ListFunctionsRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  ListFunctionsRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ListFunctionsRequest& from);
  void MergeFrom(const ListFunctionsRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ListFunctionsRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string location = 1;
  void clear_location();
  static const int kLocationFieldNumber = 1;
  const ::std::string& location() const;
  void set_location(const ::std::string& value);
  #if LANG_CXX11
  void set_location(::std::string&& value);
  #endif
  void set_location(const char* value);
  void set_location(const char* value, size_t size);
  ::std::string* mutable_location();
  ::std::string* release_location();
  void set_allocated_location(::std::string* location);

  // string page_token = 3;
  void clear_page_token();
  static const int kPageTokenFieldNumber = 3;
  const ::std::string& page_token() const;
  void set_page_token(const ::std::string& value);
  #if LANG_CXX11
  void set_page_token(::std::string&& value);
  #endif
  void set_page_token(const char* value);
  void set_page_token(const char* value, size_t size);
  ::std::string* mutable_page_token();
  ::std::string* release_page_token();
  void set_allocated_page_token(::std::string* page_token);

  // int32 page_size = 2;
  void clear_page_size();
  static const int kPageSizeFieldNumber = 2;
  ::google::protobuf::int32 page_size() const;
  void set_page_size(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:google.cloud.functions.v1beta2.ListFunctionsRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr location_;
  ::google::protobuf::internal::ArenaStringPtr page_token_;
  ::google::protobuf::int32 page_size_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fcloud_2ffunctions_2fv1beta2_2ffunctions_2eproto::TableStruct;
  friend void ::protobuf_google_2fcloud_2ffunctions_2fv1beta2_2ffunctions_2eproto::InitDefaultsListFunctionsRequestImpl();
};
// -------------------------------------------------------------------

class ListFunctionsResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.cloud.functions.v1beta2.ListFunctionsResponse) */ {
 public:
  ListFunctionsResponse();
  virtual ~ListFunctionsResponse();

  ListFunctionsResponse(const ListFunctionsResponse& from);

  inline ListFunctionsResponse& operator=(const ListFunctionsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ListFunctionsResponse(ListFunctionsResponse&& from) noexcept
    : ListFunctionsResponse() {
    *this = ::std::move(from);
  }

  inline ListFunctionsResponse& operator=(ListFunctionsResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ListFunctionsResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListFunctionsResponse* internal_default_instance() {
    return reinterpret_cast<const ListFunctionsResponse*>(
               &_ListFunctionsResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    8;

  void Swap(ListFunctionsResponse* other);
  friend void swap(ListFunctionsResponse& a, ListFunctionsResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ListFunctionsResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  ListFunctionsResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ListFunctionsResponse& from);
  void MergeFrom(const ListFunctionsResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ListFunctionsResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .google.cloud.functions.v1beta2.CloudFunction functions = 1;
  int functions_size() const;
  void clear_functions();
  static const int kFunctionsFieldNumber = 1;
  const ::google::cloud::functions::v1beta2::CloudFunction& functions(int index) const;
  ::google::cloud::functions::v1beta2::CloudFunction* mutable_functions(int index);
  ::google::cloud::functions::v1beta2::CloudFunction* add_functions();
  ::google::protobuf::RepeatedPtrField< ::google::cloud::functions::v1beta2::CloudFunction >*
      mutable_functions();
  const ::google::protobuf::RepeatedPtrField< ::google::cloud::functions::v1beta2::CloudFunction >&
      functions() const;

  // string next_page_token = 2;
  void clear_next_page_token();
  static const int kNextPageTokenFieldNumber = 2;
  const ::std::string& next_page_token() const;
  void set_next_page_token(const ::std::string& value);
  #if LANG_CXX11
  void set_next_page_token(::std::string&& value);
  #endif
  void set_next_page_token(const char* value);
  void set_next_page_token(const char* value, size_t size);
  ::std::string* mutable_next_page_token();
  ::std::string* release_next_page_token();
  void set_allocated_next_page_token(::std::string* next_page_token);

  // @@protoc_insertion_point(class_scope:google.cloud.functions.v1beta2.ListFunctionsResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::google::cloud::functions::v1beta2::CloudFunction > functions_;
  ::google::protobuf::internal::ArenaStringPtr next_page_token_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fcloud_2ffunctions_2fv1beta2_2ffunctions_2eproto::TableStruct;
  friend void ::protobuf_google_2fcloud_2ffunctions_2fv1beta2_2ffunctions_2eproto::InitDefaultsListFunctionsResponseImpl();
};
// -------------------------------------------------------------------

class DeleteFunctionRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.cloud.functions.v1beta2.DeleteFunctionRequest) */ {
 public:
  DeleteFunctionRequest();
  virtual ~DeleteFunctionRequest();

  DeleteFunctionRequest(const DeleteFunctionRequest& from);

  inline DeleteFunctionRequest& operator=(const DeleteFunctionRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DeleteFunctionRequest(DeleteFunctionRequest&& from) noexcept
    : DeleteFunctionRequest() {
    *this = ::std::move(from);
  }

  inline DeleteFunctionRequest& operator=(DeleteFunctionRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DeleteFunctionRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeleteFunctionRequest* internal_default_instance() {
    return reinterpret_cast<const DeleteFunctionRequest*>(
               &_DeleteFunctionRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    9;

  void Swap(DeleteFunctionRequest* other);
  friend void swap(DeleteFunctionRequest& a, DeleteFunctionRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DeleteFunctionRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  DeleteFunctionRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DeleteFunctionRequest& from);
  void MergeFrom(const DeleteFunctionRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DeleteFunctionRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:google.cloud.functions.v1beta2.DeleteFunctionRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fcloud_2ffunctions_2fv1beta2_2ffunctions_2eproto::TableStruct;
  friend void ::protobuf_google_2fcloud_2ffunctions_2fv1beta2_2ffunctions_2eproto::InitDefaultsDeleteFunctionRequestImpl();
};
// -------------------------------------------------------------------

class CallFunctionRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.cloud.functions.v1beta2.CallFunctionRequest) */ {
 public:
  CallFunctionRequest();
  virtual ~CallFunctionRequest();

  CallFunctionRequest(const CallFunctionRequest& from);

  inline CallFunctionRequest& operator=(const CallFunctionRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CallFunctionRequest(CallFunctionRequest&& from) noexcept
    : CallFunctionRequest() {
    *this = ::std::move(from);
  }

  inline CallFunctionRequest& operator=(CallFunctionRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CallFunctionRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CallFunctionRequest* internal_default_instance() {
    return reinterpret_cast<const CallFunctionRequest*>(
               &_CallFunctionRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    10;

  void Swap(CallFunctionRequest* other);
  friend void swap(CallFunctionRequest& a, CallFunctionRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CallFunctionRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  CallFunctionRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CallFunctionRequest& from);
  void MergeFrom(const CallFunctionRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CallFunctionRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // string data = 2;
  void clear_data();
  static const int kDataFieldNumber = 2;
  const ::std::string& data() const;
  void set_data(const ::std::string& value);
  #if LANG_CXX11
  void set_data(::std::string&& value);
  #endif
  void set_data(const char* value);
  void set_data(const char* value, size_t size);
  ::std::string* mutable_data();
  ::std::string* release_data();
  void set_allocated_data(::std::string* data);

  // @@protoc_insertion_point(class_scope:google.cloud.functions.v1beta2.CallFunctionRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr data_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fcloud_2ffunctions_2fv1beta2_2ffunctions_2eproto::TableStruct;
  friend void ::protobuf_google_2fcloud_2ffunctions_2fv1beta2_2ffunctions_2eproto::InitDefaultsCallFunctionRequestImpl();
};
// -------------------------------------------------------------------

class CallFunctionResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.cloud.functions.v1beta2.CallFunctionResponse) */ {
 public:
  CallFunctionResponse();
  virtual ~CallFunctionResponse();

  CallFunctionResponse(const CallFunctionResponse& from);

  inline CallFunctionResponse& operator=(const CallFunctionResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CallFunctionResponse(CallFunctionResponse&& from) noexcept
    : CallFunctionResponse() {
    *this = ::std::move(from);
  }

  inline CallFunctionResponse& operator=(CallFunctionResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CallFunctionResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CallFunctionResponse* internal_default_instance() {
    return reinterpret_cast<const CallFunctionResponse*>(
               &_CallFunctionResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    11;

  void Swap(CallFunctionResponse* other);
  friend void swap(CallFunctionResponse& a, CallFunctionResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CallFunctionResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  CallFunctionResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CallFunctionResponse& from);
  void MergeFrom(const CallFunctionResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CallFunctionResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string execution_id = 1;
  void clear_execution_id();
  static const int kExecutionIdFieldNumber = 1;
  const ::std::string& execution_id() const;
  void set_execution_id(const ::std::string& value);
  #if LANG_CXX11
  void set_execution_id(::std::string&& value);
  #endif
  void set_execution_id(const char* value);
  void set_execution_id(const char* value, size_t size);
  ::std::string* mutable_execution_id();
  ::std::string* release_execution_id();
  void set_allocated_execution_id(::std::string* execution_id);

  // string result = 2;
  void clear_result();
  static const int kResultFieldNumber = 2;
  const ::std::string& result() const;
  void set_result(const ::std::string& value);
  #if LANG_CXX11
  void set_result(::std::string&& value);
  #endif
  void set_result(const char* value);
  void set_result(const char* value, size_t size);
  ::std::string* mutable_result();
  ::std::string* release_result();
  void set_allocated_result(::std::string* result);

  // string error = 3;
  void clear_error();
  static const int kErrorFieldNumber = 3;
  const ::std::string& error() const;
  void set_error(const ::std::string& value);
  #if LANG_CXX11
  void set_error(::std::string&& value);
  #endif
  void set_error(const char* value);
  void set_error(const char* value, size_t size);
  ::std::string* mutable_error();
  ::std::string* release_error();
  void set_allocated_error(::std::string* error);

  // @@protoc_insertion_point(class_scope:google.cloud.functions.v1beta2.CallFunctionResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr execution_id_;
  ::google::protobuf::internal::ArenaStringPtr result_;
  ::google::protobuf::internal::ArenaStringPtr error_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fcloud_2ffunctions_2fv1beta2_2ffunctions_2eproto::TableStruct;
  friend void ::protobuf_google_2fcloud_2ffunctions_2fv1beta2_2ffunctions_2eproto::InitDefaultsCallFunctionResponseImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CloudFunction

// string name = 1;
inline void CloudFunction::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CloudFunction::name() const {
  // @@protoc_insertion_point(field_get:google.cloud.functions.v1beta2.CloudFunction.name)
  return name_.GetNoArena();
}
inline void CloudFunction::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.cloud.functions.v1beta2.CloudFunction.name)
}
#if LANG_CXX11
inline void CloudFunction::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.functions.v1beta2.CloudFunction.name)
}
#endif
inline void CloudFunction::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.cloud.functions.v1beta2.CloudFunction.name)
}
inline void CloudFunction::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.cloud.functions.v1beta2.CloudFunction.name)
}
inline ::std::string* CloudFunction::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.functions.v1beta2.CloudFunction.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CloudFunction::release_name() {
  // @@protoc_insertion_point(field_release:google.cloud.functions.v1beta2.CloudFunction.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CloudFunction::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.functions.v1beta2.CloudFunction.name)
}

// string source_archive_url = 14;
inline bool CloudFunction::has_source_archive_url() const {
  return source_code_case() == kSourceArchiveUrl;
}
inline void CloudFunction::set_has_source_archive_url() {
  _oneof_case_[0] = kSourceArchiveUrl;
}
inline void CloudFunction::clear_source_archive_url() {
  if (has_source_archive_url()) {
    source_code_.source_archive_url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_source_code();
  }
}
inline const ::std::string& CloudFunction::source_archive_url() const {
  // @@protoc_insertion_point(field_get:google.cloud.functions.v1beta2.CloudFunction.source_archive_url)
  if (has_source_archive_url()) {
    return source_code_.source_archive_url_.GetNoArena();
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
inline void CloudFunction::set_source_archive_url(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:google.cloud.functions.v1beta2.CloudFunction.source_archive_url)
  if (!has_source_archive_url()) {
    clear_source_code();
    set_has_source_archive_url();
    source_code_.source_archive_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  source_code_.source_archive_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.cloud.functions.v1beta2.CloudFunction.source_archive_url)
}
#if LANG_CXX11
inline void CloudFunction::set_source_archive_url(::std::string&& value) {
  // @@protoc_insertion_point(field_set:google.cloud.functions.v1beta2.CloudFunction.source_archive_url)
  if (!has_source_archive_url()) {
    clear_source_code();
    set_has_source_archive_url();
    source_code_.source_archive_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  source_code_.source_archive_url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.functions.v1beta2.CloudFunction.source_archive_url)
}
#endif
inline void CloudFunction::set_source_archive_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  if (!has_source_archive_url()) {
    clear_source_code();
    set_has_source_archive_url();
    source_code_.source_archive_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  source_code_.source_archive_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.cloud.functions.v1beta2.CloudFunction.source_archive_url)
}
inline void CloudFunction::set_source_archive_url(const char* value, size_t size) {
  if (!has_source_archive_url()) {
    clear_source_code();
    set_has_source_archive_url();
    source_code_.source_archive_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  source_code_.source_archive_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.cloud.functions.v1beta2.CloudFunction.source_archive_url)
}
inline ::std::string* CloudFunction::mutable_source_archive_url() {
  if (!has_source_archive_url()) {
    clear_source_code();
    set_has_source_archive_url();
    source_code_.source_archive_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:google.cloud.functions.v1beta2.CloudFunction.source_archive_url)
  return source_code_.source_archive_url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CloudFunction::release_source_archive_url() {
  // @@protoc_insertion_point(field_release:google.cloud.functions.v1beta2.CloudFunction.source_archive_url)
  if (has_source_archive_url()) {
    clear_has_source_code();
    return source_code_.source_archive_url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
inline void CloudFunction::set_allocated_source_archive_url(::std::string* source_archive_url) {
  if (!has_source_archive_url()) {
    source_code_.source_archive_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_source_code();
  if (source_archive_url != NULL) {
    set_has_source_archive_url();
    source_code_.source_archive_url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        source_archive_url);
  }
  // @@protoc_insertion_point(field_set_allocated:google.cloud.functions.v1beta2.CloudFunction.source_archive_url)
}

// .google.cloud.functions.v1beta2.SourceRepository source_repository = 3;
inline bool CloudFunction::has_source_repository() const {
  return source_code_case() == kSourceRepository;
}
inline void CloudFunction::set_has_source_repository() {
  _oneof_case_[0] = kSourceRepository;
}
inline void CloudFunction::clear_source_repository() {
  if (has_source_repository()) {
    delete source_code_.source_repository_;
    clear_has_source_code();
  }
}
inline ::google::cloud::functions::v1beta2::SourceRepository* CloudFunction::release_source_repository() {
  // @@protoc_insertion_point(field_release:google.cloud.functions.v1beta2.CloudFunction.source_repository)
  if (has_source_repository()) {
    clear_has_source_code();
      ::google::cloud::functions::v1beta2::SourceRepository* temp = source_code_.source_repository_;
    source_code_.source_repository_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::cloud::functions::v1beta2::SourceRepository& CloudFunction::source_repository() const {
  // @@protoc_insertion_point(field_get:google.cloud.functions.v1beta2.CloudFunction.source_repository)
  return has_source_repository()
      ? *source_code_.source_repository_
      : *reinterpret_cast< ::google::cloud::functions::v1beta2::SourceRepository*>(&::google::cloud::functions::v1beta2::_SourceRepository_default_instance_);
}
inline ::google::cloud::functions::v1beta2::SourceRepository* CloudFunction::mutable_source_repository() {
  if (!has_source_repository()) {
    clear_source_code();
    set_has_source_repository();
    source_code_.source_repository_ = new ::google::cloud::functions::v1beta2::SourceRepository;
  }
  // @@protoc_insertion_point(field_mutable:google.cloud.functions.v1beta2.CloudFunction.source_repository)
  return source_code_.source_repository_;
}

// .google.cloud.functions.v1beta2.HTTPSTrigger https_trigger = 6;
inline bool CloudFunction::has_https_trigger() const {
  return trigger_case() == kHttpsTrigger;
}
inline void CloudFunction::set_has_https_trigger() {
  _oneof_case_[1] = kHttpsTrigger;
}
inline void CloudFunction::clear_https_trigger() {
  if (has_https_trigger()) {
    delete trigger_.https_trigger_;
    clear_has_trigger();
  }
}
inline ::google::cloud::functions::v1beta2::HTTPSTrigger* CloudFunction::release_https_trigger() {
  // @@protoc_insertion_point(field_release:google.cloud.functions.v1beta2.CloudFunction.https_trigger)
  if (has_https_trigger()) {
    clear_has_trigger();
      ::google::cloud::functions::v1beta2::HTTPSTrigger* temp = trigger_.https_trigger_;
    trigger_.https_trigger_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::cloud::functions::v1beta2::HTTPSTrigger& CloudFunction::https_trigger() const {
  // @@protoc_insertion_point(field_get:google.cloud.functions.v1beta2.CloudFunction.https_trigger)
  return has_https_trigger()
      ? *trigger_.https_trigger_
      : *reinterpret_cast< ::google::cloud::functions::v1beta2::HTTPSTrigger*>(&::google::cloud::functions::v1beta2::_HTTPSTrigger_default_instance_);
}
inline ::google::cloud::functions::v1beta2::HTTPSTrigger* CloudFunction::mutable_https_trigger() {
  if (!has_https_trigger()) {
    clear_trigger();
    set_has_https_trigger();
    trigger_.https_trigger_ = new ::google::cloud::functions::v1beta2::HTTPSTrigger;
  }
  // @@protoc_insertion_point(field_mutable:google.cloud.functions.v1beta2.CloudFunction.https_trigger)
  return trigger_.https_trigger_;
}

// .google.cloud.functions.v1beta2.EventTrigger event_trigger = 12;
inline bool CloudFunction::has_event_trigger() const {
  return trigger_case() == kEventTrigger;
}
inline void CloudFunction::set_has_event_trigger() {
  _oneof_case_[1] = kEventTrigger;
}
inline void CloudFunction::clear_event_trigger() {
  if (has_event_trigger()) {
    delete trigger_.event_trigger_;
    clear_has_trigger();
  }
}
inline ::google::cloud::functions::v1beta2::EventTrigger* CloudFunction::release_event_trigger() {
  // @@protoc_insertion_point(field_release:google.cloud.functions.v1beta2.CloudFunction.event_trigger)
  if (has_event_trigger()) {
    clear_has_trigger();
      ::google::cloud::functions::v1beta2::EventTrigger* temp = trigger_.event_trigger_;
    trigger_.event_trigger_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::cloud::functions::v1beta2::EventTrigger& CloudFunction::event_trigger() const {
  // @@protoc_insertion_point(field_get:google.cloud.functions.v1beta2.CloudFunction.event_trigger)
  return has_event_trigger()
      ? *trigger_.event_trigger_
      : *reinterpret_cast< ::google::cloud::functions::v1beta2::EventTrigger*>(&::google::cloud::functions::v1beta2::_EventTrigger_default_instance_);
}
inline ::google::cloud::functions::v1beta2::EventTrigger* CloudFunction::mutable_event_trigger() {
  if (!has_event_trigger()) {
    clear_trigger();
    set_has_event_trigger();
    trigger_.event_trigger_ = new ::google::cloud::functions::v1beta2::EventTrigger;
  }
  // @@protoc_insertion_point(field_mutable:google.cloud.functions.v1beta2.CloudFunction.event_trigger)
  return trigger_.event_trigger_;
}

// .google.cloud.functions.v1beta2.CloudFunctionStatus status = 7;
inline void CloudFunction::clear_status() {
  status_ = 0;
}
inline ::google::cloud::functions::v1beta2::CloudFunctionStatus CloudFunction::status() const {
  // @@protoc_insertion_point(field_get:google.cloud.functions.v1beta2.CloudFunction.status)
  return static_cast< ::google::cloud::functions::v1beta2::CloudFunctionStatus >(status_);
}
inline void CloudFunction::set_status(::google::cloud::functions::v1beta2::CloudFunctionStatus value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:google.cloud.functions.v1beta2.CloudFunction.status)
}

// string latest_operation = 8;
inline void CloudFunction::clear_latest_operation() {
  latest_operation_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CloudFunction::latest_operation() const {
  // @@protoc_insertion_point(field_get:google.cloud.functions.v1beta2.CloudFunction.latest_operation)
  return latest_operation_.GetNoArena();
}
inline void CloudFunction::set_latest_operation(const ::std::string& value) {
  
  latest_operation_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.cloud.functions.v1beta2.CloudFunction.latest_operation)
}
#if LANG_CXX11
inline void CloudFunction::set_latest_operation(::std::string&& value) {
  
  latest_operation_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.functions.v1beta2.CloudFunction.latest_operation)
}
#endif
inline void CloudFunction::set_latest_operation(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  latest_operation_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.cloud.functions.v1beta2.CloudFunction.latest_operation)
}
inline void CloudFunction::set_latest_operation(const char* value, size_t size) {
  
  latest_operation_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.cloud.functions.v1beta2.CloudFunction.latest_operation)
}
inline ::std::string* CloudFunction::mutable_latest_operation() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.functions.v1beta2.CloudFunction.latest_operation)
  return latest_operation_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CloudFunction::release_latest_operation() {
  // @@protoc_insertion_point(field_release:google.cloud.functions.v1beta2.CloudFunction.latest_operation)
  
  return latest_operation_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CloudFunction::set_allocated_latest_operation(::std::string* latest_operation) {
  if (latest_operation != NULL) {
    
  } else {
    
  }
  latest_operation_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), latest_operation);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.functions.v1beta2.CloudFunction.latest_operation)
}

// string entry_point = 9;
inline void CloudFunction::clear_entry_point() {
  entry_point_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CloudFunction::entry_point() const {
  // @@protoc_insertion_point(field_get:google.cloud.functions.v1beta2.CloudFunction.entry_point)
  return entry_point_.GetNoArena();
}
inline void CloudFunction::set_entry_point(const ::std::string& value) {
  
  entry_point_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.cloud.functions.v1beta2.CloudFunction.entry_point)
}
#if LANG_CXX11
inline void CloudFunction::set_entry_point(::std::string&& value) {
  
  entry_point_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.functions.v1beta2.CloudFunction.entry_point)
}
#endif
inline void CloudFunction::set_entry_point(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  entry_point_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.cloud.functions.v1beta2.CloudFunction.entry_point)
}
inline void CloudFunction::set_entry_point(const char* value, size_t size) {
  
  entry_point_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.cloud.functions.v1beta2.CloudFunction.entry_point)
}
inline ::std::string* CloudFunction::mutable_entry_point() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.functions.v1beta2.CloudFunction.entry_point)
  return entry_point_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CloudFunction::release_entry_point() {
  // @@protoc_insertion_point(field_release:google.cloud.functions.v1beta2.CloudFunction.entry_point)
  
  return entry_point_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CloudFunction::set_allocated_entry_point(::std::string* entry_point) {
  if (entry_point != NULL) {
    
  } else {
    
  }
  entry_point_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), entry_point);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.functions.v1beta2.CloudFunction.entry_point)
}

// .google.protobuf.Duration timeout = 10;
inline bool CloudFunction::has_timeout() const {
  return this != internal_default_instance() && timeout_ != NULL;
}
inline const ::google::protobuf::Duration& CloudFunction::timeout() const {
  const ::google::protobuf::Duration* p = timeout_;
  // @@protoc_insertion_point(field_get:google.cloud.functions.v1beta2.CloudFunction.timeout)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::Duration*>(
      &::google::protobuf::_Duration_default_instance_);
}
inline ::google::protobuf::Duration* CloudFunction::release_timeout() {
  // @@protoc_insertion_point(field_release:google.cloud.functions.v1beta2.CloudFunction.timeout)
  
  ::google::protobuf::Duration* temp = timeout_;
  timeout_ = NULL;
  return temp;
}
inline ::google::protobuf::Duration* CloudFunction::mutable_timeout() {
  
  if (timeout_ == NULL) {
    timeout_ = new ::google::protobuf::Duration;
  }
  // @@protoc_insertion_point(field_mutable:google.cloud.functions.v1beta2.CloudFunction.timeout)
  return timeout_;
}
inline void CloudFunction::set_allocated_timeout(::google::protobuf::Duration* timeout) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(timeout_);
  }
  if (timeout) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast< ::google::protobuf::MessageLite*>(timeout)->GetArena();
    if (message_arena != submessage_arena) {
      timeout = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, timeout, submessage_arena);
    }
    
  } else {
    
  }
  timeout_ = timeout;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.functions.v1beta2.CloudFunction.timeout)
}

// int32 available_memory_mb = 11;
inline void CloudFunction::clear_available_memory_mb() {
  available_memory_mb_ = 0;
}
inline ::google::protobuf::int32 CloudFunction::available_memory_mb() const {
  // @@protoc_insertion_point(field_get:google.cloud.functions.v1beta2.CloudFunction.available_memory_mb)
  return available_memory_mb_;
}
inline void CloudFunction::set_available_memory_mb(::google::protobuf::int32 value) {
  
  available_memory_mb_ = value;
  // @@protoc_insertion_point(field_set:google.cloud.functions.v1beta2.CloudFunction.available_memory_mb)
}

// string service_account = 13;
inline void CloudFunction::clear_service_account() {
  service_account_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CloudFunction::service_account() const {
  // @@protoc_insertion_point(field_get:google.cloud.functions.v1beta2.CloudFunction.service_account)
  return service_account_.GetNoArena();
}
inline void CloudFunction::set_service_account(const ::std::string& value) {
  
  service_account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.cloud.functions.v1beta2.CloudFunction.service_account)
}
#if LANG_CXX11
inline void CloudFunction::set_service_account(::std::string&& value) {
  
  service_account_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.functions.v1beta2.CloudFunction.service_account)
}
#endif
inline void CloudFunction::set_service_account(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  service_account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.cloud.functions.v1beta2.CloudFunction.service_account)
}
inline void CloudFunction::set_service_account(const char* value, size_t size) {
  
  service_account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.cloud.functions.v1beta2.CloudFunction.service_account)
}
inline ::std::string* CloudFunction::mutable_service_account() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.functions.v1beta2.CloudFunction.service_account)
  return service_account_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CloudFunction::release_service_account() {
  // @@protoc_insertion_point(field_release:google.cloud.functions.v1beta2.CloudFunction.service_account)
  
  return service_account_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CloudFunction::set_allocated_service_account(::std::string* service_account) {
  if (service_account != NULL) {
    
  } else {
    
  }
  service_account_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), service_account);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.functions.v1beta2.CloudFunction.service_account)
}

// .google.protobuf.Timestamp update_time = 15;
inline bool CloudFunction::has_update_time() const {
  return this != internal_default_instance() && update_time_ != NULL;
}
inline const ::google::protobuf::Timestamp& CloudFunction::update_time() const {
  const ::google::protobuf::Timestamp* p = update_time_;
  // @@protoc_insertion_point(field_get:google.cloud.functions.v1beta2.CloudFunction.update_time)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::Timestamp*>(
      &::google::protobuf::_Timestamp_default_instance_);
}
inline ::google::protobuf::Timestamp* CloudFunction::release_update_time() {
  // @@protoc_insertion_point(field_release:google.cloud.functions.v1beta2.CloudFunction.update_time)
  
  ::google::protobuf::Timestamp* temp = update_time_;
  update_time_ = NULL;
  return temp;
}
inline ::google::protobuf::Timestamp* CloudFunction::mutable_update_time() {
  
  if (update_time_ == NULL) {
    update_time_ = new ::google::protobuf::Timestamp;
  }
  // @@protoc_insertion_point(field_mutable:google.cloud.functions.v1beta2.CloudFunction.update_time)
  return update_time_;
}
inline void CloudFunction::set_allocated_update_time(::google::protobuf::Timestamp* update_time) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(update_time_);
  }
  if (update_time) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast< ::google::protobuf::MessageLite*>(update_time)->GetArena();
    if (message_arena != submessage_arena) {
      update_time = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, update_time, submessage_arena);
    }
    
  } else {
    
  }
  update_time_ = update_time;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.functions.v1beta2.CloudFunction.update_time)
}

inline bool CloudFunction::has_source_code() const {
  return source_code_case() != SOURCE_CODE_NOT_SET;
}
inline void CloudFunction::clear_has_source_code() {
  _oneof_case_[0] = SOURCE_CODE_NOT_SET;
}
inline bool CloudFunction::has_trigger() const {
  return trigger_case() != TRIGGER_NOT_SET;
}
inline void CloudFunction::clear_has_trigger() {
  _oneof_case_[1] = TRIGGER_NOT_SET;
}
inline CloudFunction::SourceCodeCase CloudFunction::source_code_case() const {
  return CloudFunction::SourceCodeCase(_oneof_case_[0]);
}
inline CloudFunction::TriggerCase CloudFunction::trigger_case() const {
  return CloudFunction::TriggerCase(_oneof_case_[1]);
}
// -------------------------------------------------------------------

// HTTPSTrigger

// string url = 1;
inline void HTTPSTrigger::clear_url() {
  url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& HTTPSTrigger::url() const {
  // @@protoc_insertion_point(field_get:google.cloud.functions.v1beta2.HTTPSTrigger.url)
  return url_.GetNoArena();
}
inline void HTTPSTrigger::set_url(const ::std::string& value) {
  
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.cloud.functions.v1beta2.HTTPSTrigger.url)
}
#if LANG_CXX11
inline void HTTPSTrigger::set_url(::std::string&& value) {
  
  url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.functions.v1beta2.HTTPSTrigger.url)
}
#endif
inline void HTTPSTrigger::set_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.cloud.functions.v1beta2.HTTPSTrigger.url)
}
inline void HTTPSTrigger::set_url(const char* value, size_t size) {
  
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.cloud.functions.v1beta2.HTTPSTrigger.url)
}
inline ::std::string* HTTPSTrigger::mutable_url() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.functions.v1beta2.HTTPSTrigger.url)
  return url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* HTTPSTrigger::release_url() {
  // @@protoc_insertion_point(field_release:google.cloud.functions.v1beta2.HTTPSTrigger.url)
  
  return url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void HTTPSTrigger::set_allocated_url(::std::string* url) {
  if (url != NULL) {
    
  } else {
    
  }
  url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), url);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.functions.v1beta2.HTTPSTrigger.url)
}

// -------------------------------------------------------------------

// EventTrigger

// string event_type = 1;
inline void EventTrigger::clear_event_type() {
  event_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& EventTrigger::event_type() const {
  // @@protoc_insertion_point(field_get:google.cloud.functions.v1beta2.EventTrigger.event_type)
  return event_type_.GetNoArena();
}
inline void EventTrigger::set_event_type(const ::std::string& value) {
  
  event_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.cloud.functions.v1beta2.EventTrigger.event_type)
}
#if LANG_CXX11
inline void EventTrigger::set_event_type(::std::string&& value) {
  
  event_type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.functions.v1beta2.EventTrigger.event_type)
}
#endif
inline void EventTrigger::set_event_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  event_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.cloud.functions.v1beta2.EventTrigger.event_type)
}
inline void EventTrigger::set_event_type(const char* value, size_t size) {
  
  event_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.cloud.functions.v1beta2.EventTrigger.event_type)
}
inline ::std::string* EventTrigger::mutable_event_type() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.functions.v1beta2.EventTrigger.event_type)
  return event_type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* EventTrigger::release_event_type() {
  // @@protoc_insertion_point(field_release:google.cloud.functions.v1beta2.EventTrigger.event_type)
  
  return event_type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EventTrigger::set_allocated_event_type(::std::string* event_type) {
  if (event_type != NULL) {
    
  } else {
    
  }
  event_type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), event_type);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.functions.v1beta2.EventTrigger.event_type)
}

// string resource = 2;
inline void EventTrigger::clear_resource() {
  resource_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& EventTrigger::resource() const {
  // @@protoc_insertion_point(field_get:google.cloud.functions.v1beta2.EventTrigger.resource)
  return resource_.GetNoArena();
}
inline void EventTrigger::set_resource(const ::std::string& value) {
  
  resource_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.cloud.functions.v1beta2.EventTrigger.resource)
}
#if LANG_CXX11
inline void EventTrigger::set_resource(::std::string&& value) {
  
  resource_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.functions.v1beta2.EventTrigger.resource)
}
#endif
inline void EventTrigger::set_resource(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  resource_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.cloud.functions.v1beta2.EventTrigger.resource)
}
inline void EventTrigger::set_resource(const char* value, size_t size) {
  
  resource_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.cloud.functions.v1beta2.EventTrigger.resource)
}
inline ::std::string* EventTrigger::mutable_resource() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.functions.v1beta2.EventTrigger.resource)
  return resource_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* EventTrigger::release_resource() {
  // @@protoc_insertion_point(field_release:google.cloud.functions.v1beta2.EventTrigger.resource)
  
  return resource_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EventTrigger::set_allocated_resource(::std::string* resource) {
  if (resource != NULL) {
    
  } else {
    
  }
  resource_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), resource);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.functions.v1beta2.EventTrigger.resource)
}

// -------------------------------------------------------------------

// SourceRepository

// string repository_url = 1;
inline void SourceRepository::clear_repository_url() {
  repository_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SourceRepository::repository_url() const {
  // @@protoc_insertion_point(field_get:google.cloud.functions.v1beta2.SourceRepository.repository_url)
  return repository_url_.GetNoArena();
}
inline void SourceRepository::set_repository_url(const ::std::string& value) {
  
  repository_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.cloud.functions.v1beta2.SourceRepository.repository_url)
}
#if LANG_CXX11
inline void SourceRepository::set_repository_url(::std::string&& value) {
  
  repository_url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.functions.v1beta2.SourceRepository.repository_url)
}
#endif
inline void SourceRepository::set_repository_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  repository_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.cloud.functions.v1beta2.SourceRepository.repository_url)
}
inline void SourceRepository::set_repository_url(const char* value, size_t size) {
  
  repository_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.cloud.functions.v1beta2.SourceRepository.repository_url)
}
inline ::std::string* SourceRepository::mutable_repository_url() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.functions.v1beta2.SourceRepository.repository_url)
  return repository_url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SourceRepository::release_repository_url() {
  // @@protoc_insertion_point(field_release:google.cloud.functions.v1beta2.SourceRepository.repository_url)
  
  return repository_url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SourceRepository::set_allocated_repository_url(::std::string* repository_url) {
  if (repository_url != NULL) {
    
  } else {
    
  }
  repository_url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), repository_url);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.functions.v1beta2.SourceRepository.repository_url)
}

// string source_path = 2;
inline void SourceRepository::clear_source_path() {
  source_path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SourceRepository::source_path() const {
  // @@protoc_insertion_point(field_get:google.cloud.functions.v1beta2.SourceRepository.source_path)
  return source_path_.GetNoArena();
}
inline void SourceRepository::set_source_path(const ::std::string& value) {
  
  source_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.cloud.functions.v1beta2.SourceRepository.source_path)
}
#if LANG_CXX11
inline void SourceRepository::set_source_path(::std::string&& value) {
  
  source_path_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.functions.v1beta2.SourceRepository.source_path)
}
#endif
inline void SourceRepository::set_source_path(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  source_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.cloud.functions.v1beta2.SourceRepository.source_path)
}
inline void SourceRepository::set_source_path(const char* value, size_t size) {
  
  source_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.cloud.functions.v1beta2.SourceRepository.source_path)
}
inline ::std::string* SourceRepository::mutable_source_path() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.functions.v1beta2.SourceRepository.source_path)
  return source_path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SourceRepository::release_source_path() {
  // @@protoc_insertion_point(field_release:google.cloud.functions.v1beta2.SourceRepository.source_path)
  
  return source_path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SourceRepository::set_allocated_source_path(::std::string* source_path) {
  if (source_path != NULL) {
    
  } else {
    
  }
  source_path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), source_path);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.functions.v1beta2.SourceRepository.source_path)
}

// string branch = 3;
inline bool SourceRepository::has_branch() const {
  return version_case() == kBranch;
}
inline void SourceRepository::set_has_branch() {
  _oneof_case_[0] = kBranch;
}
inline void SourceRepository::clear_branch() {
  if (has_branch()) {
    version_.branch_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_version();
  }
}
inline const ::std::string& SourceRepository::branch() const {
  // @@protoc_insertion_point(field_get:google.cloud.functions.v1beta2.SourceRepository.branch)
  if (has_branch()) {
    return version_.branch_.GetNoArena();
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
inline void SourceRepository::set_branch(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:google.cloud.functions.v1beta2.SourceRepository.branch)
  if (!has_branch()) {
    clear_version();
    set_has_branch();
    version_.branch_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  version_.branch_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.cloud.functions.v1beta2.SourceRepository.branch)
}
#if LANG_CXX11
inline void SourceRepository::set_branch(::std::string&& value) {
  // @@protoc_insertion_point(field_set:google.cloud.functions.v1beta2.SourceRepository.branch)
  if (!has_branch()) {
    clear_version();
    set_has_branch();
    version_.branch_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  version_.branch_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.functions.v1beta2.SourceRepository.branch)
}
#endif
inline void SourceRepository::set_branch(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  if (!has_branch()) {
    clear_version();
    set_has_branch();
    version_.branch_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  version_.branch_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.cloud.functions.v1beta2.SourceRepository.branch)
}
inline void SourceRepository::set_branch(const char* value, size_t size) {
  if (!has_branch()) {
    clear_version();
    set_has_branch();
    version_.branch_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  version_.branch_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.cloud.functions.v1beta2.SourceRepository.branch)
}
inline ::std::string* SourceRepository::mutable_branch() {
  if (!has_branch()) {
    clear_version();
    set_has_branch();
    version_.branch_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:google.cloud.functions.v1beta2.SourceRepository.branch)
  return version_.branch_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SourceRepository::release_branch() {
  // @@protoc_insertion_point(field_release:google.cloud.functions.v1beta2.SourceRepository.branch)
  if (has_branch()) {
    clear_has_version();
    return version_.branch_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
inline void SourceRepository::set_allocated_branch(::std::string* branch) {
  if (!has_branch()) {
    version_.branch_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_version();
  if (branch != NULL) {
    set_has_branch();
    version_.branch_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        branch);
  }
  // @@protoc_insertion_point(field_set_allocated:google.cloud.functions.v1beta2.SourceRepository.branch)
}

// string tag = 4;
inline bool SourceRepository::has_tag() const {
  return version_case() == kTag;
}
inline void SourceRepository::set_has_tag() {
  _oneof_case_[0] = kTag;
}
inline void SourceRepository::clear_tag() {
  if (has_tag()) {
    version_.tag_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_version();
  }
}
inline const ::std::string& SourceRepository::tag() const {
  // @@protoc_insertion_point(field_get:google.cloud.functions.v1beta2.SourceRepository.tag)
  if (has_tag()) {
    return version_.tag_.GetNoArena();
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
inline void SourceRepository::set_tag(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:google.cloud.functions.v1beta2.SourceRepository.tag)
  if (!has_tag()) {
    clear_version();
    set_has_tag();
    version_.tag_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  version_.tag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.cloud.functions.v1beta2.SourceRepository.tag)
}
#if LANG_CXX11
inline void SourceRepository::set_tag(::std::string&& value) {
  // @@protoc_insertion_point(field_set:google.cloud.functions.v1beta2.SourceRepository.tag)
  if (!has_tag()) {
    clear_version();
    set_has_tag();
    version_.tag_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  version_.tag_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.functions.v1beta2.SourceRepository.tag)
}
#endif
inline void SourceRepository::set_tag(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  if (!has_tag()) {
    clear_version();
    set_has_tag();
    version_.tag_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  version_.tag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.cloud.functions.v1beta2.SourceRepository.tag)
}
inline void SourceRepository::set_tag(const char* value, size_t size) {
  if (!has_tag()) {
    clear_version();
    set_has_tag();
    version_.tag_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  version_.tag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.cloud.functions.v1beta2.SourceRepository.tag)
}
inline ::std::string* SourceRepository::mutable_tag() {
  if (!has_tag()) {
    clear_version();
    set_has_tag();
    version_.tag_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:google.cloud.functions.v1beta2.SourceRepository.tag)
  return version_.tag_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SourceRepository::release_tag() {
  // @@protoc_insertion_point(field_release:google.cloud.functions.v1beta2.SourceRepository.tag)
  if (has_tag()) {
    clear_has_version();
    return version_.tag_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
inline void SourceRepository::set_allocated_tag(::std::string* tag) {
  if (!has_tag()) {
    version_.tag_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_version();
  if (tag != NULL) {
    set_has_tag();
    version_.tag_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        tag);
  }
  // @@protoc_insertion_point(field_set_allocated:google.cloud.functions.v1beta2.SourceRepository.tag)
}

// string revision = 5;
inline bool SourceRepository::has_revision() const {
  return version_case() == kRevision;
}
inline void SourceRepository::set_has_revision() {
  _oneof_case_[0] = kRevision;
}
inline void SourceRepository::clear_revision() {
  if (has_revision()) {
    version_.revision_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_version();
  }
}
inline const ::std::string& SourceRepository::revision() const {
  // @@protoc_insertion_point(field_get:google.cloud.functions.v1beta2.SourceRepository.revision)
  if (has_revision()) {
    return version_.revision_.GetNoArena();
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
inline void SourceRepository::set_revision(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:google.cloud.functions.v1beta2.SourceRepository.revision)
  if (!has_revision()) {
    clear_version();
    set_has_revision();
    version_.revision_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  version_.revision_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.cloud.functions.v1beta2.SourceRepository.revision)
}
#if LANG_CXX11
inline void SourceRepository::set_revision(::std::string&& value) {
  // @@protoc_insertion_point(field_set:google.cloud.functions.v1beta2.SourceRepository.revision)
  if (!has_revision()) {
    clear_version();
    set_has_revision();
    version_.revision_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  version_.revision_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.functions.v1beta2.SourceRepository.revision)
}
#endif
inline void SourceRepository::set_revision(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  if (!has_revision()) {
    clear_version();
    set_has_revision();
    version_.revision_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  version_.revision_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.cloud.functions.v1beta2.SourceRepository.revision)
}
inline void SourceRepository::set_revision(const char* value, size_t size) {
  if (!has_revision()) {
    clear_version();
    set_has_revision();
    version_.revision_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  version_.revision_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.cloud.functions.v1beta2.SourceRepository.revision)
}
inline ::std::string* SourceRepository::mutable_revision() {
  if (!has_revision()) {
    clear_version();
    set_has_revision();
    version_.revision_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:google.cloud.functions.v1beta2.SourceRepository.revision)
  return version_.revision_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SourceRepository::release_revision() {
  // @@protoc_insertion_point(field_release:google.cloud.functions.v1beta2.SourceRepository.revision)
  if (has_revision()) {
    clear_has_version();
    return version_.revision_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
inline void SourceRepository::set_allocated_revision(::std::string* revision) {
  if (!has_revision()) {
    version_.revision_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_version();
  if (revision != NULL) {
    set_has_revision();
    version_.revision_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        revision);
  }
  // @@protoc_insertion_point(field_set_allocated:google.cloud.functions.v1beta2.SourceRepository.revision)
}

// string deployed_revision = 6;
inline void SourceRepository::clear_deployed_revision() {
  deployed_revision_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SourceRepository::deployed_revision() const {
  // @@protoc_insertion_point(field_get:google.cloud.functions.v1beta2.SourceRepository.deployed_revision)
  return deployed_revision_.GetNoArena();
}
inline void SourceRepository::set_deployed_revision(const ::std::string& value) {
  
  deployed_revision_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.cloud.functions.v1beta2.SourceRepository.deployed_revision)
}
#if LANG_CXX11
inline void SourceRepository::set_deployed_revision(::std::string&& value) {
  
  deployed_revision_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.functions.v1beta2.SourceRepository.deployed_revision)
}
#endif
inline void SourceRepository::set_deployed_revision(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  deployed_revision_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.cloud.functions.v1beta2.SourceRepository.deployed_revision)
}
inline void SourceRepository::set_deployed_revision(const char* value, size_t size) {
  
  deployed_revision_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.cloud.functions.v1beta2.SourceRepository.deployed_revision)
}
inline ::std::string* SourceRepository::mutable_deployed_revision() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.functions.v1beta2.SourceRepository.deployed_revision)
  return deployed_revision_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SourceRepository::release_deployed_revision() {
  // @@protoc_insertion_point(field_release:google.cloud.functions.v1beta2.SourceRepository.deployed_revision)
  
  return deployed_revision_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SourceRepository::set_allocated_deployed_revision(::std::string* deployed_revision) {
  if (deployed_revision != NULL) {
    
  } else {
    
  }
  deployed_revision_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), deployed_revision);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.functions.v1beta2.SourceRepository.deployed_revision)
}

inline bool SourceRepository::has_version() const {
  return version_case() != VERSION_NOT_SET;
}
inline void SourceRepository::clear_has_version() {
  _oneof_case_[0] = VERSION_NOT_SET;
}
inline SourceRepository::VersionCase SourceRepository::version_case() const {
  return SourceRepository::VersionCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// CreateFunctionRequest

// string location = 1;
inline void CreateFunctionRequest::clear_location() {
  location_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CreateFunctionRequest::location() const {
  // @@protoc_insertion_point(field_get:google.cloud.functions.v1beta2.CreateFunctionRequest.location)
  return location_.GetNoArena();
}
inline void CreateFunctionRequest::set_location(const ::std::string& value) {
  
  location_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.cloud.functions.v1beta2.CreateFunctionRequest.location)
}
#if LANG_CXX11
inline void CreateFunctionRequest::set_location(::std::string&& value) {
  
  location_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.functions.v1beta2.CreateFunctionRequest.location)
}
#endif
inline void CreateFunctionRequest::set_location(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  location_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.cloud.functions.v1beta2.CreateFunctionRequest.location)
}
inline void CreateFunctionRequest::set_location(const char* value, size_t size) {
  
  location_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.cloud.functions.v1beta2.CreateFunctionRequest.location)
}
inline ::std::string* CreateFunctionRequest::mutable_location() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.functions.v1beta2.CreateFunctionRequest.location)
  return location_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CreateFunctionRequest::release_location() {
  // @@protoc_insertion_point(field_release:google.cloud.functions.v1beta2.CreateFunctionRequest.location)
  
  return location_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CreateFunctionRequest::set_allocated_location(::std::string* location) {
  if (location != NULL) {
    
  } else {
    
  }
  location_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), location);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.functions.v1beta2.CreateFunctionRequest.location)
}

// .google.cloud.functions.v1beta2.CloudFunction function = 2;
inline bool CreateFunctionRequest::has_function() const {
  return this != internal_default_instance() && function_ != NULL;
}
inline void CreateFunctionRequest::clear_function() {
  if (GetArenaNoVirtual() == NULL && function_ != NULL) {
    delete function_;
  }
  function_ = NULL;
}
inline const ::google::cloud::functions::v1beta2::CloudFunction& CreateFunctionRequest::function() const {
  const ::google::cloud::functions::v1beta2::CloudFunction* p = function_;
  // @@protoc_insertion_point(field_get:google.cloud.functions.v1beta2.CreateFunctionRequest.function)
  return p != NULL ? *p : *reinterpret_cast<const ::google::cloud::functions::v1beta2::CloudFunction*>(
      &::google::cloud::functions::v1beta2::_CloudFunction_default_instance_);
}
inline ::google::cloud::functions::v1beta2::CloudFunction* CreateFunctionRequest::release_function() {
  // @@protoc_insertion_point(field_release:google.cloud.functions.v1beta2.CreateFunctionRequest.function)
  
  ::google::cloud::functions::v1beta2::CloudFunction* temp = function_;
  function_ = NULL;
  return temp;
}
inline ::google::cloud::functions::v1beta2::CloudFunction* CreateFunctionRequest::mutable_function() {
  
  if (function_ == NULL) {
    function_ = new ::google::cloud::functions::v1beta2::CloudFunction;
  }
  // @@protoc_insertion_point(field_mutable:google.cloud.functions.v1beta2.CreateFunctionRequest.function)
  return function_;
}
inline void CreateFunctionRequest::set_allocated_function(::google::cloud::functions::v1beta2::CloudFunction* function) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete function_;
  }
  if (function) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      function = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, function, submessage_arena);
    }
    
  } else {
    
  }
  function_ = function;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.functions.v1beta2.CreateFunctionRequest.function)
}

// -------------------------------------------------------------------

// UpdateFunctionRequest

// string name = 1;
inline void UpdateFunctionRequest::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UpdateFunctionRequest::name() const {
  // @@protoc_insertion_point(field_get:google.cloud.functions.v1beta2.UpdateFunctionRequest.name)
  return name_.GetNoArena();
}
inline void UpdateFunctionRequest::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.cloud.functions.v1beta2.UpdateFunctionRequest.name)
}
#if LANG_CXX11
inline void UpdateFunctionRequest::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.functions.v1beta2.UpdateFunctionRequest.name)
}
#endif
inline void UpdateFunctionRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.cloud.functions.v1beta2.UpdateFunctionRequest.name)
}
inline void UpdateFunctionRequest::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.cloud.functions.v1beta2.UpdateFunctionRequest.name)
}
inline ::std::string* UpdateFunctionRequest::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.functions.v1beta2.UpdateFunctionRequest.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UpdateFunctionRequest::release_name() {
  // @@protoc_insertion_point(field_release:google.cloud.functions.v1beta2.UpdateFunctionRequest.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UpdateFunctionRequest::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.functions.v1beta2.UpdateFunctionRequest.name)
}

// .google.cloud.functions.v1beta2.CloudFunction function = 2;
inline bool UpdateFunctionRequest::has_function() const {
  return this != internal_default_instance() && function_ != NULL;
}
inline void UpdateFunctionRequest::clear_function() {
  if (GetArenaNoVirtual() == NULL && function_ != NULL) {
    delete function_;
  }
  function_ = NULL;
}
inline const ::google::cloud::functions::v1beta2::CloudFunction& UpdateFunctionRequest::function() const {
  const ::google::cloud::functions::v1beta2::CloudFunction* p = function_;
  // @@protoc_insertion_point(field_get:google.cloud.functions.v1beta2.UpdateFunctionRequest.function)
  return p != NULL ? *p : *reinterpret_cast<const ::google::cloud::functions::v1beta2::CloudFunction*>(
      &::google::cloud::functions::v1beta2::_CloudFunction_default_instance_);
}
inline ::google::cloud::functions::v1beta2::CloudFunction* UpdateFunctionRequest::release_function() {
  // @@protoc_insertion_point(field_release:google.cloud.functions.v1beta2.UpdateFunctionRequest.function)
  
  ::google::cloud::functions::v1beta2::CloudFunction* temp = function_;
  function_ = NULL;
  return temp;
}
inline ::google::cloud::functions::v1beta2::CloudFunction* UpdateFunctionRequest::mutable_function() {
  
  if (function_ == NULL) {
    function_ = new ::google::cloud::functions::v1beta2::CloudFunction;
  }
  // @@protoc_insertion_point(field_mutable:google.cloud.functions.v1beta2.UpdateFunctionRequest.function)
  return function_;
}
inline void UpdateFunctionRequest::set_allocated_function(::google::cloud::functions::v1beta2::CloudFunction* function) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete function_;
  }
  if (function) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      function = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, function, submessage_arena);
    }
    
  } else {
    
  }
  function_ = function;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.functions.v1beta2.UpdateFunctionRequest.function)
}

// -------------------------------------------------------------------

// GetFunctionRequest

// string name = 1;
inline void GetFunctionRequest::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetFunctionRequest::name() const {
  // @@protoc_insertion_point(field_get:google.cloud.functions.v1beta2.GetFunctionRequest.name)
  return name_.GetNoArena();
}
inline void GetFunctionRequest::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.cloud.functions.v1beta2.GetFunctionRequest.name)
}
#if LANG_CXX11
inline void GetFunctionRequest::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.functions.v1beta2.GetFunctionRequest.name)
}
#endif
inline void GetFunctionRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.cloud.functions.v1beta2.GetFunctionRequest.name)
}
inline void GetFunctionRequest::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.cloud.functions.v1beta2.GetFunctionRequest.name)
}
inline ::std::string* GetFunctionRequest::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.functions.v1beta2.GetFunctionRequest.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetFunctionRequest::release_name() {
  // @@protoc_insertion_point(field_release:google.cloud.functions.v1beta2.GetFunctionRequest.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetFunctionRequest::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.functions.v1beta2.GetFunctionRequest.name)
}

// -------------------------------------------------------------------

// ListFunctionsRequest

// string location = 1;
inline void ListFunctionsRequest::clear_location() {
  location_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ListFunctionsRequest::location() const {
  // @@protoc_insertion_point(field_get:google.cloud.functions.v1beta2.ListFunctionsRequest.location)
  return location_.GetNoArena();
}
inline void ListFunctionsRequest::set_location(const ::std::string& value) {
  
  location_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.cloud.functions.v1beta2.ListFunctionsRequest.location)
}
#if LANG_CXX11
inline void ListFunctionsRequest::set_location(::std::string&& value) {
  
  location_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.functions.v1beta2.ListFunctionsRequest.location)
}
#endif
inline void ListFunctionsRequest::set_location(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  location_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.cloud.functions.v1beta2.ListFunctionsRequest.location)
}
inline void ListFunctionsRequest::set_location(const char* value, size_t size) {
  
  location_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.cloud.functions.v1beta2.ListFunctionsRequest.location)
}
inline ::std::string* ListFunctionsRequest::mutable_location() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.functions.v1beta2.ListFunctionsRequest.location)
  return location_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ListFunctionsRequest::release_location() {
  // @@protoc_insertion_point(field_release:google.cloud.functions.v1beta2.ListFunctionsRequest.location)
  
  return location_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ListFunctionsRequest::set_allocated_location(::std::string* location) {
  if (location != NULL) {
    
  } else {
    
  }
  location_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), location);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.functions.v1beta2.ListFunctionsRequest.location)
}

// int32 page_size = 2;
inline void ListFunctionsRequest::clear_page_size() {
  page_size_ = 0;
}
inline ::google::protobuf::int32 ListFunctionsRequest::page_size() const {
  // @@protoc_insertion_point(field_get:google.cloud.functions.v1beta2.ListFunctionsRequest.page_size)
  return page_size_;
}
inline void ListFunctionsRequest::set_page_size(::google::protobuf::int32 value) {
  
  page_size_ = value;
  // @@protoc_insertion_point(field_set:google.cloud.functions.v1beta2.ListFunctionsRequest.page_size)
}

// string page_token = 3;
inline void ListFunctionsRequest::clear_page_token() {
  page_token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ListFunctionsRequest::page_token() const {
  // @@protoc_insertion_point(field_get:google.cloud.functions.v1beta2.ListFunctionsRequest.page_token)
  return page_token_.GetNoArena();
}
inline void ListFunctionsRequest::set_page_token(const ::std::string& value) {
  
  page_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.cloud.functions.v1beta2.ListFunctionsRequest.page_token)
}
#if LANG_CXX11
inline void ListFunctionsRequest::set_page_token(::std::string&& value) {
  
  page_token_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.functions.v1beta2.ListFunctionsRequest.page_token)
}
#endif
inline void ListFunctionsRequest::set_page_token(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  page_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.cloud.functions.v1beta2.ListFunctionsRequest.page_token)
}
inline void ListFunctionsRequest::set_page_token(const char* value, size_t size) {
  
  page_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.cloud.functions.v1beta2.ListFunctionsRequest.page_token)
}
inline ::std::string* ListFunctionsRequest::mutable_page_token() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.functions.v1beta2.ListFunctionsRequest.page_token)
  return page_token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ListFunctionsRequest::release_page_token() {
  // @@protoc_insertion_point(field_release:google.cloud.functions.v1beta2.ListFunctionsRequest.page_token)
  
  return page_token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ListFunctionsRequest::set_allocated_page_token(::std::string* page_token) {
  if (page_token != NULL) {
    
  } else {
    
  }
  page_token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), page_token);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.functions.v1beta2.ListFunctionsRequest.page_token)
}

// -------------------------------------------------------------------

// ListFunctionsResponse

// repeated .google.cloud.functions.v1beta2.CloudFunction functions = 1;
inline int ListFunctionsResponse::functions_size() const {
  return functions_.size();
}
inline void ListFunctionsResponse::clear_functions() {
  functions_.Clear();
}
inline const ::google::cloud::functions::v1beta2::CloudFunction& ListFunctionsResponse::functions(int index) const {
  // @@protoc_insertion_point(field_get:google.cloud.functions.v1beta2.ListFunctionsResponse.functions)
  return functions_.Get(index);
}
inline ::google::cloud::functions::v1beta2::CloudFunction* ListFunctionsResponse::mutable_functions(int index) {
  // @@protoc_insertion_point(field_mutable:google.cloud.functions.v1beta2.ListFunctionsResponse.functions)
  return functions_.Mutable(index);
}
inline ::google::cloud::functions::v1beta2::CloudFunction* ListFunctionsResponse::add_functions() {
  // @@protoc_insertion_point(field_add:google.cloud.functions.v1beta2.ListFunctionsResponse.functions)
  return functions_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::google::cloud::functions::v1beta2::CloudFunction >*
ListFunctionsResponse::mutable_functions() {
  // @@protoc_insertion_point(field_mutable_list:google.cloud.functions.v1beta2.ListFunctionsResponse.functions)
  return &functions_;
}
inline const ::google::protobuf::RepeatedPtrField< ::google::cloud::functions::v1beta2::CloudFunction >&
ListFunctionsResponse::functions() const {
  // @@protoc_insertion_point(field_list:google.cloud.functions.v1beta2.ListFunctionsResponse.functions)
  return functions_;
}

// string next_page_token = 2;
inline void ListFunctionsResponse::clear_next_page_token() {
  next_page_token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ListFunctionsResponse::next_page_token() const {
  // @@protoc_insertion_point(field_get:google.cloud.functions.v1beta2.ListFunctionsResponse.next_page_token)
  return next_page_token_.GetNoArena();
}
inline void ListFunctionsResponse::set_next_page_token(const ::std::string& value) {
  
  next_page_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.cloud.functions.v1beta2.ListFunctionsResponse.next_page_token)
}
#if LANG_CXX11
inline void ListFunctionsResponse::set_next_page_token(::std::string&& value) {
  
  next_page_token_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.functions.v1beta2.ListFunctionsResponse.next_page_token)
}
#endif
inline void ListFunctionsResponse::set_next_page_token(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  next_page_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.cloud.functions.v1beta2.ListFunctionsResponse.next_page_token)
}
inline void ListFunctionsResponse::set_next_page_token(const char* value, size_t size) {
  
  next_page_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.cloud.functions.v1beta2.ListFunctionsResponse.next_page_token)
}
inline ::std::string* ListFunctionsResponse::mutable_next_page_token() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.functions.v1beta2.ListFunctionsResponse.next_page_token)
  return next_page_token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ListFunctionsResponse::release_next_page_token() {
  // @@protoc_insertion_point(field_release:google.cloud.functions.v1beta2.ListFunctionsResponse.next_page_token)
  
  return next_page_token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ListFunctionsResponse::set_allocated_next_page_token(::std::string* next_page_token) {
  if (next_page_token != NULL) {
    
  } else {
    
  }
  next_page_token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), next_page_token);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.functions.v1beta2.ListFunctionsResponse.next_page_token)
}

// -------------------------------------------------------------------

// DeleteFunctionRequest

// string name = 1;
inline void DeleteFunctionRequest::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DeleteFunctionRequest::name() const {
  // @@protoc_insertion_point(field_get:google.cloud.functions.v1beta2.DeleteFunctionRequest.name)
  return name_.GetNoArena();
}
inline void DeleteFunctionRequest::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.cloud.functions.v1beta2.DeleteFunctionRequest.name)
}
#if LANG_CXX11
inline void DeleteFunctionRequest::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.functions.v1beta2.DeleteFunctionRequest.name)
}
#endif
inline void DeleteFunctionRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.cloud.functions.v1beta2.DeleteFunctionRequest.name)
}
inline void DeleteFunctionRequest::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.cloud.functions.v1beta2.DeleteFunctionRequest.name)
}
inline ::std::string* DeleteFunctionRequest::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.functions.v1beta2.DeleteFunctionRequest.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DeleteFunctionRequest::release_name() {
  // @@protoc_insertion_point(field_release:google.cloud.functions.v1beta2.DeleteFunctionRequest.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DeleteFunctionRequest::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.functions.v1beta2.DeleteFunctionRequest.name)
}

// -------------------------------------------------------------------

// CallFunctionRequest

// string name = 1;
inline void CallFunctionRequest::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CallFunctionRequest::name() const {
  // @@protoc_insertion_point(field_get:google.cloud.functions.v1beta2.CallFunctionRequest.name)
  return name_.GetNoArena();
}
inline void CallFunctionRequest::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.cloud.functions.v1beta2.CallFunctionRequest.name)
}
#if LANG_CXX11
inline void CallFunctionRequest::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.functions.v1beta2.CallFunctionRequest.name)
}
#endif
inline void CallFunctionRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.cloud.functions.v1beta2.CallFunctionRequest.name)
}
inline void CallFunctionRequest::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.cloud.functions.v1beta2.CallFunctionRequest.name)
}
inline ::std::string* CallFunctionRequest::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.functions.v1beta2.CallFunctionRequest.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CallFunctionRequest::release_name() {
  // @@protoc_insertion_point(field_release:google.cloud.functions.v1beta2.CallFunctionRequest.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CallFunctionRequest::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.functions.v1beta2.CallFunctionRequest.name)
}

// string data = 2;
inline void CallFunctionRequest::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CallFunctionRequest::data() const {
  // @@protoc_insertion_point(field_get:google.cloud.functions.v1beta2.CallFunctionRequest.data)
  return data_.GetNoArena();
}
inline void CallFunctionRequest::set_data(const ::std::string& value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.cloud.functions.v1beta2.CallFunctionRequest.data)
}
#if LANG_CXX11
inline void CallFunctionRequest::set_data(::std::string&& value) {
  
  data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.functions.v1beta2.CallFunctionRequest.data)
}
#endif
inline void CallFunctionRequest::set_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.cloud.functions.v1beta2.CallFunctionRequest.data)
}
inline void CallFunctionRequest::set_data(const char* value, size_t size) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.cloud.functions.v1beta2.CallFunctionRequest.data)
}
inline ::std::string* CallFunctionRequest::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.functions.v1beta2.CallFunctionRequest.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CallFunctionRequest::release_data() {
  // @@protoc_insertion_point(field_release:google.cloud.functions.v1beta2.CallFunctionRequest.data)
  
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CallFunctionRequest::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.functions.v1beta2.CallFunctionRequest.data)
}

// -------------------------------------------------------------------

// CallFunctionResponse

// string execution_id = 1;
inline void CallFunctionResponse::clear_execution_id() {
  execution_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CallFunctionResponse::execution_id() const {
  // @@protoc_insertion_point(field_get:google.cloud.functions.v1beta2.CallFunctionResponse.execution_id)
  return execution_id_.GetNoArena();
}
inline void CallFunctionResponse::set_execution_id(const ::std::string& value) {
  
  execution_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.cloud.functions.v1beta2.CallFunctionResponse.execution_id)
}
#if LANG_CXX11
inline void CallFunctionResponse::set_execution_id(::std::string&& value) {
  
  execution_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.functions.v1beta2.CallFunctionResponse.execution_id)
}
#endif
inline void CallFunctionResponse::set_execution_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  execution_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.cloud.functions.v1beta2.CallFunctionResponse.execution_id)
}
inline void CallFunctionResponse::set_execution_id(const char* value, size_t size) {
  
  execution_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.cloud.functions.v1beta2.CallFunctionResponse.execution_id)
}
inline ::std::string* CallFunctionResponse::mutable_execution_id() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.functions.v1beta2.CallFunctionResponse.execution_id)
  return execution_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CallFunctionResponse::release_execution_id() {
  // @@protoc_insertion_point(field_release:google.cloud.functions.v1beta2.CallFunctionResponse.execution_id)
  
  return execution_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CallFunctionResponse::set_allocated_execution_id(::std::string* execution_id) {
  if (execution_id != NULL) {
    
  } else {
    
  }
  execution_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), execution_id);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.functions.v1beta2.CallFunctionResponse.execution_id)
}

// string result = 2;
inline void CallFunctionResponse::clear_result() {
  result_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CallFunctionResponse::result() const {
  // @@protoc_insertion_point(field_get:google.cloud.functions.v1beta2.CallFunctionResponse.result)
  return result_.GetNoArena();
}
inline void CallFunctionResponse::set_result(const ::std::string& value) {
  
  result_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.cloud.functions.v1beta2.CallFunctionResponse.result)
}
#if LANG_CXX11
inline void CallFunctionResponse::set_result(::std::string&& value) {
  
  result_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.functions.v1beta2.CallFunctionResponse.result)
}
#endif
inline void CallFunctionResponse::set_result(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  result_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.cloud.functions.v1beta2.CallFunctionResponse.result)
}
inline void CallFunctionResponse::set_result(const char* value, size_t size) {
  
  result_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.cloud.functions.v1beta2.CallFunctionResponse.result)
}
inline ::std::string* CallFunctionResponse::mutable_result() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.functions.v1beta2.CallFunctionResponse.result)
  return result_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CallFunctionResponse::release_result() {
  // @@protoc_insertion_point(field_release:google.cloud.functions.v1beta2.CallFunctionResponse.result)
  
  return result_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CallFunctionResponse::set_allocated_result(::std::string* result) {
  if (result != NULL) {
    
  } else {
    
  }
  result_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), result);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.functions.v1beta2.CallFunctionResponse.result)
}

// string error = 3;
inline void CallFunctionResponse::clear_error() {
  error_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CallFunctionResponse::error() const {
  // @@protoc_insertion_point(field_get:google.cloud.functions.v1beta2.CallFunctionResponse.error)
  return error_.GetNoArena();
}
inline void CallFunctionResponse::set_error(const ::std::string& value) {
  
  error_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.cloud.functions.v1beta2.CallFunctionResponse.error)
}
#if LANG_CXX11
inline void CallFunctionResponse::set_error(::std::string&& value) {
  
  error_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.functions.v1beta2.CallFunctionResponse.error)
}
#endif
inline void CallFunctionResponse::set_error(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  error_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.cloud.functions.v1beta2.CallFunctionResponse.error)
}
inline void CallFunctionResponse::set_error(const char* value, size_t size) {
  
  error_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.cloud.functions.v1beta2.CallFunctionResponse.error)
}
inline ::std::string* CallFunctionResponse::mutable_error() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.functions.v1beta2.CallFunctionResponse.error)
  return error_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CallFunctionResponse::release_error() {
  // @@protoc_insertion_point(field_release:google.cloud.functions.v1beta2.CallFunctionResponse.error)
  
  return error_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CallFunctionResponse::set_allocated_error(::std::string* error) {
  if (error != NULL) {
    
  } else {
    
  }
  error_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), error);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.functions.v1beta2.CallFunctionResponse.error)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1beta2
}  // namespace functions
}  // namespace cloud
}  // namespace google

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::google::cloud::functions::v1beta2::CloudFunctionStatus> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::google::cloud::functions::v1beta2::CloudFunctionStatus>() {
  return ::google::cloud::functions::v1beta2::CloudFunctionStatus_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_google_2fcloud_2ffunctions_2fv1beta2_2ffunctions_2eproto__INCLUDED
