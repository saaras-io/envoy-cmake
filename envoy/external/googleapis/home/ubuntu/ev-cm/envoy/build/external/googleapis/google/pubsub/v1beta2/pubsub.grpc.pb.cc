// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: google/pubsub/v1beta2/pubsub.proto

#include "google/pubsub/v1beta2/pubsub.pb.h"
#include "google/pubsub/v1beta2/pubsub.grpc.pb.h"

#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace google {
namespace pubsub {
namespace v1beta2 {

static const char* Subscriber_method_names[] = {
  "/google.pubsub.v1beta2.Subscriber/CreateSubscription",
  "/google.pubsub.v1beta2.Subscriber/GetSubscription",
  "/google.pubsub.v1beta2.Subscriber/ListSubscriptions",
  "/google.pubsub.v1beta2.Subscriber/DeleteSubscription",
  "/google.pubsub.v1beta2.Subscriber/ModifyAckDeadline",
  "/google.pubsub.v1beta2.Subscriber/Acknowledge",
  "/google.pubsub.v1beta2.Subscriber/Pull",
  "/google.pubsub.v1beta2.Subscriber/ModifyPushConfig",
};

std::unique_ptr< Subscriber::Stub> Subscriber::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< Subscriber::Stub> stub(new Subscriber::Stub(channel));
  return stub;
}

Subscriber::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_CreateSubscription_(Subscriber_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetSubscription_(Subscriber_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ListSubscriptions_(Subscriber_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DeleteSubscription_(Subscriber_method_names[3], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ModifyAckDeadline_(Subscriber_method_names[4], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Acknowledge_(Subscriber_method_names[5], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Pull_(Subscriber_method_names[6], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ModifyPushConfig_(Subscriber_method_names[7], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status Subscriber::Stub::CreateSubscription(::grpc::ClientContext* context, const ::google::pubsub::v1beta2::Subscription& request, ::google::pubsub::v1beta2::Subscription* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_CreateSubscription_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::google::pubsub::v1beta2::Subscription>* Subscriber::Stub::AsyncCreateSubscriptionRaw(::grpc::ClientContext* context, const ::google::pubsub::v1beta2::Subscription& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::pubsub::v1beta2::Subscription>::Create(channel_.get(), cq, rpcmethod_CreateSubscription_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::google::pubsub::v1beta2::Subscription>* Subscriber::Stub::PrepareAsyncCreateSubscriptionRaw(::grpc::ClientContext* context, const ::google::pubsub::v1beta2::Subscription& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::pubsub::v1beta2::Subscription>::Create(channel_.get(), cq, rpcmethod_CreateSubscription_, context, request, false);
}

::grpc::Status Subscriber::Stub::GetSubscription(::grpc::ClientContext* context, const ::google::pubsub::v1beta2::GetSubscriptionRequest& request, ::google::pubsub::v1beta2::Subscription* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetSubscription_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::google::pubsub::v1beta2::Subscription>* Subscriber::Stub::AsyncGetSubscriptionRaw(::grpc::ClientContext* context, const ::google::pubsub::v1beta2::GetSubscriptionRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::pubsub::v1beta2::Subscription>::Create(channel_.get(), cq, rpcmethod_GetSubscription_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::google::pubsub::v1beta2::Subscription>* Subscriber::Stub::PrepareAsyncGetSubscriptionRaw(::grpc::ClientContext* context, const ::google::pubsub::v1beta2::GetSubscriptionRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::pubsub::v1beta2::Subscription>::Create(channel_.get(), cq, rpcmethod_GetSubscription_, context, request, false);
}

::grpc::Status Subscriber::Stub::ListSubscriptions(::grpc::ClientContext* context, const ::google::pubsub::v1beta2::ListSubscriptionsRequest& request, ::google::pubsub::v1beta2::ListSubscriptionsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_ListSubscriptions_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::google::pubsub::v1beta2::ListSubscriptionsResponse>* Subscriber::Stub::AsyncListSubscriptionsRaw(::grpc::ClientContext* context, const ::google::pubsub::v1beta2::ListSubscriptionsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::pubsub::v1beta2::ListSubscriptionsResponse>::Create(channel_.get(), cq, rpcmethod_ListSubscriptions_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::google::pubsub::v1beta2::ListSubscriptionsResponse>* Subscriber::Stub::PrepareAsyncListSubscriptionsRaw(::grpc::ClientContext* context, const ::google::pubsub::v1beta2::ListSubscriptionsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::pubsub::v1beta2::ListSubscriptionsResponse>::Create(channel_.get(), cq, rpcmethod_ListSubscriptions_, context, request, false);
}

::grpc::Status Subscriber::Stub::DeleteSubscription(::grpc::ClientContext* context, const ::google::pubsub::v1beta2::DeleteSubscriptionRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_DeleteSubscription_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Subscriber::Stub::AsyncDeleteSubscriptionRaw(::grpc::ClientContext* context, const ::google::pubsub::v1beta2::DeleteSubscriptionRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::protobuf::Empty>::Create(channel_.get(), cq, rpcmethod_DeleteSubscription_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Subscriber::Stub::PrepareAsyncDeleteSubscriptionRaw(::grpc::ClientContext* context, const ::google::pubsub::v1beta2::DeleteSubscriptionRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::protobuf::Empty>::Create(channel_.get(), cq, rpcmethod_DeleteSubscription_, context, request, false);
}

::grpc::Status Subscriber::Stub::ModifyAckDeadline(::grpc::ClientContext* context, const ::google::pubsub::v1beta2::ModifyAckDeadlineRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_ModifyAckDeadline_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Subscriber::Stub::AsyncModifyAckDeadlineRaw(::grpc::ClientContext* context, const ::google::pubsub::v1beta2::ModifyAckDeadlineRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::protobuf::Empty>::Create(channel_.get(), cq, rpcmethod_ModifyAckDeadline_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Subscriber::Stub::PrepareAsyncModifyAckDeadlineRaw(::grpc::ClientContext* context, const ::google::pubsub::v1beta2::ModifyAckDeadlineRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::protobuf::Empty>::Create(channel_.get(), cq, rpcmethod_ModifyAckDeadline_, context, request, false);
}

::grpc::Status Subscriber::Stub::Acknowledge(::grpc::ClientContext* context, const ::google::pubsub::v1beta2::AcknowledgeRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Acknowledge_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Subscriber::Stub::AsyncAcknowledgeRaw(::grpc::ClientContext* context, const ::google::pubsub::v1beta2::AcknowledgeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::protobuf::Empty>::Create(channel_.get(), cq, rpcmethod_Acknowledge_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Subscriber::Stub::PrepareAsyncAcknowledgeRaw(::grpc::ClientContext* context, const ::google::pubsub::v1beta2::AcknowledgeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::protobuf::Empty>::Create(channel_.get(), cq, rpcmethod_Acknowledge_, context, request, false);
}

::grpc::Status Subscriber::Stub::Pull(::grpc::ClientContext* context, const ::google::pubsub::v1beta2::PullRequest& request, ::google::pubsub::v1beta2::PullResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Pull_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::google::pubsub::v1beta2::PullResponse>* Subscriber::Stub::AsyncPullRaw(::grpc::ClientContext* context, const ::google::pubsub::v1beta2::PullRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::pubsub::v1beta2::PullResponse>::Create(channel_.get(), cq, rpcmethod_Pull_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::google::pubsub::v1beta2::PullResponse>* Subscriber::Stub::PrepareAsyncPullRaw(::grpc::ClientContext* context, const ::google::pubsub::v1beta2::PullRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::pubsub::v1beta2::PullResponse>::Create(channel_.get(), cq, rpcmethod_Pull_, context, request, false);
}

::grpc::Status Subscriber::Stub::ModifyPushConfig(::grpc::ClientContext* context, const ::google::pubsub::v1beta2::ModifyPushConfigRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_ModifyPushConfig_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Subscriber::Stub::AsyncModifyPushConfigRaw(::grpc::ClientContext* context, const ::google::pubsub::v1beta2::ModifyPushConfigRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::protobuf::Empty>::Create(channel_.get(), cq, rpcmethod_ModifyPushConfig_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Subscriber::Stub::PrepareAsyncModifyPushConfigRaw(::grpc::ClientContext* context, const ::google::pubsub::v1beta2::ModifyPushConfigRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::protobuf::Empty>::Create(channel_.get(), cq, rpcmethod_ModifyPushConfig_, context, request, false);
}

Subscriber::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Subscriber_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Subscriber::Service, ::google::pubsub::v1beta2::Subscription, ::google::pubsub::v1beta2::Subscription>(
          std::mem_fn(&Subscriber::Service::CreateSubscription), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Subscriber_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Subscriber::Service, ::google::pubsub::v1beta2::GetSubscriptionRequest, ::google::pubsub::v1beta2::Subscription>(
          std::mem_fn(&Subscriber::Service::GetSubscription), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Subscriber_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Subscriber::Service, ::google::pubsub::v1beta2::ListSubscriptionsRequest, ::google::pubsub::v1beta2::ListSubscriptionsResponse>(
          std::mem_fn(&Subscriber::Service::ListSubscriptions), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Subscriber_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Subscriber::Service, ::google::pubsub::v1beta2::DeleteSubscriptionRequest, ::google::protobuf::Empty>(
          std::mem_fn(&Subscriber::Service::DeleteSubscription), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Subscriber_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Subscriber::Service, ::google::pubsub::v1beta2::ModifyAckDeadlineRequest, ::google::protobuf::Empty>(
          std::mem_fn(&Subscriber::Service::ModifyAckDeadline), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Subscriber_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Subscriber::Service, ::google::pubsub::v1beta2::AcknowledgeRequest, ::google::protobuf::Empty>(
          std::mem_fn(&Subscriber::Service::Acknowledge), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Subscriber_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Subscriber::Service, ::google::pubsub::v1beta2::PullRequest, ::google::pubsub::v1beta2::PullResponse>(
          std::mem_fn(&Subscriber::Service::Pull), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Subscriber_method_names[7],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Subscriber::Service, ::google::pubsub::v1beta2::ModifyPushConfigRequest, ::google::protobuf::Empty>(
          std::mem_fn(&Subscriber::Service::ModifyPushConfig), this)));
}

Subscriber::Service::~Service() {
}

::grpc::Status Subscriber::Service::CreateSubscription(::grpc::ServerContext* context, const ::google::pubsub::v1beta2::Subscription* request, ::google::pubsub::v1beta2::Subscription* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Subscriber::Service::GetSubscription(::grpc::ServerContext* context, const ::google::pubsub::v1beta2::GetSubscriptionRequest* request, ::google::pubsub::v1beta2::Subscription* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Subscriber::Service::ListSubscriptions(::grpc::ServerContext* context, const ::google::pubsub::v1beta2::ListSubscriptionsRequest* request, ::google::pubsub::v1beta2::ListSubscriptionsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Subscriber::Service::DeleteSubscription(::grpc::ServerContext* context, const ::google::pubsub::v1beta2::DeleteSubscriptionRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Subscriber::Service::ModifyAckDeadline(::grpc::ServerContext* context, const ::google::pubsub::v1beta2::ModifyAckDeadlineRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Subscriber::Service::Acknowledge(::grpc::ServerContext* context, const ::google::pubsub::v1beta2::AcknowledgeRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Subscriber::Service::Pull(::grpc::ServerContext* context, const ::google::pubsub::v1beta2::PullRequest* request, ::google::pubsub::v1beta2::PullResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Subscriber::Service::ModifyPushConfig(::grpc::ServerContext* context, const ::google::pubsub::v1beta2::ModifyPushConfigRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


static const char* Publisher_method_names[] = {
  "/google.pubsub.v1beta2.Publisher/CreateTopic",
  "/google.pubsub.v1beta2.Publisher/Publish",
  "/google.pubsub.v1beta2.Publisher/GetTopic",
  "/google.pubsub.v1beta2.Publisher/ListTopics",
  "/google.pubsub.v1beta2.Publisher/ListTopicSubscriptions",
  "/google.pubsub.v1beta2.Publisher/DeleteTopic",
};

std::unique_ptr< Publisher::Stub> Publisher::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< Publisher::Stub> stub(new Publisher::Stub(channel));
  return stub;
}

Publisher::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_CreateTopic_(Publisher_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Publish_(Publisher_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetTopic_(Publisher_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ListTopics_(Publisher_method_names[3], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ListTopicSubscriptions_(Publisher_method_names[4], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DeleteTopic_(Publisher_method_names[5], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status Publisher::Stub::CreateTopic(::grpc::ClientContext* context, const ::google::pubsub::v1beta2::Topic& request, ::google::pubsub::v1beta2::Topic* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_CreateTopic_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::google::pubsub::v1beta2::Topic>* Publisher::Stub::AsyncCreateTopicRaw(::grpc::ClientContext* context, const ::google::pubsub::v1beta2::Topic& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::pubsub::v1beta2::Topic>::Create(channel_.get(), cq, rpcmethod_CreateTopic_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::google::pubsub::v1beta2::Topic>* Publisher::Stub::PrepareAsyncCreateTopicRaw(::grpc::ClientContext* context, const ::google::pubsub::v1beta2::Topic& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::pubsub::v1beta2::Topic>::Create(channel_.get(), cq, rpcmethod_CreateTopic_, context, request, false);
}

::grpc::Status Publisher::Stub::Publish(::grpc::ClientContext* context, const ::google::pubsub::v1beta2::PublishRequest& request, ::google::pubsub::v1beta2::PublishResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Publish_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::google::pubsub::v1beta2::PublishResponse>* Publisher::Stub::AsyncPublishRaw(::grpc::ClientContext* context, const ::google::pubsub::v1beta2::PublishRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::pubsub::v1beta2::PublishResponse>::Create(channel_.get(), cq, rpcmethod_Publish_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::google::pubsub::v1beta2::PublishResponse>* Publisher::Stub::PrepareAsyncPublishRaw(::grpc::ClientContext* context, const ::google::pubsub::v1beta2::PublishRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::pubsub::v1beta2::PublishResponse>::Create(channel_.get(), cq, rpcmethod_Publish_, context, request, false);
}

::grpc::Status Publisher::Stub::GetTopic(::grpc::ClientContext* context, const ::google::pubsub::v1beta2::GetTopicRequest& request, ::google::pubsub::v1beta2::Topic* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetTopic_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::google::pubsub::v1beta2::Topic>* Publisher::Stub::AsyncGetTopicRaw(::grpc::ClientContext* context, const ::google::pubsub::v1beta2::GetTopicRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::pubsub::v1beta2::Topic>::Create(channel_.get(), cq, rpcmethod_GetTopic_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::google::pubsub::v1beta2::Topic>* Publisher::Stub::PrepareAsyncGetTopicRaw(::grpc::ClientContext* context, const ::google::pubsub::v1beta2::GetTopicRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::pubsub::v1beta2::Topic>::Create(channel_.get(), cq, rpcmethod_GetTopic_, context, request, false);
}

::grpc::Status Publisher::Stub::ListTopics(::grpc::ClientContext* context, const ::google::pubsub::v1beta2::ListTopicsRequest& request, ::google::pubsub::v1beta2::ListTopicsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_ListTopics_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::google::pubsub::v1beta2::ListTopicsResponse>* Publisher::Stub::AsyncListTopicsRaw(::grpc::ClientContext* context, const ::google::pubsub::v1beta2::ListTopicsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::pubsub::v1beta2::ListTopicsResponse>::Create(channel_.get(), cq, rpcmethod_ListTopics_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::google::pubsub::v1beta2::ListTopicsResponse>* Publisher::Stub::PrepareAsyncListTopicsRaw(::grpc::ClientContext* context, const ::google::pubsub::v1beta2::ListTopicsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::pubsub::v1beta2::ListTopicsResponse>::Create(channel_.get(), cq, rpcmethod_ListTopics_, context, request, false);
}

::grpc::Status Publisher::Stub::ListTopicSubscriptions(::grpc::ClientContext* context, const ::google::pubsub::v1beta2::ListTopicSubscriptionsRequest& request, ::google::pubsub::v1beta2::ListTopicSubscriptionsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_ListTopicSubscriptions_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::google::pubsub::v1beta2::ListTopicSubscriptionsResponse>* Publisher::Stub::AsyncListTopicSubscriptionsRaw(::grpc::ClientContext* context, const ::google::pubsub::v1beta2::ListTopicSubscriptionsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::pubsub::v1beta2::ListTopicSubscriptionsResponse>::Create(channel_.get(), cq, rpcmethod_ListTopicSubscriptions_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::google::pubsub::v1beta2::ListTopicSubscriptionsResponse>* Publisher::Stub::PrepareAsyncListTopicSubscriptionsRaw(::grpc::ClientContext* context, const ::google::pubsub::v1beta2::ListTopicSubscriptionsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::pubsub::v1beta2::ListTopicSubscriptionsResponse>::Create(channel_.get(), cq, rpcmethod_ListTopicSubscriptions_, context, request, false);
}

::grpc::Status Publisher::Stub::DeleteTopic(::grpc::ClientContext* context, const ::google::pubsub::v1beta2::DeleteTopicRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_DeleteTopic_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Publisher::Stub::AsyncDeleteTopicRaw(::grpc::ClientContext* context, const ::google::pubsub::v1beta2::DeleteTopicRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::protobuf::Empty>::Create(channel_.get(), cq, rpcmethod_DeleteTopic_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Publisher::Stub::PrepareAsyncDeleteTopicRaw(::grpc::ClientContext* context, const ::google::pubsub::v1beta2::DeleteTopicRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::protobuf::Empty>::Create(channel_.get(), cq, rpcmethod_DeleteTopic_, context, request, false);
}

Publisher::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Publisher_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Publisher::Service, ::google::pubsub::v1beta2::Topic, ::google::pubsub::v1beta2::Topic>(
          std::mem_fn(&Publisher::Service::CreateTopic), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Publisher_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Publisher::Service, ::google::pubsub::v1beta2::PublishRequest, ::google::pubsub::v1beta2::PublishResponse>(
          std::mem_fn(&Publisher::Service::Publish), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Publisher_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Publisher::Service, ::google::pubsub::v1beta2::GetTopicRequest, ::google::pubsub::v1beta2::Topic>(
          std::mem_fn(&Publisher::Service::GetTopic), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Publisher_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Publisher::Service, ::google::pubsub::v1beta2::ListTopicsRequest, ::google::pubsub::v1beta2::ListTopicsResponse>(
          std::mem_fn(&Publisher::Service::ListTopics), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Publisher_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Publisher::Service, ::google::pubsub::v1beta2::ListTopicSubscriptionsRequest, ::google::pubsub::v1beta2::ListTopicSubscriptionsResponse>(
          std::mem_fn(&Publisher::Service::ListTopicSubscriptions), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Publisher_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Publisher::Service, ::google::pubsub::v1beta2::DeleteTopicRequest, ::google::protobuf::Empty>(
          std::mem_fn(&Publisher::Service::DeleteTopic), this)));
}

Publisher::Service::~Service() {
}

::grpc::Status Publisher::Service::CreateTopic(::grpc::ServerContext* context, const ::google::pubsub::v1beta2::Topic* request, ::google::pubsub::v1beta2::Topic* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Publisher::Service::Publish(::grpc::ServerContext* context, const ::google::pubsub::v1beta2::PublishRequest* request, ::google::pubsub::v1beta2::PublishResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Publisher::Service::GetTopic(::grpc::ServerContext* context, const ::google::pubsub::v1beta2::GetTopicRequest* request, ::google::pubsub::v1beta2::Topic* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Publisher::Service::ListTopics(::grpc::ServerContext* context, const ::google::pubsub::v1beta2::ListTopicsRequest* request, ::google::pubsub::v1beta2::ListTopicsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Publisher::Service::ListTopicSubscriptions(::grpc::ServerContext* context, const ::google::pubsub::v1beta2::ListTopicSubscriptionsRequest* request, ::google::pubsub::v1beta2::ListTopicSubscriptionsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Publisher::Service::DeleteTopic(::grpc::ServerContext* context, const ::google::pubsub::v1beta2::DeleteTopicRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace google
}  // namespace pubsub
}  // namespace v1beta2

