// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: google/cloud/location/locations.proto

#include "google/cloud/location/locations.pb.h"
#include "google/cloud/location/locations.grpc.pb.h"

#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace google {
namespace cloud {
namespace location {

static const char* Locations_method_names[] = {
  "/google.cloud.location.Locations/ListLocations",
  "/google.cloud.location.Locations/GetLocation",
};

std::unique_ptr< Locations::Stub> Locations::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< Locations::Stub> stub(new Locations::Stub(channel));
  return stub;
}

Locations::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_ListLocations_(Locations_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetLocation_(Locations_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status Locations::Stub::ListLocations(::grpc::ClientContext* context, const ::google::cloud::location::ListLocationsRequest& request, ::google::cloud::location::ListLocationsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_ListLocations_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::google::cloud::location::ListLocationsResponse>* Locations::Stub::AsyncListLocationsRaw(::grpc::ClientContext* context, const ::google::cloud::location::ListLocationsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::cloud::location::ListLocationsResponse>::Create(channel_.get(), cq, rpcmethod_ListLocations_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::google::cloud::location::ListLocationsResponse>* Locations::Stub::PrepareAsyncListLocationsRaw(::grpc::ClientContext* context, const ::google::cloud::location::ListLocationsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::cloud::location::ListLocationsResponse>::Create(channel_.get(), cq, rpcmethod_ListLocations_, context, request, false);
}

::grpc::Status Locations::Stub::GetLocation(::grpc::ClientContext* context, const ::google::cloud::location::GetLocationRequest& request, ::google::cloud::location::Location* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetLocation_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::google::cloud::location::Location>* Locations::Stub::AsyncGetLocationRaw(::grpc::ClientContext* context, const ::google::cloud::location::GetLocationRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::cloud::location::Location>::Create(channel_.get(), cq, rpcmethod_GetLocation_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::google::cloud::location::Location>* Locations::Stub::PrepareAsyncGetLocationRaw(::grpc::ClientContext* context, const ::google::cloud::location::GetLocationRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::cloud::location::Location>::Create(channel_.get(), cq, rpcmethod_GetLocation_, context, request, false);
}

Locations::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Locations_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Locations::Service, ::google::cloud::location::ListLocationsRequest, ::google::cloud::location::ListLocationsResponse>(
          std::mem_fn(&Locations::Service::ListLocations), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Locations_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Locations::Service, ::google::cloud::location::GetLocationRequest, ::google::cloud::location::Location>(
          std::mem_fn(&Locations::Service::GetLocation), this)));
}

Locations::Service::~Service() {
}

::grpc::Status Locations::Service::ListLocations(::grpc::ServerContext* context, const ::google::cloud::location::ListLocationsRequest* request, ::google::cloud::location::ListLocationsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Locations::Service::GetLocation(::grpc::ServerContext* context, const ::google::cloud::location::GetLocationRequest* request, ::google::cloud::location::Location* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace google
}  // namespace cloud
}  // namespace location

