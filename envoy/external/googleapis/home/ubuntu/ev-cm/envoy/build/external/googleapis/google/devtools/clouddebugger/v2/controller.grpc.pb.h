// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: google/devtools/clouddebugger/v2/controller.proto
// Original file comments:
// Copyright 2017 Google Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
#ifndef GRPC_google_2fdevtools_2fclouddebugger_2fv2_2fcontroller_2eproto__INCLUDED
#define GRPC_google_2fdevtools_2fclouddebugger_2fv2_2fcontroller_2eproto__INCLUDED

#include "google/devtools/clouddebugger/v2/controller.pb.h"

#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace grpc {
class CompletionQueue;
class Channel;
class ServerCompletionQueue;
class ServerContext;
}  // namespace grpc

namespace google {
namespace devtools {
namespace clouddebugger {
namespace v2 {

// The Controller service provides the API for orchestrating a collection of
// debugger agents to perform debugging tasks. These agents are each attached
// to a process of an application which may include one or more replicas.
//
// The debugger agents register with the Controller to identify the application
// being debugged, the Debuggee. All agents that register with the same data,
// represent the same Debuggee, and are assigned the same `debuggee_id`.
//
// The debugger agents call the Controller to retrieve  the list of active
// Breakpoints. Agents with the same `debuggee_id` get the same breakpoints
// list. An agent that can fulfill the breakpoint request updates the
// Controller with the breakpoint result. The controller selects the first
// result received and discards the rest of the results.
// Agents that poll again for active breakpoints will no longer have
// the completed breakpoint in the list and should remove that breakpoint from
// their attached process.
//
// The Controller service does not provide a way to retrieve the results of
// a completed breakpoint. This functionality is available using the Debugger
// service.
class Controller2 final {
 public:
  static constexpr char const* service_full_name() {
    return "google.devtools.clouddebugger.v2.Controller2";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Registers the debuggee with the controller service.
    //
    // All agents attached to the same application must call this method with
    // exactly the same request content to get back the same stable `debuggee_id`.
    // Agents should call this method again whenever `google.rpc.Code.NOT_FOUND`
    // is returned from any controller method.
    //
    // This protocol allows the controller service to disable debuggees, recover
    // from data loss, or change the `debuggee_id` format. Agents must handle
    // `debuggee_id` value changing upon re-registration.
    virtual ::grpc::Status RegisterDebuggee(::grpc::ClientContext* context, const ::google::devtools::clouddebugger::v2::RegisterDebuggeeRequest& request, ::google::devtools::clouddebugger::v2::RegisterDebuggeeResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::devtools::clouddebugger::v2::RegisterDebuggeeResponse>> AsyncRegisterDebuggee(::grpc::ClientContext* context, const ::google::devtools::clouddebugger::v2::RegisterDebuggeeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::devtools::clouddebugger::v2::RegisterDebuggeeResponse>>(AsyncRegisterDebuggeeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::devtools::clouddebugger::v2::RegisterDebuggeeResponse>> PrepareAsyncRegisterDebuggee(::grpc::ClientContext* context, const ::google::devtools::clouddebugger::v2::RegisterDebuggeeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::devtools::clouddebugger::v2::RegisterDebuggeeResponse>>(PrepareAsyncRegisterDebuggeeRaw(context, request, cq));
    }
    // Returns the list of all active breakpoints for the debuggee.
    //
    // The breakpoint specification (`location`, `condition`, and `expressions`
    // fields) is semantically immutable, although the field values may
    // change. For example, an agent may update the location line number
    // to reflect the actual line where the breakpoint was set, but this
    // doesn't change the breakpoint semantics.
    //
    // This means that an agent does not need to check if a breakpoint has changed
    // when it encounters the same breakpoint on a successive call.
    // Moreover, an agent should remember the breakpoints that are completed
    // until the controller removes them from the active list to avoid
    // setting those breakpoints again.
    virtual ::grpc::Status ListActiveBreakpoints(::grpc::ClientContext* context, const ::google::devtools::clouddebugger::v2::ListActiveBreakpointsRequest& request, ::google::devtools::clouddebugger::v2::ListActiveBreakpointsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::devtools::clouddebugger::v2::ListActiveBreakpointsResponse>> AsyncListActiveBreakpoints(::grpc::ClientContext* context, const ::google::devtools::clouddebugger::v2::ListActiveBreakpointsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::devtools::clouddebugger::v2::ListActiveBreakpointsResponse>>(AsyncListActiveBreakpointsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::devtools::clouddebugger::v2::ListActiveBreakpointsResponse>> PrepareAsyncListActiveBreakpoints(::grpc::ClientContext* context, const ::google::devtools::clouddebugger::v2::ListActiveBreakpointsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::devtools::clouddebugger::v2::ListActiveBreakpointsResponse>>(PrepareAsyncListActiveBreakpointsRaw(context, request, cq));
    }
    // Updates the breakpoint state or mutable fields.
    // The entire Breakpoint message must be sent back to the controller service.
    //
    // Updates to active breakpoint fields are only allowed if the new value
    // does not change the breakpoint specification. Updates to the `location`,
    // `condition` and `expressions` fields should not alter the breakpoint
    // semantics. These may only make changes such as canonicalizing a value
    // or snapping the location to the correct line of code.
    virtual ::grpc::Status UpdateActiveBreakpoint(::grpc::ClientContext* context, const ::google::devtools::clouddebugger::v2::UpdateActiveBreakpointRequest& request, ::google::devtools::clouddebugger::v2::UpdateActiveBreakpointResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::devtools::clouddebugger::v2::UpdateActiveBreakpointResponse>> AsyncUpdateActiveBreakpoint(::grpc::ClientContext* context, const ::google::devtools::clouddebugger::v2::UpdateActiveBreakpointRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::devtools::clouddebugger::v2::UpdateActiveBreakpointResponse>>(AsyncUpdateActiveBreakpointRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::devtools::clouddebugger::v2::UpdateActiveBreakpointResponse>> PrepareAsyncUpdateActiveBreakpoint(::grpc::ClientContext* context, const ::google::devtools::clouddebugger::v2::UpdateActiveBreakpointRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::devtools::clouddebugger::v2::UpdateActiveBreakpointResponse>>(PrepareAsyncUpdateActiveBreakpointRaw(context, request, cq));
    }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::devtools::clouddebugger::v2::RegisterDebuggeeResponse>* AsyncRegisterDebuggeeRaw(::grpc::ClientContext* context, const ::google::devtools::clouddebugger::v2::RegisterDebuggeeRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::devtools::clouddebugger::v2::RegisterDebuggeeResponse>* PrepareAsyncRegisterDebuggeeRaw(::grpc::ClientContext* context, const ::google::devtools::clouddebugger::v2::RegisterDebuggeeRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::devtools::clouddebugger::v2::ListActiveBreakpointsResponse>* AsyncListActiveBreakpointsRaw(::grpc::ClientContext* context, const ::google::devtools::clouddebugger::v2::ListActiveBreakpointsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::devtools::clouddebugger::v2::ListActiveBreakpointsResponse>* PrepareAsyncListActiveBreakpointsRaw(::grpc::ClientContext* context, const ::google::devtools::clouddebugger::v2::ListActiveBreakpointsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::devtools::clouddebugger::v2::UpdateActiveBreakpointResponse>* AsyncUpdateActiveBreakpointRaw(::grpc::ClientContext* context, const ::google::devtools::clouddebugger::v2::UpdateActiveBreakpointRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::devtools::clouddebugger::v2::UpdateActiveBreakpointResponse>* PrepareAsyncUpdateActiveBreakpointRaw(::grpc::ClientContext* context, const ::google::devtools::clouddebugger::v2::UpdateActiveBreakpointRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status RegisterDebuggee(::grpc::ClientContext* context, const ::google::devtools::clouddebugger::v2::RegisterDebuggeeRequest& request, ::google::devtools::clouddebugger::v2::RegisterDebuggeeResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::devtools::clouddebugger::v2::RegisterDebuggeeResponse>> AsyncRegisterDebuggee(::grpc::ClientContext* context, const ::google::devtools::clouddebugger::v2::RegisterDebuggeeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::devtools::clouddebugger::v2::RegisterDebuggeeResponse>>(AsyncRegisterDebuggeeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::devtools::clouddebugger::v2::RegisterDebuggeeResponse>> PrepareAsyncRegisterDebuggee(::grpc::ClientContext* context, const ::google::devtools::clouddebugger::v2::RegisterDebuggeeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::devtools::clouddebugger::v2::RegisterDebuggeeResponse>>(PrepareAsyncRegisterDebuggeeRaw(context, request, cq));
    }
    ::grpc::Status ListActiveBreakpoints(::grpc::ClientContext* context, const ::google::devtools::clouddebugger::v2::ListActiveBreakpointsRequest& request, ::google::devtools::clouddebugger::v2::ListActiveBreakpointsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::devtools::clouddebugger::v2::ListActiveBreakpointsResponse>> AsyncListActiveBreakpoints(::grpc::ClientContext* context, const ::google::devtools::clouddebugger::v2::ListActiveBreakpointsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::devtools::clouddebugger::v2::ListActiveBreakpointsResponse>>(AsyncListActiveBreakpointsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::devtools::clouddebugger::v2::ListActiveBreakpointsResponse>> PrepareAsyncListActiveBreakpoints(::grpc::ClientContext* context, const ::google::devtools::clouddebugger::v2::ListActiveBreakpointsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::devtools::clouddebugger::v2::ListActiveBreakpointsResponse>>(PrepareAsyncListActiveBreakpointsRaw(context, request, cq));
    }
    ::grpc::Status UpdateActiveBreakpoint(::grpc::ClientContext* context, const ::google::devtools::clouddebugger::v2::UpdateActiveBreakpointRequest& request, ::google::devtools::clouddebugger::v2::UpdateActiveBreakpointResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::devtools::clouddebugger::v2::UpdateActiveBreakpointResponse>> AsyncUpdateActiveBreakpoint(::grpc::ClientContext* context, const ::google::devtools::clouddebugger::v2::UpdateActiveBreakpointRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::devtools::clouddebugger::v2::UpdateActiveBreakpointResponse>>(AsyncUpdateActiveBreakpointRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::devtools::clouddebugger::v2::UpdateActiveBreakpointResponse>> PrepareAsyncUpdateActiveBreakpoint(::grpc::ClientContext* context, const ::google::devtools::clouddebugger::v2::UpdateActiveBreakpointRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::devtools::clouddebugger::v2::UpdateActiveBreakpointResponse>>(PrepareAsyncUpdateActiveBreakpointRaw(context, request, cq));
    }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    ::grpc::ClientAsyncResponseReader< ::google::devtools::clouddebugger::v2::RegisterDebuggeeResponse>* AsyncRegisterDebuggeeRaw(::grpc::ClientContext* context, const ::google::devtools::clouddebugger::v2::RegisterDebuggeeRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::devtools::clouddebugger::v2::RegisterDebuggeeResponse>* PrepareAsyncRegisterDebuggeeRaw(::grpc::ClientContext* context, const ::google::devtools::clouddebugger::v2::RegisterDebuggeeRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::devtools::clouddebugger::v2::ListActiveBreakpointsResponse>* AsyncListActiveBreakpointsRaw(::grpc::ClientContext* context, const ::google::devtools::clouddebugger::v2::ListActiveBreakpointsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::devtools::clouddebugger::v2::ListActiveBreakpointsResponse>* PrepareAsyncListActiveBreakpointsRaw(::grpc::ClientContext* context, const ::google::devtools::clouddebugger::v2::ListActiveBreakpointsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::devtools::clouddebugger::v2::UpdateActiveBreakpointResponse>* AsyncUpdateActiveBreakpointRaw(::grpc::ClientContext* context, const ::google::devtools::clouddebugger::v2::UpdateActiveBreakpointRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::devtools::clouddebugger::v2::UpdateActiveBreakpointResponse>* PrepareAsyncUpdateActiveBreakpointRaw(::grpc::ClientContext* context, const ::google::devtools::clouddebugger::v2::UpdateActiveBreakpointRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_RegisterDebuggee_;
    const ::grpc::internal::RpcMethod rpcmethod_ListActiveBreakpoints_;
    const ::grpc::internal::RpcMethod rpcmethod_UpdateActiveBreakpoint_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Registers the debuggee with the controller service.
    //
    // All agents attached to the same application must call this method with
    // exactly the same request content to get back the same stable `debuggee_id`.
    // Agents should call this method again whenever `google.rpc.Code.NOT_FOUND`
    // is returned from any controller method.
    //
    // This protocol allows the controller service to disable debuggees, recover
    // from data loss, or change the `debuggee_id` format. Agents must handle
    // `debuggee_id` value changing upon re-registration.
    virtual ::grpc::Status RegisterDebuggee(::grpc::ServerContext* context, const ::google::devtools::clouddebugger::v2::RegisterDebuggeeRequest* request, ::google::devtools::clouddebugger::v2::RegisterDebuggeeResponse* response);
    // Returns the list of all active breakpoints for the debuggee.
    //
    // The breakpoint specification (`location`, `condition`, and `expressions`
    // fields) is semantically immutable, although the field values may
    // change. For example, an agent may update the location line number
    // to reflect the actual line where the breakpoint was set, but this
    // doesn't change the breakpoint semantics.
    //
    // This means that an agent does not need to check if a breakpoint has changed
    // when it encounters the same breakpoint on a successive call.
    // Moreover, an agent should remember the breakpoints that are completed
    // until the controller removes them from the active list to avoid
    // setting those breakpoints again.
    virtual ::grpc::Status ListActiveBreakpoints(::grpc::ServerContext* context, const ::google::devtools::clouddebugger::v2::ListActiveBreakpointsRequest* request, ::google::devtools::clouddebugger::v2::ListActiveBreakpointsResponse* response);
    // Updates the breakpoint state or mutable fields.
    // The entire Breakpoint message must be sent back to the controller service.
    //
    // Updates to active breakpoint fields are only allowed if the new value
    // does not change the breakpoint specification. Updates to the `location`,
    // `condition` and `expressions` fields should not alter the breakpoint
    // semantics. These may only make changes such as canonicalizing a value
    // or snapping the location to the correct line of code.
    virtual ::grpc::Status UpdateActiveBreakpoint(::grpc::ServerContext* context, const ::google::devtools::clouddebugger::v2::UpdateActiveBreakpointRequest* request, ::google::devtools::clouddebugger::v2::UpdateActiveBreakpointResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_RegisterDebuggee : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_RegisterDebuggee() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_RegisterDebuggee() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RegisterDebuggee(::grpc::ServerContext* context, const ::google::devtools::clouddebugger::v2::RegisterDebuggeeRequest* request, ::google::devtools::clouddebugger::v2::RegisterDebuggeeResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRegisterDebuggee(::grpc::ServerContext* context, ::google::devtools::clouddebugger::v2::RegisterDebuggeeRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::devtools::clouddebugger::v2::RegisterDebuggeeResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ListActiveBreakpoints : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_ListActiveBreakpoints() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_ListActiveBreakpoints() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListActiveBreakpoints(::grpc::ServerContext* context, const ::google::devtools::clouddebugger::v2::ListActiveBreakpointsRequest* request, ::google::devtools::clouddebugger::v2::ListActiveBreakpointsResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListActiveBreakpoints(::grpc::ServerContext* context, ::google::devtools::clouddebugger::v2::ListActiveBreakpointsRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::devtools::clouddebugger::v2::ListActiveBreakpointsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_UpdateActiveBreakpoint : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_UpdateActiveBreakpoint() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_UpdateActiveBreakpoint() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateActiveBreakpoint(::grpc::ServerContext* context, const ::google::devtools::clouddebugger::v2::UpdateActiveBreakpointRequest* request, ::google::devtools::clouddebugger::v2::UpdateActiveBreakpointResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateActiveBreakpoint(::grpc::ServerContext* context, ::google::devtools::clouddebugger::v2::UpdateActiveBreakpointRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::devtools::clouddebugger::v2::UpdateActiveBreakpointResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_RegisterDebuggee<WithAsyncMethod_ListActiveBreakpoints<WithAsyncMethod_UpdateActiveBreakpoint<Service > > > AsyncService;
  template <class BaseClass>
  class WithGenericMethod_RegisterDebuggee : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_RegisterDebuggee() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_RegisterDebuggee() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RegisterDebuggee(::grpc::ServerContext* context, const ::google::devtools::clouddebugger::v2::RegisterDebuggeeRequest* request, ::google::devtools::clouddebugger::v2::RegisterDebuggeeResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ListActiveBreakpoints : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_ListActiveBreakpoints() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_ListActiveBreakpoints() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListActiveBreakpoints(::grpc::ServerContext* context, const ::google::devtools::clouddebugger::v2::ListActiveBreakpointsRequest* request, ::google::devtools::clouddebugger::v2::ListActiveBreakpointsResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_UpdateActiveBreakpoint : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_UpdateActiveBreakpoint() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_UpdateActiveBreakpoint() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateActiveBreakpoint(::grpc::ServerContext* context, const ::google::devtools::clouddebugger::v2::UpdateActiveBreakpointRequest* request, ::google::devtools::clouddebugger::v2::UpdateActiveBreakpointResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_RegisterDebuggee : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_RegisterDebuggee() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler< ::google::devtools::clouddebugger::v2::RegisterDebuggeeRequest, ::google::devtools::clouddebugger::v2::RegisterDebuggeeResponse>(std::bind(&WithStreamedUnaryMethod_RegisterDebuggee<BaseClass>::StreamedRegisterDebuggee, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_RegisterDebuggee() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status RegisterDebuggee(::grpc::ServerContext* context, const ::google::devtools::clouddebugger::v2::RegisterDebuggeeRequest* request, ::google::devtools::clouddebugger::v2::RegisterDebuggeeResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedRegisterDebuggee(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::devtools::clouddebugger::v2::RegisterDebuggeeRequest,::google::devtools::clouddebugger::v2::RegisterDebuggeeResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ListActiveBreakpoints : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_ListActiveBreakpoints() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler< ::google::devtools::clouddebugger::v2::ListActiveBreakpointsRequest, ::google::devtools::clouddebugger::v2::ListActiveBreakpointsResponse>(std::bind(&WithStreamedUnaryMethod_ListActiveBreakpoints<BaseClass>::StreamedListActiveBreakpoints, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_ListActiveBreakpoints() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ListActiveBreakpoints(::grpc::ServerContext* context, const ::google::devtools::clouddebugger::v2::ListActiveBreakpointsRequest* request, ::google::devtools::clouddebugger::v2::ListActiveBreakpointsResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedListActiveBreakpoints(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::devtools::clouddebugger::v2::ListActiveBreakpointsRequest,::google::devtools::clouddebugger::v2::ListActiveBreakpointsResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_UpdateActiveBreakpoint : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_UpdateActiveBreakpoint() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler< ::google::devtools::clouddebugger::v2::UpdateActiveBreakpointRequest, ::google::devtools::clouddebugger::v2::UpdateActiveBreakpointResponse>(std::bind(&WithStreamedUnaryMethod_UpdateActiveBreakpoint<BaseClass>::StreamedUpdateActiveBreakpoint, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_UpdateActiveBreakpoint() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status UpdateActiveBreakpoint(::grpc::ServerContext* context, const ::google::devtools::clouddebugger::v2::UpdateActiveBreakpointRequest* request, ::google::devtools::clouddebugger::v2::UpdateActiveBreakpointResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedUpdateActiveBreakpoint(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::devtools::clouddebugger::v2::UpdateActiveBreakpointRequest,::google::devtools::clouddebugger::v2::UpdateActiveBreakpointResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_RegisterDebuggee<WithStreamedUnaryMethod_ListActiveBreakpoints<WithStreamedUnaryMethod_UpdateActiveBreakpoint<Service > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_RegisterDebuggee<WithStreamedUnaryMethod_ListActiveBreakpoints<WithStreamedUnaryMethod_UpdateActiveBreakpoint<Service > > > StreamedService;
};

}  // namespace v2
}  // namespace clouddebugger
}  // namespace devtools
}  // namespace google


#endif  // GRPC_google_2fdevtools_2fclouddebugger_2fv2_2fcontroller_2eproto__INCLUDED
