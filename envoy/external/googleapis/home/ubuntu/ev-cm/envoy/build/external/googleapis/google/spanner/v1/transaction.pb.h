// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/spanner/v1/transaction.proto

#ifndef PROTOBUF_google_2fspanner_2fv1_2ftransaction_2eproto__INCLUDED
#define PROTOBUF_google_2fspanner_2fv1_2ftransaction_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "google/api/annotations.pb.h"
#include <google/protobuf/duration.pb.h>
#include <google/protobuf/timestamp.pb.h>
// @@protoc_insertion_point(includes)

namespace protobuf_google_2fspanner_2fv1_2ftransaction_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[5];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsTransactionOptions_ReadWriteImpl();
void InitDefaultsTransactionOptions_ReadWrite();
void InitDefaultsTransactionOptions_ReadOnlyImpl();
void InitDefaultsTransactionOptions_ReadOnly();
void InitDefaultsTransactionOptionsImpl();
void InitDefaultsTransactionOptions();
void InitDefaultsTransactionImpl();
void InitDefaultsTransaction();
void InitDefaultsTransactionSelectorImpl();
void InitDefaultsTransactionSelector();
inline void InitDefaults() {
  InitDefaultsTransactionOptions_ReadWrite();
  InitDefaultsTransactionOptions_ReadOnly();
  InitDefaultsTransactionOptions();
  InitDefaultsTransaction();
  InitDefaultsTransactionSelector();
}
}  // namespace protobuf_google_2fspanner_2fv1_2ftransaction_2eproto
namespace google {
namespace spanner {
namespace v1 {
class Transaction;
class TransactionDefaultTypeInternal;
extern TransactionDefaultTypeInternal _Transaction_default_instance_;
class TransactionOptions;
class TransactionOptionsDefaultTypeInternal;
extern TransactionOptionsDefaultTypeInternal _TransactionOptions_default_instance_;
class TransactionOptions_ReadOnly;
class TransactionOptions_ReadOnlyDefaultTypeInternal;
extern TransactionOptions_ReadOnlyDefaultTypeInternal _TransactionOptions_ReadOnly_default_instance_;
class TransactionOptions_ReadWrite;
class TransactionOptions_ReadWriteDefaultTypeInternal;
extern TransactionOptions_ReadWriteDefaultTypeInternal _TransactionOptions_ReadWrite_default_instance_;
class TransactionSelector;
class TransactionSelectorDefaultTypeInternal;
extern TransactionSelectorDefaultTypeInternal _TransactionSelector_default_instance_;
}  // namespace v1
}  // namespace spanner
}  // namespace google
namespace google {
namespace spanner {
namespace v1 {

// ===================================================================

class TransactionOptions_ReadWrite : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.spanner.v1.TransactionOptions.ReadWrite) */ {
 public:
  TransactionOptions_ReadWrite();
  virtual ~TransactionOptions_ReadWrite();

  TransactionOptions_ReadWrite(const TransactionOptions_ReadWrite& from);

  inline TransactionOptions_ReadWrite& operator=(const TransactionOptions_ReadWrite& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TransactionOptions_ReadWrite(TransactionOptions_ReadWrite&& from) noexcept
    : TransactionOptions_ReadWrite() {
    *this = ::std::move(from);
  }

  inline TransactionOptions_ReadWrite& operator=(TransactionOptions_ReadWrite&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const TransactionOptions_ReadWrite& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TransactionOptions_ReadWrite* internal_default_instance() {
    return reinterpret_cast<const TransactionOptions_ReadWrite*>(
               &_TransactionOptions_ReadWrite_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(TransactionOptions_ReadWrite* other);
  friend void swap(TransactionOptions_ReadWrite& a, TransactionOptions_ReadWrite& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TransactionOptions_ReadWrite* New() const PROTOBUF_FINAL { return New(NULL); }

  TransactionOptions_ReadWrite* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const TransactionOptions_ReadWrite& from);
  void MergeFrom(const TransactionOptions_ReadWrite& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TransactionOptions_ReadWrite* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:google.spanner.v1.TransactionOptions.ReadWrite)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fspanner_2fv1_2ftransaction_2eproto::TableStruct;
  friend void ::protobuf_google_2fspanner_2fv1_2ftransaction_2eproto::InitDefaultsTransactionOptions_ReadWriteImpl();
};
// -------------------------------------------------------------------

class TransactionOptions_ReadOnly : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.spanner.v1.TransactionOptions.ReadOnly) */ {
 public:
  TransactionOptions_ReadOnly();
  virtual ~TransactionOptions_ReadOnly();

  TransactionOptions_ReadOnly(const TransactionOptions_ReadOnly& from);

  inline TransactionOptions_ReadOnly& operator=(const TransactionOptions_ReadOnly& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TransactionOptions_ReadOnly(TransactionOptions_ReadOnly&& from) noexcept
    : TransactionOptions_ReadOnly() {
    *this = ::std::move(from);
  }

  inline TransactionOptions_ReadOnly& operator=(TransactionOptions_ReadOnly&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const TransactionOptions_ReadOnly& default_instance();

  enum TimestampBoundCase {
    kStrong = 1,
    kMinReadTimestamp = 2,
    kMaxStaleness = 3,
    kReadTimestamp = 4,
    kExactStaleness = 5,
    TIMESTAMP_BOUND_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TransactionOptions_ReadOnly* internal_default_instance() {
    return reinterpret_cast<const TransactionOptions_ReadOnly*>(
               &_TransactionOptions_ReadOnly_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(TransactionOptions_ReadOnly* other);
  friend void swap(TransactionOptions_ReadOnly& a, TransactionOptions_ReadOnly& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TransactionOptions_ReadOnly* New() const PROTOBUF_FINAL { return New(NULL); }

  TransactionOptions_ReadOnly* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const TransactionOptions_ReadOnly& from);
  void MergeFrom(const TransactionOptions_ReadOnly& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TransactionOptions_ReadOnly* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bool return_read_timestamp = 6;
  void clear_return_read_timestamp();
  static const int kReturnReadTimestampFieldNumber = 6;
  bool return_read_timestamp() const;
  void set_return_read_timestamp(bool value);

  // bool strong = 1;
  private:
  bool has_strong() const;
  public:
  void clear_strong();
  static const int kStrongFieldNumber = 1;
  bool strong() const;
  void set_strong(bool value);

  // .google.protobuf.Timestamp min_read_timestamp = 2;
  bool has_min_read_timestamp() const;
  void clear_min_read_timestamp();
  static const int kMinReadTimestampFieldNumber = 2;
  const ::google::protobuf::Timestamp& min_read_timestamp() const;
  ::google::protobuf::Timestamp* release_min_read_timestamp();
  ::google::protobuf::Timestamp* mutable_min_read_timestamp();
  void set_allocated_min_read_timestamp(::google::protobuf::Timestamp* min_read_timestamp);

  // .google.protobuf.Duration max_staleness = 3;
  bool has_max_staleness() const;
  void clear_max_staleness();
  static const int kMaxStalenessFieldNumber = 3;
  const ::google::protobuf::Duration& max_staleness() const;
  ::google::protobuf::Duration* release_max_staleness();
  ::google::protobuf::Duration* mutable_max_staleness();
  void set_allocated_max_staleness(::google::protobuf::Duration* max_staleness);

  // .google.protobuf.Timestamp read_timestamp = 4;
  bool has_read_timestamp() const;
  void clear_read_timestamp();
  static const int kReadTimestampFieldNumber = 4;
  const ::google::protobuf::Timestamp& read_timestamp() const;
  ::google::protobuf::Timestamp* release_read_timestamp();
  ::google::protobuf::Timestamp* mutable_read_timestamp();
  void set_allocated_read_timestamp(::google::protobuf::Timestamp* read_timestamp);

  // .google.protobuf.Duration exact_staleness = 5;
  bool has_exact_staleness() const;
  void clear_exact_staleness();
  static const int kExactStalenessFieldNumber = 5;
  const ::google::protobuf::Duration& exact_staleness() const;
  ::google::protobuf::Duration* release_exact_staleness();
  ::google::protobuf::Duration* mutable_exact_staleness();
  void set_allocated_exact_staleness(::google::protobuf::Duration* exact_staleness);

  TimestampBoundCase timestamp_bound_case() const;
  // @@protoc_insertion_point(class_scope:google.spanner.v1.TransactionOptions.ReadOnly)
 private:
  void set_has_strong();
  void set_has_min_read_timestamp();
  void set_has_max_staleness();
  void set_has_read_timestamp();
  void set_has_exact_staleness();

  inline bool has_timestamp_bound() const;
  void clear_timestamp_bound();
  inline void clear_has_timestamp_bound();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool return_read_timestamp_;
  union TimestampBoundUnion {
    TimestampBoundUnion() {}
    bool strong_;
    ::google::protobuf::Timestamp* min_read_timestamp_;
    ::google::protobuf::Duration* max_staleness_;
    ::google::protobuf::Timestamp* read_timestamp_;
    ::google::protobuf::Duration* exact_staleness_;
  } timestamp_bound_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::protobuf_google_2fspanner_2fv1_2ftransaction_2eproto::TableStruct;
  friend void ::protobuf_google_2fspanner_2fv1_2ftransaction_2eproto::InitDefaultsTransactionOptions_ReadOnlyImpl();
};
// -------------------------------------------------------------------

class TransactionOptions : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.spanner.v1.TransactionOptions) */ {
 public:
  TransactionOptions();
  virtual ~TransactionOptions();

  TransactionOptions(const TransactionOptions& from);

  inline TransactionOptions& operator=(const TransactionOptions& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TransactionOptions(TransactionOptions&& from) noexcept
    : TransactionOptions() {
    *this = ::std::move(from);
  }

  inline TransactionOptions& operator=(TransactionOptions&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const TransactionOptions& default_instance();

  enum ModeCase {
    kReadWrite = 1,
    kReadOnly = 2,
    MODE_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TransactionOptions* internal_default_instance() {
    return reinterpret_cast<const TransactionOptions*>(
               &_TransactionOptions_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(TransactionOptions* other);
  friend void swap(TransactionOptions& a, TransactionOptions& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TransactionOptions* New() const PROTOBUF_FINAL { return New(NULL); }

  TransactionOptions* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const TransactionOptions& from);
  void MergeFrom(const TransactionOptions& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TransactionOptions* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef TransactionOptions_ReadWrite ReadWrite;
  typedef TransactionOptions_ReadOnly ReadOnly;

  // accessors -------------------------------------------------------

  // .google.spanner.v1.TransactionOptions.ReadWrite read_write = 1;
  bool has_read_write() const;
  void clear_read_write();
  static const int kReadWriteFieldNumber = 1;
  const ::google::spanner::v1::TransactionOptions_ReadWrite& read_write() const;
  ::google::spanner::v1::TransactionOptions_ReadWrite* release_read_write();
  ::google::spanner::v1::TransactionOptions_ReadWrite* mutable_read_write();
  void set_allocated_read_write(::google::spanner::v1::TransactionOptions_ReadWrite* read_write);

  // .google.spanner.v1.TransactionOptions.ReadOnly read_only = 2;
  bool has_read_only() const;
  void clear_read_only();
  static const int kReadOnlyFieldNumber = 2;
  const ::google::spanner::v1::TransactionOptions_ReadOnly& read_only() const;
  ::google::spanner::v1::TransactionOptions_ReadOnly* release_read_only();
  ::google::spanner::v1::TransactionOptions_ReadOnly* mutable_read_only();
  void set_allocated_read_only(::google::spanner::v1::TransactionOptions_ReadOnly* read_only);

  ModeCase mode_case() const;
  // @@protoc_insertion_point(class_scope:google.spanner.v1.TransactionOptions)
 private:
  void set_has_read_write();
  void set_has_read_only();

  inline bool has_mode() const;
  void clear_mode();
  inline void clear_has_mode();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  union ModeUnion {
    ModeUnion() {}
    ::google::spanner::v1::TransactionOptions_ReadWrite* read_write_;
    ::google::spanner::v1::TransactionOptions_ReadOnly* read_only_;
  } mode_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::protobuf_google_2fspanner_2fv1_2ftransaction_2eproto::TableStruct;
  friend void ::protobuf_google_2fspanner_2fv1_2ftransaction_2eproto::InitDefaultsTransactionOptionsImpl();
};
// -------------------------------------------------------------------

class Transaction : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.spanner.v1.Transaction) */ {
 public:
  Transaction();
  virtual ~Transaction();

  Transaction(const Transaction& from);

  inline Transaction& operator=(const Transaction& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Transaction(Transaction&& from) noexcept
    : Transaction() {
    *this = ::std::move(from);
  }

  inline Transaction& operator=(Transaction&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Transaction& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Transaction* internal_default_instance() {
    return reinterpret_cast<const Transaction*>(
               &_Transaction_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(Transaction* other);
  friend void swap(Transaction& a, Transaction& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Transaction* New() const PROTOBUF_FINAL { return New(NULL); }

  Transaction* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Transaction& from);
  void MergeFrom(const Transaction& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Transaction* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  #if LANG_CXX11
  void set_id(::std::string&& value);
  #endif
  void set_id(const char* value);
  void set_id(const void* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // .google.protobuf.Timestamp read_timestamp = 2;
  bool has_read_timestamp() const;
  void clear_read_timestamp();
  static const int kReadTimestampFieldNumber = 2;
  const ::google::protobuf::Timestamp& read_timestamp() const;
  ::google::protobuf::Timestamp* release_read_timestamp();
  ::google::protobuf::Timestamp* mutable_read_timestamp();
  void set_allocated_read_timestamp(::google::protobuf::Timestamp* read_timestamp);

  // @@protoc_insertion_point(class_scope:google.spanner.v1.Transaction)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  ::google::protobuf::Timestamp* read_timestamp_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fspanner_2fv1_2ftransaction_2eproto::TableStruct;
  friend void ::protobuf_google_2fspanner_2fv1_2ftransaction_2eproto::InitDefaultsTransactionImpl();
};
// -------------------------------------------------------------------

class TransactionSelector : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.spanner.v1.TransactionSelector) */ {
 public:
  TransactionSelector();
  virtual ~TransactionSelector();

  TransactionSelector(const TransactionSelector& from);

  inline TransactionSelector& operator=(const TransactionSelector& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TransactionSelector(TransactionSelector&& from) noexcept
    : TransactionSelector() {
    *this = ::std::move(from);
  }

  inline TransactionSelector& operator=(TransactionSelector&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const TransactionSelector& default_instance();

  enum SelectorCase {
    kSingleUse = 1,
    kId = 2,
    kBegin = 3,
    SELECTOR_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TransactionSelector* internal_default_instance() {
    return reinterpret_cast<const TransactionSelector*>(
               &_TransactionSelector_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(TransactionSelector* other);
  friend void swap(TransactionSelector& a, TransactionSelector& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TransactionSelector* New() const PROTOBUF_FINAL { return New(NULL); }

  TransactionSelector* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const TransactionSelector& from);
  void MergeFrom(const TransactionSelector& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TransactionSelector* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.spanner.v1.TransactionOptions single_use = 1;
  bool has_single_use() const;
  void clear_single_use();
  static const int kSingleUseFieldNumber = 1;
  const ::google::spanner::v1::TransactionOptions& single_use() const;
  ::google::spanner::v1::TransactionOptions* release_single_use();
  ::google::spanner::v1::TransactionOptions* mutable_single_use();
  void set_allocated_single_use(::google::spanner::v1::TransactionOptions* single_use);

  // bytes id = 2;
  private:
  bool has_id() const;
  public:
  void clear_id();
  static const int kIdFieldNumber = 2;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  #if LANG_CXX11
  void set_id(::std::string&& value);
  #endif
  void set_id(const char* value);
  void set_id(const void* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // .google.spanner.v1.TransactionOptions begin = 3;
  bool has_begin() const;
  void clear_begin();
  static const int kBeginFieldNumber = 3;
  const ::google::spanner::v1::TransactionOptions& begin() const;
  ::google::spanner::v1::TransactionOptions* release_begin();
  ::google::spanner::v1::TransactionOptions* mutable_begin();
  void set_allocated_begin(::google::spanner::v1::TransactionOptions* begin);

  SelectorCase selector_case() const;
  // @@protoc_insertion_point(class_scope:google.spanner.v1.TransactionSelector)
 private:
  void set_has_single_use();
  void set_has_id();
  void set_has_begin();

  inline bool has_selector() const;
  void clear_selector();
  inline void clear_has_selector();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  union SelectorUnion {
    SelectorUnion() {}
    ::google::spanner::v1::TransactionOptions* single_use_;
    ::google::protobuf::internal::ArenaStringPtr id_;
    ::google::spanner::v1::TransactionOptions* begin_;
  } selector_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::protobuf_google_2fspanner_2fv1_2ftransaction_2eproto::TableStruct;
  friend void ::protobuf_google_2fspanner_2fv1_2ftransaction_2eproto::InitDefaultsTransactionSelectorImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TransactionOptions_ReadWrite

// -------------------------------------------------------------------

// TransactionOptions_ReadOnly

// bool strong = 1;
inline bool TransactionOptions_ReadOnly::has_strong() const {
  return timestamp_bound_case() == kStrong;
}
inline void TransactionOptions_ReadOnly::set_has_strong() {
  _oneof_case_[0] = kStrong;
}
inline void TransactionOptions_ReadOnly::clear_strong() {
  if (has_strong()) {
    timestamp_bound_.strong_ = false;
    clear_has_timestamp_bound();
  }
}
inline bool TransactionOptions_ReadOnly::strong() const {
  // @@protoc_insertion_point(field_get:google.spanner.v1.TransactionOptions.ReadOnly.strong)
  if (has_strong()) {
    return timestamp_bound_.strong_;
  }
  return false;
}
inline void TransactionOptions_ReadOnly::set_strong(bool value) {
  if (!has_strong()) {
    clear_timestamp_bound();
    set_has_strong();
  }
  timestamp_bound_.strong_ = value;
  // @@protoc_insertion_point(field_set:google.spanner.v1.TransactionOptions.ReadOnly.strong)
}

// .google.protobuf.Timestamp min_read_timestamp = 2;
inline bool TransactionOptions_ReadOnly::has_min_read_timestamp() const {
  return timestamp_bound_case() == kMinReadTimestamp;
}
inline void TransactionOptions_ReadOnly::set_has_min_read_timestamp() {
  _oneof_case_[0] = kMinReadTimestamp;
}
inline ::google::protobuf::Timestamp* TransactionOptions_ReadOnly::release_min_read_timestamp() {
  // @@protoc_insertion_point(field_release:google.spanner.v1.TransactionOptions.ReadOnly.min_read_timestamp)
  if (has_min_read_timestamp()) {
    clear_has_timestamp_bound();
      ::google::protobuf::Timestamp* temp = timestamp_bound_.min_read_timestamp_;
    timestamp_bound_.min_read_timestamp_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::protobuf::Timestamp& TransactionOptions_ReadOnly::min_read_timestamp() const {
  // @@protoc_insertion_point(field_get:google.spanner.v1.TransactionOptions.ReadOnly.min_read_timestamp)
  return has_min_read_timestamp()
      ? *timestamp_bound_.min_read_timestamp_
      : *reinterpret_cast< ::google::protobuf::Timestamp*>(&::google::protobuf::_Timestamp_default_instance_);
}
inline ::google::protobuf::Timestamp* TransactionOptions_ReadOnly::mutable_min_read_timestamp() {
  if (!has_min_read_timestamp()) {
    clear_timestamp_bound();
    set_has_min_read_timestamp();
    timestamp_bound_.min_read_timestamp_ = new ::google::protobuf::Timestamp;
  }
  // @@protoc_insertion_point(field_mutable:google.spanner.v1.TransactionOptions.ReadOnly.min_read_timestamp)
  return timestamp_bound_.min_read_timestamp_;
}

// .google.protobuf.Duration max_staleness = 3;
inline bool TransactionOptions_ReadOnly::has_max_staleness() const {
  return timestamp_bound_case() == kMaxStaleness;
}
inline void TransactionOptions_ReadOnly::set_has_max_staleness() {
  _oneof_case_[0] = kMaxStaleness;
}
inline ::google::protobuf::Duration* TransactionOptions_ReadOnly::release_max_staleness() {
  // @@protoc_insertion_point(field_release:google.spanner.v1.TransactionOptions.ReadOnly.max_staleness)
  if (has_max_staleness()) {
    clear_has_timestamp_bound();
      ::google::protobuf::Duration* temp = timestamp_bound_.max_staleness_;
    timestamp_bound_.max_staleness_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::protobuf::Duration& TransactionOptions_ReadOnly::max_staleness() const {
  // @@protoc_insertion_point(field_get:google.spanner.v1.TransactionOptions.ReadOnly.max_staleness)
  return has_max_staleness()
      ? *timestamp_bound_.max_staleness_
      : *reinterpret_cast< ::google::protobuf::Duration*>(&::google::protobuf::_Duration_default_instance_);
}
inline ::google::protobuf::Duration* TransactionOptions_ReadOnly::mutable_max_staleness() {
  if (!has_max_staleness()) {
    clear_timestamp_bound();
    set_has_max_staleness();
    timestamp_bound_.max_staleness_ = new ::google::protobuf::Duration;
  }
  // @@protoc_insertion_point(field_mutable:google.spanner.v1.TransactionOptions.ReadOnly.max_staleness)
  return timestamp_bound_.max_staleness_;
}

// .google.protobuf.Timestamp read_timestamp = 4;
inline bool TransactionOptions_ReadOnly::has_read_timestamp() const {
  return timestamp_bound_case() == kReadTimestamp;
}
inline void TransactionOptions_ReadOnly::set_has_read_timestamp() {
  _oneof_case_[0] = kReadTimestamp;
}
inline ::google::protobuf::Timestamp* TransactionOptions_ReadOnly::release_read_timestamp() {
  // @@protoc_insertion_point(field_release:google.spanner.v1.TransactionOptions.ReadOnly.read_timestamp)
  if (has_read_timestamp()) {
    clear_has_timestamp_bound();
      ::google::protobuf::Timestamp* temp = timestamp_bound_.read_timestamp_;
    timestamp_bound_.read_timestamp_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::protobuf::Timestamp& TransactionOptions_ReadOnly::read_timestamp() const {
  // @@protoc_insertion_point(field_get:google.spanner.v1.TransactionOptions.ReadOnly.read_timestamp)
  return has_read_timestamp()
      ? *timestamp_bound_.read_timestamp_
      : *reinterpret_cast< ::google::protobuf::Timestamp*>(&::google::protobuf::_Timestamp_default_instance_);
}
inline ::google::protobuf::Timestamp* TransactionOptions_ReadOnly::mutable_read_timestamp() {
  if (!has_read_timestamp()) {
    clear_timestamp_bound();
    set_has_read_timestamp();
    timestamp_bound_.read_timestamp_ = new ::google::protobuf::Timestamp;
  }
  // @@protoc_insertion_point(field_mutable:google.spanner.v1.TransactionOptions.ReadOnly.read_timestamp)
  return timestamp_bound_.read_timestamp_;
}

// .google.protobuf.Duration exact_staleness = 5;
inline bool TransactionOptions_ReadOnly::has_exact_staleness() const {
  return timestamp_bound_case() == kExactStaleness;
}
inline void TransactionOptions_ReadOnly::set_has_exact_staleness() {
  _oneof_case_[0] = kExactStaleness;
}
inline ::google::protobuf::Duration* TransactionOptions_ReadOnly::release_exact_staleness() {
  // @@protoc_insertion_point(field_release:google.spanner.v1.TransactionOptions.ReadOnly.exact_staleness)
  if (has_exact_staleness()) {
    clear_has_timestamp_bound();
      ::google::protobuf::Duration* temp = timestamp_bound_.exact_staleness_;
    timestamp_bound_.exact_staleness_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::protobuf::Duration& TransactionOptions_ReadOnly::exact_staleness() const {
  // @@protoc_insertion_point(field_get:google.spanner.v1.TransactionOptions.ReadOnly.exact_staleness)
  return has_exact_staleness()
      ? *timestamp_bound_.exact_staleness_
      : *reinterpret_cast< ::google::protobuf::Duration*>(&::google::protobuf::_Duration_default_instance_);
}
inline ::google::protobuf::Duration* TransactionOptions_ReadOnly::mutable_exact_staleness() {
  if (!has_exact_staleness()) {
    clear_timestamp_bound();
    set_has_exact_staleness();
    timestamp_bound_.exact_staleness_ = new ::google::protobuf::Duration;
  }
  // @@protoc_insertion_point(field_mutable:google.spanner.v1.TransactionOptions.ReadOnly.exact_staleness)
  return timestamp_bound_.exact_staleness_;
}

// bool return_read_timestamp = 6;
inline void TransactionOptions_ReadOnly::clear_return_read_timestamp() {
  return_read_timestamp_ = false;
}
inline bool TransactionOptions_ReadOnly::return_read_timestamp() const {
  // @@protoc_insertion_point(field_get:google.spanner.v1.TransactionOptions.ReadOnly.return_read_timestamp)
  return return_read_timestamp_;
}
inline void TransactionOptions_ReadOnly::set_return_read_timestamp(bool value) {
  
  return_read_timestamp_ = value;
  // @@protoc_insertion_point(field_set:google.spanner.v1.TransactionOptions.ReadOnly.return_read_timestamp)
}

inline bool TransactionOptions_ReadOnly::has_timestamp_bound() const {
  return timestamp_bound_case() != TIMESTAMP_BOUND_NOT_SET;
}
inline void TransactionOptions_ReadOnly::clear_has_timestamp_bound() {
  _oneof_case_[0] = TIMESTAMP_BOUND_NOT_SET;
}
inline TransactionOptions_ReadOnly::TimestampBoundCase TransactionOptions_ReadOnly::timestamp_bound_case() const {
  return TransactionOptions_ReadOnly::TimestampBoundCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// TransactionOptions

// .google.spanner.v1.TransactionOptions.ReadWrite read_write = 1;
inline bool TransactionOptions::has_read_write() const {
  return mode_case() == kReadWrite;
}
inline void TransactionOptions::set_has_read_write() {
  _oneof_case_[0] = kReadWrite;
}
inline void TransactionOptions::clear_read_write() {
  if (has_read_write()) {
    delete mode_.read_write_;
    clear_has_mode();
  }
}
inline ::google::spanner::v1::TransactionOptions_ReadWrite* TransactionOptions::release_read_write() {
  // @@protoc_insertion_point(field_release:google.spanner.v1.TransactionOptions.read_write)
  if (has_read_write()) {
    clear_has_mode();
      ::google::spanner::v1::TransactionOptions_ReadWrite* temp = mode_.read_write_;
    mode_.read_write_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::spanner::v1::TransactionOptions_ReadWrite& TransactionOptions::read_write() const {
  // @@protoc_insertion_point(field_get:google.spanner.v1.TransactionOptions.read_write)
  return has_read_write()
      ? *mode_.read_write_
      : *reinterpret_cast< ::google::spanner::v1::TransactionOptions_ReadWrite*>(&::google::spanner::v1::_TransactionOptions_ReadWrite_default_instance_);
}
inline ::google::spanner::v1::TransactionOptions_ReadWrite* TransactionOptions::mutable_read_write() {
  if (!has_read_write()) {
    clear_mode();
    set_has_read_write();
    mode_.read_write_ = new ::google::spanner::v1::TransactionOptions_ReadWrite;
  }
  // @@protoc_insertion_point(field_mutable:google.spanner.v1.TransactionOptions.read_write)
  return mode_.read_write_;
}

// .google.spanner.v1.TransactionOptions.ReadOnly read_only = 2;
inline bool TransactionOptions::has_read_only() const {
  return mode_case() == kReadOnly;
}
inline void TransactionOptions::set_has_read_only() {
  _oneof_case_[0] = kReadOnly;
}
inline void TransactionOptions::clear_read_only() {
  if (has_read_only()) {
    delete mode_.read_only_;
    clear_has_mode();
  }
}
inline ::google::spanner::v1::TransactionOptions_ReadOnly* TransactionOptions::release_read_only() {
  // @@protoc_insertion_point(field_release:google.spanner.v1.TransactionOptions.read_only)
  if (has_read_only()) {
    clear_has_mode();
      ::google::spanner::v1::TransactionOptions_ReadOnly* temp = mode_.read_only_;
    mode_.read_only_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::spanner::v1::TransactionOptions_ReadOnly& TransactionOptions::read_only() const {
  // @@protoc_insertion_point(field_get:google.spanner.v1.TransactionOptions.read_only)
  return has_read_only()
      ? *mode_.read_only_
      : *reinterpret_cast< ::google::spanner::v1::TransactionOptions_ReadOnly*>(&::google::spanner::v1::_TransactionOptions_ReadOnly_default_instance_);
}
inline ::google::spanner::v1::TransactionOptions_ReadOnly* TransactionOptions::mutable_read_only() {
  if (!has_read_only()) {
    clear_mode();
    set_has_read_only();
    mode_.read_only_ = new ::google::spanner::v1::TransactionOptions_ReadOnly;
  }
  // @@protoc_insertion_point(field_mutable:google.spanner.v1.TransactionOptions.read_only)
  return mode_.read_only_;
}

inline bool TransactionOptions::has_mode() const {
  return mode_case() != MODE_NOT_SET;
}
inline void TransactionOptions::clear_has_mode() {
  _oneof_case_[0] = MODE_NOT_SET;
}
inline TransactionOptions::ModeCase TransactionOptions::mode_case() const {
  return TransactionOptions::ModeCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// Transaction

// bytes id = 1;
inline void Transaction::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Transaction::id() const {
  // @@protoc_insertion_point(field_get:google.spanner.v1.Transaction.id)
  return id_.GetNoArena();
}
inline void Transaction::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.spanner.v1.Transaction.id)
}
#if LANG_CXX11
inline void Transaction::set_id(::std::string&& value) {
  
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.spanner.v1.Transaction.id)
}
#endif
inline void Transaction::set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.spanner.v1.Transaction.id)
}
inline void Transaction::set_id(const void* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.spanner.v1.Transaction.id)
}
inline ::std::string* Transaction::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:google.spanner.v1.Transaction.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Transaction::release_id() {
  // @@protoc_insertion_point(field_release:google.spanner.v1.Transaction.id)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Transaction::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:google.spanner.v1.Transaction.id)
}

// .google.protobuf.Timestamp read_timestamp = 2;
inline bool Transaction::has_read_timestamp() const {
  return this != internal_default_instance() && read_timestamp_ != NULL;
}
inline const ::google::protobuf::Timestamp& Transaction::read_timestamp() const {
  const ::google::protobuf::Timestamp* p = read_timestamp_;
  // @@protoc_insertion_point(field_get:google.spanner.v1.Transaction.read_timestamp)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::Timestamp*>(
      &::google::protobuf::_Timestamp_default_instance_);
}
inline ::google::protobuf::Timestamp* Transaction::release_read_timestamp() {
  // @@protoc_insertion_point(field_release:google.spanner.v1.Transaction.read_timestamp)
  
  ::google::protobuf::Timestamp* temp = read_timestamp_;
  read_timestamp_ = NULL;
  return temp;
}
inline ::google::protobuf::Timestamp* Transaction::mutable_read_timestamp() {
  
  if (read_timestamp_ == NULL) {
    read_timestamp_ = new ::google::protobuf::Timestamp;
  }
  // @@protoc_insertion_point(field_mutable:google.spanner.v1.Transaction.read_timestamp)
  return read_timestamp_;
}
inline void Transaction::set_allocated_read_timestamp(::google::protobuf::Timestamp* read_timestamp) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(read_timestamp_);
  }
  if (read_timestamp) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast< ::google::protobuf::MessageLite*>(read_timestamp)->GetArena();
    if (message_arena != submessage_arena) {
      read_timestamp = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, read_timestamp, submessage_arena);
    }
    
  } else {
    
  }
  read_timestamp_ = read_timestamp;
  // @@protoc_insertion_point(field_set_allocated:google.spanner.v1.Transaction.read_timestamp)
}

// -------------------------------------------------------------------

// TransactionSelector

// .google.spanner.v1.TransactionOptions single_use = 1;
inline bool TransactionSelector::has_single_use() const {
  return selector_case() == kSingleUse;
}
inline void TransactionSelector::set_has_single_use() {
  _oneof_case_[0] = kSingleUse;
}
inline void TransactionSelector::clear_single_use() {
  if (has_single_use()) {
    delete selector_.single_use_;
    clear_has_selector();
  }
}
inline ::google::spanner::v1::TransactionOptions* TransactionSelector::release_single_use() {
  // @@protoc_insertion_point(field_release:google.spanner.v1.TransactionSelector.single_use)
  if (has_single_use()) {
    clear_has_selector();
      ::google::spanner::v1::TransactionOptions* temp = selector_.single_use_;
    selector_.single_use_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::spanner::v1::TransactionOptions& TransactionSelector::single_use() const {
  // @@protoc_insertion_point(field_get:google.spanner.v1.TransactionSelector.single_use)
  return has_single_use()
      ? *selector_.single_use_
      : *reinterpret_cast< ::google::spanner::v1::TransactionOptions*>(&::google::spanner::v1::_TransactionOptions_default_instance_);
}
inline ::google::spanner::v1::TransactionOptions* TransactionSelector::mutable_single_use() {
  if (!has_single_use()) {
    clear_selector();
    set_has_single_use();
    selector_.single_use_ = new ::google::spanner::v1::TransactionOptions;
  }
  // @@protoc_insertion_point(field_mutable:google.spanner.v1.TransactionSelector.single_use)
  return selector_.single_use_;
}

// bytes id = 2;
inline bool TransactionSelector::has_id() const {
  return selector_case() == kId;
}
inline void TransactionSelector::set_has_id() {
  _oneof_case_[0] = kId;
}
inline void TransactionSelector::clear_id() {
  if (has_id()) {
    selector_.id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_selector();
  }
}
inline const ::std::string& TransactionSelector::id() const {
  // @@protoc_insertion_point(field_get:google.spanner.v1.TransactionSelector.id)
  if (has_id()) {
    return selector_.id_.GetNoArena();
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
inline void TransactionSelector::set_id(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:google.spanner.v1.TransactionSelector.id)
  if (!has_id()) {
    clear_selector();
    set_has_id();
    selector_.id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  selector_.id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.spanner.v1.TransactionSelector.id)
}
#if LANG_CXX11
inline void TransactionSelector::set_id(::std::string&& value) {
  // @@protoc_insertion_point(field_set:google.spanner.v1.TransactionSelector.id)
  if (!has_id()) {
    clear_selector();
    set_has_id();
    selector_.id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  selector_.id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.spanner.v1.TransactionSelector.id)
}
#endif
inline void TransactionSelector::set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  if (!has_id()) {
    clear_selector();
    set_has_id();
    selector_.id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  selector_.id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.spanner.v1.TransactionSelector.id)
}
inline void TransactionSelector::set_id(const void* value, size_t size) {
  if (!has_id()) {
    clear_selector();
    set_has_id();
    selector_.id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  selector_.id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.spanner.v1.TransactionSelector.id)
}
inline ::std::string* TransactionSelector::mutable_id() {
  if (!has_id()) {
    clear_selector();
    set_has_id();
    selector_.id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:google.spanner.v1.TransactionSelector.id)
  return selector_.id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TransactionSelector::release_id() {
  // @@protoc_insertion_point(field_release:google.spanner.v1.TransactionSelector.id)
  if (has_id()) {
    clear_has_selector();
    return selector_.id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
inline void TransactionSelector::set_allocated_id(::std::string* id) {
  if (!has_id()) {
    selector_.id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_selector();
  if (id != NULL) {
    set_has_id();
    selector_.id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        id);
  }
  // @@protoc_insertion_point(field_set_allocated:google.spanner.v1.TransactionSelector.id)
}

// .google.spanner.v1.TransactionOptions begin = 3;
inline bool TransactionSelector::has_begin() const {
  return selector_case() == kBegin;
}
inline void TransactionSelector::set_has_begin() {
  _oneof_case_[0] = kBegin;
}
inline void TransactionSelector::clear_begin() {
  if (has_begin()) {
    delete selector_.begin_;
    clear_has_selector();
  }
}
inline ::google::spanner::v1::TransactionOptions* TransactionSelector::release_begin() {
  // @@protoc_insertion_point(field_release:google.spanner.v1.TransactionSelector.begin)
  if (has_begin()) {
    clear_has_selector();
      ::google::spanner::v1::TransactionOptions* temp = selector_.begin_;
    selector_.begin_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::spanner::v1::TransactionOptions& TransactionSelector::begin() const {
  // @@protoc_insertion_point(field_get:google.spanner.v1.TransactionSelector.begin)
  return has_begin()
      ? *selector_.begin_
      : *reinterpret_cast< ::google::spanner::v1::TransactionOptions*>(&::google::spanner::v1::_TransactionOptions_default_instance_);
}
inline ::google::spanner::v1::TransactionOptions* TransactionSelector::mutable_begin() {
  if (!has_begin()) {
    clear_selector();
    set_has_begin();
    selector_.begin_ = new ::google::spanner::v1::TransactionOptions;
  }
  // @@protoc_insertion_point(field_mutable:google.spanner.v1.TransactionSelector.begin)
  return selector_.begin_;
}

inline bool TransactionSelector::has_selector() const {
  return selector_case() != SELECTOR_NOT_SET;
}
inline void TransactionSelector::clear_has_selector() {
  _oneof_case_[0] = SELECTOR_NOT_SET;
}
inline TransactionSelector::SelectorCase TransactionSelector::selector_case() const {
  return TransactionSelector::SelectorCase(_oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace spanner
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_google_2fspanner_2fv1_2ftransaction_2eproto__INCLUDED
