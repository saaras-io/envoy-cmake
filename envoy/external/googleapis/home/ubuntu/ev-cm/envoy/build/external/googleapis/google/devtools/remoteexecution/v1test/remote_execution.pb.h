// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/devtools/remoteexecution/v1test/remote_execution.proto

#ifndef PROTOBUF_google_2fdevtools_2fremoteexecution_2fv1test_2fremote_5fexecution_2eproto__INCLUDED
#define PROTOBUF_google_2fdevtools_2fremoteexecution_2fv1test_2fremote_5fexecution_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "google/api/annotations.pb.h"
#include "google/longrunning/operations.pb.h"
#include <google/protobuf/duration.pb.h>
#include "google/rpc/status.pb.h"
// @@protoc_insertion_point(includes)

namespace protobuf_google_2fdevtools_2fremoteexecution_2fv1test_2fremote_5fexecution_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[30];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsActionImpl();
void InitDefaultsAction();
void InitDefaultsCommand_EnvironmentVariableImpl();
void InitDefaultsCommand_EnvironmentVariable();
void InitDefaultsCommandImpl();
void InitDefaultsCommand();
void InitDefaultsPlatform_PropertyImpl();
void InitDefaultsPlatform_Property();
void InitDefaultsPlatformImpl();
void InitDefaultsPlatform();
void InitDefaultsDirectoryImpl();
void InitDefaultsDirectory();
void InitDefaultsFileNodeImpl();
void InitDefaultsFileNode();
void InitDefaultsDirectoryNodeImpl();
void InitDefaultsDirectoryNode();
void InitDefaultsDigestImpl();
void InitDefaultsDigest();
void InitDefaultsActionResultImpl();
void InitDefaultsActionResult();
void InitDefaultsOutputFileImpl();
void InitDefaultsOutputFile();
void InitDefaultsTreeImpl();
void InitDefaultsTree();
void InitDefaultsOutputDirectoryImpl();
void InitDefaultsOutputDirectory();
void InitDefaultsExecuteRequestImpl();
void InitDefaultsExecuteRequest();
void InitDefaultsLogFileImpl();
void InitDefaultsLogFile();
void InitDefaultsExecuteResponse_ServerLogsEntry_DoNotUseImpl();
void InitDefaultsExecuteResponse_ServerLogsEntry_DoNotUse();
void InitDefaultsExecuteResponseImpl();
void InitDefaultsExecuteResponse();
void InitDefaultsExecuteOperationMetadataImpl();
void InitDefaultsExecuteOperationMetadata();
void InitDefaultsGetActionResultRequestImpl();
void InitDefaultsGetActionResultRequest();
void InitDefaultsUpdateActionResultRequestImpl();
void InitDefaultsUpdateActionResultRequest();
void InitDefaultsFindMissingBlobsRequestImpl();
void InitDefaultsFindMissingBlobsRequest();
void InitDefaultsFindMissingBlobsResponseImpl();
void InitDefaultsFindMissingBlobsResponse();
void InitDefaultsUpdateBlobRequestImpl();
void InitDefaultsUpdateBlobRequest();
void InitDefaultsBatchUpdateBlobsRequestImpl();
void InitDefaultsBatchUpdateBlobsRequest();
void InitDefaultsBatchUpdateBlobsResponse_ResponseImpl();
void InitDefaultsBatchUpdateBlobsResponse_Response();
void InitDefaultsBatchUpdateBlobsResponseImpl();
void InitDefaultsBatchUpdateBlobsResponse();
void InitDefaultsGetTreeRequestImpl();
void InitDefaultsGetTreeRequest();
void InitDefaultsGetTreeResponseImpl();
void InitDefaultsGetTreeResponse();
void InitDefaultsToolDetailsImpl();
void InitDefaultsToolDetails();
void InitDefaultsRequestMetadataImpl();
void InitDefaultsRequestMetadata();
inline void InitDefaults() {
  InitDefaultsAction();
  InitDefaultsCommand_EnvironmentVariable();
  InitDefaultsCommand();
  InitDefaultsPlatform_Property();
  InitDefaultsPlatform();
  InitDefaultsDirectory();
  InitDefaultsFileNode();
  InitDefaultsDirectoryNode();
  InitDefaultsDigest();
  InitDefaultsActionResult();
  InitDefaultsOutputFile();
  InitDefaultsTree();
  InitDefaultsOutputDirectory();
  InitDefaultsExecuteRequest();
  InitDefaultsLogFile();
  InitDefaultsExecuteResponse_ServerLogsEntry_DoNotUse();
  InitDefaultsExecuteResponse();
  InitDefaultsExecuteOperationMetadata();
  InitDefaultsGetActionResultRequest();
  InitDefaultsUpdateActionResultRequest();
  InitDefaultsFindMissingBlobsRequest();
  InitDefaultsFindMissingBlobsResponse();
  InitDefaultsUpdateBlobRequest();
  InitDefaultsBatchUpdateBlobsRequest();
  InitDefaultsBatchUpdateBlobsResponse_Response();
  InitDefaultsBatchUpdateBlobsResponse();
  InitDefaultsGetTreeRequest();
  InitDefaultsGetTreeResponse();
  InitDefaultsToolDetails();
  InitDefaultsRequestMetadata();
}
}  // namespace protobuf_google_2fdevtools_2fremoteexecution_2fv1test_2fremote_5fexecution_2eproto
namespace google {
namespace devtools {
namespace remoteexecution {
namespace v1test {
class Action;
class ActionDefaultTypeInternal;
extern ActionDefaultTypeInternal _Action_default_instance_;
class ActionResult;
class ActionResultDefaultTypeInternal;
extern ActionResultDefaultTypeInternal _ActionResult_default_instance_;
class BatchUpdateBlobsRequest;
class BatchUpdateBlobsRequestDefaultTypeInternal;
extern BatchUpdateBlobsRequestDefaultTypeInternal _BatchUpdateBlobsRequest_default_instance_;
class BatchUpdateBlobsResponse;
class BatchUpdateBlobsResponseDefaultTypeInternal;
extern BatchUpdateBlobsResponseDefaultTypeInternal _BatchUpdateBlobsResponse_default_instance_;
class BatchUpdateBlobsResponse_Response;
class BatchUpdateBlobsResponse_ResponseDefaultTypeInternal;
extern BatchUpdateBlobsResponse_ResponseDefaultTypeInternal _BatchUpdateBlobsResponse_Response_default_instance_;
class Command;
class CommandDefaultTypeInternal;
extern CommandDefaultTypeInternal _Command_default_instance_;
class Command_EnvironmentVariable;
class Command_EnvironmentVariableDefaultTypeInternal;
extern Command_EnvironmentVariableDefaultTypeInternal _Command_EnvironmentVariable_default_instance_;
class Digest;
class DigestDefaultTypeInternal;
extern DigestDefaultTypeInternal _Digest_default_instance_;
class Directory;
class DirectoryDefaultTypeInternal;
extern DirectoryDefaultTypeInternal _Directory_default_instance_;
class DirectoryNode;
class DirectoryNodeDefaultTypeInternal;
extern DirectoryNodeDefaultTypeInternal _DirectoryNode_default_instance_;
class ExecuteOperationMetadata;
class ExecuteOperationMetadataDefaultTypeInternal;
extern ExecuteOperationMetadataDefaultTypeInternal _ExecuteOperationMetadata_default_instance_;
class ExecuteRequest;
class ExecuteRequestDefaultTypeInternal;
extern ExecuteRequestDefaultTypeInternal _ExecuteRequest_default_instance_;
class ExecuteResponse;
class ExecuteResponseDefaultTypeInternal;
extern ExecuteResponseDefaultTypeInternal _ExecuteResponse_default_instance_;
class ExecuteResponse_ServerLogsEntry_DoNotUse;
class ExecuteResponse_ServerLogsEntry_DoNotUseDefaultTypeInternal;
extern ExecuteResponse_ServerLogsEntry_DoNotUseDefaultTypeInternal _ExecuteResponse_ServerLogsEntry_DoNotUse_default_instance_;
class FileNode;
class FileNodeDefaultTypeInternal;
extern FileNodeDefaultTypeInternal _FileNode_default_instance_;
class FindMissingBlobsRequest;
class FindMissingBlobsRequestDefaultTypeInternal;
extern FindMissingBlobsRequestDefaultTypeInternal _FindMissingBlobsRequest_default_instance_;
class FindMissingBlobsResponse;
class FindMissingBlobsResponseDefaultTypeInternal;
extern FindMissingBlobsResponseDefaultTypeInternal _FindMissingBlobsResponse_default_instance_;
class GetActionResultRequest;
class GetActionResultRequestDefaultTypeInternal;
extern GetActionResultRequestDefaultTypeInternal _GetActionResultRequest_default_instance_;
class GetTreeRequest;
class GetTreeRequestDefaultTypeInternal;
extern GetTreeRequestDefaultTypeInternal _GetTreeRequest_default_instance_;
class GetTreeResponse;
class GetTreeResponseDefaultTypeInternal;
extern GetTreeResponseDefaultTypeInternal _GetTreeResponse_default_instance_;
class LogFile;
class LogFileDefaultTypeInternal;
extern LogFileDefaultTypeInternal _LogFile_default_instance_;
class OutputDirectory;
class OutputDirectoryDefaultTypeInternal;
extern OutputDirectoryDefaultTypeInternal _OutputDirectory_default_instance_;
class OutputFile;
class OutputFileDefaultTypeInternal;
extern OutputFileDefaultTypeInternal _OutputFile_default_instance_;
class Platform;
class PlatformDefaultTypeInternal;
extern PlatformDefaultTypeInternal _Platform_default_instance_;
class Platform_Property;
class Platform_PropertyDefaultTypeInternal;
extern Platform_PropertyDefaultTypeInternal _Platform_Property_default_instance_;
class RequestMetadata;
class RequestMetadataDefaultTypeInternal;
extern RequestMetadataDefaultTypeInternal _RequestMetadata_default_instance_;
class ToolDetails;
class ToolDetailsDefaultTypeInternal;
extern ToolDetailsDefaultTypeInternal _ToolDetails_default_instance_;
class Tree;
class TreeDefaultTypeInternal;
extern TreeDefaultTypeInternal _Tree_default_instance_;
class UpdateActionResultRequest;
class UpdateActionResultRequestDefaultTypeInternal;
extern UpdateActionResultRequestDefaultTypeInternal _UpdateActionResultRequest_default_instance_;
class UpdateBlobRequest;
class UpdateBlobRequestDefaultTypeInternal;
extern UpdateBlobRequestDefaultTypeInternal _UpdateBlobRequest_default_instance_;
}  // namespace v1test
}  // namespace remoteexecution
}  // namespace devtools
}  // namespace google
namespace google {
namespace devtools {
namespace remoteexecution {
namespace v1test {

enum ExecuteOperationMetadata_Stage {
  ExecuteOperationMetadata_Stage_UNKNOWN = 0,
  ExecuteOperationMetadata_Stage_CACHE_CHECK = 1,
  ExecuteOperationMetadata_Stage_QUEUED = 2,
  ExecuteOperationMetadata_Stage_EXECUTING = 3,
  ExecuteOperationMetadata_Stage_COMPLETED = 4,
  ExecuteOperationMetadata_Stage_ExecuteOperationMetadata_Stage_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  ExecuteOperationMetadata_Stage_ExecuteOperationMetadata_Stage_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool ExecuteOperationMetadata_Stage_IsValid(int value);
const ExecuteOperationMetadata_Stage ExecuteOperationMetadata_Stage_Stage_MIN = ExecuteOperationMetadata_Stage_UNKNOWN;
const ExecuteOperationMetadata_Stage ExecuteOperationMetadata_Stage_Stage_MAX = ExecuteOperationMetadata_Stage_COMPLETED;
const int ExecuteOperationMetadata_Stage_Stage_ARRAYSIZE = ExecuteOperationMetadata_Stage_Stage_MAX + 1;

const ::google::protobuf::EnumDescriptor* ExecuteOperationMetadata_Stage_descriptor();
inline const ::std::string& ExecuteOperationMetadata_Stage_Name(ExecuteOperationMetadata_Stage value) {
  return ::google::protobuf::internal::NameOfEnum(
    ExecuteOperationMetadata_Stage_descriptor(), value);
}
inline bool ExecuteOperationMetadata_Stage_Parse(
    const ::std::string& name, ExecuteOperationMetadata_Stage* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ExecuteOperationMetadata_Stage>(
    ExecuteOperationMetadata_Stage_descriptor(), name, value);
}
// ===================================================================

class Action : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.devtools.remoteexecution.v1test.Action) */ {
 public:
  Action();
  virtual ~Action();

  Action(const Action& from);

  inline Action& operator=(const Action& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Action(Action&& from) noexcept
    : Action() {
    *this = ::std::move(from);
  }

  inline Action& operator=(Action&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Action& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Action* internal_default_instance() {
    return reinterpret_cast<const Action*>(
               &_Action_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(Action* other);
  friend void swap(Action& a, Action& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Action* New() const PROTOBUF_FINAL { return New(NULL); }

  Action* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Action& from);
  void MergeFrom(const Action& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Action* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string output_files = 3;
  int output_files_size() const;
  void clear_output_files();
  static const int kOutputFilesFieldNumber = 3;
  const ::std::string& output_files(int index) const;
  ::std::string* mutable_output_files(int index);
  void set_output_files(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_output_files(int index, ::std::string&& value);
  #endif
  void set_output_files(int index, const char* value);
  void set_output_files(int index, const char* value, size_t size);
  ::std::string* add_output_files();
  void add_output_files(const ::std::string& value);
  #if LANG_CXX11
  void add_output_files(::std::string&& value);
  #endif
  void add_output_files(const char* value);
  void add_output_files(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& output_files() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_output_files();

  // repeated string output_directories = 4;
  int output_directories_size() const;
  void clear_output_directories();
  static const int kOutputDirectoriesFieldNumber = 4;
  const ::std::string& output_directories(int index) const;
  ::std::string* mutable_output_directories(int index);
  void set_output_directories(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_output_directories(int index, ::std::string&& value);
  #endif
  void set_output_directories(int index, const char* value);
  void set_output_directories(int index, const char* value, size_t size);
  ::std::string* add_output_directories();
  void add_output_directories(const ::std::string& value);
  #if LANG_CXX11
  void add_output_directories(::std::string&& value);
  #endif
  void add_output_directories(const char* value);
  void add_output_directories(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& output_directories() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_output_directories();

  // .google.devtools.remoteexecution.v1test.Digest command_digest = 1;
  bool has_command_digest() const;
  void clear_command_digest();
  static const int kCommandDigestFieldNumber = 1;
  const ::google::devtools::remoteexecution::v1test::Digest& command_digest() const;
  ::google::devtools::remoteexecution::v1test::Digest* release_command_digest();
  ::google::devtools::remoteexecution::v1test::Digest* mutable_command_digest();
  void set_allocated_command_digest(::google::devtools::remoteexecution::v1test::Digest* command_digest);

  // .google.devtools.remoteexecution.v1test.Digest input_root_digest = 2;
  bool has_input_root_digest() const;
  void clear_input_root_digest();
  static const int kInputRootDigestFieldNumber = 2;
  const ::google::devtools::remoteexecution::v1test::Digest& input_root_digest() const;
  ::google::devtools::remoteexecution::v1test::Digest* release_input_root_digest();
  ::google::devtools::remoteexecution::v1test::Digest* mutable_input_root_digest();
  void set_allocated_input_root_digest(::google::devtools::remoteexecution::v1test::Digest* input_root_digest);

  // .google.devtools.remoteexecution.v1test.Platform platform = 5;
  bool has_platform() const;
  void clear_platform();
  static const int kPlatformFieldNumber = 5;
  const ::google::devtools::remoteexecution::v1test::Platform& platform() const;
  ::google::devtools::remoteexecution::v1test::Platform* release_platform();
  ::google::devtools::remoteexecution::v1test::Platform* mutable_platform();
  void set_allocated_platform(::google::devtools::remoteexecution::v1test::Platform* platform);

  // .google.protobuf.Duration timeout = 6;
  bool has_timeout() const;
  void clear_timeout();
  static const int kTimeoutFieldNumber = 6;
  const ::google::protobuf::Duration& timeout() const;
  ::google::protobuf::Duration* release_timeout();
  ::google::protobuf::Duration* mutable_timeout();
  void set_allocated_timeout(::google::protobuf::Duration* timeout);

  // bool do_not_cache = 7;
  void clear_do_not_cache();
  static const int kDoNotCacheFieldNumber = 7;
  bool do_not_cache() const;
  void set_do_not_cache(bool value);

  // @@protoc_insertion_point(class_scope:google.devtools.remoteexecution.v1test.Action)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> output_files_;
  ::google::protobuf::RepeatedPtrField< ::std::string> output_directories_;
  ::google::devtools::remoteexecution::v1test::Digest* command_digest_;
  ::google::devtools::remoteexecution::v1test::Digest* input_root_digest_;
  ::google::devtools::remoteexecution::v1test::Platform* platform_;
  ::google::protobuf::Duration* timeout_;
  bool do_not_cache_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fdevtools_2fremoteexecution_2fv1test_2fremote_5fexecution_2eproto::TableStruct;
  friend void ::protobuf_google_2fdevtools_2fremoteexecution_2fv1test_2fremote_5fexecution_2eproto::InitDefaultsActionImpl();
};
// -------------------------------------------------------------------

class Command_EnvironmentVariable : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.devtools.remoteexecution.v1test.Command.EnvironmentVariable) */ {
 public:
  Command_EnvironmentVariable();
  virtual ~Command_EnvironmentVariable();

  Command_EnvironmentVariable(const Command_EnvironmentVariable& from);

  inline Command_EnvironmentVariable& operator=(const Command_EnvironmentVariable& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Command_EnvironmentVariable(Command_EnvironmentVariable&& from) noexcept
    : Command_EnvironmentVariable() {
    *this = ::std::move(from);
  }

  inline Command_EnvironmentVariable& operator=(Command_EnvironmentVariable&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Command_EnvironmentVariable& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Command_EnvironmentVariable* internal_default_instance() {
    return reinterpret_cast<const Command_EnvironmentVariable*>(
               &_Command_EnvironmentVariable_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(Command_EnvironmentVariable* other);
  friend void swap(Command_EnvironmentVariable& a, Command_EnvironmentVariable& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Command_EnvironmentVariable* New() const PROTOBUF_FINAL { return New(NULL); }

  Command_EnvironmentVariable* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Command_EnvironmentVariable& from);
  void MergeFrom(const Command_EnvironmentVariable& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Command_EnvironmentVariable* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // string value = 2;
  void clear_value();
  static const int kValueFieldNumber = 2;
  const ::std::string& value() const;
  void set_value(const ::std::string& value);
  #if LANG_CXX11
  void set_value(::std::string&& value);
  #endif
  void set_value(const char* value);
  void set_value(const char* value, size_t size);
  ::std::string* mutable_value();
  ::std::string* release_value();
  void set_allocated_value(::std::string* value);

  // @@protoc_insertion_point(class_scope:google.devtools.remoteexecution.v1test.Command.EnvironmentVariable)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr value_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fdevtools_2fremoteexecution_2fv1test_2fremote_5fexecution_2eproto::TableStruct;
  friend void ::protobuf_google_2fdevtools_2fremoteexecution_2fv1test_2fremote_5fexecution_2eproto::InitDefaultsCommand_EnvironmentVariableImpl();
};
// -------------------------------------------------------------------

class Command : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.devtools.remoteexecution.v1test.Command) */ {
 public:
  Command();
  virtual ~Command();

  Command(const Command& from);

  inline Command& operator=(const Command& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Command(Command&& from) noexcept
    : Command() {
    *this = ::std::move(from);
  }

  inline Command& operator=(Command&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Command& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Command* internal_default_instance() {
    return reinterpret_cast<const Command*>(
               &_Command_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(Command* other);
  friend void swap(Command& a, Command& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Command* New() const PROTOBUF_FINAL { return New(NULL); }

  Command* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Command& from);
  void MergeFrom(const Command& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Command* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef Command_EnvironmentVariable EnvironmentVariable;

  // accessors -------------------------------------------------------

  // repeated string arguments = 1;
  int arguments_size() const;
  void clear_arguments();
  static const int kArgumentsFieldNumber = 1;
  const ::std::string& arguments(int index) const;
  ::std::string* mutable_arguments(int index);
  void set_arguments(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_arguments(int index, ::std::string&& value);
  #endif
  void set_arguments(int index, const char* value);
  void set_arguments(int index, const char* value, size_t size);
  ::std::string* add_arguments();
  void add_arguments(const ::std::string& value);
  #if LANG_CXX11
  void add_arguments(::std::string&& value);
  #endif
  void add_arguments(const char* value);
  void add_arguments(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& arguments() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_arguments();

  // repeated .google.devtools.remoteexecution.v1test.Command.EnvironmentVariable environment_variables = 2;
  int environment_variables_size() const;
  void clear_environment_variables();
  static const int kEnvironmentVariablesFieldNumber = 2;
  const ::google::devtools::remoteexecution::v1test::Command_EnvironmentVariable& environment_variables(int index) const;
  ::google::devtools::remoteexecution::v1test::Command_EnvironmentVariable* mutable_environment_variables(int index);
  ::google::devtools::remoteexecution::v1test::Command_EnvironmentVariable* add_environment_variables();
  ::google::protobuf::RepeatedPtrField< ::google::devtools::remoteexecution::v1test::Command_EnvironmentVariable >*
      mutable_environment_variables();
  const ::google::protobuf::RepeatedPtrField< ::google::devtools::remoteexecution::v1test::Command_EnvironmentVariable >&
      environment_variables() const;

  // @@protoc_insertion_point(class_scope:google.devtools.remoteexecution.v1test.Command)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> arguments_;
  ::google::protobuf::RepeatedPtrField< ::google::devtools::remoteexecution::v1test::Command_EnvironmentVariable > environment_variables_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fdevtools_2fremoteexecution_2fv1test_2fremote_5fexecution_2eproto::TableStruct;
  friend void ::protobuf_google_2fdevtools_2fremoteexecution_2fv1test_2fremote_5fexecution_2eproto::InitDefaultsCommandImpl();
};
// -------------------------------------------------------------------

class Platform_Property : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.devtools.remoteexecution.v1test.Platform.Property) */ {
 public:
  Platform_Property();
  virtual ~Platform_Property();

  Platform_Property(const Platform_Property& from);

  inline Platform_Property& operator=(const Platform_Property& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Platform_Property(Platform_Property&& from) noexcept
    : Platform_Property() {
    *this = ::std::move(from);
  }

  inline Platform_Property& operator=(Platform_Property&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Platform_Property& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Platform_Property* internal_default_instance() {
    return reinterpret_cast<const Platform_Property*>(
               &_Platform_Property_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(Platform_Property* other);
  friend void swap(Platform_Property& a, Platform_Property& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Platform_Property* New() const PROTOBUF_FINAL { return New(NULL); }

  Platform_Property* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Platform_Property& from);
  void MergeFrom(const Platform_Property& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Platform_Property* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // string value = 2;
  void clear_value();
  static const int kValueFieldNumber = 2;
  const ::std::string& value() const;
  void set_value(const ::std::string& value);
  #if LANG_CXX11
  void set_value(::std::string&& value);
  #endif
  void set_value(const char* value);
  void set_value(const char* value, size_t size);
  ::std::string* mutable_value();
  ::std::string* release_value();
  void set_allocated_value(::std::string* value);

  // @@protoc_insertion_point(class_scope:google.devtools.remoteexecution.v1test.Platform.Property)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr value_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fdevtools_2fremoteexecution_2fv1test_2fremote_5fexecution_2eproto::TableStruct;
  friend void ::protobuf_google_2fdevtools_2fremoteexecution_2fv1test_2fremote_5fexecution_2eproto::InitDefaultsPlatform_PropertyImpl();
};
// -------------------------------------------------------------------

class Platform : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.devtools.remoteexecution.v1test.Platform) */ {
 public:
  Platform();
  virtual ~Platform();

  Platform(const Platform& from);

  inline Platform& operator=(const Platform& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Platform(Platform&& from) noexcept
    : Platform() {
    *this = ::std::move(from);
  }

  inline Platform& operator=(Platform&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Platform& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Platform* internal_default_instance() {
    return reinterpret_cast<const Platform*>(
               &_Platform_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(Platform* other);
  friend void swap(Platform& a, Platform& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Platform* New() const PROTOBUF_FINAL { return New(NULL); }

  Platform* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Platform& from);
  void MergeFrom(const Platform& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Platform* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef Platform_Property Property;

  // accessors -------------------------------------------------------

  // repeated .google.devtools.remoteexecution.v1test.Platform.Property properties = 1;
  int properties_size() const;
  void clear_properties();
  static const int kPropertiesFieldNumber = 1;
  const ::google::devtools::remoteexecution::v1test::Platform_Property& properties(int index) const;
  ::google::devtools::remoteexecution::v1test::Platform_Property* mutable_properties(int index);
  ::google::devtools::remoteexecution::v1test::Platform_Property* add_properties();
  ::google::protobuf::RepeatedPtrField< ::google::devtools::remoteexecution::v1test::Platform_Property >*
      mutable_properties();
  const ::google::protobuf::RepeatedPtrField< ::google::devtools::remoteexecution::v1test::Platform_Property >&
      properties() const;

  // @@protoc_insertion_point(class_scope:google.devtools.remoteexecution.v1test.Platform)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::google::devtools::remoteexecution::v1test::Platform_Property > properties_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fdevtools_2fremoteexecution_2fv1test_2fremote_5fexecution_2eproto::TableStruct;
  friend void ::protobuf_google_2fdevtools_2fremoteexecution_2fv1test_2fremote_5fexecution_2eproto::InitDefaultsPlatformImpl();
};
// -------------------------------------------------------------------

class Directory : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.devtools.remoteexecution.v1test.Directory) */ {
 public:
  Directory();
  virtual ~Directory();

  Directory(const Directory& from);

  inline Directory& operator=(const Directory& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Directory(Directory&& from) noexcept
    : Directory() {
    *this = ::std::move(from);
  }

  inline Directory& operator=(Directory&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Directory& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Directory* internal_default_instance() {
    return reinterpret_cast<const Directory*>(
               &_Directory_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    5;

  void Swap(Directory* other);
  friend void swap(Directory& a, Directory& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Directory* New() const PROTOBUF_FINAL { return New(NULL); }

  Directory* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Directory& from);
  void MergeFrom(const Directory& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Directory* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .google.devtools.remoteexecution.v1test.FileNode files = 1;
  int files_size() const;
  void clear_files();
  static const int kFilesFieldNumber = 1;
  const ::google::devtools::remoteexecution::v1test::FileNode& files(int index) const;
  ::google::devtools::remoteexecution::v1test::FileNode* mutable_files(int index);
  ::google::devtools::remoteexecution::v1test::FileNode* add_files();
  ::google::protobuf::RepeatedPtrField< ::google::devtools::remoteexecution::v1test::FileNode >*
      mutable_files();
  const ::google::protobuf::RepeatedPtrField< ::google::devtools::remoteexecution::v1test::FileNode >&
      files() const;

  // repeated .google.devtools.remoteexecution.v1test.DirectoryNode directories = 2;
  int directories_size() const;
  void clear_directories();
  static const int kDirectoriesFieldNumber = 2;
  const ::google::devtools::remoteexecution::v1test::DirectoryNode& directories(int index) const;
  ::google::devtools::remoteexecution::v1test::DirectoryNode* mutable_directories(int index);
  ::google::devtools::remoteexecution::v1test::DirectoryNode* add_directories();
  ::google::protobuf::RepeatedPtrField< ::google::devtools::remoteexecution::v1test::DirectoryNode >*
      mutable_directories();
  const ::google::protobuf::RepeatedPtrField< ::google::devtools::remoteexecution::v1test::DirectoryNode >&
      directories() const;

  // @@protoc_insertion_point(class_scope:google.devtools.remoteexecution.v1test.Directory)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::google::devtools::remoteexecution::v1test::FileNode > files_;
  ::google::protobuf::RepeatedPtrField< ::google::devtools::remoteexecution::v1test::DirectoryNode > directories_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fdevtools_2fremoteexecution_2fv1test_2fremote_5fexecution_2eproto::TableStruct;
  friend void ::protobuf_google_2fdevtools_2fremoteexecution_2fv1test_2fremote_5fexecution_2eproto::InitDefaultsDirectoryImpl();
};
// -------------------------------------------------------------------

class FileNode : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.devtools.remoteexecution.v1test.FileNode) */ {
 public:
  FileNode();
  virtual ~FileNode();

  FileNode(const FileNode& from);

  inline FileNode& operator=(const FileNode& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FileNode(FileNode&& from) noexcept
    : FileNode() {
    *this = ::std::move(from);
  }

  inline FileNode& operator=(FileNode&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const FileNode& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FileNode* internal_default_instance() {
    return reinterpret_cast<const FileNode*>(
               &_FileNode_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    6;

  void Swap(FileNode* other);
  friend void swap(FileNode& a, FileNode& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FileNode* New() const PROTOBUF_FINAL { return New(NULL); }

  FileNode* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const FileNode& from);
  void MergeFrom(const FileNode& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(FileNode* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // .google.devtools.remoteexecution.v1test.Digest digest = 2;
  bool has_digest() const;
  void clear_digest();
  static const int kDigestFieldNumber = 2;
  const ::google::devtools::remoteexecution::v1test::Digest& digest() const;
  ::google::devtools::remoteexecution::v1test::Digest* release_digest();
  ::google::devtools::remoteexecution::v1test::Digest* mutable_digest();
  void set_allocated_digest(::google::devtools::remoteexecution::v1test::Digest* digest);

  // bool is_executable = 4;
  void clear_is_executable();
  static const int kIsExecutableFieldNumber = 4;
  bool is_executable() const;
  void set_is_executable(bool value);

  // @@protoc_insertion_point(class_scope:google.devtools.remoteexecution.v1test.FileNode)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::devtools::remoteexecution::v1test::Digest* digest_;
  bool is_executable_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fdevtools_2fremoteexecution_2fv1test_2fremote_5fexecution_2eproto::TableStruct;
  friend void ::protobuf_google_2fdevtools_2fremoteexecution_2fv1test_2fremote_5fexecution_2eproto::InitDefaultsFileNodeImpl();
};
// -------------------------------------------------------------------

class DirectoryNode : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.devtools.remoteexecution.v1test.DirectoryNode) */ {
 public:
  DirectoryNode();
  virtual ~DirectoryNode();

  DirectoryNode(const DirectoryNode& from);

  inline DirectoryNode& operator=(const DirectoryNode& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DirectoryNode(DirectoryNode&& from) noexcept
    : DirectoryNode() {
    *this = ::std::move(from);
  }

  inline DirectoryNode& operator=(DirectoryNode&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DirectoryNode& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DirectoryNode* internal_default_instance() {
    return reinterpret_cast<const DirectoryNode*>(
               &_DirectoryNode_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    7;

  void Swap(DirectoryNode* other);
  friend void swap(DirectoryNode& a, DirectoryNode& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DirectoryNode* New() const PROTOBUF_FINAL { return New(NULL); }

  DirectoryNode* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DirectoryNode& from);
  void MergeFrom(const DirectoryNode& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DirectoryNode* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // .google.devtools.remoteexecution.v1test.Digest digest = 2;
  bool has_digest() const;
  void clear_digest();
  static const int kDigestFieldNumber = 2;
  const ::google::devtools::remoteexecution::v1test::Digest& digest() const;
  ::google::devtools::remoteexecution::v1test::Digest* release_digest();
  ::google::devtools::remoteexecution::v1test::Digest* mutable_digest();
  void set_allocated_digest(::google::devtools::remoteexecution::v1test::Digest* digest);

  // @@protoc_insertion_point(class_scope:google.devtools.remoteexecution.v1test.DirectoryNode)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::devtools::remoteexecution::v1test::Digest* digest_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fdevtools_2fremoteexecution_2fv1test_2fremote_5fexecution_2eproto::TableStruct;
  friend void ::protobuf_google_2fdevtools_2fremoteexecution_2fv1test_2fremote_5fexecution_2eproto::InitDefaultsDirectoryNodeImpl();
};
// -------------------------------------------------------------------

class Digest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.devtools.remoteexecution.v1test.Digest) */ {
 public:
  Digest();
  virtual ~Digest();

  Digest(const Digest& from);

  inline Digest& operator=(const Digest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Digest(Digest&& from) noexcept
    : Digest() {
    *this = ::std::move(from);
  }

  inline Digest& operator=(Digest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Digest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Digest* internal_default_instance() {
    return reinterpret_cast<const Digest*>(
               &_Digest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    8;

  void Swap(Digest* other);
  friend void swap(Digest& a, Digest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Digest* New() const PROTOBUF_FINAL { return New(NULL); }

  Digest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Digest& from);
  void MergeFrom(const Digest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Digest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string hash = 1;
  void clear_hash();
  static const int kHashFieldNumber = 1;
  const ::std::string& hash() const;
  void set_hash(const ::std::string& value);
  #if LANG_CXX11
  void set_hash(::std::string&& value);
  #endif
  void set_hash(const char* value);
  void set_hash(const char* value, size_t size);
  ::std::string* mutable_hash();
  ::std::string* release_hash();
  void set_allocated_hash(::std::string* hash);

  // int64 size_bytes = 2;
  void clear_size_bytes();
  static const int kSizeBytesFieldNumber = 2;
  ::google::protobuf::int64 size_bytes() const;
  void set_size_bytes(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:google.devtools.remoteexecution.v1test.Digest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr hash_;
  ::google::protobuf::int64 size_bytes_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fdevtools_2fremoteexecution_2fv1test_2fremote_5fexecution_2eproto::TableStruct;
  friend void ::protobuf_google_2fdevtools_2fremoteexecution_2fv1test_2fremote_5fexecution_2eproto::InitDefaultsDigestImpl();
};
// -------------------------------------------------------------------

class ActionResult : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.devtools.remoteexecution.v1test.ActionResult) */ {
 public:
  ActionResult();
  virtual ~ActionResult();

  ActionResult(const ActionResult& from);

  inline ActionResult& operator=(const ActionResult& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ActionResult(ActionResult&& from) noexcept
    : ActionResult() {
    *this = ::std::move(from);
  }

  inline ActionResult& operator=(ActionResult&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ActionResult& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ActionResult* internal_default_instance() {
    return reinterpret_cast<const ActionResult*>(
               &_ActionResult_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    9;

  void Swap(ActionResult* other);
  friend void swap(ActionResult& a, ActionResult& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ActionResult* New() const PROTOBUF_FINAL { return New(NULL); }

  ActionResult* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ActionResult& from);
  void MergeFrom(const ActionResult& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ActionResult* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .google.devtools.remoteexecution.v1test.OutputFile output_files = 2;
  int output_files_size() const;
  void clear_output_files();
  static const int kOutputFilesFieldNumber = 2;
  const ::google::devtools::remoteexecution::v1test::OutputFile& output_files(int index) const;
  ::google::devtools::remoteexecution::v1test::OutputFile* mutable_output_files(int index);
  ::google::devtools::remoteexecution::v1test::OutputFile* add_output_files();
  ::google::protobuf::RepeatedPtrField< ::google::devtools::remoteexecution::v1test::OutputFile >*
      mutable_output_files();
  const ::google::protobuf::RepeatedPtrField< ::google::devtools::remoteexecution::v1test::OutputFile >&
      output_files() const;

  // repeated .google.devtools.remoteexecution.v1test.OutputDirectory output_directories = 3;
  int output_directories_size() const;
  void clear_output_directories();
  static const int kOutputDirectoriesFieldNumber = 3;
  const ::google::devtools::remoteexecution::v1test::OutputDirectory& output_directories(int index) const;
  ::google::devtools::remoteexecution::v1test::OutputDirectory* mutable_output_directories(int index);
  ::google::devtools::remoteexecution::v1test::OutputDirectory* add_output_directories();
  ::google::protobuf::RepeatedPtrField< ::google::devtools::remoteexecution::v1test::OutputDirectory >*
      mutable_output_directories();
  const ::google::protobuf::RepeatedPtrField< ::google::devtools::remoteexecution::v1test::OutputDirectory >&
      output_directories() const;

  // bytes stdout_raw = 5;
  void clear_stdout_raw();
  static const int kStdoutRawFieldNumber = 5;
  const ::std::string& stdout_raw() const;
  void set_stdout_raw(const ::std::string& value);
  #if LANG_CXX11
  void set_stdout_raw(::std::string&& value);
  #endif
  void set_stdout_raw(const char* value);
  void set_stdout_raw(const void* value, size_t size);
  ::std::string* mutable_stdout_raw();
  ::std::string* release_stdout_raw();
  void set_allocated_stdout_raw(::std::string* stdout_raw);

  // bytes stderr_raw = 7;
  void clear_stderr_raw();
  static const int kStderrRawFieldNumber = 7;
  const ::std::string& stderr_raw() const;
  void set_stderr_raw(const ::std::string& value);
  #if LANG_CXX11
  void set_stderr_raw(::std::string&& value);
  #endif
  void set_stderr_raw(const char* value);
  void set_stderr_raw(const void* value, size_t size);
  ::std::string* mutable_stderr_raw();
  ::std::string* release_stderr_raw();
  void set_allocated_stderr_raw(::std::string* stderr_raw);

  // .google.devtools.remoteexecution.v1test.Digest stdout_digest = 6;
  bool has_stdout_digest() const;
  void clear_stdout_digest();
  static const int kStdoutDigestFieldNumber = 6;
  const ::google::devtools::remoteexecution::v1test::Digest& stdout_digest() const;
  ::google::devtools::remoteexecution::v1test::Digest* release_stdout_digest();
  ::google::devtools::remoteexecution::v1test::Digest* mutable_stdout_digest();
  void set_allocated_stdout_digest(::google::devtools::remoteexecution::v1test::Digest* stdout_digest);

  // .google.devtools.remoteexecution.v1test.Digest stderr_digest = 8;
  bool has_stderr_digest() const;
  void clear_stderr_digest();
  static const int kStderrDigestFieldNumber = 8;
  const ::google::devtools::remoteexecution::v1test::Digest& stderr_digest() const;
  ::google::devtools::remoteexecution::v1test::Digest* release_stderr_digest();
  ::google::devtools::remoteexecution::v1test::Digest* mutable_stderr_digest();
  void set_allocated_stderr_digest(::google::devtools::remoteexecution::v1test::Digest* stderr_digest);

  // int32 exit_code = 4;
  void clear_exit_code();
  static const int kExitCodeFieldNumber = 4;
  ::google::protobuf::int32 exit_code() const;
  void set_exit_code(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:google.devtools.remoteexecution.v1test.ActionResult)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::google::devtools::remoteexecution::v1test::OutputFile > output_files_;
  ::google::protobuf::RepeatedPtrField< ::google::devtools::remoteexecution::v1test::OutputDirectory > output_directories_;
  ::google::protobuf::internal::ArenaStringPtr stdout_raw_;
  ::google::protobuf::internal::ArenaStringPtr stderr_raw_;
  ::google::devtools::remoteexecution::v1test::Digest* stdout_digest_;
  ::google::devtools::remoteexecution::v1test::Digest* stderr_digest_;
  ::google::protobuf::int32 exit_code_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fdevtools_2fremoteexecution_2fv1test_2fremote_5fexecution_2eproto::TableStruct;
  friend void ::protobuf_google_2fdevtools_2fremoteexecution_2fv1test_2fremote_5fexecution_2eproto::InitDefaultsActionResultImpl();
};
// -------------------------------------------------------------------

class OutputFile : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.devtools.remoteexecution.v1test.OutputFile) */ {
 public:
  OutputFile();
  virtual ~OutputFile();

  OutputFile(const OutputFile& from);

  inline OutputFile& operator=(const OutputFile& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  OutputFile(OutputFile&& from) noexcept
    : OutputFile() {
    *this = ::std::move(from);
  }

  inline OutputFile& operator=(OutputFile&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const OutputFile& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OutputFile* internal_default_instance() {
    return reinterpret_cast<const OutputFile*>(
               &_OutputFile_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    10;

  void Swap(OutputFile* other);
  friend void swap(OutputFile& a, OutputFile& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline OutputFile* New() const PROTOBUF_FINAL { return New(NULL); }

  OutputFile* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const OutputFile& from);
  void MergeFrom(const OutputFile& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(OutputFile* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string path = 1;
  void clear_path();
  static const int kPathFieldNumber = 1;
  const ::std::string& path() const;
  void set_path(const ::std::string& value);
  #if LANG_CXX11
  void set_path(::std::string&& value);
  #endif
  void set_path(const char* value);
  void set_path(const char* value, size_t size);
  ::std::string* mutable_path();
  ::std::string* release_path();
  void set_allocated_path(::std::string* path);

  // bytes content = 3;
  void clear_content();
  static const int kContentFieldNumber = 3;
  const ::std::string& content() const;
  void set_content(const ::std::string& value);
  #if LANG_CXX11
  void set_content(::std::string&& value);
  #endif
  void set_content(const char* value);
  void set_content(const void* value, size_t size);
  ::std::string* mutable_content();
  ::std::string* release_content();
  void set_allocated_content(::std::string* content);

  // .google.devtools.remoteexecution.v1test.Digest digest = 2;
  bool has_digest() const;
  void clear_digest();
  static const int kDigestFieldNumber = 2;
  const ::google::devtools::remoteexecution::v1test::Digest& digest() const;
  ::google::devtools::remoteexecution::v1test::Digest* release_digest();
  ::google::devtools::remoteexecution::v1test::Digest* mutable_digest();
  void set_allocated_digest(::google::devtools::remoteexecution::v1test::Digest* digest);

  // bool is_executable = 4;
  void clear_is_executable();
  static const int kIsExecutableFieldNumber = 4;
  bool is_executable() const;
  void set_is_executable(bool value);

  // @@protoc_insertion_point(class_scope:google.devtools.remoteexecution.v1test.OutputFile)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr path_;
  ::google::protobuf::internal::ArenaStringPtr content_;
  ::google::devtools::remoteexecution::v1test::Digest* digest_;
  bool is_executable_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fdevtools_2fremoteexecution_2fv1test_2fremote_5fexecution_2eproto::TableStruct;
  friend void ::protobuf_google_2fdevtools_2fremoteexecution_2fv1test_2fremote_5fexecution_2eproto::InitDefaultsOutputFileImpl();
};
// -------------------------------------------------------------------

class Tree : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.devtools.remoteexecution.v1test.Tree) */ {
 public:
  Tree();
  virtual ~Tree();

  Tree(const Tree& from);

  inline Tree& operator=(const Tree& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Tree(Tree&& from) noexcept
    : Tree() {
    *this = ::std::move(from);
  }

  inline Tree& operator=(Tree&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Tree& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Tree* internal_default_instance() {
    return reinterpret_cast<const Tree*>(
               &_Tree_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    11;

  void Swap(Tree* other);
  friend void swap(Tree& a, Tree& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Tree* New() const PROTOBUF_FINAL { return New(NULL); }

  Tree* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Tree& from);
  void MergeFrom(const Tree& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Tree* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .google.devtools.remoteexecution.v1test.Directory children = 2;
  int children_size() const;
  void clear_children();
  static const int kChildrenFieldNumber = 2;
  const ::google::devtools::remoteexecution::v1test::Directory& children(int index) const;
  ::google::devtools::remoteexecution::v1test::Directory* mutable_children(int index);
  ::google::devtools::remoteexecution::v1test::Directory* add_children();
  ::google::protobuf::RepeatedPtrField< ::google::devtools::remoteexecution::v1test::Directory >*
      mutable_children();
  const ::google::protobuf::RepeatedPtrField< ::google::devtools::remoteexecution::v1test::Directory >&
      children() const;

  // .google.devtools.remoteexecution.v1test.Directory root = 1;
  bool has_root() const;
  void clear_root();
  static const int kRootFieldNumber = 1;
  const ::google::devtools::remoteexecution::v1test::Directory& root() const;
  ::google::devtools::remoteexecution::v1test::Directory* release_root();
  ::google::devtools::remoteexecution::v1test::Directory* mutable_root();
  void set_allocated_root(::google::devtools::remoteexecution::v1test::Directory* root);

  // @@protoc_insertion_point(class_scope:google.devtools.remoteexecution.v1test.Tree)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::google::devtools::remoteexecution::v1test::Directory > children_;
  ::google::devtools::remoteexecution::v1test::Directory* root_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fdevtools_2fremoteexecution_2fv1test_2fremote_5fexecution_2eproto::TableStruct;
  friend void ::protobuf_google_2fdevtools_2fremoteexecution_2fv1test_2fremote_5fexecution_2eproto::InitDefaultsTreeImpl();
};
// -------------------------------------------------------------------

class OutputDirectory : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.devtools.remoteexecution.v1test.OutputDirectory) */ {
 public:
  OutputDirectory();
  virtual ~OutputDirectory();

  OutputDirectory(const OutputDirectory& from);

  inline OutputDirectory& operator=(const OutputDirectory& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  OutputDirectory(OutputDirectory&& from) noexcept
    : OutputDirectory() {
    *this = ::std::move(from);
  }

  inline OutputDirectory& operator=(OutputDirectory&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const OutputDirectory& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OutputDirectory* internal_default_instance() {
    return reinterpret_cast<const OutputDirectory*>(
               &_OutputDirectory_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    12;

  void Swap(OutputDirectory* other);
  friend void swap(OutputDirectory& a, OutputDirectory& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline OutputDirectory* New() const PROTOBUF_FINAL { return New(NULL); }

  OutputDirectory* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const OutputDirectory& from);
  void MergeFrom(const OutputDirectory& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(OutputDirectory* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string path = 1;
  void clear_path();
  static const int kPathFieldNumber = 1;
  const ::std::string& path() const;
  void set_path(const ::std::string& value);
  #if LANG_CXX11
  void set_path(::std::string&& value);
  #endif
  void set_path(const char* value);
  void set_path(const char* value, size_t size);
  ::std::string* mutable_path();
  ::std::string* release_path();
  void set_allocated_path(::std::string* path);

  // .google.devtools.remoteexecution.v1test.Digest digest = 2;
  bool has_digest() const;
  void clear_digest();
  static const int kDigestFieldNumber = 2;
  const ::google::devtools::remoteexecution::v1test::Digest& digest() const;
  ::google::devtools::remoteexecution::v1test::Digest* release_digest();
  ::google::devtools::remoteexecution::v1test::Digest* mutable_digest();
  void set_allocated_digest(::google::devtools::remoteexecution::v1test::Digest* digest);

  // .google.devtools.remoteexecution.v1test.Digest tree_digest = 3;
  bool has_tree_digest() const;
  void clear_tree_digest();
  static const int kTreeDigestFieldNumber = 3;
  const ::google::devtools::remoteexecution::v1test::Digest& tree_digest() const;
  ::google::devtools::remoteexecution::v1test::Digest* release_tree_digest();
  ::google::devtools::remoteexecution::v1test::Digest* mutable_tree_digest();
  void set_allocated_tree_digest(::google::devtools::remoteexecution::v1test::Digest* tree_digest);

  // @@protoc_insertion_point(class_scope:google.devtools.remoteexecution.v1test.OutputDirectory)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr path_;
  ::google::devtools::remoteexecution::v1test::Digest* digest_;
  ::google::devtools::remoteexecution::v1test::Digest* tree_digest_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fdevtools_2fremoteexecution_2fv1test_2fremote_5fexecution_2eproto::TableStruct;
  friend void ::protobuf_google_2fdevtools_2fremoteexecution_2fv1test_2fremote_5fexecution_2eproto::InitDefaultsOutputDirectoryImpl();
};
// -------------------------------------------------------------------

class ExecuteRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.devtools.remoteexecution.v1test.ExecuteRequest) */ {
 public:
  ExecuteRequest();
  virtual ~ExecuteRequest();

  ExecuteRequest(const ExecuteRequest& from);

  inline ExecuteRequest& operator=(const ExecuteRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ExecuteRequest(ExecuteRequest&& from) noexcept
    : ExecuteRequest() {
    *this = ::std::move(from);
  }

  inline ExecuteRequest& operator=(ExecuteRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ExecuteRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ExecuteRequest* internal_default_instance() {
    return reinterpret_cast<const ExecuteRequest*>(
               &_ExecuteRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    13;

  void Swap(ExecuteRequest* other);
  friend void swap(ExecuteRequest& a, ExecuteRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ExecuteRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  ExecuteRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ExecuteRequest& from);
  void MergeFrom(const ExecuteRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ExecuteRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string instance_name = 1;
  void clear_instance_name();
  static const int kInstanceNameFieldNumber = 1;
  const ::std::string& instance_name() const;
  void set_instance_name(const ::std::string& value);
  #if LANG_CXX11
  void set_instance_name(::std::string&& value);
  #endif
  void set_instance_name(const char* value);
  void set_instance_name(const char* value, size_t size);
  ::std::string* mutable_instance_name();
  ::std::string* release_instance_name();
  void set_allocated_instance_name(::std::string* instance_name);

  // .google.devtools.remoteexecution.v1test.Action action = 2;
  bool has_action() const;
  void clear_action();
  static const int kActionFieldNumber = 2;
  const ::google::devtools::remoteexecution::v1test::Action& action() const;
  ::google::devtools::remoteexecution::v1test::Action* release_action();
  ::google::devtools::remoteexecution::v1test::Action* mutable_action();
  void set_allocated_action(::google::devtools::remoteexecution::v1test::Action* action);

  // bool skip_cache_lookup = 3;
  void clear_skip_cache_lookup();
  static const int kSkipCacheLookupFieldNumber = 3;
  bool skip_cache_lookup() const;
  void set_skip_cache_lookup(bool value);

  // int32 total_input_file_count = 4;
  void clear_total_input_file_count();
  static const int kTotalInputFileCountFieldNumber = 4;
  ::google::protobuf::int32 total_input_file_count() const;
  void set_total_input_file_count(::google::protobuf::int32 value);

  // int64 total_input_file_bytes = 5;
  void clear_total_input_file_bytes();
  static const int kTotalInputFileBytesFieldNumber = 5;
  ::google::protobuf::int64 total_input_file_bytes() const;
  void set_total_input_file_bytes(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:google.devtools.remoteexecution.v1test.ExecuteRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr instance_name_;
  ::google::devtools::remoteexecution::v1test::Action* action_;
  bool skip_cache_lookup_;
  ::google::protobuf::int32 total_input_file_count_;
  ::google::protobuf::int64 total_input_file_bytes_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fdevtools_2fremoteexecution_2fv1test_2fremote_5fexecution_2eproto::TableStruct;
  friend void ::protobuf_google_2fdevtools_2fremoteexecution_2fv1test_2fremote_5fexecution_2eproto::InitDefaultsExecuteRequestImpl();
};
// -------------------------------------------------------------------

class LogFile : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.devtools.remoteexecution.v1test.LogFile) */ {
 public:
  LogFile();
  virtual ~LogFile();

  LogFile(const LogFile& from);

  inline LogFile& operator=(const LogFile& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LogFile(LogFile&& from) noexcept
    : LogFile() {
    *this = ::std::move(from);
  }

  inline LogFile& operator=(LogFile&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const LogFile& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LogFile* internal_default_instance() {
    return reinterpret_cast<const LogFile*>(
               &_LogFile_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    14;

  void Swap(LogFile* other);
  friend void swap(LogFile& a, LogFile& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LogFile* New() const PROTOBUF_FINAL { return New(NULL); }

  LogFile* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const LogFile& from);
  void MergeFrom(const LogFile& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(LogFile* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.devtools.remoteexecution.v1test.Digest digest = 1;
  bool has_digest() const;
  void clear_digest();
  static const int kDigestFieldNumber = 1;
  const ::google::devtools::remoteexecution::v1test::Digest& digest() const;
  ::google::devtools::remoteexecution::v1test::Digest* release_digest();
  ::google::devtools::remoteexecution::v1test::Digest* mutable_digest();
  void set_allocated_digest(::google::devtools::remoteexecution::v1test::Digest* digest);

  // bool human_readable = 2;
  void clear_human_readable();
  static const int kHumanReadableFieldNumber = 2;
  bool human_readable() const;
  void set_human_readable(bool value);

  // @@protoc_insertion_point(class_scope:google.devtools.remoteexecution.v1test.LogFile)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::devtools::remoteexecution::v1test::Digest* digest_;
  bool human_readable_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fdevtools_2fremoteexecution_2fv1test_2fremote_5fexecution_2eproto::TableStruct;
  friend void ::protobuf_google_2fdevtools_2fremoteexecution_2fv1test_2fremote_5fexecution_2eproto::InitDefaultsLogFileImpl();
};
// -------------------------------------------------------------------

class ExecuteResponse_ServerLogsEntry_DoNotUse : public ::google::protobuf::internal::MapEntry<ExecuteResponse_ServerLogsEntry_DoNotUse, 
    ::std::string, ::google::devtools::remoteexecution::v1test::LogFile,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
    0 > {
public:
  typedef ::google::protobuf::internal::MapEntry<ExecuteResponse_ServerLogsEntry_DoNotUse, 
    ::std::string, ::google::devtools::remoteexecution::v1test::LogFile,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
    0 > SuperType;
  ExecuteResponse_ServerLogsEntry_DoNotUse();
  ExecuteResponse_ServerLogsEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const ExecuteResponse_ServerLogsEntry_DoNotUse& other);
  static const ExecuteResponse_ServerLogsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const ExecuteResponse_ServerLogsEntry_DoNotUse*>(&_ExecuteResponse_ServerLogsEntry_DoNotUse_default_instance_); }
  void MergeFrom(const ::google::protobuf::Message& other) PROTOBUF_FINAL;
  ::google::protobuf::Metadata GetMetadata() const;
};

// -------------------------------------------------------------------

class ExecuteResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.devtools.remoteexecution.v1test.ExecuteResponse) */ {
 public:
  ExecuteResponse();
  virtual ~ExecuteResponse();

  ExecuteResponse(const ExecuteResponse& from);

  inline ExecuteResponse& operator=(const ExecuteResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ExecuteResponse(ExecuteResponse&& from) noexcept
    : ExecuteResponse() {
    *this = ::std::move(from);
  }

  inline ExecuteResponse& operator=(ExecuteResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ExecuteResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ExecuteResponse* internal_default_instance() {
    return reinterpret_cast<const ExecuteResponse*>(
               &_ExecuteResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    16;

  void Swap(ExecuteResponse* other);
  friend void swap(ExecuteResponse& a, ExecuteResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ExecuteResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  ExecuteResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ExecuteResponse& from);
  void MergeFrom(const ExecuteResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ExecuteResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // map<string, .google.devtools.remoteexecution.v1test.LogFile> server_logs = 4;
  int server_logs_size() const;
  void clear_server_logs();
  static const int kServerLogsFieldNumber = 4;
  const ::google::protobuf::Map< ::std::string, ::google::devtools::remoteexecution::v1test::LogFile >&
      server_logs() const;
  ::google::protobuf::Map< ::std::string, ::google::devtools::remoteexecution::v1test::LogFile >*
      mutable_server_logs();

  // .google.devtools.remoteexecution.v1test.ActionResult result = 1;
  bool has_result() const;
  void clear_result();
  static const int kResultFieldNumber = 1;
  const ::google::devtools::remoteexecution::v1test::ActionResult& result() const;
  ::google::devtools::remoteexecution::v1test::ActionResult* release_result();
  ::google::devtools::remoteexecution::v1test::ActionResult* mutable_result();
  void set_allocated_result(::google::devtools::remoteexecution::v1test::ActionResult* result);

  // .google.rpc.Status status = 3;
  bool has_status() const;
  void clear_status();
  static const int kStatusFieldNumber = 3;
  const ::google::rpc::Status& status() const;
  ::google::rpc::Status* release_status();
  ::google::rpc::Status* mutable_status();
  void set_allocated_status(::google::rpc::Status* status);

  // bool cached_result = 2;
  void clear_cached_result();
  static const int kCachedResultFieldNumber = 2;
  bool cached_result() const;
  void set_cached_result(bool value);

  // @@protoc_insertion_point(class_scope:google.devtools.remoteexecution.v1test.ExecuteResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::MapField<
      ExecuteResponse_ServerLogsEntry_DoNotUse,
      ::std::string, ::google::devtools::remoteexecution::v1test::LogFile,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 > server_logs_;
  ::google::devtools::remoteexecution::v1test::ActionResult* result_;
  ::google::rpc::Status* status_;
  bool cached_result_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fdevtools_2fremoteexecution_2fv1test_2fremote_5fexecution_2eproto::TableStruct;
  friend void ::protobuf_google_2fdevtools_2fremoteexecution_2fv1test_2fremote_5fexecution_2eproto::InitDefaultsExecuteResponseImpl();
};
// -------------------------------------------------------------------

class ExecuteOperationMetadata : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.devtools.remoteexecution.v1test.ExecuteOperationMetadata) */ {
 public:
  ExecuteOperationMetadata();
  virtual ~ExecuteOperationMetadata();

  ExecuteOperationMetadata(const ExecuteOperationMetadata& from);

  inline ExecuteOperationMetadata& operator=(const ExecuteOperationMetadata& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ExecuteOperationMetadata(ExecuteOperationMetadata&& from) noexcept
    : ExecuteOperationMetadata() {
    *this = ::std::move(from);
  }

  inline ExecuteOperationMetadata& operator=(ExecuteOperationMetadata&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ExecuteOperationMetadata& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ExecuteOperationMetadata* internal_default_instance() {
    return reinterpret_cast<const ExecuteOperationMetadata*>(
               &_ExecuteOperationMetadata_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    17;

  void Swap(ExecuteOperationMetadata* other);
  friend void swap(ExecuteOperationMetadata& a, ExecuteOperationMetadata& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ExecuteOperationMetadata* New() const PROTOBUF_FINAL { return New(NULL); }

  ExecuteOperationMetadata* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ExecuteOperationMetadata& from);
  void MergeFrom(const ExecuteOperationMetadata& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ExecuteOperationMetadata* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef ExecuteOperationMetadata_Stage Stage;
  static const Stage UNKNOWN =
    ExecuteOperationMetadata_Stage_UNKNOWN;
  static const Stage CACHE_CHECK =
    ExecuteOperationMetadata_Stage_CACHE_CHECK;
  static const Stage QUEUED =
    ExecuteOperationMetadata_Stage_QUEUED;
  static const Stage EXECUTING =
    ExecuteOperationMetadata_Stage_EXECUTING;
  static const Stage COMPLETED =
    ExecuteOperationMetadata_Stage_COMPLETED;
  static inline bool Stage_IsValid(int value) {
    return ExecuteOperationMetadata_Stage_IsValid(value);
  }
  static const Stage Stage_MIN =
    ExecuteOperationMetadata_Stage_Stage_MIN;
  static const Stage Stage_MAX =
    ExecuteOperationMetadata_Stage_Stage_MAX;
  static const int Stage_ARRAYSIZE =
    ExecuteOperationMetadata_Stage_Stage_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Stage_descriptor() {
    return ExecuteOperationMetadata_Stage_descriptor();
  }
  static inline const ::std::string& Stage_Name(Stage value) {
    return ExecuteOperationMetadata_Stage_Name(value);
  }
  static inline bool Stage_Parse(const ::std::string& name,
      Stage* value) {
    return ExecuteOperationMetadata_Stage_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // string stdout_stream_name = 3;
  void clear_stdout_stream_name();
  static const int kStdoutStreamNameFieldNumber = 3;
  const ::std::string& stdout_stream_name() const;
  void set_stdout_stream_name(const ::std::string& value);
  #if LANG_CXX11
  void set_stdout_stream_name(::std::string&& value);
  #endif
  void set_stdout_stream_name(const char* value);
  void set_stdout_stream_name(const char* value, size_t size);
  ::std::string* mutable_stdout_stream_name();
  ::std::string* release_stdout_stream_name();
  void set_allocated_stdout_stream_name(::std::string* stdout_stream_name);

  // string stderr_stream_name = 4;
  void clear_stderr_stream_name();
  static const int kStderrStreamNameFieldNumber = 4;
  const ::std::string& stderr_stream_name() const;
  void set_stderr_stream_name(const ::std::string& value);
  #if LANG_CXX11
  void set_stderr_stream_name(::std::string&& value);
  #endif
  void set_stderr_stream_name(const char* value);
  void set_stderr_stream_name(const char* value, size_t size);
  ::std::string* mutable_stderr_stream_name();
  ::std::string* release_stderr_stream_name();
  void set_allocated_stderr_stream_name(::std::string* stderr_stream_name);

  // .google.devtools.remoteexecution.v1test.Digest action_digest = 2;
  bool has_action_digest() const;
  void clear_action_digest();
  static const int kActionDigestFieldNumber = 2;
  const ::google::devtools::remoteexecution::v1test::Digest& action_digest() const;
  ::google::devtools::remoteexecution::v1test::Digest* release_action_digest();
  ::google::devtools::remoteexecution::v1test::Digest* mutable_action_digest();
  void set_allocated_action_digest(::google::devtools::remoteexecution::v1test::Digest* action_digest);

  // .google.devtools.remoteexecution.v1test.ExecuteOperationMetadata.Stage stage = 1;
  void clear_stage();
  static const int kStageFieldNumber = 1;
  ::google::devtools::remoteexecution::v1test::ExecuteOperationMetadata_Stage stage() const;
  void set_stage(::google::devtools::remoteexecution::v1test::ExecuteOperationMetadata_Stage value);

  // @@protoc_insertion_point(class_scope:google.devtools.remoteexecution.v1test.ExecuteOperationMetadata)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr stdout_stream_name_;
  ::google::protobuf::internal::ArenaStringPtr stderr_stream_name_;
  ::google::devtools::remoteexecution::v1test::Digest* action_digest_;
  int stage_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fdevtools_2fremoteexecution_2fv1test_2fremote_5fexecution_2eproto::TableStruct;
  friend void ::protobuf_google_2fdevtools_2fremoteexecution_2fv1test_2fremote_5fexecution_2eproto::InitDefaultsExecuteOperationMetadataImpl();
};
// -------------------------------------------------------------------

class GetActionResultRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.devtools.remoteexecution.v1test.GetActionResultRequest) */ {
 public:
  GetActionResultRequest();
  virtual ~GetActionResultRequest();

  GetActionResultRequest(const GetActionResultRequest& from);

  inline GetActionResultRequest& operator=(const GetActionResultRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetActionResultRequest(GetActionResultRequest&& from) noexcept
    : GetActionResultRequest() {
    *this = ::std::move(from);
  }

  inline GetActionResultRequest& operator=(GetActionResultRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetActionResultRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetActionResultRequest* internal_default_instance() {
    return reinterpret_cast<const GetActionResultRequest*>(
               &_GetActionResultRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    18;

  void Swap(GetActionResultRequest* other);
  friend void swap(GetActionResultRequest& a, GetActionResultRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetActionResultRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  GetActionResultRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GetActionResultRequest& from);
  void MergeFrom(const GetActionResultRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GetActionResultRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string instance_name = 1;
  void clear_instance_name();
  static const int kInstanceNameFieldNumber = 1;
  const ::std::string& instance_name() const;
  void set_instance_name(const ::std::string& value);
  #if LANG_CXX11
  void set_instance_name(::std::string&& value);
  #endif
  void set_instance_name(const char* value);
  void set_instance_name(const char* value, size_t size);
  ::std::string* mutable_instance_name();
  ::std::string* release_instance_name();
  void set_allocated_instance_name(::std::string* instance_name);

  // .google.devtools.remoteexecution.v1test.Digest action_digest = 2;
  bool has_action_digest() const;
  void clear_action_digest();
  static const int kActionDigestFieldNumber = 2;
  const ::google::devtools::remoteexecution::v1test::Digest& action_digest() const;
  ::google::devtools::remoteexecution::v1test::Digest* release_action_digest();
  ::google::devtools::remoteexecution::v1test::Digest* mutable_action_digest();
  void set_allocated_action_digest(::google::devtools::remoteexecution::v1test::Digest* action_digest);

  // @@protoc_insertion_point(class_scope:google.devtools.remoteexecution.v1test.GetActionResultRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr instance_name_;
  ::google::devtools::remoteexecution::v1test::Digest* action_digest_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fdevtools_2fremoteexecution_2fv1test_2fremote_5fexecution_2eproto::TableStruct;
  friend void ::protobuf_google_2fdevtools_2fremoteexecution_2fv1test_2fremote_5fexecution_2eproto::InitDefaultsGetActionResultRequestImpl();
};
// -------------------------------------------------------------------

class UpdateActionResultRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.devtools.remoteexecution.v1test.UpdateActionResultRequest) */ {
 public:
  UpdateActionResultRequest();
  virtual ~UpdateActionResultRequest();

  UpdateActionResultRequest(const UpdateActionResultRequest& from);

  inline UpdateActionResultRequest& operator=(const UpdateActionResultRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UpdateActionResultRequest(UpdateActionResultRequest&& from) noexcept
    : UpdateActionResultRequest() {
    *this = ::std::move(from);
  }

  inline UpdateActionResultRequest& operator=(UpdateActionResultRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const UpdateActionResultRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UpdateActionResultRequest* internal_default_instance() {
    return reinterpret_cast<const UpdateActionResultRequest*>(
               &_UpdateActionResultRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    19;

  void Swap(UpdateActionResultRequest* other);
  friend void swap(UpdateActionResultRequest& a, UpdateActionResultRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UpdateActionResultRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  UpdateActionResultRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const UpdateActionResultRequest& from);
  void MergeFrom(const UpdateActionResultRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(UpdateActionResultRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string instance_name = 1;
  void clear_instance_name();
  static const int kInstanceNameFieldNumber = 1;
  const ::std::string& instance_name() const;
  void set_instance_name(const ::std::string& value);
  #if LANG_CXX11
  void set_instance_name(::std::string&& value);
  #endif
  void set_instance_name(const char* value);
  void set_instance_name(const char* value, size_t size);
  ::std::string* mutable_instance_name();
  ::std::string* release_instance_name();
  void set_allocated_instance_name(::std::string* instance_name);

  // .google.devtools.remoteexecution.v1test.Digest action_digest = 2;
  bool has_action_digest() const;
  void clear_action_digest();
  static const int kActionDigestFieldNumber = 2;
  const ::google::devtools::remoteexecution::v1test::Digest& action_digest() const;
  ::google::devtools::remoteexecution::v1test::Digest* release_action_digest();
  ::google::devtools::remoteexecution::v1test::Digest* mutable_action_digest();
  void set_allocated_action_digest(::google::devtools::remoteexecution::v1test::Digest* action_digest);

  // .google.devtools.remoteexecution.v1test.ActionResult action_result = 3;
  bool has_action_result() const;
  void clear_action_result();
  static const int kActionResultFieldNumber = 3;
  const ::google::devtools::remoteexecution::v1test::ActionResult& action_result() const;
  ::google::devtools::remoteexecution::v1test::ActionResult* release_action_result();
  ::google::devtools::remoteexecution::v1test::ActionResult* mutable_action_result();
  void set_allocated_action_result(::google::devtools::remoteexecution::v1test::ActionResult* action_result);

  // @@protoc_insertion_point(class_scope:google.devtools.remoteexecution.v1test.UpdateActionResultRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr instance_name_;
  ::google::devtools::remoteexecution::v1test::Digest* action_digest_;
  ::google::devtools::remoteexecution::v1test::ActionResult* action_result_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fdevtools_2fremoteexecution_2fv1test_2fremote_5fexecution_2eproto::TableStruct;
  friend void ::protobuf_google_2fdevtools_2fremoteexecution_2fv1test_2fremote_5fexecution_2eproto::InitDefaultsUpdateActionResultRequestImpl();
};
// -------------------------------------------------------------------

class FindMissingBlobsRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.devtools.remoteexecution.v1test.FindMissingBlobsRequest) */ {
 public:
  FindMissingBlobsRequest();
  virtual ~FindMissingBlobsRequest();

  FindMissingBlobsRequest(const FindMissingBlobsRequest& from);

  inline FindMissingBlobsRequest& operator=(const FindMissingBlobsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FindMissingBlobsRequest(FindMissingBlobsRequest&& from) noexcept
    : FindMissingBlobsRequest() {
    *this = ::std::move(from);
  }

  inline FindMissingBlobsRequest& operator=(FindMissingBlobsRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const FindMissingBlobsRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FindMissingBlobsRequest* internal_default_instance() {
    return reinterpret_cast<const FindMissingBlobsRequest*>(
               &_FindMissingBlobsRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    20;

  void Swap(FindMissingBlobsRequest* other);
  friend void swap(FindMissingBlobsRequest& a, FindMissingBlobsRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FindMissingBlobsRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  FindMissingBlobsRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const FindMissingBlobsRequest& from);
  void MergeFrom(const FindMissingBlobsRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(FindMissingBlobsRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .google.devtools.remoteexecution.v1test.Digest blob_digests = 2;
  int blob_digests_size() const;
  void clear_blob_digests();
  static const int kBlobDigestsFieldNumber = 2;
  const ::google::devtools::remoteexecution::v1test::Digest& blob_digests(int index) const;
  ::google::devtools::remoteexecution::v1test::Digest* mutable_blob_digests(int index);
  ::google::devtools::remoteexecution::v1test::Digest* add_blob_digests();
  ::google::protobuf::RepeatedPtrField< ::google::devtools::remoteexecution::v1test::Digest >*
      mutable_blob_digests();
  const ::google::protobuf::RepeatedPtrField< ::google::devtools::remoteexecution::v1test::Digest >&
      blob_digests() const;

  // string instance_name = 1;
  void clear_instance_name();
  static const int kInstanceNameFieldNumber = 1;
  const ::std::string& instance_name() const;
  void set_instance_name(const ::std::string& value);
  #if LANG_CXX11
  void set_instance_name(::std::string&& value);
  #endif
  void set_instance_name(const char* value);
  void set_instance_name(const char* value, size_t size);
  ::std::string* mutable_instance_name();
  ::std::string* release_instance_name();
  void set_allocated_instance_name(::std::string* instance_name);

  // @@protoc_insertion_point(class_scope:google.devtools.remoteexecution.v1test.FindMissingBlobsRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::google::devtools::remoteexecution::v1test::Digest > blob_digests_;
  ::google::protobuf::internal::ArenaStringPtr instance_name_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fdevtools_2fremoteexecution_2fv1test_2fremote_5fexecution_2eproto::TableStruct;
  friend void ::protobuf_google_2fdevtools_2fremoteexecution_2fv1test_2fremote_5fexecution_2eproto::InitDefaultsFindMissingBlobsRequestImpl();
};
// -------------------------------------------------------------------

class FindMissingBlobsResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.devtools.remoteexecution.v1test.FindMissingBlobsResponse) */ {
 public:
  FindMissingBlobsResponse();
  virtual ~FindMissingBlobsResponse();

  FindMissingBlobsResponse(const FindMissingBlobsResponse& from);

  inline FindMissingBlobsResponse& operator=(const FindMissingBlobsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FindMissingBlobsResponse(FindMissingBlobsResponse&& from) noexcept
    : FindMissingBlobsResponse() {
    *this = ::std::move(from);
  }

  inline FindMissingBlobsResponse& operator=(FindMissingBlobsResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const FindMissingBlobsResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FindMissingBlobsResponse* internal_default_instance() {
    return reinterpret_cast<const FindMissingBlobsResponse*>(
               &_FindMissingBlobsResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    21;

  void Swap(FindMissingBlobsResponse* other);
  friend void swap(FindMissingBlobsResponse& a, FindMissingBlobsResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FindMissingBlobsResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  FindMissingBlobsResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const FindMissingBlobsResponse& from);
  void MergeFrom(const FindMissingBlobsResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(FindMissingBlobsResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .google.devtools.remoteexecution.v1test.Digest missing_blob_digests = 2;
  int missing_blob_digests_size() const;
  void clear_missing_blob_digests();
  static const int kMissingBlobDigestsFieldNumber = 2;
  const ::google::devtools::remoteexecution::v1test::Digest& missing_blob_digests(int index) const;
  ::google::devtools::remoteexecution::v1test::Digest* mutable_missing_blob_digests(int index);
  ::google::devtools::remoteexecution::v1test::Digest* add_missing_blob_digests();
  ::google::protobuf::RepeatedPtrField< ::google::devtools::remoteexecution::v1test::Digest >*
      mutable_missing_blob_digests();
  const ::google::protobuf::RepeatedPtrField< ::google::devtools::remoteexecution::v1test::Digest >&
      missing_blob_digests() const;

  // @@protoc_insertion_point(class_scope:google.devtools.remoteexecution.v1test.FindMissingBlobsResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::google::devtools::remoteexecution::v1test::Digest > missing_blob_digests_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fdevtools_2fremoteexecution_2fv1test_2fremote_5fexecution_2eproto::TableStruct;
  friend void ::protobuf_google_2fdevtools_2fremoteexecution_2fv1test_2fremote_5fexecution_2eproto::InitDefaultsFindMissingBlobsResponseImpl();
};
// -------------------------------------------------------------------

class UpdateBlobRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.devtools.remoteexecution.v1test.UpdateBlobRequest) */ {
 public:
  UpdateBlobRequest();
  virtual ~UpdateBlobRequest();

  UpdateBlobRequest(const UpdateBlobRequest& from);

  inline UpdateBlobRequest& operator=(const UpdateBlobRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UpdateBlobRequest(UpdateBlobRequest&& from) noexcept
    : UpdateBlobRequest() {
    *this = ::std::move(from);
  }

  inline UpdateBlobRequest& operator=(UpdateBlobRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const UpdateBlobRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UpdateBlobRequest* internal_default_instance() {
    return reinterpret_cast<const UpdateBlobRequest*>(
               &_UpdateBlobRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    22;

  void Swap(UpdateBlobRequest* other);
  friend void swap(UpdateBlobRequest& a, UpdateBlobRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UpdateBlobRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  UpdateBlobRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const UpdateBlobRequest& from);
  void MergeFrom(const UpdateBlobRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(UpdateBlobRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes data = 2;
  void clear_data();
  static const int kDataFieldNumber = 2;
  const ::std::string& data() const;
  void set_data(const ::std::string& value);
  #if LANG_CXX11
  void set_data(::std::string&& value);
  #endif
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  ::std::string* mutable_data();
  ::std::string* release_data();
  void set_allocated_data(::std::string* data);

  // .google.devtools.remoteexecution.v1test.Digest content_digest = 1;
  bool has_content_digest() const;
  void clear_content_digest();
  static const int kContentDigestFieldNumber = 1;
  const ::google::devtools::remoteexecution::v1test::Digest& content_digest() const;
  ::google::devtools::remoteexecution::v1test::Digest* release_content_digest();
  ::google::devtools::remoteexecution::v1test::Digest* mutable_content_digest();
  void set_allocated_content_digest(::google::devtools::remoteexecution::v1test::Digest* content_digest);

  // @@protoc_insertion_point(class_scope:google.devtools.remoteexecution.v1test.UpdateBlobRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr data_;
  ::google::devtools::remoteexecution::v1test::Digest* content_digest_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fdevtools_2fremoteexecution_2fv1test_2fremote_5fexecution_2eproto::TableStruct;
  friend void ::protobuf_google_2fdevtools_2fremoteexecution_2fv1test_2fremote_5fexecution_2eproto::InitDefaultsUpdateBlobRequestImpl();
};
// -------------------------------------------------------------------

class BatchUpdateBlobsRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.devtools.remoteexecution.v1test.BatchUpdateBlobsRequest) */ {
 public:
  BatchUpdateBlobsRequest();
  virtual ~BatchUpdateBlobsRequest();

  BatchUpdateBlobsRequest(const BatchUpdateBlobsRequest& from);

  inline BatchUpdateBlobsRequest& operator=(const BatchUpdateBlobsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  BatchUpdateBlobsRequest(BatchUpdateBlobsRequest&& from) noexcept
    : BatchUpdateBlobsRequest() {
    *this = ::std::move(from);
  }

  inline BatchUpdateBlobsRequest& operator=(BatchUpdateBlobsRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const BatchUpdateBlobsRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BatchUpdateBlobsRequest* internal_default_instance() {
    return reinterpret_cast<const BatchUpdateBlobsRequest*>(
               &_BatchUpdateBlobsRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    23;

  void Swap(BatchUpdateBlobsRequest* other);
  friend void swap(BatchUpdateBlobsRequest& a, BatchUpdateBlobsRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BatchUpdateBlobsRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  BatchUpdateBlobsRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const BatchUpdateBlobsRequest& from);
  void MergeFrom(const BatchUpdateBlobsRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(BatchUpdateBlobsRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .google.devtools.remoteexecution.v1test.UpdateBlobRequest requests = 2;
  int requests_size() const;
  void clear_requests();
  static const int kRequestsFieldNumber = 2;
  const ::google::devtools::remoteexecution::v1test::UpdateBlobRequest& requests(int index) const;
  ::google::devtools::remoteexecution::v1test::UpdateBlobRequest* mutable_requests(int index);
  ::google::devtools::remoteexecution::v1test::UpdateBlobRequest* add_requests();
  ::google::protobuf::RepeatedPtrField< ::google::devtools::remoteexecution::v1test::UpdateBlobRequest >*
      mutable_requests();
  const ::google::protobuf::RepeatedPtrField< ::google::devtools::remoteexecution::v1test::UpdateBlobRequest >&
      requests() const;

  // string instance_name = 1;
  void clear_instance_name();
  static const int kInstanceNameFieldNumber = 1;
  const ::std::string& instance_name() const;
  void set_instance_name(const ::std::string& value);
  #if LANG_CXX11
  void set_instance_name(::std::string&& value);
  #endif
  void set_instance_name(const char* value);
  void set_instance_name(const char* value, size_t size);
  ::std::string* mutable_instance_name();
  ::std::string* release_instance_name();
  void set_allocated_instance_name(::std::string* instance_name);

  // @@protoc_insertion_point(class_scope:google.devtools.remoteexecution.v1test.BatchUpdateBlobsRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::google::devtools::remoteexecution::v1test::UpdateBlobRequest > requests_;
  ::google::protobuf::internal::ArenaStringPtr instance_name_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fdevtools_2fremoteexecution_2fv1test_2fremote_5fexecution_2eproto::TableStruct;
  friend void ::protobuf_google_2fdevtools_2fremoteexecution_2fv1test_2fremote_5fexecution_2eproto::InitDefaultsBatchUpdateBlobsRequestImpl();
};
// -------------------------------------------------------------------

class BatchUpdateBlobsResponse_Response : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.devtools.remoteexecution.v1test.BatchUpdateBlobsResponse.Response) */ {
 public:
  BatchUpdateBlobsResponse_Response();
  virtual ~BatchUpdateBlobsResponse_Response();

  BatchUpdateBlobsResponse_Response(const BatchUpdateBlobsResponse_Response& from);

  inline BatchUpdateBlobsResponse_Response& operator=(const BatchUpdateBlobsResponse_Response& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  BatchUpdateBlobsResponse_Response(BatchUpdateBlobsResponse_Response&& from) noexcept
    : BatchUpdateBlobsResponse_Response() {
    *this = ::std::move(from);
  }

  inline BatchUpdateBlobsResponse_Response& operator=(BatchUpdateBlobsResponse_Response&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const BatchUpdateBlobsResponse_Response& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BatchUpdateBlobsResponse_Response* internal_default_instance() {
    return reinterpret_cast<const BatchUpdateBlobsResponse_Response*>(
               &_BatchUpdateBlobsResponse_Response_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    24;

  void Swap(BatchUpdateBlobsResponse_Response* other);
  friend void swap(BatchUpdateBlobsResponse_Response& a, BatchUpdateBlobsResponse_Response& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BatchUpdateBlobsResponse_Response* New() const PROTOBUF_FINAL { return New(NULL); }

  BatchUpdateBlobsResponse_Response* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const BatchUpdateBlobsResponse_Response& from);
  void MergeFrom(const BatchUpdateBlobsResponse_Response& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(BatchUpdateBlobsResponse_Response* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.devtools.remoteexecution.v1test.Digest blob_digest = 1;
  bool has_blob_digest() const;
  void clear_blob_digest();
  static const int kBlobDigestFieldNumber = 1;
  const ::google::devtools::remoteexecution::v1test::Digest& blob_digest() const;
  ::google::devtools::remoteexecution::v1test::Digest* release_blob_digest();
  ::google::devtools::remoteexecution::v1test::Digest* mutable_blob_digest();
  void set_allocated_blob_digest(::google::devtools::remoteexecution::v1test::Digest* blob_digest);

  // .google.rpc.Status status = 2;
  bool has_status() const;
  void clear_status();
  static const int kStatusFieldNumber = 2;
  const ::google::rpc::Status& status() const;
  ::google::rpc::Status* release_status();
  ::google::rpc::Status* mutable_status();
  void set_allocated_status(::google::rpc::Status* status);

  // @@protoc_insertion_point(class_scope:google.devtools.remoteexecution.v1test.BatchUpdateBlobsResponse.Response)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::devtools::remoteexecution::v1test::Digest* blob_digest_;
  ::google::rpc::Status* status_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fdevtools_2fremoteexecution_2fv1test_2fremote_5fexecution_2eproto::TableStruct;
  friend void ::protobuf_google_2fdevtools_2fremoteexecution_2fv1test_2fremote_5fexecution_2eproto::InitDefaultsBatchUpdateBlobsResponse_ResponseImpl();
};
// -------------------------------------------------------------------

class BatchUpdateBlobsResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.devtools.remoteexecution.v1test.BatchUpdateBlobsResponse) */ {
 public:
  BatchUpdateBlobsResponse();
  virtual ~BatchUpdateBlobsResponse();

  BatchUpdateBlobsResponse(const BatchUpdateBlobsResponse& from);

  inline BatchUpdateBlobsResponse& operator=(const BatchUpdateBlobsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  BatchUpdateBlobsResponse(BatchUpdateBlobsResponse&& from) noexcept
    : BatchUpdateBlobsResponse() {
    *this = ::std::move(from);
  }

  inline BatchUpdateBlobsResponse& operator=(BatchUpdateBlobsResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const BatchUpdateBlobsResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BatchUpdateBlobsResponse* internal_default_instance() {
    return reinterpret_cast<const BatchUpdateBlobsResponse*>(
               &_BatchUpdateBlobsResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    25;

  void Swap(BatchUpdateBlobsResponse* other);
  friend void swap(BatchUpdateBlobsResponse& a, BatchUpdateBlobsResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BatchUpdateBlobsResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  BatchUpdateBlobsResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const BatchUpdateBlobsResponse& from);
  void MergeFrom(const BatchUpdateBlobsResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(BatchUpdateBlobsResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef BatchUpdateBlobsResponse_Response Response;

  // accessors -------------------------------------------------------

  // repeated .google.devtools.remoteexecution.v1test.BatchUpdateBlobsResponse.Response responses = 1;
  int responses_size() const;
  void clear_responses();
  static const int kResponsesFieldNumber = 1;
  const ::google::devtools::remoteexecution::v1test::BatchUpdateBlobsResponse_Response& responses(int index) const;
  ::google::devtools::remoteexecution::v1test::BatchUpdateBlobsResponse_Response* mutable_responses(int index);
  ::google::devtools::remoteexecution::v1test::BatchUpdateBlobsResponse_Response* add_responses();
  ::google::protobuf::RepeatedPtrField< ::google::devtools::remoteexecution::v1test::BatchUpdateBlobsResponse_Response >*
      mutable_responses();
  const ::google::protobuf::RepeatedPtrField< ::google::devtools::remoteexecution::v1test::BatchUpdateBlobsResponse_Response >&
      responses() const;

  // @@protoc_insertion_point(class_scope:google.devtools.remoteexecution.v1test.BatchUpdateBlobsResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::google::devtools::remoteexecution::v1test::BatchUpdateBlobsResponse_Response > responses_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fdevtools_2fremoteexecution_2fv1test_2fremote_5fexecution_2eproto::TableStruct;
  friend void ::protobuf_google_2fdevtools_2fremoteexecution_2fv1test_2fremote_5fexecution_2eproto::InitDefaultsBatchUpdateBlobsResponseImpl();
};
// -------------------------------------------------------------------

class GetTreeRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.devtools.remoteexecution.v1test.GetTreeRequest) */ {
 public:
  GetTreeRequest();
  virtual ~GetTreeRequest();

  GetTreeRequest(const GetTreeRequest& from);

  inline GetTreeRequest& operator=(const GetTreeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetTreeRequest(GetTreeRequest&& from) noexcept
    : GetTreeRequest() {
    *this = ::std::move(from);
  }

  inline GetTreeRequest& operator=(GetTreeRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetTreeRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetTreeRequest* internal_default_instance() {
    return reinterpret_cast<const GetTreeRequest*>(
               &_GetTreeRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    26;

  void Swap(GetTreeRequest* other);
  friend void swap(GetTreeRequest& a, GetTreeRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetTreeRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  GetTreeRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GetTreeRequest& from);
  void MergeFrom(const GetTreeRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GetTreeRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string instance_name = 1;
  void clear_instance_name();
  static const int kInstanceNameFieldNumber = 1;
  const ::std::string& instance_name() const;
  void set_instance_name(const ::std::string& value);
  #if LANG_CXX11
  void set_instance_name(::std::string&& value);
  #endif
  void set_instance_name(const char* value);
  void set_instance_name(const char* value, size_t size);
  ::std::string* mutable_instance_name();
  ::std::string* release_instance_name();
  void set_allocated_instance_name(::std::string* instance_name);

  // string page_token = 4;
  void clear_page_token();
  static const int kPageTokenFieldNumber = 4;
  const ::std::string& page_token() const;
  void set_page_token(const ::std::string& value);
  #if LANG_CXX11
  void set_page_token(::std::string&& value);
  #endif
  void set_page_token(const char* value);
  void set_page_token(const char* value, size_t size);
  ::std::string* mutable_page_token();
  ::std::string* release_page_token();
  void set_allocated_page_token(::std::string* page_token);

  // .google.devtools.remoteexecution.v1test.Digest root_digest = 2;
  bool has_root_digest() const;
  void clear_root_digest();
  static const int kRootDigestFieldNumber = 2;
  const ::google::devtools::remoteexecution::v1test::Digest& root_digest() const;
  ::google::devtools::remoteexecution::v1test::Digest* release_root_digest();
  ::google::devtools::remoteexecution::v1test::Digest* mutable_root_digest();
  void set_allocated_root_digest(::google::devtools::remoteexecution::v1test::Digest* root_digest);

  // int32 page_size = 3;
  void clear_page_size();
  static const int kPageSizeFieldNumber = 3;
  ::google::protobuf::int32 page_size() const;
  void set_page_size(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:google.devtools.remoteexecution.v1test.GetTreeRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr instance_name_;
  ::google::protobuf::internal::ArenaStringPtr page_token_;
  ::google::devtools::remoteexecution::v1test::Digest* root_digest_;
  ::google::protobuf::int32 page_size_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fdevtools_2fremoteexecution_2fv1test_2fremote_5fexecution_2eproto::TableStruct;
  friend void ::protobuf_google_2fdevtools_2fremoteexecution_2fv1test_2fremote_5fexecution_2eproto::InitDefaultsGetTreeRequestImpl();
};
// -------------------------------------------------------------------

class GetTreeResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.devtools.remoteexecution.v1test.GetTreeResponse) */ {
 public:
  GetTreeResponse();
  virtual ~GetTreeResponse();

  GetTreeResponse(const GetTreeResponse& from);

  inline GetTreeResponse& operator=(const GetTreeResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetTreeResponse(GetTreeResponse&& from) noexcept
    : GetTreeResponse() {
    *this = ::std::move(from);
  }

  inline GetTreeResponse& operator=(GetTreeResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetTreeResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetTreeResponse* internal_default_instance() {
    return reinterpret_cast<const GetTreeResponse*>(
               &_GetTreeResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    27;

  void Swap(GetTreeResponse* other);
  friend void swap(GetTreeResponse& a, GetTreeResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetTreeResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  GetTreeResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GetTreeResponse& from);
  void MergeFrom(const GetTreeResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GetTreeResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .google.devtools.remoteexecution.v1test.Directory directories = 1;
  int directories_size() const;
  void clear_directories();
  static const int kDirectoriesFieldNumber = 1;
  const ::google::devtools::remoteexecution::v1test::Directory& directories(int index) const;
  ::google::devtools::remoteexecution::v1test::Directory* mutable_directories(int index);
  ::google::devtools::remoteexecution::v1test::Directory* add_directories();
  ::google::protobuf::RepeatedPtrField< ::google::devtools::remoteexecution::v1test::Directory >*
      mutable_directories();
  const ::google::protobuf::RepeatedPtrField< ::google::devtools::remoteexecution::v1test::Directory >&
      directories() const;

  // string next_page_token = 2;
  void clear_next_page_token();
  static const int kNextPageTokenFieldNumber = 2;
  const ::std::string& next_page_token() const;
  void set_next_page_token(const ::std::string& value);
  #if LANG_CXX11
  void set_next_page_token(::std::string&& value);
  #endif
  void set_next_page_token(const char* value);
  void set_next_page_token(const char* value, size_t size);
  ::std::string* mutable_next_page_token();
  ::std::string* release_next_page_token();
  void set_allocated_next_page_token(::std::string* next_page_token);

  // @@protoc_insertion_point(class_scope:google.devtools.remoteexecution.v1test.GetTreeResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::google::devtools::remoteexecution::v1test::Directory > directories_;
  ::google::protobuf::internal::ArenaStringPtr next_page_token_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fdevtools_2fremoteexecution_2fv1test_2fremote_5fexecution_2eproto::TableStruct;
  friend void ::protobuf_google_2fdevtools_2fremoteexecution_2fv1test_2fremote_5fexecution_2eproto::InitDefaultsGetTreeResponseImpl();
};
// -------------------------------------------------------------------

class ToolDetails : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.devtools.remoteexecution.v1test.ToolDetails) */ {
 public:
  ToolDetails();
  virtual ~ToolDetails();

  ToolDetails(const ToolDetails& from);

  inline ToolDetails& operator=(const ToolDetails& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ToolDetails(ToolDetails&& from) noexcept
    : ToolDetails() {
    *this = ::std::move(from);
  }

  inline ToolDetails& operator=(ToolDetails&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ToolDetails& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ToolDetails* internal_default_instance() {
    return reinterpret_cast<const ToolDetails*>(
               &_ToolDetails_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    28;

  void Swap(ToolDetails* other);
  friend void swap(ToolDetails& a, ToolDetails& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ToolDetails* New() const PROTOBUF_FINAL { return New(NULL); }

  ToolDetails* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ToolDetails& from);
  void MergeFrom(const ToolDetails& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ToolDetails* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string tool_name = 1;
  void clear_tool_name();
  static const int kToolNameFieldNumber = 1;
  const ::std::string& tool_name() const;
  void set_tool_name(const ::std::string& value);
  #if LANG_CXX11
  void set_tool_name(::std::string&& value);
  #endif
  void set_tool_name(const char* value);
  void set_tool_name(const char* value, size_t size);
  ::std::string* mutable_tool_name();
  ::std::string* release_tool_name();
  void set_allocated_tool_name(::std::string* tool_name);

  // string tool_version = 2;
  void clear_tool_version();
  static const int kToolVersionFieldNumber = 2;
  const ::std::string& tool_version() const;
  void set_tool_version(const ::std::string& value);
  #if LANG_CXX11
  void set_tool_version(::std::string&& value);
  #endif
  void set_tool_version(const char* value);
  void set_tool_version(const char* value, size_t size);
  ::std::string* mutable_tool_version();
  ::std::string* release_tool_version();
  void set_allocated_tool_version(::std::string* tool_version);

  // @@protoc_insertion_point(class_scope:google.devtools.remoteexecution.v1test.ToolDetails)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr tool_name_;
  ::google::protobuf::internal::ArenaStringPtr tool_version_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fdevtools_2fremoteexecution_2fv1test_2fremote_5fexecution_2eproto::TableStruct;
  friend void ::protobuf_google_2fdevtools_2fremoteexecution_2fv1test_2fremote_5fexecution_2eproto::InitDefaultsToolDetailsImpl();
};
// -------------------------------------------------------------------

class RequestMetadata : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.devtools.remoteexecution.v1test.RequestMetadata) */ {
 public:
  RequestMetadata();
  virtual ~RequestMetadata();

  RequestMetadata(const RequestMetadata& from);

  inline RequestMetadata& operator=(const RequestMetadata& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RequestMetadata(RequestMetadata&& from) noexcept
    : RequestMetadata() {
    *this = ::std::move(from);
  }

  inline RequestMetadata& operator=(RequestMetadata&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RequestMetadata& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RequestMetadata* internal_default_instance() {
    return reinterpret_cast<const RequestMetadata*>(
               &_RequestMetadata_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    29;

  void Swap(RequestMetadata* other);
  friend void swap(RequestMetadata& a, RequestMetadata& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RequestMetadata* New() const PROTOBUF_FINAL { return New(NULL); }

  RequestMetadata* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const RequestMetadata& from);
  void MergeFrom(const RequestMetadata& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(RequestMetadata* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string action_id = 2;
  void clear_action_id();
  static const int kActionIdFieldNumber = 2;
  const ::std::string& action_id() const;
  void set_action_id(const ::std::string& value);
  #if LANG_CXX11
  void set_action_id(::std::string&& value);
  #endif
  void set_action_id(const char* value);
  void set_action_id(const char* value, size_t size);
  ::std::string* mutable_action_id();
  ::std::string* release_action_id();
  void set_allocated_action_id(::std::string* action_id);

  // string tool_invocation_id = 3;
  void clear_tool_invocation_id();
  static const int kToolInvocationIdFieldNumber = 3;
  const ::std::string& tool_invocation_id() const;
  void set_tool_invocation_id(const ::std::string& value);
  #if LANG_CXX11
  void set_tool_invocation_id(::std::string&& value);
  #endif
  void set_tool_invocation_id(const char* value);
  void set_tool_invocation_id(const char* value, size_t size);
  ::std::string* mutable_tool_invocation_id();
  ::std::string* release_tool_invocation_id();
  void set_allocated_tool_invocation_id(::std::string* tool_invocation_id);

  // string correlated_invocations_id = 4;
  void clear_correlated_invocations_id();
  static const int kCorrelatedInvocationsIdFieldNumber = 4;
  const ::std::string& correlated_invocations_id() const;
  void set_correlated_invocations_id(const ::std::string& value);
  #if LANG_CXX11
  void set_correlated_invocations_id(::std::string&& value);
  #endif
  void set_correlated_invocations_id(const char* value);
  void set_correlated_invocations_id(const char* value, size_t size);
  ::std::string* mutable_correlated_invocations_id();
  ::std::string* release_correlated_invocations_id();
  void set_allocated_correlated_invocations_id(::std::string* correlated_invocations_id);

  // .google.devtools.remoteexecution.v1test.ToolDetails tool_details = 1;
  bool has_tool_details() const;
  void clear_tool_details();
  static const int kToolDetailsFieldNumber = 1;
  const ::google::devtools::remoteexecution::v1test::ToolDetails& tool_details() const;
  ::google::devtools::remoteexecution::v1test::ToolDetails* release_tool_details();
  ::google::devtools::remoteexecution::v1test::ToolDetails* mutable_tool_details();
  void set_allocated_tool_details(::google::devtools::remoteexecution::v1test::ToolDetails* tool_details);

  // @@protoc_insertion_point(class_scope:google.devtools.remoteexecution.v1test.RequestMetadata)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr action_id_;
  ::google::protobuf::internal::ArenaStringPtr tool_invocation_id_;
  ::google::protobuf::internal::ArenaStringPtr correlated_invocations_id_;
  ::google::devtools::remoteexecution::v1test::ToolDetails* tool_details_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fdevtools_2fremoteexecution_2fv1test_2fremote_5fexecution_2eproto::TableStruct;
  friend void ::protobuf_google_2fdevtools_2fremoteexecution_2fv1test_2fremote_5fexecution_2eproto::InitDefaultsRequestMetadataImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Action

// .google.devtools.remoteexecution.v1test.Digest command_digest = 1;
inline bool Action::has_command_digest() const {
  return this != internal_default_instance() && command_digest_ != NULL;
}
inline void Action::clear_command_digest() {
  if (GetArenaNoVirtual() == NULL && command_digest_ != NULL) {
    delete command_digest_;
  }
  command_digest_ = NULL;
}
inline const ::google::devtools::remoteexecution::v1test::Digest& Action::command_digest() const {
  const ::google::devtools::remoteexecution::v1test::Digest* p = command_digest_;
  // @@protoc_insertion_point(field_get:google.devtools.remoteexecution.v1test.Action.command_digest)
  return p != NULL ? *p : *reinterpret_cast<const ::google::devtools::remoteexecution::v1test::Digest*>(
      &::google::devtools::remoteexecution::v1test::_Digest_default_instance_);
}
inline ::google::devtools::remoteexecution::v1test::Digest* Action::release_command_digest() {
  // @@protoc_insertion_point(field_release:google.devtools.remoteexecution.v1test.Action.command_digest)
  
  ::google::devtools::remoteexecution::v1test::Digest* temp = command_digest_;
  command_digest_ = NULL;
  return temp;
}
inline ::google::devtools::remoteexecution::v1test::Digest* Action::mutable_command_digest() {
  
  if (command_digest_ == NULL) {
    command_digest_ = new ::google::devtools::remoteexecution::v1test::Digest;
  }
  // @@protoc_insertion_point(field_mutable:google.devtools.remoteexecution.v1test.Action.command_digest)
  return command_digest_;
}
inline void Action::set_allocated_command_digest(::google::devtools::remoteexecution::v1test::Digest* command_digest) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete command_digest_;
  }
  if (command_digest) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      command_digest = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, command_digest, submessage_arena);
    }
    
  } else {
    
  }
  command_digest_ = command_digest;
  // @@protoc_insertion_point(field_set_allocated:google.devtools.remoteexecution.v1test.Action.command_digest)
}

// .google.devtools.remoteexecution.v1test.Digest input_root_digest = 2;
inline bool Action::has_input_root_digest() const {
  return this != internal_default_instance() && input_root_digest_ != NULL;
}
inline void Action::clear_input_root_digest() {
  if (GetArenaNoVirtual() == NULL && input_root_digest_ != NULL) {
    delete input_root_digest_;
  }
  input_root_digest_ = NULL;
}
inline const ::google::devtools::remoteexecution::v1test::Digest& Action::input_root_digest() const {
  const ::google::devtools::remoteexecution::v1test::Digest* p = input_root_digest_;
  // @@protoc_insertion_point(field_get:google.devtools.remoteexecution.v1test.Action.input_root_digest)
  return p != NULL ? *p : *reinterpret_cast<const ::google::devtools::remoteexecution::v1test::Digest*>(
      &::google::devtools::remoteexecution::v1test::_Digest_default_instance_);
}
inline ::google::devtools::remoteexecution::v1test::Digest* Action::release_input_root_digest() {
  // @@protoc_insertion_point(field_release:google.devtools.remoteexecution.v1test.Action.input_root_digest)
  
  ::google::devtools::remoteexecution::v1test::Digest* temp = input_root_digest_;
  input_root_digest_ = NULL;
  return temp;
}
inline ::google::devtools::remoteexecution::v1test::Digest* Action::mutable_input_root_digest() {
  
  if (input_root_digest_ == NULL) {
    input_root_digest_ = new ::google::devtools::remoteexecution::v1test::Digest;
  }
  // @@protoc_insertion_point(field_mutable:google.devtools.remoteexecution.v1test.Action.input_root_digest)
  return input_root_digest_;
}
inline void Action::set_allocated_input_root_digest(::google::devtools::remoteexecution::v1test::Digest* input_root_digest) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete input_root_digest_;
  }
  if (input_root_digest) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      input_root_digest = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, input_root_digest, submessage_arena);
    }
    
  } else {
    
  }
  input_root_digest_ = input_root_digest;
  // @@protoc_insertion_point(field_set_allocated:google.devtools.remoteexecution.v1test.Action.input_root_digest)
}

// repeated string output_files = 3;
inline int Action::output_files_size() const {
  return output_files_.size();
}
inline void Action::clear_output_files() {
  output_files_.Clear();
}
inline const ::std::string& Action::output_files(int index) const {
  // @@protoc_insertion_point(field_get:google.devtools.remoteexecution.v1test.Action.output_files)
  return output_files_.Get(index);
}
inline ::std::string* Action::mutable_output_files(int index) {
  // @@protoc_insertion_point(field_mutable:google.devtools.remoteexecution.v1test.Action.output_files)
  return output_files_.Mutable(index);
}
inline void Action::set_output_files(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:google.devtools.remoteexecution.v1test.Action.output_files)
  output_files_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void Action::set_output_files(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:google.devtools.remoteexecution.v1test.Action.output_files)
  output_files_.Mutable(index)->assign(std::move(value));
}
#endif
inline void Action::set_output_files(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  output_files_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:google.devtools.remoteexecution.v1test.Action.output_files)
}
inline void Action::set_output_files(int index, const char* value, size_t size) {
  output_files_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:google.devtools.remoteexecution.v1test.Action.output_files)
}
inline ::std::string* Action::add_output_files() {
  // @@protoc_insertion_point(field_add_mutable:google.devtools.remoteexecution.v1test.Action.output_files)
  return output_files_.Add();
}
inline void Action::add_output_files(const ::std::string& value) {
  output_files_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:google.devtools.remoteexecution.v1test.Action.output_files)
}
#if LANG_CXX11
inline void Action::add_output_files(::std::string&& value) {
  output_files_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:google.devtools.remoteexecution.v1test.Action.output_files)
}
#endif
inline void Action::add_output_files(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  output_files_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:google.devtools.remoteexecution.v1test.Action.output_files)
}
inline void Action::add_output_files(const char* value, size_t size) {
  output_files_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:google.devtools.remoteexecution.v1test.Action.output_files)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Action::output_files() const {
  // @@protoc_insertion_point(field_list:google.devtools.remoteexecution.v1test.Action.output_files)
  return output_files_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Action::mutable_output_files() {
  // @@protoc_insertion_point(field_mutable_list:google.devtools.remoteexecution.v1test.Action.output_files)
  return &output_files_;
}

// repeated string output_directories = 4;
inline int Action::output_directories_size() const {
  return output_directories_.size();
}
inline void Action::clear_output_directories() {
  output_directories_.Clear();
}
inline const ::std::string& Action::output_directories(int index) const {
  // @@protoc_insertion_point(field_get:google.devtools.remoteexecution.v1test.Action.output_directories)
  return output_directories_.Get(index);
}
inline ::std::string* Action::mutable_output_directories(int index) {
  // @@protoc_insertion_point(field_mutable:google.devtools.remoteexecution.v1test.Action.output_directories)
  return output_directories_.Mutable(index);
}
inline void Action::set_output_directories(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:google.devtools.remoteexecution.v1test.Action.output_directories)
  output_directories_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void Action::set_output_directories(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:google.devtools.remoteexecution.v1test.Action.output_directories)
  output_directories_.Mutable(index)->assign(std::move(value));
}
#endif
inline void Action::set_output_directories(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  output_directories_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:google.devtools.remoteexecution.v1test.Action.output_directories)
}
inline void Action::set_output_directories(int index, const char* value, size_t size) {
  output_directories_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:google.devtools.remoteexecution.v1test.Action.output_directories)
}
inline ::std::string* Action::add_output_directories() {
  // @@protoc_insertion_point(field_add_mutable:google.devtools.remoteexecution.v1test.Action.output_directories)
  return output_directories_.Add();
}
inline void Action::add_output_directories(const ::std::string& value) {
  output_directories_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:google.devtools.remoteexecution.v1test.Action.output_directories)
}
#if LANG_CXX11
inline void Action::add_output_directories(::std::string&& value) {
  output_directories_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:google.devtools.remoteexecution.v1test.Action.output_directories)
}
#endif
inline void Action::add_output_directories(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  output_directories_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:google.devtools.remoteexecution.v1test.Action.output_directories)
}
inline void Action::add_output_directories(const char* value, size_t size) {
  output_directories_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:google.devtools.remoteexecution.v1test.Action.output_directories)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Action::output_directories() const {
  // @@protoc_insertion_point(field_list:google.devtools.remoteexecution.v1test.Action.output_directories)
  return output_directories_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Action::mutable_output_directories() {
  // @@protoc_insertion_point(field_mutable_list:google.devtools.remoteexecution.v1test.Action.output_directories)
  return &output_directories_;
}

// .google.devtools.remoteexecution.v1test.Platform platform = 5;
inline bool Action::has_platform() const {
  return this != internal_default_instance() && platform_ != NULL;
}
inline void Action::clear_platform() {
  if (GetArenaNoVirtual() == NULL && platform_ != NULL) {
    delete platform_;
  }
  platform_ = NULL;
}
inline const ::google::devtools::remoteexecution::v1test::Platform& Action::platform() const {
  const ::google::devtools::remoteexecution::v1test::Platform* p = platform_;
  // @@protoc_insertion_point(field_get:google.devtools.remoteexecution.v1test.Action.platform)
  return p != NULL ? *p : *reinterpret_cast<const ::google::devtools::remoteexecution::v1test::Platform*>(
      &::google::devtools::remoteexecution::v1test::_Platform_default_instance_);
}
inline ::google::devtools::remoteexecution::v1test::Platform* Action::release_platform() {
  // @@protoc_insertion_point(field_release:google.devtools.remoteexecution.v1test.Action.platform)
  
  ::google::devtools::remoteexecution::v1test::Platform* temp = platform_;
  platform_ = NULL;
  return temp;
}
inline ::google::devtools::remoteexecution::v1test::Platform* Action::mutable_platform() {
  
  if (platform_ == NULL) {
    platform_ = new ::google::devtools::remoteexecution::v1test::Platform;
  }
  // @@protoc_insertion_point(field_mutable:google.devtools.remoteexecution.v1test.Action.platform)
  return platform_;
}
inline void Action::set_allocated_platform(::google::devtools::remoteexecution::v1test::Platform* platform) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete platform_;
  }
  if (platform) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      platform = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, platform, submessage_arena);
    }
    
  } else {
    
  }
  platform_ = platform;
  // @@protoc_insertion_point(field_set_allocated:google.devtools.remoteexecution.v1test.Action.platform)
}

// .google.protobuf.Duration timeout = 6;
inline bool Action::has_timeout() const {
  return this != internal_default_instance() && timeout_ != NULL;
}
inline const ::google::protobuf::Duration& Action::timeout() const {
  const ::google::protobuf::Duration* p = timeout_;
  // @@protoc_insertion_point(field_get:google.devtools.remoteexecution.v1test.Action.timeout)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::Duration*>(
      &::google::protobuf::_Duration_default_instance_);
}
inline ::google::protobuf::Duration* Action::release_timeout() {
  // @@protoc_insertion_point(field_release:google.devtools.remoteexecution.v1test.Action.timeout)
  
  ::google::protobuf::Duration* temp = timeout_;
  timeout_ = NULL;
  return temp;
}
inline ::google::protobuf::Duration* Action::mutable_timeout() {
  
  if (timeout_ == NULL) {
    timeout_ = new ::google::protobuf::Duration;
  }
  // @@protoc_insertion_point(field_mutable:google.devtools.remoteexecution.v1test.Action.timeout)
  return timeout_;
}
inline void Action::set_allocated_timeout(::google::protobuf::Duration* timeout) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(timeout_);
  }
  if (timeout) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast< ::google::protobuf::MessageLite*>(timeout)->GetArena();
    if (message_arena != submessage_arena) {
      timeout = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, timeout, submessage_arena);
    }
    
  } else {
    
  }
  timeout_ = timeout;
  // @@protoc_insertion_point(field_set_allocated:google.devtools.remoteexecution.v1test.Action.timeout)
}

// bool do_not_cache = 7;
inline void Action::clear_do_not_cache() {
  do_not_cache_ = false;
}
inline bool Action::do_not_cache() const {
  // @@protoc_insertion_point(field_get:google.devtools.remoteexecution.v1test.Action.do_not_cache)
  return do_not_cache_;
}
inline void Action::set_do_not_cache(bool value) {
  
  do_not_cache_ = value;
  // @@protoc_insertion_point(field_set:google.devtools.remoteexecution.v1test.Action.do_not_cache)
}

// -------------------------------------------------------------------

// Command_EnvironmentVariable

// string name = 1;
inline void Command_EnvironmentVariable::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Command_EnvironmentVariable::name() const {
  // @@protoc_insertion_point(field_get:google.devtools.remoteexecution.v1test.Command.EnvironmentVariable.name)
  return name_.GetNoArena();
}
inline void Command_EnvironmentVariable::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.devtools.remoteexecution.v1test.Command.EnvironmentVariable.name)
}
#if LANG_CXX11
inline void Command_EnvironmentVariable::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.devtools.remoteexecution.v1test.Command.EnvironmentVariable.name)
}
#endif
inline void Command_EnvironmentVariable::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.devtools.remoteexecution.v1test.Command.EnvironmentVariable.name)
}
inline void Command_EnvironmentVariable::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.devtools.remoteexecution.v1test.Command.EnvironmentVariable.name)
}
inline ::std::string* Command_EnvironmentVariable::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:google.devtools.remoteexecution.v1test.Command.EnvironmentVariable.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Command_EnvironmentVariable::release_name() {
  // @@protoc_insertion_point(field_release:google.devtools.remoteexecution.v1test.Command.EnvironmentVariable.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Command_EnvironmentVariable::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:google.devtools.remoteexecution.v1test.Command.EnvironmentVariable.name)
}

// string value = 2;
inline void Command_EnvironmentVariable::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Command_EnvironmentVariable::value() const {
  // @@protoc_insertion_point(field_get:google.devtools.remoteexecution.v1test.Command.EnvironmentVariable.value)
  return value_.GetNoArena();
}
inline void Command_EnvironmentVariable::set_value(const ::std::string& value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.devtools.remoteexecution.v1test.Command.EnvironmentVariable.value)
}
#if LANG_CXX11
inline void Command_EnvironmentVariable::set_value(::std::string&& value) {
  
  value_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.devtools.remoteexecution.v1test.Command.EnvironmentVariable.value)
}
#endif
inline void Command_EnvironmentVariable::set_value(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.devtools.remoteexecution.v1test.Command.EnvironmentVariable.value)
}
inline void Command_EnvironmentVariable::set_value(const char* value, size_t size) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.devtools.remoteexecution.v1test.Command.EnvironmentVariable.value)
}
inline ::std::string* Command_EnvironmentVariable::mutable_value() {
  
  // @@protoc_insertion_point(field_mutable:google.devtools.remoteexecution.v1test.Command.EnvironmentVariable.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Command_EnvironmentVariable::release_value() {
  // @@protoc_insertion_point(field_release:google.devtools.remoteexecution.v1test.Command.EnvironmentVariable.value)
  
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Command_EnvironmentVariable::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    
  } else {
    
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:google.devtools.remoteexecution.v1test.Command.EnvironmentVariable.value)
}

// -------------------------------------------------------------------

// Command

// repeated string arguments = 1;
inline int Command::arguments_size() const {
  return arguments_.size();
}
inline void Command::clear_arguments() {
  arguments_.Clear();
}
inline const ::std::string& Command::arguments(int index) const {
  // @@protoc_insertion_point(field_get:google.devtools.remoteexecution.v1test.Command.arguments)
  return arguments_.Get(index);
}
inline ::std::string* Command::mutable_arguments(int index) {
  // @@protoc_insertion_point(field_mutable:google.devtools.remoteexecution.v1test.Command.arguments)
  return arguments_.Mutable(index);
}
inline void Command::set_arguments(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:google.devtools.remoteexecution.v1test.Command.arguments)
  arguments_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void Command::set_arguments(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:google.devtools.remoteexecution.v1test.Command.arguments)
  arguments_.Mutable(index)->assign(std::move(value));
}
#endif
inline void Command::set_arguments(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  arguments_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:google.devtools.remoteexecution.v1test.Command.arguments)
}
inline void Command::set_arguments(int index, const char* value, size_t size) {
  arguments_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:google.devtools.remoteexecution.v1test.Command.arguments)
}
inline ::std::string* Command::add_arguments() {
  // @@protoc_insertion_point(field_add_mutable:google.devtools.remoteexecution.v1test.Command.arguments)
  return arguments_.Add();
}
inline void Command::add_arguments(const ::std::string& value) {
  arguments_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:google.devtools.remoteexecution.v1test.Command.arguments)
}
#if LANG_CXX11
inline void Command::add_arguments(::std::string&& value) {
  arguments_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:google.devtools.remoteexecution.v1test.Command.arguments)
}
#endif
inline void Command::add_arguments(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  arguments_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:google.devtools.remoteexecution.v1test.Command.arguments)
}
inline void Command::add_arguments(const char* value, size_t size) {
  arguments_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:google.devtools.remoteexecution.v1test.Command.arguments)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Command::arguments() const {
  // @@protoc_insertion_point(field_list:google.devtools.remoteexecution.v1test.Command.arguments)
  return arguments_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Command::mutable_arguments() {
  // @@protoc_insertion_point(field_mutable_list:google.devtools.remoteexecution.v1test.Command.arguments)
  return &arguments_;
}

// repeated .google.devtools.remoteexecution.v1test.Command.EnvironmentVariable environment_variables = 2;
inline int Command::environment_variables_size() const {
  return environment_variables_.size();
}
inline void Command::clear_environment_variables() {
  environment_variables_.Clear();
}
inline const ::google::devtools::remoteexecution::v1test::Command_EnvironmentVariable& Command::environment_variables(int index) const {
  // @@protoc_insertion_point(field_get:google.devtools.remoteexecution.v1test.Command.environment_variables)
  return environment_variables_.Get(index);
}
inline ::google::devtools::remoteexecution::v1test::Command_EnvironmentVariable* Command::mutable_environment_variables(int index) {
  // @@protoc_insertion_point(field_mutable:google.devtools.remoteexecution.v1test.Command.environment_variables)
  return environment_variables_.Mutable(index);
}
inline ::google::devtools::remoteexecution::v1test::Command_EnvironmentVariable* Command::add_environment_variables() {
  // @@protoc_insertion_point(field_add:google.devtools.remoteexecution.v1test.Command.environment_variables)
  return environment_variables_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::google::devtools::remoteexecution::v1test::Command_EnvironmentVariable >*
Command::mutable_environment_variables() {
  // @@protoc_insertion_point(field_mutable_list:google.devtools.remoteexecution.v1test.Command.environment_variables)
  return &environment_variables_;
}
inline const ::google::protobuf::RepeatedPtrField< ::google::devtools::remoteexecution::v1test::Command_EnvironmentVariable >&
Command::environment_variables() const {
  // @@protoc_insertion_point(field_list:google.devtools.remoteexecution.v1test.Command.environment_variables)
  return environment_variables_;
}

// -------------------------------------------------------------------

// Platform_Property

// string name = 1;
inline void Platform_Property::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Platform_Property::name() const {
  // @@protoc_insertion_point(field_get:google.devtools.remoteexecution.v1test.Platform.Property.name)
  return name_.GetNoArena();
}
inline void Platform_Property::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.devtools.remoteexecution.v1test.Platform.Property.name)
}
#if LANG_CXX11
inline void Platform_Property::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.devtools.remoteexecution.v1test.Platform.Property.name)
}
#endif
inline void Platform_Property::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.devtools.remoteexecution.v1test.Platform.Property.name)
}
inline void Platform_Property::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.devtools.remoteexecution.v1test.Platform.Property.name)
}
inline ::std::string* Platform_Property::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:google.devtools.remoteexecution.v1test.Platform.Property.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Platform_Property::release_name() {
  // @@protoc_insertion_point(field_release:google.devtools.remoteexecution.v1test.Platform.Property.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Platform_Property::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:google.devtools.remoteexecution.v1test.Platform.Property.name)
}

// string value = 2;
inline void Platform_Property::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Platform_Property::value() const {
  // @@protoc_insertion_point(field_get:google.devtools.remoteexecution.v1test.Platform.Property.value)
  return value_.GetNoArena();
}
inline void Platform_Property::set_value(const ::std::string& value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.devtools.remoteexecution.v1test.Platform.Property.value)
}
#if LANG_CXX11
inline void Platform_Property::set_value(::std::string&& value) {
  
  value_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.devtools.remoteexecution.v1test.Platform.Property.value)
}
#endif
inline void Platform_Property::set_value(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.devtools.remoteexecution.v1test.Platform.Property.value)
}
inline void Platform_Property::set_value(const char* value, size_t size) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.devtools.remoteexecution.v1test.Platform.Property.value)
}
inline ::std::string* Platform_Property::mutable_value() {
  
  // @@protoc_insertion_point(field_mutable:google.devtools.remoteexecution.v1test.Platform.Property.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Platform_Property::release_value() {
  // @@protoc_insertion_point(field_release:google.devtools.remoteexecution.v1test.Platform.Property.value)
  
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Platform_Property::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    
  } else {
    
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:google.devtools.remoteexecution.v1test.Platform.Property.value)
}

// -------------------------------------------------------------------

// Platform

// repeated .google.devtools.remoteexecution.v1test.Platform.Property properties = 1;
inline int Platform::properties_size() const {
  return properties_.size();
}
inline void Platform::clear_properties() {
  properties_.Clear();
}
inline const ::google::devtools::remoteexecution::v1test::Platform_Property& Platform::properties(int index) const {
  // @@protoc_insertion_point(field_get:google.devtools.remoteexecution.v1test.Platform.properties)
  return properties_.Get(index);
}
inline ::google::devtools::remoteexecution::v1test::Platform_Property* Platform::mutable_properties(int index) {
  // @@protoc_insertion_point(field_mutable:google.devtools.remoteexecution.v1test.Platform.properties)
  return properties_.Mutable(index);
}
inline ::google::devtools::remoteexecution::v1test::Platform_Property* Platform::add_properties() {
  // @@protoc_insertion_point(field_add:google.devtools.remoteexecution.v1test.Platform.properties)
  return properties_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::google::devtools::remoteexecution::v1test::Platform_Property >*
Platform::mutable_properties() {
  // @@protoc_insertion_point(field_mutable_list:google.devtools.remoteexecution.v1test.Platform.properties)
  return &properties_;
}
inline const ::google::protobuf::RepeatedPtrField< ::google::devtools::remoteexecution::v1test::Platform_Property >&
Platform::properties() const {
  // @@protoc_insertion_point(field_list:google.devtools.remoteexecution.v1test.Platform.properties)
  return properties_;
}

// -------------------------------------------------------------------

// Directory

// repeated .google.devtools.remoteexecution.v1test.FileNode files = 1;
inline int Directory::files_size() const {
  return files_.size();
}
inline void Directory::clear_files() {
  files_.Clear();
}
inline const ::google::devtools::remoteexecution::v1test::FileNode& Directory::files(int index) const {
  // @@protoc_insertion_point(field_get:google.devtools.remoteexecution.v1test.Directory.files)
  return files_.Get(index);
}
inline ::google::devtools::remoteexecution::v1test::FileNode* Directory::mutable_files(int index) {
  // @@protoc_insertion_point(field_mutable:google.devtools.remoteexecution.v1test.Directory.files)
  return files_.Mutable(index);
}
inline ::google::devtools::remoteexecution::v1test::FileNode* Directory::add_files() {
  // @@protoc_insertion_point(field_add:google.devtools.remoteexecution.v1test.Directory.files)
  return files_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::google::devtools::remoteexecution::v1test::FileNode >*
Directory::mutable_files() {
  // @@protoc_insertion_point(field_mutable_list:google.devtools.remoteexecution.v1test.Directory.files)
  return &files_;
}
inline const ::google::protobuf::RepeatedPtrField< ::google::devtools::remoteexecution::v1test::FileNode >&
Directory::files() const {
  // @@protoc_insertion_point(field_list:google.devtools.remoteexecution.v1test.Directory.files)
  return files_;
}

// repeated .google.devtools.remoteexecution.v1test.DirectoryNode directories = 2;
inline int Directory::directories_size() const {
  return directories_.size();
}
inline void Directory::clear_directories() {
  directories_.Clear();
}
inline const ::google::devtools::remoteexecution::v1test::DirectoryNode& Directory::directories(int index) const {
  // @@protoc_insertion_point(field_get:google.devtools.remoteexecution.v1test.Directory.directories)
  return directories_.Get(index);
}
inline ::google::devtools::remoteexecution::v1test::DirectoryNode* Directory::mutable_directories(int index) {
  // @@protoc_insertion_point(field_mutable:google.devtools.remoteexecution.v1test.Directory.directories)
  return directories_.Mutable(index);
}
inline ::google::devtools::remoteexecution::v1test::DirectoryNode* Directory::add_directories() {
  // @@protoc_insertion_point(field_add:google.devtools.remoteexecution.v1test.Directory.directories)
  return directories_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::google::devtools::remoteexecution::v1test::DirectoryNode >*
Directory::mutable_directories() {
  // @@protoc_insertion_point(field_mutable_list:google.devtools.remoteexecution.v1test.Directory.directories)
  return &directories_;
}
inline const ::google::protobuf::RepeatedPtrField< ::google::devtools::remoteexecution::v1test::DirectoryNode >&
Directory::directories() const {
  // @@protoc_insertion_point(field_list:google.devtools.remoteexecution.v1test.Directory.directories)
  return directories_;
}

// -------------------------------------------------------------------

// FileNode

// string name = 1;
inline void FileNode::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& FileNode::name() const {
  // @@protoc_insertion_point(field_get:google.devtools.remoteexecution.v1test.FileNode.name)
  return name_.GetNoArena();
}
inline void FileNode::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.devtools.remoteexecution.v1test.FileNode.name)
}
#if LANG_CXX11
inline void FileNode::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.devtools.remoteexecution.v1test.FileNode.name)
}
#endif
inline void FileNode::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.devtools.remoteexecution.v1test.FileNode.name)
}
inline void FileNode::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.devtools.remoteexecution.v1test.FileNode.name)
}
inline ::std::string* FileNode::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:google.devtools.remoteexecution.v1test.FileNode.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FileNode::release_name() {
  // @@protoc_insertion_point(field_release:google.devtools.remoteexecution.v1test.FileNode.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FileNode::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:google.devtools.remoteexecution.v1test.FileNode.name)
}

// .google.devtools.remoteexecution.v1test.Digest digest = 2;
inline bool FileNode::has_digest() const {
  return this != internal_default_instance() && digest_ != NULL;
}
inline void FileNode::clear_digest() {
  if (GetArenaNoVirtual() == NULL && digest_ != NULL) {
    delete digest_;
  }
  digest_ = NULL;
}
inline const ::google::devtools::remoteexecution::v1test::Digest& FileNode::digest() const {
  const ::google::devtools::remoteexecution::v1test::Digest* p = digest_;
  // @@protoc_insertion_point(field_get:google.devtools.remoteexecution.v1test.FileNode.digest)
  return p != NULL ? *p : *reinterpret_cast<const ::google::devtools::remoteexecution::v1test::Digest*>(
      &::google::devtools::remoteexecution::v1test::_Digest_default_instance_);
}
inline ::google::devtools::remoteexecution::v1test::Digest* FileNode::release_digest() {
  // @@protoc_insertion_point(field_release:google.devtools.remoteexecution.v1test.FileNode.digest)
  
  ::google::devtools::remoteexecution::v1test::Digest* temp = digest_;
  digest_ = NULL;
  return temp;
}
inline ::google::devtools::remoteexecution::v1test::Digest* FileNode::mutable_digest() {
  
  if (digest_ == NULL) {
    digest_ = new ::google::devtools::remoteexecution::v1test::Digest;
  }
  // @@protoc_insertion_point(field_mutable:google.devtools.remoteexecution.v1test.FileNode.digest)
  return digest_;
}
inline void FileNode::set_allocated_digest(::google::devtools::remoteexecution::v1test::Digest* digest) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete digest_;
  }
  if (digest) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      digest = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, digest, submessage_arena);
    }
    
  } else {
    
  }
  digest_ = digest;
  // @@protoc_insertion_point(field_set_allocated:google.devtools.remoteexecution.v1test.FileNode.digest)
}

// bool is_executable = 4;
inline void FileNode::clear_is_executable() {
  is_executable_ = false;
}
inline bool FileNode::is_executable() const {
  // @@protoc_insertion_point(field_get:google.devtools.remoteexecution.v1test.FileNode.is_executable)
  return is_executable_;
}
inline void FileNode::set_is_executable(bool value) {
  
  is_executable_ = value;
  // @@protoc_insertion_point(field_set:google.devtools.remoteexecution.v1test.FileNode.is_executable)
}

// -------------------------------------------------------------------

// DirectoryNode

// string name = 1;
inline void DirectoryNode::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DirectoryNode::name() const {
  // @@protoc_insertion_point(field_get:google.devtools.remoteexecution.v1test.DirectoryNode.name)
  return name_.GetNoArena();
}
inline void DirectoryNode::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.devtools.remoteexecution.v1test.DirectoryNode.name)
}
#if LANG_CXX11
inline void DirectoryNode::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.devtools.remoteexecution.v1test.DirectoryNode.name)
}
#endif
inline void DirectoryNode::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.devtools.remoteexecution.v1test.DirectoryNode.name)
}
inline void DirectoryNode::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.devtools.remoteexecution.v1test.DirectoryNode.name)
}
inline ::std::string* DirectoryNode::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:google.devtools.remoteexecution.v1test.DirectoryNode.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DirectoryNode::release_name() {
  // @@protoc_insertion_point(field_release:google.devtools.remoteexecution.v1test.DirectoryNode.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DirectoryNode::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:google.devtools.remoteexecution.v1test.DirectoryNode.name)
}

// .google.devtools.remoteexecution.v1test.Digest digest = 2;
inline bool DirectoryNode::has_digest() const {
  return this != internal_default_instance() && digest_ != NULL;
}
inline void DirectoryNode::clear_digest() {
  if (GetArenaNoVirtual() == NULL && digest_ != NULL) {
    delete digest_;
  }
  digest_ = NULL;
}
inline const ::google::devtools::remoteexecution::v1test::Digest& DirectoryNode::digest() const {
  const ::google::devtools::remoteexecution::v1test::Digest* p = digest_;
  // @@protoc_insertion_point(field_get:google.devtools.remoteexecution.v1test.DirectoryNode.digest)
  return p != NULL ? *p : *reinterpret_cast<const ::google::devtools::remoteexecution::v1test::Digest*>(
      &::google::devtools::remoteexecution::v1test::_Digest_default_instance_);
}
inline ::google::devtools::remoteexecution::v1test::Digest* DirectoryNode::release_digest() {
  // @@protoc_insertion_point(field_release:google.devtools.remoteexecution.v1test.DirectoryNode.digest)
  
  ::google::devtools::remoteexecution::v1test::Digest* temp = digest_;
  digest_ = NULL;
  return temp;
}
inline ::google::devtools::remoteexecution::v1test::Digest* DirectoryNode::mutable_digest() {
  
  if (digest_ == NULL) {
    digest_ = new ::google::devtools::remoteexecution::v1test::Digest;
  }
  // @@protoc_insertion_point(field_mutable:google.devtools.remoteexecution.v1test.DirectoryNode.digest)
  return digest_;
}
inline void DirectoryNode::set_allocated_digest(::google::devtools::remoteexecution::v1test::Digest* digest) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete digest_;
  }
  if (digest) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      digest = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, digest, submessage_arena);
    }
    
  } else {
    
  }
  digest_ = digest;
  // @@protoc_insertion_point(field_set_allocated:google.devtools.remoteexecution.v1test.DirectoryNode.digest)
}

// -------------------------------------------------------------------

// Digest

// string hash = 1;
inline void Digest::clear_hash() {
  hash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Digest::hash() const {
  // @@protoc_insertion_point(field_get:google.devtools.remoteexecution.v1test.Digest.hash)
  return hash_.GetNoArena();
}
inline void Digest::set_hash(const ::std::string& value) {
  
  hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.devtools.remoteexecution.v1test.Digest.hash)
}
#if LANG_CXX11
inline void Digest::set_hash(::std::string&& value) {
  
  hash_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.devtools.remoteexecution.v1test.Digest.hash)
}
#endif
inline void Digest::set_hash(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.devtools.remoteexecution.v1test.Digest.hash)
}
inline void Digest::set_hash(const char* value, size_t size) {
  
  hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.devtools.remoteexecution.v1test.Digest.hash)
}
inline ::std::string* Digest::mutable_hash() {
  
  // @@protoc_insertion_point(field_mutable:google.devtools.remoteexecution.v1test.Digest.hash)
  return hash_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Digest::release_hash() {
  // @@protoc_insertion_point(field_release:google.devtools.remoteexecution.v1test.Digest.hash)
  
  return hash_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Digest::set_allocated_hash(::std::string* hash) {
  if (hash != NULL) {
    
  } else {
    
  }
  hash_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), hash);
  // @@protoc_insertion_point(field_set_allocated:google.devtools.remoteexecution.v1test.Digest.hash)
}

// int64 size_bytes = 2;
inline void Digest::clear_size_bytes() {
  size_bytes_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 Digest::size_bytes() const {
  // @@protoc_insertion_point(field_get:google.devtools.remoteexecution.v1test.Digest.size_bytes)
  return size_bytes_;
}
inline void Digest::set_size_bytes(::google::protobuf::int64 value) {
  
  size_bytes_ = value;
  // @@protoc_insertion_point(field_set:google.devtools.remoteexecution.v1test.Digest.size_bytes)
}

// -------------------------------------------------------------------

// ActionResult

// repeated .google.devtools.remoteexecution.v1test.OutputFile output_files = 2;
inline int ActionResult::output_files_size() const {
  return output_files_.size();
}
inline void ActionResult::clear_output_files() {
  output_files_.Clear();
}
inline const ::google::devtools::remoteexecution::v1test::OutputFile& ActionResult::output_files(int index) const {
  // @@protoc_insertion_point(field_get:google.devtools.remoteexecution.v1test.ActionResult.output_files)
  return output_files_.Get(index);
}
inline ::google::devtools::remoteexecution::v1test::OutputFile* ActionResult::mutable_output_files(int index) {
  // @@protoc_insertion_point(field_mutable:google.devtools.remoteexecution.v1test.ActionResult.output_files)
  return output_files_.Mutable(index);
}
inline ::google::devtools::remoteexecution::v1test::OutputFile* ActionResult::add_output_files() {
  // @@protoc_insertion_point(field_add:google.devtools.remoteexecution.v1test.ActionResult.output_files)
  return output_files_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::google::devtools::remoteexecution::v1test::OutputFile >*
ActionResult::mutable_output_files() {
  // @@protoc_insertion_point(field_mutable_list:google.devtools.remoteexecution.v1test.ActionResult.output_files)
  return &output_files_;
}
inline const ::google::protobuf::RepeatedPtrField< ::google::devtools::remoteexecution::v1test::OutputFile >&
ActionResult::output_files() const {
  // @@protoc_insertion_point(field_list:google.devtools.remoteexecution.v1test.ActionResult.output_files)
  return output_files_;
}

// repeated .google.devtools.remoteexecution.v1test.OutputDirectory output_directories = 3;
inline int ActionResult::output_directories_size() const {
  return output_directories_.size();
}
inline void ActionResult::clear_output_directories() {
  output_directories_.Clear();
}
inline const ::google::devtools::remoteexecution::v1test::OutputDirectory& ActionResult::output_directories(int index) const {
  // @@protoc_insertion_point(field_get:google.devtools.remoteexecution.v1test.ActionResult.output_directories)
  return output_directories_.Get(index);
}
inline ::google::devtools::remoteexecution::v1test::OutputDirectory* ActionResult::mutable_output_directories(int index) {
  // @@protoc_insertion_point(field_mutable:google.devtools.remoteexecution.v1test.ActionResult.output_directories)
  return output_directories_.Mutable(index);
}
inline ::google::devtools::remoteexecution::v1test::OutputDirectory* ActionResult::add_output_directories() {
  // @@protoc_insertion_point(field_add:google.devtools.remoteexecution.v1test.ActionResult.output_directories)
  return output_directories_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::google::devtools::remoteexecution::v1test::OutputDirectory >*
ActionResult::mutable_output_directories() {
  // @@protoc_insertion_point(field_mutable_list:google.devtools.remoteexecution.v1test.ActionResult.output_directories)
  return &output_directories_;
}
inline const ::google::protobuf::RepeatedPtrField< ::google::devtools::remoteexecution::v1test::OutputDirectory >&
ActionResult::output_directories() const {
  // @@protoc_insertion_point(field_list:google.devtools.remoteexecution.v1test.ActionResult.output_directories)
  return output_directories_;
}

// int32 exit_code = 4;
inline void ActionResult::clear_exit_code() {
  exit_code_ = 0;
}
inline ::google::protobuf::int32 ActionResult::exit_code() const {
  // @@protoc_insertion_point(field_get:google.devtools.remoteexecution.v1test.ActionResult.exit_code)
  return exit_code_;
}
inline void ActionResult::set_exit_code(::google::protobuf::int32 value) {
  
  exit_code_ = value;
  // @@protoc_insertion_point(field_set:google.devtools.remoteexecution.v1test.ActionResult.exit_code)
}

// bytes stdout_raw = 5;
inline void ActionResult::clear_stdout_raw() {
  stdout_raw_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ActionResult::stdout_raw() const {
  // @@protoc_insertion_point(field_get:google.devtools.remoteexecution.v1test.ActionResult.stdout_raw)
  return stdout_raw_.GetNoArena();
}
inline void ActionResult::set_stdout_raw(const ::std::string& value) {
  
  stdout_raw_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.devtools.remoteexecution.v1test.ActionResult.stdout_raw)
}
#if LANG_CXX11
inline void ActionResult::set_stdout_raw(::std::string&& value) {
  
  stdout_raw_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.devtools.remoteexecution.v1test.ActionResult.stdout_raw)
}
#endif
inline void ActionResult::set_stdout_raw(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  stdout_raw_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.devtools.remoteexecution.v1test.ActionResult.stdout_raw)
}
inline void ActionResult::set_stdout_raw(const void* value, size_t size) {
  
  stdout_raw_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.devtools.remoteexecution.v1test.ActionResult.stdout_raw)
}
inline ::std::string* ActionResult::mutable_stdout_raw() {
  
  // @@protoc_insertion_point(field_mutable:google.devtools.remoteexecution.v1test.ActionResult.stdout_raw)
  return stdout_raw_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ActionResult::release_stdout_raw() {
  // @@protoc_insertion_point(field_release:google.devtools.remoteexecution.v1test.ActionResult.stdout_raw)
  
  return stdout_raw_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ActionResult::set_allocated_stdout_raw(::std::string* stdout_raw) {
  if (stdout_raw != NULL) {
    
  } else {
    
  }
  stdout_raw_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), stdout_raw);
  // @@protoc_insertion_point(field_set_allocated:google.devtools.remoteexecution.v1test.ActionResult.stdout_raw)
}

// .google.devtools.remoteexecution.v1test.Digest stdout_digest = 6;
inline bool ActionResult::has_stdout_digest() const {
  return this != internal_default_instance() && stdout_digest_ != NULL;
}
inline void ActionResult::clear_stdout_digest() {
  if (GetArenaNoVirtual() == NULL && stdout_digest_ != NULL) {
    delete stdout_digest_;
  }
  stdout_digest_ = NULL;
}
inline const ::google::devtools::remoteexecution::v1test::Digest& ActionResult::stdout_digest() const {
  const ::google::devtools::remoteexecution::v1test::Digest* p = stdout_digest_;
  // @@protoc_insertion_point(field_get:google.devtools.remoteexecution.v1test.ActionResult.stdout_digest)
  return p != NULL ? *p : *reinterpret_cast<const ::google::devtools::remoteexecution::v1test::Digest*>(
      &::google::devtools::remoteexecution::v1test::_Digest_default_instance_);
}
inline ::google::devtools::remoteexecution::v1test::Digest* ActionResult::release_stdout_digest() {
  // @@protoc_insertion_point(field_release:google.devtools.remoteexecution.v1test.ActionResult.stdout_digest)
  
  ::google::devtools::remoteexecution::v1test::Digest* temp = stdout_digest_;
  stdout_digest_ = NULL;
  return temp;
}
inline ::google::devtools::remoteexecution::v1test::Digest* ActionResult::mutable_stdout_digest() {
  
  if (stdout_digest_ == NULL) {
    stdout_digest_ = new ::google::devtools::remoteexecution::v1test::Digest;
  }
  // @@protoc_insertion_point(field_mutable:google.devtools.remoteexecution.v1test.ActionResult.stdout_digest)
  return stdout_digest_;
}
inline void ActionResult::set_allocated_stdout_digest(::google::devtools::remoteexecution::v1test::Digest* stdout_digest) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete stdout_digest_;
  }
  if (stdout_digest) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      stdout_digest = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, stdout_digest, submessage_arena);
    }
    
  } else {
    
  }
  stdout_digest_ = stdout_digest;
  // @@protoc_insertion_point(field_set_allocated:google.devtools.remoteexecution.v1test.ActionResult.stdout_digest)
}

// bytes stderr_raw = 7;
inline void ActionResult::clear_stderr_raw() {
  stderr_raw_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ActionResult::stderr_raw() const {
  // @@protoc_insertion_point(field_get:google.devtools.remoteexecution.v1test.ActionResult.stderr_raw)
  return stderr_raw_.GetNoArena();
}
inline void ActionResult::set_stderr_raw(const ::std::string& value) {
  
  stderr_raw_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.devtools.remoteexecution.v1test.ActionResult.stderr_raw)
}
#if LANG_CXX11
inline void ActionResult::set_stderr_raw(::std::string&& value) {
  
  stderr_raw_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.devtools.remoteexecution.v1test.ActionResult.stderr_raw)
}
#endif
inline void ActionResult::set_stderr_raw(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  stderr_raw_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.devtools.remoteexecution.v1test.ActionResult.stderr_raw)
}
inline void ActionResult::set_stderr_raw(const void* value, size_t size) {
  
  stderr_raw_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.devtools.remoteexecution.v1test.ActionResult.stderr_raw)
}
inline ::std::string* ActionResult::mutable_stderr_raw() {
  
  // @@protoc_insertion_point(field_mutable:google.devtools.remoteexecution.v1test.ActionResult.stderr_raw)
  return stderr_raw_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ActionResult::release_stderr_raw() {
  // @@protoc_insertion_point(field_release:google.devtools.remoteexecution.v1test.ActionResult.stderr_raw)
  
  return stderr_raw_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ActionResult::set_allocated_stderr_raw(::std::string* stderr_raw) {
  if (stderr_raw != NULL) {
    
  } else {
    
  }
  stderr_raw_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), stderr_raw);
  // @@protoc_insertion_point(field_set_allocated:google.devtools.remoteexecution.v1test.ActionResult.stderr_raw)
}

// .google.devtools.remoteexecution.v1test.Digest stderr_digest = 8;
inline bool ActionResult::has_stderr_digest() const {
  return this != internal_default_instance() && stderr_digest_ != NULL;
}
inline void ActionResult::clear_stderr_digest() {
  if (GetArenaNoVirtual() == NULL && stderr_digest_ != NULL) {
    delete stderr_digest_;
  }
  stderr_digest_ = NULL;
}
inline const ::google::devtools::remoteexecution::v1test::Digest& ActionResult::stderr_digest() const {
  const ::google::devtools::remoteexecution::v1test::Digest* p = stderr_digest_;
  // @@protoc_insertion_point(field_get:google.devtools.remoteexecution.v1test.ActionResult.stderr_digest)
  return p != NULL ? *p : *reinterpret_cast<const ::google::devtools::remoteexecution::v1test::Digest*>(
      &::google::devtools::remoteexecution::v1test::_Digest_default_instance_);
}
inline ::google::devtools::remoteexecution::v1test::Digest* ActionResult::release_stderr_digest() {
  // @@protoc_insertion_point(field_release:google.devtools.remoteexecution.v1test.ActionResult.stderr_digest)
  
  ::google::devtools::remoteexecution::v1test::Digest* temp = stderr_digest_;
  stderr_digest_ = NULL;
  return temp;
}
inline ::google::devtools::remoteexecution::v1test::Digest* ActionResult::mutable_stderr_digest() {
  
  if (stderr_digest_ == NULL) {
    stderr_digest_ = new ::google::devtools::remoteexecution::v1test::Digest;
  }
  // @@protoc_insertion_point(field_mutable:google.devtools.remoteexecution.v1test.ActionResult.stderr_digest)
  return stderr_digest_;
}
inline void ActionResult::set_allocated_stderr_digest(::google::devtools::remoteexecution::v1test::Digest* stderr_digest) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete stderr_digest_;
  }
  if (stderr_digest) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      stderr_digest = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, stderr_digest, submessage_arena);
    }
    
  } else {
    
  }
  stderr_digest_ = stderr_digest;
  // @@protoc_insertion_point(field_set_allocated:google.devtools.remoteexecution.v1test.ActionResult.stderr_digest)
}

// -------------------------------------------------------------------

// OutputFile

// string path = 1;
inline void OutputFile::clear_path() {
  path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& OutputFile::path() const {
  // @@protoc_insertion_point(field_get:google.devtools.remoteexecution.v1test.OutputFile.path)
  return path_.GetNoArena();
}
inline void OutputFile::set_path(const ::std::string& value) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.devtools.remoteexecution.v1test.OutputFile.path)
}
#if LANG_CXX11
inline void OutputFile::set_path(::std::string&& value) {
  
  path_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.devtools.remoteexecution.v1test.OutputFile.path)
}
#endif
inline void OutputFile::set_path(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.devtools.remoteexecution.v1test.OutputFile.path)
}
inline void OutputFile::set_path(const char* value, size_t size) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.devtools.remoteexecution.v1test.OutputFile.path)
}
inline ::std::string* OutputFile::mutable_path() {
  
  // @@protoc_insertion_point(field_mutable:google.devtools.remoteexecution.v1test.OutputFile.path)
  return path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* OutputFile::release_path() {
  // @@protoc_insertion_point(field_release:google.devtools.remoteexecution.v1test.OutputFile.path)
  
  return path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OutputFile::set_allocated_path(::std::string* path) {
  if (path != NULL) {
    
  } else {
    
  }
  path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), path);
  // @@protoc_insertion_point(field_set_allocated:google.devtools.remoteexecution.v1test.OutputFile.path)
}

// .google.devtools.remoteexecution.v1test.Digest digest = 2;
inline bool OutputFile::has_digest() const {
  return this != internal_default_instance() && digest_ != NULL;
}
inline void OutputFile::clear_digest() {
  if (GetArenaNoVirtual() == NULL && digest_ != NULL) {
    delete digest_;
  }
  digest_ = NULL;
}
inline const ::google::devtools::remoteexecution::v1test::Digest& OutputFile::digest() const {
  const ::google::devtools::remoteexecution::v1test::Digest* p = digest_;
  // @@protoc_insertion_point(field_get:google.devtools.remoteexecution.v1test.OutputFile.digest)
  return p != NULL ? *p : *reinterpret_cast<const ::google::devtools::remoteexecution::v1test::Digest*>(
      &::google::devtools::remoteexecution::v1test::_Digest_default_instance_);
}
inline ::google::devtools::remoteexecution::v1test::Digest* OutputFile::release_digest() {
  // @@protoc_insertion_point(field_release:google.devtools.remoteexecution.v1test.OutputFile.digest)
  
  ::google::devtools::remoteexecution::v1test::Digest* temp = digest_;
  digest_ = NULL;
  return temp;
}
inline ::google::devtools::remoteexecution::v1test::Digest* OutputFile::mutable_digest() {
  
  if (digest_ == NULL) {
    digest_ = new ::google::devtools::remoteexecution::v1test::Digest;
  }
  // @@protoc_insertion_point(field_mutable:google.devtools.remoteexecution.v1test.OutputFile.digest)
  return digest_;
}
inline void OutputFile::set_allocated_digest(::google::devtools::remoteexecution::v1test::Digest* digest) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete digest_;
  }
  if (digest) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      digest = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, digest, submessage_arena);
    }
    
  } else {
    
  }
  digest_ = digest;
  // @@protoc_insertion_point(field_set_allocated:google.devtools.remoteexecution.v1test.OutputFile.digest)
}

// bytes content = 3;
inline void OutputFile::clear_content() {
  content_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& OutputFile::content() const {
  // @@protoc_insertion_point(field_get:google.devtools.remoteexecution.v1test.OutputFile.content)
  return content_.GetNoArena();
}
inline void OutputFile::set_content(const ::std::string& value) {
  
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.devtools.remoteexecution.v1test.OutputFile.content)
}
#if LANG_CXX11
inline void OutputFile::set_content(::std::string&& value) {
  
  content_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.devtools.remoteexecution.v1test.OutputFile.content)
}
#endif
inline void OutputFile::set_content(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.devtools.remoteexecution.v1test.OutputFile.content)
}
inline void OutputFile::set_content(const void* value, size_t size) {
  
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.devtools.remoteexecution.v1test.OutputFile.content)
}
inline ::std::string* OutputFile::mutable_content() {
  
  // @@protoc_insertion_point(field_mutable:google.devtools.remoteexecution.v1test.OutputFile.content)
  return content_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* OutputFile::release_content() {
  // @@protoc_insertion_point(field_release:google.devtools.remoteexecution.v1test.OutputFile.content)
  
  return content_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OutputFile::set_allocated_content(::std::string* content) {
  if (content != NULL) {
    
  } else {
    
  }
  content_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), content);
  // @@protoc_insertion_point(field_set_allocated:google.devtools.remoteexecution.v1test.OutputFile.content)
}

// bool is_executable = 4;
inline void OutputFile::clear_is_executable() {
  is_executable_ = false;
}
inline bool OutputFile::is_executable() const {
  // @@protoc_insertion_point(field_get:google.devtools.remoteexecution.v1test.OutputFile.is_executable)
  return is_executable_;
}
inline void OutputFile::set_is_executable(bool value) {
  
  is_executable_ = value;
  // @@protoc_insertion_point(field_set:google.devtools.remoteexecution.v1test.OutputFile.is_executable)
}

// -------------------------------------------------------------------

// Tree

// .google.devtools.remoteexecution.v1test.Directory root = 1;
inline bool Tree::has_root() const {
  return this != internal_default_instance() && root_ != NULL;
}
inline void Tree::clear_root() {
  if (GetArenaNoVirtual() == NULL && root_ != NULL) {
    delete root_;
  }
  root_ = NULL;
}
inline const ::google::devtools::remoteexecution::v1test::Directory& Tree::root() const {
  const ::google::devtools::remoteexecution::v1test::Directory* p = root_;
  // @@protoc_insertion_point(field_get:google.devtools.remoteexecution.v1test.Tree.root)
  return p != NULL ? *p : *reinterpret_cast<const ::google::devtools::remoteexecution::v1test::Directory*>(
      &::google::devtools::remoteexecution::v1test::_Directory_default_instance_);
}
inline ::google::devtools::remoteexecution::v1test::Directory* Tree::release_root() {
  // @@protoc_insertion_point(field_release:google.devtools.remoteexecution.v1test.Tree.root)
  
  ::google::devtools::remoteexecution::v1test::Directory* temp = root_;
  root_ = NULL;
  return temp;
}
inline ::google::devtools::remoteexecution::v1test::Directory* Tree::mutable_root() {
  
  if (root_ == NULL) {
    root_ = new ::google::devtools::remoteexecution::v1test::Directory;
  }
  // @@protoc_insertion_point(field_mutable:google.devtools.remoteexecution.v1test.Tree.root)
  return root_;
}
inline void Tree::set_allocated_root(::google::devtools::remoteexecution::v1test::Directory* root) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete root_;
  }
  if (root) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      root = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, root, submessage_arena);
    }
    
  } else {
    
  }
  root_ = root;
  // @@protoc_insertion_point(field_set_allocated:google.devtools.remoteexecution.v1test.Tree.root)
}

// repeated .google.devtools.remoteexecution.v1test.Directory children = 2;
inline int Tree::children_size() const {
  return children_.size();
}
inline void Tree::clear_children() {
  children_.Clear();
}
inline const ::google::devtools::remoteexecution::v1test::Directory& Tree::children(int index) const {
  // @@protoc_insertion_point(field_get:google.devtools.remoteexecution.v1test.Tree.children)
  return children_.Get(index);
}
inline ::google::devtools::remoteexecution::v1test::Directory* Tree::mutable_children(int index) {
  // @@protoc_insertion_point(field_mutable:google.devtools.remoteexecution.v1test.Tree.children)
  return children_.Mutable(index);
}
inline ::google::devtools::remoteexecution::v1test::Directory* Tree::add_children() {
  // @@protoc_insertion_point(field_add:google.devtools.remoteexecution.v1test.Tree.children)
  return children_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::google::devtools::remoteexecution::v1test::Directory >*
Tree::mutable_children() {
  // @@protoc_insertion_point(field_mutable_list:google.devtools.remoteexecution.v1test.Tree.children)
  return &children_;
}
inline const ::google::protobuf::RepeatedPtrField< ::google::devtools::remoteexecution::v1test::Directory >&
Tree::children() const {
  // @@protoc_insertion_point(field_list:google.devtools.remoteexecution.v1test.Tree.children)
  return children_;
}

// -------------------------------------------------------------------

// OutputDirectory

// string path = 1;
inline void OutputDirectory::clear_path() {
  path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& OutputDirectory::path() const {
  // @@protoc_insertion_point(field_get:google.devtools.remoteexecution.v1test.OutputDirectory.path)
  return path_.GetNoArena();
}
inline void OutputDirectory::set_path(const ::std::string& value) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.devtools.remoteexecution.v1test.OutputDirectory.path)
}
#if LANG_CXX11
inline void OutputDirectory::set_path(::std::string&& value) {
  
  path_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.devtools.remoteexecution.v1test.OutputDirectory.path)
}
#endif
inline void OutputDirectory::set_path(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.devtools.remoteexecution.v1test.OutputDirectory.path)
}
inline void OutputDirectory::set_path(const char* value, size_t size) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.devtools.remoteexecution.v1test.OutputDirectory.path)
}
inline ::std::string* OutputDirectory::mutable_path() {
  
  // @@protoc_insertion_point(field_mutable:google.devtools.remoteexecution.v1test.OutputDirectory.path)
  return path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* OutputDirectory::release_path() {
  // @@protoc_insertion_point(field_release:google.devtools.remoteexecution.v1test.OutputDirectory.path)
  
  return path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OutputDirectory::set_allocated_path(::std::string* path) {
  if (path != NULL) {
    
  } else {
    
  }
  path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), path);
  // @@protoc_insertion_point(field_set_allocated:google.devtools.remoteexecution.v1test.OutputDirectory.path)
}

// .google.devtools.remoteexecution.v1test.Digest digest = 2;
inline bool OutputDirectory::has_digest() const {
  return this != internal_default_instance() && digest_ != NULL;
}
inline void OutputDirectory::clear_digest() {
  if (GetArenaNoVirtual() == NULL && digest_ != NULL) {
    delete digest_;
  }
  digest_ = NULL;
}
inline const ::google::devtools::remoteexecution::v1test::Digest& OutputDirectory::digest() const {
  const ::google::devtools::remoteexecution::v1test::Digest* p = digest_;
  // @@protoc_insertion_point(field_get:google.devtools.remoteexecution.v1test.OutputDirectory.digest)
  return p != NULL ? *p : *reinterpret_cast<const ::google::devtools::remoteexecution::v1test::Digest*>(
      &::google::devtools::remoteexecution::v1test::_Digest_default_instance_);
}
inline ::google::devtools::remoteexecution::v1test::Digest* OutputDirectory::release_digest() {
  // @@protoc_insertion_point(field_release:google.devtools.remoteexecution.v1test.OutputDirectory.digest)
  
  ::google::devtools::remoteexecution::v1test::Digest* temp = digest_;
  digest_ = NULL;
  return temp;
}
inline ::google::devtools::remoteexecution::v1test::Digest* OutputDirectory::mutable_digest() {
  
  if (digest_ == NULL) {
    digest_ = new ::google::devtools::remoteexecution::v1test::Digest;
  }
  // @@protoc_insertion_point(field_mutable:google.devtools.remoteexecution.v1test.OutputDirectory.digest)
  return digest_;
}
inline void OutputDirectory::set_allocated_digest(::google::devtools::remoteexecution::v1test::Digest* digest) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete digest_;
  }
  if (digest) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      digest = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, digest, submessage_arena);
    }
    
  } else {
    
  }
  digest_ = digest;
  // @@protoc_insertion_point(field_set_allocated:google.devtools.remoteexecution.v1test.OutputDirectory.digest)
}

// .google.devtools.remoteexecution.v1test.Digest tree_digest = 3;
inline bool OutputDirectory::has_tree_digest() const {
  return this != internal_default_instance() && tree_digest_ != NULL;
}
inline void OutputDirectory::clear_tree_digest() {
  if (GetArenaNoVirtual() == NULL && tree_digest_ != NULL) {
    delete tree_digest_;
  }
  tree_digest_ = NULL;
}
inline const ::google::devtools::remoteexecution::v1test::Digest& OutputDirectory::tree_digest() const {
  const ::google::devtools::remoteexecution::v1test::Digest* p = tree_digest_;
  // @@protoc_insertion_point(field_get:google.devtools.remoteexecution.v1test.OutputDirectory.tree_digest)
  return p != NULL ? *p : *reinterpret_cast<const ::google::devtools::remoteexecution::v1test::Digest*>(
      &::google::devtools::remoteexecution::v1test::_Digest_default_instance_);
}
inline ::google::devtools::remoteexecution::v1test::Digest* OutputDirectory::release_tree_digest() {
  // @@protoc_insertion_point(field_release:google.devtools.remoteexecution.v1test.OutputDirectory.tree_digest)
  
  ::google::devtools::remoteexecution::v1test::Digest* temp = tree_digest_;
  tree_digest_ = NULL;
  return temp;
}
inline ::google::devtools::remoteexecution::v1test::Digest* OutputDirectory::mutable_tree_digest() {
  
  if (tree_digest_ == NULL) {
    tree_digest_ = new ::google::devtools::remoteexecution::v1test::Digest;
  }
  // @@protoc_insertion_point(field_mutable:google.devtools.remoteexecution.v1test.OutputDirectory.tree_digest)
  return tree_digest_;
}
inline void OutputDirectory::set_allocated_tree_digest(::google::devtools::remoteexecution::v1test::Digest* tree_digest) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete tree_digest_;
  }
  if (tree_digest) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      tree_digest = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, tree_digest, submessage_arena);
    }
    
  } else {
    
  }
  tree_digest_ = tree_digest;
  // @@protoc_insertion_point(field_set_allocated:google.devtools.remoteexecution.v1test.OutputDirectory.tree_digest)
}

// -------------------------------------------------------------------

// ExecuteRequest

// string instance_name = 1;
inline void ExecuteRequest::clear_instance_name() {
  instance_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ExecuteRequest::instance_name() const {
  // @@protoc_insertion_point(field_get:google.devtools.remoteexecution.v1test.ExecuteRequest.instance_name)
  return instance_name_.GetNoArena();
}
inline void ExecuteRequest::set_instance_name(const ::std::string& value) {
  
  instance_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.devtools.remoteexecution.v1test.ExecuteRequest.instance_name)
}
#if LANG_CXX11
inline void ExecuteRequest::set_instance_name(::std::string&& value) {
  
  instance_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.devtools.remoteexecution.v1test.ExecuteRequest.instance_name)
}
#endif
inline void ExecuteRequest::set_instance_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  instance_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.devtools.remoteexecution.v1test.ExecuteRequest.instance_name)
}
inline void ExecuteRequest::set_instance_name(const char* value, size_t size) {
  
  instance_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.devtools.remoteexecution.v1test.ExecuteRequest.instance_name)
}
inline ::std::string* ExecuteRequest::mutable_instance_name() {
  
  // @@protoc_insertion_point(field_mutable:google.devtools.remoteexecution.v1test.ExecuteRequest.instance_name)
  return instance_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ExecuteRequest::release_instance_name() {
  // @@protoc_insertion_point(field_release:google.devtools.remoteexecution.v1test.ExecuteRequest.instance_name)
  
  return instance_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ExecuteRequest::set_allocated_instance_name(::std::string* instance_name) {
  if (instance_name != NULL) {
    
  } else {
    
  }
  instance_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), instance_name);
  // @@protoc_insertion_point(field_set_allocated:google.devtools.remoteexecution.v1test.ExecuteRequest.instance_name)
}

// .google.devtools.remoteexecution.v1test.Action action = 2;
inline bool ExecuteRequest::has_action() const {
  return this != internal_default_instance() && action_ != NULL;
}
inline void ExecuteRequest::clear_action() {
  if (GetArenaNoVirtual() == NULL && action_ != NULL) {
    delete action_;
  }
  action_ = NULL;
}
inline const ::google::devtools::remoteexecution::v1test::Action& ExecuteRequest::action() const {
  const ::google::devtools::remoteexecution::v1test::Action* p = action_;
  // @@protoc_insertion_point(field_get:google.devtools.remoteexecution.v1test.ExecuteRequest.action)
  return p != NULL ? *p : *reinterpret_cast<const ::google::devtools::remoteexecution::v1test::Action*>(
      &::google::devtools::remoteexecution::v1test::_Action_default_instance_);
}
inline ::google::devtools::remoteexecution::v1test::Action* ExecuteRequest::release_action() {
  // @@protoc_insertion_point(field_release:google.devtools.remoteexecution.v1test.ExecuteRequest.action)
  
  ::google::devtools::remoteexecution::v1test::Action* temp = action_;
  action_ = NULL;
  return temp;
}
inline ::google::devtools::remoteexecution::v1test::Action* ExecuteRequest::mutable_action() {
  
  if (action_ == NULL) {
    action_ = new ::google::devtools::remoteexecution::v1test::Action;
  }
  // @@protoc_insertion_point(field_mutable:google.devtools.remoteexecution.v1test.ExecuteRequest.action)
  return action_;
}
inline void ExecuteRequest::set_allocated_action(::google::devtools::remoteexecution::v1test::Action* action) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete action_;
  }
  if (action) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      action = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, action, submessage_arena);
    }
    
  } else {
    
  }
  action_ = action;
  // @@protoc_insertion_point(field_set_allocated:google.devtools.remoteexecution.v1test.ExecuteRequest.action)
}

// bool skip_cache_lookup = 3;
inline void ExecuteRequest::clear_skip_cache_lookup() {
  skip_cache_lookup_ = false;
}
inline bool ExecuteRequest::skip_cache_lookup() const {
  // @@protoc_insertion_point(field_get:google.devtools.remoteexecution.v1test.ExecuteRequest.skip_cache_lookup)
  return skip_cache_lookup_;
}
inline void ExecuteRequest::set_skip_cache_lookup(bool value) {
  
  skip_cache_lookup_ = value;
  // @@protoc_insertion_point(field_set:google.devtools.remoteexecution.v1test.ExecuteRequest.skip_cache_lookup)
}

// int32 total_input_file_count = 4;
inline void ExecuteRequest::clear_total_input_file_count() {
  total_input_file_count_ = 0;
}
inline ::google::protobuf::int32 ExecuteRequest::total_input_file_count() const {
  // @@protoc_insertion_point(field_get:google.devtools.remoteexecution.v1test.ExecuteRequest.total_input_file_count)
  return total_input_file_count_;
}
inline void ExecuteRequest::set_total_input_file_count(::google::protobuf::int32 value) {
  
  total_input_file_count_ = value;
  // @@protoc_insertion_point(field_set:google.devtools.remoteexecution.v1test.ExecuteRequest.total_input_file_count)
}

// int64 total_input_file_bytes = 5;
inline void ExecuteRequest::clear_total_input_file_bytes() {
  total_input_file_bytes_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 ExecuteRequest::total_input_file_bytes() const {
  // @@protoc_insertion_point(field_get:google.devtools.remoteexecution.v1test.ExecuteRequest.total_input_file_bytes)
  return total_input_file_bytes_;
}
inline void ExecuteRequest::set_total_input_file_bytes(::google::protobuf::int64 value) {
  
  total_input_file_bytes_ = value;
  // @@protoc_insertion_point(field_set:google.devtools.remoteexecution.v1test.ExecuteRequest.total_input_file_bytes)
}

// -------------------------------------------------------------------

// LogFile

// .google.devtools.remoteexecution.v1test.Digest digest = 1;
inline bool LogFile::has_digest() const {
  return this != internal_default_instance() && digest_ != NULL;
}
inline void LogFile::clear_digest() {
  if (GetArenaNoVirtual() == NULL && digest_ != NULL) {
    delete digest_;
  }
  digest_ = NULL;
}
inline const ::google::devtools::remoteexecution::v1test::Digest& LogFile::digest() const {
  const ::google::devtools::remoteexecution::v1test::Digest* p = digest_;
  // @@protoc_insertion_point(field_get:google.devtools.remoteexecution.v1test.LogFile.digest)
  return p != NULL ? *p : *reinterpret_cast<const ::google::devtools::remoteexecution::v1test::Digest*>(
      &::google::devtools::remoteexecution::v1test::_Digest_default_instance_);
}
inline ::google::devtools::remoteexecution::v1test::Digest* LogFile::release_digest() {
  // @@protoc_insertion_point(field_release:google.devtools.remoteexecution.v1test.LogFile.digest)
  
  ::google::devtools::remoteexecution::v1test::Digest* temp = digest_;
  digest_ = NULL;
  return temp;
}
inline ::google::devtools::remoteexecution::v1test::Digest* LogFile::mutable_digest() {
  
  if (digest_ == NULL) {
    digest_ = new ::google::devtools::remoteexecution::v1test::Digest;
  }
  // @@protoc_insertion_point(field_mutable:google.devtools.remoteexecution.v1test.LogFile.digest)
  return digest_;
}
inline void LogFile::set_allocated_digest(::google::devtools::remoteexecution::v1test::Digest* digest) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete digest_;
  }
  if (digest) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      digest = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, digest, submessage_arena);
    }
    
  } else {
    
  }
  digest_ = digest;
  // @@protoc_insertion_point(field_set_allocated:google.devtools.remoteexecution.v1test.LogFile.digest)
}

// bool human_readable = 2;
inline void LogFile::clear_human_readable() {
  human_readable_ = false;
}
inline bool LogFile::human_readable() const {
  // @@protoc_insertion_point(field_get:google.devtools.remoteexecution.v1test.LogFile.human_readable)
  return human_readable_;
}
inline void LogFile::set_human_readable(bool value) {
  
  human_readable_ = value;
  // @@protoc_insertion_point(field_set:google.devtools.remoteexecution.v1test.LogFile.human_readable)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// ExecuteResponse

// .google.devtools.remoteexecution.v1test.ActionResult result = 1;
inline bool ExecuteResponse::has_result() const {
  return this != internal_default_instance() && result_ != NULL;
}
inline void ExecuteResponse::clear_result() {
  if (GetArenaNoVirtual() == NULL && result_ != NULL) {
    delete result_;
  }
  result_ = NULL;
}
inline const ::google::devtools::remoteexecution::v1test::ActionResult& ExecuteResponse::result() const {
  const ::google::devtools::remoteexecution::v1test::ActionResult* p = result_;
  // @@protoc_insertion_point(field_get:google.devtools.remoteexecution.v1test.ExecuteResponse.result)
  return p != NULL ? *p : *reinterpret_cast<const ::google::devtools::remoteexecution::v1test::ActionResult*>(
      &::google::devtools::remoteexecution::v1test::_ActionResult_default_instance_);
}
inline ::google::devtools::remoteexecution::v1test::ActionResult* ExecuteResponse::release_result() {
  // @@protoc_insertion_point(field_release:google.devtools.remoteexecution.v1test.ExecuteResponse.result)
  
  ::google::devtools::remoteexecution::v1test::ActionResult* temp = result_;
  result_ = NULL;
  return temp;
}
inline ::google::devtools::remoteexecution::v1test::ActionResult* ExecuteResponse::mutable_result() {
  
  if (result_ == NULL) {
    result_ = new ::google::devtools::remoteexecution::v1test::ActionResult;
  }
  // @@protoc_insertion_point(field_mutable:google.devtools.remoteexecution.v1test.ExecuteResponse.result)
  return result_;
}
inline void ExecuteResponse::set_allocated_result(::google::devtools::remoteexecution::v1test::ActionResult* result) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete result_;
  }
  if (result) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      result = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, result, submessage_arena);
    }
    
  } else {
    
  }
  result_ = result;
  // @@protoc_insertion_point(field_set_allocated:google.devtools.remoteexecution.v1test.ExecuteResponse.result)
}

// bool cached_result = 2;
inline void ExecuteResponse::clear_cached_result() {
  cached_result_ = false;
}
inline bool ExecuteResponse::cached_result() const {
  // @@protoc_insertion_point(field_get:google.devtools.remoteexecution.v1test.ExecuteResponse.cached_result)
  return cached_result_;
}
inline void ExecuteResponse::set_cached_result(bool value) {
  
  cached_result_ = value;
  // @@protoc_insertion_point(field_set:google.devtools.remoteexecution.v1test.ExecuteResponse.cached_result)
}

// .google.rpc.Status status = 3;
inline bool ExecuteResponse::has_status() const {
  return this != internal_default_instance() && status_ != NULL;
}
inline const ::google::rpc::Status& ExecuteResponse::status() const {
  const ::google::rpc::Status* p = status_;
  // @@protoc_insertion_point(field_get:google.devtools.remoteexecution.v1test.ExecuteResponse.status)
  return p != NULL ? *p : *reinterpret_cast<const ::google::rpc::Status*>(
      &::google::rpc::_Status_default_instance_);
}
inline ::google::rpc::Status* ExecuteResponse::release_status() {
  // @@protoc_insertion_point(field_release:google.devtools.remoteexecution.v1test.ExecuteResponse.status)
  
  ::google::rpc::Status* temp = status_;
  status_ = NULL;
  return temp;
}
inline ::google::rpc::Status* ExecuteResponse::mutable_status() {
  
  if (status_ == NULL) {
    status_ = new ::google::rpc::Status;
  }
  // @@protoc_insertion_point(field_mutable:google.devtools.remoteexecution.v1test.ExecuteResponse.status)
  return status_;
}
inline void ExecuteResponse::set_allocated_status(::google::rpc::Status* status) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(status_);
  }
  if (status) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      status = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:google.devtools.remoteexecution.v1test.ExecuteResponse.status)
}

// map<string, .google.devtools.remoteexecution.v1test.LogFile> server_logs = 4;
inline int ExecuteResponse::server_logs_size() const {
  return server_logs_.size();
}
inline void ExecuteResponse::clear_server_logs() {
  server_logs_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::google::devtools::remoteexecution::v1test::LogFile >&
ExecuteResponse::server_logs() const {
  // @@protoc_insertion_point(field_map:google.devtools.remoteexecution.v1test.ExecuteResponse.server_logs)
  return server_logs_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::google::devtools::remoteexecution::v1test::LogFile >*
ExecuteResponse::mutable_server_logs() {
  // @@protoc_insertion_point(field_mutable_map:google.devtools.remoteexecution.v1test.ExecuteResponse.server_logs)
  return server_logs_.MutableMap();
}

// -------------------------------------------------------------------

// ExecuteOperationMetadata

// .google.devtools.remoteexecution.v1test.ExecuteOperationMetadata.Stage stage = 1;
inline void ExecuteOperationMetadata::clear_stage() {
  stage_ = 0;
}
inline ::google::devtools::remoteexecution::v1test::ExecuteOperationMetadata_Stage ExecuteOperationMetadata::stage() const {
  // @@protoc_insertion_point(field_get:google.devtools.remoteexecution.v1test.ExecuteOperationMetadata.stage)
  return static_cast< ::google::devtools::remoteexecution::v1test::ExecuteOperationMetadata_Stage >(stage_);
}
inline void ExecuteOperationMetadata::set_stage(::google::devtools::remoteexecution::v1test::ExecuteOperationMetadata_Stage value) {
  
  stage_ = value;
  // @@protoc_insertion_point(field_set:google.devtools.remoteexecution.v1test.ExecuteOperationMetadata.stage)
}

// .google.devtools.remoteexecution.v1test.Digest action_digest = 2;
inline bool ExecuteOperationMetadata::has_action_digest() const {
  return this != internal_default_instance() && action_digest_ != NULL;
}
inline void ExecuteOperationMetadata::clear_action_digest() {
  if (GetArenaNoVirtual() == NULL && action_digest_ != NULL) {
    delete action_digest_;
  }
  action_digest_ = NULL;
}
inline const ::google::devtools::remoteexecution::v1test::Digest& ExecuteOperationMetadata::action_digest() const {
  const ::google::devtools::remoteexecution::v1test::Digest* p = action_digest_;
  // @@protoc_insertion_point(field_get:google.devtools.remoteexecution.v1test.ExecuteOperationMetadata.action_digest)
  return p != NULL ? *p : *reinterpret_cast<const ::google::devtools::remoteexecution::v1test::Digest*>(
      &::google::devtools::remoteexecution::v1test::_Digest_default_instance_);
}
inline ::google::devtools::remoteexecution::v1test::Digest* ExecuteOperationMetadata::release_action_digest() {
  // @@protoc_insertion_point(field_release:google.devtools.remoteexecution.v1test.ExecuteOperationMetadata.action_digest)
  
  ::google::devtools::remoteexecution::v1test::Digest* temp = action_digest_;
  action_digest_ = NULL;
  return temp;
}
inline ::google::devtools::remoteexecution::v1test::Digest* ExecuteOperationMetadata::mutable_action_digest() {
  
  if (action_digest_ == NULL) {
    action_digest_ = new ::google::devtools::remoteexecution::v1test::Digest;
  }
  // @@protoc_insertion_point(field_mutable:google.devtools.remoteexecution.v1test.ExecuteOperationMetadata.action_digest)
  return action_digest_;
}
inline void ExecuteOperationMetadata::set_allocated_action_digest(::google::devtools::remoteexecution::v1test::Digest* action_digest) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete action_digest_;
  }
  if (action_digest) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      action_digest = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, action_digest, submessage_arena);
    }
    
  } else {
    
  }
  action_digest_ = action_digest;
  // @@protoc_insertion_point(field_set_allocated:google.devtools.remoteexecution.v1test.ExecuteOperationMetadata.action_digest)
}

// string stdout_stream_name = 3;
inline void ExecuteOperationMetadata::clear_stdout_stream_name() {
  stdout_stream_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ExecuteOperationMetadata::stdout_stream_name() const {
  // @@protoc_insertion_point(field_get:google.devtools.remoteexecution.v1test.ExecuteOperationMetadata.stdout_stream_name)
  return stdout_stream_name_.GetNoArena();
}
inline void ExecuteOperationMetadata::set_stdout_stream_name(const ::std::string& value) {
  
  stdout_stream_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.devtools.remoteexecution.v1test.ExecuteOperationMetadata.stdout_stream_name)
}
#if LANG_CXX11
inline void ExecuteOperationMetadata::set_stdout_stream_name(::std::string&& value) {
  
  stdout_stream_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.devtools.remoteexecution.v1test.ExecuteOperationMetadata.stdout_stream_name)
}
#endif
inline void ExecuteOperationMetadata::set_stdout_stream_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  stdout_stream_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.devtools.remoteexecution.v1test.ExecuteOperationMetadata.stdout_stream_name)
}
inline void ExecuteOperationMetadata::set_stdout_stream_name(const char* value, size_t size) {
  
  stdout_stream_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.devtools.remoteexecution.v1test.ExecuteOperationMetadata.stdout_stream_name)
}
inline ::std::string* ExecuteOperationMetadata::mutable_stdout_stream_name() {
  
  // @@protoc_insertion_point(field_mutable:google.devtools.remoteexecution.v1test.ExecuteOperationMetadata.stdout_stream_name)
  return stdout_stream_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ExecuteOperationMetadata::release_stdout_stream_name() {
  // @@protoc_insertion_point(field_release:google.devtools.remoteexecution.v1test.ExecuteOperationMetadata.stdout_stream_name)
  
  return stdout_stream_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ExecuteOperationMetadata::set_allocated_stdout_stream_name(::std::string* stdout_stream_name) {
  if (stdout_stream_name != NULL) {
    
  } else {
    
  }
  stdout_stream_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), stdout_stream_name);
  // @@protoc_insertion_point(field_set_allocated:google.devtools.remoteexecution.v1test.ExecuteOperationMetadata.stdout_stream_name)
}

// string stderr_stream_name = 4;
inline void ExecuteOperationMetadata::clear_stderr_stream_name() {
  stderr_stream_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ExecuteOperationMetadata::stderr_stream_name() const {
  // @@protoc_insertion_point(field_get:google.devtools.remoteexecution.v1test.ExecuteOperationMetadata.stderr_stream_name)
  return stderr_stream_name_.GetNoArena();
}
inline void ExecuteOperationMetadata::set_stderr_stream_name(const ::std::string& value) {
  
  stderr_stream_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.devtools.remoteexecution.v1test.ExecuteOperationMetadata.stderr_stream_name)
}
#if LANG_CXX11
inline void ExecuteOperationMetadata::set_stderr_stream_name(::std::string&& value) {
  
  stderr_stream_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.devtools.remoteexecution.v1test.ExecuteOperationMetadata.stderr_stream_name)
}
#endif
inline void ExecuteOperationMetadata::set_stderr_stream_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  stderr_stream_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.devtools.remoteexecution.v1test.ExecuteOperationMetadata.stderr_stream_name)
}
inline void ExecuteOperationMetadata::set_stderr_stream_name(const char* value, size_t size) {
  
  stderr_stream_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.devtools.remoteexecution.v1test.ExecuteOperationMetadata.stderr_stream_name)
}
inline ::std::string* ExecuteOperationMetadata::mutable_stderr_stream_name() {
  
  // @@protoc_insertion_point(field_mutable:google.devtools.remoteexecution.v1test.ExecuteOperationMetadata.stderr_stream_name)
  return stderr_stream_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ExecuteOperationMetadata::release_stderr_stream_name() {
  // @@protoc_insertion_point(field_release:google.devtools.remoteexecution.v1test.ExecuteOperationMetadata.stderr_stream_name)
  
  return stderr_stream_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ExecuteOperationMetadata::set_allocated_stderr_stream_name(::std::string* stderr_stream_name) {
  if (stderr_stream_name != NULL) {
    
  } else {
    
  }
  stderr_stream_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), stderr_stream_name);
  // @@protoc_insertion_point(field_set_allocated:google.devtools.remoteexecution.v1test.ExecuteOperationMetadata.stderr_stream_name)
}

// -------------------------------------------------------------------

// GetActionResultRequest

// string instance_name = 1;
inline void GetActionResultRequest::clear_instance_name() {
  instance_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetActionResultRequest::instance_name() const {
  // @@protoc_insertion_point(field_get:google.devtools.remoteexecution.v1test.GetActionResultRequest.instance_name)
  return instance_name_.GetNoArena();
}
inline void GetActionResultRequest::set_instance_name(const ::std::string& value) {
  
  instance_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.devtools.remoteexecution.v1test.GetActionResultRequest.instance_name)
}
#if LANG_CXX11
inline void GetActionResultRequest::set_instance_name(::std::string&& value) {
  
  instance_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.devtools.remoteexecution.v1test.GetActionResultRequest.instance_name)
}
#endif
inline void GetActionResultRequest::set_instance_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  instance_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.devtools.remoteexecution.v1test.GetActionResultRequest.instance_name)
}
inline void GetActionResultRequest::set_instance_name(const char* value, size_t size) {
  
  instance_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.devtools.remoteexecution.v1test.GetActionResultRequest.instance_name)
}
inline ::std::string* GetActionResultRequest::mutable_instance_name() {
  
  // @@protoc_insertion_point(field_mutable:google.devtools.remoteexecution.v1test.GetActionResultRequest.instance_name)
  return instance_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetActionResultRequest::release_instance_name() {
  // @@protoc_insertion_point(field_release:google.devtools.remoteexecution.v1test.GetActionResultRequest.instance_name)
  
  return instance_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetActionResultRequest::set_allocated_instance_name(::std::string* instance_name) {
  if (instance_name != NULL) {
    
  } else {
    
  }
  instance_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), instance_name);
  // @@protoc_insertion_point(field_set_allocated:google.devtools.remoteexecution.v1test.GetActionResultRequest.instance_name)
}

// .google.devtools.remoteexecution.v1test.Digest action_digest = 2;
inline bool GetActionResultRequest::has_action_digest() const {
  return this != internal_default_instance() && action_digest_ != NULL;
}
inline void GetActionResultRequest::clear_action_digest() {
  if (GetArenaNoVirtual() == NULL && action_digest_ != NULL) {
    delete action_digest_;
  }
  action_digest_ = NULL;
}
inline const ::google::devtools::remoteexecution::v1test::Digest& GetActionResultRequest::action_digest() const {
  const ::google::devtools::remoteexecution::v1test::Digest* p = action_digest_;
  // @@protoc_insertion_point(field_get:google.devtools.remoteexecution.v1test.GetActionResultRequest.action_digest)
  return p != NULL ? *p : *reinterpret_cast<const ::google::devtools::remoteexecution::v1test::Digest*>(
      &::google::devtools::remoteexecution::v1test::_Digest_default_instance_);
}
inline ::google::devtools::remoteexecution::v1test::Digest* GetActionResultRequest::release_action_digest() {
  // @@protoc_insertion_point(field_release:google.devtools.remoteexecution.v1test.GetActionResultRequest.action_digest)
  
  ::google::devtools::remoteexecution::v1test::Digest* temp = action_digest_;
  action_digest_ = NULL;
  return temp;
}
inline ::google::devtools::remoteexecution::v1test::Digest* GetActionResultRequest::mutable_action_digest() {
  
  if (action_digest_ == NULL) {
    action_digest_ = new ::google::devtools::remoteexecution::v1test::Digest;
  }
  // @@protoc_insertion_point(field_mutable:google.devtools.remoteexecution.v1test.GetActionResultRequest.action_digest)
  return action_digest_;
}
inline void GetActionResultRequest::set_allocated_action_digest(::google::devtools::remoteexecution::v1test::Digest* action_digest) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete action_digest_;
  }
  if (action_digest) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      action_digest = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, action_digest, submessage_arena);
    }
    
  } else {
    
  }
  action_digest_ = action_digest;
  // @@protoc_insertion_point(field_set_allocated:google.devtools.remoteexecution.v1test.GetActionResultRequest.action_digest)
}

// -------------------------------------------------------------------

// UpdateActionResultRequest

// string instance_name = 1;
inline void UpdateActionResultRequest::clear_instance_name() {
  instance_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UpdateActionResultRequest::instance_name() const {
  // @@protoc_insertion_point(field_get:google.devtools.remoteexecution.v1test.UpdateActionResultRequest.instance_name)
  return instance_name_.GetNoArena();
}
inline void UpdateActionResultRequest::set_instance_name(const ::std::string& value) {
  
  instance_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.devtools.remoteexecution.v1test.UpdateActionResultRequest.instance_name)
}
#if LANG_CXX11
inline void UpdateActionResultRequest::set_instance_name(::std::string&& value) {
  
  instance_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.devtools.remoteexecution.v1test.UpdateActionResultRequest.instance_name)
}
#endif
inline void UpdateActionResultRequest::set_instance_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  instance_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.devtools.remoteexecution.v1test.UpdateActionResultRequest.instance_name)
}
inline void UpdateActionResultRequest::set_instance_name(const char* value, size_t size) {
  
  instance_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.devtools.remoteexecution.v1test.UpdateActionResultRequest.instance_name)
}
inline ::std::string* UpdateActionResultRequest::mutable_instance_name() {
  
  // @@protoc_insertion_point(field_mutable:google.devtools.remoteexecution.v1test.UpdateActionResultRequest.instance_name)
  return instance_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UpdateActionResultRequest::release_instance_name() {
  // @@protoc_insertion_point(field_release:google.devtools.remoteexecution.v1test.UpdateActionResultRequest.instance_name)
  
  return instance_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UpdateActionResultRequest::set_allocated_instance_name(::std::string* instance_name) {
  if (instance_name != NULL) {
    
  } else {
    
  }
  instance_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), instance_name);
  // @@protoc_insertion_point(field_set_allocated:google.devtools.remoteexecution.v1test.UpdateActionResultRequest.instance_name)
}

// .google.devtools.remoteexecution.v1test.Digest action_digest = 2;
inline bool UpdateActionResultRequest::has_action_digest() const {
  return this != internal_default_instance() && action_digest_ != NULL;
}
inline void UpdateActionResultRequest::clear_action_digest() {
  if (GetArenaNoVirtual() == NULL && action_digest_ != NULL) {
    delete action_digest_;
  }
  action_digest_ = NULL;
}
inline const ::google::devtools::remoteexecution::v1test::Digest& UpdateActionResultRequest::action_digest() const {
  const ::google::devtools::remoteexecution::v1test::Digest* p = action_digest_;
  // @@protoc_insertion_point(field_get:google.devtools.remoteexecution.v1test.UpdateActionResultRequest.action_digest)
  return p != NULL ? *p : *reinterpret_cast<const ::google::devtools::remoteexecution::v1test::Digest*>(
      &::google::devtools::remoteexecution::v1test::_Digest_default_instance_);
}
inline ::google::devtools::remoteexecution::v1test::Digest* UpdateActionResultRequest::release_action_digest() {
  // @@protoc_insertion_point(field_release:google.devtools.remoteexecution.v1test.UpdateActionResultRequest.action_digest)
  
  ::google::devtools::remoteexecution::v1test::Digest* temp = action_digest_;
  action_digest_ = NULL;
  return temp;
}
inline ::google::devtools::remoteexecution::v1test::Digest* UpdateActionResultRequest::mutable_action_digest() {
  
  if (action_digest_ == NULL) {
    action_digest_ = new ::google::devtools::remoteexecution::v1test::Digest;
  }
  // @@protoc_insertion_point(field_mutable:google.devtools.remoteexecution.v1test.UpdateActionResultRequest.action_digest)
  return action_digest_;
}
inline void UpdateActionResultRequest::set_allocated_action_digest(::google::devtools::remoteexecution::v1test::Digest* action_digest) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete action_digest_;
  }
  if (action_digest) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      action_digest = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, action_digest, submessage_arena);
    }
    
  } else {
    
  }
  action_digest_ = action_digest;
  // @@protoc_insertion_point(field_set_allocated:google.devtools.remoteexecution.v1test.UpdateActionResultRequest.action_digest)
}

// .google.devtools.remoteexecution.v1test.ActionResult action_result = 3;
inline bool UpdateActionResultRequest::has_action_result() const {
  return this != internal_default_instance() && action_result_ != NULL;
}
inline void UpdateActionResultRequest::clear_action_result() {
  if (GetArenaNoVirtual() == NULL && action_result_ != NULL) {
    delete action_result_;
  }
  action_result_ = NULL;
}
inline const ::google::devtools::remoteexecution::v1test::ActionResult& UpdateActionResultRequest::action_result() const {
  const ::google::devtools::remoteexecution::v1test::ActionResult* p = action_result_;
  // @@protoc_insertion_point(field_get:google.devtools.remoteexecution.v1test.UpdateActionResultRequest.action_result)
  return p != NULL ? *p : *reinterpret_cast<const ::google::devtools::remoteexecution::v1test::ActionResult*>(
      &::google::devtools::remoteexecution::v1test::_ActionResult_default_instance_);
}
inline ::google::devtools::remoteexecution::v1test::ActionResult* UpdateActionResultRequest::release_action_result() {
  // @@protoc_insertion_point(field_release:google.devtools.remoteexecution.v1test.UpdateActionResultRequest.action_result)
  
  ::google::devtools::remoteexecution::v1test::ActionResult* temp = action_result_;
  action_result_ = NULL;
  return temp;
}
inline ::google::devtools::remoteexecution::v1test::ActionResult* UpdateActionResultRequest::mutable_action_result() {
  
  if (action_result_ == NULL) {
    action_result_ = new ::google::devtools::remoteexecution::v1test::ActionResult;
  }
  // @@protoc_insertion_point(field_mutable:google.devtools.remoteexecution.v1test.UpdateActionResultRequest.action_result)
  return action_result_;
}
inline void UpdateActionResultRequest::set_allocated_action_result(::google::devtools::remoteexecution::v1test::ActionResult* action_result) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete action_result_;
  }
  if (action_result) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      action_result = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, action_result, submessage_arena);
    }
    
  } else {
    
  }
  action_result_ = action_result;
  // @@protoc_insertion_point(field_set_allocated:google.devtools.remoteexecution.v1test.UpdateActionResultRequest.action_result)
}

// -------------------------------------------------------------------

// FindMissingBlobsRequest

// string instance_name = 1;
inline void FindMissingBlobsRequest::clear_instance_name() {
  instance_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& FindMissingBlobsRequest::instance_name() const {
  // @@protoc_insertion_point(field_get:google.devtools.remoteexecution.v1test.FindMissingBlobsRequest.instance_name)
  return instance_name_.GetNoArena();
}
inline void FindMissingBlobsRequest::set_instance_name(const ::std::string& value) {
  
  instance_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.devtools.remoteexecution.v1test.FindMissingBlobsRequest.instance_name)
}
#if LANG_CXX11
inline void FindMissingBlobsRequest::set_instance_name(::std::string&& value) {
  
  instance_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.devtools.remoteexecution.v1test.FindMissingBlobsRequest.instance_name)
}
#endif
inline void FindMissingBlobsRequest::set_instance_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  instance_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.devtools.remoteexecution.v1test.FindMissingBlobsRequest.instance_name)
}
inline void FindMissingBlobsRequest::set_instance_name(const char* value, size_t size) {
  
  instance_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.devtools.remoteexecution.v1test.FindMissingBlobsRequest.instance_name)
}
inline ::std::string* FindMissingBlobsRequest::mutable_instance_name() {
  
  // @@protoc_insertion_point(field_mutable:google.devtools.remoteexecution.v1test.FindMissingBlobsRequest.instance_name)
  return instance_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FindMissingBlobsRequest::release_instance_name() {
  // @@protoc_insertion_point(field_release:google.devtools.remoteexecution.v1test.FindMissingBlobsRequest.instance_name)
  
  return instance_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FindMissingBlobsRequest::set_allocated_instance_name(::std::string* instance_name) {
  if (instance_name != NULL) {
    
  } else {
    
  }
  instance_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), instance_name);
  // @@protoc_insertion_point(field_set_allocated:google.devtools.remoteexecution.v1test.FindMissingBlobsRequest.instance_name)
}

// repeated .google.devtools.remoteexecution.v1test.Digest blob_digests = 2;
inline int FindMissingBlobsRequest::blob_digests_size() const {
  return blob_digests_.size();
}
inline void FindMissingBlobsRequest::clear_blob_digests() {
  blob_digests_.Clear();
}
inline const ::google::devtools::remoteexecution::v1test::Digest& FindMissingBlobsRequest::blob_digests(int index) const {
  // @@protoc_insertion_point(field_get:google.devtools.remoteexecution.v1test.FindMissingBlobsRequest.blob_digests)
  return blob_digests_.Get(index);
}
inline ::google::devtools::remoteexecution::v1test::Digest* FindMissingBlobsRequest::mutable_blob_digests(int index) {
  // @@protoc_insertion_point(field_mutable:google.devtools.remoteexecution.v1test.FindMissingBlobsRequest.blob_digests)
  return blob_digests_.Mutable(index);
}
inline ::google::devtools::remoteexecution::v1test::Digest* FindMissingBlobsRequest::add_blob_digests() {
  // @@protoc_insertion_point(field_add:google.devtools.remoteexecution.v1test.FindMissingBlobsRequest.blob_digests)
  return blob_digests_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::google::devtools::remoteexecution::v1test::Digest >*
FindMissingBlobsRequest::mutable_blob_digests() {
  // @@protoc_insertion_point(field_mutable_list:google.devtools.remoteexecution.v1test.FindMissingBlobsRequest.blob_digests)
  return &blob_digests_;
}
inline const ::google::protobuf::RepeatedPtrField< ::google::devtools::remoteexecution::v1test::Digest >&
FindMissingBlobsRequest::blob_digests() const {
  // @@protoc_insertion_point(field_list:google.devtools.remoteexecution.v1test.FindMissingBlobsRequest.blob_digests)
  return blob_digests_;
}

// -------------------------------------------------------------------

// FindMissingBlobsResponse

// repeated .google.devtools.remoteexecution.v1test.Digest missing_blob_digests = 2;
inline int FindMissingBlobsResponse::missing_blob_digests_size() const {
  return missing_blob_digests_.size();
}
inline void FindMissingBlobsResponse::clear_missing_blob_digests() {
  missing_blob_digests_.Clear();
}
inline const ::google::devtools::remoteexecution::v1test::Digest& FindMissingBlobsResponse::missing_blob_digests(int index) const {
  // @@protoc_insertion_point(field_get:google.devtools.remoteexecution.v1test.FindMissingBlobsResponse.missing_blob_digests)
  return missing_blob_digests_.Get(index);
}
inline ::google::devtools::remoteexecution::v1test::Digest* FindMissingBlobsResponse::mutable_missing_blob_digests(int index) {
  // @@protoc_insertion_point(field_mutable:google.devtools.remoteexecution.v1test.FindMissingBlobsResponse.missing_blob_digests)
  return missing_blob_digests_.Mutable(index);
}
inline ::google::devtools::remoteexecution::v1test::Digest* FindMissingBlobsResponse::add_missing_blob_digests() {
  // @@protoc_insertion_point(field_add:google.devtools.remoteexecution.v1test.FindMissingBlobsResponse.missing_blob_digests)
  return missing_blob_digests_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::google::devtools::remoteexecution::v1test::Digest >*
FindMissingBlobsResponse::mutable_missing_blob_digests() {
  // @@protoc_insertion_point(field_mutable_list:google.devtools.remoteexecution.v1test.FindMissingBlobsResponse.missing_blob_digests)
  return &missing_blob_digests_;
}
inline const ::google::protobuf::RepeatedPtrField< ::google::devtools::remoteexecution::v1test::Digest >&
FindMissingBlobsResponse::missing_blob_digests() const {
  // @@protoc_insertion_point(field_list:google.devtools.remoteexecution.v1test.FindMissingBlobsResponse.missing_blob_digests)
  return missing_blob_digests_;
}

// -------------------------------------------------------------------

// UpdateBlobRequest

// .google.devtools.remoteexecution.v1test.Digest content_digest = 1;
inline bool UpdateBlobRequest::has_content_digest() const {
  return this != internal_default_instance() && content_digest_ != NULL;
}
inline void UpdateBlobRequest::clear_content_digest() {
  if (GetArenaNoVirtual() == NULL && content_digest_ != NULL) {
    delete content_digest_;
  }
  content_digest_ = NULL;
}
inline const ::google::devtools::remoteexecution::v1test::Digest& UpdateBlobRequest::content_digest() const {
  const ::google::devtools::remoteexecution::v1test::Digest* p = content_digest_;
  // @@protoc_insertion_point(field_get:google.devtools.remoteexecution.v1test.UpdateBlobRequest.content_digest)
  return p != NULL ? *p : *reinterpret_cast<const ::google::devtools::remoteexecution::v1test::Digest*>(
      &::google::devtools::remoteexecution::v1test::_Digest_default_instance_);
}
inline ::google::devtools::remoteexecution::v1test::Digest* UpdateBlobRequest::release_content_digest() {
  // @@protoc_insertion_point(field_release:google.devtools.remoteexecution.v1test.UpdateBlobRequest.content_digest)
  
  ::google::devtools::remoteexecution::v1test::Digest* temp = content_digest_;
  content_digest_ = NULL;
  return temp;
}
inline ::google::devtools::remoteexecution::v1test::Digest* UpdateBlobRequest::mutable_content_digest() {
  
  if (content_digest_ == NULL) {
    content_digest_ = new ::google::devtools::remoteexecution::v1test::Digest;
  }
  // @@protoc_insertion_point(field_mutable:google.devtools.remoteexecution.v1test.UpdateBlobRequest.content_digest)
  return content_digest_;
}
inline void UpdateBlobRequest::set_allocated_content_digest(::google::devtools::remoteexecution::v1test::Digest* content_digest) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete content_digest_;
  }
  if (content_digest) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      content_digest = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, content_digest, submessage_arena);
    }
    
  } else {
    
  }
  content_digest_ = content_digest;
  // @@protoc_insertion_point(field_set_allocated:google.devtools.remoteexecution.v1test.UpdateBlobRequest.content_digest)
}

// bytes data = 2;
inline void UpdateBlobRequest::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UpdateBlobRequest::data() const {
  // @@protoc_insertion_point(field_get:google.devtools.remoteexecution.v1test.UpdateBlobRequest.data)
  return data_.GetNoArena();
}
inline void UpdateBlobRequest::set_data(const ::std::string& value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.devtools.remoteexecution.v1test.UpdateBlobRequest.data)
}
#if LANG_CXX11
inline void UpdateBlobRequest::set_data(::std::string&& value) {
  
  data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.devtools.remoteexecution.v1test.UpdateBlobRequest.data)
}
#endif
inline void UpdateBlobRequest::set_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.devtools.remoteexecution.v1test.UpdateBlobRequest.data)
}
inline void UpdateBlobRequest::set_data(const void* value, size_t size) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.devtools.remoteexecution.v1test.UpdateBlobRequest.data)
}
inline ::std::string* UpdateBlobRequest::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:google.devtools.remoteexecution.v1test.UpdateBlobRequest.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UpdateBlobRequest::release_data() {
  // @@protoc_insertion_point(field_release:google.devtools.remoteexecution.v1test.UpdateBlobRequest.data)
  
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UpdateBlobRequest::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:google.devtools.remoteexecution.v1test.UpdateBlobRequest.data)
}

// -------------------------------------------------------------------

// BatchUpdateBlobsRequest

// string instance_name = 1;
inline void BatchUpdateBlobsRequest::clear_instance_name() {
  instance_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& BatchUpdateBlobsRequest::instance_name() const {
  // @@protoc_insertion_point(field_get:google.devtools.remoteexecution.v1test.BatchUpdateBlobsRequest.instance_name)
  return instance_name_.GetNoArena();
}
inline void BatchUpdateBlobsRequest::set_instance_name(const ::std::string& value) {
  
  instance_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.devtools.remoteexecution.v1test.BatchUpdateBlobsRequest.instance_name)
}
#if LANG_CXX11
inline void BatchUpdateBlobsRequest::set_instance_name(::std::string&& value) {
  
  instance_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.devtools.remoteexecution.v1test.BatchUpdateBlobsRequest.instance_name)
}
#endif
inline void BatchUpdateBlobsRequest::set_instance_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  instance_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.devtools.remoteexecution.v1test.BatchUpdateBlobsRequest.instance_name)
}
inline void BatchUpdateBlobsRequest::set_instance_name(const char* value, size_t size) {
  
  instance_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.devtools.remoteexecution.v1test.BatchUpdateBlobsRequest.instance_name)
}
inline ::std::string* BatchUpdateBlobsRequest::mutable_instance_name() {
  
  // @@protoc_insertion_point(field_mutable:google.devtools.remoteexecution.v1test.BatchUpdateBlobsRequest.instance_name)
  return instance_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BatchUpdateBlobsRequest::release_instance_name() {
  // @@protoc_insertion_point(field_release:google.devtools.remoteexecution.v1test.BatchUpdateBlobsRequest.instance_name)
  
  return instance_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BatchUpdateBlobsRequest::set_allocated_instance_name(::std::string* instance_name) {
  if (instance_name != NULL) {
    
  } else {
    
  }
  instance_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), instance_name);
  // @@protoc_insertion_point(field_set_allocated:google.devtools.remoteexecution.v1test.BatchUpdateBlobsRequest.instance_name)
}

// repeated .google.devtools.remoteexecution.v1test.UpdateBlobRequest requests = 2;
inline int BatchUpdateBlobsRequest::requests_size() const {
  return requests_.size();
}
inline void BatchUpdateBlobsRequest::clear_requests() {
  requests_.Clear();
}
inline const ::google::devtools::remoteexecution::v1test::UpdateBlobRequest& BatchUpdateBlobsRequest::requests(int index) const {
  // @@protoc_insertion_point(field_get:google.devtools.remoteexecution.v1test.BatchUpdateBlobsRequest.requests)
  return requests_.Get(index);
}
inline ::google::devtools::remoteexecution::v1test::UpdateBlobRequest* BatchUpdateBlobsRequest::mutable_requests(int index) {
  // @@protoc_insertion_point(field_mutable:google.devtools.remoteexecution.v1test.BatchUpdateBlobsRequest.requests)
  return requests_.Mutable(index);
}
inline ::google::devtools::remoteexecution::v1test::UpdateBlobRequest* BatchUpdateBlobsRequest::add_requests() {
  // @@protoc_insertion_point(field_add:google.devtools.remoteexecution.v1test.BatchUpdateBlobsRequest.requests)
  return requests_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::google::devtools::remoteexecution::v1test::UpdateBlobRequest >*
BatchUpdateBlobsRequest::mutable_requests() {
  // @@protoc_insertion_point(field_mutable_list:google.devtools.remoteexecution.v1test.BatchUpdateBlobsRequest.requests)
  return &requests_;
}
inline const ::google::protobuf::RepeatedPtrField< ::google::devtools::remoteexecution::v1test::UpdateBlobRequest >&
BatchUpdateBlobsRequest::requests() const {
  // @@protoc_insertion_point(field_list:google.devtools.remoteexecution.v1test.BatchUpdateBlobsRequest.requests)
  return requests_;
}

// -------------------------------------------------------------------

// BatchUpdateBlobsResponse_Response

// .google.devtools.remoteexecution.v1test.Digest blob_digest = 1;
inline bool BatchUpdateBlobsResponse_Response::has_blob_digest() const {
  return this != internal_default_instance() && blob_digest_ != NULL;
}
inline void BatchUpdateBlobsResponse_Response::clear_blob_digest() {
  if (GetArenaNoVirtual() == NULL && blob_digest_ != NULL) {
    delete blob_digest_;
  }
  blob_digest_ = NULL;
}
inline const ::google::devtools::remoteexecution::v1test::Digest& BatchUpdateBlobsResponse_Response::blob_digest() const {
  const ::google::devtools::remoteexecution::v1test::Digest* p = blob_digest_;
  // @@protoc_insertion_point(field_get:google.devtools.remoteexecution.v1test.BatchUpdateBlobsResponse.Response.blob_digest)
  return p != NULL ? *p : *reinterpret_cast<const ::google::devtools::remoteexecution::v1test::Digest*>(
      &::google::devtools::remoteexecution::v1test::_Digest_default_instance_);
}
inline ::google::devtools::remoteexecution::v1test::Digest* BatchUpdateBlobsResponse_Response::release_blob_digest() {
  // @@protoc_insertion_point(field_release:google.devtools.remoteexecution.v1test.BatchUpdateBlobsResponse.Response.blob_digest)
  
  ::google::devtools::remoteexecution::v1test::Digest* temp = blob_digest_;
  blob_digest_ = NULL;
  return temp;
}
inline ::google::devtools::remoteexecution::v1test::Digest* BatchUpdateBlobsResponse_Response::mutable_blob_digest() {
  
  if (blob_digest_ == NULL) {
    blob_digest_ = new ::google::devtools::remoteexecution::v1test::Digest;
  }
  // @@protoc_insertion_point(field_mutable:google.devtools.remoteexecution.v1test.BatchUpdateBlobsResponse.Response.blob_digest)
  return blob_digest_;
}
inline void BatchUpdateBlobsResponse_Response::set_allocated_blob_digest(::google::devtools::remoteexecution::v1test::Digest* blob_digest) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete blob_digest_;
  }
  if (blob_digest) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      blob_digest = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, blob_digest, submessage_arena);
    }
    
  } else {
    
  }
  blob_digest_ = blob_digest;
  // @@protoc_insertion_point(field_set_allocated:google.devtools.remoteexecution.v1test.BatchUpdateBlobsResponse.Response.blob_digest)
}

// .google.rpc.Status status = 2;
inline bool BatchUpdateBlobsResponse_Response::has_status() const {
  return this != internal_default_instance() && status_ != NULL;
}
inline const ::google::rpc::Status& BatchUpdateBlobsResponse_Response::status() const {
  const ::google::rpc::Status* p = status_;
  // @@protoc_insertion_point(field_get:google.devtools.remoteexecution.v1test.BatchUpdateBlobsResponse.Response.status)
  return p != NULL ? *p : *reinterpret_cast<const ::google::rpc::Status*>(
      &::google::rpc::_Status_default_instance_);
}
inline ::google::rpc::Status* BatchUpdateBlobsResponse_Response::release_status() {
  // @@protoc_insertion_point(field_release:google.devtools.remoteexecution.v1test.BatchUpdateBlobsResponse.Response.status)
  
  ::google::rpc::Status* temp = status_;
  status_ = NULL;
  return temp;
}
inline ::google::rpc::Status* BatchUpdateBlobsResponse_Response::mutable_status() {
  
  if (status_ == NULL) {
    status_ = new ::google::rpc::Status;
  }
  // @@protoc_insertion_point(field_mutable:google.devtools.remoteexecution.v1test.BatchUpdateBlobsResponse.Response.status)
  return status_;
}
inline void BatchUpdateBlobsResponse_Response::set_allocated_status(::google::rpc::Status* status) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(status_);
  }
  if (status) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      status = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:google.devtools.remoteexecution.v1test.BatchUpdateBlobsResponse.Response.status)
}

// -------------------------------------------------------------------

// BatchUpdateBlobsResponse

// repeated .google.devtools.remoteexecution.v1test.BatchUpdateBlobsResponse.Response responses = 1;
inline int BatchUpdateBlobsResponse::responses_size() const {
  return responses_.size();
}
inline void BatchUpdateBlobsResponse::clear_responses() {
  responses_.Clear();
}
inline const ::google::devtools::remoteexecution::v1test::BatchUpdateBlobsResponse_Response& BatchUpdateBlobsResponse::responses(int index) const {
  // @@protoc_insertion_point(field_get:google.devtools.remoteexecution.v1test.BatchUpdateBlobsResponse.responses)
  return responses_.Get(index);
}
inline ::google::devtools::remoteexecution::v1test::BatchUpdateBlobsResponse_Response* BatchUpdateBlobsResponse::mutable_responses(int index) {
  // @@protoc_insertion_point(field_mutable:google.devtools.remoteexecution.v1test.BatchUpdateBlobsResponse.responses)
  return responses_.Mutable(index);
}
inline ::google::devtools::remoteexecution::v1test::BatchUpdateBlobsResponse_Response* BatchUpdateBlobsResponse::add_responses() {
  // @@protoc_insertion_point(field_add:google.devtools.remoteexecution.v1test.BatchUpdateBlobsResponse.responses)
  return responses_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::google::devtools::remoteexecution::v1test::BatchUpdateBlobsResponse_Response >*
BatchUpdateBlobsResponse::mutable_responses() {
  // @@protoc_insertion_point(field_mutable_list:google.devtools.remoteexecution.v1test.BatchUpdateBlobsResponse.responses)
  return &responses_;
}
inline const ::google::protobuf::RepeatedPtrField< ::google::devtools::remoteexecution::v1test::BatchUpdateBlobsResponse_Response >&
BatchUpdateBlobsResponse::responses() const {
  // @@protoc_insertion_point(field_list:google.devtools.remoteexecution.v1test.BatchUpdateBlobsResponse.responses)
  return responses_;
}

// -------------------------------------------------------------------

// GetTreeRequest

// string instance_name = 1;
inline void GetTreeRequest::clear_instance_name() {
  instance_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetTreeRequest::instance_name() const {
  // @@protoc_insertion_point(field_get:google.devtools.remoteexecution.v1test.GetTreeRequest.instance_name)
  return instance_name_.GetNoArena();
}
inline void GetTreeRequest::set_instance_name(const ::std::string& value) {
  
  instance_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.devtools.remoteexecution.v1test.GetTreeRequest.instance_name)
}
#if LANG_CXX11
inline void GetTreeRequest::set_instance_name(::std::string&& value) {
  
  instance_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.devtools.remoteexecution.v1test.GetTreeRequest.instance_name)
}
#endif
inline void GetTreeRequest::set_instance_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  instance_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.devtools.remoteexecution.v1test.GetTreeRequest.instance_name)
}
inline void GetTreeRequest::set_instance_name(const char* value, size_t size) {
  
  instance_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.devtools.remoteexecution.v1test.GetTreeRequest.instance_name)
}
inline ::std::string* GetTreeRequest::mutable_instance_name() {
  
  // @@protoc_insertion_point(field_mutable:google.devtools.remoteexecution.v1test.GetTreeRequest.instance_name)
  return instance_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetTreeRequest::release_instance_name() {
  // @@protoc_insertion_point(field_release:google.devtools.remoteexecution.v1test.GetTreeRequest.instance_name)
  
  return instance_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetTreeRequest::set_allocated_instance_name(::std::string* instance_name) {
  if (instance_name != NULL) {
    
  } else {
    
  }
  instance_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), instance_name);
  // @@protoc_insertion_point(field_set_allocated:google.devtools.remoteexecution.v1test.GetTreeRequest.instance_name)
}

// .google.devtools.remoteexecution.v1test.Digest root_digest = 2;
inline bool GetTreeRequest::has_root_digest() const {
  return this != internal_default_instance() && root_digest_ != NULL;
}
inline void GetTreeRequest::clear_root_digest() {
  if (GetArenaNoVirtual() == NULL && root_digest_ != NULL) {
    delete root_digest_;
  }
  root_digest_ = NULL;
}
inline const ::google::devtools::remoteexecution::v1test::Digest& GetTreeRequest::root_digest() const {
  const ::google::devtools::remoteexecution::v1test::Digest* p = root_digest_;
  // @@protoc_insertion_point(field_get:google.devtools.remoteexecution.v1test.GetTreeRequest.root_digest)
  return p != NULL ? *p : *reinterpret_cast<const ::google::devtools::remoteexecution::v1test::Digest*>(
      &::google::devtools::remoteexecution::v1test::_Digest_default_instance_);
}
inline ::google::devtools::remoteexecution::v1test::Digest* GetTreeRequest::release_root_digest() {
  // @@protoc_insertion_point(field_release:google.devtools.remoteexecution.v1test.GetTreeRequest.root_digest)
  
  ::google::devtools::remoteexecution::v1test::Digest* temp = root_digest_;
  root_digest_ = NULL;
  return temp;
}
inline ::google::devtools::remoteexecution::v1test::Digest* GetTreeRequest::mutable_root_digest() {
  
  if (root_digest_ == NULL) {
    root_digest_ = new ::google::devtools::remoteexecution::v1test::Digest;
  }
  // @@protoc_insertion_point(field_mutable:google.devtools.remoteexecution.v1test.GetTreeRequest.root_digest)
  return root_digest_;
}
inline void GetTreeRequest::set_allocated_root_digest(::google::devtools::remoteexecution::v1test::Digest* root_digest) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete root_digest_;
  }
  if (root_digest) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      root_digest = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, root_digest, submessage_arena);
    }
    
  } else {
    
  }
  root_digest_ = root_digest;
  // @@protoc_insertion_point(field_set_allocated:google.devtools.remoteexecution.v1test.GetTreeRequest.root_digest)
}

// int32 page_size = 3;
inline void GetTreeRequest::clear_page_size() {
  page_size_ = 0;
}
inline ::google::protobuf::int32 GetTreeRequest::page_size() const {
  // @@protoc_insertion_point(field_get:google.devtools.remoteexecution.v1test.GetTreeRequest.page_size)
  return page_size_;
}
inline void GetTreeRequest::set_page_size(::google::protobuf::int32 value) {
  
  page_size_ = value;
  // @@protoc_insertion_point(field_set:google.devtools.remoteexecution.v1test.GetTreeRequest.page_size)
}

// string page_token = 4;
inline void GetTreeRequest::clear_page_token() {
  page_token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetTreeRequest::page_token() const {
  // @@protoc_insertion_point(field_get:google.devtools.remoteexecution.v1test.GetTreeRequest.page_token)
  return page_token_.GetNoArena();
}
inline void GetTreeRequest::set_page_token(const ::std::string& value) {
  
  page_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.devtools.remoteexecution.v1test.GetTreeRequest.page_token)
}
#if LANG_CXX11
inline void GetTreeRequest::set_page_token(::std::string&& value) {
  
  page_token_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.devtools.remoteexecution.v1test.GetTreeRequest.page_token)
}
#endif
inline void GetTreeRequest::set_page_token(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  page_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.devtools.remoteexecution.v1test.GetTreeRequest.page_token)
}
inline void GetTreeRequest::set_page_token(const char* value, size_t size) {
  
  page_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.devtools.remoteexecution.v1test.GetTreeRequest.page_token)
}
inline ::std::string* GetTreeRequest::mutable_page_token() {
  
  // @@protoc_insertion_point(field_mutable:google.devtools.remoteexecution.v1test.GetTreeRequest.page_token)
  return page_token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetTreeRequest::release_page_token() {
  // @@protoc_insertion_point(field_release:google.devtools.remoteexecution.v1test.GetTreeRequest.page_token)
  
  return page_token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetTreeRequest::set_allocated_page_token(::std::string* page_token) {
  if (page_token != NULL) {
    
  } else {
    
  }
  page_token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), page_token);
  // @@protoc_insertion_point(field_set_allocated:google.devtools.remoteexecution.v1test.GetTreeRequest.page_token)
}

// -------------------------------------------------------------------

// GetTreeResponse

// repeated .google.devtools.remoteexecution.v1test.Directory directories = 1;
inline int GetTreeResponse::directories_size() const {
  return directories_.size();
}
inline void GetTreeResponse::clear_directories() {
  directories_.Clear();
}
inline const ::google::devtools::remoteexecution::v1test::Directory& GetTreeResponse::directories(int index) const {
  // @@protoc_insertion_point(field_get:google.devtools.remoteexecution.v1test.GetTreeResponse.directories)
  return directories_.Get(index);
}
inline ::google::devtools::remoteexecution::v1test::Directory* GetTreeResponse::mutable_directories(int index) {
  // @@protoc_insertion_point(field_mutable:google.devtools.remoteexecution.v1test.GetTreeResponse.directories)
  return directories_.Mutable(index);
}
inline ::google::devtools::remoteexecution::v1test::Directory* GetTreeResponse::add_directories() {
  // @@protoc_insertion_point(field_add:google.devtools.remoteexecution.v1test.GetTreeResponse.directories)
  return directories_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::google::devtools::remoteexecution::v1test::Directory >*
GetTreeResponse::mutable_directories() {
  // @@protoc_insertion_point(field_mutable_list:google.devtools.remoteexecution.v1test.GetTreeResponse.directories)
  return &directories_;
}
inline const ::google::protobuf::RepeatedPtrField< ::google::devtools::remoteexecution::v1test::Directory >&
GetTreeResponse::directories() const {
  // @@protoc_insertion_point(field_list:google.devtools.remoteexecution.v1test.GetTreeResponse.directories)
  return directories_;
}

// string next_page_token = 2;
inline void GetTreeResponse::clear_next_page_token() {
  next_page_token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetTreeResponse::next_page_token() const {
  // @@protoc_insertion_point(field_get:google.devtools.remoteexecution.v1test.GetTreeResponse.next_page_token)
  return next_page_token_.GetNoArena();
}
inline void GetTreeResponse::set_next_page_token(const ::std::string& value) {
  
  next_page_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.devtools.remoteexecution.v1test.GetTreeResponse.next_page_token)
}
#if LANG_CXX11
inline void GetTreeResponse::set_next_page_token(::std::string&& value) {
  
  next_page_token_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.devtools.remoteexecution.v1test.GetTreeResponse.next_page_token)
}
#endif
inline void GetTreeResponse::set_next_page_token(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  next_page_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.devtools.remoteexecution.v1test.GetTreeResponse.next_page_token)
}
inline void GetTreeResponse::set_next_page_token(const char* value, size_t size) {
  
  next_page_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.devtools.remoteexecution.v1test.GetTreeResponse.next_page_token)
}
inline ::std::string* GetTreeResponse::mutable_next_page_token() {
  
  // @@protoc_insertion_point(field_mutable:google.devtools.remoteexecution.v1test.GetTreeResponse.next_page_token)
  return next_page_token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetTreeResponse::release_next_page_token() {
  // @@protoc_insertion_point(field_release:google.devtools.remoteexecution.v1test.GetTreeResponse.next_page_token)
  
  return next_page_token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetTreeResponse::set_allocated_next_page_token(::std::string* next_page_token) {
  if (next_page_token != NULL) {
    
  } else {
    
  }
  next_page_token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), next_page_token);
  // @@protoc_insertion_point(field_set_allocated:google.devtools.remoteexecution.v1test.GetTreeResponse.next_page_token)
}

// -------------------------------------------------------------------

// ToolDetails

// string tool_name = 1;
inline void ToolDetails::clear_tool_name() {
  tool_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ToolDetails::tool_name() const {
  // @@protoc_insertion_point(field_get:google.devtools.remoteexecution.v1test.ToolDetails.tool_name)
  return tool_name_.GetNoArena();
}
inline void ToolDetails::set_tool_name(const ::std::string& value) {
  
  tool_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.devtools.remoteexecution.v1test.ToolDetails.tool_name)
}
#if LANG_CXX11
inline void ToolDetails::set_tool_name(::std::string&& value) {
  
  tool_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.devtools.remoteexecution.v1test.ToolDetails.tool_name)
}
#endif
inline void ToolDetails::set_tool_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  tool_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.devtools.remoteexecution.v1test.ToolDetails.tool_name)
}
inline void ToolDetails::set_tool_name(const char* value, size_t size) {
  
  tool_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.devtools.remoteexecution.v1test.ToolDetails.tool_name)
}
inline ::std::string* ToolDetails::mutable_tool_name() {
  
  // @@protoc_insertion_point(field_mutable:google.devtools.remoteexecution.v1test.ToolDetails.tool_name)
  return tool_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ToolDetails::release_tool_name() {
  // @@protoc_insertion_point(field_release:google.devtools.remoteexecution.v1test.ToolDetails.tool_name)
  
  return tool_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ToolDetails::set_allocated_tool_name(::std::string* tool_name) {
  if (tool_name != NULL) {
    
  } else {
    
  }
  tool_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tool_name);
  // @@protoc_insertion_point(field_set_allocated:google.devtools.remoteexecution.v1test.ToolDetails.tool_name)
}

// string tool_version = 2;
inline void ToolDetails::clear_tool_version() {
  tool_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ToolDetails::tool_version() const {
  // @@protoc_insertion_point(field_get:google.devtools.remoteexecution.v1test.ToolDetails.tool_version)
  return tool_version_.GetNoArena();
}
inline void ToolDetails::set_tool_version(const ::std::string& value) {
  
  tool_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.devtools.remoteexecution.v1test.ToolDetails.tool_version)
}
#if LANG_CXX11
inline void ToolDetails::set_tool_version(::std::string&& value) {
  
  tool_version_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.devtools.remoteexecution.v1test.ToolDetails.tool_version)
}
#endif
inline void ToolDetails::set_tool_version(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  tool_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.devtools.remoteexecution.v1test.ToolDetails.tool_version)
}
inline void ToolDetails::set_tool_version(const char* value, size_t size) {
  
  tool_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.devtools.remoteexecution.v1test.ToolDetails.tool_version)
}
inline ::std::string* ToolDetails::mutable_tool_version() {
  
  // @@protoc_insertion_point(field_mutable:google.devtools.remoteexecution.v1test.ToolDetails.tool_version)
  return tool_version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ToolDetails::release_tool_version() {
  // @@protoc_insertion_point(field_release:google.devtools.remoteexecution.v1test.ToolDetails.tool_version)
  
  return tool_version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ToolDetails::set_allocated_tool_version(::std::string* tool_version) {
  if (tool_version != NULL) {
    
  } else {
    
  }
  tool_version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tool_version);
  // @@protoc_insertion_point(field_set_allocated:google.devtools.remoteexecution.v1test.ToolDetails.tool_version)
}

// -------------------------------------------------------------------

// RequestMetadata

// .google.devtools.remoteexecution.v1test.ToolDetails tool_details = 1;
inline bool RequestMetadata::has_tool_details() const {
  return this != internal_default_instance() && tool_details_ != NULL;
}
inline void RequestMetadata::clear_tool_details() {
  if (GetArenaNoVirtual() == NULL && tool_details_ != NULL) {
    delete tool_details_;
  }
  tool_details_ = NULL;
}
inline const ::google::devtools::remoteexecution::v1test::ToolDetails& RequestMetadata::tool_details() const {
  const ::google::devtools::remoteexecution::v1test::ToolDetails* p = tool_details_;
  // @@protoc_insertion_point(field_get:google.devtools.remoteexecution.v1test.RequestMetadata.tool_details)
  return p != NULL ? *p : *reinterpret_cast<const ::google::devtools::remoteexecution::v1test::ToolDetails*>(
      &::google::devtools::remoteexecution::v1test::_ToolDetails_default_instance_);
}
inline ::google::devtools::remoteexecution::v1test::ToolDetails* RequestMetadata::release_tool_details() {
  // @@protoc_insertion_point(field_release:google.devtools.remoteexecution.v1test.RequestMetadata.tool_details)
  
  ::google::devtools::remoteexecution::v1test::ToolDetails* temp = tool_details_;
  tool_details_ = NULL;
  return temp;
}
inline ::google::devtools::remoteexecution::v1test::ToolDetails* RequestMetadata::mutable_tool_details() {
  
  if (tool_details_ == NULL) {
    tool_details_ = new ::google::devtools::remoteexecution::v1test::ToolDetails;
  }
  // @@protoc_insertion_point(field_mutable:google.devtools.remoteexecution.v1test.RequestMetadata.tool_details)
  return tool_details_;
}
inline void RequestMetadata::set_allocated_tool_details(::google::devtools::remoteexecution::v1test::ToolDetails* tool_details) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete tool_details_;
  }
  if (tool_details) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      tool_details = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, tool_details, submessage_arena);
    }
    
  } else {
    
  }
  tool_details_ = tool_details;
  // @@protoc_insertion_point(field_set_allocated:google.devtools.remoteexecution.v1test.RequestMetadata.tool_details)
}

// string action_id = 2;
inline void RequestMetadata::clear_action_id() {
  action_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RequestMetadata::action_id() const {
  // @@protoc_insertion_point(field_get:google.devtools.remoteexecution.v1test.RequestMetadata.action_id)
  return action_id_.GetNoArena();
}
inline void RequestMetadata::set_action_id(const ::std::string& value) {
  
  action_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.devtools.remoteexecution.v1test.RequestMetadata.action_id)
}
#if LANG_CXX11
inline void RequestMetadata::set_action_id(::std::string&& value) {
  
  action_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.devtools.remoteexecution.v1test.RequestMetadata.action_id)
}
#endif
inline void RequestMetadata::set_action_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  action_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.devtools.remoteexecution.v1test.RequestMetadata.action_id)
}
inline void RequestMetadata::set_action_id(const char* value, size_t size) {
  
  action_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.devtools.remoteexecution.v1test.RequestMetadata.action_id)
}
inline ::std::string* RequestMetadata::mutable_action_id() {
  
  // @@protoc_insertion_point(field_mutable:google.devtools.remoteexecution.v1test.RequestMetadata.action_id)
  return action_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RequestMetadata::release_action_id() {
  // @@protoc_insertion_point(field_release:google.devtools.remoteexecution.v1test.RequestMetadata.action_id)
  
  return action_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RequestMetadata::set_allocated_action_id(::std::string* action_id) {
  if (action_id != NULL) {
    
  } else {
    
  }
  action_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), action_id);
  // @@protoc_insertion_point(field_set_allocated:google.devtools.remoteexecution.v1test.RequestMetadata.action_id)
}

// string tool_invocation_id = 3;
inline void RequestMetadata::clear_tool_invocation_id() {
  tool_invocation_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RequestMetadata::tool_invocation_id() const {
  // @@protoc_insertion_point(field_get:google.devtools.remoteexecution.v1test.RequestMetadata.tool_invocation_id)
  return tool_invocation_id_.GetNoArena();
}
inline void RequestMetadata::set_tool_invocation_id(const ::std::string& value) {
  
  tool_invocation_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.devtools.remoteexecution.v1test.RequestMetadata.tool_invocation_id)
}
#if LANG_CXX11
inline void RequestMetadata::set_tool_invocation_id(::std::string&& value) {
  
  tool_invocation_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.devtools.remoteexecution.v1test.RequestMetadata.tool_invocation_id)
}
#endif
inline void RequestMetadata::set_tool_invocation_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  tool_invocation_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.devtools.remoteexecution.v1test.RequestMetadata.tool_invocation_id)
}
inline void RequestMetadata::set_tool_invocation_id(const char* value, size_t size) {
  
  tool_invocation_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.devtools.remoteexecution.v1test.RequestMetadata.tool_invocation_id)
}
inline ::std::string* RequestMetadata::mutable_tool_invocation_id() {
  
  // @@protoc_insertion_point(field_mutable:google.devtools.remoteexecution.v1test.RequestMetadata.tool_invocation_id)
  return tool_invocation_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RequestMetadata::release_tool_invocation_id() {
  // @@protoc_insertion_point(field_release:google.devtools.remoteexecution.v1test.RequestMetadata.tool_invocation_id)
  
  return tool_invocation_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RequestMetadata::set_allocated_tool_invocation_id(::std::string* tool_invocation_id) {
  if (tool_invocation_id != NULL) {
    
  } else {
    
  }
  tool_invocation_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tool_invocation_id);
  // @@protoc_insertion_point(field_set_allocated:google.devtools.remoteexecution.v1test.RequestMetadata.tool_invocation_id)
}

// string correlated_invocations_id = 4;
inline void RequestMetadata::clear_correlated_invocations_id() {
  correlated_invocations_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RequestMetadata::correlated_invocations_id() const {
  // @@protoc_insertion_point(field_get:google.devtools.remoteexecution.v1test.RequestMetadata.correlated_invocations_id)
  return correlated_invocations_id_.GetNoArena();
}
inline void RequestMetadata::set_correlated_invocations_id(const ::std::string& value) {
  
  correlated_invocations_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.devtools.remoteexecution.v1test.RequestMetadata.correlated_invocations_id)
}
#if LANG_CXX11
inline void RequestMetadata::set_correlated_invocations_id(::std::string&& value) {
  
  correlated_invocations_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.devtools.remoteexecution.v1test.RequestMetadata.correlated_invocations_id)
}
#endif
inline void RequestMetadata::set_correlated_invocations_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  correlated_invocations_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.devtools.remoteexecution.v1test.RequestMetadata.correlated_invocations_id)
}
inline void RequestMetadata::set_correlated_invocations_id(const char* value, size_t size) {
  
  correlated_invocations_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.devtools.remoteexecution.v1test.RequestMetadata.correlated_invocations_id)
}
inline ::std::string* RequestMetadata::mutable_correlated_invocations_id() {
  
  // @@protoc_insertion_point(field_mutable:google.devtools.remoteexecution.v1test.RequestMetadata.correlated_invocations_id)
  return correlated_invocations_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RequestMetadata::release_correlated_invocations_id() {
  // @@protoc_insertion_point(field_release:google.devtools.remoteexecution.v1test.RequestMetadata.correlated_invocations_id)
  
  return correlated_invocations_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RequestMetadata::set_allocated_correlated_invocations_id(::std::string* correlated_invocations_id) {
  if (correlated_invocations_id != NULL) {
    
  } else {
    
  }
  correlated_invocations_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), correlated_invocations_id);
  // @@protoc_insertion_point(field_set_allocated:google.devtools.remoteexecution.v1test.RequestMetadata.correlated_invocations_id)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1test
}  // namespace remoteexecution
}  // namespace devtools
}  // namespace google

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::google::devtools::remoteexecution::v1test::ExecuteOperationMetadata_Stage> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::google::devtools::remoteexecution::v1test::ExecuteOperationMetadata_Stage>() {
  return ::google::devtools::remoteexecution::v1test::ExecuteOperationMetadata_Stage_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_google_2fdevtools_2fremoteexecution_2fv1test_2fremote_5fexecution_2eproto__INCLUDED
