// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/assistant/embedded/v1alpha1/embedded_assistant.proto

#ifndef PROTOBUF_google_2fassistant_2fembedded_2fv1alpha1_2fembedded_5fassistant_2eproto__INCLUDED
#define PROTOBUF_google_2fassistant_2fembedded_2fv1alpha1_2fembedded_5fassistant_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "google/api/annotations.pb.h"
#include "google/rpc/status.pb.h"
// @@protoc_insertion_point(includes)

namespace protobuf_google_2fassistant_2fembedded_2fv1alpha1_2fembedded_5fassistant_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[8];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsConverseConfigImpl();
void InitDefaultsConverseConfig();
void InitDefaultsAudioInConfigImpl();
void InitDefaultsAudioInConfig();
void InitDefaultsAudioOutConfigImpl();
void InitDefaultsAudioOutConfig();
void InitDefaultsConverseStateImpl();
void InitDefaultsConverseState();
void InitDefaultsAudioOutImpl();
void InitDefaultsAudioOut();
void InitDefaultsConverseResultImpl();
void InitDefaultsConverseResult();
void InitDefaultsConverseRequestImpl();
void InitDefaultsConverseRequest();
void InitDefaultsConverseResponseImpl();
void InitDefaultsConverseResponse();
inline void InitDefaults() {
  InitDefaultsConverseConfig();
  InitDefaultsAudioInConfig();
  InitDefaultsAudioOutConfig();
  InitDefaultsConverseState();
  InitDefaultsAudioOut();
  InitDefaultsConverseResult();
  InitDefaultsConverseRequest();
  InitDefaultsConverseResponse();
}
}  // namespace protobuf_google_2fassistant_2fembedded_2fv1alpha1_2fembedded_5fassistant_2eproto
namespace google {
namespace assistant {
namespace embedded {
namespace v1alpha1 {
class AudioInConfig;
class AudioInConfigDefaultTypeInternal;
extern AudioInConfigDefaultTypeInternal _AudioInConfig_default_instance_;
class AudioOut;
class AudioOutDefaultTypeInternal;
extern AudioOutDefaultTypeInternal _AudioOut_default_instance_;
class AudioOutConfig;
class AudioOutConfigDefaultTypeInternal;
extern AudioOutConfigDefaultTypeInternal _AudioOutConfig_default_instance_;
class ConverseConfig;
class ConverseConfigDefaultTypeInternal;
extern ConverseConfigDefaultTypeInternal _ConverseConfig_default_instance_;
class ConverseRequest;
class ConverseRequestDefaultTypeInternal;
extern ConverseRequestDefaultTypeInternal _ConverseRequest_default_instance_;
class ConverseResponse;
class ConverseResponseDefaultTypeInternal;
extern ConverseResponseDefaultTypeInternal _ConverseResponse_default_instance_;
class ConverseResult;
class ConverseResultDefaultTypeInternal;
extern ConverseResultDefaultTypeInternal _ConverseResult_default_instance_;
class ConverseState;
class ConverseStateDefaultTypeInternal;
extern ConverseStateDefaultTypeInternal _ConverseState_default_instance_;
}  // namespace v1alpha1
}  // namespace embedded
}  // namespace assistant
}  // namespace google
namespace google {
namespace assistant {
namespace embedded {
namespace v1alpha1 {

enum AudioInConfig_Encoding {
  AudioInConfig_Encoding_ENCODING_UNSPECIFIED = 0,
  AudioInConfig_Encoding_LINEAR16 = 1,
  AudioInConfig_Encoding_FLAC = 2,
  AudioInConfig_Encoding_AudioInConfig_Encoding_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  AudioInConfig_Encoding_AudioInConfig_Encoding_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool AudioInConfig_Encoding_IsValid(int value);
const AudioInConfig_Encoding AudioInConfig_Encoding_Encoding_MIN = AudioInConfig_Encoding_ENCODING_UNSPECIFIED;
const AudioInConfig_Encoding AudioInConfig_Encoding_Encoding_MAX = AudioInConfig_Encoding_FLAC;
const int AudioInConfig_Encoding_Encoding_ARRAYSIZE = AudioInConfig_Encoding_Encoding_MAX + 1;

const ::google::protobuf::EnumDescriptor* AudioInConfig_Encoding_descriptor();
inline const ::std::string& AudioInConfig_Encoding_Name(AudioInConfig_Encoding value) {
  return ::google::protobuf::internal::NameOfEnum(
    AudioInConfig_Encoding_descriptor(), value);
}
inline bool AudioInConfig_Encoding_Parse(
    const ::std::string& name, AudioInConfig_Encoding* value) {
  return ::google::protobuf::internal::ParseNamedEnum<AudioInConfig_Encoding>(
    AudioInConfig_Encoding_descriptor(), name, value);
}
enum AudioOutConfig_Encoding {
  AudioOutConfig_Encoding_ENCODING_UNSPECIFIED = 0,
  AudioOutConfig_Encoding_LINEAR16 = 1,
  AudioOutConfig_Encoding_MP3 = 2,
  AudioOutConfig_Encoding_OPUS_IN_OGG = 3,
  AudioOutConfig_Encoding_AudioOutConfig_Encoding_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  AudioOutConfig_Encoding_AudioOutConfig_Encoding_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool AudioOutConfig_Encoding_IsValid(int value);
const AudioOutConfig_Encoding AudioOutConfig_Encoding_Encoding_MIN = AudioOutConfig_Encoding_ENCODING_UNSPECIFIED;
const AudioOutConfig_Encoding AudioOutConfig_Encoding_Encoding_MAX = AudioOutConfig_Encoding_OPUS_IN_OGG;
const int AudioOutConfig_Encoding_Encoding_ARRAYSIZE = AudioOutConfig_Encoding_Encoding_MAX + 1;

const ::google::protobuf::EnumDescriptor* AudioOutConfig_Encoding_descriptor();
inline const ::std::string& AudioOutConfig_Encoding_Name(AudioOutConfig_Encoding value) {
  return ::google::protobuf::internal::NameOfEnum(
    AudioOutConfig_Encoding_descriptor(), value);
}
inline bool AudioOutConfig_Encoding_Parse(
    const ::std::string& name, AudioOutConfig_Encoding* value) {
  return ::google::protobuf::internal::ParseNamedEnum<AudioOutConfig_Encoding>(
    AudioOutConfig_Encoding_descriptor(), name, value);
}
enum ConverseResult_MicrophoneMode {
  ConverseResult_MicrophoneMode_MICROPHONE_MODE_UNSPECIFIED = 0,
  ConverseResult_MicrophoneMode_CLOSE_MICROPHONE = 1,
  ConverseResult_MicrophoneMode_DIALOG_FOLLOW_ON = 2,
  ConverseResult_MicrophoneMode_ConverseResult_MicrophoneMode_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  ConverseResult_MicrophoneMode_ConverseResult_MicrophoneMode_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool ConverseResult_MicrophoneMode_IsValid(int value);
const ConverseResult_MicrophoneMode ConverseResult_MicrophoneMode_MicrophoneMode_MIN = ConverseResult_MicrophoneMode_MICROPHONE_MODE_UNSPECIFIED;
const ConverseResult_MicrophoneMode ConverseResult_MicrophoneMode_MicrophoneMode_MAX = ConverseResult_MicrophoneMode_DIALOG_FOLLOW_ON;
const int ConverseResult_MicrophoneMode_MicrophoneMode_ARRAYSIZE = ConverseResult_MicrophoneMode_MicrophoneMode_MAX + 1;

const ::google::protobuf::EnumDescriptor* ConverseResult_MicrophoneMode_descriptor();
inline const ::std::string& ConverseResult_MicrophoneMode_Name(ConverseResult_MicrophoneMode value) {
  return ::google::protobuf::internal::NameOfEnum(
    ConverseResult_MicrophoneMode_descriptor(), value);
}
inline bool ConverseResult_MicrophoneMode_Parse(
    const ::std::string& name, ConverseResult_MicrophoneMode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ConverseResult_MicrophoneMode>(
    ConverseResult_MicrophoneMode_descriptor(), name, value);
}
enum ConverseResponse_EventType {
  ConverseResponse_EventType_EVENT_TYPE_UNSPECIFIED = 0,
  ConverseResponse_EventType_END_OF_UTTERANCE = 1,
  ConverseResponse_EventType_ConverseResponse_EventType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  ConverseResponse_EventType_ConverseResponse_EventType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool ConverseResponse_EventType_IsValid(int value);
const ConverseResponse_EventType ConverseResponse_EventType_EventType_MIN = ConverseResponse_EventType_EVENT_TYPE_UNSPECIFIED;
const ConverseResponse_EventType ConverseResponse_EventType_EventType_MAX = ConverseResponse_EventType_END_OF_UTTERANCE;
const int ConverseResponse_EventType_EventType_ARRAYSIZE = ConverseResponse_EventType_EventType_MAX + 1;

const ::google::protobuf::EnumDescriptor* ConverseResponse_EventType_descriptor();
inline const ::std::string& ConverseResponse_EventType_Name(ConverseResponse_EventType value) {
  return ::google::protobuf::internal::NameOfEnum(
    ConverseResponse_EventType_descriptor(), value);
}
inline bool ConverseResponse_EventType_Parse(
    const ::std::string& name, ConverseResponse_EventType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ConverseResponse_EventType>(
    ConverseResponse_EventType_descriptor(), name, value);
}
// ===================================================================

class ConverseConfig : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.assistant.embedded.v1alpha1.ConverseConfig) */ {
 public:
  ConverseConfig();
  virtual ~ConverseConfig();

  ConverseConfig(const ConverseConfig& from);

  inline ConverseConfig& operator=(const ConverseConfig& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ConverseConfig(ConverseConfig&& from) noexcept
    : ConverseConfig() {
    *this = ::std::move(from);
  }

  inline ConverseConfig& operator=(ConverseConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ConverseConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ConverseConfig* internal_default_instance() {
    return reinterpret_cast<const ConverseConfig*>(
               &_ConverseConfig_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(ConverseConfig* other);
  friend void swap(ConverseConfig& a, ConverseConfig& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ConverseConfig* New() const PROTOBUF_FINAL { return New(NULL); }

  ConverseConfig* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ConverseConfig& from);
  void MergeFrom(const ConverseConfig& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ConverseConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.assistant.embedded.v1alpha1.AudioInConfig audio_in_config = 1;
  bool has_audio_in_config() const;
  void clear_audio_in_config();
  static const int kAudioInConfigFieldNumber = 1;
  const ::google::assistant::embedded::v1alpha1::AudioInConfig& audio_in_config() const;
  ::google::assistant::embedded::v1alpha1::AudioInConfig* release_audio_in_config();
  ::google::assistant::embedded::v1alpha1::AudioInConfig* mutable_audio_in_config();
  void set_allocated_audio_in_config(::google::assistant::embedded::v1alpha1::AudioInConfig* audio_in_config);

  // .google.assistant.embedded.v1alpha1.AudioOutConfig audio_out_config = 2;
  bool has_audio_out_config() const;
  void clear_audio_out_config();
  static const int kAudioOutConfigFieldNumber = 2;
  const ::google::assistant::embedded::v1alpha1::AudioOutConfig& audio_out_config() const;
  ::google::assistant::embedded::v1alpha1::AudioOutConfig* release_audio_out_config();
  ::google::assistant::embedded::v1alpha1::AudioOutConfig* mutable_audio_out_config();
  void set_allocated_audio_out_config(::google::assistant::embedded::v1alpha1::AudioOutConfig* audio_out_config);

  // .google.assistant.embedded.v1alpha1.ConverseState converse_state = 3;
  bool has_converse_state() const;
  void clear_converse_state();
  static const int kConverseStateFieldNumber = 3;
  const ::google::assistant::embedded::v1alpha1::ConverseState& converse_state() const;
  ::google::assistant::embedded::v1alpha1::ConverseState* release_converse_state();
  ::google::assistant::embedded::v1alpha1::ConverseState* mutable_converse_state();
  void set_allocated_converse_state(::google::assistant::embedded::v1alpha1::ConverseState* converse_state);

  // @@protoc_insertion_point(class_scope:google.assistant.embedded.v1alpha1.ConverseConfig)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::assistant::embedded::v1alpha1::AudioInConfig* audio_in_config_;
  ::google::assistant::embedded::v1alpha1::AudioOutConfig* audio_out_config_;
  ::google::assistant::embedded::v1alpha1::ConverseState* converse_state_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fassistant_2fembedded_2fv1alpha1_2fembedded_5fassistant_2eproto::TableStruct;
  friend void ::protobuf_google_2fassistant_2fembedded_2fv1alpha1_2fembedded_5fassistant_2eproto::InitDefaultsConverseConfigImpl();
};
// -------------------------------------------------------------------

class AudioInConfig : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.assistant.embedded.v1alpha1.AudioInConfig) */ {
 public:
  AudioInConfig();
  virtual ~AudioInConfig();

  AudioInConfig(const AudioInConfig& from);

  inline AudioInConfig& operator=(const AudioInConfig& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AudioInConfig(AudioInConfig&& from) noexcept
    : AudioInConfig() {
    *this = ::std::move(from);
  }

  inline AudioInConfig& operator=(AudioInConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const AudioInConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AudioInConfig* internal_default_instance() {
    return reinterpret_cast<const AudioInConfig*>(
               &_AudioInConfig_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(AudioInConfig* other);
  friend void swap(AudioInConfig& a, AudioInConfig& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AudioInConfig* New() const PROTOBUF_FINAL { return New(NULL); }

  AudioInConfig* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const AudioInConfig& from);
  void MergeFrom(const AudioInConfig& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(AudioInConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef AudioInConfig_Encoding Encoding;
  static const Encoding ENCODING_UNSPECIFIED =
    AudioInConfig_Encoding_ENCODING_UNSPECIFIED;
  static const Encoding LINEAR16 =
    AudioInConfig_Encoding_LINEAR16;
  static const Encoding FLAC =
    AudioInConfig_Encoding_FLAC;
  static inline bool Encoding_IsValid(int value) {
    return AudioInConfig_Encoding_IsValid(value);
  }
  static const Encoding Encoding_MIN =
    AudioInConfig_Encoding_Encoding_MIN;
  static const Encoding Encoding_MAX =
    AudioInConfig_Encoding_Encoding_MAX;
  static const int Encoding_ARRAYSIZE =
    AudioInConfig_Encoding_Encoding_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Encoding_descriptor() {
    return AudioInConfig_Encoding_descriptor();
  }
  static inline const ::std::string& Encoding_Name(Encoding value) {
    return AudioInConfig_Encoding_Name(value);
  }
  static inline bool Encoding_Parse(const ::std::string& name,
      Encoding* value) {
    return AudioInConfig_Encoding_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // .google.assistant.embedded.v1alpha1.AudioInConfig.Encoding encoding = 1;
  void clear_encoding();
  static const int kEncodingFieldNumber = 1;
  ::google::assistant::embedded::v1alpha1::AudioInConfig_Encoding encoding() const;
  void set_encoding(::google::assistant::embedded::v1alpha1::AudioInConfig_Encoding value);

  // int32 sample_rate_hertz = 2;
  void clear_sample_rate_hertz();
  static const int kSampleRateHertzFieldNumber = 2;
  ::google::protobuf::int32 sample_rate_hertz() const;
  void set_sample_rate_hertz(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:google.assistant.embedded.v1alpha1.AudioInConfig)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  int encoding_;
  ::google::protobuf::int32 sample_rate_hertz_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fassistant_2fembedded_2fv1alpha1_2fembedded_5fassistant_2eproto::TableStruct;
  friend void ::protobuf_google_2fassistant_2fembedded_2fv1alpha1_2fembedded_5fassistant_2eproto::InitDefaultsAudioInConfigImpl();
};
// -------------------------------------------------------------------

class AudioOutConfig : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.assistant.embedded.v1alpha1.AudioOutConfig) */ {
 public:
  AudioOutConfig();
  virtual ~AudioOutConfig();

  AudioOutConfig(const AudioOutConfig& from);

  inline AudioOutConfig& operator=(const AudioOutConfig& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AudioOutConfig(AudioOutConfig&& from) noexcept
    : AudioOutConfig() {
    *this = ::std::move(from);
  }

  inline AudioOutConfig& operator=(AudioOutConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const AudioOutConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AudioOutConfig* internal_default_instance() {
    return reinterpret_cast<const AudioOutConfig*>(
               &_AudioOutConfig_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(AudioOutConfig* other);
  friend void swap(AudioOutConfig& a, AudioOutConfig& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AudioOutConfig* New() const PROTOBUF_FINAL { return New(NULL); }

  AudioOutConfig* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const AudioOutConfig& from);
  void MergeFrom(const AudioOutConfig& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(AudioOutConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef AudioOutConfig_Encoding Encoding;
  static const Encoding ENCODING_UNSPECIFIED =
    AudioOutConfig_Encoding_ENCODING_UNSPECIFIED;
  static const Encoding LINEAR16 =
    AudioOutConfig_Encoding_LINEAR16;
  static const Encoding MP3 =
    AudioOutConfig_Encoding_MP3;
  static const Encoding OPUS_IN_OGG =
    AudioOutConfig_Encoding_OPUS_IN_OGG;
  static inline bool Encoding_IsValid(int value) {
    return AudioOutConfig_Encoding_IsValid(value);
  }
  static const Encoding Encoding_MIN =
    AudioOutConfig_Encoding_Encoding_MIN;
  static const Encoding Encoding_MAX =
    AudioOutConfig_Encoding_Encoding_MAX;
  static const int Encoding_ARRAYSIZE =
    AudioOutConfig_Encoding_Encoding_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Encoding_descriptor() {
    return AudioOutConfig_Encoding_descriptor();
  }
  static inline const ::std::string& Encoding_Name(Encoding value) {
    return AudioOutConfig_Encoding_Name(value);
  }
  static inline bool Encoding_Parse(const ::std::string& name,
      Encoding* value) {
    return AudioOutConfig_Encoding_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // .google.assistant.embedded.v1alpha1.AudioOutConfig.Encoding encoding = 1;
  void clear_encoding();
  static const int kEncodingFieldNumber = 1;
  ::google::assistant::embedded::v1alpha1::AudioOutConfig_Encoding encoding() const;
  void set_encoding(::google::assistant::embedded::v1alpha1::AudioOutConfig_Encoding value);

  // int32 sample_rate_hertz = 2;
  void clear_sample_rate_hertz();
  static const int kSampleRateHertzFieldNumber = 2;
  ::google::protobuf::int32 sample_rate_hertz() const;
  void set_sample_rate_hertz(::google::protobuf::int32 value);

  // int32 volume_percentage = 3;
  void clear_volume_percentage();
  static const int kVolumePercentageFieldNumber = 3;
  ::google::protobuf::int32 volume_percentage() const;
  void set_volume_percentage(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:google.assistant.embedded.v1alpha1.AudioOutConfig)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  int encoding_;
  ::google::protobuf::int32 sample_rate_hertz_;
  ::google::protobuf::int32 volume_percentage_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fassistant_2fembedded_2fv1alpha1_2fembedded_5fassistant_2eproto::TableStruct;
  friend void ::protobuf_google_2fassistant_2fembedded_2fv1alpha1_2fembedded_5fassistant_2eproto::InitDefaultsAudioOutConfigImpl();
};
// -------------------------------------------------------------------

class ConverseState : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.assistant.embedded.v1alpha1.ConverseState) */ {
 public:
  ConverseState();
  virtual ~ConverseState();

  ConverseState(const ConverseState& from);

  inline ConverseState& operator=(const ConverseState& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ConverseState(ConverseState&& from) noexcept
    : ConverseState() {
    *this = ::std::move(from);
  }

  inline ConverseState& operator=(ConverseState&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ConverseState& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ConverseState* internal_default_instance() {
    return reinterpret_cast<const ConverseState*>(
               &_ConverseState_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(ConverseState* other);
  friend void swap(ConverseState& a, ConverseState& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ConverseState* New() const PROTOBUF_FINAL { return New(NULL); }

  ConverseState* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ConverseState& from);
  void MergeFrom(const ConverseState& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ConverseState* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes conversation_state = 1;
  void clear_conversation_state();
  static const int kConversationStateFieldNumber = 1;
  const ::std::string& conversation_state() const;
  void set_conversation_state(const ::std::string& value);
  #if LANG_CXX11
  void set_conversation_state(::std::string&& value);
  #endif
  void set_conversation_state(const char* value);
  void set_conversation_state(const void* value, size_t size);
  ::std::string* mutable_conversation_state();
  ::std::string* release_conversation_state();
  void set_allocated_conversation_state(::std::string* conversation_state);

  // @@protoc_insertion_point(class_scope:google.assistant.embedded.v1alpha1.ConverseState)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr conversation_state_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fassistant_2fembedded_2fv1alpha1_2fembedded_5fassistant_2eproto::TableStruct;
  friend void ::protobuf_google_2fassistant_2fembedded_2fv1alpha1_2fembedded_5fassistant_2eproto::InitDefaultsConverseStateImpl();
};
// -------------------------------------------------------------------

class AudioOut : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.assistant.embedded.v1alpha1.AudioOut) */ {
 public:
  AudioOut();
  virtual ~AudioOut();

  AudioOut(const AudioOut& from);

  inline AudioOut& operator=(const AudioOut& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AudioOut(AudioOut&& from) noexcept
    : AudioOut() {
    *this = ::std::move(from);
  }

  inline AudioOut& operator=(AudioOut&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const AudioOut& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AudioOut* internal_default_instance() {
    return reinterpret_cast<const AudioOut*>(
               &_AudioOut_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(AudioOut* other);
  friend void swap(AudioOut& a, AudioOut& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AudioOut* New() const PROTOBUF_FINAL { return New(NULL); }

  AudioOut* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const AudioOut& from);
  void MergeFrom(const AudioOut& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(AudioOut* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes audio_data = 1;
  void clear_audio_data();
  static const int kAudioDataFieldNumber = 1;
  const ::std::string& audio_data() const;
  void set_audio_data(const ::std::string& value);
  #if LANG_CXX11
  void set_audio_data(::std::string&& value);
  #endif
  void set_audio_data(const char* value);
  void set_audio_data(const void* value, size_t size);
  ::std::string* mutable_audio_data();
  ::std::string* release_audio_data();
  void set_allocated_audio_data(::std::string* audio_data);

  // @@protoc_insertion_point(class_scope:google.assistant.embedded.v1alpha1.AudioOut)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr audio_data_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fassistant_2fembedded_2fv1alpha1_2fembedded_5fassistant_2eproto::TableStruct;
  friend void ::protobuf_google_2fassistant_2fembedded_2fv1alpha1_2fembedded_5fassistant_2eproto::InitDefaultsAudioOutImpl();
};
// -------------------------------------------------------------------

class ConverseResult : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.assistant.embedded.v1alpha1.ConverseResult) */ {
 public:
  ConverseResult();
  virtual ~ConverseResult();

  ConverseResult(const ConverseResult& from);

  inline ConverseResult& operator=(const ConverseResult& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ConverseResult(ConverseResult&& from) noexcept
    : ConverseResult() {
    *this = ::std::move(from);
  }

  inline ConverseResult& operator=(ConverseResult&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ConverseResult& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ConverseResult* internal_default_instance() {
    return reinterpret_cast<const ConverseResult*>(
               &_ConverseResult_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    5;

  void Swap(ConverseResult* other);
  friend void swap(ConverseResult& a, ConverseResult& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ConverseResult* New() const PROTOBUF_FINAL { return New(NULL); }

  ConverseResult* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ConverseResult& from);
  void MergeFrom(const ConverseResult& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ConverseResult* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef ConverseResult_MicrophoneMode MicrophoneMode;
  static const MicrophoneMode MICROPHONE_MODE_UNSPECIFIED =
    ConverseResult_MicrophoneMode_MICROPHONE_MODE_UNSPECIFIED;
  static const MicrophoneMode CLOSE_MICROPHONE =
    ConverseResult_MicrophoneMode_CLOSE_MICROPHONE;
  static const MicrophoneMode DIALOG_FOLLOW_ON =
    ConverseResult_MicrophoneMode_DIALOG_FOLLOW_ON;
  static inline bool MicrophoneMode_IsValid(int value) {
    return ConverseResult_MicrophoneMode_IsValid(value);
  }
  static const MicrophoneMode MicrophoneMode_MIN =
    ConverseResult_MicrophoneMode_MicrophoneMode_MIN;
  static const MicrophoneMode MicrophoneMode_MAX =
    ConverseResult_MicrophoneMode_MicrophoneMode_MAX;
  static const int MicrophoneMode_ARRAYSIZE =
    ConverseResult_MicrophoneMode_MicrophoneMode_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  MicrophoneMode_descriptor() {
    return ConverseResult_MicrophoneMode_descriptor();
  }
  static inline const ::std::string& MicrophoneMode_Name(MicrophoneMode value) {
    return ConverseResult_MicrophoneMode_Name(value);
  }
  static inline bool MicrophoneMode_Parse(const ::std::string& name,
      MicrophoneMode* value) {
    return ConverseResult_MicrophoneMode_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // string spoken_request_text = 1;
  void clear_spoken_request_text();
  static const int kSpokenRequestTextFieldNumber = 1;
  const ::std::string& spoken_request_text() const;
  void set_spoken_request_text(const ::std::string& value);
  #if LANG_CXX11
  void set_spoken_request_text(::std::string&& value);
  #endif
  void set_spoken_request_text(const char* value);
  void set_spoken_request_text(const char* value, size_t size);
  ::std::string* mutable_spoken_request_text();
  ::std::string* release_spoken_request_text();
  void set_allocated_spoken_request_text(::std::string* spoken_request_text);

  // string spoken_response_text = 2;
  void clear_spoken_response_text();
  static const int kSpokenResponseTextFieldNumber = 2;
  const ::std::string& spoken_response_text() const;
  void set_spoken_response_text(const ::std::string& value);
  #if LANG_CXX11
  void set_spoken_response_text(::std::string&& value);
  #endif
  void set_spoken_response_text(const char* value);
  void set_spoken_response_text(const char* value, size_t size);
  ::std::string* mutable_spoken_response_text();
  ::std::string* release_spoken_response_text();
  void set_allocated_spoken_response_text(::std::string* spoken_response_text);

  // bytes conversation_state = 3;
  void clear_conversation_state();
  static const int kConversationStateFieldNumber = 3;
  const ::std::string& conversation_state() const;
  void set_conversation_state(const ::std::string& value);
  #if LANG_CXX11
  void set_conversation_state(::std::string&& value);
  #endif
  void set_conversation_state(const char* value);
  void set_conversation_state(const void* value, size_t size);
  ::std::string* mutable_conversation_state();
  ::std::string* release_conversation_state();
  void set_allocated_conversation_state(::std::string* conversation_state);

  // .google.assistant.embedded.v1alpha1.ConverseResult.MicrophoneMode microphone_mode = 4;
  void clear_microphone_mode();
  static const int kMicrophoneModeFieldNumber = 4;
  ::google::assistant::embedded::v1alpha1::ConverseResult_MicrophoneMode microphone_mode() const;
  void set_microphone_mode(::google::assistant::embedded::v1alpha1::ConverseResult_MicrophoneMode value);

  // int32 volume_percentage = 5;
  void clear_volume_percentage();
  static const int kVolumePercentageFieldNumber = 5;
  ::google::protobuf::int32 volume_percentage() const;
  void set_volume_percentage(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:google.assistant.embedded.v1alpha1.ConverseResult)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr spoken_request_text_;
  ::google::protobuf::internal::ArenaStringPtr spoken_response_text_;
  ::google::protobuf::internal::ArenaStringPtr conversation_state_;
  int microphone_mode_;
  ::google::protobuf::int32 volume_percentage_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fassistant_2fembedded_2fv1alpha1_2fembedded_5fassistant_2eproto::TableStruct;
  friend void ::protobuf_google_2fassistant_2fembedded_2fv1alpha1_2fembedded_5fassistant_2eproto::InitDefaultsConverseResultImpl();
};
// -------------------------------------------------------------------

class ConverseRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.assistant.embedded.v1alpha1.ConverseRequest) */ {
 public:
  ConverseRequest();
  virtual ~ConverseRequest();

  ConverseRequest(const ConverseRequest& from);

  inline ConverseRequest& operator=(const ConverseRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ConverseRequest(ConverseRequest&& from) noexcept
    : ConverseRequest() {
    *this = ::std::move(from);
  }

  inline ConverseRequest& operator=(ConverseRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ConverseRequest& default_instance();

  enum ConverseRequestCase {
    kConfig = 1,
    kAudioIn = 2,
    CONVERSE_REQUEST_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ConverseRequest* internal_default_instance() {
    return reinterpret_cast<const ConverseRequest*>(
               &_ConverseRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    6;

  void Swap(ConverseRequest* other);
  friend void swap(ConverseRequest& a, ConverseRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ConverseRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  ConverseRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ConverseRequest& from);
  void MergeFrom(const ConverseRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ConverseRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.assistant.embedded.v1alpha1.ConverseConfig config = 1;
  bool has_config() const;
  void clear_config();
  static const int kConfigFieldNumber = 1;
  const ::google::assistant::embedded::v1alpha1::ConverseConfig& config() const;
  ::google::assistant::embedded::v1alpha1::ConverseConfig* release_config();
  ::google::assistant::embedded::v1alpha1::ConverseConfig* mutable_config();
  void set_allocated_config(::google::assistant::embedded::v1alpha1::ConverseConfig* config);

  // bytes audio_in = 2;
  private:
  bool has_audio_in() const;
  public:
  void clear_audio_in();
  static const int kAudioInFieldNumber = 2;
  const ::std::string& audio_in() const;
  void set_audio_in(const ::std::string& value);
  #if LANG_CXX11
  void set_audio_in(::std::string&& value);
  #endif
  void set_audio_in(const char* value);
  void set_audio_in(const void* value, size_t size);
  ::std::string* mutable_audio_in();
  ::std::string* release_audio_in();
  void set_allocated_audio_in(::std::string* audio_in);

  ConverseRequestCase converse_request_case() const;
  // @@protoc_insertion_point(class_scope:google.assistant.embedded.v1alpha1.ConverseRequest)
 private:
  void set_has_config();
  void set_has_audio_in();

  inline bool has_converse_request() const;
  void clear_converse_request();
  inline void clear_has_converse_request();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  union ConverseRequestUnion {
    ConverseRequestUnion() {}
    ::google::assistant::embedded::v1alpha1::ConverseConfig* config_;
    ::google::protobuf::internal::ArenaStringPtr audio_in_;
  } converse_request_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::protobuf_google_2fassistant_2fembedded_2fv1alpha1_2fembedded_5fassistant_2eproto::TableStruct;
  friend void ::protobuf_google_2fassistant_2fembedded_2fv1alpha1_2fembedded_5fassistant_2eproto::InitDefaultsConverseRequestImpl();
};
// -------------------------------------------------------------------

class ConverseResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.assistant.embedded.v1alpha1.ConverseResponse) */ {
 public:
  ConverseResponse();
  virtual ~ConverseResponse();

  ConverseResponse(const ConverseResponse& from);

  inline ConverseResponse& operator=(const ConverseResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ConverseResponse(ConverseResponse&& from) noexcept
    : ConverseResponse() {
    *this = ::std::move(from);
  }

  inline ConverseResponse& operator=(ConverseResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ConverseResponse& default_instance();

  enum ConverseResponseCase {
    kError = 1,
    kEventType = 2,
    kAudioOut = 3,
    kResult = 5,
    CONVERSE_RESPONSE_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ConverseResponse* internal_default_instance() {
    return reinterpret_cast<const ConverseResponse*>(
               &_ConverseResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    7;

  void Swap(ConverseResponse* other);
  friend void swap(ConverseResponse& a, ConverseResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ConverseResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  ConverseResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ConverseResponse& from);
  void MergeFrom(const ConverseResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ConverseResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef ConverseResponse_EventType EventType;
  static const EventType EVENT_TYPE_UNSPECIFIED =
    ConverseResponse_EventType_EVENT_TYPE_UNSPECIFIED;
  static const EventType END_OF_UTTERANCE =
    ConverseResponse_EventType_END_OF_UTTERANCE;
  static inline bool EventType_IsValid(int value) {
    return ConverseResponse_EventType_IsValid(value);
  }
  static const EventType EventType_MIN =
    ConverseResponse_EventType_EventType_MIN;
  static const EventType EventType_MAX =
    ConverseResponse_EventType_EventType_MAX;
  static const int EventType_ARRAYSIZE =
    ConverseResponse_EventType_EventType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  EventType_descriptor() {
    return ConverseResponse_EventType_descriptor();
  }
  static inline const ::std::string& EventType_Name(EventType value) {
    return ConverseResponse_EventType_Name(value);
  }
  static inline bool EventType_Parse(const ::std::string& name,
      EventType* value) {
    return ConverseResponse_EventType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // .google.rpc.Status error = 1;
  bool has_error() const;
  void clear_error();
  static const int kErrorFieldNumber = 1;
  const ::google::rpc::Status& error() const;
  ::google::rpc::Status* release_error();
  ::google::rpc::Status* mutable_error();
  void set_allocated_error(::google::rpc::Status* error);

  // .google.assistant.embedded.v1alpha1.ConverseResponse.EventType event_type = 2;
  private:
  bool has_event_type() const;
  public:
  void clear_event_type();
  static const int kEventTypeFieldNumber = 2;
  ::google::assistant::embedded::v1alpha1::ConverseResponse_EventType event_type() const;
  void set_event_type(::google::assistant::embedded::v1alpha1::ConverseResponse_EventType value);

  // .google.assistant.embedded.v1alpha1.AudioOut audio_out = 3;
  bool has_audio_out() const;
  void clear_audio_out();
  static const int kAudioOutFieldNumber = 3;
  const ::google::assistant::embedded::v1alpha1::AudioOut& audio_out() const;
  ::google::assistant::embedded::v1alpha1::AudioOut* release_audio_out();
  ::google::assistant::embedded::v1alpha1::AudioOut* mutable_audio_out();
  void set_allocated_audio_out(::google::assistant::embedded::v1alpha1::AudioOut* audio_out);

  // .google.assistant.embedded.v1alpha1.ConverseResult result = 5;
  bool has_result() const;
  void clear_result();
  static const int kResultFieldNumber = 5;
  const ::google::assistant::embedded::v1alpha1::ConverseResult& result() const;
  ::google::assistant::embedded::v1alpha1::ConverseResult* release_result();
  ::google::assistant::embedded::v1alpha1::ConverseResult* mutable_result();
  void set_allocated_result(::google::assistant::embedded::v1alpha1::ConverseResult* result);

  ConverseResponseCase converse_response_case() const;
  // @@protoc_insertion_point(class_scope:google.assistant.embedded.v1alpha1.ConverseResponse)
 private:
  void set_has_error();
  void set_has_event_type();
  void set_has_audio_out();
  void set_has_result();

  inline bool has_converse_response() const;
  void clear_converse_response();
  inline void clear_has_converse_response();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  union ConverseResponseUnion {
    ConverseResponseUnion() {}
    ::google::rpc::Status* error_;
    int event_type_;
    ::google::assistant::embedded::v1alpha1::AudioOut* audio_out_;
    ::google::assistant::embedded::v1alpha1::ConverseResult* result_;
  } converse_response_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::protobuf_google_2fassistant_2fembedded_2fv1alpha1_2fembedded_5fassistant_2eproto::TableStruct;
  friend void ::protobuf_google_2fassistant_2fembedded_2fv1alpha1_2fembedded_5fassistant_2eproto::InitDefaultsConverseResponseImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ConverseConfig

// .google.assistant.embedded.v1alpha1.AudioInConfig audio_in_config = 1;
inline bool ConverseConfig::has_audio_in_config() const {
  return this != internal_default_instance() && audio_in_config_ != NULL;
}
inline void ConverseConfig::clear_audio_in_config() {
  if (GetArenaNoVirtual() == NULL && audio_in_config_ != NULL) {
    delete audio_in_config_;
  }
  audio_in_config_ = NULL;
}
inline const ::google::assistant::embedded::v1alpha1::AudioInConfig& ConverseConfig::audio_in_config() const {
  const ::google::assistant::embedded::v1alpha1::AudioInConfig* p = audio_in_config_;
  // @@protoc_insertion_point(field_get:google.assistant.embedded.v1alpha1.ConverseConfig.audio_in_config)
  return p != NULL ? *p : *reinterpret_cast<const ::google::assistant::embedded::v1alpha1::AudioInConfig*>(
      &::google::assistant::embedded::v1alpha1::_AudioInConfig_default_instance_);
}
inline ::google::assistant::embedded::v1alpha1::AudioInConfig* ConverseConfig::release_audio_in_config() {
  // @@protoc_insertion_point(field_release:google.assistant.embedded.v1alpha1.ConverseConfig.audio_in_config)
  
  ::google::assistant::embedded::v1alpha1::AudioInConfig* temp = audio_in_config_;
  audio_in_config_ = NULL;
  return temp;
}
inline ::google::assistant::embedded::v1alpha1::AudioInConfig* ConverseConfig::mutable_audio_in_config() {
  
  if (audio_in_config_ == NULL) {
    audio_in_config_ = new ::google::assistant::embedded::v1alpha1::AudioInConfig;
  }
  // @@protoc_insertion_point(field_mutable:google.assistant.embedded.v1alpha1.ConverseConfig.audio_in_config)
  return audio_in_config_;
}
inline void ConverseConfig::set_allocated_audio_in_config(::google::assistant::embedded::v1alpha1::AudioInConfig* audio_in_config) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete audio_in_config_;
  }
  if (audio_in_config) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      audio_in_config = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, audio_in_config, submessage_arena);
    }
    
  } else {
    
  }
  audio_in_config_ = audio_in_config;
  // @@protoc_insertion_point(field_set_allocated:google.assistant.embedded.v1alpha1.ConverseConfig.audio_in_config)
}

// .google.assistant.embedded.v1alpha1.AudioOutConfig audio_out_config = 2;
inline bool ConverseConfig::has_audio_out_config() const {
  return this != internal_default_instance() && audio_out_config_ != NULL;
}
inline void ConverseConfig::clear_audio_out_config() {
  if (GetArenaNoVirtual() == NULL && audio_out_config_ != NULL) {
    delete audio_out_config_;
  }
  audio_out_config_ = NULL;
}
inline const ::google::assistant::embedded::v1alpha1::AudioOutConfig& ConverseConfig::audio_out_config() const {
  const ::google::assistant::embedded::v1alpha1::AudioOutConfig* p = audio_out_config_;
  // @@protoc_insertion_point(field_get:google.assistant.embedded.v1alpha1.ConverseConfig.audio_out_config)
  return p != NULL ? *p : *reinterpret_cast<const ::google::assistant::embedded::v1alpha1::AudioOutConfig*>(
      &::google::assistant::embedded::v1alpha1::_AudioOutConfig_default_instance_);
}
inline ::google::assistant::embedded::v1alpha1::AudioOutConfig* ConverseConfig::release_audio_out_config() {
  // @@protoc_insertion_point(field_release:google.assistant.embedded.v1alpha1.ConverseConfig.audio_out_config)
  
  ::google::assistant::embedded::v1alpha1::AudioOutConfig* temp = audio_out_config_;
  audio_out_config_ = NULL;
  return temp;
}
inline ::google::assistant::embedded::v1alpha1::AudioOutConfig* ConverseConfig::mutable_audio_out_config() {
  
  if (audio_out_config_ == NULL) {
    audio_out_config_ = new ::google::assistant::embedded::v1alpha1::AudioOutConfig;
  }
  // @@protoc_insertion_point(field_mutable:google.assistant.embedded.v1alpha1.ConverseConfig.audio_out_config)
  return audio_out_config_;
}
inline void ConverseConfig::set_allocated_audio_out_config(::google::assistant::embedded::v1alpha1::AudioOutConfig* audio_out_config) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete audio_out_config_;
  }
  if (audio_out_config) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      audio_out_config = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, audio_out_config, submessage_arena);
    }
    
  } else {
    
  }
  audio_out_config_ = audio_out_config;
  // @@protoc_insertion_point(field_set_allocated:google.assistant.embedded.v1alpha1.ConverseConfig.audio_out_config)
}

// .google.assistant.embedded.v1alpha1.ConverseState converse_state = 3;
inline bool ConverseConfig::has_converse_state() const {
  return this != internal_default_instance() && converse_state_ != NULL;
}
inline void ConverseConfig::clear_converse_state() {
  if (GetArenaNoVirtual() == NULL && converse_state_ != NULL) {
    delete converse_state_;
  }
  converse_state_ = NULL;
}
inline const ::google::assistant::embedded::v1alpha1::ConverseState& ConverseConfig::converse_state() const {
  const ::google::assistant::embedded::v1alpha1::ConverseState* p = converse_state_;
  // @@protoc_insertion_point(field_get:google.assistant.embedded.v1alpha1.ConverseConfig.converse_state)
  return p != NULL ? *p : *reinterpret_cast<const ::google::assistant::embedded::v1alpha1::ConverseState*>(
      &::google::assistant::embedded::v1alpha1::_ConverseState_default_instance_);
}
inline ::google::assistant::embedded::v1alpha1::ConverseState* ConverseConfig::release_converse_state() {
  // @@protoc_insertion_point(field_release:google.assistant.embedded.v1alpha1.ConverseConfig.converse_state)
  
  ::google::assistant::embedded::v1alpha1::ConverseState* temp = converse_state_;
  converse_state_ = NULL;
  return temp;
}
inline ::google::assistant::embedded::v1alpha1::ConverseState* ConverseConfig::mutable_converse_state() {
  
  if (converse_state_ == NULL) {
    converse_state_ = new ::google::assistant::embedded::v1alpha1::ConverseState;
  }
  // @@protoc_insertion_point(field_mutable:google.assistant.embedded.v1alpha1.ConverseConfig.converse_state)
  return converse_state_;
}
inline void ConverseConfig::set_allocated_converse_state(::google::assistant::embedded::v1alpha1::ConverseState* converse_state) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete converse_state_;
  }
  if (converse_state) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      converse_state = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, converse_state, submessage_arena);
    }
    
  } else {
    
  }
  converse_state_ = converse_state;
  // @@protoc_insertion_point(field_set_allocated:google.assistant.embedded.v1alpha1.ConverseConfig.converse_state)
}

// -------------------------------------------------------------------

// AudioInConfig

// .google.assistant.embedded.v1alpha1.AudioInConfig.Encoding encoding = 1;
inline void AudioInConfig::clear_encoding() {
  encoding_ = 0;
}
inline ::google::assistant::embedded::v1alpha1::AudioInConfig_Encoding AudioInConfig::encoding() const {
  // @@protoc_insertion_point(field_get:google.assistant.embedded.v1alpha1.AudioInConfig.encoding)
  return static_cast< ::google::assistant::embedded::v1alpha1::AudioInConfig_Encoding >(encoding_);
}
inline void AudioInConfig::set_encoding(::google::assistant::embedded::v1alpha1::AudioInConfig_Encoding value) {
  
  encoding_ = value;
  // @@protoc_insertion_point(field_set:google.assistant.embedded.v1alpha1.AudioInConfig.encoding)
}

// int32 sample_rate_hertz = 2;
inline void AudioInConfig::clear_sample_rate_hertz() {
  sample_rate_hertz_ = 0;
}
inline ::google::protobuf::int32 AudioInConfig::sample_rate_hertz() const {
  // @@protoc_insertion_point(field_get:google.assistant.embedded.v1alpha1.AudioInConfig.sample_rate_hertz)
  return sample_rate_hertz_;
}
inline void AudioInConfig::set_sample_rate_hertz(::google::protobuf::int32 value) {
  
  sample_rate_hertz_ = value;
  // @@protoc_insertion_point(field_set:google.assistant.embedded.v1alpha1.AudioInConfig.sample_rate_hertz)
}

// -------------------------------------------------------------------

// AudioOutConfig

// .google.assistant.embedded.v1alpha1.AudioOutConfig.Encoding encoding = 1;
inline void AudioOutConfig::clear_encoding() {
  encoding_ = 0;
}
inline ::google::assistant::embedded::v1alpha1::AudioOutConfig_Encoding AudioOutConfig::encoding() const {
  // @@protoc_insertion_point(field_get:google.assistant.embedded.v1alpha1.AudioOutConfig.encoding)
  return static_cast< ::google::assistant::embedded::v1alpha1::AudioOutConfig_Encoding >(encoding_);
}
inline void AudioOutConfig::set_encoding(::google::assistant::embedded::v1alpha1::AudioOutConfig_Encoding value) {
  
  encoding_ = value;
  // @@protoc_insertion_point(field_set:google.assistant.embedded.v1alpha1.AudioOutConfig.encoding)
}

// int32 sample_rate_hertz = 2;
inline void AudioOutConfig::clear_sample_rate_hertz() {
  sample_rate_hertz_ = 0;
}
inline ::google::protobuf::int32 AudioOutConfig::sample_rate_hertz() const {
  // @@protoc_insertion_point(field_get:google.assistant.embedded.v1alpha1.AudioOutConfig.sample_rate_hertz)
  return sample_rate_hertz_;
}
inline void AudioOutConfig::set_sample_rate_hertz(::google::protobuf::int32 value) {
  
  sample_rate_hertz_ = value;
  // @@protoc_insertion_point(field_set:google.assistant.embedded.v1alpha1.AudioOutConfig.sample_rate_hertz)
}

// int32 volume_percentage = 3;
inline void AudioOutConfig::clear_volume_percentage() {
  volume_percentage_ = 0;
}
inline ::google::protobuf::int32 AudioOutConfig::volume_percentage() const {
  // @@protoc_insertion_point(field_get:google.assistant.embedded.v1alpha1.AudioOutConfig.volume_percentage)
  return volume_percentage_;
}
inline void AudioOutConfig::set_volume_percentage(::google::protobuf::int32 value) {
  
  volume_percentage_ = value;
  // @@protoc_insertion_point(field_set:google.assistant.embedded.v1alpha1.AudioOutConfig.volume_percentage)
}

// -------------------------------------------------------------------

// ConverseState

// bytes conversation_state = 1;
inline void ConverseState::clear_conversation_state() {
  conversation_state_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ConverseState::conversation_state() const {
  // @@protoc_insertion_point(field_get:google.assistant.embedded.v1alpha1.ConverseState.conversation_state)
  return conversation_state_.GetNoArena();
}
inline void ConverseState::set_conversation_state(const ::std::string& value) {
  
  conversation_state_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.assistant.embedded.v1alpha1.ConverseState.conversation_state)
}
#if LANG_CXX11
inline void ConverseState::set_conversation_state(::std::string&& value) {
  
  conversation_state_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.assistant.embedded.v1alpha1.ConverseState.conversation_state)
}
#endif
inline void ConverseState::set_conversation_state(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  conversation_state_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.assistant.embedded.v1alpha1.ConverseState.conversation_state)
}
inline void ConverseState::set_conversation_state(const void* value, size_t size) {
  
  conversation_state_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.assistant.embedded.v1alpha1.ConverseState.conversation_state)
}
inline ::std::string* ConverseState::mutable_conversation_state() {
  
  // @@protoc_insertion_point(field_mutable:google.assistant.embedded.v1alpha1.ConverseState.conversation_state)
  return conversation_state_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ConverseState::release_conversation_state() {
  // @@protoc_insertion_point(field_release:google.assistant.embedded.v1alpha1.ConverseState.conversation_state)
  
  return conversation_state_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ConverseState::set_allocated_conversation_state(::std::string* conversation_state) {
  if (conversation_state != NULL) {
    
  } else {
    
  }
  conversation_state_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), conversation_state);
  // @@protoc_insertion_point(field_set_allocated:google.assistant.embedded.v1alpha1.ConverseState.conversation_state)
}

// -------------------------------------------------------------------

// AudioOut

// bytes audio_data = 1;
inline void AudioOut::clear_audio_data() {
  audio_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AudioOut::audio_data() const {
  // @@protoc_insertion_point(field_get:google.assistant.embedded.v1alpha1.AudioOut.audio_data)
  return audio_data_.GetNoArena();
}
inline void AudioOut::set_audio_data(const ::std::string& value) {
  
  audio_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.assistant.embedded.v1alpha1.AudioOut.audio_data)
}
#if LANG_CXX11
inline void AudioOut::set_audio_data(::std::string&& value) {
  
  audio_data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.assistant.embedded.v1alpha1.AudioOut.audio_data)
}
#endif
inline void AudioOut::set_audio_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  audio_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.assistant.embedded.v1alpha1.AudioOut.audio_data)
}
inline void AudioOut::set_audio_data(const void* value, size_t size) {
  
  audio_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.assistant.embedded.v1alpha1.AudioOut.audio_data)
}
inline ::std::string* AudioOut::mutable_audio_data() {
  
  // @@protoc_insertion_point(field_mutable:google.assistant.embedded.v1alpha1.AudioOut.audio_data)
  return audio_data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AudioOut::release_audio_data() {
  // @@protoc_insertion_point(field_release:google.assistant.embedded.v1alpha1.AudioOut.audio_data)
  
  return audio_data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AudioOut::set_allocated_audio_data(::std::string* audio_data) {
  if (audio_data != NULL) {
    
  } else {
    
  }
  audio_data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), audio_data);
  // @@protoc_insertion_point(field_set_allocated:google.assistant.embedded.v1alpha1.AudioOut.audio_data)
}

// -------------------------------------------------------------------

// ConverseResult

// string spoken_request_text = 1;
inline void ConverseResult::clear_spoken_request_text() {
  spoken_request_text_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ConverseResult::spoken_request_text() const {
  // @@protoc_insertion_point(field_get:google.assistant.embedded.v1alpha1.ConverseResult.spoken_request_text)
  return spoken_request_text_.GetNoArena();
}
inline void ConverseResult::set_spoken_request_text(const ::std::string& value) {
  
  spoken_request_text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.assistant.embedded.v1alpha1.ConverseResult.spoken_request_text)
}
#if LANG_CXX11
inline void ConverseResult::set_spoken_request_text(::std::string&& value) {
  
  spoken_request_text_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.assistant.embedded.v1alpha1.ConverseResult.spoken_request_text)
}
#endif
inline void ConverseResult::set_spoken_request_text(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  spoken_request_text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.assistant.embedded.v1alpha1.ConverseResult.spoken_request_text)
}
inline void ConverseResult::set_spoken_request_text(const char* value, size_t size) {
  
  spoken_request_text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.assistant.embedded.v1alpha1.ConverseResult.spoken_request_text)
}
inline ::std::string* ConverseResult::mutable_spoken_request_text() {
  
  // @@protoc_insertion_point(field_mutable:google.assistant.embedded.v1alpha1.ConverseResult.spoken_request_text)
  return spoken_request_text_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ConverseResult::release_spoken_request_text() {
  // @@protoc_insertion_point(field_release:google.assistant.embedded.v1alpha1.ConverseResult.spoken_request_text)
  
  return spoken_request_text_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ConverseResult::set_allocated_spoken_request_text(::std::string* spoken_request_text) {
  if (spoken_request_text != NULL) {
    
  } else {
    
  }
  spoken_request_text_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), spoken_request_text);
  // @@protoc_insertion_point(field_set_allocated:google.assistant.embedded.v1alpha1.ConverseResult.spoken_request_text)
}

// string spoken_response_text = 2;
inline void ConverseResult::clear_spoken_response_text() {
  spoken_response_text_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ConverseResult::spoken_response_text() const {
  // @@protoc_insertion_point(field_get:google.assistant.embedded.v1alpha1.ConverseResult.spoken_response_text)
  return spoken_response_text_.GetNoArena();
}
inline void ConverseResult::set_spoken_response_text(const ::std::string& value) {
  
  spoken_response_text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.assistant.embedded.v1alpha1.ConverseResult.spoken_response_text)
}
#if LANG_CXX11
inline void ConverseResult::set_spoken_response_text(::std::string&& value) {
  
  spoken_response_text_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.assistant.embedded.v1alpha1.ConverseResult.spoken_response_text)
}
#endif
inline void ConverseResult::set_spoken_response_text(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  spoken_response_text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.assistant.embedded.v1alpha1.ConverseResult.spoken_response_text)
}
inline void ConverseResult::set_spoken_response_text(const char* value, size_t size) {
  
  spoken_response_text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.assistant.embedded.v1alpha1.ConverseResult.spoken_response_text)
}
inline ::std::string* ConverseResult::mutable_spoken_response_text() {
  
  // @@protoc_insertion_point(field_mutable:google.assistant.embedded.v1alpha1.ConverseResult.spoken_response_text)
  return spoken_response_text_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ConverseResult::release_spoken_response_text() {
  // @@protoc_insertion_point(field_release:google.assistant.embedded.v1alpha1.ConverseResult.spoken_response_text)
  
  return spoken_response_text_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ConverseResult::set_allocated_spoken_response_text(::std::string* spoken_response_text) {
  if (spoken_response_text != NULL) {
    
  } else {
    
  }
  spoken_response_text_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), spoken_response_text);
  // @@protoc_insertion_point(field_set_allocated:google.assistant.embedded.v1alpha1.ConverseResult.spoken_response_text)
}

// bytes conversation_state = 3;
inline void ConverseResult::clear_conversation_state() {
  conversation_state_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ConverseResult::conversation_state() const {
  // @@protoc_insertion_point(field_get:google.assistant.embedded.v1alpha1.ConverseResult.conversation_state)
  return conversation_state_.GetNoArena();
}
inline void ConverseResult::set_conversation_state(const ::std::string& value) {
  
  conversation_state_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.assistant.embedded.v1alpha1.ConverseResult.conversation_state)
}
#if LANG_CXX11
inline void ConverseResult::set_conversation_state(::std::string&& value) {
  
  conversation_state_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.assistant.embedded.v1alpha1.ConverseResult.conversation_state)
}
#endif
inline void ConverseResult::set_conversation_state(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  conversation_state_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.assistant.embedded.v1alpha1.ConverseResult.conversation_state)
}
inline void ConverseResult::set_conversation_state(const void* value, size_t size) {
  
  conversation_state_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.assistant.embedded.v1alpha1.ConverseResult.conversation_state)
}
inline ::std::string* ConverseResult::mutable_conversation_state() {
  
  // @@protoc_insertion_point(field_mutable:google.assistant.embedded.v1alpha1.ConverseResult.conversation_state)
  return conversation_state_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ConverseResult::release_conversation_state() {
  // @@protoc_insertion_point(field_release:google.assistant.embedded.v1alpha1.ConverseResult.conversation_state)
  
  return conversation_state_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ConverseResult::set_allocated_conversation_state(::std::string* conversation_state) {
  if (conversation_state != NULL) {
    
  } else {
    
  }
  conversation_state_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), conversation_state);
  // @@protoc_insertion_point(field_set_allocated:google.assistant.embedded.v1alpha1.ConverseResult.conversation_state)
}

// .google.assistant.embedded.v1alpha1.ConverseResult.MicrophoneMode microphone_mode = 4;
inline void ConverseResult::clear_microphone_mode() {
  microphone_mode_ = 0;
}
inline ::google::assistant::embedded::v1alpha1::ConverseResult_MicrophoneMode ConverseResult::microphone_mode() const {
  // @@protoc_insertion_point(field_get:google.assistant.embedded.v1alpha1.ConverseResult.microphone_mode)
  return static_cast< ::google::assistant::embedded::v1alpha1::ConverseResult_MicrophoneMode >(microphone_mode_);
}
inline void ConverseResult::set_microphone_mode(::google::assistant::embedded::v1alpha1::ConverseResult_MicrophoneMode value) {
  
  microphone_mode_ = value;
  // @@protoc_insertion_point(field_set:google.assistant.embedded.v1alpha1.ConverseResult.microphone_mode)
}

// int32 volume_percentage = 5;
inline void ConverseResult::clear_volume_percentage() {
  volume_percentage_ = 0;
}
inline ::google::protobuf::int32 ConverseResult::volume_percentage() const {
  // @@protoc_insertion_point(field_get:google.assistant.embedded.v1alpha1.ConverseResult.volume_percentage)
  return volume_percentage_;
}
inline void ConverseResult::set_volume_percentage(::google::protobuf::int32 value) {
  
  volume_percentage_ = value;
  // @@protoc_insertion_point(field_set:google.assistant.embedded.v1alpha1.ConverseResult.volume_percentage)
}

// -------------------------------------------------------------------

// ConverseRequest

// .google.assistant.embedded.v1alpha1.ConverseConfig config = 1;
inline bool ConverseRequest::has_config() const {
  return converse_request_case() == kConfig;
}
inline void ConverseRequest::set_has_config() {
  _oneof_case_[0] = kConfig;
}
inline void ConverseRequest::clear_config() {
  if (has_config()) {
    delete converse_request_.config_;
    clear_has_converse_request();
  }
}
inline ::google::assistant::embedded::v1alpha1::ConverseConfig* ConverseRequest::release_config() {
  // @@protoc_insertion_point(field_release:google.assistant.embedded.v1alpha1.ConverseRequest.config)
  if (has_config()) {
    clear_has_converse_request();
      ::google::assistant::embedded::v1alpha1::ConverseConfig* temp = converse_request_.config_;
    converse_request_.config_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::assistant::embedded::v1alpha1::ConverseConfig& ConverseRequest::config() const {
  // @@protoc_insertion_point(field_get:google.assistant.embedded.v1alpha1.ConverseRequest.config)
  return has_config()
      ? *converse_request_.config_
      : *reinterpret_cast< ::google::assistant::embedded::v1alpha1::ConverseConfig*>(&::google::assistant::embedded::v1alpha1::_ConverseConfig_default_instance_);
}
inline ::google::assistant::embedded::v1alpha1::ConverseConfig* ConverseRequest::mutable_config() {
  if (!has_config()) {
    clear_converse_request();
    set_has_config();
    converse_request_.config_ = new ::google::assistant::embedded::v1alpha1::ConverseConfig;
  }
  // @@protoc_insertion_point(field_mutable:google.assistant.embedded.v1alpha1.ConverseRequest.config)
  return converse_request_.config_;
}

// bytes audio_in = 2;
inline bool ConverseRequest::has_audio_in() const {
  return converse_request_case() == kAudioIn;
}
inline void ConverseRequest::set_has_audio_in() {
  _oneof_case_[0] = kAudioIn;
}
inline void ConverseRequest::clear_audio_in() {
  if (has_audio_in()) {
    converse_request_.audio_in_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_converse_request();
  }
}
inline const ::std::string& ConverseRequest::audio_in() const {
  // @@protoc_insertion_point(field_get:google.assistant.embedded.v1alpha1.ConverseRequest.audio_in)
  if (has_audio_in()) {
    return converse_request_.audio_in_.GetNoArena();
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
inline void ConverseRequest::set_audio_in(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:google.assistant.embedded.v1alpha1.ConverseRequest.audio_in)
  if (!has_audio_in()) {
    clear_converse_request();
    set_has_audio_in();
    converse_request_.audio_in_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  converse_request_.audio_in_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.assistant.embedded.v1alpha1.ConverseRequest.audio_in)
}
#if LANG_CXX11
inline void ConverseRequest::set_audio_in(::std::string&& value) {
  // @@protoc_insertion_point(field_set:google.assistant.embedded.v1alpha1.ConverseRequest.audio_in)
  if (!has_audio_in()) {
    clear_converse_request();
    set_has_audio_in();
    converse_request_.audio_in_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  converse_request_.audio_in_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.assistant.embedded.v1alpha1.ConverseRequest.audio_in)
}
#endif
inline void ConverseRequest::set_audio_in(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  if (!has_audio_in()) {
    clear_converse_request();
    set_has_audio_in();
    converse_request_.audio_in_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  converse_request_.audio_in_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.assistant.embedded.v1alpha1.ConverseRequest.audio_in)
}
inline void ConverseRequest::set_audio_in(const void* value, size_t size) {
  if (!has_audio_in()) {
    clear_converse_request();
    set_has_audio_in();
    converse_request_.audio_in_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  converse_request_.audio_in_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.assistant.embedded.v1alpha1.ConverseRequest.audio_in)
}
inline ::std::string* ConverseRequest::mutable_audio_in() {
  if (!has_audio_in()) {
    clear_converse_request();
    set_has_audio_in();
    converse_request_.audio_in_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:google.assistant.embedded.v1alpha1.ConverseRequest.audio_in)
  return converse_request_.audio_in_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ConverseRequest::release_audio_in() {
  // @@protoc_insertion_point(field_release:google.assistant.embedded.v1alpha1.ConverseRequest.audio_in)
  if (has_audio_in()) {
    clear_has_converse_request();
    return converse_request_.audio_in_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
inline void ConverseRequest::set_allocated_audio_in(::std::string* audio_in) {
  if (!has_audio_in()) {
    converse_request_.audio_in_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_converse_request();
  if (audio_in != NULL) {
    set_has_audio_in();
    converse_request_.audio_in_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        audio_in);
  }
  // @@protoc_insertion_point(field_set_allocated:google.assistant.embedded.v1alpha1.ConverseRequest.audio_in)
}

inline bool ConverseRequest::has_converse_request() const {
  return converse_request_case() != CONVERSE_REQUEST_NOT_SET;
}
inline void ConverseRequest::clear_has_converse_request() {
  _oneof_case_[0] = CONVERSE_REQUEST_NOT_SET;
}
inline ConverseRequest::ConverseRequestCase ConverseRequest::converse_request_case() const {
  return ConverseRequest::ConverseRequestCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// ConverseResponse

// .google.rpc.Status error = 1;
inline bool ConverseResponse::has_error() const {
  return converse_response_case() == kError;
}
inline void ConverseResponse::set_has_error() {
  _oneof_case_[0] = kError;
}
inline ::google::rpc::Status* ConverseResponse::release_error() {
  // @@protoc_insertion_point(field_release:google.assistant.embedded.v1alpha1.ConverseResponse.error)
  if (has_error()) {
    clear_has_converse_response();
      ::google::rpc::Status* temp = converse_response_.error_;
    converse_response_.error_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::rpc::Status& ConverseResponse::error() const {
  // @@protoc_insertion_point(field_get:google.assistant.embedded.v1alpha1.ConverseResponse.error)
  return has_error()
      ? *converse_response_.error_
      : *reinterpret_cast< ::google::rpc::Status*>(&::google::rpc::_Status_default_instance_);
}
inline ::google::rpc::Status* ConverseResponse::mutable_error() {
  if (!has_error()) {
    clear_converse_response();
    set_has_error();
    converse_response_.error_ = new ::google::rpc::Status;
  }
  // @@protoc_insertion_point(field_mutable:google.assistant.embedded.v1alpha1.ConverseResponse.error)
  return converse_response_.error_;
}

// .google.assistant.embedded.v1alpha1.ConverseResponse.EventType event_type = 2;
inline bool ConverseResponse::has_event_type() const {
  return converse_response_case() == kEventType;
}
inline void ConverseResponse::set_has_event_type() {
  _oneof_case_[0] = kEventType;
}
inline void ConverseResponse::clear_event_type() {
  if (has_event_type()) {
    converse_response_.event_type_ = 0;
    clear_has_converse_response();
  }
}
inline ::google::assistant::embedded::v1alpha1::ConverseResponse_EventType ConverseResponse::event_type() const {
  // @@protoc_insertion_point(field_get:google.assistant.embedded.v1alpha1.ConverseResponse.event_type)
  if (has_event_type()) {
    return static_cast< ::google::assistant::embedded::v1alpha1::ConverseResponse_EventType >(converse_response_.event_type_);
  }
  return static_cast< ::google::assistant::embedded::v1alpha1::ConverseResponse_EventType >(0);
}
inline void ConverseResponse::set_event_type(::google::assistant::embedded::v1alpha1::ConverseResponse_EventType value) {
  if (!has_event_type()) {
    clear_converse_response();
    set_has_event_type();
  }
  converse_response_.event_type_ = value;
  // @@protoc_insertion_point(field_set:google.assistant.embedded.v1alpha1.ConverseResponse.event_type)
}

// .google.assistant.embedded.v1alpha1.AudioOut audio_out = 3;
inline bool ConverseResponse::has_audio_out() const {
  return converse_response_case() == kAudioOut;
}
inline void ConverseResponse::set_has_audio_out() {
  _oneof_case_[0] = kAudioOut;
}
inline void ConverseResponse::clear_audio_out() {
  if (has_audio_out()) {
    delete converse_response_.audio_out_;
    clear_has_converse_response();
  }
}
inline ::google::assistant::embedded::v1alpha1::AudioOut* ConverseResponse::release_audio_out() {
  // @@protoc_insertion_point(field_release:google.assistant.embedded.v1alpha1.ConverseResponse.audio_out)
  if (has_audio_out()) {
    clear_has_converse_response();
      ::google::assistant::embedded::v1alpha1::AudioOut* temp = converse_response_.audio_out_;
    converse_response_.audio_out_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::assistant::embedded::v1alpha1::AudioOut& ConverseResponse::audio_out() const {
  // @@protoc_insertion_point(field_get:google.assistant.embedded.v1alpha1.ConverseResponse.audio_out)
  return has_audio_out()
      ? *converse_response_.audio_out_
      : *reinterpret_cast< ::google::assistant::embedded::v1alpha1::AudioOut*>(&::google::assistant::embedded::v1alpha1::_AudioOut_default_instance_);
}
inline ::google::assistant::embedded::v1alpha1::AudioOut* ConverseResponse::mutable_audio_out() {
  if (!has_audio_out()) {
    clear_converse_response();
    set_has_audio_out();
    converse_response_.audio_out_ = new ::google::assistant::embedded::v1alpha1::AudioOut;
  }
  // @@protoc_insertion_point(field_mutable:google.assistant.embedded.v1alpha1.ConverseResponse.audio_out)
  return converse_response_.audio_out_;
}

// .google.assistant.embedded.v1alpha1.ConverseResult result = 5;
inline bool ConverseResponse::has_result() const {
  return converse_response_case() == kResult;
}
inline void ConverseResponse::set_has_result() {
  _oneof_case_[0] = kResult;
}
inline void ConverseResponse::clear_result() {
  if (has_result()) {
    delete converse_response_.result_;
    clear_has_converse_response();
  }
}
inline ::google::assistant::embedded::v1alpha1::ConverseResult* ConverseResponse::release_result() {
  // @@protoc_insertion_point(field_release:google.assistant.embedded.v1alpha1.ConverseResponse.result)
  if (has_result()) {
    clear_has_converse_response();
      ::google::assistant::embedded::v1alpha1::ConverseResult* temp = converse_response_.result_;
    converse_response_.result_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::assistant::embedded::v1alpha1::ConverseResult& ConverseResponse::result() const {
  // @@protoc_insertion_point(field_get:google.assistant.embedded.v1alpha1.ConverseResponse.result)
  return has_result()
      ? *converse_response_.result_
      : *reinterpret_cast< ::google::assistant::embedded::v1alpha1::ConverseResult*>(&::google::assistant::embedded::v1alpha1::_ConverseResult_default_instance_);
}
inline ::google::assistant::embedded::v1alpha1::ConverseResult* ConverseResponse::mutable_result() {
  if (!has_result()) {
    clear_converse_response();
    set_has_result();
    converse_response_.result_ = new ::google::assistant::embedded::v1alpha1::ConverseResult;
  }
  // @@protoc_insertion_point(field_mutable:google.assistant.embedded.v1alpha1.ConverseResponse.result)
  return converse_response_.result_;
}

inline bool ConverseResponse::has_converse_response() const {
  return converse_response_case() != CONVERSE_RESPONSE_NOT_SET;
}
inline void ConverseResponse::clear_has_converse_response() {
  _oneof_case_[0] = CONVERSE_RESPONSE_NOT_SET;
}
inline ConverseResponse::ConverseResponseCase ConverseResponse::converse_response_case() const {
  return ConverseResponse::ConverseResponseCase(_oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1alpha1
}  // namespace embedded
}  // namespace assistant
}  // namespace google

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::google::assistant::embedded::v1alpha1::AudioInConfig_Encoding> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::google::assistant::embedded::v1alpha1::AudioInConfig_Encoding>() {
  return ::google::assistant::embedded::v1alpha1::AudioInConfig_Encoding_descriptor();
}
template <> struct is_proto_enum< ::google::assistant::embedded::v1alpha1::AudioOutConfig_Encoding> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::google::assistant::embedded::v1alpha1::AudioOutConfig_Encoding>() {
  return ::google::assistant::embedded::v1alpha1::AudioOutConfig_Encoding_descriptor();
}
template <> struct is_proto_enum< ::google::assistant::embedded::v1alpha1::ConverseResult_MicrophoneMode> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::google::assistant::embedded::v1alpha1::ConverseResult_MicrophoneMode>() {
  return ::google::assistant::embedded::v1alpha1::ConverseResult_MicrophoneMode_descriptor();
}
template <> struct is_proto_enum< ::google::assistant::embedded::v1alpha1::ConverseResponse_EventType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::google::assistant::embedded::v1alpha1::ConverseResponse_EventType>() {
  return ::google::assistant::embedded::v1alpha1::ConverseResponse_EventType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_google_2fassistant_2fembedded_2fv1alpha1_2fembedded_5fassistant_2eproto__INCLUDED
