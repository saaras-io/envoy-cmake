// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/cloud/location/locations.proto

#ifndef PROTOBUF_google_2fcloud_2flocation_2flocations_2eproto__INCLUDED
#define PROTOBUF_google_2fcloud_2flocation_2flocations_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/unknown_field_set.h>
#include "google/api/annotations.pb.h"
#include <google/protobuf/any.pb.h>
// @@protoc_insertion_point(includes)

namespace protobuf_google_2fcloud_2flocation_2flocations_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[5];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsListLocationsRequestImpl();
void InitDefaultsListLocationsRequest();
void InitDefaultsListLocationsResponseImpl();
void InitDefaultsListLocationsResponse();
void InitDefaultsGetLocationRequestImpl();
void InitDefaultsGetLocationRequest();
void InitDefaultsLocation_LabelsEntry_DoNotUseImpl();
void InitDefaultsLocation_LabelsEntry_DoNotUse();
void InitDefaultsLocationImpl();
void InitDefaultsLocation();
inline void InitDefaults() {
  InitDefaultsListLocationsRequest();
  InitDefaultsListLocationsResponse();
  InitDefaultsGetLocationRequest();
  InitDefaultsLocation_LabelsEntry_DoNotUse();
  InitDefaultsLocation();
}
}  // namespace protobuf_google_2fcloud_2flocation_2flocations_2eproto
namespace google {
namespace cloud {
namespace location {
class GetLocationRequest;
class GetLocationRequestDefaultTypeInternal;
extern GetLocationRequestDefaultTypeInternal _GetLocationRequest_default_instance_;
class ListLocationsRequest;
class ListLocationsRequestDefaultTypeInternal;
extern ListLocationsRequestDefaultTypeInternal _ListLocationsRequest_default_instance_;
class ListLocationsResponse;
class ListLocationsResponseDefaultTypeInternal;
extern ListLocationsResponseDefaultTypeInternal _ListLocationsResponse_default_instance_;
class Location;
class LocationDefaultTypeInternal;
extern LocationDefaultTypeInternal _Location_default_instance_;
class Location_LabelsEntry_DoNotUse;
class Location_LabelsEntry_DoNotUseDefaultTypeInternal;
extern Location_LabelsEntry_DoNotUseDefaultTypeInternal _Location_LabelsEntry_DoNotUse_default_instance_;
}  // namespace location
}  // namespace cloud
}  // namespace google
namespace google {
namespace cloud {
namespace location {

// ===================================================================

class ListLocationsRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.cloud.location.ListLocationsRequest) */ {
 public:
  ListLocationsRequest();
  virtual ~ListLocationsRequest();

  ListLocationsRequest(const ListLocationsRequest& from);

  inline ListLocationsRequest& operator=(const ListLocationsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ListLocationsRequest(ListLocationsRequest&& from) noexcept
    : ListLocationsRequest() {
    *this = ::std::move(from);
  }

  inline ListLocationsRequest& operator=(ListLocationsRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const ListLocationsRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListLocationsRequest* internal_default_instance() {
    return reinterpret_cast<const ListLocationsRequest*>(
               &_ListLocationsRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void UnsafeArenaSwap(ListLocationsRequest* other);
  void Swap(ListLocationsRequest* other);
  friend void swap(ListLocationsRequest& a, ListLocationsRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ListLocationsRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  ListLocationsRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ListLocationsRequest& from);
  void MergeFrom(const ListLocationsRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ListLocationsRequest* other);
  protected:
  explicit ListLocationsRequest(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_name();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_name(
      ::std::string* name);

  // string filter = 2;
  void clear_filter();
  static const int kFilterFieldNumber = 2;
  const ::std::string& filter() const;
  void set_filter(const ::std::string& value);
  #if LANG_CXX11
  void set_filter(::std::string&& value);
  #endif
  void set_filter(const char* value);
  void set_filter(const char* value, size_t size);
  ::std::string* mutable_filter();
  ::std::string* release_filter();
  void set_allocated_filter(::std::string* filter);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_filter();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_filter(
      ::std::string* filter);

  // string page_token = 4;
  void clear_page_token();
  static const int kPageTokenFieldNumber = 4;
  const ::std::string& page_token() const;
  void set_page_token(const ::std::string& value);
  #if LANG_CXX11
  void set_page_token(::std::string&& value);
  #endif
  void set_page_token(const char* value);
  void set_page_token(const char* value, size_t size);
  ::std::string* mutable_page_token();
  ::std::string* release_page_token();
  void set_allocated_page_token(::std::string* page_token);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_page_token();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_page_token(
      ::std::string* page_token);

  // int32 page_size = 3;
  void clear_page_size();
  static const int kPageSizeFieldNumber = 3;
  ::google::protobuf::int32 page_size() const;
  void set_page_size(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:google.cloud.location.ListLocationsRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr filter_;
  ::google::protobuf::internal::ArenaStringPtr page_token_;
  ::google::protobuf::int32 page_size_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fcloud_2flocation_2flocations_2eproto::TableStruct;
  friend void ::protobuf_google_2fcloud_2flocation_2flocations_2eproto::InitDefaultsListLocationsRequestImpl();
};
// -------------------------------------------------------------------

class ListLocationsResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.cloud.location.ListLocationsResponse) */ {
 public:
  ListLocationsResponse();
  virtual ~ListLocationsResponse();

  ListLocationsResponse(const ListLocationsResponse& from);

  inline ListLocationsResponse& operator=(const ListLocationsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ListLocationsResponse(ListLocationsResponse&& from) noexcept
    : ListLocationsResponse() {
    *this = ::std::move(from);
  }

  inline ListLocationsResponse& operator=(ListLocationsResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const ListLocationsResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListLocationsResponse* internal_default_instance() {
    return reinterpret_cast<const ListLocationsResponse*>(
               &_ListLocationsResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void UnsafeArenaSwap(ListLocationsResponse* other);
  void Swap(ListLocationsResponse* other);
  friend void swap(ListLocationsResponse& a, ListLocationsResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ListLocationsResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  ListLocationsResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ListLocationsResponse& from);
  void MergeFrom(const ListLocationsResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ListLocationsResponse* other);
  protected:
  explicit ListLocationsResponse(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .google.cloud.location.Location locations = 1;
  int locations_size() const;
  void clear_locations();
  static const int kLocationsFieldNumber = 1;
  const ::google::cloud::location::Location& locations(int index) const;
  ::google::cloud::location::Location* mutable_locations(int index);
  ::google::cloud::location::Location* add_locations();
  ::google::protobuf::RepeatedPtrField< ::google::cloud::location::Location >*
      mutable_locations();
  const ::google::protobuf::RepeatedPtrField< ::google::cloud::location::Location >&
      locations() const;

  // string next_page_token = 2;
  void clear_next_page_token();
  static const int kNextPageTokenFieldNumber = 2;
  const ::std::string& next_page_token() const;
  void set_next_page_token(const ::std::string& value);
  #if LANG_CXX11
  void set_next_page_token(::std::string&& value);
  #endif
  void set_next_page_token(const char* value);
  void set_next_page_token(const char* value, size_t size);
  ::std::string* mutable_next_page_token();
  ::std::string* release_next_page_token();
  void set_allocated_next_page_token(::std::string* next_page_token);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_next_page_token();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_next_page_token(
      ::std::string* next_page_token);

  // @@protoc_insertion_point(class_scope:google.cloud.location.ListLocationsResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::RepeatedPtrField< ::google::cloud::location::Location > locations_;
  ::google::protobuf::internal::ArenaStringPtr next_page_token_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fcloud_2flocation_2flocations_2eproto::TableStruct;
  friend void ::protobuf_google_2fcloud_2flocation_2flocations_2eproto::InitDefaultsListLocationsResponseImpl();
};
// -------------------------------------------------------------------

class GetLocationRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.cloud.location.GetLocationRequest) */ {
 public:
  GetLocationRequest();
  virtual ~GetLocationRequest();

  GetLocationRequest(const GetLocationRequest& from);

  inline GetLocationRequest& operator=(const GetLocationRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetLocationRequest(GetLocationRequest&& from) noexcept
    : GetLocationRequest() {
    *this = ::std::move(from);
  }

  inline GetLocationRequest& operator=(GetLocationRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetLocationRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetLocationRequest* internal_default_instance() {
    return reinterpret_cast<const GetLocationRequest*>(
               &_GetLocationRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void UnsafeArenaSwap(GetLocationRequest* other);
  void Swap(GetLocationRequest* other);
  friend void swap(GetLocationRequest& a, GetLocationRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetLocationRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  GetLocationRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GetLocationRequest& from);
  void MergeFrom(const GetLocationRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GetLocationRequest* other);
  protected:
  explicit GetLocationRequest(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_name();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_name(
      ::std::string* name);

  // @@protoc_insertion_point(class_scope:google.cloud.location.GetLocationRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fcloud_2flocation_2flocations_2eproto::TableStruct;
  friend void ::protobuf_google_2fcloud_2flocation_2flocations_2eproto::InitDefaultsGetLocationRequestImpl();
};
// -------------------------------------------------------------------

class Location_LabelsEntry_DoNotUse : public ::google::protobuf::internal::MapEntry<Location_LabelsEntry_DoNotUse, 
    ::std::string, ::std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    0 > {
public:
  typedef ::google::protobuf::internal::MapEntry<Location_LabelsEntry_DoNotUse, 
    ::std::string, ::std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    0 > SuperType;
  Location_LabelsEntry_DoNotUse();
  Location_LabelsEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const Location_LabelsEntry_DoNotUse& other);
  static const Location_LabelsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const Location_LabelsEntry_DoNotUse*>(&_Location_LabelsEntry_DoNotUse_default_instance_); }
  void MergeFrom(const ::google::protobuf::Message& other) PROTOBUF_FINAL;
  ::google::protobuf::Metadata GetMetadata() const;
};

// -------------------------------------------------------------------

class Location : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.cloud.location.Location) */ {
 public:
  Location();
  virtual ~Location();

  Location(const Location& from);

  inline Location& operator=(const Location& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Location(Location&& from) noexcept
    : Location() {
    *this = ::std::move(from);
  }

  inline Location& operator=(Location&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const Location& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Location* internal_default_instance() {
    return reinterpret_cast<const Location*>(
               &_Location_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void UnsafeArenaSwap(Location* other);
  void Swap(Location* other);
  friend void swap(Location& a, Location& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Location* New() const PROTOBUF_FINAL { return New(NULL); }

  Location* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Location& from);
  void MergeFrom(const Location& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Location* other);
  protected:
  explicit Location(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // map<string, string> labels = 2;
  int labels_size() const;
  void clear_labels();
  static const int kLabelsFieldNumber = 2;
  const ::google::protobuf::Map< ::std::string, ::std::string >&
      labels() const;
  ::google::protobuf::Map< ::std::string, ::std::string >*
      mutable_labels();

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_name();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_name(
      ::std::string* name);

  // string location_id = 4;
  void clear_location_id();
  static const int kLocationIdFieldNumber = 4;
  const ::std::string& location_id() const;
  void set_location_id(const ::std::string& value);
  #if LANG_CXX11
  void set_location_id(::std::string&& value);
  #endif
  void set_location_id(const char* value);
  void set_location_id(const char* value, size_t size);
  ::std::string* mutable_location_id();
  ::std::string* release_location_id();
  void set_allocated_location_id(::std::string* location_id);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_location_id();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_location_id(
      ::std::string* location_id);

  // .google.protobuf.Any metadata = 3;
  bool has_metadata() const;
  void clear_metadata();
  static const int kMetadataFieldNumber = 3;
  private:
  void _slow_mutable_metadata();
  public:
  const ::google::protobuf::Any& metadata() const;
  ::google::protobuf::Any* release_metadata();
  ::google::protobuf::Any* mutable_metadata();
  void set_allocated_metadata(::google::protobuf::Any* metadata);
  void unsafe_arena_set_allocated_metadata(
      ::google::protobuf::Any* metadata);
  ::google::protobuf::Any* unsafe_arena_release_metadata();

  // @@protoc_insertion_point(class_scope:google.cloud.location.Location)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::MapField<
      Location_LabelsEntry_DoNotUse,
      ::std::string, ::std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      0 > labels_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr location_id_;
  ::google::protobuf::Any* metadata_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fcloud_2flocation_2flocations_2eproto::TableStruct;
  friend void ::protobuf_google_2fcloud_2flocation_2flocations_2eproto::InitDefaultsLocationImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ListLocationsRequest

// string name = 1;
inline void ListLocationsRequest::clear_name() {
  name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& ListLocationsRequest::name() const {
  // @@protoc_insertion_point(field_get:google.cloud.location.ListLocationsRequest.name)
  return name_.Get();
}
inline void ListLocationsRequest::set_name(const ::std::string& value) {
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.cloud.location.ListLocationsRequest.name)
}
#if LANG_CXX11
inline void ListLocationsRequest::set_name(::std::string&& value) {
  
  name_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.location.ListLocationsRequest.name)
}
#endif
inline void ListLocationsRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.cloud.location.ListLocationsRequest.name)
}
inline void ListLocationsRequest::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.cloud.location.ListLocationsRequest.name)
}
inline ::std::string* ListLocationsRequest::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.location.ListLocationsRequest.name)
  return name_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ListLocationsRequest::release_name() {
  // @@protoc_insertion_point(field_release:google.cloud.location.ListLocationsRequest.name)
  
  return name_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ListLocationsRequest::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.cloud.location.ListLocationsRequest.name)
}
inline ::std::string* ListLocationsRequest::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.cloud.location.ListLocationsRequest.name)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return name_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ListLocationsRequest::unsafe_arena_set_allocated_name(
    ::std::string* name) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (name != NULL) {
    
  } else {
    
  }
  name_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      name, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.location.ListLocationsRequest.name)
}

// string filter = 2;
inline void ListLocationsRequest::clear_filter() {
  filter_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& ListLocationsRequest::filter() const {
  // @@protoc_insertion_point(field_get:google.cloud.location.ListLocationsRequest.filter)
  return filter_.Get();
}
inline void ListLocationsRequest::set_filter(const ::std::string& value) {
  
  filter_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.cloud.location.ListLocationsRequest.filter)
}
#if LANG_CXX11
inline void ListLocationsRequest::set_filter(::std::string&& value) {
  
  filter_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.location.ListLocationsRequest.filter)
}
#endif
inline void ListLocationsRequest::set_filter(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  filter_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.cloud.location.ListLocationsRequest.filter)
}
inline void ListLocationsRequest::set_filter(const char* value,
    size_t size) {
  
  filter_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.cloud.location.ListLocationsRequest.filter)
}
inline ::std::string* ListLocationsRequest::mutable_filter() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.location.ListLocationsRequest.filter)
  return filter_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ListLocationsRequest::release_filter() {
  // @@protoc_insertion_point(field_release:google.cloud.location.ListLocationsRequest.filter)
  
  return filter_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ListLocationsRequest::set_allocated_filter(::std::string* filter) {
  if (filter != NULL) {
    
  } else {
    
  }
  filter_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), filter,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.cloud.location.ListLocationsRequest.filter)
}
inline ::std::string* ListLocationsRequest::unsafe_arena_release_filter() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.cloud.location.ListLocationsRequest.filter)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return filter_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ListLocationsRequest::unsafe_arena_set_allocated_filter(
    ::std::string* filter) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (filter != NULL) {
    
  } else {
    
  }
  filter_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      filter, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.location.ListLocationsRequest.filter)
}

// int32 page_size = 3;
inline void ListLocationsRequest::clear_page_size() {
  page_size_ = 0;
}
inline ::google::protobuf::int32 ListLocationsRequest::page_size() const {
  // @@protoc_insertion_point(field_get:google.cloud.location.ListLocationsRequest.page_size)
  return page_size_;
}
inline void ListLocationsRequest::set_page_size(::google::protobuf::int32 value) {
  
  page_size_ = value;
  // @@protoc_insertion_point(field_set:google.cloud.location.ListLocationsRequest.page_size)
}

// string page_token = 4;
inline void ListLocationsRequest::clear_page_token() {
  page_token_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& ListLocationsRequest::page_token() const {
  // @@protoc_insertion_point(field_get:google.cloud.location.ListLocationsRequest.page_token)
  return page_token_.Get();
}
inline void ListLocationsRequest::set_page_token(const ::std::string& value) {
  
  page_token_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.cloud.location.ListLocationsRequest.page_token)
}
#if LANG_CXX11
inline void ListLocationsRequest::set_page_token(::std::string&& value) {
  
  page_token_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.location.ListLocationsRequest.page_token)
}
#endif
inline void ListLocationsRequest::set_page_token(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  page_token_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.cloud.location.ListLocationsRequest.page_token)
}
inline void ListLocationsRequest::set_page_token(const char* value,
    size_t size) {
  
  page_token_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.cloud.location.ListLocationsRequest.page_token)
}
inline ::std::string* ListLocationsRequest::mutable_page_token() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.location.ListLocationsRequest.page_token)
  return page_token_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ListLocationsRequest::release_page_token() {
  // @@protoc_insertion_point(field_release:google.cloud.location.ListLocationsRequest.page_token)
  
  return page_token_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ListLocationsRequest::set_allocated_page_token(::std::string* page_token) {
  if (page_token != NULL) {
    
  } else {
    
  }
  page_token_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), page_token,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.cloud.location.ListLocationsRequest.page_token)
}
inline ::std::string* ListLocationsRequest::unsafe_arena_release_page_token() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.cloud.location.ListLocationsRequest.page_token)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return page_token_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ListLocationsRequest::unsafe_arena_set_allocated_page_token(
    ::std::string* page_token) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (page_token != NULL) {
    
  } else {
    
  }
  page_token_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      page_token, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.location.ListLocationsRequest.page_token)
}

// -------------------------------------------------------------------

// ListLocationsResponse

// repeated .google.cloud.location.Location locations = 1;
inline int ListLocationsResponse::locations_size() const {
  return locations_.size();
}
inline void ListLocationsResponse::clear_locations() {
  locations_.Clear();
}
inline const ::google::cloud::location::Location& ListLocationsResponse::locations(int index) const {
  // @@protoc_insertion_point(field_get:google.cloud.location.ListLocationsResponse.locations)
  return locations_.Get(index);
}
inline ::google::cloud::location::Location* ListLocationsResponse::mutable_locations(int index) {
  // @@protoc_insertion_point(field_mutable:google.cloud.location.ListLocationsResponse.locations)
  return locations_.Mutable(index);
}
inline ::google::cloud::location::Location* ListLocationsResponse::add_locations() {
  // @@protoc_insertion_point(field_add:google.cloud.location.ListLocationsResponse.locations)
  return locations_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::google::cloud::location::Location >*
ListLocationsResponse::mutable_locations() {
  // @@protoc_insertion_point(field_mutable_list:google.cloud.location.ListLocationsResponse.locations)
  return &locations_;
}
inline const ::google::protobuf::RepeatedPtrField< ::google::cloud::location::Location >&
ListLocationsResponse::locations() const {
  // @@protoc_insertion_point(field_list:google.cloud.location.ListLocationsResponse.locations)
  return locations_;
}

// string next_page_token = 2;
inline void ListLocationsResponse::clear_next_page_token() {
  next_page_token_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& ListLocationsResponse::next_page_token() const {
  // @@protoc_insertion_point(field_get:google.cloud.location.ListLocationsResponse.next_page_token)
  return next_page_token_.Get();
}
inline void ListLocationsResponse::set_next_page_token(const ::std::string& value) {
  
  next_page_token_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.cloud.location.ListLocationsResponse.next_page_token)
}
#if LANG_CXX11
inline void ListLocationsResponse::set_next_page_token(::std::string&& value) {
  
  next_page_token_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.location.ListLocationsResponse.next_page_token)
}
#endif
inline void ListLocationsResponse::set_next_page_token(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  next_page_token_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.cloud.location.ListLocationsResponse.next_page_token)
}
inline void ListLocationsResponse::set_next_page_token(const char* value,
    size_t size) {
  
  next_page_token_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.cloud.location.ListLocationsResponse.next_page_token)
}
inline ::std::string* ListLocationsResponse::mutable_next_page_token() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.location.ListLocationsResponse.next_page_token)
  return next_page_token_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ListLocationsResponse::release_next_page_token() {
  // @@protoc_insertion_point(field_release:google.cloud.location.ListLocationsResponse.next_page_token)
  
  return next_page_token_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ListLocationsResponse::set_allocated_next_page_token(::std::string* next_page_token) {
  if (next_page_token != NULL) {
    
  } else {
    
  }
  next_page_token_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), next_page_token,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.cloud.location.ListLocationsResponse.next_page_token)
}
inline ::std::string* ListLocationsResponse::unsafe_arena_release_next_page_token() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.cloud.location.ListLocationsResponse.next_page_token)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return next_page_token_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ListLocationsResponse::unsafe_arena_set_allocated_next_page_token(
    ::std::string* next_page_token) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (next_page_token != NULL) {
    
  } else {
    
  }
  next_page_token_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      next_page_token, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.location.ListLocationsResponse.next_page_token)
}

// -------------------------------------------------------------------

// GetLocationRequest

// string name = 1;
inline void GetLocationRequest::clear_name() {
  name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& GetLocationRequest::name() const {
  // @@protoc_insertion_point(field_get:google.cloud.location.GetLocationRequest.name)
  return name_.Get();
}
inline void GetLocationRequest::set_name(const ::std::string& value) {
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.cloud.location.GetLocationRequest.name)
}
#if LANG_CXX11
inline void GetLocationRequest::set_name(::std::string&& value) {
  
  name_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.location.GetLocationRequest.name)
}
#endif
inline void GetLocationRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.cloud.location.GetLocationRequest.name)
}
inline void GetLocationRequest::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.cloud.location.GetLocationRequest.name)
}
inline ::std::string* GetLocationRequest::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.location.GetLocationRequest.name)
  return name_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* GetLocationRequest::release_name() {
  // @@protoc_insertion_point(field_release:google.cloud.location.GetLocationRequest.name)
  
  return name_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void GetLocationRequest::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.cloud.location.GetLocationRequest.name)
}
inline ::std::string* GetLocationRequest::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.cloud.location.GetLocationRequest.name)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return name_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void GetLocationRequest::unsafe_arena_set_allocated_name(
    ::std::string* name) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (name != NULL) {
    
  } else {
    
  }
  name_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      name, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.location.GetLocationRequest.name)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// Location

// string name = 1;
inline void Location::clear_name() {
  name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& Location::name() const {
  // @@protoc_insertion_point(field_get:google.cloud.location.Location.name)
  return name_.Get();
}
inline void Location::set_name(const ::std::string& value) {
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.cloud.location.Location.name)
}
#if LANG_CXX11
inline void Location::set_name(::std::string&& value) {
  
  name_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.location.Location.name)
}
#endif
inline void Location::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.cloud.location.Location.name)
}
inline void Location::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.cloud.location.Location.name)
}
inline ::std::string* Location::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.location.Location.name)
  return name_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* Location::release_name() {
  // @@protoc_insertion_point(field_release:google.cloud.location.Location.name)
  
  return name_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void Location::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.cloud.location.Location.name)
}
inline ::std::string* Location::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.cloud.location.Location.name)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return name_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void Location::unsafe_arena_set_allocated_name(
    ::std::string* name) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (name != NULL) {
    
  } else {
    
  }
  name_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      name, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.location.Location.name)
}

// string location_id = 4;
inline void Location::clear_location_id() {
  location_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& Location::location_id() const {
  // @@protoc_insertion_point(field_get:google.cloud.location.Location.location_id)
  return location_id_.Get();
}
inline void Location::set_location_id(const ::std::string& value) {
  
  location_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.cloud.location.Location.location_id)
}
#if LANG_CXX11
inline void Location::set_location_id(::std::string&& value) {
  
  location_id_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.location.Location.location_id)
}
#endif
inline void Location::set_location_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  location_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.cloud.location.Location.location_id)
}
inline void Location::set_location_id(const char* value,
    size_t size) {
  
  location_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.cloud.location.Location.location_id)
}
inline ::std::string* Location::mutable_location_id() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.location.Location.location_id)
  return location_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* Location::release_location_id() {
  // @@protoc_insertion_point(field_release:google.cloud.location.Location.location_id)
  
  return location_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void Location::set_allocated_location_id(::std::string* location_id) {
  if (location_id != NULL) {
    
  } else {
    
  }
  location_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), location_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.cloud.location.Location.location_id)
}
inline ::std::string* Location::unsafe_arena_release_location_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.cloud.location.Location.location_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return location_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void Location::unsafe_arena_set_allocated_location_id(
    ::std::string* location_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (location_id != NULL) {
    
  } else {
    
  }
  location_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      location_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.location.Location.location_id)
}

// map<string, string> labels = 2;
inline int Location::labels_size() const {
  return labels_.size();
}
inline void Location::clear_labels() {
  labels_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::std::string >&
Location::labels() const {
  // @@protoc_insertion_point(field_map:google.cloud.location.Location.labels)
  return labels_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::std::string >*
Location::mutable_labels() {
  // @@protoc_insertion_point(field_mutable_map:google.cloud.location.Location.labels)
  return labels_.MutableMap();
}

// .google.protobuf.Any metadata = 3;
inline bool Location::has_metadata() const {
  return this != internal_default_instance() && metadata_ != NULL;
}
inline const ::google::protobuf::Any& Location::metadata() const {
  const ::google::protobuf::Any* p = metadata_;
  // @@protoc_insertion_point(field_get:google.cloud.location.Location.metadata)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::Any*>(
      &::google::protobuf::_Any_default_instance_);
}
inline ::google::protobuf::Any* Location::release_metadata() {
  // @@protoc_insertion_point(field_release:google.cloud.location.Location.metadata)
  
  ::google::protobuf::Any* temp = metadata_;
  if (GetArenaNoVirtual() != NULL) {
    temp = ::google::protobuf::internal::DuplicateIfNonNull(temp, NULL);
  }
  metadata_ = NULL;
  return temp;
}
inline ::google::protobuf::Any* Location::unsafe_arena_release_metadata() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.cloud.location.Location.metadata)
  
  ::google::protobuf::Any* temp = metadata_;
  metadata_ = NULL;
  return temp;
}
inline ::google::protobuf::Any* Location::mutable_metadata() {
  
  if (metadata_ == NULL) {
    _slow_mutable_metadata();
  }
  // @@protoc_insertion_point(field_mutable:google.cloud.location.Location.metadata)
  return metadata_;
}
inline void Location::set_allocated_metadata(::google::protobuf::Any* metadata) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(metadata_);
  }
  if (metadata) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      metadata = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, metadata, submessage_arena);
    }
    
  } else {
    
  }
  metadata_ = metadata;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.location.Location.metadata)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace location
}  // namespace cloud
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_google_2fcloud_2flocation_2flocations_2eproto__INCLUDED
