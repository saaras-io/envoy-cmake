// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/devtools/clouddebugger/v2/data.proto

#ifndef PROTOBUF_google_2fdevtools_2fclouddebugger_2fv2_2fdata_2eproto__INCLUDED
#define PROTOBUF_google_2fdevtools_2fclouddebugger_2fv2_2fdata_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "google/api/annotations.pb.h"
#include "google/devtools/source/v1/source_context.pb.h"
#include <google/protobuf/timestamp.pb.h>
#include <google/protobuf/wrappers.pb.h>
// @@protoc_insertion_point(includes)

namespace protobuf_google_2fdevtools_2fclouddebugger_2fv2_2fdata_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[9];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsFormatMessageImpl();
void InitDefaultsFormatMessage();
void InitDefaultsStatusMessageImpl();
void InitDefaultsStatusMessage();
void InitDefaultsSourceLocationImpl();
void InitDefaultsSourceLocation();
void InitDefaultsVariableImpl();
void InitDefaultsVariable();
void InitDefaultsStackFrameImpl();
void InitDefaultsStackFrame();
void InitDefaultsBreakpoint_LabelsEntry_DoNotUseImpl();
void InitDefaultsBreakpoint_LabelsEntry_DoNotUse();
void InitDefaultsBreakpointImpl();
void InitDefaultsBreakpoint();
void InitDefaultsDebuggee_LabelsEntry_DoNotUseImpl();
void InitDefaultsDebuggee_LabelsEntry_DoNotUse();
void InitDefaultsDebuggeeImpl();
void InitDefaultsDebuggee();
inline void InitDefaults() {
  InitDefaultsFormatMessage();
  InitDefaultsStatusMessage();
  InitDefaultsSourceLocation();
  InitDefaultsVariable();
  InitDefaultsStackFrame();
  InitDefaultsBreakpoint_LabelsEntry_DoNotUse();
  InitDefaultsBreakpoint();
  InitDefaultsDebuggee_LabelsEntry_DoNotUse();
  InitDefaultsDebuggee();
}
}  // namespace protobuf_google_2fdevtools_2fclouddebugger_2fv2_2fdata_2eproto
namespace google {
namespace devtools {
namespace clouddebugger {
namespace v2 {
class Breakpoint;
class BreakpointDefaultTypeInternal;
extern BreakpointDefaultTypeInternal _Breakpoint_default_instance_;
class Breakpoint_LabelsEntry_DoNotUse;
class Breakpoint_LabelsEntry_DoNotUseDefaultTypeInternal;
extern Breakpoint_LabelsEntry_DoNotUseDefaultTypeInternal _Breakpoint_LabelsEntry_DoNotUse_default_instance_;
class Debuggee;
class DebuggeeDefaultTypeInternal;
extern DebuggeeDefaultTypeInternal _Debuggee_default_instance_;
class Debuggee_LabelsEntry_DoNotUse;
class Debuggee_LabelsEntry_DoNotUseDefaultTypeInternal;
extern Debuggee_LabelsEntry_DoNotUseDefaultTypeInternal _Debuggee_LabelsEntry_DoNotUse_default_instance_;
class FormatMessage;
class FormatMessageDefaultTypeInternal;
extern FormatMessageDefaultTypeInternal _FormatMessage_default_instance_;
class SourceLocation;
class SourceLocationDefaultTypeInternal;
extern SourceLocationDefaultTypeInternal _SourceLocation_default_instance_;
class StackFrame;
class StackFrameDefaultTypeInternal;
extern StackFrameDefaultTypeInternal _StackFrame_default_instance_;
class StatusMessage;
class StatusMessageDefaultTypeInternal;
extern StatusMessageDefaultTypeInternal _StatusMessage_default_instance_;
class Variable;
class VariableDefaultTypeInternal;
extern VariableDefaultTypeInternal _Variable_default_instance_;
}  // namespace v2
}  // namespace clouddebugger
}  // namespace devtools
}  // namespace google
namespace google {
namespace devtools {
namespace clouddebugger {
namespace v2 {

enum StatusMessage_Reference {
  StatusMessage_Reference_UNSPECIFIED = 0,
  StatusMessage_Reference_BREAKPOINT_SOURCE_LOCATION = 3,
  StatusMessage_Reference_BREAKPOINT_CONDITION = 4,
  StatusMessage_Reference_BREAKPOINT_EXPRESSION = 7,
  StatusMessage_Reference_BREAKPOINT_AGE = 8,
  StatusMessage_Reference_VARIABLE_NAME = 5,
  StatusMessage_Reference_VARIABLE_VALUE = 6,
  StatusMessage_Reference_StatusMessage_Reference_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  StatusMessage_Reference_StatusMessage_Reference_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool StatusMessage_Reference_IsValid(int value);
const StatusMessage_Reference StatusMessage_Reference_Reference_MIN = StatusMessage_Reference_UNSPECIFIED;
const StatusMessage_Reference StatusMessage_Reference_Reference_MAX = StatusMessage_Reference_BREAKPOINT_AGE;
const int StatusMessage_Reference_Reference_ARRAYSIZE = StatusMessage_Reference_Reference_MAX + 1;

const ::google::protobuf::EnumDescriptor* StatusMessage_Reference_descriptor();
inline const ::std::string& StatusMessage_Reference_Name(StatusMessage_Reference value) {
  return ::google::protobuf::internal::NameOfEnum(
    StatusMessage_Reference_descriptor(), value);
}
inline bool StatusMessage_Reference_Parse(
    const ::std::string& name, StatusMessage_Reference* value) {
  return ::google::protobuf::internal::ParseNamedEnum<StatusMessage_Reference>(
    StatusMessage_Reference_descriptor(), name, value);
}
enum Breakpoint_Action {
  Breakpoint_Action_CAPTURE = 0,
  Breakpoint_Action_LOG = 1,
  Breakpoint_Action_Breakpoint_Action_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  Breakpoint_Action_Breakpoint_Action_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool Breakpoint_Action_IsValid(int value);
const Breakpoint_Action Breakpoint_Action_Action_MIN = Breakpoint_Action_CAPTURE;
const Breakpoint_Action Breakpoint_Action_Action_MAX = Breakpoint_Action_LOG;
const int Breakpoint_Action_Action_ARRAYSIZE = Breakpoint_Action_Action_MAX + 1;

const ::google::protobuf::EnumDescriptor* Breakpoint_Action_descriptor();
inline const ::std::string& Breakpoint_Action_Name(Breakpoint_Action value) {
  return ::google::protobuf::internal::NameOfEnum(
    Breakpoint_Action_descriptor(), value);
}
inline bool Breakpoint_Action_Parse(
    const ::std::string& name, Breakpoint_Action* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Breakpoint_Action>(
    Breakpoint_Action_descriptor(), name, value);
}
enum Breakpoint_LogLevel {
  Breakpoint_LogLevel_INFO = 0,
  Breakpoint_LogLevel_WARNING = 1,
  Breakpoint_LogLevel_ERROR = 2,
  Breakpoint_LogLevel_Breakpoint_LogLevel_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  Breakpoint_LogLevel_Breakpoint_LogLevel_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool Breakpoint_LogLevel_IsValid(int value);
const Breakpoint_LogLevel Breakpoint_LogLevel_LogLevel_MIN = Breakpoint_LogLevel_INFO;
const Breakpoint_LogLevel Breakpoint_LogLevel_LogLevel_MAX = Breakpoint_LogLevel_ERROR;
const int Breakpoint_LogLevel_LogLevel_ARRAYSIZE = Breakpoint_LogLevel_LogLevel_MAX + 1;

const ::google::protobuf::EnumDescriptor* Breakpoint_LogLevel_descriptor();
inline const ::std::string& Breakpoint_LogLevel_Name(Breakpoint_LogLevel value) {
  return ::google::protobuf::internal::NameOfEnum(
    Breakpoint_LogLevel_descriptor(), value);
}
inline bool Breakpoint_LogLevel_Parse(
    const ::std::string& name, Breakpoint_LogLevel* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Breakpoint_LogLevel>(
    Breakpoint_LogLevel_descriptor(), name, value);
}
// ===================================================================

class FormatMessage : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.devtools.clouddebugger.v2.FormatMessage) */ {
 public:
  FormatMessage();
  virtual ~FormatMessage();

  FormatMessage(const FormatMessage& from);

  inline FormatMessage& operator=(const FormatMessage& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FormatMessage(FormatMessage&& from) noexcept
    : FormatMessage() {
    *this = ::std::move(from);
  }

  inline FormatMessage& operator=(FormatMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const FormatMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FormatMessage* internal_default_instance() {
    return reinterpret_cast<const FormatMessage*>(
               &_FormatMessage_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(FormatMessage* other);
  friend void swap(FormatMessage& a, FormatMessage& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FormatMessage* New() const PROTOBUF_FINAL { return New(NULL); }

  FormatMessage* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const FormatMessage& from);
  void MergeFrom(const FormatMessage& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(FormatMessage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string parameters = 2;
  int parameters_size() const;
  void clear_parameters();
  static const int kParametersFieldNumber = 2;
  const ::std::string& parameters(int index) const;
  ::std::string* mutable_parameters(int index);
  void set_parameters(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_parameters(int index, ::std::string&& value);
  #endif
  void set_parameters(int index, const char* value);
  void set_parameters(int index, const char* value, size_t size);
  ::std::string* add_parameters();
  void add_parameters(const ::std::string& value);
  #if LANG_CXX11
  void add_parameters(::std::string&& value);
  #endif
  void add_parameters(const char* value);
  void add_parameters(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& parameters() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_parameters();

  // string format = 1;
  void clear_format();
  static const int kFormatFieldNumber = 1;
  const ::std::string& format() const;
  void set_format(const ::std::string& value);
  #if LANG_CXX11
  void set_format(::std::string&& value);
  #endif
  void set_format(const char* value);
  void set_format(const char* value, size_t size);
  ::std::string* mutable_format();
  ::std::string* release_format();
  void set_allocated_format(::std::string* format);

  // @@protoc_insertion_point(class_scope:google.devtools.clouddebugger.v2.FormatMessage)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> parameters_;
  ::google::protobuf::internal::ArenaStringPtr format_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fdevtools_2fclouddebugger_2fv2_2fdata_2eproto::TableStruct;
  friend void ::protobuf_google_2fdevtools_2fclouddebugger_2fv2_2fdata_2eproto::InitDefaultsFormatMessageImpl();
};
// -------------------------------------------------------------------

class StatusMessage : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.devtools.clouddebugger.v2.StatusMessage) */ {
 public:
  StatusMessage();
  virtual ~StatusMessage();

  StatusMessage(const StatusMessage& from);

  inline StatusMessage& operator=(const StatusMessage& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  StatusMessage(StatusMessage&& from) noexcept
    : StatusMessage() {
    *this = ::std::move(from);
  }

  inline StatusMessage& operator=(StatusMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const StatusMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StatusMessage* internal_default_instance() {
    return reinterpret_cast<const StatusMessage*>(
               &_StatusMessage_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(StatusMessage* other);
  friend void swap(StatusMessage& a, StatusMessage& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline StatusMessage* New() const PROTOBUF_FINAL { return New(NULL); }

  StatusMessage* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const StatusMessage& from);
  void MergeFrom(const StatusMessage& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(StatusMessage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef StatusMessage_Reference Reference;
  static const Reference UNSPECIFIED =
    StatusMessage_Reference_UNSPECIFIED;
  static const Reference BREAKPOINT_SOURCE_LOCATION =
    StatusMessage_Reference_BREAKPOINT_SOURCE_LOCATION;
  static const Reference BREAKPOINT_CONDITION =
    StatusMessage_Reference_BREAKPOINT_CONDITION;
  static const Reference BREAKPOINT_EXPRESSION =
    StatusMessage_Reference_BREAKPOINT_EXPRESSION;
  static const Reference BREAKPOINT_AGE =
    StatusMessage_Reference_BREAKPOINT_AGE;
  static const Reference VARIABLE_NAME =
    StatusMessage_Reference_VARIABLE_NAME;
  static const Reference VARIABLE_VALUE =
    StatusMessage_Reference_VARIABLE_VALUE;
  static inline bool Reference_IsValid(int value) {
    return StatusMessage_Reference_IsValid(value);
  }
  static const Reference Reference_MIN =
    StatusMessage_Reference_Reference_MIN;
  static const Reference Reference_MAX =
    StatusMessage_Reference_Reference_MAX;
  static const int Reference_ARRAYSIZE =
    StatusMessage_Reference_Reference_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Reference_descriptor() {
    return StatusMessage_Reference_descriptor();
  }
  static inline const ::std::string& Reference_Name(Reference value) {
    return StatusMessage_Reference_Name(value);
  }
  static inline bool Reference_Parse(const ::std::string& name,
      Reference* value) {
    return StatusMessage_Reference_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // .google.devtools.clouddebugger.v2.FormatMessage description = 3;
  bool has_description() const;
  void clear_description();
  static const int kDescriptionFieldNumber = 3;
  const ::google::devtools::clouddebugger::v2::FormatMessage& description() const;
  ::google::devtools::clouddebugger::v2::FormatMessage* release_description();
  ::google::devtools::clouddebugger::v2::FormatMessage* mutable_description();
  void set_allocated_description(::google::devtools::clouddebugger::v2::FormatMessage* description);

  // bool is_error = 1;
  void clear_is_error();
  static const int kIsErrorFieldNumber = 1;
  bool is_error() const;
  void set_is_error(bool value);

  // .google.devtools.clouddebugger.v2.StatusMessage.Reference refers_to = 2;
  void clear_refers_to();
  static const int kRefersToFieldNumber = 2;
  ::google::devtools::clouddebugger::v2::StatusMessage_Reference refers_to() const;
  void set_refers_to(::google::devtools::clouddebugger::v2::StatusMessage_Reference value);

  // @@protoc_insertion_point(class_scope:google.devtools.clouddebugger.v2.StatusMessage)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::devtools::clouddebugger::v2::FormatMessage* description_;
  bool is_error_;
  int refers_to_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fdevtools_2fclouddebugger_2fv2_2fdata_2eproto::TableStruct;
  friend void ::protobuf_google_2fdevtools_2fclouddebugger_2fv2_2fdata_2eproto::InitDefaultsStatusMessageImpl();
};
// -------------------------------------------------------------------

class SourceLocation : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.devtools.clouddebugger.v2.SourceLocation) */ {
 public:
  SourceLocation();
  virtual ~SourceLocation();

  SourceLocation(const SourceLocation& from);

  inline SourceLocation& operator=(const SourceLocation& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SourceLocation(SourceLocation&& from) noexcept
    : SourceLocation() {
    *this = ::std::move(from);
  }

  inline SourceLocation& operator=(SourceLocation&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SourceLocation& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SourceLocation* internal_default_instance() {
    return reinterpret_cast<const SourceLocation*>(
               &_SourceLocation_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(SourceLocation* other);
  friend void swap(SourceLocation& a, SourceLocation& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SourceLocation* New() const PROTOBUF_FINAL { return New(NULL); }

  SourceLocation* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SourceLocation& from);
  void MergeFrom(const SourceLocation& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SourceLocation* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string path = 1;
  void clear_path();
  static const int kPathFieldNumber = 1;
  const ::std::string& path() const;
  void set_path(const ::std::string& value);
  #if LANG_CXX11
  void set_path(::std::string&& value);
  #endif
  void set_path(const char* value);
  void set_path(const char* value, size_t size);
  ::std::string* mutable_path();
  ::std::string* release_path();
  void set_allocated_path(::std::string* path);

  // int32 line = 2;
  void clear_line();
  static const int kLineFieldNumber = 2;
  ::google::protobuf::int32 line() const;
  void set_line(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:google.devtools.clouddebugger.v2.SourceLocation)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr path_;
  ::google::protobuf::int32 line_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fdevtools_2fclouddebugger_2fv2_2fdata_2eproto::TableStruct;
  friend void ::protobuf_google_2fdevtools_2fclouddebugger_2fv2_2fdata_2eproto::InitDefaultsSourceLocationImpl();
};
// -------------------------------------------------------------------

class Variable : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.devtools.clouddebugger.v2.Variable) */ {
 public:
  Variable();
  virtual ~Variable();

  Variable(const Variable& from);

  inline Variable& operator=(const Variable& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Variable(Variable&& from) noexcept
    : Variable() {
    *this = ::std::move(from);
  }

  inline Variable& operator=(Variable&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Variable& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Variable* internal_default_instance() {
    return reinterpret_cast<const Variable*>(
               &_Variable_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(Variable* other);
  friend void swap(Variable& a, Variable& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Variable* New() const PROTOBUF_FINAL { return New(NULL); }

  Variable* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Variable& from);
  void MergeFrom(const Variable& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Variable* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .google.devtools.clouddebugger.v2.Variable members = 3;
  int members_size() const;
  void clear_members();
  static const int kMembersFieldNumber = 3;
  const ::google::devtools::clouddebugger::v2::Variable& members(int index) const;
  ::google::devtools::clouddebugger::v2::Variable* mutable_members(int index);
  ::google::devtools::clouddebugger::v2::Variable* add_members();
  ::google::protobuf::RepeatedPtrField< ::google::devtools::clouddebugger::v2::Variable >*
      mutable_members();
  const ::google::protobuf::RepeatedPtrField< ::google::devtools::clouddebugger::v2::Variable >&
      members() const;

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // string value = 2;
  void clear_value();
  static const int kValueFieldNumber = 2;
  const ::std::string& value() const;
  void set_value(const ::std::string& value);
  #if LANG_CXX11
  void set_value(::std::string&& value);
  #endif
  void set_value(const char* value);
  void set_value(const char* value, size_t size);
  ::std::string* mutable_value();
  ::std::string* release_value();
  void set_allocated_value(::std::string* value);

  // string type = 6;
  void clear_type();
  static const int kTypeFieldNumber = 6;
  const ::std::string& type() const;
  void set_type(const ::std::string& value);
  #if LANG_CXX11
  void set_type(::std::string&& value);
  #endif
  void set_type(const char* value);
  void set_type(const char* value, size_t size);
  ::std::string* mutable_type();
  ::std::string* release_type();
  void set_allocated_type(::std::string* type);

  // .google.protobuf.Int32Value var_table_index = 4;
  bool has_var_table_index() const;
  void clear_var_table_index();
  static const int kVarTableIndexFieldNumber = 4;
  const ::google::protobuf::Int32Value& var_table_index() const;
  ::google::protobuf::Int32Value* release_var_table_index();
  ::google::protobuf::Int32Value* mutable_var_table_index();
  void set_allocated_var_table_index(::google::protobuf::Int32Value* var_table_index);

  // .google.devtools.clouddebugger.v2.StatusMessage status = 5;
  bool has_status() const;
  void clear_status();
  static const int kStatusFieldNumber = 5;
  const ::google::devtools::clouddebugger::v2::StatusMessage& status() const;
  ::google::devtools::clouddebugger::v2::StatusMessage* release_status();
  ::google::devtools::clouddebugger::v2::StatusMessage* mutable_status();
  void set_allocated_status(::google::devtools::clouddebugger::v2::StatusMessage* status);

  // @@protoc_insertion_point(class_scope:google.devtools.clouddebugger.v2.Variable)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::google::devtools::clouddebugger::v2::Variable > members_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr value_;
  ::google::protobuf::internal::ArenaStringPtr type_;
  ::google::protobuf::Int32Value* var_table_index_;
  ::google::devtools::clouddebugger::v2::StatusMessage* status_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fdevtools_2fclouddebugger_2fv2_2fdata_2eproto::TableStruct;
  friend void ::protobuf_google_2fdevtools_2fclouddebugger_2fv2_2fdata_2eproto::InitDefaultsVariableImpl();
};
// -------------------------------------------------------------------

class StackFrame : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.devtools.clouddebugger.v2.StackFrame) */ {
 public:
  StackFrame();
  virtual ~StackFrame();

  StackFrame(const StackFrame& from);

  inline StackFrame& operator=(const StackFrame& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  StackFrame(StackFrame&& from) noexcept
    : StackFrame() {
    *this = ::std::move(from);
  }

  inline StackFrame& operator=(StackFrame&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const StackFrame& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StackFrame* internal_default_instance() {
    return reinterpret_cast<const StackFrame*>(
               &_StackFrame_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(StackFrame* other);
  friend void swap(StackFrame& a, StackFrame& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline StackFrame* New() const PROTOBUF_FINAL { return New(NULL); }

  StackFrame* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const StackFrame& from);
  void MergeFrom(const StackFrame& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(StackFrame* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .google.devtools.clouddebugger.v2.Variable arguments = 3;
  int arguments_size() const;
  void clear_arguments();
  static const int kArgumentsFieldNumber = 3;
  const ::google::devtools::clouddebugger::v2::Variable& arguments(int index) const;
  ::google::devtools::clouddebugger::v2::Variable* mutable_arguments(int index);
  ::google::devtools::clouddebugger::v2::Variable* add_arguments();
  ::google::protobuf::RepeatedPtrField< ::google::devtools::clouddebugger::v2::Variable >*
      mutable_arguments();
  const ::google::protobuf::RepeatedPtrField< ::google::devtools::clouddebugger::v2::Variable >&
      arguments() const;

  // repeated .google.devtools.clouddebugger.v2.Variable locals = 4;
  int locals_size() const;
  void clear_locals();
  static const int kLocalsFieldNumber = 4;
  const ::google::devtools::clouddebugger::v2::Variable& locals(int index) const;
  ::google::devtools::clouddebugger::v2::Variable* mutable_locals(int index);
  ::google::devtools::clouddebugger::v2::Variable* add_locals();
  ::google::protobuf::RepeatedPtrField< ::google::devtools::clouddebugger::v2::Variable >*
      mutable_locals();
  const ::google::protobuf::RepeatedPtrField< ::google::devtools::clouddebugger::v2::Variable >&
      locals() const;

  // string function = 1;
  void clear_function();
  static const int kFunctionFieldNumber = 1;
  const ::std::string& function() const;
  void set_function(const ::std::string& value);
  #if LANG_CXX11
  void set_function(::std::string&& value);
  #endif
  void set_function(const char* value);
  void set_function(const char* value, size_t size);
  ::std::string* mutable_function();
  ::std::string* release_function();
  void set_allocated_function(::std::string* function);

  // .google.devtools.clouddebugger.v2.SourceLocation location = 2;
  bool has_location() const;
  void clear_location();
  static const int kLocationFieldNumber = 2;
  const ::google::devtools::clouddebugger::v2::SourceLocation& location() const;
  ::google::devtools::clouddebugger::v2::SourceLocation* release_location();
  ::google::devtools::clouddebugger::v2::SourceLocation* mutable_location();
  void set_allocated_location(::google::devtools::clouddebugger::v2::SourceLocation* location);

  // @@protoc_insertion_point(class_scope:google.devtools.clouddebugger.v2.StackFrame)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::google::devtools::clouddebugger::v2::Variable > arguments_;
  ::google::protobuf::RepeatedPtrField< ::google::devtools::clouddebugger::v2::Variable > locals_;
  ::google::protobuf::internal::ArenaStringPtr function_;
  ::google::devtools::clouddebugger::v2::SourceLocation* location_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fdevtools_2fclouddebugger_2fv2_2fdata_2eproto::TableStruct;
  friend void ::protobuf_google_2fdevtools_2fclouddebugger_2fv2_2fdata_2eproto::InitDefaultsStackFrameImpl();
};
// -------------------------------------------------------------------

class Breakpoint_LabelsEntry_DoNotUse : public ::google::protobuf::internal::MapEntry<Breakpoint_LabelsEntry_DoNotUse, 
    ::std::string, ::std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    0 > {
public:
  typedef ::google::protobuf::internal::MapEntry<Breakpoint_LabelsEntry_DoNotUse, 
    ::std::string, ::std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    0 > SuperType;
  Breakpoint_LabelsEntry_DoNotUse();
  Breakpoint_LabelsEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const Breakpoint_LabelsEntry_DoNotUse& other);
  static const Breakpoint_LabelsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const Breakpoint_LabelsEntry_DoNotUse*>(&_Breakpoint_LabelsEntry_DoNotUse_default_instance_); }
  void MergeFrom(const ::google::protobuf::Message& other) PROTOBUF_FINAL;
  ::google::protobuf::Metadata GetMetadata() const;
};

// -------------------------------------------------------------------

class Breakpoint : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.devtools.clouddebugger.v2.Breakpoint) */ {
 public:
  Breakpoint();
  virtual ~Breakpoint();

  Breakpoint(const Breakpoint& from);

  inline Breakpoint& operator=(const Breakpoint& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Breakpoint(Breakpoint&& from) noexcept
    : Breakpoint() {
    *this = ::std::move(from);
  }

  inline Breakpoint& operator=(Breakpoint&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Breakpoint& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Breakpoint* internal_default_instance() {
    return reinterpret_cast<const Breakpoint*>(
               &_Breakpoint_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    6;

  void Swap(Breakpoint* other);
  friend void swap(Breakpoint& a, Breakpoint& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Breakpoint* New() const PROTOBUF_FINAL { return New(NULL); }

  Breakpoint* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Breakpoint& from);
  void MergeFrom(const Breakpoint& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Breakpoint* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------


  typedef Breakpoint_Action Action;
  static const Action CAPTURE =
    Breakpoint_Action_CAPTURE;
  static const Action LOG =
    Breakpoint_Action_LOG;
  static inline bool Action_IsValid(int value) {
    return Breakpoint_Action_IsValid(value);
  }
  static const Action Action_MIN =
    Breakpoint_Action_Action_MIN;
  static const Action Action_MAX =
    Breakpoint_Action_Action_MAX;
  static const int Action_ARRAYSIZE =
    Breakpoint_Action_Action_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Action_descriptor() {
    return Breakpoint_Action_descriptor();
  }
  static inline const ::std::string& Action_Name(Action value) {
    return Breakpoint_Action_Name(value);
  }
  static inline bool Action_Parse(const ::std::string& name,
      Action* value) {
    return Breakpoint_Action_Parse(name, value);
  }

  typedef Breakpoint_LogLevel LogLevel;
  static const LogLevel INFO =
    Breakpoint_LogLevel_INFO;
  static const LogLevel WARNING =
    Breakpoint_LogLevel_WARNING;
  static const LogLevel ERROR =
    Breakpoint_LogLevel_ERROR;
  static inline bool LogLevel_IsValid(int value) {
    return Breakpoint_LogLevel_IsValid(value);
  }
  static const LogLevel LogLevel_MIN =
    Breakpoint_LogLevel_LogLevel_MIN;
  static const LogLevel LogLevel_MAX =
    Breakpoint_LogLevel_LogLevel_MAX;
  static const int LogLevel_ARRAYSIZE =
    Breakpoint_LogLevel_LogLevel_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  LogLevel_descriptor() {
    return Breakpoint_LogLevel_descriptor();
  }
  static inline const ::std::string& LogLevel_Name(LogLevel value) {
    return Breakpoint_LogLevel_Name(value);
  }
  static inline bool LogLevel_Parse(const ::std::string& name,
      LogLevel* value) {
    return Breakpoint_LogLevel_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated string expressions = 4;
  int expressions_size() const;
  void clear_expressions();
  static const int kExpressionsFieldNumber = 4;
  const ::std::string& expressions(int index) const;
  ::std::string* mutable_expressions(int index);
  void set_expressions(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_expressions(int index, ::std::string&& value);
  #endif
  void set_expressions(int index, const char* value);
  void set_expressions(int index, const char* value, size_t size);
  ::std::string* add_expressions();
  void add_expressions(const ::std::string& value);
  #if LANG_CXX11
  void add_expressions(::std::string&& value);
  #endif
  void add_expressions(const char* value);
  void add_expressions(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& expressions() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_expressions();

  // repeated .google.devtools.clouddebugger.v2.StackFrame stack_frames = 7;
  int stack_frames_size() const;
  void clear_stack_frames();
  static const int kStackFramesFieldNumber = 7;
  const ::google::devtools::clouddebugger::v2::StackFrame& stack_frames(int index) const;
  ::google::devtools::clouddebugger::v2::StackFrame* mutable_stack_frames(int index);
  ::google::devtools::clouddebugger::v2::StackFrame* add_stack_frames();
  ::google::protobuf::RepeatedPtrField< ::google::devtools::clouddebugger::v2::StackFrame >*
      mutable_stack_frames();
  const ::google::protobuf::RepeatedPtrField< ::google::devtools::clouddebugger::v2::StackFrame >&
      stack_frames() const;

  // repeated .google.devtools.clouddebugger.v2.Variable evaluated_expressions = 8;
  int evaluated_expressions_size() const;
  void clear_evaluated_expressions();
  static const int kEvaluatedExpressionsFieldNumber = 8;
  const ::google::devtools::clouddebugger::v2::Variable& evaluated_expressions(int index) const;
  ::google::devtools::clouddebugger::v2::Variable* mutable_evaluated_expressions(int index);
  ::google::devtools::clouddebugger::v2::Variable* add_evaluated_expressions();
  ::google::protobuf::RepeatedPtrField< ::google::devtools::clouddebugger::v2::Variable >*
      mutable_evaluated_expressions();
  const ::google::protobuf::RepeatedPtrField< ::google::devtools::clouddebugger::v2::Variable >&
      evaluated_expressions() const;

  // repeated .google.devtools.clouddebugger.v2.Variable variable_table = 9;
  int variable_table_size() const;
  void clear_variable_table();
  static const int kVariableTableFieldNumber = 9;
  const ::google::devtools::clouddebugger::v2::Variable& variable_table(int index) const;
  ::google::devtools::clouddebugger::v2::Variable* mutable_variable_table(int index);
  ::google::devtools::clouddebugger::v2::Variable* add_variable_table();
  ::google::protobuf::RepeatedPtrField< ::google::devtools::clouddebugger::v2::Variable >*
      mutable_variable_table();
  const ::google::protobuf::RepeatedPtrField< ::google::devtools::clouddebugger::v2::Variable >&
      variable_table() const;

  // map<string, string> labels = 17;
  int labels_size() const;
  void clear_labels();
  static const int kLabelsFieldNumber = 17;
  const ::google::protobuf::Map< ::std::string, ::std::string >&
      labels() const;
  ::google::protobuf::Map< ::std::string, ::std::string >*
      mutable_labels();

  // string id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  #if LANG_CXX11
  void set_id(::std::string&& value);
  #endif
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // string condition = 3;
  void clear_condition();
  static const int kConditionFieldNumber = 3;
  const ::std::string& condition() const;
  void set_condition(const ::std::string& value);
  #if LANG_CXX11
  void set_condition(::std::string&& value);
  #endif
  void set_condition(const char* value);
  void set_condition(const char* value, size_t size);
  ::std::string* mutable_condition();
  ::std::string* release_condition();
  void set_allocated_condition(::std::string* condition);

  // string log_message_format = 14;
  void clear_log_message_format();
  static const int kLogMessageFormatFieldNumber = 14;
  const ::std::string& log_message_format() const;
  void set_log_message_format(const ::std::string& value);
  #if LANG_CXX11
  void set_log_message_format(::std::string&& value);
  #endif
  void set_log_message_format(const char* value);
  void set_log_message_format(const char* value, size_t size);
  ::std::string* mutable_log_message_format();
  ::std::string* release_log_message_format();
  void set_allocated_log_message_format(::std::string* log_message_format);

  // string user_email = 16;
  void clear_user_email();
  static const int kUserEmailFieldNumber = 16;
  const ::std::string& user_email() const;
  void set_user_email(const ::std::string& value);
  #if LANG_CXX11
  void set_user_email(::std::string&& value);
  #endif
  void set_user_email(const char* value);
  void set_user_email(const char* value, size_t size);
  ::std::string* mutable_user_email();
  ::std::string* release_user_email();
  void set_allocated_user_email(::std::string* user_email);

  // .google.devtools.clouddebugger.v2.SourceLocation location = 2;
  bool has_location() const;
  void clear_location();
  static const int kLocationFieldNumber = 2;
  const ::google::devtools::clouddebugger::v2::SourceLocation& location() const;
  ::google::devtools::clouddebugger::v2::SourceLocation* release_location();
  ::google::devtools::clouddebugger::v2::SourceLocation* mutable_location();
  void set_allocated_location(::google::devtools::clouddebugger::v2::SourceLocation* location);

  // .google.devtools.clouddebugger.v2.StatusMessage status = 10;
  bool has_status() const;
  void clear_status();
  static const int kStatusFieldNumber = 10;
  const ::google::devtools::clouddebugger::v2::StatusMessage& status() const;
  ::google::devtools::clouddebugger::v2::StatusMessage* release_status();
  ::google::devtools::clouddebugger::v2::StatusMessage* mutable_status();
  void set_allocated_status(::google::devtools::clouddebugger::v2::StatusMessage* status);

  // .google.protobuf.Timestamp create_time = 11;
  bool has_create_time() const;
  void clear_create_time();
  static const int kCreateTimeFieldNumber = 11;
  const ::google::protobuf::Timestamp& create_time() const;
  ::google::protobuf::Timestamp* release_create_time();
  ::google::protobuf::Timestamp* mutable_create_time();
  void set_allocated_create_time(::google::protobuf::Timestamp* create_time);

  // .google.protobuf.Timestamp final_time = 12;
  bool has_final_time() const;
  void clear_final_time();
  static const int kFinalTimeFieldNumber = 12;
  const ::google::protobuf::Timestamp& final_time() const;
  ::google::protobuf::Timestamp* release_final_time();
  ::google::protobuf::Timestamp* mutable_final_time();
  void set_allocated_final_time(::google::protobuf::Timestamp* final_time);

  // bool is_final_state = 5;
  void clear_is_final_state();
  static const int kIsFinalStateFieldNumber = 5;
  bool is_final_state() const;
  void set_is_final_state(bool value);

  // .google.devtools.clouddebugger.v2.Breakpoint.Action action = 13;
  void clear_action();
  static const int kActionFieldNumber = 13;
  ::google::devtools::clouddebugger::v2::Breakpoint_Action action() const;
  void set_action(::google::devtools::clouddebugger::v2::Breakpoint_Action value);

  // .google.devtools.clouddebugger.v2.Breakpoint.LogLevel log_level = 15;
  void clear_log_level();
  static const int kLogLevelFieldNumber = 15;
  ::google::devtools::clouddebugger::v2::Breakpoint_LogLevel log_level() const;
  void set_log_level(::google::devtools::clouddebugger::v2::Breakpoint_LogLevel value);

  // @@protoc_insertion_point(class_scope:google.devtools.clouddebugger.v2.Breakpoint)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> expressions_;
  ::google::protobuf::RepeatedPtrField< ::google::devtools::clouddebugger::v2::StackFrame > stack_frames_;
  ::google::protobuf::RepeatedPtrField< ::google::devtools::clouddebugger::v2::Variable > evaluated_expressions_;
  ::google::protobuf::RepeatedPtrField< ::google::devtools::clouddebugger::v2::Variable > variable_table_;
  ::google::protobuf::internal::MapField<
      Breakpoint_LabelsEntry_DoNotUse,
      ::std::string, ::std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      0 > labels_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  ::google::protobuf::internal::ArenaStringPtr condition_;
  ::google::protobuf::internal::ArenaStringPtr log_message_format_;
  ::google::protobuf::internal::ArenaStringPtr user_email_;
  ::google::devtools::clouddebugger::v2::SourceLocation* location_;
  ::google::devtools::clouddebugger::v2::StatusMessage* status_;
  ::google::protobuf::Timestamp* create_time_;
  ::google::protobuf::Timestamp* final_time_;
  bool is_final_state_;
  int action_;
  int log_level_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fdevtools_2fclouddebugger_2fv2_2fdata_2eproto::TableStruct;
  friend void ::protobuf_google_2fdevtools_2fclouddebugger_2fv2_2fdata_2eproto::InitDefaultsBreakpointImpl();
};
// -------------------------------------------------------------------

class Debuggee_LabelsEntry_DoNotUse : public ::google::protobuf::internal::MapEntry<Debuggee_LabelsEntry_DoNotUse, 
    ::std::string, ::std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    0 > {
public:
  typedef ::google::protobuf::internal::MapEntry<Debuggee_LabelsEntry_DoNotUse, 
    ::std::string, ::std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    0 > SuperType;
  Debuggee_LabelsEntry_DoNotUse();
  Debuggee_LabelsEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const Debuggee_LabelsEntry_DoNotUse& other);
  static const Debuggee_LabelsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const Debuggee_LabelsEntry_DoNotUse*>(&_Debuggee_LabelsEntry_DoNotUse_default_instance_); }
  void MergeFrom(const ::google::protobuf::Message& other) PROTOBUF_FINAL;
  ::google::protobuf::Metadata GetMetadata() const;
};

// -------------------------------------------------------------------

class Debuggee : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.devtools.clouddebugger.v2.Debuggee) */ {
 public:
  Debuggee();
  virtual ~Debuggee();

  Debuggee(const Debuggee& from);

  inline Debuggee& operator=(const Debuggee& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Debuggee(Debuggee&& from) noexcept
    : Debuggee() {
    *this = ::std::move(from);
  }

  inline Debuggee& operator=(Debuggee&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Debuggee& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Debuggee* internal_default_instance() {
    return reinterpret_cast<const Debuggee*>(
               &_Debuggee_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    8;

  void Swap(Debuggee* other);
  friend void swap(Debuggee& a, Debuggee& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Debuggee* New() const PROTOBUF_FINAL { return New(NULL); }

  Debuggee* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Debuggee& from);
  void MergeFrom(const Debuggee& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Debuggee* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // repeated .google.devtools.source.v1.SourceContext source_contexts = 9;
  int source_contexts_size() const;
  void clear_source_contexts();
  static const int kSourceContextsFieldNumber = 9;
  const ::google::devtools::source::v1::SourceContext& source_contexts(int index) const;
  ::google::devtools::source::v1::SourceContext* mutable_source_contexts(int index);
  ::google::devtools::source::v1::SourceContext* add_source_contexts();
  ::google::protobuf::RepeatedPtrField< ::google::devtools::source::v1::SourceContext >*
      mutable_source_contexts();
  const ::google::protobuf::RepeatedPtrField< ::google::devtools::source::v1::SourceContext >&
      source_contexts() const;

  // map<string, string> labels = 11;
  int labels_size() const;
  void clear_labels();
  static const int kLabelsFieldNumber = 11;
  const ::google::protobuf::Map< ::std::string, ::std::string >&
      labels() const;
  ::google::protobuf::Map< ::std::string, ::std::string >*
      mutable_labels();

  // repeated .google.devtools.source.v1.ExtendedSourceContext ext_source_contexts = 13;
  int ext_source_contexts_size() const;
  void clear_ext_source_contexts();
  static const int kExtSourceContextsFieldNumber = 13;
  const ::google::devtools::source::v1::ExtendedSourceContext& ext_source_contexts(int index) const;
  ::google::devtools::source::v1::ExtendedSourceContext* mutable_ext_source_contexts(int index);
  ::google::devtools::source::v1::ExtendedSourceContext* add_ext_source_contexts();
  ::google::protobuf::RepeatedPtrField< ::google::devtools::source::v1::ExtendedSourceContext >*
      mutable_ext_source_contexts();
  const ::google::protobuf::RepeatedPtrField< ::google::devtools::source::v1::ExtendedSourceContext >&
      ext_source_contexts() const;

  // string id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  #if LANG_CXX11
  void set_id(::std::string&& value);
  #endif
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // string project = 2;
  void clear_project();
  static const int kProjectFieldNumber = 2;
  const ::std::string& project() const;
  void set_project(const ::std::string& value);
  #if LANG_CXX11
  void set_project(::std::string&& value);
  #endif
  void set_project(const char* value);
  void set_project(const char* value, size_t size);
  ::std::string* mutable_project();
  ::std::string* release_project();
  void set_allocated_project(::std::string* project);

  // string uniquifier = 3;
  void clear_uniquifier();
  static const int kUniquifierFieldNumber = 3;
  const ::std::string& uniquifier() const;
  void set_uniquifier(const ::std::string& value);
  #if LANG_CXX11
  void set_uniquifier(::std::string&& value);
  #endif
  void set_uniquifier(const char* value);
  void set_uniquifier(const char* value, size_t size);
  ::std::string* mutable_uniquifier();
  ::std::string* release_uniquifier();
  void set_allocated_uniquifier(::std::string* uniquifier);

  // string description = 4;
  void clear_description();
  static const int kDescriptionFieldNumber = 4;
  const ::std::string& description() const;
  void set_description(const ::std::string& value);
  #if LANG_CXX11
  void set_description(::std::string&& value);
  #endif
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  ::std::string* mutable_description();
  ::std::string* release_description();
  void set_allocated_description(::std::string* description);

  // string agent_version = 6;
  void clear_agent_version();
  static const int kAgentVersionFieldNumber = 6;
  const ::std::string& agent_version() const;
  void set_agent_version(const ::std::string& value);
  #if LANG_CXX11
  void set_agent_version(::std::string&& value);
  #endif
  void set_agent_version(const char* value);
  void set_agent_version(const char* value, size_t size);
  ::std::string* mutable_agent_version();
  ::std::string* release_agent_version();
  void set_allocated_agent_version(::std::string* agent_version);

  // .google.devtools.clouddebugger.v2.StatusMessage status = 8;
  bool has_status() const;
  void clear_status();
  static const int kStatusFieldNumber = 8;
  const ::google::devtools::clouddebugger::v2::StatusMessage& status() const;
  ::google::devtools::clouddebugger::v2::StatusMessage* release_status();
  ::google::devtools::clouddebugger::v2::StatusMessage* mutable_status();
  void set_allocated_status(::google::devtools::clouddebugger::v2::StatusMessage* status);

  // bool is_inactive = 5;
  void clear_is_inactive();
  static const int kIsInactiveFieldNumber = 5;
  bool is_inactive() const;
  void set_is_inactive(bool value);

  // bool is_disabled = 7;
  void clear_is_disabled();
  static const int kIsDisabledFieldNumber = 7;
  bool is_disabled() const;
  void set_is_disabled(bool value);

  // @@protoc_insertion_point(class_scope:google.devtools.clouddebugger.v2.Debuggee)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::google::devtools::source::v1::SourceContext > source_contexts_;
  ::google::protobuf::internal::MapField<
      Debuggee_LabelsEntry_DoNotUse,
      ::std::string, ::std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      0 > labels_;
  ::google::protobuf::RepeatedPtrField< ::google::devtools::source::v1::ExtendedSourceContext > ext_source_contexts_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  ::google::protobuf::internal::ArenaStringPtr project_;
  ::google::protobuf::internal::ArenaStringPtr uniquifier_;
  ::google::protobuf::internal::ArenaStringPtr description_;
  ::google::protobuf::internal::ArenaStringPtr agent_version_;
  ::google::devtools::clouddebugger::v2::StatusMessage* status_;
  bool is_inactive_;
  bool is_disabled_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fdevtools_2fclouddebugger_2fv2_2fdata_2eproto::TableStruct;
  friend void ::protobuf_google_2fdevtools_2fclouddebugger_2fv2_2fdata_2eproto::InitDefaultsDebuggeeImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// FormatMessage

// string format = 1;
inline void FormatMessage::clear_format() {
  format_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& FormatMessage::format() const {
  // @@protoc_insertion_point(field_get:google.devtools.clouddebugger.v2.FormatMessage.format)
  return format_.GetNoArena();
}
inline void FormatMessage::set_format(const ::std::string& value) {
  
  format_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.devtools.clouddebugger.v2.FormatMessage.format)
}
#if LANG_CXX11
inline void FormatMessage::set_format(::std::string&& value) {
  
  format_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.devtools.clouddebugger.v2.FormatMessage.format)
}
#endif
inline void FormatMessage::set_format(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  format_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.devtools.clouddebugger.v2.FormatMessage.format)
}
inline void FormatMessage::set_format(const char* value, size_t size) {
  
  format_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.devtools.clouddebugger.v2.FormatMessage.format)
}
inline ::std::string* FormatMessage::mutable_format() {
  
  // @@protoc_insertion_point(field_mutable:google.devtools.clouddebugger.v2.FormatMessage.format)
  return format_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FormatMessage::release_format() {
  // @@protoc_insertion_point(field_release:google.devtools.clouddebugger.v2.FormatMessage.format)
  
  return format_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FormatMessage::set_allocated_format(::std::string* format) {
  if (format != NULL) {
    
  } else {
    
  }
  format_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), format);
  // @@protoc_insertion_point(field_set_allocated:google.devtools.clouddebugger.v2.FormatMessage.format)
}

// repeated string parameters = 2;
inline int FormatMessage::parameters_size() const {
  return parameters_.size();
}
inline void FormatMessage::clear_parameters() {
  parameters_.Clear();
}
inline const ::std::string& FormatMessage::parameters(int index) const {
  // @@protoc_insertion_point(field_get:google.devtools.clouddebugger.v2.FormatMessage.parameters)
  return parameters_.Get(index);
}
inline ::std::string* FormatMessage::mutable_parameters(int index) {
  // @@protoc_insertion_point(field_mutable:google.devtools.clouddebugger.v2.FormatMessage.parameters)
  return parameters_.Mutable(index);
}
inline void FormatMessage::set_parameters(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:google.devtools.clouddebugger.v2.FormatMessage.parameters)
  parameters_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void FormatMessage::set_parameters(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:google.devtools.clouddebugger.v2.FormatMessage.parameters)
  parameters_.Mutable(index)->assign(std::move(value));
}
#endif
inline void FormatMessage::set_parameters(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  parameters_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:google.devtools.clouddebugger.v2.FormatMessage.parameters)
}
inline void FormatMessage::set_parameters(int index, const char* value, size_t size) {
  parameters_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:google.devtools.clouddebugger.v2.FormatMessage.parameters)
}
inline ::std::string* FormatMessage::add_parameters() {
  // @@protoc_insertion_point(field_add_mutable:google.devtools.clouddebugger.v2.FormatMessage.parameters)
  return parameters_.Add();
}
inline void FormatMessage::add_parameters(const ::std::string& value) {
  parameters_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:google.devtools.clouddebugger.v2.FormatMessage.parameters)
}
#if LANG_CXX11
inline void FormatMessage::add_parameters(::std::string&& value) {
  parameters_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:google.devtools.clouddebugger.v2.FormatMessage.parameters)
}
#endif
inline void FormatMessage::add_parameters(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  parameters_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:google.devtools.clouddebugger.v2.FormatMessage.parameters)
}
inline void FormatMessage::add_parameters(const char* value, size_t size) {
  parameters_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:google.devtools.clouddebugger.v2.FormatMessage.parameters)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
FormatMessage::parameters() const {
  // @@protoc_insertion_point(field_list:google.devtools.clouddebugger.v2.FormatMessage.parameters)
  return parameters_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
FormatMessage::mutable_parameters() {
  // @@protoc_insertion_point(field_mutable_list:google.devtools.clouddebugger.v2.FormatMessage.parameters)
  return &parameters_;
}

// -------------------------------------------------------------------

// StatusMessage

// bool is_error = 1;
inline void StatusMessage::clear_is_error() {
  is_error_ = false;
}
inline bool StatusMessage::is_error() const {
  // @@protoc_insertion_point(field_get:google.devtools.clouddebugger.v2.StatusMessage.is_error)
  return is_error_;
}
inline void StatusMessage::set_is_error(bool value) {
  
  is_error_ = value;
  // @@protoc_insertion_point(field_set:google.devtools.clouddebugger.v2.StatusMessage.is_error)
}

// .google.devtools.clouddebugger.v2.StatusMessage.Reference refers_to = 2;
inline void StatusMessage::clear_refers_to() {
  refers_to_ = 0;
}
inline ::google::devtools::clouddebugger::v2::StatusMessage_Reference StatusMessage::refers_to() const {
  // @@protoc_insertion_point(field_get:google.devtools.clouddebugger.v2.StatusMessage.refers_to)
  return static_cast< ::google::devtools::clouddebugger::v2::StatusMessage_Reference >(refers_to_);
}
inline void StatusMessage::set_refers_to(::google::devtools::clouddebugger::v2::StatusMessage_Reference value) {
  
  refers_to_ = value;
  // @@protoc_insertion_point(field_set:google.devtools.clouddebugger.v2.StatusMessage.refers_to)
}

// .google.devtools.clouddebugger.v2.FormatMessage description = 3;
inline bool StatusMessage::has_description() const {
  return this != internal_default_instance() && description_ != NULL;
}
inline void StatusMessage::clear_description() {
  if (GetArenaNoVirtual() == NULL && description_ != NULL) {
    delete description_;
  }
  description_ = NULL;
}
inline const ::google::devtools::clouddebugger::v2::FormatMessage& StatusMessage::description() const {
  const ::google::devtools::clouddebugger::v2::FormatMessage* p = description_;
  // @@protoc_insertion_point(field_get:google.devtools.clouddebugger.v2.StatusMessage.description)
  return p != NULL ? *p : *reinterpret_cast<const ::google::devtools::clouddebugger::v2::FormatMessage*>(
      &::google::devtools::clouddebugger::v2::_FormatMessage_default_instance_);
}
inline ::google::devtools::clouddebugger::v2::FormatMessage* StatusMessage::release_description() {
  // @@protoc_insertion_point(field_release:google.devtools.clouddebugger.v2.StatusMessage.description)
  
  ::google::devtools::clouddebugger::v2::FormatMessage* temp = description_;
  description_ = NULL;
  return temp;
}
inline ::google::devtools::clouddebugger::v2::FormatMessage* StatusMessage::mutable_description() {
  
  if (description_ == NULL) {
    description_ = new ::google::devtools::clouddebugger::v2::FormatMessage;
  }
  // @@protoc_insertion_point(field_mutable:google.devtools.clouddebugger.v2.StatusMessage.description)
  return description_;
}
inline void StatusMessage::set_allocated_description(::google::devtools::clouddebugger::v2::FormatMessage* description) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete description_;
  }
  if (description) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      description = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, description, submessage_arena);
    }
    
  } else {
    
  }
  description_ = description;
  // @@protoc_insertion_point(field_set_allocated:google.devtools.clouddebugger.v2.StatusMessage.description)
}

// -------------------------------------------------------------------

// SourceLocation

// string path = 1;
inline void SourceLocation::clear_path() {
  path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SourceLocation::path() const {
  // @@protoc_insertion_point(field_get:google.devtools.clouddebugger.v2.SourceLocation.path)
  return path_.GetNoArena();
}
inline void SourceLocation::set_path(const ::std::string& value) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.devtools.clouddebugger.v2.SourceLocation.path)
}
#if LANG_CXX11
inline void SourceLocation::set_path(::std::string&& value) {
  
  path_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.devtools.clouddebugger.v2.SourceLocation.path)
}
#endif
inline void SourceLocation::set_path(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.devtools.clouddebugger.v2.SourceLocation.path)
}
inline void SourceLocation::set_path(const char* value, size_t size) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.devtools.clouddebugger.v2.SourceLocation.path)
}
inline ::std::string* SourceLocation::mutable_path() {
  
  // @@protoc_insertion_point(field_mutable:google.devtools.clouddebugger.v2.SourceLocation.path)
  return path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SourceLocation::release_path() {
  // @@protoc_insertion_point(field_release:google.devtools.clouddebugger.v2.SourceLocation.path)
  
  return path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SourceLocation::set_allocated_path(::std::string* path) {
  if (path != NULL) {
    
  } else {
    
  }
  path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), path);
  // @@protoc_insertion_point(field_set_allocated:google.devtools.clouddebugger.v2.SourceLocation.path)
}

// int32 line = 2;
inline void SourceLocation::clear_line() {
  line_ = 0;
}
inline ::google::protobuf::int32 SourceLocation::line() const {
  // @@protoc_insertion_point(field_get:google.devtools.clouddebugger.v2.SourceLocation.line)
  return line_;
}
inline void SourceLocation::set_line(::google::protobuf::int32 value) {
  
  line_ = value;
  // @@protoc_insertion_point(field_set:google.devtools.clouddebugger.v2.SourceLocation.line)
}

// -------------------------------------------------------------------

// Variable

// string name = 1;
inline void Variable::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Variable::name() const {
  // @@protoc_insertion_point(field_get:google.devtools.clouddebugger.v2.Variable.name)
  return name_.GetNoArena();
}
inline void Variable::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.devtools.clouddebugger.v2.Variable.name)
}
#if LANG_CXX11
inline void Variable::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.devtools.clouddebugger.v2.Variable.name)
}
#endif
inline void Variable::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.devtools.clouddebugger.v2.Variable.name)
}
inline void Variable::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.devtools.clouddebugger.v2.Variable.name)
}
inline ::std::string* Variable::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:google.devtools.clouddebugger.v2.Variable.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Variable::release_name() {
  // @@protoc_insertion_point(field_release:google.devtools.clouddebugger.v2.Variable.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Variable::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:google.devtools.clouddebugger.v2.Variable.name)
}

// string value = 2;
inline void Variable::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Variable::value() const {
  // @@protoc_insertion_point(field_get:google.devtools.clouddebugger.v2.Variable.value)
  return value_.GetNoArena();
}
inline void Variable::set_value(const ::std::string& value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.devtools.clouddebugger.v2.Variable.value)
}
#if LANG_CXX11
inline void Variable::set_value(::std::string&& value) {
  
  value_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.devtools.clouddebugger.v2.Variable.value)
}
#endif
inline void Variable::set_value(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.devtools.clouddebugger.v2.Variable.value)
}
inline void Variable::set_value(const char* value, size_t size) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.devtools.clouddebugger.v2.Variable.value)
}
inline ::std::string* Variable::mutable_value() {
  
  // @@protoc_insertion_point(field_mutable:google.devtools.clouddebugger.v2.Variable.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Variable::release_value() {
  // @@protoc_insertion_point(field_release:google.devtools.clouddebugger.v2.Variable.value)
  
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Variable::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    
  } else {
    
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:google.devtools.clouddebugger.v2.Variable.value)
}

// string type = 6;
inline void Variable::clear_type() {
  type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Variable::type() const {
  // @@protoc_insertion_point(field_get:google.devtools.clouddebugger.v2.Variable.type)
  return type_.GetNoArena();
}
inline void Variable::set_type(const ::std::string& value) {
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.devtools.clouddebugger.v2.Variable.type)
}
#if LANG_CXX11
inline void Variable::set_type(::std::string&& value) {
  
  type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.devtools.clouddebugger.v2.Variable.type)
}
#endif
inline void Variable::set_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.devtools.clouddebugger.v2.Variable.type)
}
inline void Variable::set_type(const char* value, size_t size) {
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.devtools.clouddebugger.v2.Variable.type)
}
inline ::std::string* Variable::mutable_type() {
  
  // @@protoc_insertion_point(field_mutable:google.devtools.clouddebugger.v2.Variable.type)
  return type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Variable::release_type() {
  // @@protoc_insertion_point(field_release:google.devtools.clouddebugger.v2.Variable.type)
  
  return type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Variable::set_allocated_type(::std::string* type) {
  if (type != NULL) {
    
  } else {
    
  }
  type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), type);
  // @@protoc_insertion_point(field_set_allocated:google.devtools.clouddebugger.v2.Variable.type)
}

// repeated .google.devtools.clouddebugger.v2.Variable members = 3;
inline int Variable::members_size() const {
  return members_.size();
}
inline void Variable::clear_members() {
  members_.Clear();
}
inline const ::google::devtools::clouddebugger::v2::Variable& Variable::members(int index) const {
  // @@protoc_insertion_point(field_get:google.devtools.clouddebugger.v2.Variable.members)
  return members_.Get(index);
}
inline ::google::devtools::clouddebugger::v2::Variable* Variable::mutable_members(int index) {
  // @@protoc_insertion_point(field_mutable:google.devtools.clouddebugger.v2.Variable.members)
  return members_.Mutable(index);
}
inline ::google::devtools::clouddebugger::v2::Variable* Variable::add_members() {
  // @@protoc_insertion_point(field_add:google.devtools.clouddebugger.v2.Variable.members)
  return members_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::google::devtools::clouddebugger::v2::Variable >*
Variable::mutable_members() {
  // @@protoc_insertion_point(field_mutable_list:google.devtools.clouddebugger.v2.Variable.members)
  return &members_;
}
inline const ::google::protobuf::RepeatedPtrField< ::google::devtools::clouddebugger::v2::Variable >&
Variable::members() const {
  // @@protoc_insertion_point(field_list:google.devtools.clouddebugger.v2.Variable.members)
  return members_;
}

// .google.protobuf.Int32Value var_table_index = 4;
inline bool Variable::has_var_table_index() const {
  return this != internal_default_instance() && var_table_index_ != NULL;
}
inline const ::google::protobuf::Int32Value& Variable::var_table_index() const {
  const ::google::protobuf::Int32Value* p = var_table_index_;
  // @@protoc_insertion_point(field_get:google.devtools.clouddebugger.v2.Variable.var_table_index)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::Int32Value*>(
      &::google::protobuf::_Int32Value_default_instance_);
}
inline ::google::protobuf::Int32Value* Variable::release_var_table_index() {
  // @@protoc_insertion_point(field_release:google.devtools.clouddebugger.v2.Variable.var_table_index)
  
  ::google::protobuf::Int32Value* temp = var_table_index_;
  var_table_index_ = NULL;
  return temp;
}
inline ::google::protobuf::Int32Value* Variable::mutable_var_table_index() {
  
  if (var_table_index_ == NULL) {
    var_table_index_ = new ::google::protobuf::Int32Value;
  }
  // @@protoc_insertion_point(field_mutable:google.devtools.clouddebugger.v2.Variable.var_table_index)
  return var_table_index_;
}
inline void Variable::set_allocated_var_table_index(::google::protobuf::Int32Value* var_table_index) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(var_table_index_);
  }
  if (var_table_index) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast< ::google::protobuf::MessageLite*>(var_table_index)->GetArena();
    if (message_arena != submessage_arena) {
      var_table_index = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, var_table_index, submessage_arena);
    }
    
  } else {
    
  }
  var_table_index_ = var_table_index;
  // @@protoc_insertion_point(field_set_allocated:google.devtools.clouddebugger.v2.Variable.var_table_index)
}

// .google.devtools.clouddebugger.v2.StatusMessage status = 5;
inline bool Variable::has_status() const {
  return this != internal_default_instance() && status_ != NULL;
}
inline void Variable::clear_status() {
  if (GetArenaNoVirtual() == NULL && status_ != NULL) {
    delete status_;
  }
  status_ = NULL;
}
inline const ::google::devtools::clouddebugger::v2::StatusMessage& Variable::status() const {
  const ::google::devtools::clouddebugger::v2::StatusMessage* p = status_;
  // @@protoc_insertion_point(field_get:google.devtools.clouddebugger.v2.Variable.status)
  return p != NULL ? *p : *reinterpret_cast<const ::google::devtools::clouddebugger::v2::StatusMessage*>(
      &::google::devtools::clouddebugger::v2::_StatusMessage_default_instance_);
}
inline ::google::devtools::clouddebugger::v2::StatusMessage* Variable::release_status() {
  // @@protoc_insertion_point(field_release:google.devtools.clouddebugger.v2.Variable.status)
  
  ::google::devtools::clouddebugger::v2::StatusMessage* temp = status_;
  status_ = NULL;
  return temp;
}
inline ::google::devtools::clouddebugger::v2::StatusMessage* Variable::mutable_status() {
  
  if (status_ == NULL) {
    status_ = new ::google::devtools::clouddebugger::v2::StatusMessage;
  }
  // @@protoc_insertion_point(field_mutable:google.devtools.clouddebugger.v2.Variable.status)
  return status_;
}
inline void Variable::set_allocated_status(::google::devtools::clouddebugger::v2::StatusMessage* status) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete status_;
  }
  if (status) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      status = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:google.devtools.clouddebugger.v2.Variable.status)
}

// -------------------------------------------------------------------

// StackFrame

// string function = 1;
inline void StackFrame::clear_function() {
  function_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& StackFrame::function() const {
  // @@protoc_insertion_point(field_get:google.devtools.clouddebugger.v2.StackFrame.function)
  return function_.GetNoArena();
}
inline void StackFrame::set_function(const ::std::string& value) {
  
  function_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.devtools.clouddebugger.v2.StackFrame.function)
}
#if LANG_CXX11
inline void StackFrame::set_function(::std::string&& value) {
  
  function_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.devtools.clouddebugger.v2.StackFrame.function)
}
#endif
inline void StackFrame::set_function(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  function_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.devtools.clouddebugger.v2.StackFrame.function)
}
inline void StackFrame::set_function(const char* value, size_t size) {
  
  function_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.devtools.clouddebugger.v2.StackFrame.function)
}
inline ::std::string* StackFrame::mutable_function() {
  
  // @@protoc_insertion_point(field_mutable:google.devtools.clouddebugger.v2.StackFrame.function)
  return function_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StackFrame::release_function() {
  // @@protoc_insertion_point(field_release:google.devtools.clouddebugger.v2.StackFrame.function)
  
  return function_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StackFrame::set_allocated_function(::std::string* function) {
  if (function != NULL) {
    
  } else {
    
  }
  function_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), function);
  // @@protoc_insertion_point(field_set_allocated:google.devtools.clouddebugger.v2.StackFrame.function)
}

// .google.devtools.clouddebugger.v2.SourceLocation location = 2;
inline bool StackFrame::has_location() const {
  return this != internal_default_instance() && location_ != NULL;
}
inline void StackFrame::clear_location() {
  if (GetArenaNoVirtual() == NULL && location_ != NULL) {
    delete location_;
  }
  location_ = NULL;
}
inline const ::google::devtools::clouddebugger::v2::SourceLocation& StackFrame::location() const {
  const ::google::devtools::clouddebugger::v2::SourceLocation* p = location_;
  // @@protoc_insertion_point(field_get:google.devtools.clouddebugger.v2.StackFrame.location)
  return p != NULL ? *p : *reinterpret_cast<const ::google::devtools::clouddebugger::v2::SourceLocation*>(
      &::google::devtools::clouddebugger::v2::_SourceLocation_default_instance_);
}
inline ::google::devtools::clouddebugger::v2::SourceLocation* StackFrame::release_location() {
  // @@protoc_insertion_point(field_release:google.devtools.clouddebugger.v2.StackFrame.location)
  
  ::google::devtools::clouddebugger::v2::SourceLocation* temp = location_;
  location_ = NULL;
  return temp;
}
inline ::google::devtools::clouddebugger::v2::SourceLocation* StackFrame::mutable_location() {
  
  if (location_ == NULL) {
    location_ = new ::google::devtools::clouddebugger::v2::SourceLocation;
  }
  // @@protoc_insertion_point(field_mutable:google.devtools.clouddebugger.v2.StackFrame.location)
  return location_;
}
inline void StackFrame::set_allocated_location(::google::devtools::clouddebugger::v2::SourceLocation* location) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete location_;
  }
  if (location) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      location = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, location, submessage_arena);
    }
    
  } else {
    
  }
  location_ = location;
  // @@protoc_insertion_point(field_set_allocated:google.devtools.clouddebugger.v2.StackFrame.location)
}

// repeated .google.devtools.clouddebugger.v2.Variable arguments = 3;
inline int StackFrame::arguments_size() const {
  return arguments_.size();
}
inline void StackFrame::clear_arguments() {
  arguments_.Clear();
}
inline const ::google::devtools::clouddebugger::v2::Variable& StackFrame::arguments(int index) const {
  // @@protoc_insertion_point(field_get:google.devtools.clouddebugger.v2.StackFrame.arguments)
  return arguments_.Get(index);
}
inline ::google::devtools::clouddebugger::v2::Variable* StackFrame::mutable_arguments(int index) {
  // @@protoc_insertion_point(field_mutable:google.devtools.clouddebugger.v2.StackFrame.arguments)
  return arguments_.Mutable(index);
}
inline ::google::devtools::clouddebugger::v2::Variable* StackFrame::add_arguments() {
  // @@protoc_insertion_point(field_add:google.devtools.clouddebugger.v2.StackFrame.arguments)
  return arguments_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::google::devtools::clouddebugger::v2::Variable >*
StackFrame::mutable_arguments() {
  // @@protoc_insertion_point(field_mutable_list:google.devtools.clouddebugger.v2.StackFrame.arguments)
  return &arguments_;
}
inline const ::google::protobuf::RepeatedPtrField< ::google::devtools::clouddebugger::v2::Variable >&
StackFrame::arguments() const {
  // @@protoc_insertion_point(field_list:google.devtools.clouddebugger.v2.StackFrame.arguments)
  return arguments_;
}

// repeated .google.devtools.clouddebugger.v2.Variable locals = 4;
inline int StackFrame::locals_size() const {
  return locals_.size();
}
inline void StackFrame::clear_locals() {
  locals_.Clear();
}
inline const ::google::devtools::clouddebugger::v2::Variable& StackFrame::locals(int index) const {
  // @@protoc_insertion_point(field_get:google.devtools.clouddebugger.v2.StackFrame.locals)
  return locals_.Get(index);
}
inline ::google::devtools::clouddebugger::v2::Variable* StackFrame::mutable_locals(int index) {
  // @@protoc_insertion_point(field_mutable:google.devtools.clouddebugger.v2.StackFrame.locals)
  return locals_.Mutable(index);
}
inline ::google::devtools::clouddebugger::v2::Variable* StackFrame::add_locals() {
  // @@protoc_insertion_point(field_add:google.devtools.clouddebugger.v2.StackFrame.locals)
  return locals_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::google::devtools::clouddebugger::v2::Variable >*
StackFrame::mutable_locals() {
  // @@protoc_insertion_point(field_mutable_list:google.devtools.clouddebugger.v2.StackFrame.locals)
  return &locals_;
}
inline const ::google::protobuf::RepeatedPtrField< ::google::devtools::clouddebugger::v2::Variable >&
StackFrame::locals() const {
  // @@protoc_insertion_point(field_list:google.devtools.clouddebugger.v2.StackFrame.locals)
  return locals_;
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// Breakpoint

// string id = 1;
inline void Breakpoint::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Breakpoint::id() const {
  // @@protoc_insertion_point(field_get:google.devtools.clouddebugger.v2.Breakpoint.id)
  return id_.GetNoArena();
}
inline void Breakpoint::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.devtools.clouddebugger.v2.Breakpoint.id)
}
#if LANG_CXX11
inline void Breakpoint::set_id(::std::string&& value) {
  
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.devtools.clouddebugger.v2.Breakpoint.id)
}
#endif
inline void Breakpoint::set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.devtools.clouddebugger.v2.Breakpoint.id)
}
inline void Breakpoint::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.devtools.clouddebugger.v2.Breakpoint.id)
}
inline ::std::string* Breakpoint::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:google.devtools.clouddebugger.v2.Breakpoint.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Breakpoint::release_id() {
  // @@protoc_insertion_point(field_release:google.devtools.clouddebugger.v2.Breakpoint.id)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Breakpoint::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:google.devtools.clouddebugger.v2.Breakpoint.id)
}

// .google.devtools.clouddebugger.v2.Breakpoint.Action action = 13;
inline void Breakpoint::clear_action() {
  action_ = 0;
}
inline ::google::devtools::clouddebugger::v2::Breakpoint_Action Breakpoint::action() const {
  // @@protoc_insertion_point(field_get:google.devtools.clouddebugger.v2.Breakpoint.action)
  return static_cast< ::google::devtools::clouddebugger::v2::Breakpoint_Action >(action_);
}
inline void Breakpoint::set_action(::google::devtools::clouddebugger::v2::Breakpoint_Action value) {
  
  action_ = value;
  // @@protoc_insertion_point(field_set:google.devtools.clouddebugger.v2.Breakpoint.action)
}

// .google.devtools.clouddebugger.v2.SourceLocation location = 2;
inline bool Breakpoint::has_location() const {
  return this != internal_default_instance() && location_ != NULL;
}
inline void Breakpoint::clear_location() {
  if (GetArenaNoVirtual() == NULL && location_ != NULL) {
    delete location_;
  }
  location_ = NULL;
}
inline const ::google::devtools::clouddebugger::v2::SourceLocation& Breakpoint::location() const {
  const ::google::devtools::clouddebugger::v2::SourceLocation* p = location_;
  // @@protoc_insertion_point(field_get:google.devtools.clouddebugger.v2.Breakpoint.location)
  return p != NULL ? *p : *reinterpret_cast<const ::google::devtools::clouddebugger::v2::SourceLocation*>(
      &::google::devtools::clouddebugger::v2::_SourceLocation_default_instance_);
}
inline ::google::devtools::clouddebugger::v2::SourceLocation* Breakpoint::release_location() {
  // @@protoc_insertion_point(field_release:google.devtools.clouddebugger.v2.Breakpoint.location)
  
  ::google::devtools::clouddebugger::v2::SourceLocation* temp = location_;
  location_ = NULL;
  return temp;
}
inline ::google::devtools::clouddebugger::v2::SourceLocation* Breakpoint::mutable_location() {
  
  if (location_ == NULL) {
    location_ = new ::google::devtools::clouddebugger::v2::SourceLocation;
  }
  // @@protoc_insertion_point(field_mutable:google.devtools.clouddebugger.v2.Breakpoint.location)
  return location_;
}
inline void Breakpoint::set_allocated_location(::google::devtools::clouddebugger::v2::SourceLocation* location) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete location_;
  }
  if (location) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      location = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, location, submessage_arena);
    }
    
  } else {
    
  }
  location_ = location;
  // @@protoc_insertion_point(field_set_allocated:google.devtools.clouddebugger.v2.Breakpoint.location)
}

// string condition = 3;
inline void Breakpoint::clear_condition() {
  condition_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Breakpoint::condition() const {
  // @@protoc_insertion_point(field_get:google.devtools.clouddebugger.v2.Breakpoint.condition)
  return condition_.GetNoArena();
}
inline void Breakpoint::set_condition(const ::std::string& value) {
  
  condition_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.devtools.clouddebugger.v2.Breakpoint.condition)
}
#if LANG_CXX11
inline void Breakpoint::set_condition(::std::string&& value) {
  
  condition_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.devtools.clouddebugger.v2.Breakpoint.condition)
}
#endif
inline void Breakpoint::set_condition(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  condition_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.devtools.clouddebugger.v2.Breakpoint.condition)
}
inline void Breakpoint::set_condition(const char* value, size_t size) {
  
  condition_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.devtools.clouddebugger.v2.Breakpoint.condition)
}
inline ::std::string* Breakpoint::mutable_condition() {
  
  // @@protoc_insertion_point(field_mutable:google.devtools.clouddebugger.v2.Breakpoint.condition)
  return condition_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Breakpoint::release_condition() {
  // @@protoc_insertion_point(field_release:google.devtools.clouddebugger.v2.Breakpoint.condition)
  
  return condition_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Breakpoint::set_allocated_condition(::std::string* condition) {
  if (condition != NULL) {
    
  } else {
    
  }
  condition_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), condition);
  // @@protoc_insertion_point(field_set_allocated:google.devtools.clouddebugger.v2.Breakpoint.condition)
}

// repeated string expressions = 4;
inline int Breakpoint::expressions_size() const {
  return expressions_.size();
}
inline void Breakpoint::clear_expressions() {
  expressions_.Clear();
}
inline const ::std::string& Breakpoint::expressions(int index) const {
  // @@protoc_insertion_point(field_get:google.devtools.clouddebugger.v2.Breakpoint.expressions)
  return expressions_.Get(index);
}
inline ::std::string* Breakpoint::mutable_expressions(int index) {
  // @@protoc_insertion_point(field_mutable:google.devtools.clouddebugger.v2.Breakpoint.expressions)
  return expressions_.Mutable(index);
}
inline void Breakpoint::set_expressions(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:google.devtools.clouddebugger.v2.Breakpoint.expressions)
  expressions_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void Breakpoint::set_expressions(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:google.devtools.clouddebugger.v2.Breakpoint.expressions)
  expressions_.Mutable(index)->assign(std::move(value));
}
#endif
inline void Breakpoint::set_expressions(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  expressions_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:google.devtools.clouddebugger.v2.Breakpoint.expressions)
}
inline void Breakpoint::set_expressions(int index, const char* value, size_t size) {
  expressions_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:google.devtools.clouddebugger.v2.Breakpoint.expressions)
}
inline ::std::string* Breakpoint::add_expressions() {
  // @@protoc_insertion_point(field_add_mutable:google.devtools.clouddebugger.v2.Breakpoint.expressions)
  return expressions_.Add();
}
inline void Breakpoint::add_expressions(const ::std::string& value) {
  expressions_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:google.devtools.clouddebugger.v2.Breakpoint.expressions)
}
#if LANG_CXX11
inline void Breakpoint::add_expressions(::std::string&& value) {
  expressions_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:google.devtools.clouddebugger.v2.Breakpoint.expressions)
}
#endif
inline void Breakpoint::add_expressions(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  expressions_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:google.devtools.clouddebugger.v2.Breakpoint.expressions)
}
inline void Breakpoint::add_expressions(const char* value, size_t size) {
  expressions_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:google.devtools.clouddebugger.v2.Breakpoint.expressions)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Breakpoint::expressions() const {
  // @@protoc_insertion_point(field_list:google.devtools.clouddebugger.v2.Breakpoint.expressions)
  return expressions_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Breakpoint::mutable_expressions() {
  // @@protoc_insertion_point(field_mutable_list:google.devtools.clouddebugger.v2.Breakpoint.expressions)
  return &expressions_;
}

// string log_message_format = 14;
inline void Breakpoint::clear_log_message_format() {
  log_message_format_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Breakpoint::log_message_format() const {
  // @@protoc_insertion_point(field_get:google.devtools.clouddebugger.v2.Breakpoint.log_message_format)
  return log_message_format_.GetNoArena();
}
inline void Breakpoint::set_log_message_format(const ::std::string& value) {
  
  log_message_format_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.devtools.clouddebugger.v2.Breakpoint.log_message_format)
}
#if LANG_CXX11
inline void Breakpoint::set_log_message_format(::std::string&& value) {
  
  log_message_format_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.devtools.clouddebugger.v2.Breakpoint.log_message_format)
}
#endif
inline void Breakpoint::set_log_message_format(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  log_message_format_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.devtools.clouddebugger.v2.Breakpoint.log_message_format)
}
inline void Breakpoint::set_log_message_format(const char* value, size_t size) {
  
  log_message_format_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.devtools.clouddebugger.v2.Breakpoint.log_message_format)
}
inline ::std::string* Breakpoint::mutable_log_message_format() {
  
  // @@protoc_insertion_point(field_mutable:google.devtools.clouddebugger.v2.Breakpoint.log_message_format)
  return log_message_format_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Breakpoint::release_log_message_format() {
  // @@protoc_insertion_point(field_release:google.devtools.clouddebugger.v2.Breakpoint.log_message_format)
  
  return log_message_format_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Breakpoint::set_allocated_log_message_format(::std::string* log_message_format) {
  if (log_message_format != NULL) {
    
  } else {
    
  }
  log_message_format_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), log_message_format);
  // @@protoc_insertion_point(field_set_allocated:google.devtools.clouddebugger.v2.Breakpoint.log_message_format)
}

// .google.devtools.clouddebugger.v2.Breakpoint.LogLevel log_level = 15;
inline void Breakpoint::clear_log_level() {
  log_level_ = 0;
}
inline ::google::devtools::clouddebugger::v2::Breakpoint_LogLevel Breakpoint::log_level() const {
  // @@protoc_insertion_point(field_get:google.devtools.clouddebugger.v2.Breakpoint.log_level)
  return static_cast< ::google::devtools::clouddebugger::v2::Breakpoint_LogLevel >(log_level_);
}
inline void Breakpoint::set_log_level(::google::devtools::clouddebugger::v2::Breakpoint_LogLevel value) {
  
  log_level_ = value;
  // @@protoc_insertion_point(field_set:google.devtools.clouddebugger.v2.Breakpoint.log_level)
}

// bool is_final_state = 5;
inline void Breakpoint::clear_is_final_state() {
  is_final_state_ = false;
}
inline bool Breakpoint::is_final_state() const {
  // @@protoc_insertion_point(field_get:google.devtools.clouddebugger.v2.Breakpoint.is_final_state)
  return is_final_state_;
}
inline void Breakpoint::set_is_final_state(bool value) {
  
  is_final_state_ = value;
  // @@protoc_insertion_point(field_set:google.devtools.clouddebugger.v2.Breakpoint.is_final_state)
}

// .google.protobuf.Timestamp create_time = 11;
inline bool Breakpoint::has_create_time() const {
  return this != internal_default_instance() && create_time_ != NULL;
}
inline const ::google::protobuf::Timestamp& Breakpoint::create_time() const {
  const ::google::protobuf::Timestamp* p = create_time_;
  // @@protoc_insertion_point(field_get:google.devtools.clouddebugger.v2.Breakpoint.create_time)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::Timestamp*>(
      &::google::protobuf::_Timestamp_default_instance_);
}
inline ::google::protobuf::Timestamp* Breakpoint::release_create_time() {
  // @@protoc_insertion_point(field_release:google.devtools.clouddebugger.v2.Breakpoint.create_time)
  
  ::google::protobuf::Timestamp* temp = create_time_;
  create_time_ = NULL;
  return temp;
}
inline ::google::protobuf::Timestamp* Breakpoint::mutable_create_time() {
  
  if (create_time_ == NULL) {
    create_time_ = new ::google::protobuf::Timestamp;
  }
  // @@protoc_insertion_point(field_mutable:google.devtools.clouddebugger.v2.Breakpoint.create_time)
  return create_time_;
}
inline void Breakpoint::set_allocated_create_time(::google::protobuf::Timestamp* create_time) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(create_time_);
  }
  if (create_time) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast< ::google::protobuf::MessageLite*>(create_time)->GetArena();
    if (message_arena != submessage_arena) {
      create_time = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, create_time, submessage_arena);
    }
    
  } else {
    
  }
  create_time_ = create_time;
  // @@protoc_insertion_point(field_set_allocated:google.devtools.clouddebugger.v2.Breakpoint.create_time)
}

// .google.protobuf.Timestamp final_time = 12;
inline bool Breakpoint::has_final_time() const {
  return this != internal_default_instance() && final_time_ != NULL;
}
inline const ::google::protobuf::Timestamp& Breakpoint::final_time() const {
  const ::google::protobuf::Timestamp* p = final_time_;
  // @@protoc_insertion_point(field_get:google.devtools.clouddebugger.v2.Breakpoint.final_time)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::Timestamp*>(
      &::google::protobuf::_Timestamp_default_instance_);
}
inline ::google::protobuf::Timestamp* Breakpoint::release_final_time() {
  // @@protoc_insertion_point(field_release:google.devtools.clouddebugger.v2.Breakpoint.final_time)
  
  ::google::protobuf::Timestamp* temp = final_time_;
  final_time_ = NULL;
  return temp;
}
inline ::google::protobuf::Timestamp* Breakpoint::mutable_final_time() {
  
  if (final_time_ == NULL) {
    final_time_ = new ::google::protobuf::Timestamp;
  }
  // @@protoc_insertion_point(field_mutable:google.devtools.clouddebugger.v2.Breakpoint.final_time)
  return final_time_;
}
inline void Breakpoint::set_allocated_final_time(::google::protobuf::Timestamp* final_time) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(final_time_);
  }
  if (final_time) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast< ::google::protobuf::MessageLite*>(final_time)->GetArena();
    if (message_arena != submessage_arena) {
      final_time = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, final_time, submessage_arena);
    }
    
  } else {
    
  }
  final_time_ = final_time;
  // @@protoc_insertion_point(field_set_allocated:google.devtools.clouddebugger.v2.Breakpoint.final_time)
}

// string user_email = 16;
inline void Breakpoint::clear_user_email() {
  user_email_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Breakpoint::user_email() const {
  // @@protoc_insertion_point(field_get:google.devtools.clouddebugger.v2.Breakpoint.user_email)
  return user_email_.GetNoArena();
}
inline void Breakpoint::set_user_email(const ::std::string& value) {
  
  user_email_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.devtools.clouddebugger.v2.Breakpoint.user_email)
}
#if LANG_CXX11
inline void Breakpoint::set_user_email(::std::string&& value) {
  
  user_email_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.devtools.clouddebugger.v2.Breakpoint.user_email)
}
#endif
inline void Breakpoint::set_user_email(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  user_email_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.devtools.clouddebugger.v2.Breakpoint.user_email)
}
inline void Breakpoint::set_user_email(const char* value, size_t size) {
  
  user_email_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.devtools.clouddebugger.v2.Breakpoint.user_email)
}
inline ::std::string* Breakpoint::mutable_user_email() {
  
  // @@protoc_insertion_point(field_mutable:google.devtools.clouddebugger.v2.Breakpoint.user_email)
  return user_email_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Breakpoint::release_user_email() {
  // @@protoc_insertion_point(field_release:google.devtools.clouddebugger.v2.Breakpoint.user_email)
  
  return user_email_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Breakpoint::set_allocated_user_email(::std::string* user_email) {
  if (user_email != NULL) {
    
  } else {
    
  }
  user_email_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user_email);
  // @@protoc_insertion_point(field_set_allocated:google.devtools.clouddebugger.v2.Breakpoint.user_email)
}

// .google.devtools.clouddebugger.v2.StatusMessage status = 10;
inline bool Breakpoint::has_status() const {
  return this != internal_default_instance() && status_ != NULL;
}
inline void Breakpoint::clear_status() {
  if (GetArenaNoVirtual() == NULL && status_ != NULL) {
    delete status_;
  }
  status_ = NULL;
}
inline const ::google::devtools::clouddebugger::v2::StatusMessage& Breakpoint::status() const {
  const ::google::devtools::clouddebugger::v2::StatusMessage* p = status_;
  // @@protoc_insertion_point(field_get:google.devtools.clouddebugger.v2.Breakpoint.status)
  return p != NULL ? *p : *reinterpret_cast<const ::google::devtools::clouddebugger::v2::StatusMessage*>(
      &::google::devtools::clouddebugger::v2::_StatusMessage_default_instance_);
}
inline ::google::devtools::clouddebugger::v2::StatusMessage* Breakpoint::release_status() {
  // @@protoc_insertion_point(field_release:google.devtools.clouddebugger.v2.Breakpoint.status)
  
  ::google::devtools::clouddebugger::v2::StatusMessage* temp = status_;
  status_ = NULL;
  return temp;
}
inline ::google::devtools::clouddebugger::v2::StatusMessage* Breakpoint::mutable_status() {
  
  if (status_ == NULL) {
    status_ = new ::google::devtools::clouddebugger::v2::StatusMessage;
  }
  // @@protoc_insertion_point(field_mutable:google.devtools.clouddebugger.v2.Breakpoint.status)
  return status_;
}
inline void Breakpoint::set_allocated_status(::google::devtools::clouddebugger::v2::StatusMessage* status) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete status_;
  }
  if (status) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      status = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:google.devtools.clouddebugger.v2.Breakpoint.status)
}

// repeated .google.devtools.clouddebugger.v2.StackFrame stack_frames = 7;
inline int Breakpoint::stack_frames_size() const {
  return stack_frames_.size();
}
inline void Breakpoint::clear_stack_frames() {
  stack_frames_.Clear();
}
inline const ::google::devtools::clouddebugger::v2::StackFrame& Breakpoint::stack_frames(int index) const {
  // @@protoc_insertion_point(field_get:google.devtools.clouddebugger.v2.Breakpoint.stack_frames)
  return stack_frames_.Get(index);
}
inline ::google::devtools::clouddebugger::v2::StackFrame* Breakpoint::mutable_stack_frames(int index) {
  // @@protoc_insertion_point(field_mutable:google.devtools.clouddebugger.v2.Breakpoint.stack_frames)
  return stack_frames_.Mutable(index);
}
inline ::google::devtools::clouddebugger::v2::StackFrame* Breakpoint::add_stack_frames() {
  // @@protoc_insertion_point(field_add:google.devtools.clouddebugger.v2.Breakpoint.stack_frames)
  return stack_frames_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::google::devtools::clouddebugger::v2::StackFrame >*
Breakpoint::mutable_stack_frames() {
  // @@protoc_insertion_point(field_mutable_list:google.devtools.clouddebugger.v2.Breakpoint.stack_frames)
  return &stack_frames_;
}
inline const ::google::protobuf::RepeatedPtrField< ::google::devtools::clouddebugger::v2::StackFrame >&
Breakpoint::stack_frames() const {
  // @@protoc_insertion_point(field_list:google.devtools.clouddebugger.v2.Breakpoint.stack_frames)
  return stack_frames_;
}

// repeated .google.devtools.clouddebugger.v2.Variable evaluated_expressions = 8;
inline int Breakpoint::evaluated_expressions_size() const {
  return evaluated_expressions_.size();
}
inline void Breakpoint::clear_evaluated_expressions() {
  evaluated_expressions_.Clear();
}
inline const ::google::devtools::clouddebugger::v2::Variable& Breakpoint::evaluated_expressions(int index) const {
  // @@protoc_insertion_point(field_get:google.devtools.clouddebugger.v2.Breakpoint.evaluated_expressions)
  return evaluated_expressions_.Get(index);
}
inline ::google::devtools::clouddebugger::v2::Variable* Breakpoint::mutable_evaluated_expressions(int index) {
  // @@protoc_insertion_point(field_mutable:google.devtools.clouddebugger.v2.Breakpoint.evaluated_expressions)
  return evaluated_expressions_.Mutable(index);
}
inline ::google::devtools::clouddebugger::v2::Variable* Breakpoint::add_evaluated_expressions() {
  // @@protoc_insertion_point(field_add:google.devtools.clouddebugger.v2.Breakpoint.evaluated_expressions)
  return evaluated_expressions_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::google::devtools::clouddebugger::v2::Variable >*
Breakpoint::mutable_evaluated_expressions() {
  // @@protoc_insertion_point(field_mutable_list:google.devtools.clouddebugger.v2.Breakpoint.evaluated_expressions)
  return &evaluated_expressions_;
}
inline const ::google::protobuf::RepeatedPtrField< ::google::devtools::clouddebugger::v2::Variable >&
Breakpoint::evaluated_expressions() const {
  // @@protoc_insertion_point(field_list:google.devtools.clouddebugger.v2.Breakpoint.evaluated_expressions)
  return evaluated_expressions_;
}

// repeated .google.devtools.clouddebugger.v2.Variable variable_table = 9;
inline int Breakpoint::variable_table_size() const {
  return variable_table_.size();
}
inline void Breakpoint::clear_variable_table() {
  variable_table_.Clear();
}
inline const ::google::devtools::clouddebugger::v2::Variable& Breakpoint::variable_table(int index) const {
  // @@protoc_insertion_point(field_get:google.devtools.clouddebugger.v2.Breakpoint.variable_table)
  return variable_table_.Get(index);
}
inline ::google::devtools::clouddebugger::v2::Variable* Breakpoint::mutable_variable_table(int index) {
  // @@protoc_insertion_point(field_mutable:google.devtools.clouddebugger.v2.Breakpoint.variable_table)
  return variable_table_.Mutable(index);
}
inline ::google::devtools::clouddebugger::v2::Variable* Breakpoint::add_variable_table() {
  // @@protoc_insertion_point(field_add:google.devtools.clouddebugger.v2.Breakpoint.variable_table)
  return variable_table_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::google::devtools::clouddebugger::v2::Variable >*
Breakpoint::mutable_variable_table() {
  // @@protoc_insertion_point(field_mutable_list:google.devtools.clouddebugger.v2.Breakpoint.variable_table)
  return &variable_table_;
}
inline const ::google::protobuf::RepeatedPtrField< ::google::devtools::clouddebugger::v2::Variable >&
Breakpoint::variable_table() const {
  // @@protoc_insertion_point(field_list:google.devtools.clouddebugger.v2.Breakpoint.variable_table)
  return variable_table_;
}

// map<string, string> labels = 17;
inline int Breakpoint::labels_size() const {
  return labels_.size();
}
inline void Breakpoint::clear_labels() {
  labels_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::std::string >&
Breakpoint::labels() const {
  // @@protoc_insertion_point(field_map:google.devtools.clouddebugger.v2.Breakpoint.labels)
  return labels_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::std::string >*
Breakpoint::mutable_labels() {
  // @@protoc_insertion_point(field_mutable_map:google.devtools.clouddebugger.v2.Breakpoint.labels)
  return labels_.MutableMap();
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// Debuggee

// string id = 1;
inline void Debuggee::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Debuggee::id() const {
  // @@protoc_insertion_point(field_get:google.devtools.clouddebugger.v2.Debuggee.id)
  return id_.GetNoArena();
}
inline void Debuggee::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.devtools.clouddebugger.v2.Debuggee.id)
}
#if LANG_CXX11
inline void Debuggee::set_id(::std::string&& value) {
  
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.devtools.clouddebugger.v2.Debuggee.id)
}
#endif
inline void Debuggee::set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.devtools.clouddebugger.v2.Debuggee.id)
}
inline void Debuggee::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.devtools.clouddebugger.v2.Debuggee.id)
}
inline ::std::string* Debuggee::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:google.devtools.clouddebugger.v2.Debuggee.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Debuggee::release_id() {
  // @@protoc_insertion_point(field_release:google.devtools.clouddebugger.v2.Debuggee.id)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Debuggee::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:google.devtools.clouddebugger.v2.Debuggee.id)
}

// string project = 2;
inline void Debuggee::clear_project() {
  project_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Debuggee::project() const {
  // @@protoc_insertion_point(field_get:google.devtools.clouddebugger.v2.Debuggee.project)
  return project_.GetNoArena();
}
inline void Debuggee::set_project(const ::std::string& value) {
  
  project_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.devtools.clouddebugger.v2.Debuggee.project)
}
#if LANG_CXX11
inline void Debuggee::set_project(::std::string&& value) {
  
  project_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.devtools.clouddebugger.v2.Debuggee.project)
}
#endif
inline void Debuggee::set_project(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  project_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.devtools.clouddebugger.v2.Debuggee.project)
}
inline void Debuggee::set_project(const char* value, size_t size) {
  
  project_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.devtools.clouddebugger.v2.Debuggee.project)
}
inline ::std::string* Debuggee::mutable_project() {
  
  // @@protoc_insertion_point(field_mutable:google.devtools.clouddebugger.v2.Debuggee.project)
  return project_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Debuggee::release_project() {
  // @@protoc_insertion_point(field_release:google.devtools.clouddebugger.v2.Debuggee.project)
  
  return project_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Debuggee::set_allocated_project(::std::string* project) {
  if (project != NULL) {
    
  } else {
    
  }
  project_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), project);
  // @@protoc_insertion_point(field_set_allocated:google.devtools.clouddebugger.v2.Debuggee.project)
}

// string uniquifier = 3;
inline void Debuggee::clear_uniquifier() {
  uniquifier_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Debuggee::uniquifier() const {
  // @@protoc_insertion_point(field_get:google.devtools.clouddebugger.v2.Debuggee.uniquifier)
  return uniquifier_.GetNoArena();
}
inline void Debuggee::set_uniquifier(const ::std::string& value) {
  
  uniquifier_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.devtools.clouddebugger.v2.Debuggee.uniquifier)
}
#if LANG_CXX11
inline void Debuggee::set_uniquifier(::std::string&& value) {
  
  uniquifier_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.devtools.clouddebugger.v2.Debuggee.uniquifier)
}
#endif
inline void Debuggee::set_uniquifier(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  uniquifier_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.devtools.clouddebugger.v2.Debuggee.uniquifier)
}
inline void Debuggee::set_uniquifier(const char* value, size_t size) {
  
  uniquifier_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.devtools.clouddebugger.v2.Debuggee.uniquifier)
}
inline ::std::string* Debuggee::mutable_uniquifier() {
  
  // @@protoc_insertion_point(field_mutable:google.devtools.clouddebugger.v2.Debuggee.uniquifier)
  return uniquifier_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Debuggee::release_uniquifier() {
  // @@protoc_insertion_point(field_release:google.devtools.clouddebugger.v2.Debuggee.uniquifier)
  
  return uniquifier_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Debuggee::set_allocated_uniquifier(::std::string* uniquifier) {
  if (uniquifier != NULL) {
    
  } else {
    
  }
  uniquifier_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), uniquifier);
  // @@protoc_insertion_point(field_set_allocated:google.devtools.clouddebugger.v2.Debuggee.uniquifier)
}

// string description = 4;
inline void Debuggee::clear_description() {
  description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Debuggee::description() const {
  // @@protoc_insertion_point(field_get:google.devtools.clouddebugger.v2.Debuggee.description)
  return description_.GetNoArena();
}
inline void Debuggee::set_description(const ::std::string& value) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.devtools.clouddebugger.v2.Debuggee.description)
}
#if LANG_CXX11
inline void Debuggee::set_description(::std::string&& value) {
  
  description_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.devtools.clouddebugger.v2.Debuggee.description)
}
#endif
inline void Debuggee::set_description(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.devtools.clouddebugger.v2.Debuggee.description)
}
inline void Debuggee::set_description(const char* value, size_t size) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.devtools.clouddebugger.v2.Debuggee.description)
}
inline ::std::string* Debuggee::mutable_description() {
  
  // @@protoc_insertion_point(field_mutable:google.devtools.clouddebugger.v2.Debuggee.description)
  return description_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Debuggee::release_description() {
  // @@protoc_insertion_point(field_release:google.devtools.clouddebugger.v2.Debuggee.description)
  
  return description_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Debuggee::set_allocated_description(::std::string* description) {
  if (description != NULL) {
    
  } else {
    
  }
  description_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:google.devtools.clouddebugger.v2.Debuggee.description)
}

// bool is_inactive = 5;
inline void Debuggee::clear_is_inactive() {
  is_inactive_ = false;
}
inline bool Debuggee::is_inactive() const {
  // @@protoc_insertion_point(field_get:google.devtools.clouddebugger.v2.Debuggee.is_inactive)
  return is_inactive_;
}
inline void Debuggee::set_is_inactive(bool value) {
  
  is_inactive_ = value;
  // @@protoc_insertion_point(field_set:google.devtools.clouddebugger.v2.Debuggee.is_inactive)
}

// string agent_version = 6;
inline void Debuggee::clear_agent_version() {
  agent_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Debuggee::agent_version() const {
  // @@protoc_insertion_point(field_get:google.devtools.clouddebugger.v2.Debuggee.agent_version)
  return agent_version_.GetNoArena();
}
inline void Debuggee::set_agent_version(const ::std::string& value) {
  
  agent_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.devtools.clouddebugger.v2.Debuggee.agent_version)
}
#if LANG_CXX11
inline void Debuggee::set_agent_version(::std::string&& value) {
  
  agent_version_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.devtools.clouddebugger.v2.Debuggee.agent_version)
}
#endif
inline void Debuggee::set_agent_version(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  agent_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.devtools.clouddebugger.v2.Debuggee.agent_version)
}
inline void Debuggee::set_agent_version(const char* value, size_t size) {
  
  agent_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.devtools.clouddebugger.v2.Debuggee.agent_version)
}
inline ::std::string* Debuggee::mutable_agent_version() {
  
  // @@protoc_insertion_point(field_mutable:google.devtools.clouddebugger.v2.Debuggee.agent_version)
  return agent_version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Debuggee::release_agent_version() {
  // @@protoc_insertion_point(field_release:google.devtools.clouddebugger.v2.Debuggee.agent_version)
  
  return agent_version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Debuggee::set_allocated_agent_version(::std::string* agent_version) {
  if (agent_version != NULL) {
    
  } else {
    
  }
  agent_version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), agent_version);
  // @@protoc_insertion_point(field_set_allocated:google.devtools.clouddebugger.v2.Debuggee.agent_version)
}

// bool is_disabled = 7;
inline void Debuggee::clear_is_disabled() {
  is_disabled_ = false;
}
inline bool Debuggee::is_disabled() const {
  // @@protoc_insertion_point(field_get:google.devtools.clouddebugger.v2.Debuggee.is_disabled)
  return is_disabled_;
}
inline void Debuggee::set_is_disabled(bool value) {
  
  is_disabled_ = value;
  // @@protoc_insertion_point(field_set:google.devtools.clouddebugger.v2.Debuggee.is_disabled)
}

// .google.devtools.clouddebugger.v2.StatusMessage status = 8;
inline bool Debuggee::has_status() const {
  return this != internal_default_instance() && status_ != NULL;
}
inline void Debuggee::clear_status() {
  if (GetArenaNoVirtual() == NULL && status_ != NULL) {
    delete status_;
  }
  status_ = NULL;
}
inline const ::google::devtools::clouddebugger::v2::StatusMessage& Debuggee::status() const {
  const ::google::devtools::clouddebugger::v2::StatusMessage* p = status_;
  // @@protoc_insertion_point(field_get:google.devtools.clouddebugger.v2.Debuggee.status)
  return p != NULL ? *p : *reinterpret_cast<const ::google::devtools::clouddebugger::v2::StatusMessage*>(
      &::google::devtools::clouddebugger::v2::_StatusMessage_default_instance_);
}
inline ::google::devtools::clouddebugger::v2::StatusMessage* Debuggee::release_status() {
  // @@protoc_insertion_point(field_release:google.devtools.clouddebugger.v2.Debuggee.status)
  
  ::google::devtools::clouddebugger::v2::StatusMessage* temp = status_;
  status_ = NULL;
  return temp;
}
inline ::google::devtools::clouddebugger::v2::StatusMessage* Debuggee::mutable_status() {
  
  if (status_ == NULL) {
    status_ = new ::google::devtools::clouddebugger::v2::StatusMessage;
  }
  // @@protoc_insertion_point(field_mutable:google.devtools.clouddebugger.v2.Debuggee.status)
  return status_;
}
inline void Debuggee::set_allocated_status(::google::devtools::clouddebugger::v2::StatusMessage* status) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete status_;
  }
  if (status) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      status = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:google.devtools.clouddebugger.v2.Debuggee.status)
}

// repeated .google.devtools.source.v1.SourceContext source_contexts = 9;
inline int Debuggee::source_contexts_size() const {
  return source_contexts_.size();
}
inline const ::google::devtools::source::v1::SourceContext& Debuggee::source_contexts(int index) const {
  // @@protoc_insertion_point(field_get:google.devtools.clouddebugger.v2.Debuggee.source_contexts)
  return source_contexts_.Get(index);
}
inline ::google::devtools::source::v1::SourceContext* Debuggee::mutable_source_contexts(int index) {
  // @@protoc_insertion_point(field_mutable:google.devtools.clouddebugger.v2.Debuggee.source_contexts)
  return source_contexts_.Mutable(index);
}
inline ::google::devtools::source::v1::SourceContext* Debuggee::add_source_contexts() {
  // @@protoc_insertion_point(field_add:google.devtools.clouddebugger.v2.Debuggee.source_contexts)
  return source_contexts_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::google::devtools::source::v1::SourceContext >*
Debuggee::mutable_source_contexts() {
  // @@protoc_insertion_point(field_mutable_list:google.devtools.clouddebugger.v2.Debuggee.source_contexts)
  return &source_contexts_;
}
inline const ::google::protobuf::RepeatedPtrField< ::google::devtools::source::v1::SourceContext >&
Debuggee::source_contexts() const {
  // @@protoc_insertion_point(field_list:google.devtools.clouddebugger.v2.Debuggee.source_contexts)
  return source_contexts_;
}

// repeated .google.devtools.source.v1.ExtendedSourceContext ext_source_contexts = 13;
inline int Debuggee::ext_source_contexts_size() const {
  return ext_source_contexts_.size();
}
inline const ::google::devtools::source::v1::ExtendedSourceContext& Debuggee::ext_source_contexts(int index) const {
  // @@protoc_insertion_point(field_get:google.devtools.clouddebugger.v2.Debuggee.ext_source_contexts)
  return ext_source_contexts_.Get(index);
}
inline ::google::devtools::source::v1::ExtendedSourceContext* Debuggee::mutable_ext_source_contexts(int index) {
  // @@protoc_insertion_point(field_mutable:google.devtools.clouddebugger.v2.Debuggee.ext_source_contexts)
  return ext_source_contexts_.Mutable(index);
}
inline ::google::devtools::source::v1::ExtendedSourceContext* Debuggee::add_ext_source_contexts() {
  // @@protoc_insertion_point(field_add:google.devtools.clouddebugger.v2.Debuggee.ext_source_contexts)
  return ext_source_contexts_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::google::devtools::source::v1::ExtendedSourceContext >*
Debuggee::mutable_ext_source_contexts() {
  // @@protoc_insertion_point(field_mutable_list:google.devtools.clouddebugger.v2.Debuggee.ext_source_contexts)
  return &ext_source_contexts_;
}
inline const ::google::protobuf::RepeatedPtrField< ::google::devtools::source::v1::ExtendedSourceContext >&
Debuggee::ext_source_contexts() const {
  // @@protoc_insertion_point(field_list:google.devtools.clouddebugger.v2.Debuggee.ext_source_contexts)
  return ext_source_contexts_;
}

// map<string, string> labels = 11;
inline int Debuggee::labels_size() const {
  return labels_.size();
}
inline void Debuggee::clear_labels() {
  labels_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::std::string >&
Debuggee::labels() const {
  // @@protoc_insertion_point(field_map:google.devtools.clouddebugger.v2.Debuggee.labels)
  return labels_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::std::string >*
Debuggee::mutable_labels() {
  // @@protoc_insertion_point(field_mutable_map:google.devtools.clouddebugger.v2.Debuggee.labels)
  return labels_.MutableMap();
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v2
}  // namespace clouddebugger
}  // namespace devtools
}  // namespace google

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::google::devtools::clouddebugger::v2::StatusMessage_Reference> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::google::devtools::clouddebugger::v2::StatusMessage_Reference>() {
  return ::google::devtools::clouddebugger::v2::StatusMessage_Reference_descriptor();
}
template <> struct is_proto_enum< ::google::devtools::clouddebugger::v2::Breakpoint_Action> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::google::devtools::clouddebugger::v2::Breakpoint_Action>() {
  return ::google::devtools::clouddebugger::v2::Breakpoint_Action_descriptor();
}
template <> struct is_proto_enum< ::google::devtools::clouddebugger::v2::Breakpoint_LogLevel> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::google::devtools::clouddebugger::v2::Breakpoint_LogLevel>() {
  return ::google::devtools::clouddebugger::v2::Breakpoint_LogLevel_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_google_2fdevtools_2fclouddebugger_2fv2_2fdata_2eproto__INCLUDED
