// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/logging/v2/logging_metrics.proto

#ifndef PROTOBUF_google_2flogging_2fv2_2flogging_5fmetrics_2eproto__INCLUDED
#define PROTOBUF_google_2flogging_2fv2_2flogging_5fmetrics_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "google/api/annotations.pb.h"
#include "google/api/distribution.pb.h"
#include "google/api/metric.pb.h"
#include <google/protobuf/empty.pb.h>
#include <google/protobuf/field_mask.pb.h>
// @@protoc_insertion_point(includes)

namespace protobuf_google_2flogging_2fv2_2flogging_5fmetrics_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[8];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsLogMetric_LabelExtractorsEntry_DoNotUseImpl();
void InitDefaultsLogMetric_LabelExtractorsEntry_DoNotUse();
void InitDefaultsLogMetricImpl();
void InitDefaultsLogMetric();
void InitDefaultsListLogMetricsRequestImpl();
void InitDefaultsListLogMetricsRequest();
void InitDefaultsListLogMetricsResponseImpl();
void InitDefaultsListLogMetricsResponse();
void InitDefaultsGetLogMetricRequestImpl();
void InitDefaultsGetLogMetricRequest();
void InitDefaultsCreateLogMetricRequestImpl();
void InitDefaultsCreateLogMetricRequest();
void InitDefaultsUpdateLogMetricRequestImpl();
void InitDefaultsUpdateLogMetricRequest();
void InitDefaultsDeleteLogMetricRequestImpl();
void InitDefaultsDeleteLogMetricRequest();
inline void InitDefaults() {
  InitDefaultsLogMetric_LabelExtractorsEntry_DoNotUse();
  InitDefaultsLogMetric();
  InitDefaultsListLogMetricsRequest();
  InitDefaultsListLogMetricsResponse();
  InitDefaultsGetLogMetricRequest();
  InitDefaultsCreateLogMetricRequest();
  InitDefaultsUpdateLogMetricRequest();
  InitDefaultsDeleteLogMetricRequest();
}
}  // namespace protobuf_google_2flogging_2fv2_2flogging_5fmetrics_2eproto
namespace google {
namespace logging {
namespace v2 {
class CreateLogMetricRequest;
class CreateLogMetricRequestDefaultTypeInternal;
extern CreateLogMetricRequestDefaultTypeInternal _CreateLogMetricRequest_default_instance_;
class DeleteLogMetricRequest;
class DeleteLogMetricRequestDefaultTypeInternal;
extern DeleteLogMetricRequestDefaultTypeInternal _DeleteLogMetricRequest_default_instance_;
class GetLogMetricRequest;
class GetLogMetricRequestDefaultTypeInternal;
extern GetLogMetricRequestDefaultTypeInternal _GetLogMetricRequest_default_instance_;
class ListLogMetricsRequest;
class ListLogMetricsRequestDefaultTypeInternal;
extern ListLogMetricsRequestDefaultTypeInternal _ListLogMetricsRequest_default_instance_;
class ListLogMetricsResponse;
class ListLogMetricsResponseDefaultTypeInternal;
extern ListLogMetricsResponseDefaultTypeInternal _ListLogMetricsResponse_default_instance_;
class LogMetric;
class LogMetricDefaultTypeInternal;
extern LogMetricDefaultTypeInternal _LogMetric_default_instance_;
class LogMetric_LabelExtractorsEntry_DoNotUse;
class LogMetric_LabelExtractorsEntry_DoNotUseDefaultTypeInternal;
extern LogMetric_LabelExtractorsEntry_DoNotUseDefaultTypeInternal _LogMetric_LabelExtractorsEntry_DoNotUse_default_instance_;
class UpdateLogMetricRequest;
class UpdateLogMetricRequestDefaultTypeInternal;
extern UpdateLogMetricRequestDefaultTypeInternal _UpdateLogMetricRequest_default_instance_;
}  // namespace v2
}  // namespace logging
}  // namespace google
namespace google {
namespace logging {
namespace v2 {

enum LogMetric_ApiVersion {
  LogMetric_ApiVersion_V2 = 0,
  LogMetric_ApiVersion_V1 = 1,
  LogMetric_ApiVersion_LogMetric_ApiVersion_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  LogMetric_ApiVersion_LogMetric_ApiVersion_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool LogMetric_ApiVersion_IsValid(int value);
const LogMetric_ApiVersion LogMetric_ApiVersion_ApiVersion_MIN = LogMetric_ApiVersion_V2;
const LogMetric_ApiVersion LogMetric_ApiVersion_ApiVersion_MAX = LogMetric_ApiVersion_V1;
const int LogMetric_ApiVersion_ApiVersion_ARRAYSIZE = LogMetric_ApiVersion_ApiVersion_MAX + 1;

const ::google::protobuf::EnumDescriptor* LogMetric_ApiVersion_descriptor();
inline const ::std::string& LogMetric_ApiVersion_Name(LogMetric_ApiVersion value) {
  return ::google::protobuf::internal::NameOfEnum(
    LogMetric_ApiVersion_descriptor(), value);
}
inline bool LogMetric_ApiVersion_Parse(
    const ::std::string& name, LogMetric_ApiVersion* value) {
  return ::google::protobuf::internal::ParseNamedEnum<LogMetric_ApiVersion>(
    LogMetric_ApiVersion_descriptor(), name, value);
}
// ===================================================================

class LogMetric_LabelExtractorsEntry_DoNotUse : public ::google::protobuf::internal::MapEntry<LogMetric_LabelExtractorsEntry_DoNotUse, 
    ::std::string, ::std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    0 > {
public:
  typedef ::google::protobuf::internal::MapEntry<LogMetric_LabelExtractorsEntry_DoNotUse, 
    ::std::string, ::std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    0 > SuperType;
  LogMetric_LabelExtractorsEntry_DoNotUse();
  LogMetric_LabelExtractorsEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const LogMetric_LabelExtractorsEntry_DoNotUse& other);
  static const LogMetric_LabelExtractorsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const LogMetric_LabelExtractorsEntry_DoNotUse*>(&_LogMetric_LabelExtractorsEntry_DoNotUse_default_instance_); }
  void MergeFrom(const ::google::protobuf::Message& other) PROTOBUF_FINAL;
  ::google::protobuf::Metadata GetMetadata() const;
};

// -------------------------------------------------------------------

class LogMetric : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.logging.v2.LogMetric) */ {
 public:
  LogMetric();
  virtual ~LogMetric();

  LogMetric(const LogMetric& from);

  inline LogMetric& operator=(const LogMetric& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LogMetric(LogMetric&& from) noexcept
    : LogMetric() {
    *this = ::std::move(from);
  }

  inline LogMetric& operator=(LogMetric&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const LogMetric& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LogMetric* internal_default_instance() {
    return reinterpret_cast<const LogMetric*>(
               &_LogMetric_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void UnsafeArenaSwap(LogMetric* other);
  void Swap(LogMetric* other);
  friend void swap(LogMetric& a, LogMetric& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LogMetric* New() const PROTOBUF_FINAL { return New(NULL); }

  LogMetric* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const LogMetric& from);
  void MergeFrom(const LogMetric& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(LogMetric* other);
  protected:
  explicit LogMetric(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------


  typedef LogMetric_ApiVersion ApiVersion;
  static const ApiVersion V2 =
    LogMetric_ApiVersion_V2;
  static const ApiVersion V1 =
    LogMetric_ApiVersion_V1;
  static inline bool ApiVersion_IsValid(int value) {
    return LogMetric_ApiVersion_IsValid(value);
  }
  static const ApiVersion ApiVersion_MIN =
    LogMetric_ApiVersion_ApiVersion_MIN;
  static const ApiVersion ApiVersion_MAX =
    LogMetric_ApiVersion_ApiVersion_MAX;
  static const int ApiVersion_ARRAYSIZE =
    LogMetric_ApiVersion_ApiVersion_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ApiVersion_descriptor() {
    return LogMetric_ApiVersion_descriptor();
  }
  static inline const ::std::string& ApiVersion_Name(ApiVersion value) {
    return LogMetric_ApiVersion_Name(value);
  }
  static inline bool ApiVersion_Parse(const ::std::string& name,
      ApiVersion* value) {
    return LogMetric_ApiVersion_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // map<string, string> label_extractors = 7;
  int label_extractors_size() const;
  void clear_label_extractors();
  static const int kLabelExtractorsFieldNumber = 7;
  const ::google::protobuf::Map< ::std::string, ::std::string >&
      label_extractors() const;
  ::google::protobuf::Map< ::std::string, ::std::string >*
      mutable_label_extractors();

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_name();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_name(
      ::std::string* name);

  // string description = 2;
  void clear_description();
  static const int kDescriptionFieldNumber = 2;
  const ::std::string& description() const;
  void set_description(const ::std::string& value);
  #if LANG_CXX11
  void set_description(::std::string&& value);
  #endif
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  ::std::string* mutable_description();
  ::std::string* release_description();
  void set_allocated_description(::std::string* description);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_description();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_description(
      ::std::string* description);

  // string filter = 3;
  void clear_filter();
  static const int kFilterFieldNumber = 3;
  const ::std::string& filter() const;
  void set_filter(const ::std::string& value);
  #if LANG_CXX11
  void set_filter(::std::string&& value);
  #endif
  void set_filter(const char* value);
  void set_filter(const char* value, size_t size);
  ::std::string* mutable_filter();
  ::std::string* release_filter();
  void set_allocated_filter(::std::string* filter);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_filter();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_filter(
      ::std::string* filter);

  // string value_extractor = 6;
  void clear_value_extractor();
  static const int kValueExtractorFieldNumber = 6;
  const ::std::string& value_extractor() const;
  void set_value_extractor(const ::std::string& value);
  #if LANG_CXX11
  void set_value_extractor(::std::string&& value);
  #endif
  void set_value_extractor(const char* value);
  void set_value_extractor(const char* value, size_t size);
  ::std::string* mutable_value_extractor();
  ::std::string* release_value_extractor();
  void set_allocated_value_extractor(::std::string* value_extractor);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_value_extractor();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_value_extractor(
      ::std::string* value_extractor);

  // .google.api.MetricDescriptor metric_descriptor = 5;
  bool has_metric_descriptor() const;
  void clear_metric_descriptor();
  static const int kMetricDescriptorFieldNumber = 5;
  private:
  void _slow_mutable_metric_descriptor();
  public:
  const ::google::api::MetricDescriptor& metric_descriptor() const;
  ::google::api::MetricDescriptor* release_metric_descriptor();
  ::google::api::MetricDescriptor* mutable_metric_descriptor();
  void set_allocated_metric_descriptor(::google::api::MetricDescriptor* metric_descriptor);
  void unsafe_arena_set_allocated_metric_descriptor(
      ::google::api::MetricDescriptor* metric_descriptor);
  ::google::api::MetricDescriptor* unsafe_arena_release_metric_descriptor();

  // .google.api.Distribution.BucketOptions bucket_options = 8;
  bool has_bucket_options() const;
  void clear_bucket_options();
  static const int kBucketOptionsFieldNumber = 8;
  private:
  void _slow_mutable_bucket_options();
  public:
  const ::google::api::Distribution_BucketOptions& bucket_options() const;
  ::google::api::Distribution_BucketOptions* release_bucket_options();
  ::google::api::Distribution_BucketOptions* mutable_bucket_options();
  void set_allocated_bucket_options(::google::api::Distribution_BucketOptions* bucket_options);
  void unsafe_arena_set_allocated_bucket_options(
      ::google::api::Distribution_BucketOptions* bucket_options);
  ::google::api::Distribution_BucketOptions* unsafe_arena_release_bucket_options();

  // .google.logging.v2.LogMetric.ApiVersion version = 4;
  void clear_version();
  static const int kVersionFieldNumber = 4;
  ::google::logging::v2::LogMetric_ApiVersion version() const;
  void set_version(::google::logging::v2::LogMetric_ApiVersion value);

  // @@protoc_insertion_point(class_scope:google.logging.v2.LogMetric)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::MapField<
      LogMetric_LabelExtractorsEntry_DoNotUse,
      ::std::string, ::std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      0 > label_extractors_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr description_;
  ::google::protobuf::internal::ArenaStringPtr filter_;
  ::google::protobuf::internal::ArenaStringPtr value_extractor_;
  ::google::api::MetricDescriptor* metric_descriptor_;
  ::google::api::Distribution_BucketOptions* bucket_options_;
  int version_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2flogging_2fv2_2flogging_5fmetrics_2eproto::TableStruct;
  friend void ::protobuf_google_2flogging_2fv2_2flogging_5fmetrics_2eproto::InitDefaultsLogMetricImpl();
};
// -------------------------------------------------------------------

class ListLogMetricsRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.logging.v2.ListLogMetricsRequest) */ {
 public:
  ListLogMetricsRequest();
  virtual ~ListLogMetricsRequest();

  ListLogMetricsRequest(const ListLogMetricsRequest& from);

  inline ListLogMetricsRequest& operator=(const ListLogMetricsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ListLogMetricsRequest(ListLogMetricsRequest&& from) noexcept
    : ListLogMetricsRequest() {
    *this = ::std::move(from);
  }

  inline ListLogMetricsRequest& operator=(ListLogMetricsRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const ListLogMetricsRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListLogMetricsRequest* internal_default_instance() {
    return reinterpret_cast<const ListLogMetricsRequest*>(
               &_ListLogMetricsRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void UnsafeArenaSwap(ListLogMetricsRequest* other);
  void Swap(ListLogMetricsRequest* other);
  friend void swap(ListLogMetricsRequest& a, ListLogMetricsRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ListLogMetricsRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  ListLogMetricsRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ListLogMetricsRequest& from);
  void MergeFrom(const ListLogMetricsRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ListLogMetricsRequest* other);
  protected:
  explicit ListLogMetricsRequest(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string parent = 1;
  void clear_parent();
  static const int kParentFieldNumber = 1;
  const ::std::string& parent() const;
  void set_parent(const ::std::string& value);
  #if LANG_CXX11
  void set_parent(::std::string&& value);
  #endif
  void set_parent(const char* value);
  void set_parent(const char* value, size_t size);
  ::std::string* mutable_parent();
  ::std::string* release_parent();
  void set_allocated_parent(::std::string* parent);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_parent();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_parent(
      ::std::string* parent);

  // string page_token = 2;
  void clear_page_token();
  static const int kPageTokenFieldNumber = 2;
  const ::std::string& page_token() const;
  void set_page_token(const ::std::string& value);
  #if LANG_CXX11
  void set_page_token(::std::string&& value);
  #endif
  void set_page_token(const char* value);
  void set_page_token(const char* value, size_t size);
  ::std::string* mutable_page_token();
  ::std::string* release_page_token();
  void set_allocated_page_token(::std::string* page_token);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_page_token();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_page_token(
      ::std::string* page_token);

  // int32 page_size = 3;
  void clear_page_size();
  static const int kPageSizeFieldNumber = 3;
  ::google::protobuf::int32 page_size() const;
  void set_page_size(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:google.logging.v2.ListLogMetricsRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::ArenaStringPtr parent_;
  ::google::protobuf::internal::ArenaStringPtr page_token_;
  ::google::protobuf::int32 page_size_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2flogging_2fv2_2flogging_5fmetrics_2eproto::TableStruct;
  friend void ::protobuf_google_2flogging_2fv2_2flogging_5fmetrics_2eproto::InitDefaultsListLogMetricsRequestImpl();
};
// -------------------------------------------------------------------

class ListLogMetricsResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.logging.v2.ListLogMetricsResponse) */ {
 public:
  ListLogMetricsResponse();
  virtual ~ListLogMetricsResponse();

  ListLogMetricsResponse(const ListLogMetricsResponse& from);

  inline ListLogMetricsResponse& operator=(const ListLogMetricsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ListLogMetricsResponse(ListLogMetricsResponse&& from) noexcept
    : ListLogMetricsResponse() {
    *this = ::std::move(from);
  }

  inline ListLogMetricsResponse& operator=(ListLogMetricsResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const ListLogMetricsResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListLogMetricsResponse* internal_default_instance() {
    return reinterpret_cast<const ListLogMetricsResponse*>(
               &_ListLogMetricsResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void UnsafeArenaSwap(ListLogMetricsResponse* other);
  void Swap(ListLogMetricsResponse* other);
  friend void swap(ListLogMetricsResponse& a, ListLogMetricsResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ListLogMetricsResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  ListLogMetricsResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ListLogMetricsResponse& from);
  void MergeFrom(const ListLogMetricsResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ListLogMetricsResponse* other);
  protected:
  explicit ListLogMetricsResponse(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .google.logging.v2.LogMetric metrics = 1;
  int metrics_size() const;
  void clear_metrics();
  static const int kMetricsFieldNumber = 1;
  const ::google::logging::v2::LogMetric& metrics(int index) const;
  ::google::logging::v2::LogMetric* mutable_metrics(int index);
  ::google::logging::v2::LogMetric* add_metrics();
  ::google::protobuf::RepeatedPtrField< ::google::logging::v2::LogMetric >*
      mutable_metrics();
  const ::google::protobuf::RepeatedPtrField< ::google::logging::v2::LogMetric >&
      metrics() const;

  // string next_page_token = 2;
  void clear_next_page_token();
  static const int kNextPageTokenFieldNumber = 2;
  const ::std::string& next_page_token() const;
  void set_next_page_token(const ::std::string& value);
  #if LANG_CXX11
  void set_next_page_token(::std::string&& value);
  #endif
  void set_next_page_token(const char* value);
  void set_next_page_token(const char* value, size_t size);
  ::std::string* mutable_next_page_token();
  ::std::string* release_next_page_token();
  void set_allocated_next_page_token(::std::string* next_page_token);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_next_page_token();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_next_page_token(
      ::std::string* next_page_token);

  // @@protoc_insertion_point(class_scope:google.logging.v2.ListLogMetricsResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::RepeatedPtrField< ::google::logging::v2::LogMetric > metrics_;
  ::google::protobuf::internal::ArenaStringPtr next_page_token_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2flogging_2fv2_2flogging_5fmetrics_2eproto::TableStruct;
  friend void ::protobuf_google_2flogging_2fv2_2flogging_5fmetrics_2eproto::InitDefaultsListLogMetricsResponseImpl();
};
// -------------------------------------------------------------------

class GetLogMetricRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.logging.v2.GetLogMetricRequest) */ {
 public:
  GetLogMetricRequest();
  virtual ~GetLogMetricRequest();

  GetLogMetricRequest(const GetLogMetricRequest& from);

  inline GetLogMetricRequest& operator=(const GetLogMetricRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetLogMetricRequest(GetLogMetricRequest&& from) noexcept
    : GetLogMetricRequest() {
    *this = ::std::move(from);
  }

  inline GetLogMetricRequest& operator=(GetLogMetricRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetLogMetricRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetLogMetricRequest* internal_default_instance() {
    return reinterpret_cast<const GetLogMetricRequest*>(
               &_GetLogMetricRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void UnsafeArenaSwap(GetLogMetricRequest* other);
  void Swap(GetLogMetricRequest* other);
  friend void swap(GetLogMetricRequest& a, GetLogMetricRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetLogMetricRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  GetLogMetricRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GetLogMetricRequest& from);
  void MergeFrom(const GetLogMetricRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GetLogMetricRequest* other);
  protected:
  explicit GetLogMetricRequest(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string metric_name = 1;
  void clear_metric_name();
  static const int kMetricNameFieldNumber = 1;
  const ::std::string& metric_name() const;
  void set_metric_name(const ::std::string& value);
  #if LANG_CXX11
  void set_metric_name(::std::string&& value);
  #endif
  void set_metric_name(const char* value);
  void set_metric_name(const char* value, size_t size);
  ::std::string* mutable_metric_name();
  ::std::string* release_metric_name();
  void set_allocated_metric_name(::std::string* metric_name);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_metric_name();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_metric_name(
      ::std::string* metric_name);

  // @@protoc_insertion_point(class_scope:google.logging.v2.GetLogMetricRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::ArenaStringPtr metric_name_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2flogging_2fv2_2flogging_5fmetrics_2eproto::TableStruct;
  friend void ::protobuf_google_2flogging_2fv2_2flogging_5fmetrics_2eproto::InitDefaultsGetLogMetricRequestImpl();
};
// -------------------------------------------------------------------

class CreateLogMetricRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.logging.v2.CreateLogMetricRequest) */ {
 public:
  CreateLogMetricRequest();
  virtual ~CreateLogMetricRequest();

  CreateLogMetricRequest(const CreateLogMetricRequest& from);

  inline CreateLogMetricRequest& operator=(const CreateLogMetricRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CreateLogMetricRequest(CreateLogMetricRequest&& from) noexcept
    : CreateLogMetricRequest() {
    *this = ::std::move(from);
  }

  inline CreateLogMetricRequest& operator=(CreateLogMetricRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const CreateLogMetricRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreateLogMetricRequest* internal_default_instance() {
    return reinterpret_cast<const CreateLogMetricRequest*>(
               &_CreateLogMetricRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    5;

  void UnsafeArenaSwap(CreateLogMetricRequest* other);
  void Swap(CreateLogMetricRequest* other);
  friend void swap(CreateLogMetricRequest& a, CreateLogMetricRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CreateLogMetricRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  CreateLogMetricRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CreateLogMetricRequest& from);
  void MergeFrom(const CreateLogMetricRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CreateLogMetricRequest* other);
  protected:
  explicit CreateLogMetricRequest(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string parent = 1;
  void clear_parent();
  static const int kParentFieldNumber = 1;
  const ::std::string& parent() const;
  void set_parent(const ::std::string& value);
  #if LANG_CXX11
  void set_parent(::std::string&& value);
  #endif
  void set_parent(const char* value);
  void set_parent(const char* value, size_t size);
  ::std::string* mutable_parent();
  ::std::string* release_parent();
  void set_allocated_parent(::std::string* parent);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_parent();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_parent(
      ::std::string* parent);

  // .google.logging.v2.LogMetric metric = 2;
  bool has_metric() const;
  void clear_metric();
  static const int kMetricFieldNumber = 2;
  private:
  void _slow_mutable_metric();
  public:
  const ::google::logging::v2::LogMetric& metric() const;
  ::google::logging::v2::LogMetric* release_metric();
  ::google::logging::v2::LogMetric* mutable_metric();
  void set_allocated_metric(::google::logging::v2::LogMetric* metric);
  void unsafe_arena_set_allocated_metric(
      ::google::logging::v2::LogMetric* metric);
  ::google::logging::v2::LogMetric* unsafe_arena_release_metric();

  // @@protoc_insertion_point(class_scope:google.logging.v2.CreateLogMetricRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::ArenaStringPtr parent_;
  ::google::logging::v2::LogMetric* metric_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2flogging_2fv2_2flogging_5fmetrics_2eproto::TableStruct;
  friend void ::protobuf_google_2flogging_2fv2_2flogging_5fmetrics_2eproto::InitDefaultsCreateLogMetricRequestImpl();
};
// -------------------------------------------------------------------

class UpdateLogMetricRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.logging.v2.UpdateLogMetricRequest) */ {
 public:
  UpdateLogMetricRequest();
  virtual ~UpdateLogMetricRequest();

  UpdateLogMetricRequest(const UpdateLogMetricRequest& from);

  inline UpdateLogMetricRequest& operator=(const UpdateLogMetricRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UpdateLogMetricRequest(UpdateLogMetricRequest&& from) noexcept
    : UpdateLogMetricRequest() {
    *this = ::std::move(from);
  }

  inline UpdateLogMetricRequest& operator=(UpdateLogMetricRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const UpdateLogMetricRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UpdateLogMetricRequest* internal_default_instance() {
    return reinterpret_cast<const UpdateLogMetricRequest*>(
               &_UpdateLogMetricRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    6;

  void UnsafeArenaSwap(UpdateLogMetricRequest* other);
  void Swap(UpdateLogMetricRequest* other);
  friend void swap(UpdateLogMetricRequest& a, UpdateLogMetricRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UpdateLogMetricRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  UpdateLogMetricRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const UpdateLogMetricRequest& from);
  void MergeFrom(const UpdateLogMetricRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(UpdateLogMetricRequest* other);
  protected:
  explicit UpdateLogMetricRequest(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string metric_name = 1;
  void clear_metric_name();
  static const int kMetricNameFieldNumber = 1;
  const ::std::string& metric_name() const;
  void set_metric_name(const ::std::string& value);
  #if LANG_CXX11
  void set_metric_name(::std::string&& value);
  #endif
  void set_metric_name(const char* value);
  void set_metric_name(const char* value, size_t size);
  ::std::string* mutable_metric_name();
  ::std::string* release_metric_name();
  void set_allocated_metric_name(::std::string* metric_name);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_metric_name();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_metric_name(
      ::std::string* metric_name);

  // .google.logging.v2.LogMetric metric = 2;
  bool has_metric() const;
  void clear_metric();
  static const int kMetricFieldNumber = 2;
  private:
  void _slow_mutable_metric();
  public:
  const ::google::logging::v2::LogMetric& metric() const;
  ::google::logging::v2::LogMetric* release_metric();
  ::google::logging::v2::LogMetric* mutable_metric();
  void set_allocated_metric(::google::logging::v2::LogMetric* metric);
  void unsafe_arena_set_allocated_metric(
      ::google::logging::v2::LogMetric* metric);
  ::google::logging::v2::LogMetric* unsafe_arena_release_metric();

  // @@protoc_insertion_point(class_scope:google.logging.v2.UpdateLogMetricRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::ArenaStringPtr metric_name_;
  ::google::logging::v2::LogMetric* metric_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2flogging_2fv2_2flogging_5fmetrics_2eproto::TableStruct;
  friend void ::protobuf_google_2flogging_2fv2_2flogging_5fmetrics_2eproto::InitDefaultsUpdateLogMetricRequestImpl();
};
// -------------------------------------------------------------------

class DeleteLogMetricRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.logging.v2.DeleteLogMetricRequest) */ {
 public:
  DeleteLogMetricRequest();
  virtual ~DeleteLogMetricRequest();

  DeleteLogMetricRequest(const DeleteLogMetricRequest& from);

  inline DeleteLogMetricRequest& operator=(const DeleteLogMetricRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DeleteLogMetricRequest(DeleteLogMetricRequest&& from) noexcept
    : DeleteLogMetricRequest() {
    *this = ::std::move(from);
  }

  inline DeleteLogMetricRequest& operator=(DeleteLogMetricRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const DeleteLogMetricRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeleteLogMetricRequest* internal_default_instance() {
    return reinterpret_cast<const DeleteLogMetricRequest*>(
               &_DeleteLogMetricRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    7;

  void UnsafeArenaSwap(DeleteLogMetricRequest* other);
  void Swap(DeleteLogMetricRequest* other);
  friend void swap(DeleteLogMetricRequest& a, DeleteLogMetricRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DeleteLogMetricRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  DeleteLogMetricRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DeleteLogMetricRequest& from);
  void MergeFrom(const DeleteLogMetricRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DeleteLogMetricRequest* other);
  protected:
  explicit DeleteLogMetricRequest(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string metric_name = 1;
  void clear_metric_name();
  static const int kMetricNameFieldNumber = 1;
  const ::std::string& metric_name() const;
  void set_metric_name(const ::std::string& value);
  #if LANG_CXX11
  void set_metric_name(::std::string&& value);
  #endif
  void set_metric_name(const char* value);
  void set_metric_name(const char* value, size_t size);
  ::std::string* mutable_metric_name();
  ::std::string* release_metric_name();
  void set_allocated_metric_name(::std::string* metric_name);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_metric_name();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_metric_name(
      ::std::string* metric_name);

  // @@protoc_insertion_point(class_scope:google.logging.v2.DeleteLogMetricRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::ArenaStringPtr metric_name_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2flogging_2fv2_2flogging_5fmetrics_2eproto::TableStruct;
  friend void ::protobuf_google_2flogging_2fv2_2flogging_5fmetrics_2eproto::InitDefaultsDeleteLogMetricRequestImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// LogMetric

// string name = 1;
inline void LogMetric::clear_name() {
  name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& LogMetric::name() const {
  // @@protoc_insertion_point(field_get:google.logging.v2.LogMetric.name)
  return name_.Get();
}
inline void LogMetric::set_name(const ::std::string& value) {
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.logging.v2.LogMetric.name)
}
#if LANG_CXX11
inline void LogMetric::set_name(::std::string&& value) {
  
  name_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:google.logging.v2.LogMetric.name)
}
#endif
inline void LogMetric::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.logging.v2.LogMetric.name)
}
inline void LogMetric::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.logging.v2.LogMetric.name)
}
inline ::std::string* LogMetric::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:google.logging.v2.LogMetric.name)
  return name_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* LogMetric::release_name() {
  // @@protoc_insertion_point(field_release:google.logging.v2.LogMetric.name)
  
  return name_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void LogMetric::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.logging.v2.LogMetric.name)
}
inline ::std::string* LogMetric::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.logging.v2.LogMetric.name)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return name_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void LogMetric::unsafe_arena_set_allocated_name(
    ::std::string* name) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (name != NULL) {
    
  } else {
    
  }
  name_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      name, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.logging.v2.LogMetric.name)
}

// string description = 2;
inline void LogMetric::clear_description() {
  description_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& LogMetric::description() const {
  // @@protoc_insertion_point(field_get:google.logging.v2.LogMetric.description)
  return description_.Get();
}
inline void LogMetric::set_description(const ::std::string& value) {
  
  description_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.logging.v2.LogMetric.description)
}
#if LANG_CXX11
inline void LogMetric::set_description(::std::string&& value) {
  
  description_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:google.logging.v2.LogMetric.description)
}
#endif
inline void LogMetric::set_description(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  description_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.logging.v2.LogMetric.description)
}
inline void LogMetric::set_description(const char* value,
    size_t size) {
  
  description_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.logging.v2.LogMetric.description)
}
inline ::std::string* LogMetric::mutable_description() {
  
  // @@protoc_insertion_point(field_mutable:google.logging.v2.LogMetric.description)
  return description_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* LogMetric::release_description() {
  // @@protoc_insertion_point(field_release:google.logging.v2.LogMetric.description)
  
  return description_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void LogMetric::set_allocated_description(::std::string* description) {
  if (description != NULL) {
    
  } else {
    
  }
  description_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), description,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.logging.v2.LogMetric.description)
}
inline ::std::string* LogMetric::unsafe_arena_release_description() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.logging.v2.LogMetric.description)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return description_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void LogMetric::unsafe_arena_set_allocated_description(
    ::std::string* description) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (description != NULL) {
    
  } else {
    
  }
  description_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      description, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.logging.v2.LogMetric.description)
}

// string filter = 3;
inline void LogMetric::clear_filter() {
  filter_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& LogMetric::filter() const {
  // @@protoc_insertion_point(field_get:google.logging.v2.LogMetric.filter)
  return filter_.Get();
}
inline void LogMetric::set_filter(const ::std::string& value) {
  
  filter_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.logging.v2.LogMetric.filter)
}
#if LANG_CXX11
inline void LogMetric::set_filter(::std::string&& value) {
  
  filter_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:google.logging.v2.LogMetric.filter)
}
#endif
inline void LogMetric::set_filter(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  filter_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.logging.v2.LogMetric.filter)
}
inline void LogMetric::set_filter(const char* value,
    size_t size) {
  
  filter_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.logging.v2.LogMetric.filter)
}
inline ::std::string* LogMetric::mutable_filter() {
  
  // @@protoc_insertion_point(field_mutable:google.logging.v2.LogMetric.filter)
  return filter_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* LogMetric::release_filter() {
  // @@protoc_insertion_point(field_release:google.logging.v2.LogMetric.filter)
  
  return filter_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void LogMetric::set_allocated_filter(::std::string* filter) {
  if (filter != NULL) {
    
  } else {
    
  }
  filter_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), filter,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.logging.v2.LogMetric.filter)
}
inline ::std::string* LogMetric::unsafe_arena_release_filter() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.logging.v2.LogMetric.filter)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return filter_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void LogMetric::unsafe_arena_set_allocated_filter(
    ::std::string* filter) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (filter != NULL) {
    
  } else {
    
  }
  filter_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      filter, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.logging.v2.LogMetric.filter)
}

// .google.api.MetricDescriptor metric_descriptor = 5;
inline bool LogMetric::has_metric_descriptor() const {
  return this != internal_default_instance() && metric_descriptor_ != NULL;
}
inline const ::google::api::MetricDescriptor& LogMetric::metric_descriptor() const {
  const ::google::api::MetricDescriptor* p = metric_descriptor_;
  // @@protoc_insertion_point(field_get:google.logging.v2.LogMetric.metric_descriptor)
  return p != NULL ? *p : *reinterpret_cast<const ::google::api::MetricDescriptor*>(
      &::google::api::_MetricDescriptor_default_instance_);
}
inline ::google::api::MetricDescriptor* LogMetric::release_metric_descriptor() {
  // @@protoc_insertion_point(field_release:google.logging.v2.LogMetric.metric_descriptor)
  
  ::google::api::MetricDescriptor* temp = metric_descriptor_;
  if (GetArenaNoVirtual() != NULL) {
    temp = ::google::protobuf::internal::DuplicateIfNonNull(temp, NULL);
  }
  metric_descriptor_ = NULL;
  return temp;
}
inline ::google::api::MetricDescriptor* LogMetric::unsafe_arena_release_metric_descriptor() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.logging.v2.LogMetric.metric_descriptor)
  
  ::google::api::MetricDescriptor* temp = metric_descriptor_;
  metric_descriptor_ = NULL;
  return temp;
}
inline ::google::api::MetricDescriptor* LogMetric::mutable_metric_descriptor() {
  
  if (metric_descriptor_ == NULL) {
    _slow_mutable_metric_descriptor();
  }
  // @@protoc_insertion_point(field_mutable:google.logging.v2.LogMetric.metric_descriptor)
  return metric_descriptor_;
}
inline void LogMetric::set_allocated_metric_descriptor(::google::api::MetricDescriptor* metric_descriptor) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(metric_descriptor_);
  }
  if (metric_descriptor) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      metric_descriptor = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, metric_descriptor, submessage_arena);
    }
    
  } else {
    
  }
  metric_descriptor_ = metric_descriptor;
  // @@protoc_insertion_point(field_set_allocated:google.logging.v2.LogMetric.metric_descriptor)
}

// string value_extractor = 6;
inline void LogMetric::clear_value_extractor() {
  value_extractor_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& LogMetric::value_extractor() const {
  // @@protoc_insertion_point(field_get:google.logging.v2.LogMetric.value_extractor)
  return value_extractor_.Get();
}
inline void LogMetric::set_value_extractor(const ::std::string& value) {
  
  value_extractor_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.logging.v2.LogMetric.value_extractor)
}
#if LANG_CXX11
inline void LogMetric::set_value_extractor(::std::string&& value) {
  
  value_extractor_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:google.logging.v2.LogMetric.value_extractor)
}
#endif
inline void LogMetric::set_value_extractor(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  value_extractor_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.logging.v2.LogMetric.value_extractor)
}
inline void LogMetric::set_value_extractor(const char* value,
    size_t size) {
  
  value_extractor_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.logging.v2.LogMetric.value_extractor)
}
inline ::std::string* LogMetric::mutable_value_extractor() {
  
  // @@protoc_insertion_point(field_mutable:google.logging.v2.LogMetric.value_extractor)
  return value_extractor_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* LogMetric::release_value_extractor() {
  // @@protoc_insertion_point(field_release:google.logging.v2.LogMetric.value_extractor)
  
  return value_extractor_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void LogMetric::set_allocated_value_extractor(::std::string* value_extractor) {
  if (value_extractor != NULL) {
    
  } else {
    
  }
  value_extractor_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value_extractor,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.logging.v2.LogMetric.value_extractor)
}
inline ::std::string* LogMetric::unsafe_arena_release_value_extractor() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.logging.v2.LogMetric.value_extractor)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return value_extractor_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void LogMetric::unsafe_arena_set_allocated_value_extractor(
    ::std::string* value_extractor) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (value_extractor != NULL) {
    
  } else {
    
  }
  value_extractor_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      value_extractor, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.logging.v2.LogMetric.value_extractor)
}

// map<string, string> label_extractors = 7;
inline int LogMetric::label_extractors_size() const {
  return label_extractors_.size();
}
inline void LogMetric::clear_label_extractors() {
  label_extractors_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::std::string >&
LogMetric::label_extractors() const {
  // @@protoc_insertion_point(field_map:google.logging.v2.LogMetric.label_extractors)
  return label_extractors_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::std::string >*
LogMetric::mutable_label_extractors() {
  // @@protoc_insertion_point(field_mutable_map:google.logging.v2.LogMetric.label_extractors)
  return label_extractors_.MutableMap();
}

// .google.api.Distribution.BucketOptions bucket_options = 8;
inline bool LogMetric::has_bucket_options() const {
  return this != internal_default_instance() && bucket_options_ != NULL;
}
inline const ::google::api::Distribution_BucketOptions& LogMetric::bucket_options() const {
  const ::google::api::Distribution_BucketOptions* p = bucket_options_;
  // @@protoc_insertion_point(field_get:google.logging.v2.LogMetric.bucket_options)
  return p != NULL ? *p : *reinterpret_cast<const ::google::api::Distribution_BucketOptions*>(
      &::google::api::_Distribution_BucketOptions_default_instance_);
}
inline ::google::api::Distribution_BucketOptions* LogMetric::release_bucket_options() {
  // @@protoc_insertion_point(field_release:google.logging.v2.LogMetric.bucket_options)
  
  ::google::api::Distribution_BucketOptions* temp = bucket_options_;
  if (GetArenaNoVirtual() != NULL) {
    temp = ::google::protobuf::internal::DuplicateIfNonNull(temp, NULL);
  }
  bucket_options_ = NULL;
  return temp;
}
inline ::google::api::Distribution_BucketOptions* LogMetric::unsafe_arena_release_bucket_options() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.logging.v2.LogMetric.bucket_options)
  
  ::google::api::Distribution_BucketOptions* temp = bucket_options_;
  bucket_options_ = NULL;
  return temp;
}
inline ::google::api::Distribution_BucketOptions* LogMetric::mutable_bucket_options() {
  
  if (bucket_options_ == NULL) {
    _slow_mutable_bucket_options();
  }
  // @@protoc_insertion_point(field_mutable:google.logging.v2.LogMetric.bucket_options)
  return bucket_options_;
}
inline void LogMetric::set_allocated_bucket_options(::google::api::Distribution_BucketOptions* bucket_options) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(bucket_options_);
  }
  if (bucket_options) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      bucket_options = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, bucket_options, submessage_arena);
    }
    
  } else {
    
  }
  bucket_options_ = bucket_options;
  // @@protoc_insertion_point(field_set_allocated:google.logging.v2.LogMetric.bucket_options)
}

// .google.logging.v2.LogMetric.ApiVersion version = 4;
inline void LogMetric::clear_version() {
  version_ = 0;
}
inline ::google::logging::v2::LogMetric_ApiVersion LogMetric::version() const {
  // @@protoc_insertion_point(field_get:google.logging.v2.LogMetric.version)
  return static_cast< ::google::logging::v2::LogMetric_ApiVersion >(version_);
}
inline void LogMetric::set_version(::google::logging::v2::LogMetric_ApiVersion value) {
  
  version_ = value;
  // @@protoc_insertion_point(field_set:google.logging.v2.LogMetric.version)
}

// -------------------------------------------------------------------

// ListLogMetricsRequest

// string parent = 1;
inline void ListLogMetricsRequest::clear_parent() {
  parent_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& ListLogMetricsRequest::parent() const {
  // @@protoc_insertion_point(field_get:google.logging.v2.ListLogMetricsRequest.parent)
  return parent_.Get();
}
inline void ListLogMetricsRequest::set_parent(const ::std::string& value) {
  
  parent_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.logging.v2.ListLogMetricsRequest.parent)
}
#if LANG_CXX11
inline void ListLogMetricsRequest::set_parent(::std::string&& value) {
  
  parent_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:google.logging.v2.ListLogMetricsRequest.parent)
}
#endif
inline void ListLogMetricsRequest::set_parent(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  parent_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.logging.v2.ListLogMetricsRequest.parent)
}
inline void ListLogMetricsRequest::set_parent(const char* value,
    size_t size) {
  
  parent_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.logging.v2.ListLogMetricsRequest.parent)
}
inline ::std::string* ListLogMetricsRequest::mutable_parent() {
  
  // @@protoc_insertion_point(field_mutable:google.logging.v2.ListLogMetricsRequest.parent)
  return parent_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ListLogMetricsRequest::release_parent() {
  // @@protoc_insertion_point(field_release:google.logging.v2.ListLogMetricsRequest.parent)
  
  return parent_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ListLogMetricsRequest::set_allocated_parent(::std::string* parent) {
  if (parent != NULL) {
    
  } else {
    
  }
  parent_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), parent,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.logging.v2.ListLogMetricsRequest.parent)
}
inline ::std::string* ListLogMetricsRequest::unsafe_arena_release_parent() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.logging.v2.ListLogMetricsRequest.parent)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return parent_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ListLogMetricsRequest::unsafe_arena_set_allocated_parent(
    ::std::string* parent) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (parent != NULL) {
    
  } else {
    
  }
  parent_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      parent, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.logging.v2.ListLogMetricsRequest.parent)
}

// string page_token = 2;
inline void ListLogMetricsRequest::clear_page_token() {
  page_token_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& ListLogMetricsRequest::page_token() const {
  // @@protoc_insertion_point(field_get:google.logging.v2.ListLogMetricsRequest.page_token)
  return page_token_.Get();
}
inline void ListLogMetricsRequest::set_page_token(const ::std::string& value) {
  
  page_token_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.logging.v2.ListLogMetricsRequest.page_token)
}
#if LANG_CXX11
inline void ListLogMetricsRequest::set_page_token(::std::string&& value) {
  
  page_token_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:google.logging.v2.ListLogMetricsRequest.page_token)
}
#endif
inline void ListLogMetricsRequest::set_page_token(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  page_token_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.logging.v2.ListLogMetricsRequest.page_token)
}
inline void ListLogMetricsRequest::set_page_token(const char* value,
    size_t size) {
  
  page_token_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.logging.v2.ListLogMetricsRequest.page_token)
}
inline ::std::string* ListLogMetricsRequest::mutable_page_token() {
  
  // @@protoc_insertion_point(field_mutable:google.logging.v2.ListLogMetricsRequest.page_token)
  return page_token_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ListLogMetricsRequest::release_page_token() {
  // @@protoc_insertion_point(field_release:google.logging.v2.ListLogMetricsRequest.page_token)
  
  return page_token_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ListLogMetricsRequest::set_allocated_page_token(::std::string* page_token) {
  if (page_token != NULL) {
    
  } else {
    
  }
  page_token_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), page_token,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.logging.v2.ListLogMetricsRequest.page_token)
}
inline ::std::string* ListLogMetricsRequest::unsafe_arena_release_page_token() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.logging.v2.ListLogMetricsRequest.page_token)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return page_token_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ListLogMetricsRequest::unsafe_arena_set_allocated_page_token(
    ::std::string* page_token) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (page_token != NULL) {
    
  } else {
    
  }
  page_token_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      page_token, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.logging.v2.ListLogMetricsRequest.page_token)
}

// int32 page_size = 3;
inline void ListLogMetricsRequest::clear_page_size() {
  page_size_ = 0;
}
inline ::google::protobuf::int32 ListLogMetricsRequest::page_size() const {
  // @@protoc_insertion_point(field_get:google.logging.v2.ListLogMetricsRequest.page_size)
  return page_size_;
}
inline void ListLogMetricsRequest::set_page_size(::google::protobuf::int32 value) {
  
  page_size_ = value;
  // @@protoc_insertion_point(field_set:google.logging.v2.ListLogMetricsRequest.page_size)
}

// -------------------------------------------------------------------

// ListLogMetricsResponse

// repeated .google.logging.v2.LogMetric metrics = 1;
inline int ListLogMetricsResponse::metrics_size() const {
  return metrics_.size();
}
inline void ListLogMetricsResponse::clear_metrics() {
  metrics_.Clear();
}
inline const ::google::logging::v2::LogMetric& ListLogMetricsResponse::metrics(int index) const {
  // @@protoc_insertion_point(field_get:google.logging.v2.ListLogMetricsResponse.metrics)
  return metrics_.Get(index);
}
inline ::google::logging::v2::LogMetric* ListLogMetricsResponse::mutable_metrics(int index) {
  // @@protoc_insertion_point(field_mutable:google.logging.v2.ListLogMetricsResponse.metrics)
  return metrics_.Mutable(index);
}
inline ::google::logging::v2::LogMetric* ListLogMetricsResponse::add_metrics() {
  // @@protoc_insertion_point(field_add:google.logging.v2.ListLogMetricsResponse.metrics)
  return metrics_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::google::logging::v2::LogMetric >*
ListLogMetricsResponse::mutable_metrics() {
  // @@protoc_insertion_point(field_mutable_list:google.logging.v2.ListLogMetricsResponse.metrics)
  return &metrics_;
}
inline const ::google::protobuf::RepeatedPtrField< ::google::logging::v2::LogMetric >&
ListLogMetricsResponse::metrics() const {
  // @@protoc_insertion_point(field_list:google.logging.v2.ListLogMetricsResponse.metrics)
  return metrics_;
}

// string next_page_token = 2;
inline void ListLogMetricsResponse::clear_next_page_token() {
  next_page_token_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& ListLogMetricsResponse::next_page_token() const {
  // @@protoc_insertion_point(field_get:google.logging.v2.ListLogMetricsResponse.next_page_token)
  return next_page_token_.Get();
}
inline void ListLogMetricsResponse::set_next_page_token(const ::std::string& value) {
  
  next_page_token_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.logging.v2.ListLogMetricsResponse.next_page_token)
}
#if LANG_CXX11
inline void ListLogMetricsResponse::set_next_page_token(::std::string&& value) {
  
  next_page_token_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:google.logging.v2.ListLogMetricsResponse.next_page_token)
}
#endif
inline void ListLogMetricsResponse::set_next_page_token(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  next_page_token_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.logging.v2.ListLogMetricsResponse.next_page_token)
}
inline void ListLogMetricsResponse::set_next_page_token(const char* value,
    size_t size) {
  
  next_page_token_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.logging.v2.ListLogMetricsResponse.next_page_token)
}
inline ::std::string* ListLogMetricsResponse::mutable_next_page_token() {
  
  // @@protoc_insertion_point(field_mutable:google.logging.v2.ListLogMetricsResponse.next_page_token)
  return next_page_token_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ListLogMetricsResponse::release_next_page_token() {
  // @@protoc_insertion_point(field_release:google.logging.v2.ListLogMetricsResponse.next_page_token)
  
  return next_page_token_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ListLogMetricsResponse::set_allocated_next_page_token(::std::string* next_page_token) {
  if (next_page_token != NULL) {
    
  } else {
    
  }
  next_page_token_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), next_page_token,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.logging.v2.ListLogMetricsResponse.next_page_token)
}
inline ::std::string* ListLogMetricsResponse::unsafe_arena_release_next_page_token() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.logging.v2.ListLogMetricsResponse.next_page_token)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return next_page_token_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ListLogMetricsResponse::unsafe_arena_set_allocated_next_page_token(
    ::std::string* next_page_token) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (next_page_token != NULL) {
    
  } else {
    
  }
  next_page_token_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      next_page_token, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.logging.v2.ListLogMetricsResponse.next_page_token)
}

// -------------------------------------------------------------------

// GetLogMetricRequest

// string metric_name = 1;
inline void GetLogMetricRequest::clear_metric_name() {
  metric_name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& GetLogMetricRequest::metric_name() const {
  // @@protoc_insertion_point(field_get:google.logging.v2.GetLogMetricRequest.metric_name)
  return metric_name_.Get();
}
inline void GetLogMetricRequest::set_metric_name(const ::std::string& value) {
  
  metric_name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.logging.v2.GetLogMetricRequest.metric_name)
}
#if LANG_CXX11
inline void GetLogMetricRequest::set_metric_name(::std::string&& value) {
  
  metric_name_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:google.logging.v2.GetLogMetricRequest.metric_name)
}
#endif
inline void GetLogMetricRequest::set_metric_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  metric_name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.logging.v2.GetLogMetricRequest.metric_name)
}
inline void GetLogMetricRequest::set_metric_name(const char* value,
    size_t size) {
  
  metric_name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.logging.v2.GetLogMetricRequest.metric_name)
}
inline ::std::string* GetLogMetricRequest::mutable_metric_name() {
  
  // @@protoc_insertion_point(field_mutable:google.logging.v2.GetLogMetricRequest.metric_name)
  return metric_name_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* GetLogMetricRequest::release_metric_name() {
  // @@protoc_insertion_point(field_release:google.logging.v2.GetLogMetricRequest.metric_name)
  
  return metric_name_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void GetLogMetricRequest::set_allocated_metric_name(::std::string* metric_name) {
  if (metric_name != NULL) {
    
  } else {
    
  }
  metric_name_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), metric_name,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.logging.v2.GetLogMetricRequest.metric_name)
}
inline ::std::string* GetLogMetricRequest::unsafe_arena_release_metric_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.logging.v2.GetLogMetricRequest.metric_name)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return metric_name_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void GetLogMetricRequest::unsafe_arena_set_allocated_metric_name(
    ::std::string* metric_name) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (metric_name != NULL) {
    
  } else {
    
  }
  metric_name_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      metric_name, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.logging.v2.GetLogMetricRequest.metric_name)
}

// -------------------------------------------------------------------

// CreateLogMetricRequest

// string parent = 1;
inline void CreateLogMetricRequest::clear_parent() {
  parent_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& CreateLogMetricRequest::parent() const {
  // @@protoc_insertion_point(field_get:google.logging.v2.CreateLogMetricRequest.parent)
  return parent_.Get();
}
inline void CreateLogMetricRequest::set_parent(const ::std::string& value) {
  
  parent_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.logging.v2.CreateLogMetricRequest.parent)
}
#if LANG_CXX11
inline void CreateLogMetricRequest::set_parent(::std::string&& value) {
  
  parent_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:google.logging.v2.CreateLogMetricRequest.parent)
}
#endif
inline void CreateLogMetricRequest::set_parent(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  parent_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.logging.v2.CreateLogMetricRequest.parent)
}
inline void CreateLogMetricRequest::set_parent(const char* value,
    size_t size) {
  
  parent_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.logging.v2.CreateLogMetricRequest.parent)
}
inline ::std::string* CreateLogMetricRequest::mutable_parent() {
  
  // @@protoc_insertion_point(field_mutable:google.logging.v2.CreateLogMetricRequest.parent)
  return parent_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* CreateLogMetricRequest::release_parent() {
  // @@protoc_insertion_point(field_release:google.logging.v2.CreateLogMetricRequest.parent)
  
  return parent_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void CreateLogMetricRequest::set_allocated_parent(::std::string* parent) {
  if (parent != NULL) {
    
  } else {
    
  }
  parent_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), parent,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.logging.v2.CreateLogMetricRequest.parent)
}
inline ::std::string* CreateLogMetricRequest::unsafe_arena_release_parent() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.logging.v2.CreateLogMetricRequest.parent)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return parent_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void CreateLogMetricRequest::unsafe_arena_set_allocated_parent(
    ::std::string* parent) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (parent != NULL) {
    
  } else {
    
  }
  parent_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      parent, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.logging.v2.CreateLogMetricRequest.parent)
}

// .google.logging.v2.LogMetric metric = 2;
inline bool CreateLogMetricRequest::has_metric() const {
  return this != internal_default_instance() && metric_ != NULL;
}
inline void CreateLogMetricRequest::clear_metric() {
  if (GetArenaNoVirtual() == NULL && metric_ != NULL) {
    delete metric_;
  }
  metric_ = NULL;
}
inline const ::google::logging::v2::LogMetric& CreateLogMetricRequest::metric() const {
  const ::google::logging::v2::LogMetric* p = metric_;
  // @@protoc_insertion_point(field_get:google.logging.v2.CreateLogMetricRequest.metric)
  return p != NULL ? *p : *reinterpret_cast<const ::google::logging::v2::LogMetric*>(
      &::google::logging::v2::_LogMetric_default_instance_);
}
inline ::google::logging::v2::LogMetric* CreateLogMetricRequest::release_metric() {
  // @@protoc_insertion_point(field_release:google.logging.v2.CreateLogMetricRequest.metric)
  
  ::google::logging::v2::LogMetric* temp = metric_;
  if (GetArenaNoVirtual() != NULL) {
    temp = ::google::protobuf::internal::DuplicateIfNonNull(temp, NULL);
  }
  metric_ = NULL;
  return temp;
}
inline ::google::logging::v2::LogMetric* CreateLogMetricRequest::unsafe_arena_release_metric() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.logging.v2.CreateLogMetricRequest.metric)
  
  ::google::logging::v2::LogMetric* temp = metric_;
  metric_ = NULL;
  return temp;
}
inline ::google::logging::v2::LogMetric* CreateLogMetricRequest::mutable_metric() {
  
  if (metric_ == NULL) {
    _slow_mutable_metric();
  }
  // @@protoc_insertion_point(field_mutable:google.logging.v2.CreateLogMetricRequest.metric)
  return metric_;
}
inline void CreateLogMetricRequest::set_allocated_metric(::google::logging::v2::LogMetric* metric) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete metric_;
  }
  if (metric) {
    ::google::protobuf::Arena* submessage_arena =
      ::google::protobuf::Arena::GetArena(metric);
    if (message_arena != submessage_arena) {
      metric = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, metric, submessage_arena);
    }
    
  } else {
    
  }
  metric_ = metric;
  // @@protoc_insertion_point(field_set_allocated:google.logging.v2.CreateLogMetricRequest.metric)
}

// -------------------------------------------------------------------

// UpdateLogMetricRequest

// string metric_name = 1;
inline void UpdateLogMetricRequest::clear_metric_name() {
  metric_name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& UpdateLogMetricRequest::metric_name() const {
  // @@protoc_insertion_point(field_get:google.logging.v2.UpdateLogMetricRequest.metric_name)
  return metric_name_.Get();
}
inline void UpdateLogMetricRequest::set_metric_name(const ::std::string& value) {
  
  metric_name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.logging.v2.UpdateLogMetricRequest.metric_name)
}
#if LANG_CXX11
inline void UpdateLogMetricRequest::set_metric_name(::std::string&& value) {
  
  metric_name_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:google.logging.v2.UpdateLogMetricRequest.metric_name)
}
#endif
inline void UpdateLogMetricRequest::set_metric_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  metric_name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.logging.v2.UpdateLogMetricRequest.metric_name)
}
inline void UpdateLogMetricRequest::set_metric_name(const char* value,
    size_t size) {
  
  metric_name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.logging.v2.UpdateLogMetricRequest.metric_name)
}
inline ::std::string* UpdateLogMetricRequest::mutable_metric_name() {
  
  // @@protoc_insertion_point(field_mutable:google.logging.v2.UpdateLogMetricRequest.metric_name)
  return metric_name_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* UpdateLogMetricRequest::release_metric_name() {
  // @@protoc_insertion_point(field_release:google.logging.v2.UpdateLogMetricRequest.metric_name)
  
  return metric_name_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void UpdateLogMetricRequest::set_allocated_metric_name(::std::string* metric_name) {
  if (metric_name != NULL) {
    
  } else {
    
  }
  metric_name_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), metric_name,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.logging.v2.UpdateLogMetricRequest.metric_name)
}
inline ::std::string* UpdateLogMetricRequest::unsafe_arena_release_metric_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.logging.v2.UpdateLogMetricRequest.metric_name)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return metric_name_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void UpdateLogMetricRequest::unsafe_arena_set_allocated_metric_name(
    ::std::string* metric_name) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (metric_name != NULL) {
    
  } else {
    
  }
  metric_name_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      metric_name, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.logging.v2.UpdateLogMetricRequest.metric_name)
}

// .google.logging.v2.LogMetric metric = 2;
inline bool UpdateLogMetricRequest::has_metric() const {
  return this != internal_default_instance() && metric_ != NULL;
}
inline void UpdateLogMetricRequest::clear_metric() {
  if (GetArenaNoVirtual() == NULL && metric_ != NULL) {
    delete metric_;
  }
  metric_ = NULL;
}
inline const ::google::logging::v2::LogMetric& UpdateLogMetricRequest::metric() const {
  const ::google::logging::v2::LogMetric* p = metric_;
  // @@protoc_insertion_point(field_get:google.logging.v2.UpdateLogMetricRequest.metric)
  return p != NULL ? *p : *reinterpret_cast<const ::google::logging::v2::LogMetric*>(
      &::google::logging::v2::_LogMetric_default_instance_);
}
inline ::google::logging::v2::LogMetric* UpdateLogMetricRequest::release_metric() {
  // @@protoc_insertion_point(field_release:google.logging.v2.UpdateLogMetricRequest.metric)
  
  ::google::logging::v2::LogMetric* temp = metric_;
  if (GetArenaNoVirtual() != NULL) {
    temp = ::google::protobuf::internal::DuplicateIfNonNull(temp, NULL);
  }
  metric_ = NULL;
  return temp;
}
inline ::google::logging::v2::LogMetric* UpdateLogMetricRequest::unsafe_arena_release_metric() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.logging.v2.UpdateLogMetricRequest.metric)
  
  ::google::logging::v2::LogMetric* temp = metric_;
  metric_ = NULL;
  return temp;
}
inline ::google::logging::v2::LogMetric* UpdateLogMetricRequest::mutable_metric() {
  
  if (metric_ == NULL) {
    _slow_mutable_metric();
  }
  // @@protoc_insertion_point(field_mutable:google.logging.v2.UpdateLogMetricRequest.metric)
  return metric_;
}
inline void UpdateLogMetricRequest::set_allocated_metric(::google::logging::v2::LogMetric* metric) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete metric_;
  }
  if (metric) {
    ::google::protobuf::Arena* submessage_arena =
      ::google::protobuf::Arena::GetArena(metric);
    if (message_arena != submessage_arena) {
      metric = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, metric, submessage_arena);
    }
    
  } else {
    
  }
  metric_ = metric;
  // @@protoc_insertion_point(field_set_allocated:google.logging.v2.UpdateLogMetricRequest.metric)
}

// -------------------------------------------------------------------

// DeleteLogMetricRequest

// string metric_name = 1;
inline void DeleteLogMetricRequest::clear_metric_name() {
  metric_name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& DeleteLogMetricRequest::metric_name() const {
  // @@protoc_insertion_point(field_get:google.logging.v2.DeleteLogMetricRequest.metric_name)
  return metric_name_.Get();
}
inline void DeleteLogMetricRequest::set_metric_name(const ::std::string& value) {
  
  metric_name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.logging.v2.DeleteLogMetricRequest.metric_name)
}
#if LANG_CXX11
inline void DeleteLogMetricRequest::set_metric_name(::std::string&& value) {
  
  metric_name_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:google.logging.v2.DeleteLogMetricRequest.metric_name)
}
#endif
inline void DeleteLogMetricRequest::set_metric_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  metric_name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.logging.v2.DeleteLogMetricRequest.metric_name)
}
inline void DeleteLogMetricRequest::set_metric_name(const char* value,
    size_t size) {
  
  metric_name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.logging.v2.DeleteLogMetricRequest.metric_name)
}
inline ::std::string* DeleteLogMetricRequest::mutable_metric_name() {
  
  // @@protoc_insertion_point(field_mutable:google.logging.v2.DeleteLogMetricRequest.metric_name)
  return metric_name_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* DeleteLogMetricRequest::release_metric_name() {
  // @@protoc_insertion_point(field_release:google.logging.v2.DeleteLogMetricRequest.metric_name)
  
  return metric_name_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void DeleteLogMetricRequest::set_allocated_metric_name(::std::string* metric_name) {
  if (metric_name != NULL) {
    
  } else {
    
  }
  metric_name_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), metric_name,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.logging.v2.DeleteLogMetricRequest.metric_name)
}
inline ::std::string* DeleteLogMetricRequest::unsafe_arena_release_metric_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.logging.v2.DeleteLogMetricRequest.metric_name)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return metric_name_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void DeleteLogMetricRequest::unsafe_arena_set_allocated_metric_name(
    ::std::string* metric_name) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (metric_name != NULL) {
    
  } else {
    
  }
  metric_name_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      metric_name, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.logging.v2.DeleteLogMetricRequest.metric_name)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v2
}  // namespace logging
}  // namespace google

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::google::logging::v2::LogMetric_ApiVersion> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::google::logging::v2::LogMetric_ApiVersion>() {
  return ::google::logging::v2::LogMetric_ApiVersion_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_google_2flogging_2fv2_2flogging_5fmetrics_2eproto__INCLUDED
