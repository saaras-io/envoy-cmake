// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: google/firestore/admin/v1beta1/firestore_admin.proto
// Original file comments:
// Copyright 2017 Google Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
#ifndef GRPC_google_2ffirestore_2fadmin_2fv1beta1_2ffirestore_5fadmin_2eproto__INCLUDED
#define GRPC_google_2ffirestore_2fadmin_2fv1beta1_2ffirestore_5fadmin_2eproto__INCLUDED

#include "google/firestore/admin/v1beta1/firestore_admin.pb.h"

#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace grpc {
class CompletionQueue;
class Channel;
class ServerCompletionQueue;
class ServerContext;
}  // namespace grpc

namespace google {
namespace firestore {
namespace admin {
namespace v1beta1 {

// The Cloud Firestore Admin API.
//
// This API provides several administrative services for Cloud Firestore.
//
// # Concepts
//
// Project, Database, Namespace, Collection, and Document are used as defined in
// the Google Cloud Firestore API.
//
// Operation: An Operation represents work being performed in the background.
//
//
// # Services
//
// ## Index
//
// The index service manages Cloud Firestore indexes.
//
// Index creation is performed asynchronously.
// An Operation resource is created for each such asynchronous operation.
// The state of the operation (including any errors encountered)
// may be queried via the Operation resource.
//
// ## Metadata
//
// Provides metadata and statistical information about data in Cloud Firestore.
// The data provided as part of this API may be stale.
//
// ## Operation
//
// The Operations collection provides a record of actions performed for the
// specified Project (including any Operations in progress). Operations are not
// created directly but through calls on other collections or resources.
//
// An Operation that is not yet done may be cancelled. The request to cancel is
// asynchronous and the Operation may continue to run for some time after the
// request to cancel is made.
//
// An Operation that is done may be deleted so that it is no longer listed as
// part of the Operation collection.
//
// Operations are created by service `FirestoreAdmin`, but are accessed via
// service `google.longrunning.Operations`.
class FirestoreAdmin final {
 public:
  static constexpr char const* service_full_name() {
    return "google.firestore.admin.v1beta1.FirestoreAdmin";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Creates the specified index.
    // A newly created index's initial state is `CREATING`. On completion of the
    // returned [google.longrunning.Operation][google.longrunning.Operation], the state will be `READY`.
    // If the index already exists, the call will return an `ALREADY_EXISTS`
    // status.
    //
    // During creation, the process could result in an error, in which case the
    // index will move to the `ERROR` state. The process can be recovered by
    // fixing the data that caused the error, removing the index with
    // [delete][google.firestore.admin.v1beta1.FirestoreAdmin.DeleteIndex], then re-creating the index with
    // [create][google.firestore.admin.v1beta1.FirestoreAdmin.CreateIndex].
    //
    // Indexes with a single field cannot be created.
    virtual ::grpc::Status CreateIndex(::grpc::ClientContext* context, const ::google::firestore::admin::v1beta1::CreateIndexRequest& request, ::google::longrunning::Operation* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::longrunning::Operation>> AsyncCreateIndex(::grpc::ClientContext* context, const ::google::firestore::admin::v1beta1::CreateIndexRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::longrunning::Operation>>(AsyncCreateIndexRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::longrunning::Operation>> PrepareAsyncCreateIndex(::grpc::ClientContext* context, const ::google::firestore::admin::v1beta1::CreateIndexRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::longrunning::Operation>>(PrepareAsyncCreateIndexRaw(context, request, cq));
    }
    // Lists the indexes that match the specified filters.
    virtual ::grpc::Status ListIndexes(::grpc::ClientContext* context, const ::google::firestore::admin::v1beta1::ListIndexesRequest& request, ::google::firestore::admin::v1beta1::ListIndexesResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::firestore::admin::v1beta1::ListIndexesResponse>> AsyncListIndexes(::grpc::ClientContext* context, const ::google::firestore::admin::v1beta1::ListIndexesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::firestore::admin::v1beta1::ListIndexesResponse>>(AsyncListIndexesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::firestore::admin::v1beta1::ListIndexesResponse>> PrepareAsyncListIndexes(::grpc::ClientContext* context, const ::google::firestore::admin::v1beta1::ListIndexesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::firestore::admin::v1beta1::ListIndexesResponse>>(PrepareAsyncListIndexesRaw(context, request, cq));
    }
    // Gets an index.
    virtual ::grpc::Status GetIndex(::grpc::ClientContext* context, const ::google::firestore::admin::v1beta1::GetIndexRequest& request, ::google::firestore::admin::v1beta1::Index* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::firestore::admin::v1beta1::Index>> AsyncGetIndex(::grpc::ClientContext* context, const ::google::firestore::admin::v1beta1::GetIndexRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::firestore::admin::v1beta1::Index>>(AsyncGetIndexRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::firestore::admin::v1beta1::Index>> PrepareAsyncGetIndex(::grpc::ClientContext* context, const ::google::firestore::admin::v1beta1::GetIndexRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::firestore::admin::v1beta1::Index>>(PrepareAsyncGetIndexRaw(context, request, cq));
    }
    // Deletes an index.
    virtual ::grpc::Status DeleteIndex(::grpc::ClientContext* context, const ::google::firestore::admin::v1beta1::DeleteIndexRequest& request, ::google::protobuf::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> AsyncDeleteIndex(::grpc::ClientContext* context, const ::google::firestore::admin::v1beta1::DeleteIndexRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(AsyncDeleteIndexRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> PrepareAsyncDeleteIndex(::grpc::ClientContext* context, const ::google::firestore::admin::v1beta1::DeleteIndexRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(PrepareAsyncDeleteIndexRaw(context, request, cq));
    }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::longrunning::Operation>* AsyncCreateIndexRaw(::grpc::ClientContext* context, const ::google::firestore::admin::v1beta1::CreateIndexRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::longrunning::Operation>* PrepareAsyncCreateIndexRaw(::grpc::ClientContext* context, const ::google::firestore::admin::v1beta1::CreateIndexRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::firestore::admin::v1beta1::ListIndexesResponse>* AsyncListIndexesRaw(::grpc::ClientContext* context, const ::google::firestore::admin::v1beta1::ListIndexesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::firestore::admin::v1beta1::ListIndexesResponse>* PrepareAsyncListIndexesRaw(::grpc::ClientContext* context, const ::google::firestore::admin::v1beta1::ListIndexesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::firestore::admin::v1beta1::Index>* AsyncGetIndexRaw(::grpc::ClientContext* context, const ::google::firestore::admin::v1beta1::GetIndexRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::firestore::admin::v1beta1::Index>* PrepareAsyncGetIndexRaw(::grpc::ClientContext* context, const ::google::firestore::admin::v1beta1::GetIndexRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* AsyncDeleteIndexRaw(::grpc::ClientContext* context, const ::google::firestore::admin::v1beta1::DeleteIndexRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* PrepareAsyncDeleteIndexRaw(::grpc::ClientContext* context, const ::google::firestore::admin::v1beta1::DeleteIndexRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status CreateIndex(::grpc::ClientContext* context, const ::google::firestore::admin::v1beta1::CreateIndexRequest& request, ::google::longrunning::Operation* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::longrunning::Operation>> AsyncCreateIndex(::grpc::ClientContext* context, const ::google::firestore::admin::v1beta1::CreateIndexRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::longrunning::Operation>>(AsyncCreateIndexRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::longrunning::Operation>> PrepareAsyncCreateIndex(::grpc::ClientContext* context, const ::google::firestore::admin::v1beta1::CreateIndexRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::longrunning::Operation>>(PrepareAsyncCreateIndexRaw(context, request, cq));
    }
    ::grpc::Status ListIndexes(::grpc::ClientContext* context, const ::google::firestore::admin::v1beta1::ListIndexesRequest& request, ::google::firestore::admin::v1beta1::ListIndexesResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::firestore::admin::v1beta1::ListIndexesResponse>> AsyncListIndexes(::grpc::ClientContext* context, const ::google::firestore::admin::v1beta1::ListIndexesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::firestore::admin::v1beta1::ListIndexesResponse>>(AsyncListIndexesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::firestore::admin::v1beta1::ListIndexesResponse>> PrepareAsyncListIndexes(::grpc::ClientContext* context, const ::google::firestore::admin::v1beta1::ListIndexesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::firestore::admin::v1beta1::ListIndexesResponse>>(PrepareAsyncListIndexesRaw(context, request, cq));
    }
    ::grpc::Status GetIndex(::grpc::ClientContext* context, const ::google::firestore::admin::v1beta1::GetIndexRequest& request, ::google::firestore::admin::v1beta1::Index* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::firestore::admin::v1beta1::Index>> AsyncGetIndex(::grpc::ClientContext* context, const ::google::firestore::admin::v1beta1::GetIndexRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::firestore::admin::v1beta1::Index>>(AsyncGetIndexRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::firestore::admin::v1beta1::Index>> PrepareAsyncGetIndex(::grpc::ClientContext* context, const ::google::firestore::admin::v1beta1::GetIndexRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::firestore::admin::v1beta1::Index>>(PrepareAsyncGetIndexRaw(context, request, cq));
    }
    ::grpc::Status DeleteIndex(::grpc::ClientContext* context, const ::google::firestore::admin::v1beta1::DeleteIndexRequest& request, ::google::protobuf::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> AsyncDeleteIndex(::grpc::ClientContext* context, const ::google::firestore::admin::v1beta1::DeleteIndexRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(AsyncDeleteIndexRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> PrepareAsyncDeleteIndex(::grpc::ClientContext* context, const ::google::firestore::admin::v1beta1::DeleteIndexRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(PrepareAsyncDeleteIndexRaw(context, request, cq));
    }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    ::grpc::ClientAsyncResponseReader< ::google::longrunning::Operation>* AsyncCreateIndexRaw(::grpc::ClientContext* context, const ::google::firestore::admin::v1beta1::CreateIndexRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::longrunning::Operation>* PrepareAsyncCreateIndexRaw(::grpc::ClientContext* context, const ::google::firestore::admin::v1beta1::CreateIndexRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::firestore::admin::v1beta1::ListIndexesResponse>* AsyncListIndexesRaw(::grpc::ClientContext* context, const ::google::firestore::admin::v1beta1::ListIndexesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::firestore::admin::v1beta1::ListIndexesResponse>* PrepareAsyncListIndexesRaw(::grpc::ClientContext* context, const ::google::firestore::admin::v1beta1::ListIndexesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::firestore::admin::v1beta1::Index>* AsyncGetIndexRaw(::grpc::ClientContext* context, const ::google::firestore::admin::v1beta1::GetIndexRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::firestore::admin::v1beta1::Index>* PrepareAsyncGetIndexRaw(::grpc::ClientContext* context, const ::google::firestore::admin::v1beta1::GetIndexRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* AsyncDeleteIndexRaw(::grpc::ClientContext* context, const ::google::firestore::admin::v1beta1::DeleteIndexRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* PrepareAsyncDeleteIndexRaw(::grpc::ClientContext* context, const ::google::firestore::admin::v1beta1::DeleteIndexRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_CreateIndex_;
    const ::grpc::internal::RpcMethod rpcmethod_ListIndexes_;
    const ::grpc::internal::RpcMethod rpcmethod_GetIndex_;
    const ::grpc::internal::RpcMethod rpcmethod_DeleteIndex_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Creates the specified index.
    // A newly created index's initial state is `CREATING`. On completion of the
    // returned [google.longrunning.Operation][google.longrunning.Operation], the state will be `READY`.
    // If the index already exists, the call will return an `ALREADY_EXISTS`
    // status.
    //
    // During creation, the process could result in an error, in which case the
    // index will move to the `ERROR` state. The process can be recovered by
    // fixing the data that caused the error, removing the index with
    // [delete][google.firestore.admin.v1beta1.FirestoreAdmin.DeleteIndex], then re-creating the index with
    // [create][google.firestore.admin.v1beta1.FirestoreAdmin.CreateIndex].
    //
    // Indexes with a single field cannot be created.
    virtual ::grpc::Status CreateIndex(::grpc::ServerContext* context, const ::google::firestore::admin::v1beta1::CreateIndexRequest* request, ::google::longrunning::Operation* response);
    // Lists the indexes that match the specified filters.
    virtual ::grpc::Status ListIndexes(::grpc::ServerContext* context, const ::google::firestore::admin::v1beta1::ListIndexesRequest* request, ::google::firestore::admin::v1beta1::ListIndexesResponse* response);
    // Gets an index.
    virtual ::grpc::Status GetIndex(::grpc::ServerContext* context, const ::google::firestore::admin::v1beta1::GetIndexRequest* request, ::google::firestore::admin::v1beta1::Index* response);
    // Deletes an index.
    virtual ::grpc::Status DeleteIndex(::grpc::ServerContext* context, const ::google::firestore::admin::v1beta1::DeleteIndexRequest* request, ::google::protobuf::Empty* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_CreateIndex : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_CreateIndex() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_CreateIndex() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateIndex(::grpc::ServerContext* context, const ::google::firestore::admin::v1beta1::CreateIndexRequest* request, ::google::longrunning::Operation* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateIndex(::grpc::ServerContext* context, ::google::firestore::admin::v1beta1::CreateIndexRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::longrunning::Operation>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ListIndexes : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_ListIndexes() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_ListIndexes() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListIndexes(::grpc::ServerContext* context, const ::google::firestore::admin::v1beta1::ListIndexesRequest* request, ::google::firestore::admin::v1beta1::ListIndexesResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListIndexes(::grpc::ServerContext* context, ::google::firestore::admin::v1beta1::ListIndexesRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::firestore::admin::v1beta1::ListIndexesResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetIndex : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_GetIndex() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_GetIndex() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetIndex(::grpc::ServerContext* context, const ::google::firestore::admin::v1beta1::GetIndexRequest* request, ::google::firestore::admin::v1beta1::Index* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetIndex(::grpc::ServerContext* context, ::google::firestore::admin::v1beta1::GetIndexRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::firestore::admin::v1beta1::Index>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DeleteIndex : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_DeleteIndex() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_DeleteIndex() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteIndex(::grpc::ServerContext* context, const ::google::firestore::admin::v1beta1::DeleteIndexRequest* request, ::google::protobuf::Empty* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteIndex(::grpc::ServerContext* context, ::google::firestore::admin::v1beta1::DeleteIndexRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::protobuf::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_CreateIndex<WithAsyncMethod_ListIndexes<WithAsyncMethod_GetIndex<WithAsyncMethod_DeleteIndex<Service > > > > AsyncService;
  template <class BaseClass>
  class WithGenericMethod_CreateIndex : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_CreateIndex() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_CreateIndex() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateIndex(::grpc::ServerContext* context, const ::google::firestore::admin::v1beta1::CreateIndexRequest* request, ::google::longrunning::Operation* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ListIndexes : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_ListIndexes() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_ListIndexes() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListIndexes(::grpc::ServerContext* context, const ::google::firestore::admin::v1beta1::ListIndexesRequest* request, ::google::firestore::admin::v1beta1::ListIndexesResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetIndex : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_GetIndex() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_GetIndex() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetIndex(::grpc::ServerContext* context, const ::google::firestore::admin::v1beta1::GetIndexRequest* request, ::google::firestore::admin::v1beta1::Index* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DeleteIndex : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_DeleteIndex() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_DeleteIndex() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteIndex(::grpc::ServerContext* context, const ::google::firestore::admin::v1beta1::DeleteIndexRequest* request, ::google::protobuf::Empty* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CreateIndex : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_CreateIndex() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler< ::google::firestore::admin::v1beta1::CreateIndexRequest, ::google::longrunning::Operation>(std::bind(&WithStreamedUnaryMethod_CreateIndex<BaseClass>::StreamedCreateIndex, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_CreateIndex() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CreateIndex(::grpc::ServerContext* context, const ::google::firestore::admin::v1beta1::CreateIndexRequest* request, ::google::longrunning::Operation* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCreateIndex(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::firestore::admin::v1beta1::CreateIndexRequest,::google::longrunning::Operation>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ListIndexes : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_ListIndexes() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler< ::google::firestore::admin::v1beta1::ListIndexesRequest, ::google::firestore::admin::v1beta1::ListIndexesResponse>(std::bind(&WithStreamedUnaryMethod_ListIndexes<BaseClass>::StreamedListIndexes, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_ListIndexes() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ListIndexes(::grpc::ServerContext* context, const ::google::firestore::admin::v1beta1::ListIndexesRequest* request, ::google::firestore::admin::v1beta1::ListIndexesResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedListIndexes(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::firestore::admin::v1beta1::ListIndexesRequest,::google::firestore::admin::v1beta1::ListIndexesResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetIndex : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_GetIndex() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler< ::google::firestore::admin::v1beta1::GetIndexRequest, ::google::firestore::admin::v1beta1::Index>(std::bind(&WithStreamedUnaryMethod_GetIndex<BaseClass>::StreamedGetIndex, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetIndex() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetIndex(::grpc::ServerContext* context, const ::google::firestore::admin::v1beta1::GetIndexRequest* request, ::google::firestore::admin::v1beta1::Index* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetIndex(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::firestore::admin::v1beta1::GetIndexRequest,::google::firestore::admin::v1beta1::Index>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DeleteIndex : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_DeleteIndex() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler< ::google::firestore::admin::v1beta1::DeleteIndexRequest, ::google::protobuf::Empty>(std::bind(&WithStreamedUnaryMethod_DeleteIndex<BaseClass>::StreamedDeleteIndex, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_DeleteIndex() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DeleteIndex(::grpc::ServerContext* context, const ::google::firestore::admin::v1beta1::DeleteIndexRequest* request, ::google::protobuf::Empty* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDeleteIndex(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::firestore::admin::v1beta1::DeleteIndexRequest,::google::protobuf::Empty>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_CreateIndex<WithStreamedUnaryMethod_ListIndexes<WithStreamedUnaryMethod_GetIndex<WithStreamedUnaryMethod_DeleteIndex<Service > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_CreateIndex<WithStreamedUnaryMethod_ListIndexes<WithStreamedUnaryMethod_GetIndex<WithStreamedUnaryMethod_DeleteIndex<Service > > > > StreamedService;
};

}  // namespace v1beta1
}  // namespace admin
}  // namespace firestore
}  // namespace google


#endif  // GRPC_google_2ffirestore_2fadmin_2fv1beta1_2ffirestore_5fadmin_2eproto__INCLUDED
