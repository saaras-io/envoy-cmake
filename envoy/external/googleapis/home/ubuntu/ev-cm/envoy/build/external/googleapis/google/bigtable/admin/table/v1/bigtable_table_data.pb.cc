// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/bigtable/admin/table/v1/bigtable_table_data.proto

#include "google/bigtable/admin/table/v1/bigtable_table_data.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)
namespace google {
namespace bigtable {
namespace admin {
namespace table {
namespace v1 {
class Table_ColumnFamiliesEntry_DoNotUseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Table_ColumnFamiliesEntry_DoNotUse>
      _instance;
} _Table_ColumnFamiliesEntry_DoNotUse_default_instance_;
class TableDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Table>
      _instance;
} _Table_default_instance_;
class ColumnFamilyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ColumnFamily>
      _instance;
} _ColumnFamily_default_instance_;
class GcRule_IntersectionDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GcRule_Intersection>
      _instance;
} _GcRule_Intersection_default_instance_;
class GcRule_UnionDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GcRule_Union>
      _instance;
} _GcRule_Union_default_instance_;
class GcRuleDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GcRule>
      _instance;
  ::google::protobuf::int32 max_num_versions_;
  const ::google::protobuf::Duration* max_age_;
  const ::google::bigtable::admin::table::v1::GcRule_Intersection* intersection_;
  const ::google::bigtable::admin::table::v1::GcRule_Union* union__;
} _GcRule_default_instance_;
}  // namespace v1
}  // namespace table
}  // namespace admin
}  // namespace bigtable
}  // namespace google
namespace protobuf_google_2fbigtable_2fadmin_2ftable_2fv1_2fbigtable_5ftable_5fdata_2eproto {
void InitDefaultsTable_ColumnFamiliesEntry_DoNotUseImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_google_2fbigtable_2fadmin_2ftable_2fv1_2fbigtable_5ftable_5fdata_2eproto::InitDefaultsColumnFamily();
  {
    void* ptr = &::google::bigtable::admin::table::v1::_Table_ColumnFamiliesEntry_DoNotUse_default_instance_;
    new (ptr) ::google::bigtable::admin::table::v1::Table_ColumnFamiliesEntry_DoNotUse();
  }
  ::google::bigtable::admin::table::v1::Table_ColumnFamiliesEntry_DoNotUse::InitAsDefaultInstance();
}

void InitDefaultsTable_ColumnFamiliesEntry_DoNotUse() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsTable_ColumnFamiliesEntry_DoNotUseImpl);
}

void InitDefaultsTableImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_google_2flongrunning_2foperations_2eproto::InitDefaultsOperation();
  protobuf_google_2fbigtable_2fadmin_2ftable_2fv1_2fbigtable_5ftable_5fdata_2eproto::InitDefaultsTable_ColumnFamiliesEntry_DoNotUse();
  {
    void* ptr = &::google::bigtable::admin::table::v1::_Table_default_instance_;
    new (ptr) ::google::bigtable::admin::table::v1::Table();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::bigtable::admin::table::v1::Table::InitAsDefaultInstance();
}

void InitDefaultsTable() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsTableImpl);
}

void InitDefaultsColumnFamilyImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_google_2fbigtable_2fadmin_2ftable_2fv1_2fbigtable_5ftable_5fdata_2eproto::InitDefaultsGcRule();
  {
    void* ptr = &::google::bigtable::admin::table::v1::_ColumnFamily_default_instance_;
    new (ptr) ::google::bigtable::admin::table::v1::ColumnFamily();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::bigtable::admin::table::v1::ColumnFamily::InitAsDefaultInstance();
}

void InitDefaultsColumnFamily() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsColumnFamilyImpl);
}

void InitDefaultsGcRuleImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_google_2fprotobuf_2fduration_2eproto::InitDefaultsDuration();
  {
    void* ptr = &::google::bigtable::admin::table::v1::_GcRule_Intersection_default_instance_;
    new (ptr) ::google::bigtable::admin::table::v1::GcRule_Intersection();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  {
    void* ptr = &::google::bigtable::admin::table::v1::_GcRule_Union_default_instance_;
    new (ptr) ::google::bigtable::admin::table::v1::GcRule_Union();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  {
    void* ptr = &::google::bigtable::admin::table::v1::_GcRule_default_instance_;
    new (ptr) ::google::bigtable::admin::table::v1::GcRule();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::bigtable::admin::table::v1::GcRule_Intersection::InitAsDefaultInstance();
  ::google::bigtable::admin::table::v1::GcRule_Union::InitAsDefaultInstance();
  ::google::bigtable::admin::table::v1::GcRule::InitAsDefaultInstance();
}

void InitDefaultsGcRule() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsGcRuleImpl);
}

::google::protobuf::Metadata file_level_metadata[6];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[1];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::bigtable::admin::table::v1::Table_ColumnFamiliesEntry_DoNotUse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::bigtable::admin::table::v1::Table_ColumnFamiliesEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::bigtable::admin::table::v1::Table_ColumnFamiliesEntry_DoNotUse, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::bigtable::admin::table::v1::Table_ColumnFamiliesEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::bigtable::admin::table::v1::Table, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::bigtable::admin::table::v1::Table, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::bigtable::admin::table::v1::Table, current_operation_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::bigtable::admin::table::v1::Table, column_families_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::bigtable::admin::table::v1::Table, granularity_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::bigtable::admin::table::v1::ColumnFamily, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::bigtable::admin::table::v1::ColumnFamily, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::bigtable::admin::table::v1::ColumnFamily, gc_expression_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::bigtable::admin::table::v1::ColumnFamily, gc_rule_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::bigtable::admin::table::v1::GcRule_Intersection, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::bigtable::admin::table::v1::GcRule_Intersection, rules_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::bigtable::admin::table::v1::GcRule_Union, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::bigtable::admin::table::v1::GcRule_Union, rules_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::bigtable::admin::table::v1::GcRule, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::bigtable::admin::table::v1::GcRule, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::google::bigtable::admin::table::v1::GcRuleDefaultTypeInternal, max_num_versions_),
  offsetof(::google::bigtable::admin::table::v1::GcRuleDefaultTypeInternal, max_age_),
  offsetof(::google::bigtable::admin::table::v1::GcRuleDefaultTypeInternal, intersection_),
  offsetof(::google::bigtable::admin::table::v1::GcRuleDefaultTypeInternal, union__),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::bigtable::admin::table::v1::GcRule, rule_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::google::bigtable::admin::table::v1::Table_ColumnFamiliesEntry_DoNotUse)},
  { 9, -1, sizeof(::google::bigtable::admin::table::v1::Table)},
  { 18, -1, sizeof(::google::bigtable::admin::table::v1::ColumnFamily)},
  { 26, -1, sizeof(::google::bigtable::admin::table::v1::GcRule_Intersection)},
  { 32, -1, sizeof(::google::bigtable::admin::table::v1::GcRule_Union)},
  { 38, -1, sizeof(::google::bigtable::admin::table::v1::GcRule)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::bigtable::admin::table::v1::_Table_ColumnFamiliesEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::bigtable::admin::table::v1::_Table_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::bigtable::admin::table::v1::_ColumnFamily_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::bigtable::admin::table::v1::_GcRule_Intersection_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::bigtable::admin::table::v1::_GcRule_Union_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::bigtable::admin::table::v1::_GcRule_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "google/bigtable/admin/table/v1/bigtable_table_data.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 6);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n8google/bigtable/admin/table/v1/bigtabl"
      "e_table_data.proto\022\036google.bigtable.admi"
      "n.table.v1\032#google/longrunning/operation"
      "s.proto\032\036google/protobuf/duration.proto\""
      "\375\002\n\005Table\022\014\n\004name\030\001 \001(\t\0228\n\021current_opera"
      "tion\030\002 \001(\0132\035.google.longrunning.Operatio"
      "n\022R\n\017column_families\030\003 \003(\01329.google.bigt"
      "able.admin.table.v1.Table.ColumnFamilies"
      "Entry\022O\n\013granularity\030\004 \001(\0162:.google.bigt"
      "able.admin.table.v1.Table.TimestampGranu"
      "larity\032c\n\023ColumnFamiliesEntry\022\013\n\003key\030\001 \001"
      "(\t\022;\n\005value\030\002 \001(\0132,.google.bigtable.admi"
      "n.table.v1.ColumnFamily:\0028\001\"\"\n\024Timestamp"
      "Granularity\022\n\n\006MILLIS\020\000\"l\n\014ColumnFamily\022"
      "\014\n\004name\030\001 \001(\t\022\025\n\rgc_expression\030\002 \001(\t\0227\n\007"
      "gc_rule\030\003 \001(\0132&.google.bigtable.admin.ta"
      "ble.v1.GcRule\"\355\002\n\006GcRule\022\032\n\020max_num_vers"
      "ions\030\001 \001(\005H\000\022,\n\007max_age\030\002 \001(\0132\031.google.p"
      "rotobuf.DurationH\000\022K\n\014intersection\030\003 \001(\013"
      "23.google.bigtable.admin.table.v1.GcRule"
      ".IntersectionH\000\022=\n\005union\030\004 \001(\0132,.google."
      "bigtable.admin.table.v1.GcRule.UnionH\000\032E"
      "\n\014Intersection\0225\n\005rules\030\001 \003(\0132&.google.b"
      "igtable.admin.table.v1.GcRule\032>\n\005Union\0225"
      "\n\005rules\030\001 \003(\0132&.google.bigtable.admin.ta"
      "ble.v1.GcRuleB\006\n\004ruleB\203\001\n\"com.google.big"
      "table.admin.table.v1B\026BigtableTableDataP"
      "rotoP\001ZCgoogle.golang.org/genproto/googl"
      "eapis/bigtable/admin/table/v1;tableb\006pro"
      "to3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 1163);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "google/bigtable/admin/table/v1/bigtable_table_data.proto", &protobuf_RegisterTypes);
  ::protobuf_google_2flongrunning_2foperations_2eproto::AddDescriptors();
  ::protobuf_google_2fprotobuf_2fduration_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_google_2fbigtable_2fadmin_2ftable_2fv1_2fbigtable_5ftable_5fdata_2eproto
namespace google {
namespace bigtable {
namespace admin {
namespace table {
namespace v1 {
const ::google::protobuf::EnumDescriptor* Table_TimestampGranularity_descriptor() {
  protobuf_google_2fbigtable_2fadmin_2ftable_2fv1_2fbigtable_5ftable_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fbigtable_2fadmin_2ftable_2fv1_2fbigtable_5ftable_5fdata_2eproto::file_level_enum_descriptors[0];
}
bool Table_TimestampGranularity_IsValid(int value) {
  switch (value) {
    case 0:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Table_TimestampGranularity Table::MILLIS;
const Table_TimestampGranularity Table::TimestampGranularity_MIN;
const Table_TimestampGranularity Table::TimestampGranularity_MAX;
const int Table::TimestampGranularity_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

Table_ColumnFamiliesEntry_DoNotUse::Table_ColumnFamiliesEntry_DoNotUse() {}
Table_ColumnFamiliesEntry_DoNotUse::Table_ColumnFamiliesEntry_DoNotUse(::google::protobuf::Arena* arena) : SuperType(arena) {}
void Table_ColumnFamiliesEntry_DoNotUse::MergeFrom(const Table_ColumnFamiliesEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::google::protobuf::Metadata Table_ColumnFamiliesEntry_DoNotUse::GetMetadata() const {
  ::protobuf_google_2fbigtable_2fadmin_2ftable_2fv1_2fbigtable_5ftable_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fbigtable_2fadmin_2ftable_2fv1_2fbigtable_5ftable_5fdata_2eproto::file_level_metadata[0];
}
void Table_ColumnFamiliesEntry_DoNotUse::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}


// ===================================================================

void Table::InitAsDefaultInstance() {
  ::google::bigtable::admin::table::v1::_Table_default_instance_._instance.get_mutable()->current_operation_ = const_cast< ::google::longrunning::Operation*>(
      ::google::longrunning::Operation::internal_default_instance());
}
void Table::clear_current_operation() {
  if (GetArenaNoVirtual() == NULL && current_operation_ != NULL) {
    delete current_operation_;
  }
  current_operation_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Table::kNameFieldNumber;
const int Table::kCurrentOperationFieldNumber;
const int Table::kColumnFamiliesFieldNumber;
const int Table::kGranularityFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Table::Table()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_google_2fbigtable_2fadmin_2ftable_2fv1_2fbigtable_5ftable_5fdata_2eproto::InitDefaultsTable();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.bigtable.admin.table.v1.Table)
}
Table::Table(const Table& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  column_families_.MergeFrom(from.column_families_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_current_operation()) {
    current_operation_ = new ::google::longrunning::Operation(*from.current_operation_);
  } else {
    current_operation_ = NULL;
  }
  granularity_ = from.granularity_;
  // @@protoc_insertion_point(copy_constructor:google.bigtable.admin.table.v1.Table)
}

void Table::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&current_operation_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&granularity_) -
      reinterpret_cast<char*>(&current_operation_)) + sizeof(granularity_));
  _cached_size_ = 0;
}

Table::~Table() {
  // @@protoc_insertion_point(destructor:google.bigtable.admin.table.v1.Table)
  SharedDtor();
}

void Table::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete current_operation_;
}

void Table::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Table::descriptor() {
  ::protobuf_google_2fbigtable_2fadmin_2ftable_2fv1_2fbigtable_5ftable_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fbigtable_2fadmin_2ftable_2fv1_2fbigtable_5ftable_5fdata_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Table& Table::default_instance() {
  ::protobuf_google_2fbigtable_2fadmin_2ftable_2fv1_2fbigtable_5ftable_5fdata_2eproto::InitDefaultsTable();
  return *internal_default_instance();
}

Table* Table::New(::google::protobuf::Arena* arena) const {
  Table* n = new Table;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Table::Clear() {
// @@protoc_insertion_point(message_clear_start:google.bigtable.admin.table.v1.Table)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  column_families_.Clear();
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && current_operation_ != NULL) {
    delete current_operation_;
  }
  current_operation_ = NULL;
  granularity_ = 0;
  _internal_metadata_.Clear();
}

bool Table::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.bigtable.admin.table.v1.Table)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.bigtable.admin.table.v1.Table.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.longrunning.Operation current_operation = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_current_operation()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, .google.bigtable.admin.table.v1.ColumnFamily> column_families = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          Table_ColumnFamiliesEntry_DoNotUse::Parser< ::google::protobuf::internal::MapField<
              Table_ColumnFamiliesEntry_DoNotUse,
              ::std::string, ::google::bigtable::admin::table::v1::ColumnFamily,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
              0 >,
            ::google::protobuf::Map< ::std::string, ::google::bigtable::admin::table::v1::ColumnFamily > > parser(&column_families_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.bigtable.admin.table.v1.Table.ColumnFamiliesEntry.key"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.bigtable.admin.table.v1.Table.TimestampGranularity granularity = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_granularity(static_cast< ::google::bigtable::admin::table::v1::Table_TimestampGranularity >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.bigtable.admin.table.v1.Table)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.bigtable.admin.table.v1.Table)
  return false;
#undef DO_
}

void Table::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.bigtable.admin.table.v1.Table)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.bigtable.admin.table.v1.Table.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // .google.longrunning.Operation current_operation = 2;
  if (this->has_current_operation()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->current_operation_, output);
  }

  // map<string, .google.bigtable.admin.table.v1.ColumnFamily> column_families = 3;
  if (!this->column_families().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::google::bigtable::admin::table::v1::ColumnFamily >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "google.bigtable.admin.table.v1.Table.ColumnFamiliesEntry.key");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->column_families().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->column_families().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::google::bigtable::admin::table::v1::ColumnFamily >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::google::bigtable::admin::table::v1::ColumnFamily >::const_iterator
          it = this->column_families().begin();
          it != this->column_families().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<Table_ColumnFamiliesEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(column_families_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            3, *entry, output);
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::google::protobuf::scoped_ptr<Table_ColumnFamiliesEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::google::bigtable::admin::table::v1::ColumnFamily >::const_iterator
          it = this->column_families().begin();
          it != this->column_families().end(); ++it) {
        entry.reset(column_families_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            3, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  // .google.bigtable.admin.table.v1.Table.TimestampGranularity granularity = 4;
  if (this->granularity() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->granularity(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:google.bigtable.admin.table.v1.Table)
}

::google::protobuf::uint8* Table::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.bigtable.admin.table.v1.Table)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.bigtable.admin.table.v1.Table.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // .google.longrunning.Operation current_operation = 2;
  if (this->has_current_operation()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, *this->current_operation_, deterministic, target);
  }

  // map<string, .google.bigtable.admin.table.v1.ColumnFamily> column_families = 3;
  if (!this->column_families().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::google::bigtable::admin::table::v1::ColumnFamily >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "google.bigtable.admin.table.v1.Table.ColumnFamiliesEntry.key");
      }
    };

    if (deterministic &&
        this->column_families().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->column_families().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::google::bigtable::admin::table::v1::ColumnFamily >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::google::bigtable::admin::table::v1::ColumnFamily >::const_iterator
          it = this->column_families().begin();
          it != this->column_families().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<Table_ColumnFamiliesEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(column_families_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       3, *entry, deterministic, target);
;
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::google::protobuf::scoped_ptr<Table_ColumnFamiliesEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::google::bigtable::admin::table::v1::ColumnFamily >::const_iterator
          it = this->column_families().begin();
          it != this->column_families().end(); ++it) {
        entry.reset(column_families_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       3, *entry, deterministic, target);
;
        Utf8Check::Check(&*it);
      }
    }
  }

  // .google.bigtable.admin.table.v1.Table.TimestampGranularity granularity = 4;
  if (this->granularity() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->granularity(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.bigtable.admin.table.v1.Table)
  return target;
}

size_t Table::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.bigtable.admin.table.v1.Table)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // map<string, .google.bigtable.admin.table.v1.ColumnFamily> column_families = 3;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->column_families_size());
  {
    ::google::protobuf::scoped_ptr<Table_ColumnFamiliesEntry_DoNotUse> entry;
    for (::google::protobuf::Map< ::std::string, ::google::bigtable::admin::table::v1::ColumnFamily >::const_iterator
        it = this->column_families().begin();
        it != this->column_families().end(); ++it) {
      entry.reset(column_families_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // .google.longrunning.Operation current_operation = 2;
  if (this->has_current_operation()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->current_operation_);
  }

  // .google.bigtable.admin.table.v1.Table.TimestampGranularity granularity = 4;
  if (this->granularity() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->granularity());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Table::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.bigtable.admin.table.v1.Table)
  GOOGLE_DCHECK_NE(&from, this);
  const Table* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Table>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.bigtable.admin.table.v1.Table)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.bigtable.admin.table.v1.Table)
    MergeFrom(*source);
  }
}

void Table::MergeFrom(const Table& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.bigtable.admin.table.v1.Table)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  column_families_.MergeFrom(from.column_families_);
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_current_operation()) {
    mutable_current_operation()->::google::longrunning::Operation::MergeFrom(from.current_operation());
  }
  if (from.granularity() != 0) {
    set_granularity(from.granularity());
  }
}

void Table::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.bigtable.admin.table.v1.Table)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Table::CopyFrom(const Table& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.bigtable.admin.table.v1.Table)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Table::IsInitialized() const {
  return true;
}

void Table::Swap(Table* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Table::InternalSwap(Table* other) {
  using std::swap;
  column_families_.Swap(&other->column_families_);
  name_.Swap(&other->name_);
  swap(current_operation_, other->current_operation_);
  swap(granularity_, other->granularity_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Table::GetMetadata() const {
  protobuf_google_2fbigtable_2fadmin_2ftable_2fv1_2fbigtable_5ftable_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fbigtable_2fadmin_2ftable_2fv1_2fbigtable_5ftable_5fdata_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ColumnFamily::InitAsDefaultInstance() {
  ::google::bigtable::admin::table::v1::_ColumnFamily_default_instance_._instance.get_mutable()->gc_rule_ = const_cast< ::google::bigtable::admin::table::v1::GcRule*>(
      ::google::bigtable::admin::table::v1::GcRule::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ColumnFamily::kNameFieldNumber;
const int ColumnFamily::kGcExpressionFieldNumber;
const int ColumnFamily::kGcRuleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ColumnFamily::ColumnFamily()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_google_2fbigtable_2fadmin_2ftable_2fv1_2fbigtable_5ftable_5fdata_2eproto::InitDefaultsColumnFamily();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.bigtable.admin.table.v1.ColumnFamily)
}
ColumnFamily::ColumnFamily(const ColumnFamily& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  gc_expression_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.gc_expression().size() > 0) {
    gc_expression_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.gc_expression_);
  }
  if (from.has_gc_rule()) {
    gc_rule_ = new ::google::bigtable::admin::table::v1::GcRule(*from.gc_rule_);
  } else {
    gc_rule_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:google.bigtable.admin.table.v1.ColumnFamily)
}

void ColumnFamily::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  gc_expression_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  gc_rule_ = NULL;
  _cached_size_ = 0;
}

ColumnFamily::~ColumnFamily() {
  // @@protoc_insertion_point(destructor:google.bigtable.admin.table.v1.ColumnFamily)
  SharedDtor();
}

void ColumnFamily::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  gc_expression_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete gc_rule_;
}

void ColumnFamily::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ColumnFamily::descriptor() {
  ::protobuf_google_2fbigtable_2fadmin_2ftable_2fv1_2fbigtable_5ftable_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fbigtable_2fadmin_2ftable_2fv1_2fbigtable_5ftable_5fdata_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ColumnFamily& ColumnFamily::default_instance() {
  ::protobuf_google_2fbigtable_2fadmin_2ftable_2fv1_2fbigtable_5ftable_5fdata_2eproto::InitDefaultsColumnFamily();
  return *internal_default_instance();
}

ColumnFamily* ColumnFamily::New(::google::protobuf::Arena* arena) const {
  ColumnFamily* n = new ColumnFamily;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ColumnFamily::Clear() {
// @@protoc_insertion_point(message_clear_start:google.bigtable.admin.table.v1.ColumnFamily)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  gc_expression_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && gc_rule_ != NULL) {
    delete gc_rule_;
  }
  gc_rule_ = NULL;
  _internal_metadata_.Clear();
}

bool ColumnFamily::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.bigtable.admin.table.v1.ColumnFamily)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.bigtable.admin.table.v1.ColumnFamily.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string gc_expression = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gc_expression()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->gc_expression().data(), static_cast<int>(this->gc_expression().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.bigtable.admin.table.v1.ColumnFamily.gc_expression"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.bigtable.admin.table.v1.GcRule gc_rule = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_gc_rule()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.bigtable.admin.table.v1.ColumnFamily)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.bigtable.admin.table.v1.ColumnFamily)
  return false;
#undef DO_
}

void ColumnFamily::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.bigtable.admin.table.v1.ColumnFamily)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.bigtable.admin.table.v1.ColumnFamily.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // string gc_expression = 2;
  if (this->gc_expression().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->gc_expression().data(), static_cast<int>(this->gc_expression().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.bigtable.admin.table.v1.ColumnFamily.gc_expression");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->gc_expression(), output);
  }

  // .google.bigtable.admin.table.v1.GcRule gc_rule = 3;
  if (this->has_gc_rule()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->gc_rule_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:google.bigtable.admin.table.v1.ColumnFamily)
}

::google::protobuf::uint8* ColumnFamily::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.bigtable.admin.table.v1.ColumnFamily)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.bigtable.admin.table.v1.ColumnFamily.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // string gc_expression = 2;
  if (this->gc_expression().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->gc_expression().data(), static_cast<int>(this->gc_expression().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.bigtable.admin.table.v1.ColumnFamily.gc_expression");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->gc_expression(), target);
  }

  // .google.bigtable.admin.table.v1.GcRule gc_rule = 3;
  if (this->has_gc_rule()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, *this->gc_rule_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.bigtable.admin.table.v1.ColumnFamily)
  return target;
}

size_t ColumnFamily::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.bigtable.admin.table.v1.ColumnFamily)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // string gc_expression = 2;
  if (this->gc_expression().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->gc_expression());
  }

  // .google.bigtable.admin.table.v1.GcRule gc_rule = 3;
  if (this->has_gc_rule()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->gc_rule_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ColumnFamily::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.bigtable.admin.table.v1.ColumnFamily)
  GOOGLE_DCHECK_NE(&from, this);
  const ColumnFamily* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ColumnFamily>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.bigtable.admin.table.v1.ColumnFamily)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.bigtable.admin.table.v1.ColumnFamily)
    MergeFrom(*source);
  }
}

void ColumnFamily::MergeFrom(const ColumnFamily& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.bigtable.admin.table.v1.ColumnFamily)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.gc_expression().size() > 0) {

    gc_expression_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.gc_expression_);
  }
  if (from.has_gc_rule()) {
    mutable_gc_rule()->::google::bigtable::admin::table::v1::GcRule::MergeFrom(from.gc_rule());
  }
}

void ColumnFamily::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.bigtable.admin.table.v1.ColumnFamily)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ColumnFamily::CopyFrom(const ColumnFamily& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.bigtable.admin.table.v1.ColumnFamily)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ColumnFamily::IsInitialized() const {
  return true;
}

void ColumnFamily::Swap(ColumnFamily* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ColumnFamily::InternalSwap(ColumnFamily* other) {
  using std::swap;
  name_.Swap(&other->name_);
  gc_expression_.Swap(&other->gc_expression_);
  swap(gc_rule_, other->gc_rule_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ColumnFamily::GetMetadata() const {
  protobuf_google_2fbigtable_2fadmin_2ftable_2fv1_2fbigtable_5ftable_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fbigtable_2fadmin_2ftable_2fv1_2fbigtable_5ftable_5fdata_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void GcRule_Intersection::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GcRule_Intersection::kRulesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GcRule_Intersection::GcRule_Intersection()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_google_2fbigtable_2fadmin_2ftable_2fv1_2fbigtable_5ftable_5fdata_2eproto::InitDefaultsGcRule();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.bigtable.admin.table.v1.GcRule.Intersection)
}
GcRule_Intersection::GcRule_Intersection(const GcRule_Intersection& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      rules_(from.rules_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:google.bigtable.admin.table.v1.GcRule.Intersection)
}

void GcRule_Intersection::SharedCtor() {
  _cached_size_ = 0;
}

GcRule_Intersection::~GcRule_Intersection() {
  // @@protoc_insertion_point(destructor:google.bigtable.admin.table.v1.GcRule.Intersection)
  SharedDtor();
}

void GcRule_Intersection::SharedDtor() {
}

void GcRule_Intersection::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GcRule_Intersection::descriptor() {
  ::protobuf_google_2fbigtable_2fadmin_2ftable_2fv1_2fbigtable_5ftable_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fbigtable_2fadmin_2ftable_2fv1_2fbigtable_5ftable_5fdata_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GcRule_Intersection& GcRule_Intersection::default_instance() {
  ::protobuf_google_2fbigtable_2fadmin_2ftable_2fv1_2fbigtable_5ftable_5fdata_2eproto::InitDefaultsGcRule();
  return *internal_default_instance();
}

GcRule_Intersection* GcRule_Intersection::New(::google::protobuf::Arena* arena) const {
  GcRule_Intersection* n = new GcRule_Intersection;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GcRule_Intersection::Clear() {
// @@protoc_insertion_point(message_clear_start:google.bigtable.admin.table.v1.GcRule.Intersection)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  rules_.Clear();
  _internal_metadata_.Clear();
}

bool GcRule_Intersection::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.bigtable.admin.table.v1.GcRule.Intersection)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .google.bigtable.admin.table.v1.GcRule rules = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_rules()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.bigtable.admin.table.v1.GcRule.Intersection)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.bigtable.admin.table.v1.GcRule.Intersection)
  return false;
#undef DO_
}

void GcRule_Intersection::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.bigtable.admin.table.v1.GcRule.Intersection)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .google.bigtable.admin.table.v1.GcRule rules = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->rules_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->rules(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:google.bigtable.admin.table.v1.GcRule.Intersection)
}

::google::protobuf::uint8* GcRule_Intersection::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.bigtable.admin.table.v1.GcRule.Intersection)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .google.bigtable.admin.table.v1.GcRule rules = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->rules_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->rules(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.bigtable.admin.table.v1.GcRule.Intersection)
  return target;
}

size_t GcRule_Intersection::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.bigtable.admin.table.v1.GcRule.Intersection)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .google.bigtable.admin.table.v1.GcRule rules = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->rules_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->rules(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GcRule_Intersection::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.bigtable.admin.table.v1.GcRule.Intersection)
  GOOGLE_DCHECK_NE(&from, this);
  const GcRule_Intersection* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GcRule_Intersection>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.bigtable.admin.table.v1.GcRule.Intersection)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.bigtable.admin.table.v1.GcRule.Intersection)
    MergeFrom(*source);
  }
}

void GcRule_Intersection::MergeFrom(const GcRule_Intersection& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.bigtable.admin.table.v1.GcRule.Intersection)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  rules_.MergeFrom(from.rules_);
}

void GcRule_Intersection::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.bigtable.admin.table.v1.GcRule.Intersection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GcRule_Intersection::CopyFrom(const GcRule_Intersection& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.bigtable.admin.table.v1.GcRule.Intersection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GcRule_Intersection::IsInitialized() const {
  return true;
}

void GcRule_Intersection::Swap(GcRule_Intersection* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GcRule_Intersection::InternalSwap(GcRule_Intersection* other) {
  using std::swap;
  rules_.InternalSwap(&other->rules_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GcRule_Intersection::GetMetadata() const {
  protobuf_google_2fbigtable_2fadmin_2ftable_2fv1_2fbigtable_5ftable_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fbigtable_2fadmin_2ftable_2fv1_2fbigtable_5ftable_5fdata_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void GcRule_Union::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GcRule_Union::kRulesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GcRule_Union::GcRule_Union()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_google_2fbigtable_2fadmin_2ftable_2fv1_2fbigtable_5ftable_5fdata_2eproto::InitDefaultsGcRule();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.bigtable.admin.table.v1.GcRule.Union)
}
GcRule_Union::GcRule_Union(const GcRule_Union& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      rules_(from.rules_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:google.bigtable.admin.table.v1.GcRule.Union)
}

void GcRule_Union::SharedCtor() {
  _cached_size_ = 0;
}

GcRule_Union::~GcRule_Union() {
  // @@protoc_insertion_point(destructor:google.bigtable.admin.table.v1.GcRule.Union)
  SharedDtor();
}

void GcRule_Union::SharedDtor() {
}

void GcRule_Union::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GcRule_Union::descriptor() {
  ::protobuf_google_2fbigtable_2fadmin_2ftable_2fv1_2fbigtable_5ftable_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fbigtable_2fadmin_2ftable_2fv1_2fbigtable_5ftable_5fdata_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GcRule_Union& GcRule_Union::default_instance() {
  ::protobuf_google_2fbigtable_2fadmin_2ftable_2fv1_2fbigtable_5ftable_5fdata_2eproto::InitDefaultsGcRule();
  return *internal_default_instance();
}

GcRule_Union* GcRule_Union::New(::google::protobuf::Arena* arena) const {
  GcRule_Union* n = new GcRule_Union;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GcRule_Union::Clear() {
// @@protoc_insertion_point(message_clear_start:google.bigtable.admin.table.v1.GcRule.Union)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  rules_.Clear();
  _internal_metadata_.Clear();
}

bool GcRule_Union::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.bigtable.admin.table.v1.GcRule.Union)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .google.bigtable.admin.table.v1.GcRule rules = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_rules()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.bigtable.admin.table.v1.GcRule.Union)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.bigtable.admin.table.v1.GcRule.Union)
  return false;
#undef DO_
}

void GcRule_Union::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.bigtable.admin.table.v1.GcRule.Union)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .google.bigtable.admin.table.v1.GcRule rules = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->rules_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->rules(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:google.bigtable.admin.table.v1.GcRule.Union)
}

::google::protobuf::uint8* GcRule_Union::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.bigtable.admin.table.v1.GcRule.Union)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .google.bigtable.admin.table.v1.GcRule rules = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->rules_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->rules(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.bigtable.admin.table.v1.GcRule.Union)
  return target;
}

size_t GcRule_Union::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.bigtable.admin.table.v1.GcRule.Union)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .google.bigtable.admin.table.v1.GcRule rules = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->rules_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->rules(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GcRule_Union::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.bigtable.admin.table.v1.GcRule.Union)
  GOOGLE_DCHECK_NE(&from, this);
  const GcRule_Union* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GcRule_Union>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.bigtable.admin.table.v1.GcRule.Union)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.bigtable.admin.table.v1.GcRule.Union)
    MergeFrom(*source);
  }
}

void GcRule_Union::MergeFrom(const GcRule_Union& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.bigtable.admin.table.v1.GcRule.Union)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  rules_.MergeFrom(from.rules_);
}

void GcRule_Union::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.bigtable.admin.table.v1.GcRule.Union)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GcRule_Union::CopyFrom(const GcRule_Union& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.bigtable.admin.table.v1.GcRule.Union)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GcRule_Union::IsInitialized() const {
  return true;
}

void GcRule_Union::Swap(GcRule_Union* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GcRule_Union::InternalSwap(GcRule_Union* other) {
  using std::swap;
  rules_.InternalSwap(&other->rules_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GcRule_Union::GetMetadata() const {
  protobuf_google_2fbigtable_2fadmin_2ftable_2fv1_2fbigtable_5ftable_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fbigtable_2fadmin_2ftable_2fv1_2fbigtable_5ftable_5fdata_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void GcRule::InitAsDefaultInstance() {
  ::google::bigtable::admin::table::v1::_GcRule_default_instance_.max_num_versions_ = 0;
  ::google::bigtable::admin::table::v1::_GcRule_default_instance_.max_age_ = const_cast< ::google::protobuf::Duration*>(
      ::google::protobuf::Duration::internal_default_instance());
  ::google::bigtable::admin::table::v1::_GcRule_default_instance_.intersection_ = const_cast< ::google::bigtable::admin::table::v1::GcRule_Intersection*>(
      ::google::bigtable::admin::table::v1::GcRule_Intersection::internal_default_instance());
  ::google::bigtable::admin::table::v1::_GcRule_default_instance_.union__ = const_cast< ::google::bigtable::admin::table::v1::GcRule_Union*>(
      ::google::bigtable::admin::table::v1::GcRule_Union::internal_default_instance());
}
void GcRule::set_allocated_max_age(::google::protobuf::Duration* max_age) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_rule();
  if (max_age) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast< ::google::protobuf::MessageLite*>(max_age)->GetArena();
    if (message_arena != submessage_arena) {
      max_age = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, max_age, submessage_arena);
    }
    set_has_max_age();
    rule_.max_age_ = max_age;
  }
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.admin.table.v1.GcRule.max_age)
}
void GcRule::clear_max_age() {
  if (has_max_age()) {
    delete rule_.max_age_;
    clear_has_rule();
  }
}
void GcRule::set_allocated_intersection(::google::bigtable::admin::table::v1::GcRule_Intersection* intersection) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_rule();
  if (intersection) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      intersection = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, intersection, submessage_arena);
    }
    set_has_intersection();
    rule_.intersection_ = intersection;
  }
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.admin.table.v1.GcRule.intersection)
}
void GcRule::set_allocated_union_(::google::bigtable::admin::table::v1::GcRule_Union* union_) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_rule();
  if (union_) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      union_ = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, union_, submessage_arena);
    }
    set_has_union_();
    rule_.union__ = union_;
  }
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.admin.table.v1.GcRule.union)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GcRule::kMaxNumVersionsFieldNumber;
const int GcRule::kMaxAgeFieldNumber;
const int GcRule::kIntersectionFieldNumber;
const int GcRule::kUnionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GcRule::GcRule()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_google_2fbigtable_2fadmin_2ftable_2fv1_2fbigtable_5ftable_5fdata_2eproto::InitDefaultsGcRule();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.bigtable.admin.table.v1.GcRule)
}
GcRule::GcRule(const GcRule& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_rule();
  switch (from.rule_case()) {
    case kMaxNumVersions: {
      set_max_num_versions(from.max_num_versions());
      break;
    }
    case kMaxAge: {
      mutable_max_age()->::google::protobuf::Duration::MergeFrom(from.max_age());
      break;
    }
    case kIntersection: {
      mutable_intersection()->::google::bigtable::admin::table::v1::GcRule_Intersection::MergeFrom(from.intersection());
      break;
    }
    case kUnion: {
      mutable_union_()->::google::bigtable::admin::table::v1::GcRule_Union::MergeFrom(from.union_());
      break;
    }
    case RULE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:google.bigtable.admin.table.v1.GcRule)
}

void GcRule::SharedCtor() {
  clear_has_rule();
  _cached_size_ = 0;
}

GcRule::~GcRule() {
  // @@protoc_insertion_point(destructor:google.bigtable.admin.table.v1.GcRule)
  SharedDtor();
}

void GcRule::SharedDtor() {
  if (has_rule()) {
    clear_rule();
  }
}

void GcRule::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GcRule::descriptor() {
  ::protobuf_google_2fbigtable_2fadmin_2ftable_2fv1_2fbigtable_5ftable_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fbigtable_2fadmin_2ftable_2fv1_2fbigtable_5ftable_5fdata_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GcRule& GcRule::default_instance() {
  ::protobuf_google_2fbigtable_2fadmin_2ftable_2fv1_2fbigtable_5ftable_5fdata_2eproto::InitDefaultsGcRule();
  return *internal_default_instance();
}

GcRule* GcRule::New(::google::protobuf::Arena* arena) const {
  GcRule* n = new GcRule;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GcRule::clear_rule() {
// @@protoc_insertion_point(one_of_clear_start:google.bigtable.admin.table.v1.GcRule)
  switch (rule_case()) {
    case kMaxNumVersions: {
      // No need to clear
      break;
    }
    case kMaxAge: {
      delete rule_.max_age_;
      break;
    }
    case kIntersection: {
      delete rule_.intersection_;
      break;
    }
    case kUnion: {
      delete rule_.union__;
      break;
    }
    case RULE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = RULE_NOT_SET;
}


void GcRule::Clear() {
// @@protoc_insertion_point(message_clear_start:google.bigtable.admin.table.v1.GcRule)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_rule();
  _internal_metadata_.Clear();
}

bool GcRule::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.bigtable.admin.table.v1.GcRule)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 max_num_versions = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          clear_rule();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rule_.max_num_versions_)));
          set_has_max_num_versions();
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Duration max_age = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_max_age()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.bigtable.admin.table.v1.GcRule.Intersection intersection = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_intersection()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.bigtable.admin.table.v1.GcRule.Union union = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_union_()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.bigtable.admin.table.v1.GcRule)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.bigtable.admin.table.v1.GcRule)
  return false;
#undef DO_
}

void GcRule::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.bigtable.admin.table.v1.GcRule)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 max_num_versions = 1;
  if (has_max_num_versions()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->max_num_versions(), output);
  }

  // .google.protobuf.Duration max_age = 2;
  if (has_max_age()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *rule_.max_age_, output);
  }

  // .google.bigtable.admin.table.v1.GcRule.Intersection intersection = 3;
  if (has_intersection()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *rule_.intersection_, output);
  }

  // .google.bigtable.admin.table.v1.GcRule.Union union = 4;
  if (has_union_()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *rule_.union__, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:google.bigtable.admin.table.v1.GcRule)
}

::google::protobuf::uint8* GcRule::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.bigtable.admin.table.v1.GcRule)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 max_num_versions = 1;
  if (has_max_num_versions()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->max_num_versions(), target);
  }

  // .google.protobuf.Duration max_age = 2;
  if (has_max_age()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, *rule_.max_age_, deterministic, target);
  }

  // .google.bigtable.admin.table.v1.GcRule.Intersection intersection = 3;
  if (has_intersection()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, *rule_.intersection_, deterministic, target);
  }

  // .google.bigtable.admin.table.v1.GcRule.Union union = 4;
  if (has_union_()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, *rule_.union__, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.bigtable.admin.table.v1.GcRule)
  return target;
}

size_t GcRule::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.bigtable.admin.table.v1.GcRule)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  switch (rule_case()) {
    // int32 max_num_versions = 1;
    case kMaxNumVersions: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_num_versions());
      break;
    }
    // .google.protobuf.Duration max_age = 2;
    case kMaxAge: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *rule_.max_age_);
      break;
    }
    // .google.bigtable.admin.table.v1.GcRule.Intersection intersection = 3;
    case kIntersection: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *rule_.intersection_);
      break;
    }
    // .google.bigtable.admin.table.v1.GcRule.Union union = 4;
    case kUnion: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *rule_.union__);
      break;
    }
    case RULE_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GcRule::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.bigtable.admin.table.v1.GcRule)
  GOOGLE_DCHECK_NE(&from, this);
  const GcRule* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GcRule>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.bigtable.admin.table.v1.GcRule)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.bigtable.admin.table.v1.GcRule)
    MergeFrom(*source);
  }
}

void GcRule::MergeFrom(const GcRule& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.bigtable.admin.table.v1.GcRule)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.rule_case()) {
    case kMaxNumVersions: {
      set_max_num_versions(from.max_num_versions());
      break;
    }
    case kMaxAge: {
      mutable_max_age()->::google::protobuf::Duration::MergeFrom(from.max_age());
      break;
    }
    case kIntersection: {
      mutable_intersection()->::google::bigtable::admin::table::v1::GcRule_Intersection::MergeFrom(from.intersection());
      break;
    }
    case kUnion: {
      mutable_union_()->::google::bigtable::admin::table::v1::GcRule_Union::MergeFrom(from.union_());
      break;
    }
    case RULE_NOT_SET: {
      break;
    }
  }
}

void GcRule::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.bigtable.admin.table.v1.GcRule)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GcRule::CopyFrom(const GcRule& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.bigtable.admin.table.v1.GcRule)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GcRule::IsInitialized() const {
  return true;
}

void GcRule::Swap(GcRule* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GcRule::InternalSwap(GcRule* other) {
  using std::swap;
  swap(rule_, other->rule_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GcRule::GetMetadata() const {
  protobuf_google_2fbigtable_2fadmin_2ftable_2fv1_2fbigtable_5ftable_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fbigtable_2fadmin_2ftable_2fv1_2fbigtable_5ftable_5fdata_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace table
}  // namespace admin
}  // namespace bigtable
}  // namespace google

// @@protoc_insertion_point(global_scope)
