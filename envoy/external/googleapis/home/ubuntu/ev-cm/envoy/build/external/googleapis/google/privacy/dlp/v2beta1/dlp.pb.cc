// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/privacy/dlp/v2beta1/dlp.proto

#include "google/privacy/dlp/v2beta1/dlp.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)
namespace google {
namespace privacy {
namespace dlp {
namespace v2beta1 {
class InspectConfig_InfoTypeLimitDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<InspectConfig_InfoTypeLimit>
      _instance;
} _InspectConfig_InfoTypeLimit_default_instance_;
class InspectConfigDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<InspectConfig>
      _instance;
} _InspectConfig_default_instance_;
class OperationConfigDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<OperationConfig>
      _instance;
} _OperationConfig_default_instance_;
class ContentItemDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ContentItem>
      _instance;
  ::google::protobuf::internal::ArenaStringPtr data_;
  ::google::protobuf::internal::ArenaStringPtr value_;
  const ::google::privacy::dlp::v2beta1::Table* table_;
} _ContentItem_default_instance_;
class Table_RowDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Table_Row>
      _instance;
} _Table_Row_default_instance_;
class TableDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Table>
      _instance;
} _Table_default_instance_;
class InspectResultDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<InspectResult>
      _instance;
} _InspectResult_default_instance_;
class FindingDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Finding>
      _instance;
} _Finding_default_instance_;
class LocationDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Location>
      _instance;
} _Location_default_instance_;
class TableLocationDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TableLocation>
      _instance;
} _TableLocation_default_instance_;
class RangeDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Range>
      _instance;
} _Range_default_instance_;
class ImageLocationDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ImageLocation>
      _instance;
} _ImageLocation_default_instance_;
class RedactContentRequest_ReplaceConfigDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RedactContentRequest_ReplaceConfig>
      _instance;
} _RedactContentRequest_ReplaceConfig_default_instance_;
class RedactContentRequest_ImageRedactionConfigDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RedactContentRequest_ImageRedactionConfig>
      _instance;
  const ::google::privacy::dlp::v2beta1::InfoType* info_type_;
  bool redact_all_text_;
} _RedactContentRequest_ImageRedactionConfig_default_instance_;
class RedactContentRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RedactContentRequest>
      _instance;
} _RedactContentRequest_default_instance_;
class ColorDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Color>
      _instance;
} _Color_default_instance_;
class RedactContentResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RedactContentResponse>
      _instance;
} _RedactContentResponse_default_instance_;
class DeidentifyContentRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DeidentifyContentRequest>
      _instance;
} _DeidentifyContentRequest_default_instance_;
class DeidentifyContentResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DeidentifyContentResponse>
      _instance;
} _DeidentifyContentResponse_default_instance_;
class InspectContentRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<InspectContentRequest>
      _instance;
} _InspectContentRequest_default_instance_;
class InspectContentResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<InspectContentResponse>
      _instance;
} _InspectContentResponse_default_instance_;
class CreateInspectOperationRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CreateInspectOperationRequest>
      _instance;
} _CreateInspectOperationRequest_default_instance_;
class OutputStorageConfigDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<OutputStorageConfig>
      _instance;
  const ::google::privacy::dlp::v2beta1::BigQueryTable* table_;
  const ::google::privacy::dlp::v2beta1::CloudStoragePath* storage_path_;
} _OutputStorageConfig_default_instance_;
class InfoTypeStatisticsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<InfoTypeStatistics>
      _instance;
} _InfoTypeStatistics_default_instance_;
class InspectOperationMetadataDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<InspectOperationMetadata>
      _instance;
} _InspectOperationMetadata_default_instance_;
class InspectOperationResultDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<InspectOperationResult>
      _instance;
} _InspectOperationResult_default_instance_;
class ListInspectFindingsRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ListInspectFindingsRequest>
      _instance;
} _ListInspectFindingsRequest_default_instance_;
class ListInspectFindingsResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ListInspectFindingsResponse>
      _instance;
} _ListInspectFindingsResponse_default_instance_;
class InfoTypeDescriptionDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<InfoTypeDescription>
      _instance;
} _InfoTypeDescription_default_instance_;
class ListInfoTypesRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ListInfoTypesRequest>
      _instance;
} _ListInfoTypesRequest_default_instance_;
class ListInfoTypesResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ListInfoTypesResponse>
      _instance;
} _ListInfoTypesResponse_default_instance_;
class CategoryDescriptionDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CategoryDescription>
      _instance;
} _CategoryDescription_default_instance_;
class ListRootCategoriesRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ListRootCategoriesRequest>
      _instance;
} _ListRootCategoriesRequest_default_instance_;
class ListRootCategoriesResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ListRootCategoriesResponse>
      _instance;
} _ListRootCategoriesResponse_default_instance_;
class AnalyzeDataSourceRiskRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AnalyzeDataSourceRiskRequest>
      _instance;
} _AnalyzeDataSourceRiskRequest_default_instance_;
class PrivacyMetric_NumericalStatsConfigDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PrivacyMetric_NumericalStatsConfig>
      _instance;
} _PrivacyMetric_NumericalStatsConfig_default_instance_;
class PrivacyMetric_CategoricalStatsConfigDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PrivacyMetric_CategoricalStatsConfig>
      _instance;
} _PrivacyMetric_CategoricalStatsConfig_default_instance_;
class PrivacyMetric_KAnonymityConfigDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PrivacyMetric_KAnonymityConfig>
      _instance;
} _PrivacyMetric_KAnonymityConfig_default_instance_;
class PrivacyMetric_LDiversityConfigDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PrivacyMetric_LDiversityConfig>
      _instance;
} _PrivacyMetric_LDiversityConfig_default_instance_;
class PrivacyMetricDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PrivacyMetric>
      _instance;
  const ::google::privacy::dlp::v2beta1::PrivacyMetric_NumericalStatsConfig* numerical_stats_config_;
  const ::google::privacy::dlp::v2beta1::PrivacyMetric_CategoricalStatsConfig* categorical_stats_config_;
  const ::google::privacy::dlp::v2beta1::PrivacyMetric_KAnonymityConfig* k_anonymity_config_;
  const ::google::privacy::dlp::v2beta1::PrivacyMetric_LDiversityConfig* l_diversity_config_;
} _PrivacyMetric_default_instance_;
class RiskAnalysisOperationMetadataDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RiskAnalysisOperationMetadata>
      _instance;
} _RiskAnalysisOperationMetadata_default_instance_;
class RiskAnalysisOperationResult_NumericalStatsResultDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RiskAnalysisOperationResult_NumericalStatsResult>
      _instance;
} _RiskAnalysisOperationResult_NumericalStatsResult_default_instance_;
class RiskAnalysisOperationResult_CategoricalStatsResult_CategoricalStatsHistogramBucketDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RiskAnalysisOperationResult_CategoricalStatsResult_CategoricalStatsHistogramBucket>
      _instance;
} _RiskAnalysisOperationResult_CategoricalStatsResult_CategoricalStatsHistogramBucket_default_instance_;
class RiskAnalysisOperationResult_CategoricalStatsResultDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RiskAnalysisOperationResult_CategoricalStatsResult>
      _instance;
} _RiskAnalysisOperationResult_CategoricalStatsResult_default_instance_;
class RiskAnalysisOperationResult_KAnonymityResult_KAnonymityEquivalenceClassDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RiskAnalysisOperationResult_KAnonymityResult_KAnonymityEquivalenceClass>
      _instance;
} _RiskAnalysisOperationResult_KAnonymityResult_KAnonymityEquivalenceClass_default_instance_;
class RiskAnalysisOperationResult_KAnonymityResult_KAnonymityHistogramBucketDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RiskAnalysisOperationResult_KAnonymityResult_KAnonymityHistogramBucket>
      _instance;
} _RiskAnalysisOperationResult_KAnonymityResult_KAnonymityHistogramBucket_default_instance_;
class RiskAnalysisOperationResult_KAnonymityResultDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RiskAnalysisOperationResult_KAnonymityResult>
      _instance;
} _RiskAnalysisOperationResult_KAnonymityResult_default_instance_;
class RiskAnalysisOperationResult_LDiversityResult_LDiversityEquivalenceClassDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RiskAnalysisOperationResult_LDiversityResult_LDiversityEquivalenceClass>
      _instance;
} _RiskAnalysisOperationResult_LDiversityResult_LDiversityEquivalenceClass_default_instance_;
class RiskAnalysisOperationResult_LDiversityResult_LDiversityHistogramBucketDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RiskAnalysisOperationResult_LDiversityResult_LDiversityHistogramBucket>
      _instance;
} _RiskAnalysisOperationResult_LDiversityResult_LDiversityHistogramBucket_default_instance_;
class RiskAnalysisOperationResult_LDiversityResultDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RiskAnalysisOperationResult_LDiversityResult>
      _instance;
} _RiskAnalysisOperationResult_LDiversityResult_default_instance_;
class RiskAnalysisOperationResultDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RiskAnalysisOperationResult>
      _instance;
  const ::google::privacy::dlp::v2beta1::RiskAnalysisOperationResult_NumericalStatsResult* numerical_stats_result_;
  const ::google::privacy::dlp::v2beta1::RiskAnalysisOperationResult_CategoricalStatsResult* categorical_stats_result_;
  const ::google::privacy::dlp::v2beta1::RiskAnalysisOperationResult_KAnonymityResult* k_anonymity_result_;
  const ::google::privacy::dlp::v2beta1::RiskAnalysisOperationResult_LDiversityResult* l_diversity_result_;
} _RiskAnalysisOperationResult_default_instance_;
class ValueFrequencyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ValueFrequency>
      _instance;
} _ValueFrequency_default_instance_;
class ValueDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Value>
      _instance;
  ::google::protobuf::int64 integer_value_;
  double float_value_;
  ::google::protobuf::internal::ArenaStringPtr string_value_;
  bool boolean_value_;
  const ::google::protobuf::Timestamp* timestamp_value_;
  const ::google::type::TimeOfDay* time_value_;
  const ::google::type::Date* date_value_;
} _Value_default_instance_;
class DeidentifyConfigDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DeidentifyConfig>
      _instance;
  const ::google::privacy::dlp::v2beta1::InfoTypeTransformations* info_type_transformations_;
  const ::google::privacy::dlp::v2beta1::RecordTransformations* record_transformations_;
} _DeidentifyConfig_default_instance_;
class PrimitiveTransformationDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PrimitiveTransformation>
      _instance;
  const ::google::privacy::dlp::v2beta1::ReplaceValueConfig* replace_config_;
  const ::google::privacy::dlp::v2beta1::RedactConfig* redact_config_;
  const ::google::privacy::dlp::v2beta1::CharacterMaskConfig* character_mask_config_;
  const ::google::privacy::dlp::v2beta1::CryptoReplaceFfxFpeConfig* crypto_replace_ffx_fpe_config_;
  const ::google::privacy::dlp::v2beta1::FixedSizeBucketingConfig* fixed_size_bucketing_config_;
  const ::google::privacy::dlp::v2beta1::BucketingConfig* bucketing_config_;
  const ::google::privacy::dlp::v2beta1::ReplaceWithInfoTypeConfig* replace_with_info_type_config_;
  const ::google::privacy::dlp::v2beta1::TimePartConfig* time_part_config_;
  const ::google::privacy::dlp::v2beta1::CryptoHashConfig* crypto_hash_config_;
} _PrimitiveTransformation_default_instance_;
class TimePartConfigDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TimePartConfig>
      _instance;
} _TimePartConfig_default_instance_;
class CryptoHashConfigDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CryptoHashConfig>
      _instance;
} _CryptoHashConfig_default_instance_;
class ReplaceValueConfigDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ReplaceValueConfig>
      _instance;
} _ReplaceValueConfig_default_instance_;
class ReplaceWithInfoTypeConfigDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ReplaceWithInfoTypeConfig>
      _instance;
} _ReplaceWithInfoTypeConfig_default_instance_;
class RedactConfigDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RedactConfig>
      _instance;
} _RedactConfig_default_instance_;
class CharsToIgnoreDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CharsToIgnore>
      _instance;
  ::google::protobuf::internal::ArenaStringPtr characters_to_skip_;
  int common_characters_to_ignore_;
} _CharsToIgnore_default_instance_;
class CharacterMaskConfigDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CharacterMaskConfig>
      _instance;
} _CharacterMaskConfig_default_instance_;
class FixedSizeBucketingConfigDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<FixedSizeBucketingConfig>
      _instance;
} _FixedSizeBucketingConfig_default_instance_;
class BucketingConfig_BucketDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<BucketingConfig_Bucket>
      _instance;
} _BucketingConfig_Bucket_default_instance_;
class BucketingConfigDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<BucketingConfig>
      _instance;
} _BucketingConfig_default_instance_;
class CryptoReplaceFfxFpeConfigDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CryptoReplaceFfxFpeConfig>
      _instance;
  int common_alphabet_;
  ::google::protobuf::internal::ArenaStringPtr custom_alphabet_;
  ::google::protobuf::int32 radix_;
} _CryptoReplaceFfxFpeConfig_default_instance_;
class CryptoKeyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CryptoKey>
      _instance;
  const ::google::privacy::dlp::v2beta1::TransientCryptoKey* transient_;
  const ::google::privacy::dlp::v2beta1::UnwrappedCryptoKey* unwrapped_;
  const ::google::privacy::dlp::v2beta1::KmsWrappedCryptoKey* kms_wrapped_;
} _CryptoKey_default_instance_;
class TransientCryptoKeyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TransientCryptoKey>
      _instance;
} _TransientCryptoKey_default_instance_;
class UnwrappedCryptoKeyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<UnwrappedCryptoKey>
      _instance;
} _UnwrappedCryptoKey_default_instance_;
class KmsWrappedCryptoKeyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<KmsWrappedCryptoKey>
      _instance;
} _KmsWrappedCryptoKey_default_instance_;
class InfoTypeTransformations_InfoTypeTransformationDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<InfoTypeTransformations_InfoTypeTransformation>
      _instance;
} _InfoTypeTransformations_InfoTypeTransformation_default_instance_;
class InfoTypeTransformationsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<InfoTypeTransformations>
      _instance;
} _InfoTypeTransformations_default_instance_;
class FieldTransformationDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<FieldTransformation>
      _instance;
  const ::google::privacy::dlp::v2beta1::PrimitiveTransformation* primitive_transformation_;
  const ::google::privacy::dlp::v2beta1::InfoTypeTransformations* info_type_transformations_;
} _FieldTransformation_default_instance_;
class RecordTransformationsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RecordTransformations>
      _instance;
} _RecordTransformations_default_instance_;
class RecordSuppressionDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RecordSuppression>
      _instance;
} _RecordSuppression_default_instance_;
class RecordCondition_ConditionDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RecordCondition_Condition>
      _instance;
} _RecordCondition_Condition_default_instance_;
class RecordCondition_ConditionsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RecordCondition_Conditions>
      _instance;
} _RecordCondition_Conditions_default_instance_;
class RecordCondition_ExpressionsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RecordCondition_Expressions>
      _instance;
  const ::google::privacy::dlp::v2beta1::RecordCondition_Conditions* conditions_;
} _RecordCondition_Expressions_default_instance_;
class RecordConditionDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RecordCondition>
      _instance;
} _RecordCondition_default_instance_;
class DeidentificationSummaryDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DeidentificationSummary>
      _instance;
} _DeidentificationSummary_default_instance_;
class TransformationSummary_SummaryResultDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TransformationSummary_SummaryResult>
      _instance;
} _TransformationSummary_SummaryResult_default_instance_;
class TransformationSummaryDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TransformationSummary>
      _instance;
} _TransformationSummary_default_instance_;
}  // namespace v2beta1
}  // namespace dlp
}  // namespace privacy
}  // namespace google
namespace protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto {
void InitDefaultsInspectConfig_InfoTypeLimitImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fstorage_2eproto::InitDefaultsInfoType();
  {
    void* ptr = &::google::privacy::dlp::v2beta1::_InspectConfig_InfoTypeLimit_default_instance_;
    new (ptr) ::google::privacy::dlp::v2beta1::InspectConfig_InfoTypeLimit();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::privacy::dlp::v2beta1::InspectConfig_InfoTypeLimit::InitAsDefaultInstance();
}

void InitDefaultsInspectConfig_InfoTypeLimit() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsInspectConfig_InfoTypeLimitImpl);
}

void InitDefaultsInspectConfigImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fstorage_2eproto::InitDefaultsInfoType();
  protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaultsInspectConfig_InfoTypeLimit();
  {
    void* ptr = &::google::privacy::dlp::v2beta1::_InspectConfig_default_instance_;
    new (ptr) ::google::privacy::dlp::v2beta1::InspectConfig();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::privacy::dlp::v2beta1::InspectConfig::InitAsDefaultInstance();
}

void InitDefaultsInspectConfig() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsInspectConfigImpl);
}

void InitDefaultsOperationConfigImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::google::privacy::dlp::v2beta1::_OperationConfig_default_instance_;
    new (ptr) ::google::privacy::dlp::v2beta1::OperationConfig();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::privacy::dlp::v2beta1::OperationConfig::InitAsDefaultInstance();
}

void InitDefaultsOperationConfig() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsOperationConfigImpl);
}

void InitDefaultsContentItemImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaultsTable();
  {
    void* ptr = &::google::privacy::dlp::v2beta1::_ContentItem_default_instance_;
    new (ptr) ::google::privacy::dlp::v2beta1::ContentItem();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::privacy::dlp::v2beta1::ContentItem::InitAsDefaultInstance();
}

void InitDefaultsContentItem() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsContentItemImpl);
}

void InitDefaultsTable_RowImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaultsValue();
  {
    void* ptr = &::google::privacy::dlp::v2beta1::_Table_Row_default_instance_;
    new (ptr) ::google::privacy::dlp::v2beta1::Table_Row();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::privacy::dlp::v2beta1::Table_Row::InitAsDefaultInstance();
}

void InitDefaultsTable_Row() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsTable_RowImpl);
}

void InitDefaultsTableImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fstorage_2eproto::InitDefaultsFieldId();
  protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaultsTable_Row();
  {
    void* ptr = &::google::privacy::dlp::v2beta1::_Table_default_instance_;
    new (ptr) ::google::privacy::dlp::v2beta1::Table();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::privacy::dlp::v2beta1::Table::InitAsDefaultInstance();
}

void InitDefaultsTable() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsTableImpl);
}

void InitDefaultsInspectResultImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaultsFinding();
  {
    void* ptr = &::google::privacy::dlp::v2beta1::_InspectResult_default_instance_;
    new (ptr) ::google::privacy::dlp::v2beta1::InspectResult();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::privacy::dlp::v2beta1::InspectResult::InitAsDefaultInstance();
}

void InitDefaultsInspectResult() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsInspectResultImpl);
}

void InitDefaultsFindingImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fstorage_2eproto::InitDefaultsInfoType();
  protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaultsLocation();
  protobuf_google_2fprotobuf_2ftimestamp_2eproto::InitDefaultsTimestamp();
  {
    void* ptr = &::google::privacy::dlp::v2beta1::_Finding_default_instance_;
    new (ptr) ::google::privacy::dlp::v2beta1::Finding();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::privacy::dlp::v2beta1::Finding::InitAsDefaultInstance();
}

void InitDefaultsFinding() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsFindingImpl);
}

void InitDefaultsLocationImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaultsRange();
  protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaultsImageLocation();
  protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fstorage_2eproto::InitDefaultsRecordKey();
  protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fstorage_2eproto::InitDefaultsFieldId();
  protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaultsTableLocation();
  {
    void* ptr = &::google::privacy::dlp::v2beta1::_Location_default_instance_;
    new (ptr) ::google::privacy::dlp::v2beta1::Location();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::privacy::dlp::v2beta1::Location::InitAsDefaultInstance();
}

void InitDefaultsLocation() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsLocationImpl);
}

void InitDefaultsTableLocationImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::google::privacy::dlp::v2beta1::_TableLocation_default_instance_;
    new (ptr) ::google::privacy::dlp::v2beta1::TableLocation();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::privacy::dlp::v2beta1::TableLocation::InitAsDefaultInstance();
}

void InitDefaultsTableLocation() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsTableLocationImpl);
}

void InitDefaultsRangeImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::google::privacy::dlp::v2beta1::_Range_default_instance_;
    new (ptr) ::google::privacy::dlp::v2beta1::Range();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::privacy::dlp::v2beta1::Range::InitAsDefaultInstance();
}

void InitDefaultsRange() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsRangeImpl);
}

void InitDefaultsImageLocationImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::google::privacy::dlp::v2beta1::_ImageLocation_default_instance_;
    new (ptr) ::google::privacy::dlp::v2beta1::ImageLocation();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::privacy::dlp::v2beta1::ImageLocation::InitAsDefaultInstance();
}

void InitDefaultsImageLocation() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsImageLocationImpl);
}

void InitDefaultsRedactContentRequest_ReplaceConfigImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fstorage_2eproto::InitDefaultsInfoType();
  {
    void* ptr = &::google::privacy::dlp::v2beta1::_RedactContentRequest_ReplaceConfig_default_instance_;
    new (ptr) ::google::privacy::dlp::v2beta1::RedactContentRequest_ReplaceConfig();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::privacy::dlp::v2beta1::RedactContentRequest_ReplaceConfig::InitAsDefaultInstance();
}

void InitDefaultsRedactContentRequest_ReplaceConfig() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsRedactContentRequest_ReplaceConfigImpl);
}

void InitDefaultsRedactContentRequest_ImageRedactionConfigImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fstorage_2eproto::InitDefaultsInfoType();
  protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaultsColor();
  {
    void* ptr = &::google::privacy::dlp::v2beta1::_RedactContentRequest_ImageRedactionConfig_default_instance_;
    new (ptr) ::google::privacy::dlp::v2beta1::RedactContentRequest_ImageRedactionConfig();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::privacy::dlp::v2beta1::RedactContentRequest_ImageRedactionConfig::InitAsDefaultInstance();
}

void InitDefaultsRedactContentRequest_ImageRedactionConfig() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsRedactContentRequest_ImageRedactionConfigImpl);
}

void InitDefaultsRedactContentRequestImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaultsInspectConfig();
  protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaultsContentItem();
  protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaultsRedactContentRequest_ReplaceConfig();
  protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaultsRedactContentRequest_ImageRedactionConfig();
  {
    void* ptr = &::google::privacy::dlp::v2beta1::_RedactContentRequest_default_instance_;
    new (ptr) ::google::privacy::dlp::v2beta1::RedactContentRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::privacy::dlp::v2beta1::RedactContentRequest::InitAsDefaultInstance();
}

void InitDefaultsRedactContentRequest() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsRedactContentRequestImpl);
}

void InitDefaultsColorImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::google::privacy::dlp::v2beta1::_Color_default_instance_;
    new (ptr) ::google::privacy::dlp::v2beta1::Color();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::privacy::dlp::v2beta1::Color::InitAsDefaultInstance();
}

void InitDefaultsColor() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsColorImpl);
}

void InitDefaultsRedactContentResponseImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaultsContentItem();
  {
    void* ptr = &::google::privacy::dlp::v2beta1::_RedactContentResponse_default_instance_;
    new (ptr) ::google::privacy::dlp::v2beta1::RedactContentResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::privacy::dlp::v2beta1::RedactContentResponse::InitAsDefaultInstance();
}

void InitDefaultsRedactContentResponse() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsRedactContentResponseImpl);
}

void InitDefaultsDeidentifyContentRequestImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaultsDeidentifyConfig();
  protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaultsInspectConfig();
  protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaultsContentItem();
  {
    void* ptr = &::google::privacy::dlp::v2beta1::_DeidentifyContentRequest_default_instance_;
    new (ptr) ::google::privacy::dlp::v2beta1::DeidentifyContentRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::privacy::dlp::v2beta1::DeidentifyContentRequest::InitAsDefaultInstance();
}

void InitDefaultsDeidentifyContentRequest() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsDeidentifyContentRequestImpl);
}

void InitDefaultsDeidentifyContentResponseImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaultsContentItem();
  protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaultsDeidentificationSummary();
  {
    void* ptr = &::google::privacy::dlp::v2beta1::_DeidentifyContentResponse_default_instance_;
    new (ptr) ::google::privacy::dlp::v2beta1::DeidentifyContentResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::privacy::dlp::v2beta1::DeidentifyContentResponse::InitAsDefaultInstance();
}

void InitDefaultsDeidentifyContentResponse() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsDeidentifyContentResponseImpl);
}

void InitDefaultsInspectContentRequestImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaultsInspectConfig();
  protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaultsContentItem();
  {
    void* ptr = &::google::privacy::dlp::v2beta1::_InspectContentRequest_default_instance_;
    new (ptr) ::google::privacy::dlp::v2beta1::InspectContentRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::privacy::dlp::v2beta1::InspectContentRequest::InitAsDefaultInstance();
}

void InitDefaultsInspectContentRequest() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsInspectContentRequestImpl);
}

void InitDefaultsInspectContentResponseImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaultsInspectResult();
  {
    void* ptr = &::google::privacy::dlp::v2beta1::_InspectContentResponse_default_instance_;
    new (ptr) ::google::privacy::dlp::v2beta1::InspectContentResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::privacy::dlp::v2beta1::InspectContentResponse::InitAsDefaultInstance();
}

void InitDefaultsInspectContentResponse() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsInspectContentResponseImpl);
}

void InitDefaultsCreateInspectOperationRequestImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaultsInspectConfig();
  protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fstorage_2eproto::InitDefaultsStorageConfig();
  protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaultsOutputStorageConfig();
  protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaultsOperationConfig();
  {
    void* ptr = &::google::privacy::dlp::v2beta1::_CreateInspectOperationRequest_default_instance_;
    new (ptr) ::google::privacy::dlp::v2beta1::CreateInspectOperationRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::privacy::dlp::v2beta1::CreateInspectOperationRequest::InitAsDefaultInstance();
}

void InitDefaultsCreateInspectOperationRequest() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsCreateInspectOperationRequestImpl);
}

void InitDefaultsOutputStorageConfigImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fstorage_2eproto::InitDefaultsBigQueryTable();
  protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fstorage_2eproto::InitDefaultsCloudStoragePath();
  {
    void* ptr = &::google::privacy::dlp::v2beta1::_OutputStorageConfig_default_instance_;
    new (ptr) ::google::privacy::dlp::v2beta1::OutputStorageConfig();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::privacy::dlp::v2beta1::OutputStorageConfig::InitAsDefaultInstance();
}

void InitDefaultsOutputStorageConfig() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsOutputStorageConfigImpl);
}

void InitDefaultsInfoTypeStatisticsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fstorage_2eproto::InitDefaultsInfoType();
  {
    void* ptr = &::google::privacy::dlp::v2beta1::_InfoTypeStatistics_default_instance_;
    new (ptr) ::google::privacy::dlp::v2beta1::InfoTypeStatistics();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::privacy::dlp::v2beta1::InfoTypeStatistics::InitAsDefaultInstance();
}

void InitDefaultsInfoTypeStatistics() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsInfoTypeStatisticsImpl);
}

void InitDefaultsInspectOperationMetadataImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaultsInfoTypeStatistics();
  protobuf_google_2fprotobuf_2ftimestamp_2eproto::InitDefaultsTimestamp();
  protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaultsInspectConfig();
  protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fstorage_2eproto::InitDefaultsStorageConfig();
  protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaultsOutputStorageConfig();
  {
    void* ptr = &::google::privacy::dlp::v2beta1::_InspectOperationMetadata_default_instance_;
    new (ptr) ::google::privacy::dlp::v2beta1::InspectOperationMetadata();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::privacy::dlp::v2beta1::InspectOperationMetadata::InitAsDefaultInstance();
}

void InitDefaultsInspectOperationMetadata() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsInspectOperationMetadataImpl);
}

void InitDefaultsInspectOperationResultImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::google::privacy::dlp::v2beta1::_InspectOperationResult_default_instance_;
    new (ptr) ::google::privacy::dlp::v2beta1::InspectOperationResult();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::privacy::dlp::v2beta1::InspectOperationResult::InitAsDefaultInstance();
}

void InitDefaultsInspectOperationResult() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsInspectOperationResultImpl);
}

void InitDefaultsListInspectFindingsRequestImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::google::privacy::dlp::v2beta1::_ListInspectFindingsRequest_default_instance_;
    new (ptr) ::google::privacy::dlp::v2beta1::ListInspectFindingsRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::privacy::dlp::v2beta1::ListInspectFindingsRequest::InitAsDefaultInstance();
}

void InitDefaultsListInspectFindingsRequest() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsListInspectFindingsRequestImpl);
}

void InitDefaultsListInspectFindingsResponseImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaultsInspectResult();
  {
    void* ptr = &::google::privacy::dlp::v2beta1::_ListInspectFindingsResponse_default_instance_;
    new (ptr) ::google::privacy::dlp::v2beta1::ListInspectFindingsResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::privacy::dlp::v2beta1::ListInspectFindingsResponse::InitAsDefaultInstance();
}

void InitDefaultsListInspectFindingsResponse() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsListInspectFindingsResponseImpl);
}

void InitDefaultsInfoTypeDescriptionImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaultsCategoryDescription();
  {
    void* ptr = &::google::privacy::dlp::v2beta1::_InfoTypeDescription_default_instance_;
    new (ptr) ::google::privacy::dlp::v2beta1::InfoTypeDescription();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::privacy::dlp::v2beta1::InfoTypeDescription::InitAsDefaultInstance();
}

void InitDefaultsInfoTypeDescription() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsInfoTypeDescriptionImpl);
}

void InitDefaultsListInfoTypesRequestImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::google::privacy::dlp::v2beta1::_ListInfoTypesRequest_default_instance_;
    new (ptr) ::google::privacy::dlp::v2beta1::ListInfoTypesRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::privacy::dlp::v2beta1::ListInfoTypesRequest::InitAsDefaultInstance();
}

void InitDefaultsListInfoTypesRequest() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsListInfoTypesRequestImpl);
}

void InitDefaultsListInfoTypesResponseImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaultsInfoTypeDescription();
  {
    void* ptr = &::google::privacy::dlp::v2beta1::_ListInfoTypesResponse_default_instance_;
    new (ptr) ::google::privacy::dlp::v2beta1::ListInfoTypesResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::privacy::dlp::v2beta1::ListInfoTypesResponse::InitAsDefaultInstance();
}

void InitDefaultsListInfoTypesResponse() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsListInfoTypesResponseImpl);
}

void InitDefaultsCategoryDescriptionImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::google::privacy::dlp::v2beta1::_CategoryDescription_default_instance_;
    new (ptr) ::google::privacy::dlp::v2beta1::CategoryDescription();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::privacy::dlp::v2beta1::CategoryDescription::InitAsDefaultInstance();
}

void InitDefaultsCategoryDescription() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsCategoryDescriptionImpl);
}

void InitDefaultsListRootCategoriesRequestImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::google::privacy::dlp::v2beta1::_ListRootCategoriesRequest_default_instance_;
    new (ptr) ::google::privacy::dlp::v2beta1::ListRootCategoriesRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::privacy::dlp::v2beta1::ListRootCategoriesRequest::InitAsDefaultInstance();
}

void InitDefaultsListRootCategoriesRequest() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsListRootCategoriesRequestImpl);
}

void InitDefaultsListRootCategoriesResponseImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaultsCategoryDescription();
  {
    void* ptr = &::google::privacy::dlp::v2beta1::_ListRootCategoriesResponse_default_instance_;
    new (ptr) ::google::privacy::dlp::v2beta1::ListRootCategoriesResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::privacy::dlp::v2beta1::ListRootCategoriesResponse::InitAsDefaultInstance();
}

void InitDefaultsListRootCategoriesResponse() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsListRootCategoriesResponseImpl);
}

void InitDefaultsAnalyzeDataSourceRiskRequestImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaultsPrivacyMetric();
  protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fstorage_2eproto::InitDefaultsBigQueryTable();
  {
    void* ptr = &::google::privacy::dlp::v2beta1::_AnalyzeDataSourceRiskRequest_default_instance_;
    new (ptr) ::google::privacy::dlp::v2beta1::AnalyzeDataSourceRiskRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::privacy::dlp::v2beta1::AnalyzeDataSourceRiskRequest::InitAsDefaultInstance();
}

void InitDefaultsAnalyzeDataSourceRiskRequest() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsAnalyzeDataSourceRiskRequestImpl);
}

void InitDefaultsPrivacyMetric_NumericalStatsConfigImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fstorage_2eproto::InitDefaultsFieldId();
  {
    void* ptr = &::google::privacy::dlp::v2beta1::_PrivacyMetric_NumericalStatsConfig_default_instance_;
    new (ptr) ::google::privacy::dlp::v2beta1::PrivacyMetric_NumericalStatsConfig();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::privacy::dlp::v2beta1::PrivacyMetric_NumericalStatsConfig::InitAsDefaultInstance();
}

void InitDefaultsPrivacyMetric_NumericalStatsConfig() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsPrivacyMetric_NumericalStatsConfigImpl);
}

void InitDefaultsPrivacyMetric_CategoricalStatsConfigImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fstorage_2eproto::InitDefaultsFieldId();
  {
    void* ptr = &::google::privacy::dlp::v2beta1::_PrivacyMetric_CategoricalStatsConfig_default_instance_;
    new (ptr) ::google::privacy::dlp::v2beta1::PrivacyMetric_CategoricalStatsConfig();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::privacy::dlp::v2beta1::PrivacyMetric_CategoricalStatsConfig::InitAsDefaultInstance();
}

void InitDefaultsPrivacyMetric_CategoricalStatsConfig() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsPrivacyMetric_CategoricalStatsConfigImpl);
}

void InitDefaultsPrivacyMetric_KAnonymityConfigImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fstorage_2eproto::InitDefaultsFieldId();
  protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fstorage_2eproto::InitDefaultsEntityId();
  {
    void* ptr = &::google::privacy::dlp::v2beta1::_PrivacyMetric_KAnonymityConfig_default_instance_;
    new (ptr) ::google::privacy::dlp::v2beta1::PrivacyMetric_KAnonymityConfig();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::privacy::dlp::v2beta1::PrivacyMetric_KAnonymityConfig::InitAsDefaultInstance();
}

void InitDefaultsPrivacyMetric_KAnonymityConfig() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsPrivacyMetric_KAnonymityConfigImpl);
}

void InitDefaultsPrivacyMetric_LDiversityConfigImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fstorage_2eproto::InitDefaultsFieldId();
  {
    void* ptr = &::google::privacy::dlp::v2beta1::_PrivacyMetric_LDiversityConfig_default_instance_;
    new (ptr) ::google::privacy::dlp::v2beta1::PrivacyMetric_LDiversityConfig();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::privacy::dlp::v2beta1::PrivacyMetric_LDiversityConfig::InitAsDefaultInstance();
}

void InitDefaultsPrivacyMetric_LDiversityConfig() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsPrivacyMetric_LDiversityConfigImpl);
}

void InitDefaultsPrivacyMetricImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaultsPrivacyMetric_NumericalStatsConfig();
  protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaultsPrivacyMetric_CategoricalStatsConfig();
  protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaultsPrivacyMetric_KAnonymityConfig();
  protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaultsPrivacyMetric_LDiversityConfig();
  {
    void* ptr = &::google::privacy::dlp::v2beta1::_PrivacyMetric_default_instance_;
    new (ptr) ::google::privacy::dlp::v2beta1::PrivacyMetric();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::privacy::dlp::v2beta1::PrivacyMetric::InitAsDefaultInstance();
}

void InitDefaultsPrivacyMetric() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsPrivacyMetricImpl);
}

void InitDefaultsRiskAnalysisOperationMetadataImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_google_2fprotobuf_2ftimestamp_2eproto::InitDefaultsTimestamp();
  protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaultsPrivacyMetric();
  protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fstorage_2eproto::InitDefaultsBigQueryTable();
  {
    void* ptr = &::google::privacy::dlp::v2beta1::_RiskAnalysisOperationMetadata_default_instance_;
    new (ptr) ::google::privacy::dlp::v2beta1::RiskAnalysisOperationMetadata();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::privacy::dlp::v2beta1::RiskAnalysisOperationMetadata::InitAsDefaultInstance();
}

void InitDefaultsRiskAnalysisOperationMetadata() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsRiskAnalysisOperationMetadataImpl);
}

void InitDefaultsRiskAnalysisOperationResult_NumericalStatsResultImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaultsValue();
  {
    void* ptr = &::google::privacy::dlp::v2beta1::_RiskAnalysisOperationResult_NumericalStatsResult_default_instance_;
    new (ptr) ::google::privacy::dlp::v2beta1::RiskAnalysisOperationResult_NumericalStatsResult();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::privacy::dlp::v2beta1::RiskAnalysisOperationResult_NumericalStatsResult::InitAsDefaultInstance();
}

void InitDefaultsRiskAnalysisOperationResult_NumericalStatsResult() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsRiskAnalysisOperationResult_NumericalStatsResultImpl);
}

void InitDefaultsRiskAnalysisOperationResult_CategoricalStatsResult_CategoricalStatsHistogramBucketImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaultsValueFrequency();
  {
    void* ptr = &::google::privacy::dlp::v2beta1::_RiskAnalysisOperationResult_CategoricalStatsResult_CategoricalStatsHistogramBucket_default_instance_;
    new (ptr) ::google::privacy::dlp::v2beta1::RiskAnalysisOperationResult_CategoricalStatsResult_CategoricalStatsHistogramBucket();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::privacy::dlp::v2beta1::RiskAnalysisOperationResult_CategoricalStatsResult_CategoricalStatsHistogramBucket::InitAsDefaultInstance();
}

void InitDefaultsRiskAnalysisOperationResult_CategoricalStatsResult_CategoricalStatsHistogramBucket() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsRiskAnalysisOperationResult_CategoricalStatsResult_CategoricalStatsHistogramBucketImpl);
}

void InitDefaultsRiskAnalysisOperationResult_CategoricalStatsResultImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaultsRiskAnalysisOperationResult_CategoricalStatsResult_CategoricalStatsHistogramBucket();
  {
    void* ptr = &::google::privacy::dlp::v2beta1::_RiskAnalysisOperationResult_CategoricalStatsResult_default_instance_;
    new (ptr) ::google::privacy::dlp::v2beta1::RiskAnalysisOperationResult_CategoricalStatsResult();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::privacy::dlp::v2beta1::RiskAnalysisOperationResult_CategoricalStatsResult::InitAsDefaultInstance();
}

void InitDefaultsRiskAnalysisOperationResult_CategoricalStatsResult() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsRiskAnalysisOperationResult_CategoricalStatsResultImpl);
}

void InitDefaultsRiskAnalysisOperationResult_KAnonymityResult_KAnonymityEquivalenceClassImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaultsValue();
  {
    void* ptr = &::google::privacy::dlp::v2beta1::_RiskAnalysisOperationResult_KAnonymityResult_KAnonymityEquivalenceClass_default_instance_;
    new (ptr) ::google::privacy::dlp::v2beta1::RiskAnalysisOperationResult_KAnonymityResult_KAnonymityEquivalenceClass();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::privacy::dlp::v2beta1::RiskAnalysisOperationResult_KAnonymityResult_KAnonymityEquivalenceClass::InitAsDefaultInstance();
}

void InitDefaultsRiskAnalysisOperationResult_KAnonymityResult_KAnonymityEquivalenceClass() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsRiskAnalysisOperationResult_KAnonymityResult_KAnonymityEquivalenceClassImpl);
}

void InitDefaultsRiskAnalysisOperationResult_KAnonymityResult_KAnonymityHistogramBucketImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaultsRiskAnalysisOperationResult_KAnonymityResult_KAnonymityEquivalenceClass();
  {
    void* ptr = &::google::privacy::dlp::v2beta1::_RiskAnalysisOperationResult_KAnonymityResult_KAnonymityHistogramBucket_default_instance_;
    new (ptr) ::google::privacy::dlp::v2beta1::RiskAnalysisOperationResult_KAnonymityResult_KAnonymityHistogramBucket();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::privacy::dlp::v2beta1::RiskAnalysisOperationResult_KAnonymityResult_KAnonymityHistogramBucket::InitAsDefaultInstance();
}

void InitDefaultsRiskAnalysisOperationResult_KAnonymityResult_KAnonymityHistogramBucket() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsRiskAnalysisOperationResult_KAnonymityResult_KAnonymityHistogramBucketImpl);
}

void InitDefaultsRiskAnalysisOperationResult_KAnonymityResultImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaultsRiskAnalysisOperationResult_KAnonymityResult_KAnonymityHistogramBucket();
  {
    void* ptr = &::google::privacy::dlp::v2beta1::_RiskAnalysisOperationResult_KAnonymityResult_default_instance_;
    new (ptr) ::google::privacy::dlp::v2beta1::RiskAnalysisOperationResult_KAnonymityResult();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::privacy::dlp::v2beta1::RiskAnalysisOperationResult_KAnonymityResult::InitAsDefaultInstance();
}

void InitDefaultsRiskAnalysisOperationResult_KAnonymityResult() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsRiskAnalysisOperationResult_KAnonymityResultImpl);
}

void InitDefaultsRiskAnalysisOperationResult_LDiversityResult_LDiversityEquivalenceClassImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaultsValue();
  protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaultsValueFrequency();
  {
    void* ptr = &::google::privacy::dlp::v2beta1::_RiskAnalysisOperationResult_LDiversityResult_LDiversityEquivalenceClass_default_instance_;
    new (ptr) ::google::privacy::dlp::v2beta1::RiskAnalysisOperationResult_LDiversityResult_LDiversityEquivalenceClass();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::privacy::dlp::v2beta1::RiskAnalysisOperationResult_LDiversityResult_LDiversityEquivalenceClass::InitAsDefaultInstance();
}

void InitDefaultsRiskAnalysisOperationResult_LDiversityResult_LDiversityEquivalenceClass() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsRiskAnalysisOperationResult_LDiversityResult_LDiversityEquivalenceClassImpl);
}

void InitDefaultsRiskAnalysisOperationResult_LDiversityResult_LDiversityHistogramBucketImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaultsRiskAnalysisOperationResult_LDiversityResult_LDiversityEquivalenceClass();
  {
    void* ptr = &::google::privacy::dlp::v2beta1::_RiskAnalysisOperationResult_LDiversityResult_LDiversityHistogramBucket_default_instance_;
    new (ptr) ::google::privacy::dlp::v2beta1::RiskAnalysisOperationResult_LDiversityResult_LDiversityHistogramBucket();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::privacy::dlp::v2beta1::RiskAnalysisOperationResult_LDiversityResult_LDiversityHistogramBucket::InitAsDefaultInstance();
}

void InitDefaultsRiskAnalysisOperationResult_LDiversityResult_LDiversityHistogramBucket() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsRiskAnalysisOperationResult_LDiversityResult_LDiversityHistogramBucketImpl);
}

void InitDefaultsRiskAnalysisOperationResult_LDiversityResultImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaultsRiskAnalysisOperationResult_LDiversityResult_LDiversityHistogramBucket();
  {
    void* ptr = &::google::privacy::dlp::v2beta1::_RiskAnalysisOperationResult_LDiversityResult_default_instance_;
    new (ptr) ::google::privacy::dlp::v2beta1::RiskAnalysisOperationResult_LDiversityResult();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::privacy::dlp::v2beta1::RiskAnalysisOperationResult_LDiversityResult::InitAsDefaultInstance();
}

void InitDefaultsRiskAnalysisOperationResult_LDiversityResult() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsRiskAnalysisOperationResult_LDiversityResultImpl);
}

void InitDefaultsRiskAnalysisOperationResultImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaultsRiskAnalysisOperationResult_NumericalStatsResult();
  protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaultsRiskAnalysisOperationResult_CategoricalStatsResult();
  protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaultsRiskAnalysisOperationResult_KAnonymityResult();
  protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaultsRiskAnalysisOperationResult_LDiversityResult();
  {
    void* ptr = &::google::privacy::dlp::v2beta1::_RiskAnalysisOperationResult_default_instance_;
    new (ptr) ::google::privacy::dlp::v2beta1::RiskAnalysisOperationResult();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::privacy::dlp::v2beta1::RiskAnalysisOperationResult::InitAsDefaultInstance();
}

void InitDefaultsRiskAnalysisOperationResult() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsRiskAnalysisOperationResultImpl);
}

void InitDefaultsValueFrequencyImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaultsValue();
  {
    void* ptr = &::google::privacy::dlp::v2beta1::_ValueFrequency_default_instance_;
    new (ptr) ::google::privacy::dlp::v2beta1::ValueFrequency();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::privacy::dlp::v2beta1::ValueFrequency::InitAsDefaultInstance();
}

void InitDefaultsValueFrequency() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsValueFrequencyImpl);
}

void InitDefaultsValueImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_google_2fprotobuf_2ftimestamp_2eproto::InitDefaultsTimestamp();
  protobuf_google_2ftype_2ftimeofday_2eproto::InitDefaultsTimeOfDay();
  protobuf_google_2ftype_2fdate_2eproto::InitDefaultsDate();
  {
    void* ptr = &::google::privacy::dlp::v2beta1::_Value_default_instance_;
    new (ptr) ::google::privacy::dlp::v2beta1::Value();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::privacy::dlp::v2beta1::Value::InitAsDefaultInstance();
}

void InitDefaultsValue() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsValueImpl);
}

void InitDefaultsDeidentifyConfigImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaultsInfoTypeTransformations();
  protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaultsRecordTransformations();
  {
    void* ptr = &::google::privacy::dlp::v2beta1::_DeidentifyConfig_default_instance_;
    new (ptr) ::google::privacy::dlp::v2beta1::DeidentifyConfig();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::privacy::dlp::v2beta1::DeidentifyConfig::InitAsDefaultInstance();
}

void InitDefaultsDeidentifyConfig() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsDeidentifyConfigImpl);
}

void InitDefaultsPrimitiveTransformationImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaultsReplaceValueConfig();
  protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaultsRedactConfig();
  protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaultsCharacterMaskConfig();
  protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaultsCryptoReplaceFfxFpeConfig();
  protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaultsFixedSizeBucketingConfig();
  protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaultsBucketingConfig();
  protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaultsReplaceWithInfoTypeConfig();
  protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaultsTimePartConfig();
  protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaultsCryptoHashConfig();
  {
    void* ptr = &::google::privacy::dlp::v2beta1::_PrimitiveTransformation_default_instance_;
    new (ptr) ::google::privacy::dlp::v2beta1::PrimitiveTransformation();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::privacy::dlp::v2beta1::PrimitiveTransformation::InitAsDefaultInstance();
}

void InitDefaultsPrimitiveTransformation() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsPrimitiveTransformationImpl);
}

void InitDefaultsTimePartConfigImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::google::privacy::dlp::v2beta1::_TimePartConfig_default_instance_;
    new (ptr) ::google::privacy::dlp::v2beta1::TimePartConfig();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::privacy::dlp::v2beta1::TimePartConfig::InitAsDefaultInstance();
}

void InitDefaultsTimePartConfig() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsTimePartConfigImpl);
}

void InitDefaultsCryptoHashConfigImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaultsCryptoKey();
  {
    void* ptr = &::google::privacy::dlp::v2beta1::_CryptoHashConfig_default_instance_;
    new (ptr) ::google::privacy::dlp::v2beta1::CryptoHashConfig();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::privacy::dlp::v2beta1::CryptoHashConfig::InitAsDefaultInstance();
}

void InitDefaultsCryptoHashConfig() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsCryptoHashConfigImpl);
}

void InitDefaultsReplaceValueConfigImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaultsValue();
  {
    void* ptr = &::google::privacy::dlp::v2beta1::_ReplaceValueConfig_default_instance_;
    new (ptr) ::google::privacy::dlp::v2beta1::ReplaceValueConfig();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::privacy::dlp::v2beta1::ReplaceValueConfig::InitAsDefaultInstance();
}

void InitDefaultsReplaceValueConfig() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsReplaceValueConfigImpl);
}

void InitDefaultsReplaceWithInfoTypeConfigImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::google::privacy::dlp::v2beta1::_ReplaceWithInfoTypeConfig_default_instance_;
    new (ptr) ::google::privacy::dlp::v2beta1::ReplaceWithInfoTypeConfig();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::privacy::dlp::v2beta1::ReplaceWithInfoTypeConfig::InitAsDefaultInstance();
}

void InitDefaultsReplaceWithInfoTypeConfig() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsReplaceWithInfoTypeConfigImpl);
}

void InitDefaultsRedactConfigImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::google::privacy::dlp::v2beta1::_RedactConfig_default_instance_;
    new (ptr) ::google::privacy::dlp::v2beta1::RedactConfig();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::privacy::dlp::v2beta1::RedactConfig::InitAsDefaultInstance();
}

void InitDefaultsRedactConfig() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsRedactConfigImpl);
}

void InitDefaultsCharsToIgnoreImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::google::privacy::dlp::v2beta1::_CharsToIgnore_default_instance_;
    new (ptr) ::google::privacy::dlp::v2beta1::CharsToIgnore();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::privacy::dlp::v2beta1::CharsToIgnore::InitAsDefaultInstance();
}

void InitDefaultsCharsToIgnore() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsCharsToIgnoreImpl);
}

void InitDefaultsCharacterMaskConfigImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaultsCharsToIgnore();
  {
    void* ptr = &::google::privacy::dlp::v2beta1::_CharacterMaskConfig_default_instance_;
    new (ptr) ::google::privacy::dlp::v2beta1::CharacterMaskConfig();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::privacy::dlp::v2beta1::CharacterMaskConfig::InitAsDefaultInstance();
}

void InitDefaultsCharacterMaskConfig() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsCharacterMaskConfigImpl);
}

void InitDefaultsFixedSizeBucketingConfigImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaultsValue();
  {
    void* ptr = &::google::privacy::dlp::v2beta1::_FixedSizeBucketingConfig_default_instance_;
    new (ptr) ::google::privacy::dlp::v2beta1::FixedSizeBucketingConfig();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::privacy::dlp::v2beta1::FixedSizeBucketingConfig::InitAsDefaultInstance();
}

void InitDefaultsFixedSizeBucketingConfig() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsFixedSizeBucketingConfigImpl);
}

void InitDefaultsBucketingConfig_BucketImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaultsValue();
  {
    void* ptr = &::google::privacy::dlp::v2beta1::_BucketingConfig_Bucket_default_instance_;
    new (ptr) ::google::privacy::dlp::v2beta1::BucketingConfig_Bucket();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::privacy::dlp::v2beta1::BucketingConfig_Bucket::InitAsDefaultInstance();
}

void InitDefaultsBucketingConfig_Bucket() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsBucketingConfig_BucketImpl);
}

void InitDefaultsBucketingConfigImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaultsBucketingConfig_Bucket();
  {
    void* ptr = &::google::privacy::dlp::v2beta1::_BucketingConfig_default_instance_;
    new (ptr) ::google::privacy::dlp::v2beta1::BucketingConfig();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::privacy::dlp::v2beta1::BucketingConfig::InitAsDefaultInstance();
}

void InitDefaultsBucketingConfig() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsBucketingConfigImpl);
}

void InitDefaultsCryptoReplaceFfxFpeConfigImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaultsCryptoKey();
  protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fstorage_2eproto::InitDefaultsFieldId();
  {
    void* ptr = &::google::privacy::dlp::v2beta1::_CryptoReplaceFfxFpeConfig_default_instance_;
    new (ptr) ::google::privacy::dlp::v2beta1::CryptoReplaceFfxFpeConfig();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::privacy::dlp::v2beta1::CryptoReplaceFfxFpeConfig::InitAsDefaultInstance();
}

void InitDefaultsCryptoReplaceFfxFpeConfig() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsCryptoReplaceFfxFpeConfigImpl);
}

void InitDefaultsCryptoKeyImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaultsTransientCryptoKey();
  protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaultsUnwrappedCryptoKey();
  protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaultsKmsWrappedCryptoKey();
  {
    void* ptr = &::google::privacy::dlp::v2beta1::_CryptoKey_default_instance_;
    new (ptr) ::google::privacy::dlp::v2beta1::CryptoKey();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::privacy::dlp::v2beta1::CryptoKey::InitAsDefaultInstance();
}

void InitDefaultsCryptoKey() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsCryptoKeyImpl);
}

void InitDefaultsTransientCryptoKeyImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::google::privacy::dlp::v2beta1::_TransientCryptoKey_default_instance_;
    new (ptr) ::google::privacy::dlp::v2beta1::TransientCryptoKey();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::privacy::dlp::v2beta1::TransientCryptoKey::InitAsDefaultInstance();
}

void InitDefaultsTransientCryptoKey() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsTransientCryptoKeyImpl);
}

void InitDefaultsUnwrappedCryptoKeyImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::google::privacy::dlp::v2beta1::_UnwrappedCryptoKey_default_instance_;
    new (ptr) ::google::privacy::dlp::v2beta1::UnwrappedCryptoKey();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::privacy::dlp::v2beta1::UnwrappedCryptoKey::InitAsDefaultInstance();
}

void InitDefaultsUnwrappedCryptoKey() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsUnwrappedCryptoKeyImpl);
}

void InitDefaultsKmsWrappedCryptoKeyImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::google::privacy::dlp::v2beta1::_KmsWrappedCryptoKey_default_instance_;
    new (ptr) ::google::privacy::dlp::v2beta1::KmsWrappedCryptoKey();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::privacy::dlp::v2beta1::KmsWrappedCryptoKey::InitAsDefaultInstance();
}

void InitDefaultsKmsWrappedCryptoKey() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsKmsWrappedCryptoKeyImpl);
}

void InitDefaultsInfoTypeTransformations_InfoTypeTransformationImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fstorage_2eproto::InitDefaultsInfoType();
  protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaultsPrimitiveTransformation();
  {
    void* ptr = &::google::privacy::dlp::v2beta1::_InfoTypeTransformations_InfoTypeTransformation_default_instance_;
    new (ptr) ::google::privacy::dlp::v2beta1::InfoTypeTransformations_InfoTypeTransformation();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::privacy::dlp::v2beta1::InfoTypeTransformations_InfoTypeTransformation::InitAsDefaultInstance();
}

void InitDefaultsInfoTypeTransformations_InfoTypeTransformation() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsInfoTypeTransformations_InfoTypeTransformationImpl);
}

void InitDefaultsInfoTypeTransformationsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaultsInfoTypeTransformations_InfoTypeTransformation();
  {
    void* ptr = &::google::privacy::dlp::v2beta1::_InfoTypeTransformations_default_instance_;
    new (ptr) ::google::privacy::dlp::v2beta1::InfoTypeTransformations();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::privacy::dlp::v2beta1::InfoTypeTransformations::InitAsDefaultInstance();
}

void InitDefaultsInfoTypeTransformations() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsInfoTypeTransformationsImpl);
}

void InitDefaultsFieldTransformationImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fstorage_2eproto::InitDefaultsFieldId();
  protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaultsRecordCondition();
  protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaultsPrimitiveTransformation();
  protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaultsInfoTypeTransformations();
  {
    void* ptr = &::google::privacy::dlp::v2beta1::_FieldTransformation_default_instance_;
    new (ptr) ::google::privacy::dlp::v2beta1::FieldTransformation();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::privacy::dlp::v2beta1::FieldTransformation::InitAsDefaultInstance();
}

void InitDefaultsFieldTransformation() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsFieldTransformationImpl);
}

void InitDefaultsRecordTransformationsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaultsFieldTransformation();
  protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaultsRecordSuppression();
  {
    void* ptr = &::google::privacy::dlp::v2beta1::_RecordTransformations_default_instance_;
    new (ptr) ::google::privacy::dlp::v2beta1::RecordTransformations();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::privacy::dlp::v2beta1::RecordTransformations::InitAsDefaultInstance();
}

void InitDefaultsRecordTransformations() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsRecordTransformationsImpl);
}

void InitDefaultsRecordSuppressionImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaultsRecordCondition();
  {
    void* ptr = &::google::privacy::dlp::v2beta1::_RecordSuppression_default_instance_;
    new (ptr) ::google::privacy::dlp::v2beta1::RecordSuppression();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::privacy::dlp::v2beta1::RecordSuppression::InitAsDefaultInstance();
}

void InitDefaultsRecordSuppression() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsRecordSuppressionImpl);
}

void InitDefaultsRecordCondition_ConditionImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fstorage_2eproto::InitDefaultsFieldId();
  protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaultsValue();
  {
    void* ptr = &::google::privacy::dlp::v2beta1::_RecordCondition_Condition_default_instance_;
    new (ptr) ::google::privacy::dlp::v2beta1::RecordCondition_Condition();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::privacy::dlp::v2beta1::RecordCondition_Condition::InitAsDefaultInstance();
}

void InitDefaultsRecordCondition_Condition() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsRecordCondition_ConditionImpl);
}

void InitDefaultsRecordCondition_ConditionsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaultsRecordCondition_Condition();
  {
    void* ptr = &::google::privacy::dlp::v2beta1::_RecordCondition_Conditions_default_instance_;
    new (ptr) ::google::privacy::dlp::v2beta1::RecordCondition_Conditions();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::privacy::dlp::v2beta1::RecordCondition_Conditions::InitAsDefaultInstance();
}

void InitDefaultsRecordCondition_Conditions() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsRecordCondition_ConditionsImpl);
}

void InitDefaultsRecordCondition_ExpressionsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaultsRecordCondition_Conditions();
  {
    void* ptr = &::google::privacy::dlp::v2beta1::_RecordCondition_Expressions_default_instance_;
    new (ptr) ::google::privacy::dlp::v2beta1::RecordCondition_Expressions();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::privacy::dlp::v2beta1::RecordCondition_Expressions::InitAsDefaultInstance();
}

void InitDefaultsRecordCondition_Expressions() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsRecordCondition_ExpressionsImpl);
}

void InitDefaultsRecordConditionImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaultsRecordCondition_Expressions();
  {
    void* ptr = &::google::privacy::dlp::v2beta1::_RecordCondition_default_instance_;
    new (ptr) ::google::privacy::dlp::v2beta1::RecordCondition();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::privacy::dlp::v2beta1::RecordCondition::InitAsDefaultInstance();
}

void InitDefaultsRecordCondition() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsRecordConditionImpl);
}

void InitDefaultsDeidentificationSummaryImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaultsTransformationSummary();
  {
    void* ptr = &::google::privacy::dlp::v2beta1::_DeidentificationSummary_default_instance_;
    new (ptr) ::google::privacy::dlp::v2beta1::DeidentificationSummary();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::privacy::dlp::v2beta1::DeidentificationSummary::InitAsDefaultInstance();
}

void InitDefaultsDeidentificationSummary() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsDeidentificationSummaryImpl);
}

void InitDefaultsTransformationSummary_SummaryResultImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::google::privacy::dlp::v2beta1::_TransformationSummary_SummaryResult_default_instance_;
    new (ptr) ::google::privacy::dlp::v2beta1::TransformationSummary_SummaryResult();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::privacy::dlp::v2beta1::TransformationSummary_SummaryResult::InitAsDefaultInstance();
}

void InitDefaultsTransformationSummary_SummaryResult() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsTransformationSummary_SummaryResultImpl);
}

void InitDefaultsTransformationSummaryImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fstorage_2eproto::InitDefaultsInfoType();
  protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fstorage_2eproto::InitDefaultsFieldId();
  protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaultsPrimitiveTransformation();
  protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaultsFieldTransformation();
  protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaultsRecordSuppression();
  protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaultsTransformationSummary_SummaryResult();
  {
    void* ptr = &::google::privacy::dlp::v2beta1::_TransformationSummary_default_instance_;
    new (ptr) ::google::privacy::dlp::v2beta1::TransformationSummary();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::privacy::dlp::v2beta1::TransformationSummary::InitAsDefaultInstance();
}

void InitDefaultsTransformationSummary() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsTransformationSummaryImpl);
}

::google::protobuf::Metadata file_level_metadata[82];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[7];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::privacy::dlp::v2beta1::InspectConfig_InfoTypeLimit, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::privacy::dlp::v2beta1::InspectConfig_InfoTypeLimit, info_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::privacy::dlp::v2beta1::InspectConfig_InfoTypeLimit, max_findings_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::privacy::dlp::v2beta1::InspectConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::privacy::dlp::v2beta1::InspectConfig, info_types_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::privacy::dlp::v2beta1::InspectConfig, min_likelihood_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::privacy::dlp::v2beta1::InspectConfig, max_findings_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::privacy::dlp::v2beta1::InspectConfig, include_quote_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::privacy::dlp::v2beta1::InspectConfig, exclude_types_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::privacy::dlp::v2beta1::InspectConfig, info_type_limits_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::privacy::dlp::v2beta1::OperationConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::privacy::dlp::v2beta1::OperationConfig, max_item_findings_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::privacy::dlp::v2beta1::ContentItem, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::privacy::dlp::v2beta1::ContentItem, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::privacy::dlp::v2beta1::ContentItem, type_),
  offsetof(::google::privacy::dlp::v2beta1::ContentItemDefaultTypeInternal, data_),
  offsetof(::google::privacy::dlp::v2beta1::ContentItemDefaultTypeInternal, value_),
  offsetof(::google::privacy::dlp::v2beta1::ContentItemDefaultTypeInternal, table_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::privacy::dlp::v2beta1::ContentItem, data_item_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::privacy::dlp::v2beta1::Table_Row, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::privacy::dlp::v2beta1::Table_Row, values_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::privacy::dlp::v2beta1::Table, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::privacy::dlp::v2beta1::Table, headers_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::privacy::dlp::v2beta1::Table, rows_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::privacy::dlp::v2beta1::InspectResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::privacy::dlp::v2beta1::InspectResult, findings_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::privacy::dlp::v2beta1::InspectResult, findings_truncated_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::privacy::dlp::v2beta1::Finding, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::privacy::dlp::v2beta1::Finding, quote_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::privacy::dlp::v2beta1::Finding, info_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::privacy::dlp::v2beta1::Finding, likelihood_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::privacy::dlp::v2beta1::Finding, location_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::privacy::dlp::v2beta1::Finding, create_time_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::privacy::dlp::v2beta1::Location, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::privacy::dlp::v2beta1::Location, byte_range_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::privacy::dlp::v2beta1::Location, codepoint_range_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::privacy::dlp::v2beta1::Location, image_boxes_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::privacy::dlp::v2beta1::Location, record_key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::privacy::dlp::v2beta1::Location, field_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::privacy::dlp::v2beta1::Location, table_location_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::privacy::dlp::v2beta1::TableLocation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::privacy::dlp::v2beta1::TableLocation, row_index_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::privacy::dlp::v2beta1::Range, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::privacy::dlp::v2beta1::Range, start_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::privacy::dlp::v2beta1::Range, end_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::privacy::dlp::v2beta1::ImageLocation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::privacy::dlp::v2beta1::ImageLocation, top_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::privacy::dlp::v2beta1::ImageLocation, left_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::privacy::dlp::v2beta1::ImageLocation, width_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::privacy::dlp::v2beta1::ImageLocation, height_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::privacy::dlp::v2beta1::RedactContentRequest_ReplaceConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::privacy::dlp::v2beta1::RedactContentRequest_ReplaceConfig, info_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::privacy::dlp::v2beta1::RedactContentRequest_ReplaceConfig, replace_with_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::privacy::dlp::v2beta1::RedactContentRequest_ImageRedactionConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::privacy::dlp::v2beta1::RedactContentRequest_ImageRedactionConfig, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::google::privacy::dlp::v2beta1::RedactContentRequest_ImageRedactionConfigDefaultTypeInternal, info_type_),
  offsetof(::google::privacy::dlp::v2beta1::RedactContentRequest_ImageRedactionConfigDefaultTypeInternal, redact_all_text_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::privacy::dlp::v2beta1::RedactContentRequest_ImageRedactionConfig, redaction_color_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::privacy::dlp::v2beta1::RedactContentRequest_ImageRedactionConfig, target_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::privacy::dlp::v2beta1::RedactContentRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::privacy::dlp::v2beta1::RedactContentRequest, inspect_config_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::privacy::dlp::v2beta1::RedactContentRequest, items_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::privacy::dlp::v2beta1::RedactContentRequest, replace_configs_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::privacy::dlp::v2beta1::RedactContentRequest, image_redaction_configs_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::privacy::dlp::v2beta1::Color, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::privacy::dlp::v2beta1::Color, red_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::privacy::dlp::v2beta1::Color, green_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::privacy::dlp::v2beta1::Color, blue_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::privacy::dlp::v2beta1::RedactContentResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::privacy::dlp::v2beta1::RedactContentResponse, items_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::privacy::dlp::v2beta1::DeidentifyContentRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::privacy::dlp::v2beta1::DeidentifyContentRequest, deidentify_config_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::privacy::dlp::v2beta1::DeidentifyContentRequest, inspect_config_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::privacy::dlp::v2beta1::DeidentifyContentRequest, items_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::privacy::dlp::v2beta1::DeidentifyContentResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::privacy::dlp::v2beta1::DeidentifyContentResponse, items_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::privacy::dlp::v2beta1::DeidentifyContentResponse, summaries_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::privacy::dlp::v2beta1::InspectContentRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::privacy::dlp::v2beta1::InspectContentRequest, inspect_config_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::privacy::dlp::v2beta1::InspectContentRequest, items_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::privacy::dlp::v2beta1::InspectContentResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::privacy::dlp::v2beta1::InspectContentResponse, results_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::privacy::dlp::v2beta1::CreateInspectOperationRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::privacy::dlp::v2beta1::CreateInspectOperationRequest, inspect_config_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::privacy::dlp::v2beta1::CreateInspectOperationRequest, storage_config_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::privacy::dlp::v2beta1::CreateInspectOperationRequest, output_config_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::privacy::dlp::v2beta1::CreateInspectOperationRequest, operation_config_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::privacy::dlp::v2beta1::OutputStorageConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::privacy::dlp::v2beta1::OutputStorageConfig, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::google::privacy::dlp::v2beta1::OutputStorageConfigDefaultTypeInternal, table_),
  offsetof(::google::privacy::dlp::v2beta1::OutputStorageConfigDefaultTypeInternal, storage_path_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::privacy::dlp::v2beta1::OutputStorageConfig, type_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::privacy::dlp::v2beta1::InfoTypeStatistics, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::privacy::dlp::v2beta1::InfoTypeStatistics, info_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::privacy::dlp::v2beta1::InfoTypeStatistics, count_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::privacy::dlp::v2beta1::InspectOperationMetadata, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::privacy::dlp::v2beta1::InspectOperationMetadata, processed_bytes_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::privacy::dlp::v2beta1::InspectOperationMetadata, total_estimated_bytes_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::privacy::dlp::v2beta1::InspectOperationMetadata, info_type_stats_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::privacy::dlp::v2beta1::InspectOperationMetadata, create_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::privacy::dlp::v2beta1::InspectOperationMetadata, request_inspect_config_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::privacy::dlp::v2beta1::InspectOperationMetadata, request_storage_config_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::privacy::dlp::v2beta1::InspectOperationMetadata, request_output_config_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::privacy::dlp::v2beta1::InspectOperationResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::privacy::dlp::v2beta1::InspectOperationResult, name_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::privacy::dlp::v2beta1::ListInspectFindingsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::privacy::dlp::v2beta1::ListInspectFindingsRequest, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::privacy::dlp::v2beta1::ListInspectFindingsRequest, page_size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::privacy::dlp::v2beta1::ListInspectFindingsRequest, page_token_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::privacy::dlp::v2beta1::ListInspectFindingsRequest, filter_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::privacy::dlp::v2beta1::ListInspectFindingsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::privacy::dlp::v2beta1::ListInspectFindingsResponse, result_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::privacy::dlp::v2beta1::ListInspectFindingsResponse, next_page_token_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::privacy::dlp::v2beta1::InfoTypeDescription, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::privacy::dlp::v2beta1::InfoTypeDescription, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::privacy::dlp::v2beta1::InfoTypeDescription, display_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::privacy::dlp::v2beta1::InfoTypeDescription, categories_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::privacy::dlp::v2beta1::ListInfoTypesRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::privacy::dlp::v2beta1::ListInfoTypesRequest, category_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::privacy::dlp::v2beta1::ListInfoTypesRequest, language_code_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::privacy::dlp::v2beta1::ListInfoTypesResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::privacy::dlp::v2beta1::ListInfoTypesResponse, info_types_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::privacy::dlp::v2beta1::CategoryDescription, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::privacy::dlp::v2beta1::CategoryDescription, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::privacy::dlp::v2beta1::CategoryDescription, display_name_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::privacy::dlp::v2beta1::ListRootCategoriesRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::privacy::dlp::v2beta1::ListRootCategoriesRequest, language_code_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::privacy::dlp::v2beta1::ListRootCategoriesResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::privacy::dlp::v2beta1::ListRootCategoriesResponse, categories_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::privacy::dlp::v2beta1::AnalyzeDataSourceRiskRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::privacy::dlp::v2beta1::AnalyzeDataSourceRiskRequest, privacy_metric_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::privacy::dlp::v2beta1::AnalyzeDataSourceRiskRequest, source_table_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::privacy::dlp::v2beta1::PrivacyMetric_NumericalStatsConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::privacy::dlp::v2beta1::PrivacyMetric_NumericalStatsConfig, field_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::privacy::dlp::v2beta1::PrivacyMetric_CategoricalStatsConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::privacy::dlp::v2beta1::PrivacyMetric_CategoricalStatsConfig, field_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::privacy::dlp::v2beta1::PrivacyMetric_KAnonymityConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::privacy::dlp::v2beta1::PrivacyMetric_KAnonymityConfig, quasi_ids_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::privacy::dlp::v2beta1::PrivacyMetric_KAnonymityConfig, entity_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::privacy::dlp::v2beta1::PrivacyMetric_LDiversityConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::privacy::dlp::v2beta1::PrivacyMetric_LDiversityConfig, quasi_ids_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::privacy::dlp::v2beta1::PrivacyMetric_LDiversityConfig, sensitive_attribute_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::privacy::dlp::v2beta1::PrivacyMetric, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::privacy::dlp::v2beta1::PrivacyMetric, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::google::privacy::dlp::v2beta1::PrivacyMetricDefaultTypeInternal, numerical_stats_config_),
  offsetof(::google::privacy::dlp::v2beta1::PrivacyMetricDefaultTypeInternal, categorical_stats_config_),
  offsetof(::google::privacy::dlp::v2beta1::PrivacyMetricDefaultTypeInternal, k_anonymity_config_),
  offsetof(::google::privacy::dlp::v2beta1::PrivacyMetricDefaultTypeInternal, l_diversity_config_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::privacy::dlp::v2beta1::PrivacyMetric, type_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::privacy::dlp::v2beta1::RiskAnalysisOperationMetadata, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::privacy::dlp::v2beta1::RiskAnalysisOperationMetadata, create_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::privacy::dlp::v2beta1::RiskAnalysisOperationMetadata, requested_privacy_metric_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::privacy::dlp::v2beta1::RiskAnalysisOperationMetadata, requested_source_table_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::privacy::dlp::v2beta1::RiskAnalysisOperationResult_NumericalStatsResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::privacy::dlp::v2beta1::RiskAnalysisOperationResult_NumericalStatsResult, min_value_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::privacy::dlp::v2beta1::RiskAnalysisOperationResult_NumericalStatsResult, max_value_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::privacy::dlp::v2beta1::RiskAnalysisOperationResult_NumericalStatsResult, quantile_values_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::privacy::dlp::v2beta1::RiskAnalysisOperationResult_CategoricalStatsResult_CategoricalStatsHistogramBucket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::privacy::dlp::v2beta1::RiskAnalysisOperationResult_CategoricalStatsResult_CategoricalStatsHistogramBucket, value_frequency_lower_bound_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::privacy::dlp::v2beta1::RiskAnalysisOperationResult_CategoricalStatsResult_CategoricalStatsHistogramBucket, value_frequency_upper_bound_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::privacy::dlp::v2beta1::RiskAnalysisOperationResult_CategoricalStatsResult_CategoricalStatsHistogramBucket, bucket_size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::privacy::dlp::v2beta1::RiskAnalysisOperationResult_CategoricalStatsResult_CategoricalStatsHistogramBucket, bucket_values_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::privacy::dlp::v2beta1::RiskAnalysisOperationResult_CategoricalStatsResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::privacy::dlp::v2beta1::RiskAnalysisOperationResult_CategoricalStatsResult, value_frequency_histogram_buckets_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::privacy::dlp::v2beta1::RiskAnalysisOperationResult_KAnonymityResult_KAnonymityEquivalenceClass, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::privacy::dlp::v2beta1::RiskAnalysisOperationResult_KAnonymityResult_KAnonymityEquivalenceClass, quasi_ids_values_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::privacy::dlp::v2beta1::RiskAnalysisOperationResult_KAnonymityResult_KAnonymityEquivalenceClass, equivalence_class_size_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::privacy::dlp::v2beta1::RiskAnalysisOperationResult_KAnonymityResult_KAnonymityHistogramBucket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::privacy::dlp::v2beta1::RiskAnalysisOperationResult_KAnonymityResult_KAnonymityHistogramBucket, equivalence_class_size_lower_bound_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::privacy::dlp::v2beta1::RiskAnalysisOperationResult_KAnonymityResult_KAnonymityHistogramBucket, equivalence_class_size_upper_bound_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::privacy::dlp::v2beta1::RiskAnalysisOperationResult_KAnonymityResult_KAnonymityHistogramBucket, bucket_size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::privacy::dlp::v2beta1::RiskAnalysisOperationResult_KAnonymityResult_KAnonymityHistogramBucket, bucket_values_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::privacy::dlp::v2beta1::RiskAnalysisOperationResult_KAnonymityResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::privacy::dlp::v2beta1::RiskAnalysisOperationResult_KAnonymityResult, equivalence_class_histogram_buckets_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::privacy::dlp::v2beta1::RiskAnalysisOperationResult_LDiversityResult_LDiversityEquivalenceClass, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::privacy::dlp::v2beta1::RiskAnalysisOperationResult_LDiversityResult_LDiversityEquivalenceClass, quasi_ids_values_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::privacy::dlp::v2beta1::RiskAnalysisOperationResult_LDiversityResult_LDiversityEquivalenceClass, equivalence_class_size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::privacy::dlp::v2beta1::RiskAnalysisOperationResult_LDiversityResult_LDiversityEquivalenceClass, num_distinct_sensitive_values_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::privacy::dlp::v2beta1::RiskAnalysisOperationResult_LDiversityResult_LDiversityEquivalenceClass, top_sensitive_values_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::privacy::dlp::v2beta1::RiskAnalysisOperationResult_LDiversityResult_LDiversityHistogramBucket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::privacy::dlp::v2beta1::RiskAnalysisOperationResult_LDiversityResult_LDiversityHistogramBucket, sensitive_value_frequency_lower_bound_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::privacy::dlp::v2beta1::RiskAnalysisOperationResult_LDiversityResult_LDiversityHistogramBucket, sensitive_value_frequency_upper_bound_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::privacy::dlp::v2beta1::RiskAnalysisOperationResult_LDiversityResult_LDiversityHistogramBucket, bucket_size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::privacy::dlp::v2beta1::RiskAnalysisOperationResult_LDiversityResult_LDiversityHistogramBucket, bucket_values_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::privacy::dlp::v2beta1::RiskAnalysisOperationResult_LDiversityResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::privacy::dlp::v2beta1::RiskAnalysisOperationResult_LDiversityResult, sensitive_value_frequency_histogram_buckets_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::privacy::dlp::v2beta1::RiskAnalysisOperationResult, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::privacy::dlp::v2beta1::RiskAnalysisOperationResult, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::google::privacy::dlp::v2beta1::RiskAnalysisOperationResultDefaultTypeInternal, numerical_stats_result_),
  offsetof(::google::privacy::dlp::v2beta1::RiskAnalysisOperationResultDefaultTypeInternal, categorical_stats_result_),
  offsetof(::google::privacy::dlp::v2beta1::RiskAnalysisOperationResultDefaultTypeInternal, k_anonymity_result_),
  offsetof(::google::privacy::dlp::v2beta1::RiskAnalysisOperationResultDefaultTypeInternal, l_diversity_result_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::privacy::dlp::v2beta1::RiskAnalysisOperationResult, result_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::privacy::dlp::v2beta1::ValueFrequency, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::privacy::dlp::v2beta1::ValueFrequency, value_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::privacy::dlp::v2beta1::ValueFrequency, count_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::privacy::dlp::v2beta1::Value, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::privacy::dlp::v2beta1::Value, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::google::privacy::dlp::v2beta1::ValueDefaultTypeInternal, integer_value_),
  offsetof(::google::privacy::dlp::v2beta1::ValueDefaultTypeInternal, float_value_),
  offsetof(::google::privacy::dlp::v2beta1::ValueDefaultTypeInternal, string_value_),
  offsetof(::google::privacy::dlp::v2beta1::ValueDefaultTypeInternal, boolean_value_),
  offsetof(::google::privacy::dlp::v2beta1::ValueDefaultTypeInternal, timestamp_value_),
  offsetof(::google::privacy::dlp::v2beta1::ValueDefaultTypeInternal, time_value_),
  offsetof(::google::privacy::dlp::v2beta1::ValueDefaultTypeInternal, date_value_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::privacy::dlp::v2beta1::Value, type_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::privacy::dlp::v2beta1::DeidentifyConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::privacy::dlp::v2beta1::DeidentifyConfig, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::google::privacy::dlp::v2beta1::DeidentifyConfigDefaultTypeInternal, info_type_transformations_),
  offsetof(::google::privacy::dlp::v2beta1::DeidentifyConfigDefaultTypeInternal, record_transformations_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::privacy::dlp::v2beta1::DeidentifyConfig, transformation_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::privacy::dlp::v2beta1::PrimitiveTransformation, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::privacy::dlp::v2beta1::PrimitiveTransformation, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::google::privacy::dlp::v2beta1::PrimitiveTransformationDefaultTypeInternal, replace_config_),
  offsetof(::google::privacy::dlp::v2beta1::PrimitiveTransformationDefaultTypeInternal, redact_config_),
  offsetof(::google::privacy::dlp::v2beta1::PrimitiveTransformationDefaultTypeInternal, character_mask_config_),
  offsetof(::google::privacy::dlp::v2beta1::PrimitiveTransformationDefaultTypeInternal, crypto_replace_ffx_fpe_config_),
  offsetof(::google::privacy::dlp::v2beta1::PrimitiveTransformationDefaultTypeInternal, fixed_size_bucketing_config_),
  offsetof(::google::privacy::dlp::v2beta1::PrimitiveTransformationDefaultTypeInternal, bucketing_config_),
  offsetof(::google::privacy::dlp::v2beta1::PrimitiveTransformationDefaultTypeInternal, replace_with_info_type_config_),
  offsetof(::google::privacy::dlp::v2beta1::PrimitiveTransformationDefaultTypeInternal, time_part_config_),
  offsetof(::google::privacy::dlp::v2beta1::PrimitiveTransformationDefaultTypeInternal, crypto_hash_config_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::privacy::dlp::v2beta1::PrimitiveTransformation, transformation_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::privacy::dlp::v2beta1::TimePartConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::privacy::dlp::v2beta1::TimePartConfig, part_to_extract_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::privacy::dlp::v2beta1::CryptoHashConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::privacy::dlp::v2beta1::CryptoHashConfig, crypto_key_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::privacy::dlp::v2beta1::ReplaceValueConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::privacy::dlp::v2beta1::ReplaceValueConfig, new_value_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::privacy::dlp::v2beta1::ReplaceWithInfoTypeConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::privacy::dlp::v2beta1::RedactConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::privacy::dlp::v2beta1::CharsToIgnore, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::privacy::dlp::v2beta1::CharsToIgnore, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::google::privacy::dlp::v2beta1::CharsToIgnoreDefaultTypeInternal, characters_to_skip_),
  offsetof(::google::privacy::dlp::v2beta1::CharsToIgnoreDefaultTypeInternal, common_characters_to_ignore_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::privacy::dlp::v2beta1::CharsToIgnore, characters_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::privacy::dlp::v2beta1::CharacterMaskConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::privacy::dlp::v2beta1::CharacterMaskConfig, masking_character_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::privacy::dlp::v2beta1::CharacterMaskConfig, number_to_mask_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::privacy::dlp::v2beta1::CharacterMaskConfig, reverse_order_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::privacy::dlp::v2beta1::CharacterMaskConfig, characters_to_ignore_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::privacy::dlp::v2beta1::FixedSizeBucketingConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::privacy::dlp::v2beta1::FixedSizeBucketingConfig, lower_bound_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::privacy::dlp::v2beta1::FixedSizeBucketingConfig, upper_bound_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::privacy::dlp::v2beta1::FixedSizeBucketingConfig, bucket_size_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::privacy::dlp::v2beta1::BucketingConfig_Bucket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::privacy::dlp::v2beta1::BucketingConfig_Bucket, min_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::privacy::dlp::v2beta1::BucketingConfig_Bucket, max_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::privacy::dlp::v2beta1::BucketingConfig_Bucket, replacement_value_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::privacy::dlp::v2beta1::BucketingConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::privacy::dlp::v2beta1::BucketingConfig, buckets_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::privacy::dlp::v2beta1::CryptoReplaceFfxFpeConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::privacy::dlp::v2beta1::CryptoReplaceFfxFpeConfig, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::privacy::dlp::v2beta1::CryptoReplaceFfxFpeConfig, crypto_key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::privacy::dlp::v2beta1::CryptoReplaceFfxFpeConfig, context_),
  offsetof(::google::privacy::dlp::v2beta1::CryptoReplaceFfxFpeConfigDefaultTypeInternal, common_alphabet_),
  offsetof(::google::privacy::dlp::v2beta1::CryptoReplaceFfxFpeConfigDefaultTypeInternal, custom_alphabet_),
  offsetof(::google::privacy::dlp::v2beta1::CryptoReplaceFfxFpeConfigDefaultTypeInternal, radix_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::privacy::dlp::v2beta1::CryptoReplaceFfxFpeConfig, alphabet_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::privacy::dlp::v2beta1::CryptoKey, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::privacy::dlp::v2beta1::CryptoKey, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::google::privacy::dlp::v2beta1::CryptoKeyDefaultTypeInternal, transient_),
  offsetof(::google::privacy::dlp::v2beta1::CryptoKeyDefaultTypeInternal, unwrapped_),
  offsetof(::google::privacy::dlp::v2beta1::CryptoKeyDefaultTypeInternal, kms_wrapped_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::privacy::dlp::v2beta1::CryptoKey, source_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::privacy::dlp::v2beta1::TransientCryptoKey, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::privacy::dlp::v2beta1::TransientCryptoKey, name_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::privacy::dlp::v2beta1::UnwrappedCryptoKey, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::privacy::dlp::v2beta1::UnwrappedCryptoKey, key_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::privacy::dlp::v2beta1::KmsWrappedCryptoKey, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::privacy::dlp::v2beta1::KmsWrappedCryptoKey, wrapped_key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::privacy::dlp::v2beta1::KmsWrappedCryptoKey, crypto_key_name_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::privacy::dlp::v2beta1::InfoTypeTransformations_InfoTypeTransformation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::privacy::dlp::v2beta1::InfoTypeTransformations_InfoTypeTransformation, info_types_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::privacy::dlp::v2beta1::InfoTypeTransformations_InfoTypeTransformation, primitive_transformation_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::privacy::dlp::v2beta1::InfoTypeTransformations, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::privacy::dlp::v2beta1::InfoTypeTransformations, transformations_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::privacy::dlp::v2beta1::FieldTransformation, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::privacy::dlp::v2beta1::FieldTransformation, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::privacy::dlp::v2beta1::FieldTransformation, fields_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::privacy::dlp::v2beta1::FieldTransformation, condition_),
  offsetof(::google::privacy::dlp::v2beta1::FieldTransformationDefaultTypeInternal, primitive_transformation_),
  offsetof(::google::privacy::dlp::v2beta1::FieldTransformationDefaultTypeInternal, info_type_transformations_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::privacy::dlp::v2beta1::FieldTransformation, transformation_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::privacy::dlp::v2beta1::RecordTransformations, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::privacy::dlp::v2beta1::RecordTransformations, field_transformations_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::privacy::dlp::v2beta1::RecordTransformations, record_suppressions_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::privacy::dlp::v2beta1::RecordSuppression, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::privacy::dlp::v2beta1::RecordSuppression, condition_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::privacy::dlp::v2beta1::RecordCondition_Condition, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::privacy::dlp::v2beta1::RecordCondition_Condition, field_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::privacy::dlp::v2beta1::RecordCondition_Condition, operator__),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::privacy::dlp::v2beta1::RecordCondition_Condition, value_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::privacy::dlp::v2beta1::RecordCondition_Conditions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::privacy::dlp::v2beta1::RecordCondition_Conditions, conditions_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::privacy::dlp::v2beta1::RecordCondition_Expressions, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::privacy::dlp::v2beta1::RecordCondition_Expressions, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::privacy::dlp::v2beta1::RecordCondition_Expressions, logical_operator_),
  offsetof(::google::privacy::dlp::v2beta1::RecordCondition_ExpressionsDefaultTypeInternal, conditions_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::privacy::dlp::v2beta1::RecordCondition_Expressions, type_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::privacy::dlp::v2beta1::RecordCondition, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::privacy::dlp::v2beta1::RecordCondition, expressions_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::privacy::dlp::v2beta1::DeidentificationSummary, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::privacy::dlp::v2beta1::DeidentificationSummary, transformed_bytes_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::privacy::dlp::v2beta1::DeidentificationSummary, transformation_summaries_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::privacy::dlp::v2beta1::TransformationSummary_SummaryResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::privacy::dlp::v2beta1::TransformationSummary_SummaryResult, count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::privacy::dlp::v2beta1::TransformationSummary_SummaryResult, code_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::privacy::dlp::v2beta1::TransformationSummary_SummaryResult, details_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::privacy::dlp::v2beta1::TransformationSummary, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::privacy::dlp::v2beta1::TransformationSummary, info_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::privacy::dlp::v2beta1::TransformationSummary, field_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::privacy::dlp::v2beta1::TransformationSummary, transformation_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::privacy::dlp::v2beta1::TransformationSummary, field_transformations_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::privacy::dlp::v2beta1::TransformationSummary, record_suppress_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::privacy::dlp::v2beta1::TransformationSummary, results_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::google::privacy::dlp::v2beta1::InspectConfig_InfoTypeLimit)},
  { 7, -1, sizeof(::google::privacy::dlp::v2beta1::InspectConfig)},
  { 18, -1, sizeof(::google::privacy::dlp::v2beta1::OperationConfig)},
  { 24, -1, sizeof(::google::privacy::dlp::v2beta1::ContentItem)},
  { 34, -1, sizeof(::google::privacy::dlp::v2beta1::Table_Row)},
  { 40, -1, sizeof(::google::privacy::dlp::v2beta1::Table)},
  { 47, -1, sizeof(::google::privacy::dlp::v2beta1::InspectResult)},
  { 54, -1, sizeof(::google::privacy::dlp::v2beta1::Finding)},
  { 64, -1, sizeof(::google::privacy::dlp::v2beta1::Location)},
  { 75, -1, sizeof(::google::privacy::dlp::v2beta1::TableLocation)},
  { 81, -1, sizeof(::google::privacy::dlp::v2beta1::Range)},
  { 88, -1, sizeof(::google::privacy::dlp::v2beta1::ImageLocation)},
  { 97, -1, sizeof(::google::privacy::dlp::v2beta1::RedactContentRequest_ReplaceConfig)},
  { 104, -1, sizeof(::google::privacy::dlp::v2beta1::RedactContentRequest_ImageRedactionConfig)},
  { 113, -1, sizeof(::google::privacy::dlp::v2beta1::RedactContentRequest)},
  { 122, -1, sizeof(::google::privacy::dlp::v2beta1::Color)},
  { 130, -1, sizeof(::google::privacy::dlp::v2beta1::RedactContentResponse)},
  { 136, -1, sizeof(::google::privacy::dlp::v2beta1::DeidentifyContentRequest)},
  { 144, -1, sizeof(::google::privacy::dlp::v2beta1::DeidentifyContentResponse)},
  { 151, -1, sizeof(::google::privacy::dlp::v2beta1::InspectContentRequest)},
  { 158, -1, sizeof(::google::privacy::dlp::v2beta1::InspectContentResponse)},
  { 164, -1, sizeof(::google::privacy::dlp::v2beta1::CreateInspectOperationRequest)},
  { 173, -1, sizeof(::google::privacy::dlp::v2beta1::OutputStorageConfig)},
  { 181, -1, sizeof(::google::privacy::dlp::v2beta1::InfoTypeStatistics)},
  { 188, -1, sizeof(::google::privacy::dlp::v2beta1::InspectOperationMetadata)},
  { 200, -1, sizeof(::google::privacy::dlp::v2beta1::InspectOperationResult)},
  { 206, -1, sizeof(::google::privacy::dlp::v2beta1::ListInspectFindingsRequest)},
  { 215, -1, sizeof(::google::privacy::dlp::v2beta1::ListInspectFindingsResponse)},
  { 222, -1, sizeof(::google::privacy::dlp::v2beta1::InfoTypeDescription)},
  { 230, -1, sizeof(::google::privacy::dlp::v2beta1::ListInfoTypesRequest)},
  { 237, -1, sizeof(::google::privacy::dlp::v2beta1::ListInfoTypesResponse)},
  { 243, -1, sizeof(::google::privacy::dlp::v2beta1::CategoryDescription)},
  { 250, -1, sizeof(::google::privacy::dlp::v2beta1::ListRootCategoriesRequest)},
  { 256, -1, sizeof(::google::privacy::dlp::v2beta1::ListRootCategoriesResponse)},
  { 262, -1, sizeof(::google::privacy::dlp::v2beta1::AnalyzeDataSourceRiskRequest)},
  { 269, -1, sizeof(::google::privacy::dlp::v2beta1::PrivacyMetric_NumericalStatsConfig)},
  { 275, -1, sizeof(::google::privacy::dlp::v2beta1::PrivacyMetric_CategoricalStatsConfig)},
  { 281, -1, sizeof(::google::privacy::dlp::v2beta1::PrivacyMetric_KAnonymityConfig)},
  { 288, -1, sizeof(::google::privacy::dlp::v2beta1::PrivacyMetric_LDiversityConfig)},
  { 295, -1, sizeof(::google::privacy::dlp::v2beta1::PrivacyMetric)},
  { 305, -1, sizeof(::google::privacy::dlp::v2beta1::RiskAnalysisOperationMetadata)},
  { 313, -1, sizeof(::google::privacy::dlp::v2beta1::RiskAnalysisOperationResult_NumericalStatsResult)},
  { 321, -1, sizeof(::google::privacy::dlp::v2beta1::RiskAnalysisOperationResult_CategoricalStatsResult_CategoricalStatsHistogramBucket)},
  { 330, -1, sizeof(::google::privacy::dlp::v2beta1::RiskAnalysisOperationResult_CategoricalStatsResult)},
  { 336, -1, sizeof(::google::privacy::dlp::v2beta1::RiskAnalysisOperationResult_KAnonymityResult_KAnonymityEquivalenceClass)},
  { 343, -1, sizeof(::google::privacy::dlp::v2beta1::RiskAnalysisOperationResult_KAnonymityResult_KAnonymityHistogramBucket)},
  { 352, -1, sizeof(::google::privacy::dlp::v2beta1::RiskAnalysisOperationResult_KAnonymityResult)},
  { 358, -1, sizeof(::google::privacy::dlp::v2beta1::RiskAnalysisOperationResult_LDiversityResult_LDiversityEquivalenceClass)},
  { 367, -1, sizeof(::google::privacy::dlp::v2beta1::RiskAnalysisOperationResult_LDiversityResult_LDiversityHistogramBucket)},
  { 376, -1, sizeof(::google::privacy::dlp::v2beta1::RiskAnalysisOperationResult_LDiversityResult)},
  { 382, -1, sizeof(::google::privacy::dlp::v2beta1::RiskAnalysisOperationResult)},
  { 392, -1, sizeof(::google::privacy::dlp::v2beta1::ValueFrequency)},
  { 399, -1, sizeof(::google::privacy::dlp::v2beta1::Value)},
  { 412, -1, sizeof(::google::privacy::dlp::v2beta1::DeidentifyConfig)},
  { 420, -1, sizeof(::google::privacy::dlp::v2beta1::PrimitiveTransformation)},
  { 435, -1, sizeof(::google::privacy::dlp::v2beta1::TimePartConfig)},
  { 441, -1, sizeof(::google::privacy::dlp::v2beta1::CryptoHashConfig)},
  { 447, -1, sizeof(::google::privacy::dlp::v2beta1::ReplaceValueConfig)},
  { 453, -1, sizeof(::google::privacy::dlp::v2beta1::ReplaceWithInfoTypeConfig)},
  { 458, -1, sizeof(::google::privacy::dlp::v2beta1::RedactConfig)},
  { 463, -1, sizeof(::google::privacy::dlp::v2beta1::CharsToIgnore)},
  { 471, -1, sizeof(::google::privacy::dlp::v2beta1::CharacterMaskConfig)},
  { 480, -1, sizeof(::google::privacy::dlp::v2beta1::FixedSizeBucketingConfig)},
  { 488, -1, sizeof(::google::privacy::dlp::v2beta1::BucketingConfig_Bucket)},
  { 496, -1, sizeof(::google::privacy::dlp::v2beta1::BucketingConfig)},
  { 502, -1, sizeof(::google::privacy::dlp::v2beta1::CryptoReplaceFfxFpeConfig)},
  { 513, -1, sizeof(::google::privacy::dlp::v2beta1::CryptoKey)},
  { 522, -1, sizeof(::google::privacy::dlp::v2beta1::TransientCryptoKey)},
  { 528, -1, sizeof(::google::privacy::dlp::v2beta1::UnwrappedCryptoKey)},
  { 534, -1, sizeof(::google::privacy::dlp::v2beta1::KmsWrappedCryptoKey)},
  { 541, -1, sizeof(::google::privacy::dlp::v2beta1::InfoTypeTransformations_InfoTypeTransformation)},
  { 548, -1, sizeof(::google::privacy::dlp::v2beta1::InfoTypeTransformations)},
  { 554, -1, sizeof(::google::privacy::dlp::v2beta1::FieldTransformation)},
  { 564, -1, sizeof(::google::privacy::dlp::v2beta1::RecordTransformations)},
  { 571, -1, sizeof(::google::privacy::dlp::v2beta1::RecordSuppression)},
  { 577, -1, sizeof(::google::privacy::dlp::v2beta1::RecordCondition_Condition)},
  { 585, -1, sizeof(::google::privacy::dlp::v2beta1::RecordCondition_Conditions)},
  { 591, -1, sizeof(::google::privacy::dlp::v2beta1::RecordCondition_Expressions)},
  { 599, -1, sizeof(::google::privacy::dlp::v2beta1::RecordCondition)},
  { 605, -1, sizeof(::google::privacy::dlp::v2beta1::DeidentificationSummary)},
  { 612, -1, sizeof(::google::privacy::dlp::v2beta1::TransformationSummary_SummaryResult)},
  { 620, -1, sizeof(::google::privacy::dlp::v2beta1::TransformationSummary)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::privacy::dlp::v2beta1::_InspectConfig_InfoTypeLimit_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::privacy::dlp::v2beta1::_InspectConfig_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::privacy::dlp::v2beta1::_OperationConfig_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::privacy::dlp::v2beta1::_ContentItem_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::privacy::dlp::v2beta1::_Table_Row_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::privacy::dlp::v2beta1::_Table_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::privacy::dlp::v2beta1::_InspectResult_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::privacy::dlp::v2beta1::_Finding_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::privacy::dlp::v2beta1::_Location_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::privacy::dlp::v2beta1::_TableLocation_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::privacy::dlp::v2beta1::_Range_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::privacy::dlp::v2beta1::_ImageLocation_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::privacy::dlp::v2beta1::_RedactContentRequest_ReplaceConfig_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::privacy::dlp::v2beta1::_RedactContentRequest_ImageRedactionConfig_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::privacy::dlp::v2beta1::_RedactContentRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::privacy::dlp::v2beta1::_Color_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::privacy::dlp::v2beta1::_RedactContentResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::privacy::dlp::v2beta1::_DeidentifyContentRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::privacy::dlp::v2beta1::_DeidentifyContentResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::privacy::dlp::v2beta1::_InspectContentRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::privacy::dlp::v2beta1::_InspectContentResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::privacy::dlp::v2beta1::_CreateInspectOperationRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::privacy::dlp::v2beta1::_OutputStorageConfig_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::privacy::dlp::v2beta1::_InfoTypeStatistics_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::privacy::dlp::v2beta1::_InspectOperationMetadata_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::privacy::dlp::v2beta1::_InspectOperationResult_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::privacy::dlp::v2beta1::_ListInspectFindingsRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::privacy::dlp::v2beta1::_ListInspectFindingsResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::privacy::dlp::v2beta1::_InfoTypeDescription_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::privacy::dlp::v2beta1::_ListInfoTypesRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::privacy::dlp::v2beta1::_ListInfoTypesResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::privacy::dlp::v2beta1::_CategoryDescription_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::privacy::dlp::v2beta1::_ListRootCategoriesRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::privacy::dlp::v2beta1::_ListRootCategoriesResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::privacy::dlp::v2beta1::_AnalyzeDataSourceRiskRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::privacy::dlp::v2beta1::_PrivacyMetric_NumericalStatsConfig_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::privacy::dlp::v2beta1::_PrivacyMetric_CategoricalStatsConfig_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::privacy::dlp::v2beta1::_PrivacyMetric_KAnonymityConfig_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::privacy::dlp::v2beta1::_PrivacyMetric_LDiversityConfig_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::privacy::dlp::v2beta1::_PrivacyMetric_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::privacy::dlp::v2beta1::_RiskAnalysisOperationMetadata_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::privacy::dlp::v2beta1::_RiskAnalysisOperationResult_NumericalStatsResult_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::privacy::dlp::v2beta1::_RiskAnalysisOperationResult_CategoricalStatsResult_CategoricalStatsHistogramBucket_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::privacy::dlp::v2beta1::_RiskAnalysisOperationResult_CategoricalStatsResult_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::privacy::dlp::v2beta1::_RiskAnalysisOperationResult_KAnonymityResult_KAnonymityEquivalenceClass_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::privacy::dlp::v2beta1::_RiskAnalysisOperationResult_KAnonymityResult_KAnonymityHistogramBucket_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::privacy::dlp::v2beta1::_RiskAnalysisOperationResult_KAnonymityResult_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::privacy::dlp::v2beta1::_RiskAnalysisOperationResult_LDiversityResult_LDiversityEquivalenceClass_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::privacy::dlp::v2beta1::_RiskAnalysisOperationResult_LDiversityResult_LDiversityHistogramBucket_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::privacy::dlp::v2beta1::_RiskAnalysisOperationResult_LDiversityResult_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::privacy::dlp::v2beta1::_RiskAnalysisOperationResult_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::privacy::dlp::v2beta1::_ValueFrequency_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::privacy::dlp::v2beta1::_Value_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::privacy::dlp::v2beta1::_DeidentifyConfig_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::privacy::dlp::v2beta1::_PrimitiveTransformation_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::privacy::dlp::v2beta1::_TimePartConfig_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::privacy::dlp::v2beta1::_CryptoHashConfig_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::privacy::dlp::v2beta1::_ReplaceValueConfig_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::privacy::dlp::v2beta1::_ReplaceWithInfoTypeConfig_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::privacy::dlp::v2beta1::_RedactConfig_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::privacy::dlp::v2beta1::_CharsToIgnore_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::privacy::dlp::v2beta1::_CharacterMaskConfig_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::privacy::dlp::v2beta1::_FixedSizeBucketingConfig_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::privacy::dlp::v2beta1::_BucketingConfig_Bucket_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::privacy::dlp::v2beta1::_BucketingConfig_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::privacy::dlp::v2beta1::_CryptoReplaceFfxFpeConfig_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::privacy::dlp::v2beta1::_CryptoKey_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::privacy::dlp::v2beta1::_TransientCryptoKey_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::privacy::dlp::v2beta1::_UnwrappedCryptoKey_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::privacy::dlp::v2beta1::_KmsWrappedCryptoKey_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::privacy::dlp::v2beta1::_InfoTypeTransformations_InfoTypeTransformation_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::privacy::dlp::v2beta1::_InfoTypeTransformations_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::privacy::dlp::v2beta1::_FieldTransformation_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::privacy::dlp::v2beta1::_RecordTransformations_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::privacy::dlp::v2beta1::_RecordSuppression_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::privacy::dlp::v2beta1::_RecordCondition_Condition_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::privacy::dlp::v2beta1::_RecordCondition_Conditions_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::privacy::dlp::v2beta1::_RecordCondition_Expressions_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::privacy::dlp::v2beta1::_RecordCondition_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::privacy::dlp::v2beta1::_DeidentificationSummary_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::privacy::dlp::v2beta1::_TransformationSummary_SummaryResult_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::privacy::dlp::v2beta1::_TransformationSummary_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "google/privacy/dlp/v2beta1/dlp.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 82);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n$google/privacy/dlp/v2beta1/dlp.proto\022\032"
      "google.privacy.dlp.v2beta1\032\034google/api/a"
      "nnotations.proto\032#google/longrunning/ope"
      "rations.proto\032(google/privacy/dlp/v2beta"
      "1/storage.proto\032\033google/protobuf/empty.p"
      "roto\032\037google/protobuf/timestamp.proto\032\026g"
      "oogle/type/date.proto\032\033google/type/timeo"
      "fday.proto\"\200\003\n\rInspectConfig\0228\n\ninfo_typ"
      "es\030\001 \003(\0132$.google.privacy.dlp.v2beta1.In"
      "foType\022>\n\016min_likelihood\030\002 \001(\0162&.google."
      "privacy.dlp.v2beta1.Likelihood\022\024\n\014max_fi"
      "ndings\030\003 \001(\005\022\025\n\rinclude_quote\030\004 \001(\010\022\025\n\re"
      "xclude_types\030\006 \001(\010\022Q\n\020info_type_limits\030\007"
      " \003(\01327.google.privacy.dlp.v2beta1.Inspec"
      "tConfig.InfoTypeLimit\032^\n\rInfoTypeLimit\0227"
      "\n\tinfo_type\030\001 \001(\0132$.google.privacy.dlp.v"
      "2beta1.InfoType\022\024\n\014max_findings\030\002 \001(\005\",\n"
      "\017OperationConfig\022\031\n\021max_item_findings\030\001 "
      "\001(\003\"}\n\013ContentItem\022\014\n\004type\030\001 \001(\t\022\016\n\004data"
      "\030\002 \001(\014H\000\022\017\n\005value\030\003 \001(\tH\000\0222\n\005table\030\004 \001(\013"
      "2!.google.privacy.dlp.v2beta1.TableH\000B\013\n"
      "\tdata_item\"\254\001\n\005Table\0224\n\007headers\030\001 \003(\0132#."
      "google.privacy.dlp.v2beta1.FieldId\0223\n\004ro"
      "ws\030\002 \003(\0132%.google.privacy.dlp.v2beta1.Ta"
      "ble.Row\0328\n\003Row\0221\n\006values\030\001 \003(\0132!.google."
      "privacy.dlp.v2beta1.Value\"b\n\rInspectResu"
      "lt\0225\n\010findings\030\001 \003(\0132#.google.privacy.dl"
      "p.v2beta1.Finding\022\032\n\022findings_truncated\030"
      "\002 \001(\010\"\366\001\n\007Finding\022\r\n\005quote\030\001 \001(\t\0227\n\tinfo"
      "_type\030\002 \001(\0132$.google.privacy.dlp.v2beta1"
      ".InfoType\022:\n\nlikelihood\030\003 \001(\0162&.google.p"
      "rivacy.dlp.v2beta1.Likelihood\0226\n\010locatio"
      "n\030\004 \001(\0132$.google.privacy.dlp.v2beta1.Loc"
      "ation\022/\n\013create_time\030\006 \001(\0132\032.google.prot"
      "obuf.Timestamp\"\362\002\n\010Location\0225\n\nbyte_rang"
      "e\030\001 \001(\0132!.google.privacy.dlp.v2beta1.Ran"
      "ge\022:\n\017codepoint_range\030\002 \001(\0132!.google.pri"
      "vacy.dlp.v2beta1.Range\022>\n\013image_boxes\030\003 "
      "\003(\0132).google.privacy.dlp.v2beta1.ImageLo"
      "cation\0229\n\nrecord_key\030\004 \001(\0132%.google.priv"
      "acy.dlp.v2beta1.RecordKey\0225\n\010field_id\030\005 "
      "\001(\0132#.google.privacy.dlp.v2beta1.FieldId"
      "\022A\n\016table_location\030\006 \001(\0132).google.privac"
      "y.dlp.v2beta1.TableLocation\"\"\n\rTableLoca"
      "tion\022\021\n\trow_index\030\001 \001(\003\"#\n\005Range\022\r\n\005star"
      "t\030\001 \001(\003\022\013\n\003end\030\002 \001(\003\"I\n\rImageLocation\022\013\n"
      "\003top\030\001 \001(\005\022\014\n\004left\030\002 \001(\005\022\r\n\005width\030\003 \001(\005\022"
      "\016\n\006height\030\004 \001(\005\"\347\004\n\024RedactContentRequest"
      "\022A\n\016inspect_config\030\001 \001(\0132).google.privac"
      "y.dlp.v2beta1.InspectConfig\0226\n\005items\030\002 \003"
      "(\0132\'.google.privacy.dlp.v2beta1.ContentI"
      "tem\022W\n\017replace_configs\030\003 \003(\0132>.google.pr"
      "ivacy.dlp.v2beta1.RedactContentRequest.R"
      "eplaceConfig\022f\n\027image_redaction_configs\030"
      "\004 \003(\0132E.google.privacy.dlp.v2beta1.Redac"
      "tContentRequest.ImageRedactionConfig\032^\n\r"
      "ReplaceConfig\0227\n\tinfo_type\030\001 \001(\0132$.googl"
      "e.privacy.dlp.v2beta1.InfoType\022\024\n\014replac"
      "e_with\030\002 \001(\t\032\262\001\n\024ImageRedactionConfig\0229\n"
      "\tinfo_type\030\001 \001(\0132$.google.privacy.dlp.v2"
      "beta1.InfoTypeH\000\022\031\n\017redact_all_text\030\002 \001("
      "\010H\000\022:\n\017redaction_color\030\003 \001(\0132!.google.pr"
      "ivacy.dlp.v2beta1.ColorB\010\n\006target\"1\n\005Col"
      "or\022\013\n\003red\030\001 \001(\002\022\r\n\005green\030\002 \001(\002\022\014\n\004blue\030\003"
      " \001(\002\"O\n\025RedactContentResponse\0226\n\005items\030\001"
      " \003(\0132\'.google.privacy.dlp.v2beta1.Conten"
      "tItem\"\336\001\n\030DeidentifyContentRequest\022G\n\021de"
      "identify_config\030\001 \001(\0132,.google.privacy.d"
      "lp.v2beta1.DeidentifyConfig\022A\n\016inspect_c"
      "onfig\030\002 \001(\0132).google.privacy.dlp.v2beta1"
      ".InspectConfig\0226\n\005items\030\003 \003(\0132\'.google.p"
      "rivacy.dlp.v2beta1.ContentItem\"\233\001\n\031Deide"
      "ntifyContentResponse\0226\n\005items\030\001 \003(\0132\'.go"
      "ogle.privacy.dlp.v2beta1.ContentItem\022F\n\t"
      "summaries\030\002 \003(\01323.google.privacy.dlp.v2b"
      "eta1.DeidentificationSummary\"\222\001\n\025Inspect"
      "ContentRequest\022A\n\016inspect_config\030\001 \001(\0132)"
      ".google.privacy.dlp.v2beta1.InspectConfi"
      "g\0226\n\005items\030\002 \003(\0132\'.google.privacy.dlp.v2"
      "beta1.ContentItem\"T\n\026InspectContentRespo"
      "nse\022:\n\007results\030\001 \003(\0132).google.privacy.dl"
      "p.v2beta1.InspectResult\"\264\002\n\035CreateInspec"
      "tOperationRequest\022A\n\016inspect_config\030\001 \001("
      "\0132).google.privacy.dlp.v2beta1.InspectCo"
      "nfig\022A\n\016storage_config\030\002 \001(\0132).google.pr"
      "ivacy.dlp.v2beta1.StorageConfig\022F\n\routpu"
      "t_config\030\003 \001(\0132/.google.privacy.dlp.v2be"
      "ta1.OutputStorageConfig\022E\n\020operation_con"
      "fig\030\005 \001(\0132+.google.privacy.dlp.v2beta1.O"
      "perationConfig\"\237\001\n\023OutputStorageConfig\022:"
      "\n\005table\030\001 \001(\0132).google.privacy.dlp.v2bet"
      "a1.BigQueryTableH\000\022D\n\014storage_path\030\002 \001(\013"
      "2,.google.privacy.dlp.v2beta1.CloudStora"
      "gePathH\000B\006\n\004type\"\\\n\022InfoTypeStatistics\0227"
      "\n\tinfo_type\030\001 \001(\0132$.google.privacy.dlp.v"
      "2beta1.InfoType\022\r\n\005count\030\002 \001(\003\"\262\003\n\030Inspe"
      "ctOperationMetadata\022\027\n\017processed_bytes\030\001"
      " \001(\003\022\035\n\025total_estimated_bytes\030\004 \001(\003\022G\n\017i"
      "nfo_type_stats\030\002 \003(\0132..google.privacy.dl"
      "p.v2beta1.InfoTypeStatistics\022/\n\013create_t"
      "ime\030\003 \001(\0132\032.google.protobuf.Timestamp\022I\n"
      "\026request_inspect_config\030\005 \001(\0132).google.p"
      "rivacy.dlp.v2beta1.InspectConfig\022I\n\026requ"
      "est_storage_config\030\006 \001(\0132).google.privac"
      "y.dlp.v2beta1.StorageConfig\022N\n\025request_o"
      "utput_config\030\007 \001(\0132/.google.privacy.dlp."
      "v2beta1.OutputStorageConfig\"&\n\026InspectOp"
      "erationResult\022\014\n\004name\030\001 \001(\t\"a\n\032ListInspe"
      "ctFindingsRequest\022\014\n\004name\030\001 \001(\t\022\021\n\tpage_"
      "size\030\002 \001(\005\022\022\n\npage_token\030\003 \001(\t\022\016\n\006filter"
      "\030\004 \001(\t\"q\n\033ListInspectFindingsResponse\0229\n"
      "\006result\030\001 \001(\0132).google.privacy.dlp.v2bet"
      "a1.InspectResult\022\027\n\017next_page_token\030\002 \001("
      "\t\"~\n\023InfoTypeDescription\022\014\n\004name\030\001 \001(\t\022\024"
      "\n\014display_name\030\002 \001(\t\022C\n\ncategories\030\003 \003(\013"
      "2/.google.privacy.dlp.v2beta1.CategoryDe"
      "scription\"\?\n\024ListInfoTypesRequest\022\020\n\010cat"
      "egory\030\001 \001(\t\022\025\n\rlanguage_code\030\002 \001(\t\"\\\n\025Li"
      "stInfoTypesResponse\022C\n\ninfo_types\030\001 \003(\0132"
      "/.google.privacy.dlp.v2beta1.InfoTypeDes"
      "cription\"9\n\023CategoryDescription\022\014\n\004name\030"
      "\001 \001(\t\022\024\n\014display_name\030\002 \001(\t\"2\n\031ListRootC"
      "ategoriesRequest\022\025\n\rlanguage_code\030\001 \001(\t\""
      "a\n\032ListRootCategoriesResponse\022C\n\ncategor"
      "ies\030\001 \003(\0132/.google.privacy.dlp.v2beta1.C"
      "ategoryDescription\"\242\001\n\034AnalyzeDataSource"
      "RiskRequest\022A\n\016privacy_metric\030\001 \001(\0132).go"
      "ogle.privacy.dlp.v2beta1.PrivacyMetric\022\?"
      "\n\014source_table\030\003 \001(\0132).google.privacy.dl"
      "p.v2beta1.BigQueryTable\"\302\006\n\rPrivacyMetri"
      "c\022`\n\026numerical_stats_config\030\001 \001(\0132>.goog"
      "le.privacy.dlp.v2beta1.PrivacyMetric.Num"
      "ericalStatsConfigH\000\022d\n\030categorical_stats"
      "_config\030\002 \001(\0132@.google.privacy.dlp.v2bet"
      "a1.PrivacyMetric.CategoricalStatsConfigH"
      "\000\022X\n\022k_anonymity_config\030\003 \001(\0132:.google.p"
      "rivacy.dlp.v2beta1.PrivacyMetric.KAnonym"
      "ityConfigH\000\022X\n\022l_diversity_config\030\004 \001(\0132"
      ":.google.privacy.dlp.v2beta1.PrivacyMetr"
      "ic.LDiversityConfigH\000\032J\n\024NumericalStatsC"
      "onfig\0222\n\005field\030\001 \001(\0132#.google.privacy.dl"
      "p.v2beta1.FieldId\032L\n\026CategoricalStatsCon"
      "fig\0222\n\005field\030\001 \001(\0132#.google.privacy.dlp."
      "v2beta1.FieldId\032\203\001\n\020KAnonymityConfig\0226\n\t"
      "quasi_ids\030\001 \003(\0132#.google.privacy.dlp.v2b"
      "eta1.FieldId\0227\n\tentity_id\030\002 \001(\0132$.google"
      ".privacy.dlp.v2beta1.EntityId\032\214\001\n\020LDiver"
      "sityConfig\0226\n\tquasi_ids\030\001 \003(\0132#.google.p"
      "rivacy.dlp.v2beta1.FieldId\022@\n\023sensitive_"
      "attribute\030\002 \001(\0132#.google.privacy.dlp.v2b"
      "eta1.FieldIdB\006\n\004type\"\350\001\n\035RiskAnalysisOpe"
      "rationMetadata\022/\n\013create_time\030\001 \001(\0132\032.go"
      "ogle.protobuf.Timestamp\022K\n\030requested_pri"
      "vacy_metric\030\002 \001(\0132).google.privacy.dlp.v"
      "2beta1.PrivacyMetric\022I\n\026requested_source"
      "_table\030\003 \001(\0132).google.privacy.dlp.v2beta"
      "1.BigQueryTable\"\353\021\n\033RiskAnalysisOperatio"
      "nResult\022n\n\026numerical_stats_result\030\003 \001(\0132"
      "L.google.privacy.dlp.v2beta1.RiskAnalysi"
      "sOperationResult.NumericalStatsResultH\000\022"
      "r\n\030categorical_stats_result\030\004 \001(\0132N.goog"
      "le.privacy.dlp.v2beta1.RiskAnalysisOpera"
      "tionResult.CategoricalStatsResultH\000\022f\n\022k"
      "_anonymity_result\030\005 \001(\0132H.google.privacy"
      ".dlp.v2beta1.RiskAnalysisOperationResult"
      ".KAnonymityResultH\000\022f\n\022l_diversity_resul"
      "t\030\006 \001(\0132H.google.privacy.dlp.v2beta1.Ris"
      "kAnalysisOperationResult.LDiversityResul"
      "tH\000\032\276\001\n\024NumericalStatsResult\0224\n\tmin_valu"
      "e\030\001 \001(\0132!.google.privacy.dlp.v2beta1.Val"
      "ue\0224\n\tmax_value\030\002 \001(\0132!.google.privacy.d"
      "lp.v2beta1.Value\022:\n\017quantile_values\030\004 \003("
      "\0132!.google.privacy.dlp.v2beta1.Value\032\372\002\n"
      "\026CategoricalStatsResult\022\231\001\n!value_freque"
      "ncy_histogram_buckets\030\005 \003(\0132n.google.pri"
      "vacy.dlp.v2beta1.RiskAnalysisOperationRe"
      "sult.CategoricalStatsResult.CategoricalS"
      "tatsHistogramBucket\032\303\001\n\037CategoricalStats"
      "HistogramBucket\022#\n\033value_frequency_lower"
      "_bound\030\001 \001(\003\022#\n\033value_frequency_upper_bo"
      "und\030\002 \001(\003\022\023\n\013bucket_size\030\003 \001(\003\022A\n\rbucket"
      "_values\030\004 \003(\0132*.google.privacy.dlp.v2bet"
      "a1.ValueFrequency\032\246\004\n\020KAnonymityResult\022\217"
      "\001\n#equivalence_class_histogram_buckets\030\005"
      " \003(\0132b.google.privacy.dlp.v2beta1.RiskAn"
      "alysisOperationResult.KAnonymityResult.K"
      "AnonymityHistogramBucket\032y\n\032KAnonymityEq"
      "uivalenceClass\022;\n\020quasi_ids_values\030\001 \003(\013"
      "2!.google.privacy.dlp.v2beta1.Value\022\036\n\026e"
      "quivalence_class_size\030\002 \001(\003\032\204\002\n\031KAnonymi"
      "tyHistogramBucket\022*\n\"equivalence_class_s"
      "ize_lower_bound\030\001 \001(\003\022*\n\"equivalence_cla"
      "ss_size_upper_bound\030\002 \001(\003\022\023\n\013bucket_size"
      "\030\003 \001(\003\022z\n\rbucket_values\030\004 \003(\0132c.google.p"
      "rivacy.dlp.v2beta1.RiskAnalysisOperation"
      "Result.KAnonymityResult.KAnonymityEquiva"
      "lenceClass\032\246\005\n\020LDiversityResult\022\227\001\n+sens"
      "itive_value_frequency_histogram_buckets\030"
      "\005 \003(\0132b.google.privacy.dlp.v2beta1.RiskA"
      "nalysisOperationResult.LDiversityResult."
      "LDiversityHistogramBucket\032\352\001\n\032LDiversity"
      "EquivalenceClass\022;\n\020quasi_ids_values\030\001 \003"
      "(\0132!.google.privacy.dlp.v2beta1.Value\022\036\n"
      "\026equivalence_class_size\030\002 \001(\003\022%\n\035num_dis"
      "tinct_sensitive_values\030\003 \001(\003\022H\n\024top_sens"
      "itive_values\030\004 \003(\0132*.google.privacy.dlp."
      "v2beta1.ValueFrequency\032\212\002\n\031LDiversityHis"
      "togramBucket\022-\n%sensitive_value_frequenc"
      "y_lower_bound\030\001 \001(\003\022-\n%sensitive_value_f"
      "requency_upper_bound\030\002 \001(\003\022\023\n\013bucket_siz"
      "e\030\003 \001(\003\022z\n\rbucket_values\030\004 \003(\0132c.google."
      "privacy.dlp.v2beta1.RiskAnalysisOperatio"
      "nResult.LDiversityResult.LDiversityEquiv"
      "alenceClassB\010\n\006result\"Q\n\016ValueFrequency\022"
      "0\n\005value\030\001 \001(\0132!.google.privacy.dlp.v2be"
      "ta1.Value\022\r\n\005count\030\002 \001(\003\"\376\001\n\005Value\022\027\n\rin"
      "teger_value\030\001 \001(\003H\000\022\025\n\013float_value\030\002 \001(\001"
      "H\000\022\026\n\014string_value\030\003 \001(\tH\000\022\027\n\rboolean_va"
      "lue\030\004 \001(\010H\000\0225\n\017timestamp_value\030\005 \001(\0132\032.g"
      "oogle.protobuf.TimestampH\000\022,\n\ntime_value"
      "\030\006 \001(\0132\026.google.type.TimeOfDayH\000\022\'\n\ndate"
      "_value\030\007 \001(\0132\021.google.type.DateH\000B\006\n\004typ"
      "e\"\323\001\n\020DeidentifyConfig\022X\n\031info_type_tran"
      "sformations\030\001 \001(\01323.google.privacy.dlp.v"
      "2beta1.InfoTypeTransformationsH\000\022S\n\026reco"
      "rd_transformations\030\002 \001(\01321.google.privac"
      "y.dlp.v2beta1.RecordTransformationsH\000B\020\n"
      "\016transformation\"\204\006\n\027PrimitiveTransformat"
      "ion\022H\n\016replace_config\030\001 \001(\0132..google.pri"
      "vacy.dlp.v2beta1.ReplaceValueConfigH\000\022A\n"
      "\rredact_config\030\002 \001(\0132(.google.privacy.dl"
      "p.v2beta1.RedactConfigH\000\022P\n\025character_ma"
      "sk_config\030\003 \001(\0132/.google.privacy.dlp.v2b"
      "eta1.CharacterMaskConfigH\000\022^\n\035crypto_rep"
      "lace_ffx_fpe_config\030\004 \001(\01325.google.priva"
      "cy.dlp.v2beta1.CryptoReplaceFfxFpeConfig"
      "H\000\022[\n\033fixed_size_bucketing_config\030\005 \001(\0132"
      "4.google.privacy.dlp.v2beta1.FixedSizeBu"
      "cketingConfigH\000\022G\n\020bucketing_config\030\006 \001("
      "\0132+.google.privacy.dlp.v2beta1.Bucketing"
      "ConfigH\000\022^\n\035replace_with_info_type_confi"
      "g\030\007 \001(\01325.google.privacy.dlp.v2beta1.Rep"
      "laceWithInfoTypeConfigH\000\022F\n\020time_part_co"
      "nfig\030\010 \001(\0132*.google.privacy.dlp.v2beta1."
      "TimePartConfigH\000\022J\n\022crypto_hash_config\030\t"
      " \001(\0132,.google.privacy.dlp.v2beta1.Crypto"
      "HashConfigH\000B\020\n\016transformation\"\341\001\n\016TimeP"
      "artConfig\022L\n\017part_to_extract\030\001 \001(\01623.goo"
      "gle.privacy.dlp.v2beta1.TimePartConfig.T"
      "imePart\"\200\001\n\010TimePart\022\031\n\025TIME_PART_UNSPEC"
      "IFIED\020\000\022\010\n\004YEAR\020\001\022\t\n\005MONTH\020\002\022\020\n\014DAY_OF_M"
      "ONTH\020\003\022\017\n\013DAY_OF_WEEK\020\004\022\020\n\014WEEK_OF_YEAR\020"
      "\005\022\017\n\013HOUR_OF_DAY\020\006\"M\n\020CryptoHashConfig\0229"
      "\n\ncrypto_key\030\001 \001(\0132%.google.privacy.dlp."
      "v2beta1.CryptoKey\"J\n\022ReplaceValueConfig\022"
      "4\n\tnew_value\030\001 \001(\0132!.google.privacy.dlp."
      "v2beta1.Value\"\033\n\031ReplaceWithInfoTypeConf"
      "ig\"\016\n\014RedactConfig\"\252\002\n\rCharsToIgnore\022\034\n\022"
      "characters_to_skip\030\001 \001(\tH\000\022_\n\033common_cha"
      "racters_to_ignore\030\002 \001(\01628.google.privacy"
      ".dlp.v2beta1.CharsToIgnore.CharacterGrou"
      "pH\000\"\213\001\n\016CharacterGroup\022\037\n\033CHARACTER_GROU"
      "P_UNSPECIFIED\020\000\022\013\n\007NUMERIC\020\001\022\024\n\020ALPHA_UP"
      "PER_CASE\020\002\022\024\n\020ALPHA_LOWER_CASE\020\003\022\017\n\013PUNC"
      "TUATION\020\004\022\016\n\nWHITESPACE\020\005B\014\n\ncharacters\""
      "\250\001\n\023CharacterMaskConfig\022\031\n\021masking_chara"
      "cter\030\001 \001(\t\022\026\n\016number_to_mask\030\002 \001(\005\022\025\n\rre"
      "verse_order\030\003 \001(\010\022G\n\024characters_to_ignor"
      "e\030\004 \003(\0132).google.privacy.dlp.v2beta1.Cha"
      "rsToIgnore\"\237\001\n\030FixedSizeBucketingConfig\022"
      "6\n\013lower_bound\030\001 \001(\0132!.google.privacy.dl"
      "p.v2beta1.Value\0226\n\013upper_bound\030\002 \001(\0132!.g"
      "oogle.privacy.dlp.v2beta1.Value\022\023\n\013bucke"
      "t_size\030\003 \001(\001\"\377\001\n\017BucketingConfig\022C\n\007buck"
      "ets\030\001 \003(\01322.google.privacy.dlp.v2beta1.B"
      "ucketingConfig.Bucket\032\246\001\n\006Bucket\022.\n\003min\030"
      "\001 \001(\0132!.google.privacy.dlp.v2beta1.Value"
      "\022.\n\003max\030\002 \001(\0132!.google.privacy.dlp.v2bet"
      "a1.Value\022<\n\021replacement_value\030\003 \001(\0132!.go"
      "ogle.privacy.dlp.v2beta1.Value\"\305\003\n\031Crypt"
      "oReplaceFfxFpeConfig\0229\n\ncrypto_key\030\001 \001(\013"
      "2%.google.privacy.dlp.v2beta1.CryptoKey\022"
      "4\n\007context\030\002 \001(\0132#.google.privacy.dlp.v2"
      "beta1.FieldId\022h\n\017common_alphabet\030\004 \001(\0162M"
      ".google.privacy.dlp.v2beta1.CryptoReplac"
      "eFfxFpeConfig.FfxCommonNativeAlphabetH\000\022"
      "\031\n\017custom_alphabet\030\005 \001(\tH\000\022\017\n\005radix\030\006 \001("
      "\005H\000\"\224\001\n\027FfxCommonNativeAlphabet\022*\n&FFX_C"
      "OMMON_NATIVE_ALPHABET_UNSPECIFIED\020\000\022\013\n\007N"
      "UMERIC\020\001\022\017\n\013HEXADECIMAL\020\002\022\034\n\030UPPER_CASE_"
      "ALPHA_NUMERIC\020\003\022\021\n\rALPHA_NUMERIC\020\004B\n\n\010al"
      "phabet\"\347\001\n\tCryptoKey\022C\n\ttransient\030\001 \001(\0132"
      "..google.privacy.dlp.v2beta1.TransientCr"
      "yptoKeyH\000\022C\n\tunwrapped\030\002 \001(\0132..google.pr"
      "ivacy.dlp.v2beta1.UnwrappedCryptoKeyH\000\022F"
      "\n\013kms_wrapped\030\003 \001(\0132/.google.privacy.dlp"
      ".v2beta1.KmsWrappedCryptoKeyH\000B\010\n\006source"
      "\"\"\n\022TransientCryptoKey\022\014\n\004name\030\001 \001(\t\"!\n\022"
      "UnwrappedCryptoKey\022\013\n\003key\030\001 \001(\014\"C\n\023KmsWr"
      "appedCryptoKey\022\023\n\013wrapped_key\030\001 \001(\014\022\027\n\017c"
      "rypto_key_name\030\002 \001(\t\"\252\002\n\027InfoTypeTransfo"
      "rmations\022c\n\017transformations\030\001 \003(\0132J.goog"
      "le.privacy.dlp.v2beta1.InfoTypeTransform"
      "ations.InfoTypeTransformation\032\251\001\n\026InfoTy"
      "peTransformation\0228\n\ninfo_types\030\001 \003(\0132$.g"
      "oogle.privacy.dlp.v2beta1.InfoType\022U\n\030pr"
      "imitive_transformation\030\002 \001(\01323.google.pr"
      "ivacy.dlp.v2beta1.PrimitiveTransformatio"
      "n\"\317\002\n\023FieldTransformation\0223\n\006fields\030\001 \003("
      "\0132#.google.privacy.dlp.v2beta1.FieldId\022>"
      "\n\tcondition\030\003 \001(\0132+.google.privacy.dlp.v"
      "2beta1.RecordCondition\022W\n\030primitive_tran"
      "sformation\030\004 \001(\01323.google.privacy.dlp.v2"
      "beta1.PrimitiveTransformationH\000\022X\n\031info_"
      "type_transformations\030\005 \001(\01323.google.priv"
      "acy.dlp.v2beta1.InfoTypeTransformationsH"
      "\000B\020\n\016transformation\"\263\001\n\025RecordTransforma"
      "tions\022N\n\025field_transformations\030\001 \003(\0132/.g"
      "oogle.privacy.dlp.v2beta1.FieldTransform"
      "ation\022J\n\023record_suppressions\030\002 \003(\0132-.goo"
      "gle.privacy.dlp.v2beta1.RecordSuppressio"
      "n\"S\n\021RecordSuppression\022>\n\tcondition\030\001 \001("
      "\0132+.google.privacy.dlp.v2beta1.RecordCon"
      "dition\"\365\004\n\017RecordCondition\022L\n\013expression"
      "s\030\003 \001(\01327.google.privacy.dlp.v2beta1.Rec"
      "ordCondition.Expressions\032\263\001\n\tCondition\0222"
      "\n\005field\030\001 \001(\0132#.google.privacy.dlp.v2bet"
      "a1.FieldId\022@\n\010operator\030\003 \001(\0162..google.pr"
      "ivacy.dlp.v2beta1.RelationalOperator\0220\n\005"
      "value\030\004 \001(\0132!.google.privacy.dlp.v2beta1"
      ".Value\032W\n\nConditions\022I\n\nconditions\030\001 \003(\013"
      "25.google.privacy.dlp.v2beta1.RecordCond"
      "ition.Condition\032\204\002\n\013Expressions\022a\n\020logic"
      "al_operator\030\001 \001(\0162G.google.privacy.dlp.v"
      "2beta1.RecordCondition.Expressions.Logic"
      "alOperator\022L\n\nconditions\030\003 \001(\01326.google."
      "privacy.dlp.v2beta1.RecordCondition.Cond"
      "itionsH\000\"<\n\017LogicalOperator\022 \n\034LOGICAL_O"
      "PERATOR_UNSPECIFIED\020\000\022\007\n\003AND\020\001B\006\n\004type\"\211"
      "\001\n\027DeidentificationSummary\022\031\n\021transforme"
      "d_bytes\030\002 \001(\003\022S\n\030transformation_summarie"
      "s\030\003 \003(\01321.google.privacy.dlp.v2beta1.Tra"
      "nsformationSummary\"\247\005\n\025TransformationSum"
      "mary\0227\n\tinfo_type\030\001 \001(\0132$.google.privacy"
      ".dlp.v2beta1.InfoType\0222\n\005field\030\002 \001(\0132#.g"
      "oogle.privacy.dlp.v2beta1.FieldId\022K\n\016tra"
      "nsformation\030\003 \001(\01323.google.privacy.dlp.v"
      "2beta1.PrimitiveTransformation\022N\n\025field_"
      "transformations\030\005 \003(\0132/.google.privacy.d"
      "lp.v2beta1.FieldTransformation\022F\n\017record"
      "_suppress\030\006 \001(\0132-.google.privacy.dlp.v2b"
      "eta1.RecordSuppression\022P\n\007results\030\004 \003(\0132"
      "\?.google.privacy.dlp.v2beta1.Transformat"
      "ionSummary.SummaryResult\032\211\001\n\rSummaryResu"
      "lt\022\r\n\005count\030\001 \001(\003\022X\n\004code\030\002 \001(\0162J.google"
      ".privacy.dlp.v2beta1.TransformationSumma"
      "ry.TransformationResultCode\022\017\n\007details\030\003"
      " \001(\t\"^\n\030TransformationResultCode\022*\n&TRAN"
      "SFORMATION_RESULT_CODE_UNSPECIFIED\020\000\022\013\n\007"
      "SUCCESS\020\001\022\t\n\005ERROR\020\002*t\n\nLikelihood\022\032\n\026LI"
      "KELIHOOD_UNSPECIFIED\020\000\022\021\n\rVERY_UNLIKELY\020"
      "\001\022\014\n\010UNLIKELY\020\002\022\014\n\010POSSIBLE\020\003\022\n\n\006LIKELY\020"
      "\004\022\017\n\013VERY_LIKELY\020\005*\273\001\n\022RelationalOperato"
      "r\022#\n\037RELATIONAL_OPERATOR_UNSPECIFIED\020\000\022\014"
      "\n\010EQUAL_TO\020\001\022\020\n\014NOT_EQUAL_TO\020\002\022\020\n\014GREATE"
      "R_THAN\020\003\022\r\n\tLESS_THAN\020\004\022\032\n\026GREATER_THAN_"
      "OR_EQUALS\020\005\022\027\n\023LESS_THAN_OR_EQUALS\020\006\022\n\n\006"
      "EXISTS\020\0072\274\n\n\nDlpService\022\234\001\n\016InspectConte"
      "nt\0221.google.privacy.dlp.v2beta1.InspectC"
      "ontentRequest\0322.google.privacy.dlp.v2bet"
      "a1.InspectContentResponse\"#\202\323\344\223\002\035\"\030/v2be"
      "ta1/content:inspect:\001*\022\230\001\n\rRedactContent"
      "\0220.google.privacy.dlp.v2beta1.RedactCont"
      "entRequest\0321.google.privacy.dlp.v2beta1."
      "RedactContentResponse\"\"\202\323\344\223\002\034\"\027/v2beta1/"
      "content:redact:\001*\022\250\001\n\021DeidentifyContent\022"
      "4.google.privacy.dlp.v2beta1.DeidentifyC"
      "ontentRequest\0325.google.privacy.dlp.v2bet"
      "a1.DeidentifyContentResponse\"&\202\323\344\223\002 \"\033/v"
      "2beta1/content:deidentify:\001*\022\232\001\n\026CreateI"
      "nspectOperation\0229.google.privacy.dlp.v2b"
      "eta1.CreateInspectOperationRequest\032\035.goo"
      "gle.longrunning.Operation\"&\202\323\344\223\002 \"\033/v2be"
      "ta1/inspect/operations:\001*\022\230\001\n\025AnalyzeDat"
      "aSourceRisk\0228.google.privacy.dlp.v2beta1"
      ".AnalyzeDataSourceRiskRequest\032\035.google.l"
      "ongrunning.Operation\"&\202\323\344\223\002 \"\033/v2beta1/d"
      "ataSource:analyze:\001*\022\272\001\n\023ListInspectFind"
      "ings\0226.google.privacy.dlp.v2beta1.ListIn"
      "spectFindingsRequest\0327.google.privacy.dl"
      "p.v2beta1.ListInspectFindingsResponse\"2\202"
      "\323\344\223\002,\022*/v2beta1/{name=inspect/results/*}"
      "/findings\022\254\001\n\rListInfoTypes\0220.google.pri"
      "vacy.dlp.v2beta1.ListInfoTypesRequest\0321."
      "google.privacy.dlp.v2beta1.ListInfoTypes"
      "Response\"6\202\323\344\223\0020\022./v2beta1/rootCategorie"
      "s/{category=*}/infoTypes\022\244\001\n\022ListRootCat"
      "egories\0225.google.privacy.dlp.v2beta1.Lis"
      "tRootCategoriesRequest\0326.google.privacy."
      "dlp.v2beta1.ListRootCategoriesResponse\"\037"
      "\202\323\344\223\002\031\022\027/v2beta1/rootCategoriesB\206\001\n\036com."
      "google.privacy.dlp.v2beta1B\010DlpProtoP\001Z="
      "google.golang.org/genproto/googleapis/pr"
      "ivacy/dlp/v2beta1;dlp\252\002\030Google.Cloud.Dlp"
      ".V2Beta1b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 16176);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "google/privacy/dlp/v2beta1/dlp.proto", &protobuf_RegisterTypes);
  ::protobuf_google_2fapi_2fannotations_2eproto::AddDescriptors();
  ::protobuf_google_2flongrunning_2foperations_2eproto::AddDescriptors();
  ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fstorage_2eproto::AddDescriptors();
  ::protobuf_google_2fprotobuf_2fempty_2eproto::AddDescriptors();
  ::protobuf_google_2fprotobuf_2ftimestamp_2eproto::AddDescriptors();
  ::protobuf_google_2ftype_2fdate_2eproto::AddDescriptors();
  ::protobuf_google_2ftype_2ftimeofday_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto
namespace google {
namespace privacy {
namespace dlp {
namespace v2beta1 {
const ::google::protobuf::EnumDescriptor* TimePartConfig_TimePart_descriptor() {
  protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::file_level_enum_descriptors[0];
}
bool TimePartConfig_TimePart_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const TimePartConfig_TimePart TimePartConfig::TIME_PART_UNSPECIFIED;
const TimePartConfig_TimePart TimePartConfig::YEAR;
const TimePartConfig_TimePart TimePartConfig::MONTH;
const TimePartConfig_TimePart TimePartConfig::DAY_OF_MONTH;
const TimePartConfig_TimePart TimePartConfig::DAY_OF_WEEK;
const TimePartConfig_TimePart TimePartConfig::WEEK_OF_YEAR;
const TimePartConfig_TimePart TimePartConfig::HOUR_OF_DAY;
const TimePartConfig_TimePart TimePartConfig::TimePart_MIN;
const TimePartConfig_TimePart TimePartConfig::TimePart_MAX;
const int TimePartConfig::TimePart_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* CharsToIgnore_CharacterGroup_descriptor() {
  protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::file_level_enum_descriptors[1];
}
bool CharsToIgnore_CharacterGroup_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const CharsToIgnore_CharacterGroup CharsToIgnore::CHARACTER_GROUP_UNSPECIFIED;
const CharsToIgnore_CharacterGroup CharsToIgnore::NUMERIC;
const CharsToIgnore_CharacterGroup CharsToIgnore::ALPHA_UPPER_CASE;
const CharsToIgnore_CharacterGroup CharsToIgnore::ALPHA_LOWER_CASE;
const CharsToIgnore_CharacterGroup CharsToIgnore::PUNCTUATION;
const CharsToIgnore_CharacterGroup CharsToIgnore::WHITESPACE;
const CharsToIgnore_CharacterGroup CharsToIgnore::CharacterGroup_MIN;
const CharsToIgnore_CharacterGroup CharsToIgnore::CharacterGroup_MAX;
const int CharsToIgnore::CharacterGroup_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* CryptoReplaceFfxFpeConfig_FfxCommonNativeAlphabet_descriptor() {
  protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::file_level_enum_descriptors[2];
}
bool CryptoReplaceFfxFpeConfig_FfxCommonNativeAlphabet_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const CryptoReplaceFfxFpeConfig_FfxCommonNativeAlphabet CryptoReplaceFfxFpeConfig::FFX_COMMON_NATIVE_ALPHABET_UNSPECIFIED;
const CryptoReplaceFfxFpeConfig_FfxCommonNativeAlphabet CryptoReplaceFfxFpeConfig::NUMERIC;
const CryptoReplaceFfxFpeConfig_FfxCommonNativeAlphabet CryptoReplaceFfxFpeConfig::HEXADECIMAL;
const CryptoReplaceFfxFpeConfig_FfxCommonNativeAlphabet CryptoReplaceFfxFpeConfig::UPPER_CASE_ALPHA_NUMERIC;
const CryptoReplaceFfxFpeConfig_FfxCommonNativeAlphabet CryptoReplaceFfxFpeConfig::ALPHA_NUMERIC;
const CryptoReplaceFfxFpeConfig_FfxCommonNativeAlphabet CryptoReplaceFfxFpeConfig::FfxCommonNativeAlphabet_MIN;
const CryptoReplaceFfxFpeConfig_FfxCommonNativeAlphabet CryptoReplaceFfxFpeConfig::FfxCommonNativeAlphabet_MAX;
const int CryptoReplaceFfxFpeConfig::FfxCommonNativeAlphabet_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* RecordCondition_Expressions_LogicalOperator_descriptor() {
  protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::file_level_enum_descriptors[3];
}
bool RecordCondition_Expressions_LogicalOperator_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const RecordCondition_Expressions_LogicalOperator RecordCondition_Expressions::LOGICAL_OPERATOR_UNSPECIFIED;
const RecordCondition_Expressions_LogicalOperator RecordCondition_Expressions::AND;
const RecordCondition_Expressions_LogicalOperator RecordCondition_Expressions::LogicalOperator_MIN;
const RecordCondition_Expressions_LogicalOperator RecordCondition_Expressions::LogicalOperator_MAX;
const int RecordCondition_Expressions::LogicalOperator_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* TransformationSummary_TransformationResultCode_descriptor() {
  protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::file_level_enum_descriptors[4];
}
bool TransformationSummary_TransformationResultCode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const TransformationSummary_TransformationResultCode TransformationSummary::TRANSFORMATION_RESULT_CODE_UNSPECIFIED;
const TransformationSummary_TransformationResultCode TransformationSummary::SUCCESS;
const TransformationSummary_TransformationResultCode TransformationSummary::ERROR;
const TransformationSummary_TransformationResultCode TransformationSummary::TransformationResultCode_MIN;
const TransformationSummary_TransformationResultCode TransformationSummary::TransformationResultCode_MAX;
const int TransformationSummary::TransformationResultCode_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Likelihood_descriptor() {
  protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::file_level_enum_descriptors[5];
}
bool Likelihood_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* RelationalOperator_descriptor() {
  protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::file_level_enum_descriptors[6];
}
bool RelationalOperator_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void InspectConfig_InfoTypeLimit::InitAsDefaultInstance() {
  ::google::privacy::dlp::v2beta1::_InspectConfig_InfoTypeLimit_default_instance_._instance.get_mutable()->info_type_ = const_cast< ::google::privacy::dlp::v2beta1::InfoType*>(
      ::google::privacy::dlp::v2beta1::InfoType::internal_default_instance());
}
void InspectConfig_InfoTypeLimit::clear_info_type() {
  if (GetArenaNoVirtual() == NULL && info_type_ != NULL) {
    delete info_type_;
  }
  info_type_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int InspectConfig_InfoTypeLimit::kInfoTypeFieldNumber;
const int InspectConfig_InfoTypeLimit::kMaxFindingsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

InspectConfig_InfoTypeLimit::InspectConfig_InfoTypeLimit()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaultsInspectConfig_InfoTypeLimit();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.privacy.dlp.v2beta1.InspectConfig.InfoTypeLimit)
}
InspectConfig_InfoTypeLimit::InspectConfig_InfoTypeLimit(const InspectConfig_InfoTypeLimit& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_info_type()) {
    info_type_ = new ::google::privacy::dlp::v2beta1::InfoType(*from.info_type_);
  } else {
    info_type_ = NULL;
  }
  max_findings_ = from.max_findings_;
  // @@protoc_insertion_point(copy_constructor:google.privacy.dlp.v2beta1.InspectConfig.InfoTypeLimit)
}

void InspectConfig_InfoTypeLimit::SharedCtor() {
  ::memset(&info_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&max_findings_) -
      reinterpret_cast<char*>(&info_type_)) + sizeof(max_findings_));
  _cached_size_ = 0;
}

InspectConfig_InfoTypeLimit::~InspectConfig_InfoTypeLimit() {
  // @@protoc_insertion_point(destructor:google.privacy.dlp.v2beta1.InspectConfig.InfoTypeLimit)
  SharedDtor();
}

void InspectConfig_InfoTypeLimit::SharedDtor() {
  if (this != internal_default_instance()) delete info_type_;
}

void InspectConfig_InfoTypeLimit::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InspectConfig_InfoTypeLimit::descriptor() {
  ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const InspectConfig_InfoTypeLimit& InspectConfig_InfoTypeLimit::default_instance() {
  ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaultsInspectConfig_InfoTypeLimit();
  return *internal_default_instance();
}

InspectConfig_InfoTypeLimit* InspectConfig_InfoTypeLimit::New(::google::protobuf::Arena* arena) const {
  InspectConfig_InfoTypeLimit* n = new InspectConfig_InfoTypeLimit;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void InspectConfig_InfoTypeLimit::Clear() {
// @@protoc_insertion_point(message_clear_start:google.privacy.dlp.v2beta1.InspectConfig.InfoTypeLimit)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && info_type_ != NULL) {
    delete info_type_;
  }
  info_type_ = NULL;
  max_findings_ = 0;
  _internal_metadata_.Clear();
}

bool InspectConfig_InfoTypeLimit::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.privacy.dlp.v2beta1.InspectConfig.InfoTypeLimit)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .google.privacy.dlp.v2beta1.InfoType info_type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_info_type()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 max_findings = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_findings_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.privacy.dlp.v2beta1.InspectConfig.InfoTypeLimit)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.privacy.dlp.v2beta1.InspectConfig.InfoTypeLimit)
  return false;
#undef DO_
}

void InspectConfig_InfoTypeLimit::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.privacy.dlp.v2beta1.InspectConfig.InfoTypeLimit)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.privacy.dlp.v2beta1.InfoType info_type = 1;
  if (this->has_info_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->info_type_, output);
  }

  // int32 max_findings = 2;
  if (this->max_findings() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->max_findings(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:google.privacy.dlp.v2beta1.InspectConfig.InfoTypeLimit)
}

::google::protobuf::uint8* InspectConfig_InfoTypeLimit::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.privacy.dlp.v2beta1.InspectConfig.InfoTypeLimit)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.privacy.dlp.v2beta1.InfoType info_type = 1;
  if (this->has_info_type()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->info_type_, deterministic, target);
  }

  // int32 max_findings = 2;
  if (this->max_findings() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->max_findings(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.privacy.dlp.v2beta1.InspectConfig.InfoTypeLimit)
  return target;
}

size_t InspectConfig_InfoTypeLimit::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.privacy.dlp.v2beta1.InspectConfig.InfoTypeLimit)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .google.privacy.dlp.v2beta1.InfoType info_type = 1;
  if (this->has_info_type()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->info_type_);
  }

  // int32 max_findings = 2;
  if (this->max_findings() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->max_findings());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InspectConfig_InfoTypeLimit::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.privacy.dlp.v2beta1.InspectConfig.InfoTypeLimit)
  GOOGLE_DCHECK_NE(&from, this);
  const InspectConfig_InfoTypeLimit* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const InspectConfig_InfoTypeLimit>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.privacy.dlp.v2beta1.InspectConfig.InfoTypeLimit)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.privacy.dlp.v2beta1.InspectConfig.InfoTypeLimit)
    MergeFrom(*source);
  }
}

void InspectConfig_InfoTypeLimit::MergeFrom(const InspectConfig_InfoTypeLimit& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.privacy.dlp.v2beta1.InspectConfig.InfoTypeLimit)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_info_type()) {
    mutable_info_type()->::google::privacy::dlp::v2beta1::InfoType::MergeFrom(from.info_type());
  }
  if (from.max_findings() != 0) {
    set_max_findings(from.max_findings());
  }
}

void InspectConfig_InfoTypeLimit::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.privacy.dlp.v2beta1.InspectConfig.InfoTypeLimit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InspectConfig_InfoTypeLimit::CopyFrom(const InspectConfig_InfoTypeLimit& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.privacy.dlp.v2beta1.InspectConfig.InfoTypeLimit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InspectConfig_InfoTypeLimit::IsInitialized() const {
  return true;
}

void InspectConfig_InfoTypeLimit::Swap(InspectConfig_InfoTypeLimit* other) {
  if (other == this) return;
  InternalSwap(other);
}
void InspectConfig_InfoTypeLimit::InternalSwap(InspectConfig_InfoTypeLimit* other) {
  using std::swap;
  swap(info_type_, other->info_type_);
  swap(max_findings_, other->max_findings_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata InspectConfig_InfoTypeLimit::GetMetadata() const {
  protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void InspectConfig::InitAsDefaultInstance() {
}
void InspectConfig::clear_info_types() {
  info_types_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int InspectConfig::kInfoTypesFieldNumber;
const int InspectConfig::kMinLikelihoodFieldNumber;
const int InspectConfig::kMaxFindingsFieldNumber;
const int InspectConfig::kIncludeQuoteFieldNumber;
const int InspectConfig::kExcludeTypesFieldNumber;
const int InspectConfig::kInfoTypeLimitsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

InspectConfig::InspectConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaultsInspectConfig();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.privacy.dlp.v2beta1.InspectConfig)
}
InspectConfig::InspectConfig(const InspectConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      info_types_(from.info_types_),
      info_type_limits_(from.info_type_limits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&min_likelihood_, &from.min_likelihood_,
    static_cast<size_t>(reinterpret_cast<char*>(&exclude_types_) -
    reinterpret_cast<char*>(&min_likelihood_)) + sizeof(exclude_types_));
  // @@protoc_insertion_point(copy_constructor:google.privacy.dlp.v2beta1.InspectConfig)
}

void InspectConfig::SharedCtor() {
  ::memset(&min_likelihood_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&exclude_types_) -
      reinterpret_cast<char*>(&min_likelihood_)) + sizeof(exclude_types_));
  _cached_size_ = 0;
}

InspectConfig::~InspectConfig() {
  // @@protoc_insertion_point(destructor:google.privacy.dlp.v2beta1.InspectConfig)
  SharedDtor();
}

void InspectConfig::SharedDtor() {
}

void InspectConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InspectConfig::descriptor() {
  ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const InspectConfig& InspectConfig::default_instance() {
  ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaultsInspectConfig();
  return *internal_default_instance();
}

InspectConfig* InspectConfig::New(::google::protobuf::Arena* arena) const {
  InspectConfig* n = new InspectConfig;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void InspectConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:google.privacy.dlp.v2beta1.InspectConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  info_types_.Clear();
  info_type_limits_.Clear();
  ::memset(&min_likelihood_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&exclude_types_) -
      reinterpret_cast<char*>(&min_likelihood_)) + sizeof(exclude_types_));
  _internal_metadata_.Clear();
}

bool InspectConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.privacy.dlp.v2beta1.InspectConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .google.privacy.dlp.v2beta1.InfoType info_types = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_info_types()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.privacy.dlp.v2beta1.Likelihood min_likelihood = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_min_likelihood(static_cast< ::google::privacy::dlp::v2beta1::Likelihood >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 max_findings = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_findings_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool include_quote = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &include_quote_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool exclude_types = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &exclude_types_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .google.privacy.dlp.v2beta1.InspectConfig.InfoTypeLimit info_type_limits = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_info_type_limits()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.privacy.dlp.v2beta1.InspectConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.privacy.dlp.v2beta1.InspectConfig)
  return false;
#undef DO_
}

void InspectConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.privacy.dlp.v2beta1.InspectConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .google.privacy.dlp.v2beta1.InfoType info_types = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->info_types_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->info_types(static_cast<int>(i)), output);
  }

  // .google.privacy.dlp.v2beta1.Likelihood min_likelihood = 2;
  if (this->min_likelihood() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->min_likelihood(), output);
  }

  // int32 max_findings = 3;
  if (this->max_findings() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->max_findings(), output);
  }

  // bool include_quote = 4;
  if (this->include_quote() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->include_quote(), output);
  }

  // bool exclude_types = 6;
  if (this->exclude_types() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->exclude_types(), output);
  }

  // repeated .google.privacy.dlp.v2beta1.InspectConfig.InfoTypeLimit info_type_limits = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->info_type_limits_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->info_type_limits(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:google.privacy.dlp.v2beta1.InspectConfig)
}

::google::protobuf::uint8* InspectConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.privacy.dlp.v2beta1.InspectConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .google.privacy.dlp.v2beta1.InfoType info_types = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->info_types_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->info_types(static_cast<int>(i)), deterministic, target);
  }

  // .google.privacy.dlp.v2beta1.Likelihood min_likelihood = 2;
  if (this->min_likelihood() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->min_likelihood(), target);
  }

  // int32 max_findings = 3;
  if (this->max_findings() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->max_findings(), target);
  }

  // bool include_quote = 4;
  if (this->include_quote() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->include_quote(), target);
  }

  // bool exclude_types = 6;
  if (this->exclude_types() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->exclude_types(), target);
  }

  // repeated .google.privacy.dlp.v2beta1.InspectConfig.InfoTypeLimit info_type_limits = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->info_type_limits_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, this->info_type_limits(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.privacy.dlp.v2beta1.InspectConfig)
  return target;
}

size_t InspectConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.privacy.dlp.v2beta1.InspectConfig)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .google.privacy.dlp.v2beta1.InfoType info_types = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->info_types_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->info_types(static_cast<int>(i)));
    }
  }

  // repeated .google.privacy.dlp.v2beta1.InspectConfig.InfoTypeLimit info_type_limits = 7;
  {
    unsigned int count = static_cast<unsigned int>(this->info_type_limits_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->info_type_limits(static_cast<int>(i)));
    }
  }

  // .google.privacy.dlp.v2beta1.Likelihood min_likelihood = 2;
  if (this->min_likelihood() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->min_likelihood());
  }

  // int32 max_findings = 3;
  if (this->max_findings() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->max_findings());
  }

  // bool include_quote = 4;
  if (this->include_quote() != 0) {
    total_size += 1 + 1;
  }

  // bool exclude_types = 6;
  if (this->exclude_types() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InspectConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.privacy.dlp.v2beta1.InspectConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const InspectConfig* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const InspectConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.privacy.dlp.v2beta1.InspectConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.privacy.dlp.v2beta1.InspectConfig)
    MergeFrom(*source);
  }
}

void InspectConfig::MergeFrom(const InspectConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.privacy.dlp.v2beta1.InspectConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  info_types_.MergeFrom(from.info_types_);
  info_type_limits_.MergeFrom(from.info_type_limits_);
  if (from.min_likelihood() != 0) {
    set_min_likelihood(from.min_likelihood());
  }
  if (from.max_findings() != 0) {
    set_max_findings(from.max_findings());
  }
  if (from.include_quote() != 0) {
    set_include_quote(from.include_quote());
  }
  if (from.exclude_types() != 0) {
    set_exclude_types(from.exclude_types());
  }
}

void InspectConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.privacy.dlp.v2beta1.InspectConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InspectConfig::CopyFrom(const InspectConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.privacy.dlp.v2beta1.InspectConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InspectConfig::IsInitialized() const {
  return true;
}

void InspectConfig::Swap(InspectConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void InspectConfig::InternalSwap(InspectConfig* other) {
  using std::swap;
  info_types_.InternalSwap(&other->info_types_);
  info_type_limits_.InternalSwap(&other->info_type_limits_);
  swap(min_likelihood_, other->min_likelihood_);
  swap(max_findings_, other->max_findings_);
  swap(include_quote_, other->include_quote_);
  swap(exclude_types_, other->exclude_types_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata InspectConfig::GetMetadata() const {
  protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void OperationConfig::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int OperationConfig::kMaxItemFindingsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OperationConfig::OperationConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaultsOperationConfig();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.privacy.dlp.v2beta1.OperationConfig)
}
OperationConfig::OperationConfig(const OperationConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  max_item_findings_ = from.max_item_findings_;
  // @@protoc_insertion_point(copy_constructor:google.privacy.dlp.v2beta1.OperationConfig)
}

void OperationConfig::SharedCtor() {
  max_item_findings_ = GOOGLE_LONGLONG(0);
  _cached_size_ = 0;
}

OperationConfig::~OperationConfig() {
  // @@protoc_insertion_point(destructor:google.privacy.dlp.v2beta1.OperationConfig)
  SharedDtor();
}

void OperationConfig::SharedDtor() {
}

void OperationConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OperationConfig::descriptor() {
  ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const OperationConfig& OperationConfig::default_instance() {
  ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaultsOperationConfig();
  return *internal_default_instance();
}

OperationConfig* OperationConfig::New(::google::protobuf::Arena* arena) const {
  OperationConfig* n = new OperationConfig;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void OperationConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:google.privacy.dlp.v2beta1.OperationConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  max_item_findings_ = GOOGLE_LONGLONG(0);
  _internal_metadata_.Clear();
}

bool OperationConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.privacy.dlp.v2beta1.OperationConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 max_item_findings = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &max_item_findings_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.privacy.dlp.v2beta1.OperationConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.privacy.dlp.v2beta1.OperationConfig)
  return false;
#undef DO_
}

void OperationConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.privacy.dlp.v2beta1.OperationConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 max_item_findings = 1;
  if (this->max_item_findings() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->max_item_findings(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:google.privacy.dlp.v2beta1.OperationConfig)
}

::google::protobuf::uint8* OperationConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.privacy.dlp.v2beta1.OperationConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 max_item_findings = 1;
  if (this->max_item_findings() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->max_item_findings(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.privacy.dlp.v2beta1.OperationConfig)
  return target;
}

size_t OperationConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.privacy.dlp.v2beta1.OperationConfig)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // int64 max_item_findings = 1;
  if (this->max_item_findings() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->max_item_findings());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OperationConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.privacy.dlp.v2beta1.OperationConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const OperationConfig* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const OperationConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.privacy.dlp.v2beta1.OperationConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.privacy.dlp.v2beta1.OperationConfig)
    MergeFrom(*source);
  }
}

void OperationConfig::MergeFrom(const OperationConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.privacy.dlp.v2beta1.OperationConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.max_item_findings() != 0) {
    set_max_item_findings(from.max_item_findings());
  }
}

void OperationConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.privacy.dlp.v2beta1.OperationConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OperationConfig::CopyFrom(const OperationConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.privacy.dlp.v2beta1.OperationConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OperationConfig::IsInitialized() const {
  return true;
}

void OperationConfig::Swap(OperationConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void OperationConfig::InternalSwap(OperationConfig* other) {
  using std::swap;
  swap(max_item_findings_, other->max_item_findings_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata OperationConfig::GetMetadata() const {
  protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ContentItem::InitAsDefaultInstance() {
  ::google::privacy::dlp::v2beta1::_ContentItem_default_instance_.data_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::google::privacy::dlp::v2beta1::_ContentItem_default_instance_.value_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::google::privacy::dlp::v2beta1::_ContentItem_default_instance_.table_ = const_cast< ::google::privacy::dlp::v2beta1::Table*>(
      ::google::privacy::dlp::v2beta1::Table::internal_default_instance());
}
void ContentItem::set_allocated_table(::google::privacy::dlp::v2beta1::Table* table) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_data_item();
  if (table) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      table = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, table, submessage_arena);
    }
    set_has_table();
    data_item_.table_ = table;
  }
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2beta1.ContentItem.table)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ContentItem::kTypeFieldNumber;
const int ContentItem::kDataFieldNumber;
const int ContentItem::kValueFieldNumber;
const int ContentItem::kTableFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ContentItem::ContentItem()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaultsContentItem();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.privacy.dlp.v2beta1.ContentItem)
}
ContentItem::ContentItem(const ContentItem& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.type().size() > 0) {
    type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.type_);
  }
  clear_has_data_item();
  switch (from.data_item_case()) {
    case kData: {
      set_data(from.data());
      break;
    }
    case kValue: {
      set_value(from.value());
      break;
    }
    case kTable: {
      mutable_table()->::google::privacy::dlp::v2beta1::Table::MergeFrom(from.table());
      break;
    }
    case DATA_ITEM_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:google.privacy.dlp.v2beta1.ContentItem)
}

void ContentItem::SharedCtor() {
  type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_data_item();
  _cached_size_ = 0;
}

ContentItem::~ContentItem() {
  // @@protoc_insertion_point(destructor:google.privacy.dlp.v2beta1.ContentItem)
  SharedDtor();
}

void ContentItem::SharedDtor() {
  type_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (has_data_item()) {
    clear_data_item();
  }
}

void ContentItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ContentItem::descriptor() {
  ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ContentItem& ContentItem::default_instance() {
  ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaultsContentItem();
  return *internal_default_instance();
}

ContentItem* ContentItem::New(::google::protobuf::Arena* arena) const {
  ContentItem* n = new ContentItem;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ContentItem::clear_data_item() {
// @@protoc_insertion_point(one_of_clear_start:google.privacy.dlp.v2beta1.ContentItem)
  switch (data_item_case()) {
    case kData: {
      data_item_.data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case kValue: {
      data_item_.value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case kTable: {
      delete data_item_.table_;
      break;
    }
    case DATA_ITEM_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = DATA_ITEM_NOT_SET;
}


void ContentItem::Clear() {
// @@protoc_insertion_point(message_clear_start:google.privacy.dlp.v2beta1.ContentItem)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_data_item();
  _internal_metadata_.Clear();
}

bool ContentItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.privacy.dlp.v2beta1.ContentItem)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_type()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->type().data(), static_cast<int>(this->type().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.privacy.dlp.v2beta1.ContentItem.type"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes data = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string value = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->value().data(), static_cast<int>(this->value().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.privacy.dlp.v2beta1.ContentItem.value"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.privacy.dlp.v2beta1.Table table = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_table()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.privacy.dlp.v2beta1.ContentItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.privacy.dlp.v2beta1.ContentItem)
  return false;
#undef DO_
}

void ContentItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.privacy.dlp.v2beta1.ContentItem)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string type = 1;
  if (this->type().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->type().data(), static_cast<int>(this->type().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.privacy.dlp.v2beta1.ContentItem.type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->type(), output);
  }

  // bytes data = 2;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->data(), output);
  }

  // string value = 3;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->value().data(), static_cast<int>(this->value().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.privacy.dlp.v2beta1.ContentItem.value");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->value(), output);
  }

  // .google.privacy.dlp.v2beta1.Table table = 4;
  if (has_table()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *data_item_.table_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:google.privacy.dlp.v2beta1.ContentItem)
}

::google::protobuf::uint8* ContentItem::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.privacy.dlp.v2beta1.ContentItem)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string type = 1;
  if (this->type().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->type().data(), static_cast<int>(this->type().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.privacy.dlp.v2beta1.ContentItem.type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->type(), target);
  }

  // bytes data = 2;
  if (has_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->data(), target);
  }

  // string value = 3;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->value().data(), static_cast<int>(this->value().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.privacy.dlp.v2beta1.ContentItem.value");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->value(), target);
  }

  // .google.privacy.dlp.v2beta1.Table table = 4;
  if (has_table()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, *data_item_.table_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.privacy.dlp.v2beta1.ContentItem)
  return target;
}

size_t ContentItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.privacy.dlp.v2beta1.ContentItem)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string type = 1;
  if (this->type().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->type());
  }

  switch (data_item_case()) {
    // bytes data = 2;
    case kData: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data());
      break;
    }
    // string value = 3;
    case kValue: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->value());
      break;
    }
    // .google.privacy.dlp.v2beta1.Table table = 4;
    case kTable: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *data_item_.table_);
      break;
    }
    case DATA_ITEM_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ContentItem::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.privacy.dlp.v2beta1.ContentItem)
  GOOGLE_DCHECK_NE(&from, this);
  const ContentItem* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ContentItem>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.privacy.dlp.v2beta1.ContentItem)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.privacy.dlp.v2beta1.ContentItem)
    MergeFrom(*source);
  }
}

void ContentItem::MergeFrom(const ContentItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.privacy.dlp.v2beta1.ContentItem)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.type().size() > 0) {

    type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.type_);
  }
  switch (from.data_item_case()) {
    case kData: {
      set_data(from.data());
      break;
    }
    case kValue: {
      set_value(from.value());
      break;
    }
    case kTable: {
      mutable_table()->::google::privacy::dlp::v2beta1::Table::MergeFrom(from.table());
      break;
    }
    case DATA_ITEM_NOT_SET: {
      break;
    }
  }
}

void ContentItem::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.privacy.dlp.v2beta1.ContentItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ContentItem::CopyFrom(const ContentItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.privacy.dlp.v2beta1.ContentItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ContentItem::IsInitialized() const {
  return true;
}

void ContentItem::Swap(ContentItem* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ContentItem::InternalSwap(ContentItem* other) {
  using std::swap;
  type_.Swap(&other->type_);
  swap(data_item_, other->data_item_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ContentItem::GetMetadata() const {
  protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Table_Row::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Table_Row::kValuesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Table_Row::Table_Row()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaultsTable_Row();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.privacy.dlp.v2beta1.Table.Row)
}
Table_Row::Table_Row(const Table_Row& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      values_(from.values_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:google.privacy.dlp.v2beta1.Table.Row)
}

void Table_Row::SharedCtor() {
  _cached_size_ = 0;
}

Table_Row::~Table_Row() {
  // @@protoc_insertion_point(destructor:google.privacy.dlp.v2beta1.Table.Row)
  SharedDtor();
}

void Table_Row::SharedDtor() {
}

void Table_Row::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Table_Row::descriptor() {
  ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Table_Row& Table_Row::default_instance() {
  ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaultsTable_Row();
  return *internal_default_instance();
}

Table_Row* Table_Row::New(::google::protobuf::Arena* arena) const {
  Table_Row* n = new Table_Row;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Table_Row::Clear() {
// @@protoc_insertion_point(message_clear_start:google.privacy.dlp.v2beta1.Table.Row)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  values_.Clear();
  _internal_metadata_.Clear();
}

bool Table_Row::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.privacy.dlp.v2beta1.Table.Row)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .google.privacy.dlp.v2beta1.Value values = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_values()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.privacy.dlp.v2beta1.Table.Row)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.privacy.dlp.v2beta1.Table.Row)
  return false;
#undef DO_
}

void Table_Row::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.privacy.dlp.v2beta1.Table.Row)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .google.privacy.dlp.v2beta1.Value values = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->values_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->values(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:google.privacy.dlp.v2beta1.Table.Row)
}

::google::protobuf::uint8* Table_Row::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.privacy.dlp.v2beta1.Table.Row)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .google.privacy.dlp.v2beta1.Value values = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->values_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->values(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.privacy.dlp.v2beta1.Table.Row)
  return target;
}

size_t Table_Row::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.privacy.dlp.v2beta1.Table.Row)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .google.privacy.dlp.v2beta1.Value values = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->values_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->values(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Table_Row::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.privacy.dlp.v2beta1.Table.Row)
  GOOGLE_DCHECK_NE(&from, this);
  const Table_Row* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Table_Row>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.privacy.dlp.v2beta1.Table.Row)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.privacy.dlp.v2beta1.Table.Row)
    MergeFrom(*source);
  }
}

void Table_Row::MergeFrom(const Table_Row& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.privacy.dlp.v2beta1.Table.Row)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  values_.MergeFrom(from.values_);
}

void Table_Row::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.privacy.dlp.v2beta1.Table.Row)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Table_Row::CopyFrom(const Table_Row& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.privacy.dlp.v2beta1.Table.Row)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Table_Row::IsInitialized() const {
  return true;
}

void Table_Row::Swap(Table_Row* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Table_Row::InternalSwap(Table_Row* other) {
  using std::swap;
  values_.InternalSwap(&other->values_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Table_Row::GetMetadata() const {
  protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Table::InitAsDefaultInstance() {
}
void Table::clear_headers() {
  headers_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Table::kHeadersFieldNumber;
const int Table::kRowsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Table::Table()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaultsTable();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.privacy.dlp.v2beta1.Table)
}
Table::Table(const Table& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      headers_(from.headers_),
      rows_(from.rows_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:google.privacy.dlp.v2beta1.Table)
}

void Table::SharedCtor() {
  _cached_size_ = 0;
}

Table::~Table() {
  // @@protoc_insertion_point(destructor:google.privacy.dlp.v2beta1.Table)
  SharedDtor();
}

void Table::SharedDtor() {
}

void Table::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Table::descriptor() {
  ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Table& Table::default_instance() {
  ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaultsTable();
  return *internal_default_instance();
}

Table* Table::New(::google::protobuf::Arena* arena) const {
  Table* n = new Table;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Table::Clear() {
// @@protoc_insertion_point(message_clear_start:google.privacy.dlp.v2beta1.Table)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  headers_.Clear();
  rows_.Clear();
  _internal_metadata_.Clear();
}

bool Table::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.privacy.dlp.v2beta1.Table)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .google.privacy.dlp.v2beta1.FieldId headers = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_headers()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .google.privacy.dlp.v2beta1.Table.Row rows = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_rows()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.privacy.dlp.v2beta1.Table)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.privacy.dlp.v2beta1.Table)
  return false;
#undef DO_
}

void Table::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.privacy.dlp.v2beta1.Table)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .google.privacy.dlp.v2beta1.FieldId headers = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->headers_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->headers(static_cast<int>(i)), output);
  }

  // repeated .google.privacy.dlp.v2beta1.Table.Row rows = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->rows_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->rows(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:google.privacy.dlp.v2beta1.Table)
}

::google::protobuf::uint8* Table::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.privacy.dlp.v2beta1.Table)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .google.privacy.dlp.v2beta1.FieldId headers = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->headers_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->headers(static_cast<int>(i)), deterministic, target);
  }

  // repeated .google.privacy.dlp.v2beta1.Table.Row rows = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->rows_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->rows(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.privacy.dlp.v2beta1.Table)
  return target;
}

size_t Table::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.privacy.dlp.v2beta1.Table)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .google.privacy.dlp.v2beta1.FieldId headers = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->headers_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->headers(static_cast<int>(i)));
    }
  }

  // repeated .google.privacy.dlp.v2beta1.Table.Row rows = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->rows_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->rows(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Table::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.privacy.dlp.v2beta1.Table)
  GOOGLE_DCHECK_NE(&from, this);
  const Table* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Table>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.privacy.dlp.v2beta1.Table)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.privacy.dlp.v2beta1.Table)
    MergeFrom(*source);
  }
}

void Table::MergeFrom(const Table& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.privacy.dlp.v2beta1.Table)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  headers_.MergeFrom(from.headers_);
  rows_.MergeFrom(from.rows_);
}

void Table::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.privacy.dlp.v2beta1.Table)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Table::CopyFrom(const Table& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.privacy.dlp.v2beta1.Table)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Table::IsInitialized() const {
  return true;
}

void Table::Swap(Table* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Table::InternalSwap(Table* other) {
  using std::swap;
  headers_.InternalSwap(&other->headers_);
  rows_.InternalSwap(&other->rows_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Table::GetMetadata() const {
  protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void InspectResult::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int InspectResult::kFindingsFieldNumber;
const int InspectResult::kFindingsTruncatedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

InspectResult::InspectResult()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaultsInspectResult();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.privacy.dlp.v2beta1.InspectResult)
}
InspectResult::InspectResult(const InspectResult& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      findings_(from.findings_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  findings_truncated_ = from.findings_truncated_;
  // @@protoc_insertion_point(copy_constructor:google.privacy.dlp.v2beta1.InspectResult)
}

void InspectResult::SharedCtor() {
  findings_truncated_ = false;
  _cached_size_ = 0;
}

InspectResult::~InspectResult() {
  // @@protoc_insertion_point(destructor:google.privacy.dlp.v2beta1.InspectResult)
  SharedDtor();
}

void InspectResult::SharedDtor() {
}

void InspectResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InspectResult::descriptor() {
  ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const InspectResult& InspectResult::default_instance() {
  ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaultsInspectResult();
  return *internal_default_instance();
}

InspectResult* InspectResult::New(::google::protobuf::Arena* arena) const {
  InspectResult* n = new InspectResult;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void InspectResult::Clear() {
// @@protoc_insertion_point(message_clear_start:google.privacy.dlp.v2beta1.InspectResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  findings_.Clear();
  findings_truncated_ = false;
  _internal_metadata_.Clear();
}

bool InspectResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.privacy.dlp.v2beta1.InspectResult)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .google.privacy.dlp.v2beta1.Finding findings = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_findings()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool findings_truncated = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &findings_truncated_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.privacy.dlp.v2beta1.InspectResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.privacy.dlp.v2beta1.InspectResult)
  return false;
#undef DO_
}

void InspectResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.privacy.dlp.v2beta1.InspectResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .google.privacy.dlp.v2beta1.Finding findings = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->findings_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->findings(static_cast<int>(i)), output);
  }

  // bool findings_truncated = 2;
  if (this->findings_truncated() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->findings_truncated(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:google.privacy.dlp.v2beta1.InspectResult)
}

::google::protobuf::uint8* InspectResult::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.privacy.dlp.v2beta1.InspectResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .google.privacy.dlp.v2beta1.Finding findings = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->findings_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->findings(static_cast<int>(i)), deterministic, target);
  }

  // bool findings_truncated = 2;
  if (this->findings_truncated() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->findings_truncated(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.privacy.dlp.v2beta1.InspectResult)
  return target;
}

size_t InspectResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.privacy.dlp.v2beta1.InspectResult)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .google.privacy.dlp.v2beta1.Finding findings = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->findings_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->findings(static_cast<int>(i)));
    }
  }

  // bool findings_truncated = 2;
  if (this->findings_truncated() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InspectResult::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.privacy.dlp.v2beta1.InspectResult)
  GOOGLE_DCHECK_NE(&from, this);
  const InspectResult* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const InspectResult>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.privacy.dlp.v2beta1.InspectResult)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.privacy.dlp.v2beta1.InspectResult)
    MergeFrom(*source);
  }
}

void InspectResult::MergeFrom(const InspectResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.privacy.dlp.v2beta1.InspectResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  findings_.MergeFrom(from.findings_);
  if (from.findings_truncated() != 0) {
    set_findings_truncated(from.findings_truncated());
  }
}

void InspectResult::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.privacy.dlp.v2beta1.InspectResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InspectResult::CopyFrom(const InspectResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.privacy.dlp.v2beta1.InspectResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InspectResult::IsInitialized() const {
  return true;
}

void InspectResult::Swap(InspectResult* other) {
  if (other == this) return;
  InternalSwap(other);
}
void InspectResult::InternalSwap(InspectResult* other) {
  using std::swap;
  findings_.InternalSwap(&other->findings_);
  swap(findings_truncated_, other->findings_truncated_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata InspectResult::GetMetadata() const {
  protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Finding::InitAsDefaultInstance() {
  ::google::privacy::dlp::v2beta1::_Finding_default_instance_._instance.get_mutable()->info_type_ = const_cast< ::google::privacy::dlp::v2beta1::InfoType*>(
      ::google::privacy::dlp::v2beta1::InfoType::internal_default_instance());
  ::google::privacy::dlp::v2beta1::_Finding_default_instance_._instance.get_mutable()->location_ = const_cast< ::google::privacy::dlp::v2beta1::Location*>(
      ::google::privacy::dlp::v2beta1::Location::internal_default_instance());
  ::google::privacy::dlp::v2beta1::_Finding_default_instance_._instance.get_mutable()->create_time_ = const_cast< ::google::protobuf::Timestamp*>(
      ::google::protobuf::Timestamp::internal_default_instance());
}
void Finding::clear_info_type() {
  if (GetArenaNoVirtual() == NULL && info_type_ != NULL) {
    delete info_type_;
  }
  info_type_ = NULL;
}
void Finding::clear_create_time() {
  if (GetArenaNoVirtual() == NULL && create_time_ != NULL) {
    delete create_time_;
  }
  create_time_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Finding::kQuoteFieldNumber;
const int Finding::kInfoTypeFieldNumber;
const int Finding::kLikelihoodFieldNumber;
const int Finding::kLocationFieldNumber;
const int Finding::kCreateTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Finding::Finding()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaultsFinding();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.privacy.dlp.v2beta1.Finding)
}
Finding::Finding(const Finding& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  quote_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.quote().size() > 0) {
    quote_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.quote_);
  }
  if (from.has_info_type()) {
    info_type_ = new ::google::privacy::dlp::v2beta1::InfoType(*from.info_type_);
  } else {
    info_type_ = NULL;
  }
  if (from.has_location()) {
    location_ = new ::google::privacy::dlp::v2beta1::Location(*from.location_);
  } else {
    location_ = NULL;
  }
  if (from.has_create_time()) {
    create_time_ = new ::google::protobuf::Timestamp(*from.create_time_);
  } else {
    create_time_ = NULL;
  }
  likelihood_ = from.likelihood_;
  // @@protoc_insertion_point(copy_constructor:google.privacy.dlp.v2beta1.Finding)
}

void Finding::SharedCtor() {
  quote_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&info_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&likelihood_) -
      reinterpret_cast<char*>(&info_type_)) + sizeof(likelihood_));
  _cached_size_ = 0;
}

Finding::~Finding() {
  // @@protoc_insertion_point(destructor:google.privacy.dlp.v2beta1.Finding)
  SharedDtor();
}

void Finding::SharedDtor() {
  quote_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete info_type_;
  if (this != internal_default_instance()) delete location_;
  if (this != internal_default_instance()) delete create_time_;
}

void Finding::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Finding::descriptor() {
  ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Finding& Finding::default_instance() {
  ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaultsFinding();
  return *internal_default_instance();
}

Finding* Finding::New(::google::protobuf::Arena* arena) const {
  Finding* n = new Finding;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Finding::Clear() {
// @@protoc_insertion_point(message_clear_start:google.privacy.dlp.v2beta1.Finding)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  quote_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && info_type_ != NULL) {
    delete info_type_;
  }
  info_type_ = NULL;
  if (GetArenaNoVirtual() == NULL && location_ != NULL) {
    delete location_;
  }
  location_ = NULL;
  if (GetArenaNoVirtual() == NULL && create_time_ != NULL) {
    delete create_time_;
  }
  create_time_ = NULL;
  likelihood_ = 0;
  _internal_metadata_.Clear();
}

bool Finding::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.privacy.dlp.v2beta1.Finding)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string quote = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_quote()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->quote().data(), static_cast<int>(this->quote().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.privacy.dlp.v2beta1.Finding.quote"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.privacy.dlp.v2beta1.InfoType info_type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_info_type()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.privacy.dlp.v2beta1.Likelihood likelihood = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_likelihood(static_cast< ::google::privacy::dlp::v2beta1::Likelihood >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.privacy.dlp.v2beta1.Location location = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_location()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Timestamp create_time = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_create_time()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.privacy.dlp.v2beta1.Finding)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.privacy.dlp.v2beta1.Finding)
  return false;
#undef DO_
}

void Finding::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.privacy.dlp.v2beta1.Finding)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string quote = 1;
  if (this->quote().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->quote().data(), static_cast<int>(this->quote().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.privacy.dlp.v2beta1.Finding.quote");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->quote(), output);
  }

  // .google.privacy.dlp.v2beta1.InfoType info_type = 2;
  if (this->has_info_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->info_type_, output);
  }

  // .google.privacy.dlp.v2beta1.Likelihood likelihood = 3;
  if (this->likelihood() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->likelihood(), output);
  }

  // .google.privacy.dlp.v2beta1.Location location = 4;
  if (this->has_location()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->location_, output);
  }

  // .google.protobuf.Timestamp create_time = 6;
  if (this->has_create_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->create_time_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:google.privacy.dlp.v2beta1.Finding)
}

::google::protobuf::uint8* Finding::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.privacy.dlp.v2beta1.Finding)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string quote = 1;
  if (this->quote().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->quote().data(), static_cast<int>(this->quote().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.privacy.dlp.v2beta1.Finding.quote");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->quote(), target);
  }

  // .google.privacy.dlp.v2beta1.InfoType info_type = 2;
  if (this->has_info_type()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, *this->info_type_, deterministic, target);
  }

  // .google.privacy.dlp.v2beta1.Likelihood likelihood = 3;
  if (this->likelihood() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->likelihood(), target);
  }

  // .google.privacy.dlp.v2beta1.Location location = 4;
  if (this->has_location()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, *this->location_, deterministic, target);
  }

  // .google.protobuf.Timestamp create_time = 6;
  if (this->has_create_time()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, *this->create_time_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.privacy.dlp.v2beta1.Finding)
  return target;
}

size_t Finding::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.privacy.dlp.v2beta1.Finding)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string quote = 1;
  if (this->quote().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->quote());
  }

  // .google.privacy.dlp.v2beta1.InfoType info_type = 2;
  if (this->has_info_type()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->info_type_);
  }

  // .google.privacy.dlp.v2beta1.Location location = 4;
  if (this->has_location()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->location_);
  }

  // .google.protobuf.Timestamp create_time = 6;
  if (this->has_create_time()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->create_time_);
  }

  // .google.privacy.dlp.v2beta1.Likelihood likelihood = 3;
  if (this->likelihood() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->likelihood());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Finding::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.privacy.dlp.v2beta1.Finding)
  GOOGLE_DCHECK_NE(&from, this);
  const Finding* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Finding>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.privacy.dlp.v2beta1.Finding)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.privacy.dlp.v2beta1.Finding)
    MergeFrom(*source);
  }
}

void Finding::MergeFrom(const Finding& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.privacy.dlp.v2beta1.Finding)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.quote().size() > 0) {

    quote_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.quote_);
  }
  if (from.has_info_type()) {
    mutable_info_type()->::google::privacy::dlp::v2beta1::InfoType::MergeFrom(from.info_type());
  }
  if (from.has_location()) {
    mutable_location()->::google::privacy::dlp::v2beta1::Location::MergeFrom(from.location());
  }
  if (from.has_create_time()) {
    mutable_create_time()->::google::protobuf::Timestamp::MergeFrom(from.create_time());
  }
  if (from.likelihood() != 0) {
    set_likelihood(from.likelihood());
  }
}

void Finding::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.privacy.dlp.v2beta1.Finding)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Finding::CopyFrom(const Finding& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.privacy.dlp.v2beta1.Finding)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Finding::IsInitialized() const {
  return true;
}

void Finding::Swap(Finding* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Finding::InternalSwap(Finding* other) {
  using std::swap;
  quote_.Swap(&other->quote_);
  swap(info_type_, other->info_type_);
  swap(location_, other->location_);
  swap(create_time_, other->create_time_);
  swap(likelihood_, other->likelihood_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Finding::GetMetadata() const {
  protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Location::InitAsDefaultInstance() {
  ::google::privacy::dlp::v2beta1::_Location_default_instance_._instance.get_mutable()->byte_range_ = const_cast< ::google::privacy::dlp::v2beta1::Range*>(
      ::google::privacy::dlp::v2beta1::Range::internal_default_instance());
  ::google::privacy::dlp::v2beta1::_Location_default_instance_._instance.get_mutable()->codepoint_range_ = const_cast< ::google::privacy::dlp::v2beta1::Range*>(
      ::google::privacy::dlp::v2beta1::Range::internal_default_instance());
  ::google::privacy::dlp::v2beta1::_Location_default_instance_._instance.get_mutable()->record_key_ = const_cast< ::google::privacy::dlp::v2beta1::RecordKey*>(
      ::google::privacy::dlp::v2beta1::RecordKey::internal_default_instance());
  ::google::privacy::dlp::v2beta1::_Location_default_instance_._instance.get_mutable()->field_id_ = const_cast< ::google::privacy::dlp::v2beta1::FieldId*>(
      ::google::privacy::dlp::v2beta1::FieldId::internal_default_instance());
  ::google::privacy::dlp::v2beta1::_Location_default_instance_._instance.get_mutable()->table_location_ = const_cast< ::google::privacy::dlp::v2beta1::TableLocation*>(
      ::google::privacy::dlp::v2beta1::TableLocation::internal_default_instance());
}
void Location::clear_record_key() {
  if (GetArenaNoVirtual() == NULL && record_key_ != NULL) {
    delete record_key_;
  }
  record_key_ = NULL;
}
void Location::clear_field_id() {
  if (GetArenaNoVirtual() == NULL && field_id_ != NULL) {
    delete field_id_;
  }
  field_id_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Location::kByteRangeFieldNumber;
const int Location::kCodepointRangeFieldNumber;
const int Location::kImageBoxesFieldNumber;
const int Location::kRecordKeyFieldNumber;
const int Location::kFieldIdFieldNumber;
const int Location::kTableLocationFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Location::Location()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaultsLocation();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.privacy.dlp.v2beta1.Location)
}
Location::Location(const Location& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      image_boxes_(from.image_boxes_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_byte_range()) {
    byte_range_ = new ::google::privacy::dlp::v2beta1::Range(*from.byte_range_);
  } else {
    byte_range_ = NULL;
  }
  if (from.has_codepoint_range()) {
    codepoint_range_ = new ::google::privacy::dlp::v2beta1::Range(*from.codepoint_range_);
  } else {
    codepoint_range_ = NULL;
  }
  if (from.has_record_key()) {
    record_key_ = new ::google::privacy::dlp::v2beta1::RecordKey(*from.record_key_);
  } else {
    record_key_ = NULL;
  }
  if (from.has_field_id()) {
    field_id_ = new ::google::privacy::dlp::v2beta1::FieldId(*from.field_id_);
  } else {
    field_id_ = NULL;
  }
  if (from.has_table_location()) {
    table_location_ = new ::google::privacy::dlp::v2beta1::TableLocation(*from.table_location_);
  } else {
    table_location_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:google.privacy.dlp.v2beta1.Location)
}

void Location::SharedCtor() {
  ::memset(&byte_range_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&table_location_) -
      reinterpret_cast<char*>(&byte_range_)) + sizeof(table_location_));
  _cached_size_ = 0;
}

Location::~Location() {
  // @@protoc_insertion_point(destructor:google.privacy.dlp.v2beta1.Location)
  SharedDtor();
}

void Location::SharedDtor() {
  if (this != internal_default_instance()) delete byte_range_;
  if (this != internal_default_instance()) delete codepoint_range_;
  if (this != internal_default_instance()) delete record_key_;
  if (this != internal_default_instance()) delete field_id_;
  if (this != internal_default_instance()) delete table_location_;
}

void Location::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Location::descriptor() {
  ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Location& Location::default_instance() {
  ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaultsLocation();
  return *internal_default_instance();
}

Location* Location::New(::google::protobuf::Arena* arena) const {
  Location* n = new Location;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Location::Clear() {
// @@protoc_insertion_point(message_clear_start:google.privacy.dlp.v2beta1.Location)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  image_boxes_.Clear();
  if (GetArenaNoVirtual() == NULL && byte_range_ != NULL) {
    delete byte_range_;
  }
  byte_range_ = NULL;
  if (GetArenaNoVirtual() == NULL && codepoint_range_ != NULL) {
    delete codepoint_range_;
  }
  codepoint_range_ = NULL;
  if (GetArenaNoVirtual() == NULL && record_key_ != NULL) {
    delete record_key_;
  }
  record_key_ = NULL;
  if (GetArenaNoVirtual() == NULL && field_id_ != NULL) {
    delete field_id_;
  }
  field_id_ = NULL;
  if (GetArenaNoVirtual() == NULL && table_location_ != NULL) {
    delete table_location_;
  }
  table_location_ = NULL;
  _internal_metadata_.Clear();
}

bool Location::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.privacy.dlp.v2beta1.Location)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .google.privacy.dlp.v2beta1.Range byte_range = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_byte_range()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.privacy.dlp.v2beta1.Range codepoint_range = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_codepoint_range()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .google.privacy.dlp.v2beta1.ImageLocation image_boxes = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_image_boxes()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.privacy.dlp.v2beta1.RecordKey record_key = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_record_key()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.privacy.dlp.v2beta1.FieldId field_id = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_field_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.privacy.dlp.v2beta1.TableLocation table_location = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_table_location()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.privacy.dlp.v2beta1.Location)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.privacy.dlp.v2beta1.Location)
  return false;
#undef DO_
}

void Location::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.privacy.dlp.v2beta1.Location)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.privacy.dlp.v2beta1.Range byte_range = 1;
  if (this->has_byte_range()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->byte_range_, output);
  }

  // .google.privacy.dlp.v2beta1.Range codepoint_range = 2;
  if (this->has_codepoint_range()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->codepoint_range_, output);
  }

  // repeated .google.privacy.dlp.v2beta1.ImageLocation image_boxes = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->image_boxes_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->image_boxes(static_cast<int>(i)), output);
  }

  // .google.privacy.dlp.v2beta1.RecordKey record_key = 4;
  if (this->has_record_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->record_key_, output);
  }

  // .google.privacy.dlp.v2beta1.FieldId field_id = 5;
  if (this->has_field_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->field_id_, output);
  }

  // .google.privacy.dlp.v2beta1.TableLocation table_location = 6;
  if (this->has_table_location()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->table_location_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:google.privacy.dlp.v2beta1.Location)
}

::google::protobuf::uint8* Location::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.privacy.dlp.v2beta1.Location)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.privacy.dlp.v2beta1.Range byte_range = 1;
  if (this->has_byte_range()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->byte_range_, deterministic, target);
  }

  // .google.privacy.dlp.v2beta1.Range codepoint_range = 2;
  if (this->has_codepoint_range()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, *this->codepoint_range_, deterministic, target);
  }

  // repeated .google.privacy.dlp.v2beta1.ImageLocation image_boxes = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->image_boxes_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->image_boxes(static_cast<int>(i)), deterministic, target);
  }

  // .google.privacy.dlp.v2beta1.RecordKey record_key = 4;
  if (this->has_record_key()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, *this->record_key_, deterministic, target);
  }

  // .google.privacy.dlp.v2beta1.FieldId field_id = 5;
  if (this->has_field_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, *this->field_id_, deterministic, target);
  }

  // .google.privacy.dlp.v2beta1.TableLocation table_location = 6;
  if (this->has_table_location()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, *this->table_location_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.privacy.dlp.v2beta1.Location)
  return target;
}

size_t Location::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.privacy.dlp.v2beta1.Location)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .google.privacy.dlp.v2beta1.ImageLocation image_boxes = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->image_boxes_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->image_boxes(static_cast<int>(i)));
    }
  }

  // .google.privacy.dlp.v2beta1.Range byte_range = 1;
  if (this->has_byte_range()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->byte_range_);
  }

  // .google.privacy.dlp.v2beta1.Range codepoint_range = 2;
  if (this->has_codepoint_range()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->codepoint_range_);
  }

  // .google.privacy.dlp.v2beta1.RecordKey record_key = 4;
  if (this->has_record_key()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->record_key_);
  }

  // .google.privacy.dlp.v2beta1.FieldId field_id = 5;
  if (this->has_field_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->field_id_);
  }

  // .google.privacy.dlp.v2beta1.TableLocation table_location = 6;
  if (this->has_table_location()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->table_location_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Location::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.privacy.dlp.v2beta1.Location)
  GOOGLE_DCHECK_NE(&from, this);
  const Location* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Location>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.privacy.dlp.v2beta1.Location)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.privacy.dlp.v2beta1.Location)
    MergeFrom(*source);
  }
}

void Location::MergeFrom(const Location& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.privacy.dlp.v2beta1.Location)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  image_boxes_.MergeFrom(from.image_boxes_);
  if (from.has_byte_range()) {
    mutable_byte_range()->::google::privacy::dlp::v2beta1::Range::MergeFrom(from.byte_range());
  }
  if (from.has_codepoint_range()) {
    mutable_codepoint_range()->::google::privacy::dlp::v2beta1::Range::MergeFrom(from.codepoint_range());
  }
  if (from.has_record_key()) {
    mutable_record_key()->::google::privacy::dlp::v2beta1::RecordKey::MergeFrom(from.record_key());
  }
  if (from.has_field_id()) {
    mutable_field_id()->::google::privacy::dlp::v2beta1::FieldId::MergeFrom(from.field_id());
  }
  if (from.has_table_location()) {
    mutable_table_location()->::google::privacy::dlp::v2beta1::TableLocation::MergeFrom(from.table_location());
  }
}

void Location::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.privacy.dlp.v2beta1.Location)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Location::CopyFrom(const Location& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.privacy.dlp.v2beta1.Location)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Location::IsInitialized() const {
  return true;
}

void Location::Swap(Location* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Location::InternalSwap(Location* other) {
  using std::swap;
  image_boxes_.InternalSwap(&other->image_boxes_);
  swap(byte_range_, other->byte_range_);
  swap(codepoint_range_, other->codepoint_range_);
  swap(record_key_, other->record_key_);
  swap(field_id_, other->field_id_);
  swap(table_location_, other->table_location_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Location::GetMetadata() const {
  protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void TableLocation::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TableLocation::kRowIndexFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TableLocation::TableLocation()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaultsTableLocation();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.privacy.dlp.v2beta1.TableLocation)
}
TableLocation::TableLocation(const TableLocation& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  row_index_ = from.row_index_;
  // @@protoc_insertion_point(copy_constructor:google.privacy.dlp.v2beta1.TableLocation)
}

void TableLocation::SharedCtor() {
  row_index_ = GOOGLE_LONGLONG(0);
  _cached_size_ = 0;
}

TableLocation::~TableLocation() {
  // @@protoc_insertion_point(destructor:google.privacy.dlp.v2beta1.TableLocation)
  SharedDtor();
}

void TableLocation::SharedDtor() {
}

void TableLocation::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TableLocation::descriptor() {
  ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TableLocation& TableLocation::default_instance() {
  ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaultsTableLocation();
  return *internal_default_instance();
}

TableLocation* TableLocation::New(::google::protobuf::Arena* arena) const {
  TableLocation* n = new TableLocation;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TableLocation::Clear() {
// @@protoc_insertion_point(message_clear_start:google.privacy.dlp.v2beta1.TableLocation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  row_index_ = GOOGLE_LONGLONG(0);
  _internal_metadata_.Clear();
}

bool TableLocation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.privacy.dlp.v2beta1.TableLocation)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 row_index = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &row_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.privacy.dlp.v2beta1.TableLocation)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.privacy.dlp.v2beta1.TableLocation)
  return false;
#undef DO_
}

void TableLocation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.privacy.dlp.v2beta1.TableLocation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 row_index = 1;
  if (this->row_index() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->row_index(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:google.privacy.dlp.v2beta1.TableLocation)
}

::google::protobuf::uint8* TableLocation::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.privacy.dlp.v2beta1.TableLocation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 row_index = 1;
  if (this->row_index() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->row_index(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.privacy.dlp.v2beta1.TableLocation)
  return target;
}

size_t TableLocation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.privacy.dlp.v2beta1.TableLocation)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // int64 row_index = 1;
  if (this->row_index() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->row_index());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TableLocation::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.privacy.dlp.v2beta1.TableLocation)
  GOOGLE_DCHECK_NE(&from, this);
  const TableLocation* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TableLocation>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.privacy.dlp.v2beta1.TableLocation)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.privacy.dlp.v2beta1.TableLocation)
    MergeFrom(*source);
  }
}

void TableLocation::MergeFrom(const TableLocation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.privacy.dlp.v2beta1.TableLocation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.row_index() != 0) {
    set_row_index(from.row_index());
  }
}

void TableLocation::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.privacy.dlp.v2beta1.TableLocation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TableLocation::CopyFrom(const TableLocation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.privacy.dlp.v2beta1.TableLocation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TableLocation::IsInitialized() const {
  return true;
}

void TableLocation::Swap(TableLocation* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TableLocation::InternalSwap(TableLocation* other) {
  using std::swap;
  swap(row_index_, other->row_index_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TableLocation::GetMetadata() const {
  protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Range::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Range::kStartFieldNumber;
const int Range::kEndFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Range::Range()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaultsRange();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.privacy.dlp.v2beta1.Range)
}
Range::Range(const Range& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&start_, &from.start_,
    static_cast<size_t>(reinterpret_cast<char*>(&end_) -
    reinterpret_cast<char*>(&start_)) + sizeof(end_));
  // @@protoc_insertion_point(copy_constructor:google.privacy.dlp.v2beta1.Range)
}

void Range::SharedCtor() {
  ::memset(&start_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&end_) -
      reinterpret_cast<char*>(&start_)) + sizeof(end_));
  _cached_size_ = 0;
}

Range::~Range() {
  // @@protoc_insertion_point(destructor:google.privacy.dlp.v2beta1.Range)
  SharedDtor();
}

void Range::SharedDtor() {
}

void Range::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Range::descriptor() {
  ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Range& Range::default_instance() {
  ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaultsRange();
  return *internal_default_instance();
}

Range* Range::New(::google::protobuf::Arena* arena) const {
  Range* n = new Range;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Range::Clear() {
// @@protoc_insertion_point(message_clear_start:google.privacy.dlp.v2beta1.Range)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&start_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&end_) -
      reinterpret_cast<char*>(&start_)) + sizeof(end_));
  _internal_metadata_.Clear();
}

bool Range::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.privacy.dlp.v2beta1.Range)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 start = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &start_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 end = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &end_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.privacy.dlp.v2beta1.Range)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.privacy.dlp.v2beta1.Range)
  return false;
#undef DO_
}

void Range::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.privacy.dlp.v2beta1.Range)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 start = 1;
  if (this->start() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->start(), output);
  }

  // int64 end = 2;
  if (this->end() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->end(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:google.privacy.dlp.v2beta1.Range)
}

::google::protobuf::uint8* Range::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.privacy.dlp.v2beta1.Range)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 start = 1;
  if (this->start() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->start(), target);
  }

  // int64 end = 2;
  if (this->end() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->end(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.privacy.dlp.v2beta1.Range)
  return target;
}

size_t Range::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.privacy.dlp.v2beta1.Range)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // int64 start = 1;
  if (this->start() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->start());
  }

  // int64 end = 2;
  if (this->end() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->end());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Range::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.privacy.dlp.v2beta1.Range)
  GOOGLE_DCHECK_NE(&from, this);
  const Range* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Range>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.privacy.dlp.v2beta1.Range)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.privacy.dlp.v2beta1.Range)
    MergeFrom(*source);
  }
}

void Range::MergeFrom(const Range& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.privacy.dlp.v2beta1.Range)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.start() != 0) {
    set_start(from.start());
  }
  if (from.end() != 0) {
    set_end(from.end());
  }
}

void Range::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.privacy.dlp.v2beta1.Range)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Range::CopyFrom(const Range& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.privacy.dlp.v2beta1.Range)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Range::IsInitialized() const {
  return true;
}

void Range::Swap(Range* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Range::InternalSwap(Range* other) {
  using std::swap;
  swap(start_, other->start_);
  swap(end_, other->end_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Range::GetMetadata() const {
  protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ImageLocation::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ImageLocation::kTopFieldNumber;
const int ImageLocation::kLeftFieldNumber;
const int ImageLocation::kWidthFieldNumber;
const int ImageLocation::kHeightFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ImageLocation::ImageLocation()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaultsImageLocation();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.privacy.dlp.v2beta1.ImageLocation)
}
ImageLocation::ImageLocation(const ImageLocation& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&top_, &from.top_,
    static_cast<size_t>(reinterpret_cast<char*>(&height_) -
    reinterpret_cast<char*>(&top_)) + sizeof(height_));
  // @@protoc_insertion_point(copy_constructor:google.privacy.dlp.v2beta1.ImageLocation)
}

void ImageLocation::SharedCtor() {
  ::memset(&top_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&height_) -
      reinterpret_cast<char*>(&top_)) + sizeof(height_));
  _cached_size_ = 0;
}

ImageLocation::~ImageLocation() {
  // @@protoc_insertion_point(destructor:google.privacy.dlp.v2beta1.ImageLocation)
  SharedDtor();
}

void ImageLocation::SharedDtor() {
}

void ImageLocation::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ImageLocation::descriptor() {
  ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ImageLocation& ImageLocation::default_instance() {
  ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaultsImageLocation();
  return *internal_default_instance();
}

ImageLocation* ImageLocation::New(::google::protobuf::Arena* arena) const {
  ImageLocation* n = new ImageLocation;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ImageLocation::Clear() {
// @@protoc_insertion_point(message_clear_start:google.privacy.dlp.v2beta1.ImageLocation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&top_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&height_) -
      reinterpret_cast<char*>(&top_)) + sizeof(height_));
  _internal_metadata_.Clear();
}

bool ImageLocation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.privacy.dlp.v2beta1.ImageLocation)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 top = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &top_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 left = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &left_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 width = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 height = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.privacy.dlp.v2beta1.ImageLocation)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.privacy.dlp.v2beta1.ImageLocation)
  return false;
#undef DO_
}

void ImageLocation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.privacy.dlp.v2beta1.ImageLocation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 top = 1;
  if (this->top() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->top(), output);
  }

  // int32 left = 2;
  if (this->left() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->left(), output);
  }

  // int32 width = 3;
  if (this->width() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->width(), output);
  }

  // int32 height = 4;
  if (this->height() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->height(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:google.privacy.dlp.v2beta1.ImageLocation)
}

::google::protobuf::uint8* ImageLocation::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.privacy.dlp.v2beta1.ImageLocation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 top = 1;
  if (this->top() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->top(), target);
  }

  // int32 left = 2;
  if (this->left() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->left(), target);
  }

  // int32 width = 3;
  if (this->width() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->width(), target);
  }

  // int32 height = 4;
  if (this->height() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->height(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.privacy.dlp.v2beta1.ImageLocation)
  return target;
}

size_t ImageLocation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.privacy.dlp.v2beta1.ImageLocation)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // int32 top = 1;
  if (this->top() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->top());
  }

  // int32 left = 2;
  if (this->left() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->left());
  }

  // int32 width = 3;
  if (this->width() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->width());
  }

  // int32 height = 4;
  if (this->height() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->height());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ImageLocation::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.privacy.dlp.v2beta1.ImageLocation)
  GOOGLE_DCHECK_NE(&from, this);
  const ImageLocation* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ImageLocation>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.privacy.dlp.v2beta1.ImageLocation)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.privacy.dlp.v2beta1.ImageLocation)
    MergeFrom(*source);
  }
}

void ImageLocation::MergeFrom(const ImageLocation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.privacy.dlp.v2beta1.ImageLocation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.top() != 0) {
    set_top(from.top());
  }
  if (from.left() != 0) {
    set_left(from.left());
  }
  if (from.width() != 0) {
    set_width(from.width());
  }
  if (from.height() != 0) {
    set_height(from.height());
  }
}

void ImageLocation::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.privacy.dlp.v2beta1.ImageLocation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ImageLocation::CopyFrom(const ImageLocation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.privacy.dlp.v2beta1.ImageLocation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ImageLocation::IsInitialized() const {
  return true;
}

void ImageLocation::Swap(ImageLocation* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ImageLocation::InternalSwap(ImageLocation* other) {
  using std::swap;
  swap(top_, other->top_);
  swap(left_, other->left_);
  swap(width_, other->width_);
  swap(height_, other->height_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ImageLocation::GetMetadata() const {
  protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void RedactContentRequest_ReplaceConfig::InitAsDefaultInstance() {
  ::google::privacy::dlp::v2beta1::_RedactContentRequest_ReplaceConfig_default_instance_._instance.get_mutable()->info_type_ = const_cast< ::google::privacy::dlp::v2beta1::InfoType*>(
      ::google::privacy::dlp::v2beta1::InfoType::internal_default_instance());
}
void RedactContentRequest_ReplaceConfig::clear_info_type() {
  if (GetArenaNoVirtual() == NULL && info_type_ != NULL) {
    delete info_type_;
  }
  info_type_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RedactContentRequest_ReplaceConfig::kInfoTypeFieldNumber;
const int RedactContentRequest_ReplaceConfig::kReplaceWithFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RedactContentRequest_ReplaceConfig::RedactContentRequest_ReplaceConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaultsRedactContentRequest_ReplaceConfig();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.privacy.dlp.v2beta1.RedactContentRequest.ReplaceConfig)
}
RedactContentRequest_ReplaceConfig::RedactContentRequest_ReplaceConfig(const RedactContentRequest_ReplaceConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  replace_with_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.replace_with().size() > 0) {
    replace_with_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.replace_with_);
  }
  if (from.has_info_type()) {
    info_type_ = new ::google::privacy::dlp::v2beta1::InfoType(*from.info_type_);
  } else {
    info_type_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:google.privacy.dlp.v2beta1.RedactContentRequest.ReplaceConfig)
}

void RedactContentRequest_ReplaceConfig::SharedCtor() {
  replace_with_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  info_type_ = NULL;
  _cached_size_ = 0;
}

RedactContentRequest_ReplaceConfig::~RedactContentRequest_ReplaceConfig() {
  // @@protoc_insertion_point(destructor:google.privacy.dlp.v2beta1.RedactContentRequest.ReplaceConfig)
  SharedDtor();
}

void RedactContentRequest_ReplaceConfig::SharedDtor() {
  replace_with_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete info_type_;
}

void RedactContentRequest_ReplaceConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RedactContentRequest_ReplaceConfig::descriptor() {
  ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RedactContentRequest_ReplaceConfig& RedactContentRequest_ReplaceConfig::default_instance() {
  ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaultsRedactContentRequest_ReplaceConfig();
  return *internal_default_instance();
}

RedactContentRequest_ReplaceConfig* RedactContentRequest_ReplaceConfig::New(::google::protobuf::Arena* arena) const {
  RedactContentRequest_ReplaceConfig* n = new RedactContentRequest_ReplaceConfig;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RedactContentRequest_ReplaceConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:google.privacy.dlp.v2beta1.RedactContentRequest.ReplaceConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  replace_with_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && info_type_ != NULL) {
    delete info_type_;
  }
  info_type_ = NULL;
  _internal_metadata_.Clear();
}

bool RedactContentRequest_ReplaceConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.privacy.dlp.v2beta1.RedactContentRequest.ReplaceConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .google.privacy.dlp.v2beta1.InfoType info_type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_info_type()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string replace_with = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_replace_with()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->replace_with().data(), static_cast<int>(this->replace_with().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.privacy.dlp.v2beta1.RedactContentRequest.ReplaceConfig.replace_with"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.privacy.dlp.v2beta1.RedactContentRequest.ReplaceConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.privacy.dlp.v2beta1.RedactContentRequest.ReplaceConfig)
  return false;
#undef DO_
}

void RedactContentRequest_ReplaceConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.privacy.dlp.v2beta1.RedactContentRequest.ReplaceConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.privacy.dlp.v2beta1.InfoType info_type = 1;
  if (this->has_info_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->info_type_, output);
  }

  // string replace_with = 2;
  if (this->replace_with().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->replace_with().data(), static_cast<int>(this->replace_with().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.privacy.dlp.v2beta1.RedactContentRequest.ReplaceConfig.replace_with");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->replace_with(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:google.privacy.dlp.v2beta1.RedactContentRequest.ReplaceConfig)
}

::google::protobuf::uint8* RedactContentRequest_ReplaceConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.privacy.dlp.v2beta1.RedactContentRequest.ReplaceConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.privacy.dlp.v2beta1.InfoType info_type = 1;
  if (this->has_info_type()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->info_type_, deterministic, target);
  }

  // string replace_with = 2;
  if (this->replace_with().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->replace_with().data(), static_cast<int>(this->replace_with().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.privacy.dlp.v2beta1.RedactContentRequest.ReplaceConfig.replace_with");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->replace_with(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.privacy.dlp.v2beta1.RedactContentRequest.ReplaceConfig)
  return target;
}

size_t RedactContentRequest_ReplaceConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.privacy.dlp.v2beta1.RedactContentRequest.ReplaceConfig)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string replace_with = 2;
  if (this->replace_with().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->replace_with());
  }

  // .google.privacy.dlp.v2beta1.InfoType info_type = 1;
  if (this->has_info_type()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->info_type_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RedactContentRequest_ReplaceConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.privacy.dlp.v2beta1.RedactContentRequest.ReplaceConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const RedactContentRequest_ReplaceConfig* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RedactContentRequest_ReplaceConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.privacy.dlp.v2beta1.RedactContentRequest.ReplaceConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.privacy.dlp.v2beta1.RedactContentRequest.ReplaceConfig)
    MergeFrom(*source);
  }
}

void RedactContentRequest_ReplaceConfig::MergeFrom(const RedactContentRequest_ReplaceConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.privacy.dlp.v2beta1.RedactContentRequest.ReplaceConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.replace_with().size() > 0) {

    replace_with_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.replace_with_);
  }
  if (from.has_info_type()) {
    mutable_info_type()->::google::privacy::dlp::v2beta1::InfoType::MergeFrom(from.info_type());
  }
}

void RedactContentRequest_ReplaceConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.privacy.dlp.v2beta1.RedactContentRequest.ReplaceConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RedactContentRequest_ReplaceConfig::CopyFrom(const RedactContentRequest_ReplaceConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.privacy.dlp.v2beta1.RedactContentRequest.ReplaceConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RedactContentRequest_ReplaceConfig::IsInitialized() const {
  return true;
}

void RedactContentRequest_ReplaceConfig::Swap(RedactContentRequest_ReplaceConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RedactContentRequest_ReplaceConfig::InternalSwap(RedactContentRequest_ReplaceConfig* other) {
  using std::swap;
  replace_with_.Swap(&other->replace_with_);
  swap(info_type_, other->info_type_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RedactContentRequest_ReplaceConfig::GetMetadata() const {
  protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void RedactContentRequest_ImageRedactionConfig::InitAsDefaultInstance() {
  ::google::privacy::dlp::v2beta1::_RedactContentRequest_ImageRedactionConfig_default_instance_.info_type_ = const_cast< ::google::privacy::dlp::v2beta1::InfoType*>(
      ::google::privacy::dlp::v2beta1::InfoType::internal_default_instance());
  ::google::privacy::dlp::v2beta1::_RedactContentRequest_ImageRedactionConfig_default_instance_.redact_all_text_ = false;
  ::google::privacy::dlp::v2beta1::_RedactContentRequest_ImageRedactionConfig_default_instance_._instance.get_mutable()->redaction_color_ = const_cast< ::google::privacy::dlp::v2beta1::Color*>(
      ::google::privacy::dlp::v2beta1::Color::internal_default_instance());
}
void RedactContentRequest_ImageRedactionConfig::set_allocated_info_type(::google::privacy::dlp::v2beta1::InfoType* info_type) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_target();
  if (info_type) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      info_type = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, info_type, submessage_arena);
    }
    set_has_info_type();
    target_.info_type_ = info_type;
  }
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2beta1.RedactContentRequest.ImageRedactionConfig.info_type)
}
void RedactContentRequest_ImageRedactionConfig::clear_info_type() {
  if (has_info_type()) {
    delete target_.info_type_;
    clear_has_target();
  }
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RedactContentRequest_ImageRedactionConfig::kInfoTypeFieldNumber;
const int RedactContentRequest_ImageRedactionConfig::kRedactAllTextFieldNumber;
const int RedactContentRequest_ImageRedactionConfig::kRedactionColorFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RedactContentRequest_ImageRedactionConfig::RedactContentRequest_ImageRedactionConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaultsRedactContentRequest_ImageRedactionConfig();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.privacy.dlp.v2beta1.RedactContentRequest.ImageRedactionConfig)
}
RedactContentRequest_ImageRedactionConfig::RedactContentRequest_ImageRedactionConfig(const RedactContentRequest_ImageRedactionConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_redaction_color()) {
    redaction_color_ = new ::google::privacy::dlp::v2beta1::Color(*from.redaction_color_);
  } else {
    redaction_color_ = NULL;
  }
  clear_has_target();
  switch (from.target_case()) {
    case kInfoType: {
      mutable_info_type()->::google::privacy::dlp::v2beta1::InfoType::MergeFrom(from.info_type());
      break;
    }
    case kRedactAllText: {
      set_redact_all_text(from.redact_all_text());
      break;
    }
    case TARGET_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:google.privacy.dlp.v2beta1.RedactContentRequest.ImageRedactionConfig)
}

void RedactContentRequest_ImageRedactionConfig::SharedCtor() {
  redaction_color_ = NULL;
  clear_has_target();
  _cached_size_ = 0;
}

RedactContentRequest_ImageRedactionConfig::~RedactContentRequest_ImageRedactionConfig() {
  // @@protoc_insertion_point(destructor:google.privacy.dlp.v2beta1.RedactContentRequest.ImageRedactionConfig)
  SharedDtor();
}

void RedactContentRequest_ImageRedactionConfig::SharedDtor() {
  if (this != internal_default_instance()) delete redaction_color_;
  if (has_target()) {
    clear_target();
  }
}

void RedactContentRequest_ImageRedactionConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RedactContentRequest_ImageRedactionConfig::descriptor() {
  ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RedactContentRequest_ImageRedactionConfig& RedactContentRequest_ImageRedactionConfig::default_instance() {
  ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaultsRedactContentRequest_ImageRedactionConfig();
  return *internal_default_instance();
}

RedactContentRequest_ImageRedactionConfig* RedactContentRequest_ImageRedactionConfig::New(::google::protobuf::Arena* arena) const {
  RedactContentRequest_ImageRedactionConfig* n = new RedactContentRequest_ImageRedactionConfig;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RedactContentRequest_ImageRedactionConfig::clear_target() {
// @@protoc_insertion_point(one_of_clear_start:google.privacy.dlp.v2beta1.RedactContentRequest.ImageRedactionConfig)
  switch (target_case()) {
    case kInfoType: {
      delete target_.info_type_;
      break;
    }
    case kRedactAllText: {
      // No need to clear
      break;
    }
    case TARGET_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = TARGET_NOT_SET;
}


void RedactContentRequest_ImageRedactionConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:google.privacy.dlp.v2beta1.RedactContentRequest.ImageRedactionConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && redaction_color_ != NULL) {
    delete redaction_color_;
  }
  redaction_color_ = NULL;
  clear_target();
  _internal_metadata_.Clear();
}

bool RedactContentRequest_ImageRedactionConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.privacy.dlp.v2beta1.RedactContentRequest.ImageRedactionConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .google.privacy.dlp.v2beta1.InfoType info_type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_info_type()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool redact_all_text = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          clear_target();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &target_.redact_all_text_)));
          set_has_redact_all_text();
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.privacy.dlp.v2beta1.Color redaction_color = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_redaction_color()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.privacy.dlp.v2beta1.RedactContentRequest.ImageRedactionConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.privacy.dlp.v2beta1.RedactContentRequest.ImageRedactionConfig)
  return false;
#undef DO_
}

void RedactContentRequest_ImageRedactionConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.privacy.dlp.v2beta1.RedactContentRequest.ImageRedactionConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.privacy.dlp.v2beta1.InfoType info_type = 1;
  if (has_info_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *target_.info_type_, output);
  }

  // bool redact_all_text = 2;
  if (has_redact_all_text()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->redact_all_text(), output);
  }

  // .google.privacy.dlp.v2beta1.Color redaction_color = 3;
  if (this->has_redaction_color()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->redaction_color_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:google.privacy.dlp.v2beta1.RedactContentRequest.ImageRedactionConfig)
}

::google::protobuf::uint8* RedactContentRequest_ImageRedactionConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.privacy.dlp.v2beta1.RedactContentRequest.ImageRedactionConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.privacy.dlp.v2beta1.InfoType info_type = 1;
  if (has_info_type()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *target_.info_type_, deterministic, target);
  }

  // bool redact_all_text = 2;
  if (has_redact_all_text()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->redact_all_text(), target);
  }

  // .google.privacy.dlp.v2beta1.Color redaction_color = 3;
  if (this->has_redaction_color()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, *this->redaction_color_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.privacy.dlp.v2beta1.RedactContentRequest.ImageRedactionConfig)
  return target;
}

size_t RedactContentRequest_ImageRedactionConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.privacy.dlp.v2beta1.RedactContentRequest.ImageRedactionConfig)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .google.privacy.dlp.v2beta1.Color redaction_color = 3;
  if (this->has_redaction_color()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->redaction_color_);
  }

  switch (target_case()) {
    // .google.privacy.dlp.v2beta1.InfoType info_type = 1;
    case kInfoType: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *target_.info_type_);
      break;
    }
    // bool redact_all_text = 2;
    case kRedactAllText: {
      total_size += 1 + 1;
      break;
    }
    case TARGET_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RedactContentRequest_ImageRedactionConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.privacy.dlp.v2beta1.RedactContentRequest.ImageRedactionConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const RedactContentRequest_ImageRedactionConfig* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RedactContentRequest_ImageRedactionConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.privacy.dlp.v2beta1.RedactContentRequest.ImageRedactionConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.privacy.dlp.v2beta1.RedactContentRequest.ImageRedactionConfig)
    MergeFrom(*source);
  }
}

void RedactContentRequest_ImageRedactionConfig::MergeFrom(const RedactContentRequest_ImageRedactionConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.privacy.dlp.v2beta1.RedactContentRequest.ImageRedactionConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_redaction_color()) {
    mutable_redaction_color()->::google::privacy::dlp::v2beta1::Color::MergeFrom(from.redaction_color());
  }
  switch (from.target_case()) {
    case kInfoType: {
      mutable_info_type()->::google::privacy::dlp::v2beta1::InfoType::MergeFrom(from.info_type());
      break;
    }
    case kRedactAllText: {
      set_redact_all_text(from.redact_all_text());
      break;
    }
    case TARGET_NOT_SET: {
      break;
    }
  }
}

void RedactContentRequest_ImageRedactionConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.privacy.dlp.v2beta1.RedactContentRequest.ImageRedactionConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RedactContentRequest_ImageRedactionConfig::CopyFrom(const RedactContentRequest_ImageRedactionConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.privacy.dlp.v2beta1.RedactContentRequest.ImageRedactionConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RedactContentRequest_ImageRedactionConfig::IsInitialized() const {
  return true;
}

void RedactContentRequest_ImageRedactionConfig::Swap(RedactContentRequest_ImageRedactionConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RedactContentRequest_ImageRedactionConfig::InternalSwap(RedactContentRequest_ImageRedactionConfig* other) {
  using std::swap;
  swap(redaction_color_, other->redaction_color_);
  swap(target_, other->target_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RedactContentRequest_ImageRedactionConfig::GetMetadata() const {
  protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void RedactContentRequest::InitAsDefaultInstance() {
  ::google::privacy::dlp::v2beta1::_RedactContentRequest_default_instance_._instance.get_mutable()->inspect_config_ = const_cast< ::google::privacy::dlp::v2beta1::InspectConfig*>(
      ::google::privacy::dlp::v2beta1::InspectConfig::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RedactContentRequest::kInspectConfigFieldNumber;
const int RedactContentRequest::kItemsFieldNumber;
const int RedactContentRequest::kReplaceConfigsFieldNumber;
const int RedactContentRequest::kImageRedactionConfigsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RedactContentRequest::RedactContentRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaultsRedactContentRequest();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.privacy.dlp.v2beta1.RedactContentRequest)
}
RedactContentRequest::RedactContentRequest(const RedactContentRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      items_(from.items_),
      replace_configs_(from.replace_configs_),
      image_redaction_configs_(from.image_redaction_configs_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_inspect_config()) {
    inspect_config_ = new ::google::privacy::dlp::v2beta1::InspectConfig(*from.inspect_config_);
  } else {
    inspect_config_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:google.privacy.dlp.v2beta1.RedactContentRequest)
}

void RedactContentRequest::SharedCtor() {
  inspect_config_ = NULL;
  _cached_size_ = 0;
}

RedactContentRequest::~RedactContentRequest() {
  // @@protoc_insertion_point(destructor:google.privacy.dlp.v2beta1.RedactContentRequest)
  SharedDtor();
}

void RedactContentRequest::SharedDtor() {
  if (this != internal_default_instance()) delete inspect_config_;
}

void RedactContentRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RedactContentRequest::descriptor() {
  ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RedactContentRequest& RedactContentRequest::default_instance() {
  ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaultsRedactContentRequest();
  return *internal_default_instance();
}

RedactContentRequest* RedactContentRequest::New(::google::protobuf::Arena* arena) const {
  RedactContentRequest* n = new RedactContentRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RedactContentRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.privacy.dlp.v2beta1.RedactContentRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  items_.Clear();
  replace_configs_.Clear();
  image_redaction_configs_.Clear();
  if (GetArenaNoVirtual() == NULL && inspect_config_ != NULL) {
    delete inspect_config_;
  }
  inspect_config_ = NULL;
  _internal_metadata_.Clear();
}

bool RedactContentRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.privacy.dlp.v2beta1.RedactContentRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .google.privacy.dlp.v2beta1.InspectConfig inspect_config = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_inspect_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .google.privacy.dlp.v2beta1.ContentItem items = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_items()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .google.privacy.dlp.v2beta1.RedactContentRequest.ReplaceConfig replace_configs = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_replace_configs()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .google.privacy.dlp.v2beta1.RedactContentRequest.ImageRedactionConfig image_redaction_configs = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_image_redaction_configs()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.privacy.dlp.v2beta1.RedactContentRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.privacy.dlp.v2beta1.RedactContentRequest)
  return false;
#undef DO_
}

void RedactContentRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.privacy.dlp.v2beta1.RedactContentRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.privacy.dlp.v2beta1.InspectConfig inspect_config = 1;
  if (this->has_inspect_config()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->inspect_config_, output);
  }

  // repeated .google.privacy.dlp.v2beta1.ContentItem items = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->items_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->items(static_cast<int>(i)), output);
  }

  // repeated .google.privacy.dlp.v2beta1.RedactContentRequest.ReplaceConfig replace_configs = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->replace_configs_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->replace_configs(static_cast<int>(i)), output);
  }

  // repeated .google.privacy.dlp.v2beta1.RedactContentRequest.ImageRedactionConfig image_redaction_configs = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->image_redaction_configs_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->image_redaction_configs(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:google.privacy.dlp.v2beta1.RedactContentRequest)
}

::google::protobuf::uint8* RedactContentRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.privacy.dlp.v2beta1.RedactContentRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.privacy.dlp.v2beta1.InspectConfig inspect_config = 1;
  if (this->has_inspect_config()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->inspect_config_, deterministic, target);
  }

  // repeated .google.privacy.dlp.v2beta1.ContentItem items = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->items_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->items(static_cast<int>(i)), deterministic, target);
  }

  // repeated .google.privacy.dlp.v2beta1.RedactContentRequest.ReplaceConfig replace_configs = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->replace_configs_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->replace_configs(static_cast<int>(i)), deterministic, target);
  }

  // repeated .google.privacy.dlp.v2beta1.RedactContentRequest.ImageRedactionConfig image_redaction_configs = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->image_redaction_configs_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->image_redaction_configs(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.privacy.dlp.v2beta1.RedactContentRequest)
  return target;
}

size_t RedactContentRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.privacy.dlp.v2beta1.RedactContentRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .google.privacy.dlp.v2beta1.ContentItem items = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->items_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->items(static_cast<int>(i)));
    }
  }

  // repeated .google.privacy.dlp.v2beta1.RedactContentRequest.ReplaceConfig replace_configs = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->replace_configs_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->replace_configs(static_cast<int>(i)));
    }
  }

  // repeated .google.privacy.dlp.v2beta1.RedactContentRequest.ImageRedactionConfig image_redaction_configs = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->image_redaction_configs_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->image_redaction_configs(static_cast<int>(i)));
    }
  }

  // .google.privacy.dlp.v2beta1.InspectConfig inspect_config = 1;
  if (this->has_inspect_config()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->inspect_config_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RedactContentRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.privacy.dlp.v2beta1.RedactContentRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const RedactContentRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RedactContentRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.privacy.dlp.v2beta1.RedactContentRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.privacy.dlp.v2beta1.RedactContentRequest)
    MergeFrom(*source);
  }
}

void RedactContentRequest::MergeFrom(const RedactContentRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.privacy.dlp.v2beta1.RedactContentRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  items_.MergeFrom(from.items_);
  replace_configs_.MergeFrom(from.replace_configs_);
  image_redaction_configs_.MergeFrom(from.image_redaction_configs_);
  if (from.has_inspect_config()) {
    mutable_inspect_config()->::google::privacy::dlp::v2beta1::InspectConfig::MergeFrom(from.inspect_config());
  }
}

void RedactContentRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.privacy.dlp.v2beta1.RedactContentRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RedactContentRequest::CopyFrom(const RedactContentRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.privacy.dlp.v2beta1.RedactContentRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RedactContentRequest::IsInitialized() const {
  return true;
}

void RedactContentRequest::Swap(RedactContentRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RedactContentRequest::InternalSwap(RedactContentRequest* other) {
  using std::swap;
  items_.InternalSwap(&other->items_);
  replace_configs_.InternalSwap(&other->replace_configs_);
  image_redaction_configs_.InternalSwap(&other->image_redaction_configs_);
  swap(inspect_config_, other->inspect_config_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RedactContentRequest::GetMetadata() const {
  protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Color::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Color::kRedFieldNumber;
const int Color::kGreenFieldNumber;
const int Color::kBlueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Color::Color()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaultsColor();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.privacy.dlp.v2beta1.Color)
}
Color::Color(const Color& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&red_, &from.red_,
    static_cast<size_t>(reinterpret_cast<char*>(&blue_) -
    reinterpret_cast<char*>(&red_)) + sizeof(blue_));
  // @@protoc_insertion_point(copy_constructor:google.privacy.dlp.v2beta1.Color)
}

void Color::SharedCtor() {
  ::memset(&red_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&blue_) -
      reinterpret_cast<char*>(&red_)) + sizeof(blue_));
  _cached_size_ = 0;
}

Color::~Color() {
  // @@protoc_insertion_point(destructor:google.privacy.dlp.v2beta1.Color)
  SharedDtor();
}

void Color::SharedDtor() {
}

void Color::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Color::descriptor() {
  ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Color& Color::default_instance() {
  ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaultsColor();
  return *internal_default_instance();
}

Color* Color::New(::google::protobuf::Arena* arena) const {
  Color* n = new Color;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Color::Clear() {
// @@protoc_insertion_point(message_clear_start:google.privacy.dlp.v2beta1.Color)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&red_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&blue_) -
      reinterpret_cast<char*>(&red_)) + sizeof(blue_));
  _internal_metadata_.Clear();
}

bool Color::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.privacy.dlp.v2beta1.Color)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // float red = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &red_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float green = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &green_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float blue = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &blue_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.privacy.dlp.v2beta1.Color)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.privacy.dlp.v2beta1.Color)
  return false;
#undef DO_
}

void Color::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.privacy.dlp.v2beta1.Color)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float red = 1;
  if (this->red() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->red(), output);
  }

  // float green = 2;
  if (this->green() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->green(), output);
  }

  // float blue = 3;
  if (this->blue() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->blue(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:google.privacy.dlp.v2beta1.Color)
}

::google::protobuf::uint8* Color::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.privacy.dlp.v2beta1.Color)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float red = 1;
  if (this->red() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->red(), target);
  }

  // float green = 2;
  if (this->green() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->green(), target);
  }

  // float blue = 3;
  if (this->blue() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->blue(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.privacy.dlp.v2beta1.Color)
  return target;
}

size_t Color::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.privacy.dlp.v2beta1.Color)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // float red = 1;
  if (this->red() != 0) {
    total_size += 1 + 4;
  }

  // float green = 2;
  if (this->green() != 0) {
    total_size += 1 + 4;
  }

  // float blue = 3;
  if (this->blue() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Color::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.privacy.dlp.v2beta1.Color)
  GOOGLE_DCHECK_NE(&from, this);
  const Color* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Color>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.privacy.dlp.v2beta1.Color)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.privacy.dlp.v2beta1.Color)
    MergeFrom(*source);
  }
}

void Color::MergeFrom(const Color& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.privacy.dlp.v2beta1.Color)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.red() != 0) {
    set_red(from.red());
  }
  if (from.green() != 0) {
    set_green(from.green());
  }
  if (from.blue() != 0) {
    set_blue(from.blue());
  }
}

void Color::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.privacy.dlp.v2beta1.Color)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Color::CopyFrom(const Color& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.privacy.dlp.v2beta1.Color)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Color::IsInitialized() const {
  return true;
}

void Color::Swap(Color* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Color::InternalSwap(Color* other) {
  using std::swap;
  swap(red_, other->red_);
  swap(green_, other->green_);
  swap(blue_, other->blue_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Color::GetMetadata() const {
  protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void RedactContentResponse::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RedactContentResponse::kItemsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RedactContentResponse::RedactContentResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaultsRedactContentResponse();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.privacy.dlp.v2beta1.RedactContentResponse)
}
RedactContentResponse::RedactContentResponse(const RedactContentResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      items_(from.items_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:google.privacy.dlp.v2beta1.RedactContentResponse)
}

void RedactContentResponse::SharedCtor() {
  _cached_size_ = 0;
}

RedactContentResponse::~RedactContentResponse() {
  // @@protoc_insertion_point(destructor:google.privacy.dlp.v2beta1.RedactContentResponse)
  SharedDtor();
}

void RedactContentResponse::SharedDtor() {
}

void RedactContentResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RedactContentResponse::descriptor() {
  ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RedactContentResponse& RedactContentResponse::default_instance() {
  ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaultsRedactContentResponse();
  return *internal_default_instance();
}

RedactContentResponse* RedactContentResponse::New(::google::protobuf::Arena* arena) const {
  RedactContentResponse* n = new RedactContentResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RedactContentResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:google.privacy.dlp.v2beta1.RedactContentResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  items_.Clear();
  _internal_metadata_.Clear();
}

bool RedactContentResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.privacy.dlp.v2beta1.RedactContentResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .google.privacy.dlp.v2beta1.ContentItem items = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_items()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.privacy.dlp.v2beta1.RedactContentResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.privacy.dlp.v2beta1.RedactContentResponse)
  return false;
#undef DO_
}

void RedactContentResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.privacy.dlp.v2beta1.RedactContentResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .google.privacy.dlp.v2beta1.ContentItem items = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->items_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->items(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:google.privacy.dlp.v2beta1.RedactContentResponse)
}

::google::protobuf::uint8* RedactContentResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.privacy.dlp.v2beta1.RedactContentResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .google.privacy.dlp.v2beta1.ContentItem items = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->items_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->items(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.privacy.dlp.v2beta1.RedactContentResponse)
  return target;
}

size_t RedactContentResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.privacy.dlp.v2beta1.RedactContentResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .google.privacy.dlp.v2beta1.ContentItem items = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->items_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->items(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RedactContentResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.privacy.dlp.v2beta1.RedactContentResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const RedactContentResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RedactContentResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.privacy.dlp.v2beta1.RedactContentResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.privacy.dlp.v2beta1.RedactContentResponse)
    MergeFrom(*source);
  }
}

void RedactContentResponse::MergeFrom(const RedactContentResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.privacy.dlp.v2beta1.RedactContentResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  items_.MergeFrom(from.items_);
}

void RedactContentResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.privacy.dlp.v2beta1.RedactContentResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RedactContentResponse::CopyFrom(const RedactContentResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.privacy.dlp.v2beta1.RedactContentResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RedactContentResponse::IsInitialized() const {
  return true;
}

void RedactContentResponse::Swap(RedactContentResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RedactContentResponse::InternalSwap(RedactContentResponse* other) {
  using std::swap;
  items_.InternalSwap(&other->items_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RedactContentResponse::GetMetadata() const {
  protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void DeidentifyContentRequest::InitAsDefaultInstance() {
  ::google::privacy::dlp::v2beta1::_DeidentifyContentRequest_default_instance_._instance.get_mutable()->deidentify_config_ = const_cast< ::google::privacy::dlp::v2beta1::DeidentifyConfig*>(
      ::google::privacy::dlp::v2beta1::DeidentifyConfig::internal_default_instance());
  ::google::privacy::dlp::v2beta1::_DeidentifyContentRequest_default_instance_._instance.get_mutable()->inspect_config_ = const_cast< ::google::privacy::dlp::v2beta1::InspectConfig*>(
      ::google::privacy::dlp::v2beta1::InspectConfig::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DeidentifyContentRequest::kDeidentifyConfigFieldNumber;
const int DeidentifyContentRequest::kInspectConfigFieldNumber;
const int DeidentifyContentRequest::kItemsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DeidentifyContentRequest::DeidentifyContentRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaultsDeidentifyContentRequest();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.privacy.dlp.v2beta1.DeidentifyContentRequest)
}
DeidentifyContentRequest::DeidentifyContentRequest(const DeidentifyContentRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      items_(from.items_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_deidentify_config()) {
    deidentify_config_ = new ::google::privacy::dlp::v2beta1::DeidentifyConfig(*from.deidentify_config_);
  } else {
    deidentify_config_ = NULL;
  }
  if (from.has_inspect_config()) {
    inspect_config_ = new ::google::privacy::dlp::v2beta1::InspectConfig(*from.inspect_config_);
  } else {
    inspect_config_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:google.privacy.dlp.v2beta1.DeidentifyContentRequest)
}

void DeidentifyContentRequest::SharedCtor() {
  ::memset(&deidentify_config_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&inspect_config_) -
      reinterpret_cast<char*>(&deidentify_config_)) + sizeof(inspect_config_));
  _cached_size_ = 0;
}

DeidentifyContentRequest::~DeidentifyContentRequest() {
  // @@protoc_insertion_point(destructor:google.privacy.dlp.v2beta1.DeidentifyContentRequest)
  SharedDtor();
}

void DeidentifyContentRequest::SharedDtor() {
  if (this != internal_default_instance()) delete deidentify_config_;
  if (this != internal_default_instance()) delete inspect_config_;
}

void DeidentifyContentRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DeidentifyContentRequest::descriptor() {
  ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DeidentifyContentRequest& DeidentifyContentRequest::default_instance() {
  ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaultsDeidentifyContentRequest();
  return *internal_default_instance();
}

DeidentifyContentRequest* DeidentifyContentRequest::New(::google::protobuf::Arena* arena) const {
  DeidentifyContentRequest* n = new DeidentifyContentRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DeidentifyContentRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.privacy.dlp.v2beta1.DeidentifyContentRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  items_.Clear();
  if (GetArenaNoVirtual() == NULL && deidentify_config_ != NULL) {
    delete deidentify_config_;
  }
  deidentify_config_ = NULL;
  if (GetArenaNoVirtual() == NULL && inspect_config_ != NULL) {
    delete inspect_config_;
  }
  inspect_config_ = NULL;
  _internal_metadata_.Clear();
}

bool DeidentifyContentRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.privacy.dlp.v2beta1.DeidentifyContentRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .google.privacy.dlp.v2beta1.DeidentifyConfig deidentify_config = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_deidentify_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.privacy.dlp.v2beta1.InspectConfig inspect_config = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_inspect_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .google.privacy.dlp.v2beta1.ContentItem items = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_items()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.privacy.dlp.v2beta1.DeidentifyContentRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.privacy.dlp.v2beta1.DeidentifyContentRequest)
  return false;
#undef DO_
}

void DeidentifyContentRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.privacy.dlp.v2beta1.DeidentifyContentRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.privacy.dlp.v2beta1.DeidentifyConfig deidentify_config = 1;
  if (this->has_deidentify_config()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->deidentify_config_, output);
  }

  // .google.privacy.dlp.v2beta1.InspectConfig inspect_config = 2;
  if (this->has_inspect_config()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->inspect_config_, output);
  }

  // repeated .google.privacy.dlp.v2beta1.ContentItem items = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->items_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->items(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:google.privacy.dlp.v2beta1.DeidentifyContentRequest)
}

::google::protobuf::uint8* DeidentifyContentRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.privacy.dlp.v2beta1.DeidentifyContentRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.privacy.dlp.v2beta1.DeidentifyConfig deidentify_config = 1;
  if (this->has_deidentify_config()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->deidentify_config_, deterministic, target);
  }

  // .google.privacy.dlp.v2beta1.InspectConfig inspect_config = 2;
  if (this->has_inspect_config()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, *this->inspect_config_, deterministic, target);
  }

  // repeated .google.privacy.dlp.v2beta1.ContentItem items = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->items_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->items(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.privacy.dlp.v2beta1.DeidentifyContentRequest)
  return target;
}

size_t DeidentifyContentRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.privacy.dlp.v2beta1.DeidentifyContentRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .google.privacy.dlp.v2beta1.ContentItem items = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->items_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->items(static_cast<int>(i)));
    }
  }

  // .google.privacy.dlp.v2beta1.DeidentifyConfig deidentify_config = 1;
  if (this->has_deidentify_config()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->deidentify_config_);
  }

  // .google.privacy.dlp.v2beta1.InspectConfig inspect_config = 2;
  if (this->has_inspect_config()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->inspect_config_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeidentifyContentRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.privacy.dlp.v2beta1.DeidentifyContentRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const DeidentifyContentRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DeidentifyContentRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.privacy.dlp.v2beta1.DeidentifyContentRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.privacy.dlp.v2beta1.DeidentifyContentRequest)
    MergeFrom(*source);
  }
}

void DeidentifyContentRequest::MergeFrom(const DeidentifyContentRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.privacy.dlp.v2beta1.DeidentifyContentRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  items_.MergeFrom(from.items_);
  if (from.has_deidentify_config()) {
    mutable_deidentify_config()->::google::privacy::dlp::v2beta1::DeidentifyConfig::MergeFrom(from.deidentify_config());
  }
  if (from.has_inspect_config()) {
    mutable_inspect_config()->::google::privacy::dlp::v2beta1::InspectConfig::MergeFrom(from.inspect_config());
  }
}

void DeidentifyContentRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.privacy.dlp.v2beta1.DeidentifyContentRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeidentifyContentRequest::CopyFrom(const DeidentifyContentRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.privacy.dlp.v2beta1.DeidentifyContentRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeidentifyContentRequest::IsInitialized() const {
  return true;
}

void DeidentifyContentRequest::Swap(DeidentifyContentRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DeidentifyContentRequest::InternalSwap(DeidentifyContentRequest* other) {
  using std::swap;
  items_.InternalSwap(&other->items_);
  swap(deidentify_config_, other->deidentify_config_);
  swap(inspect_config_, other->inspect_config_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DeidentifyContentRequest::GetMetadata() const {
  protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void DeidentifyContentResponse::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DeidentifyContentResponse::kItemsFieldNumber;
const int DeidentifyContentResponse::kSummariesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DeidentifyContentResponse::DeidentifyContentResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaultsDeidentifyContentResponse();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.privacy.dlp.v2beta1.DeidentifyContentResponse)
}
DeidentifyContentResponse::DeidentifyContentResponse(const DeidentifyContentResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      items_(from.items_),
      summaries_(from.summaries_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:google.privacy.dlp.v2beta1.DeidentifyContentResponse)
}

void DeidentifyContentResponse::SharedCtor() {
  _cached_size_ = 0;
}

DeidentifyContentResponse::~DeidentifyContentResponse() {
  // @@protoc_insertion_point(destructor:google.privacy.dlp.v2beta1.DeidentifyContentResponse)
  SharedDtor();
}

void DeidentifyContentResponse::SharedDtor() {
}

void DeidentifyContentResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DeidentifyContentResponse::descriptor() {
  ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DeidentifyContentResponse& DeidentifyContentResponse::default_instance() {
  ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaultsDeidentifyContentResponse();
  return *internal_default_instance();
}

DeidentifyContentResponse* DeidentifyContentResponse::New(::google::protobuf::Arena* arena) const {
  DeidentifyContentResponse* n = new DeidentifyContentResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DeidentifyContentResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:google.privacy.dlp.v2beta1.DeidentifyContentResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  items_.Clear();
  summaries_.Clear();
  _internal_metadata_.Clear();
}

bool DeidentifyContentResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.privacy.dlp.v2beta1.DeidentifyContentResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .google.privacy.dlp.v2beta1.ContentItem items = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_items()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .google.privacy.dlp.v2beta1.DeidentificationSummary summaries = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_summaries()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.privacy.dlp.v2beta1.DeidentifyContentResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.privacy.dlp.v2beta1.DeidentifyContentResponse)
  return false;
#undef DO_
}

void DeidentifyContentResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.privacy.dlp.v2beta1.DeidentifyContentResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .google.privacy.dlp.v2beta1.ContentItem items = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->items_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->items(static_cast<int>(i)), output);
  }

  // repeated .google.privacy.dlp.v2beta1.DeidentificationSummary summaries = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->summaries_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->summaries(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:google.privacy.dlp.v2beta1.DeidentifyContentResponse)
}

::google::protobuf::uint8* DeidentifyContentResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.privacy.dlp.v2beta1.DeidentifyContentResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .google.privacy.dlp.v2beta1.ContentItem items = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->items_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->items(static_cast<int>(i)), deterministic, target);
  }

  // repeated .google.privacy.dlp.v2beta1.DeidentificationSummary summaries = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->summaries_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->summaries(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.privacy.dlp.v2beta1.DeidentifyContentResponse)
  return target;
}

size_t DeidentifyContentResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.privacy.dlp.v2beta1.DeidentifyContentResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .google.privacy.dlp.v2beta1.ContentItem items = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->items_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->items(static_cast<int>(i)));
    }
  }

  // repeated .google.privacy.dlp.v2beta1.DeidentificationSummary summaries = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->summaries_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->summaries(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeidentifyContentResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.privacy.dlp.v2beta1.DeidentifyContentResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const DeidentifyContentResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DeidentifyContentResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.privacy.dlp.v2beta1.DeidentifyContentResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.privacy.dlp.v2beta1.DeidentifyContentResponse)
    MergeFrom(*source);
  }
}

void DeidentifyContentResponse::MergeFrom(const DeidentifyContentResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.privacy.dlp.v2beta1.DeidentifyContentResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  items_.MergeFrom(from.items_);
  summaries_.MergeFrom(from.summaries_);
}

void DeidentifyContentResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.privacy.dlp.v2beta1.DeidentifyContentResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeidentifyContentResponse::CopyFrom(const DeidentifyContentResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.privacy.dlp.v2beta1.DeidentifyContentResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeidentifyContentResponse::IsInitialized() const {
  return true;
}

void DeidentifyContentResponse::Swap(DeidentifyContentResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DeidentifyContentResponse::InternalSwap(DeidentifyContentResponse* other) {
  using std::swap;
  items_.InternalSwap(&other->items_);
  summaries_.InternalSwap(&other->summaries_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DeidentifyContentResponse::GetMetadata() const {
  protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void InspectContentRequest::InitAsDefaultInstance() {
  ::google::privacy::dlp::v2beta1::_InspectContentRequest_default_instance_._instance.get_mutable()->inspect_config_ = const_cast< ::google::privacy::dlp::v2beta1::InspectConfig*>(
      ::google::privacy::dlp::v2beta1::InspectConfig::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int InspectContentRequest::kInspectConfigFieldNumber;
const int InspectContentRequest::kItemsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

InspectContentRequest::InspectContentRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaultsInspectContentRequest();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.privacy.dlp.v2beta1.InspectContentRequest)
}
InspectContentRequest::InspectContentRequest(const InspectContentRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      items_(from.items_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_inspect_config()) {
    inspect_config_ = new ::google::privacy::dlp::v2beta1::InspectConfig(*from.inspect_config_);
  } else {
    inspect_config_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:google.privacy.dlp.v2beta1.InspectContentRequest)
}

void InspectContentRequest::SharedCtor() {
  inspect_config_ = NULL;
  _cached_size_ = 0;
}

InspectContentRequest::~InspectContentRequest() {
  // @@protoc_insertion_point(destructor:google.privacy.dlp.v2beta1.InspectContentRequest)
  SharedDtor();
}

void InspectContentRequest::SharedDtor() {
  if (this != internal_default_instance()) delete inspect_config_;
}

void InspectContentRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InspectContentRequest::descriptor() {
  ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const InspectContentRequest& InspectContentRequest::default_instance() {
  ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaultsInspectContentRequest();
  return *internal_default_instance();
}

InspectContentRequest* InspectContentRequest::New(::google::protobuf::Arena* arena) const {
  InspectContentRequest* n = new InspectContentRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void InspectContentRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.privacy.dlp.v2beta1.InspectContentRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  items_.Clear();
  if (GetArenaNoVirtual() == NULL && inspect_config_ != NULL) {
    delete inspect_config_;
  }
  inspect_config_ = NULL;
  _internal_metadata_.Clear();
}

bool InspectContentRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.privacy.dlp.v2beta1.InspectContentRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .google.privacy.dlp.v2beta1.InspectConfig inspect_config = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_inspect_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .google.privacy.dlp.v2beta1.ContentItem items = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_items()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.privacy.dlp.v2beta1.InspectContentRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.privacy.dlp.v2beta1.InspectContentRequest)
  return false;
#undef DO_
}

void InspectContentRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.privacy.dlp.v2beta1.InspectContentRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.privacy.dlp.v2beta1.InspectConfig inspect_config = 1;
  if (this->has_inspect_config()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->inspect_config_, output);
  }

  // repeated .google.privacy.dlp.v2beta1.ContentItem items = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->items_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->items(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:google.privacy.dlp.v2beta1.InspectContentRequest)
}

::google::protobuf::uint8* InspectContentRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.privacy.dlp.v2beta1.InspectContentRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.privacy.dlp.v2beta1.InspectConfig inspect_config = 1;
  if (this->has_inspect_config()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->inspect_config_, deterministic, target);
  }

  // repeated .google.privacy.dlp.v2beta1.ContentItem items = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->items_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->items(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.privacy.dlp.v2beta1.InspectContentRequest)
  return target;
}

size_t InspectContentRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.privacy.dlp.v2beta1.InspectContentRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .google.privacy.dlp.v2beta1.ContentItem items = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->items_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->items(static_cast<int>(i)));
    }
  }

  // .google.privacy.dlp.v2beta1.InspectConfig inspect_config = 1;
  if (this->has_inspect_config()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->inspect_config_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InspectContentRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.privacy.dlp.v2beta1.InspectContentRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const InspectContentRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const InspectContentRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.privacy.dlp.v2beta1.InspectContentRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.privacy.dlp.v2beta1.InspectContentRequest)
    MergeFrom(*source);
  }
}

void InspectContentRequest::MergeFrom(const InspectContentRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.privacy.dlp.v2beta1.InspectContentRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  items_.MergeFrom(from.items_);
  if (from.has_inspect_config()) {
    mutable_inspect_config()->::google::privacy::dlp::v2beta1::InspectConfig::MergeFrom(from.inspect_config());
  }
}

void InspectContentRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.privacy.dlp.v2beta1.InspectContentRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InspectContentRequest::CopyFrom(const InspectContentRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.privacy.dlp.v2beta1.InspectContentRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InspectContentRequest::IsInitialized() const {
  return true;
}

void InspectContentRequest::Swap(InspectContentRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void InspectContentRequest::InternalSwap(InspectContentRequest* other) {
  using std::swap;
  items_.InternalSwap(&other->items_);
  swap(inspect_config_, other->inspect_config_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata InspectContentRequest::GetMetadata() const {
  protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void InspectContentResponse::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int InspectContentResponse::kResultsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

InspectContentResponse::InspectContentResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaultsInspectContentResponse();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.privacy.dlp.v2beta1.InspectContentResponse)
}
InspectContentResponse::InspectContentResponse(const InspectContentResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      results_(from.results_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:google.privacy.dlp.v2beta1.InspectContentResponse)
}

void InspectContentResponse::SharedCtor() {
  _cached_size_ = 0;
}

InspectContentResponse::~InspectContentResponse() {
  // @@protoc_insertion_point(destructor:google.privacy.dlp.v2beta1.InspectContentResponse)
  SharedDtor();
}

void InspectContentResponse::SharedDtor() {
}

void InspectContentResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InspectContentResponse::descriptor() {
  ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const InspectContentResponse& InspectContentResponse::default_instance() {
  ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaultsInspectContentResponse();
  return *internal_default_instance();
}

InspectContentResponse* InspectContentResponse::New(::google::protobuf::Arena* arena) const {
  InspectContentResponse* n = new InspectContentResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void InspectContentResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:google.privacy.dlp.v2beta1.InspectContentResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  results_.Clear();
  _internal_metadata_.Clear();
}

bool InspectContentResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.privacy.dlp.v2beta1.InspectContentResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .google.privacy.dlp.v2beta1.InspectResult results = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_results()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.privacy.dlp.v2beta1.InspectContentResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.privacy.dlp.v2beta1.InspectContentResponse)
  return false;
#undef DO_
}

void InspectContentResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.privacy.dlp.v2beta1.InspectContentResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .google.privacy.dlp.v2beta1.InspectResult results = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->results_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->results(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:google.privacy.dlp.v2beta1.InspectContentResponse)
}

::google::protobuf::uint8* InspectContentResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.privacy.dlp.v2beta1.InspectContentResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .google.privacy.dlp.v2beta1.InspectResult results = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->results_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->results(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.privacy.dlp.v2beta1.InspectContentResponse)
  return target;
}

size_t InspectContentResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.privacy.dlp.v2beta1.InspectContentResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .google.privacy.dlp.v2beta1.InspectResult results = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->results_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->results(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InspectContentResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.privacy.dlp.v2beta1.InspectContentResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const InspectContentResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const InspectContentResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.privacy.dlp.v2beta1.InspectContentResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.privacy.dlp.v2beta1.InspectContentResponse)
    MergeFrom(*source);
  }
}

void InspectContentResponse::MergeFrom(const InspectContentResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.privacy.dlp.v2beta1.InspectContentResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  results_.MergeFrom(from.results_);
}

void InspectContentResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.privacy.dlp.v2beta1.InspectContentResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InspectContentResponse::CopyFrom(const InspectContentResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.privacy.dlp.v2beta1.InspectContentResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InspectContentResponse::IsInitialized() const {
  return true;
}

void InspectContentResponse::Swap(InspectContentResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void InspectContentResponse::InternalSwap(InspectContentResponse* other) {
  using std::swap;
  results_.InternalSwap(&other->results_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata InspectContentResponse::GetMetadata() const {
  protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CreateInspectOperationRequest::InitAsDefaultInstance() {
  ::google::privacy::dlp::v2beta1::_CreateInspectOperationRequest_default_instance_._instance.get_mutable()->inspect_config_ = const_cast< ::google::privacy::dlp::v2beta1::InspectConfig*>(
      ::google::privacy::dlp::v2beta1::InspectConfig::internal_default_instance());
  ::google::privacy::dlp::v2beta1::_CreateInspectOperationRequest_default_instance_._instance.get_mutable()->storage_config_ = const_cast< ::google::privacy::dlp::v2beta1::StorageConfig*>(
      ::google::privacy::dlp::v2beta1::StorageConfig::internal_default_instance());
  ::google::privacy::dlp::v2beta1::_CreateInspectOperationRequest_default_instance_._instance.get_mutable()->output_config_ = const_cast< ::google::privacy::dlp::v2beta1::OutputStorageConfig*>(
      ::google::privacy::dlp::v2beta1::OutputStorageConfig::internal_default_instance());
  ::google::privacy::dlp::v2beta1::_CreateInspectOperationRequest_default_instance_._instance.get_mutable()->operation_config_ = const_cast< ::google::privacy::dlp::v2beta1::OperationConfig*>(
      ::google::privacy::dlp::v2beta1::OperationConfig::internal_default_instance());
}
void CreateInspectOperationRequest::clear_storage_config() {
  if (GetArenaNoVirtual() == NULL && storage_config_ != NULL) {
    delete storage_config_;
  }
  storage_config_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CreateInspectOperationRequest::kInspectConfigFieldNumber;
const int CreateInspectOperationRequest::kStorageConfigFieldNumber;
const int CreateInspectOperationRequest::kOutputConfigFieldNumber;
const int CreateInspectOperationRequest::kOperationConfigFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CreateInspectOperationRequest::CreateInspectOperationRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaultsCreateInspectOperationRequest();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.privacy.dlp.v2beta1.CreateInspectOperationRequest)
}
CreateInspectOperationRequest::CreateInspectOperationRequest(const CreateInspectOperationRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_inspect_config()) {
    inspect_config_ = new ::google::privacy::dlp::v2beta1::InspectConfig(*from.inspect_config_);
  } else {
    inspect_config_ = NULL;
  }
  if (from.has_storage_config()) {
    storage_config_ = new ::google::privacy::dlp::v2beta1::StorageConfig(*from.storage_config_);
  } else {
    storage_config_ = NULL;
  }
  if (from.has_output_config()) {
    output_config_ = new ::google::privacy::dlp::v2beta1::OutputStorageConfig(*from.output_config_);
  } else {
    output_config_ = NULL;
  }
  if (from.has_operation_config()) {
    operation_config_ = new ::google::privacy::dlp::v2beta1::OperationConfig(*from.operation_config_);
  } else {
    operation_config_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:google.privacy.dlp.v2beta1.CreateInspectOperationRequest)
}

void CreateInspectOperationRequest::SharedCtor() {
  ::memset(&inspect_config_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&operation_config_) -
      reinterpret_cast<char*>(&inspect_config_)) + sizeof(operation_config_));
  _cached_size_ = 0;
}

CreateInspectOperationRequest::~CreateInspectOperationRequest() {
  // @@protoc_insertion_point(destructor:google.privacy.dlp.v2beta1.CreateInspectOperationRequest)
  SharedDtor();
}

void CreateInspectOperationRequest::SharedDtor() {
  if (this != internal_default_instance()) delete inspect_config_;
  if (this != internal_default_instance()) delete storage_config_;
  if (this != internal_default_instance()) delete output_config_;
  if (this != internal_default_instance()) delete operation_config_;
}

void CreateInspectOperationRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CreateInspectOperationRequest::descriptor() {
  ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CreateInspectOperationRequest& CreateInspectOperationRequest::default_instance() {
  ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaultsCreateInspectOperationRequest();
  return *internal_default_instance();
}

CreateInspectOperationRequest* CreateInspectOperationRequest::New(::google::protobuf::Arena* arena) const {
  CreateInspectOperationRequest* n = new CreateInspectOperationRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CreateInspectOperationRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.privacy.dlp.v2beta1.CreateInspectOperationRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && inspect_config_ != NULL) {
    delete inspect_config_;
  }
  inspect_config_ = NULL;
  if (GetArenaNoVirtual() == NULL && storage_config_ != NULL) {
    delete storage_config_;
  }
  storage_config_ = NULL;
  if (GetArenaNoVirtual() == NULL && output_config_ != NULL) {
    delete output_config_;
  }
  output_config_ = NULL;
  if (GetArenaNoVirtual() == NULL && operation_config_ != NULL) {
    delete operation_config_;
  }
  operation_config_ = NULL;
  _internal_metadata_.Clear();
}

bool CreateInspectOperationRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.privacy.dlp.v2beta1.CreateInspectOperationRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .google.privacy.dlp.v2beta1.InspectConfig inspect_config = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_inspect_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.privacy.dlp.v2beta1.StorageConfig storage_config = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_storage_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.privacy.dlp.v2beta1.OutputStorageConfig output_config = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_output_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.privacy.dlp.v2beta1.OperationConfig operation_config = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_operation_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.privacy.dlp.v2beta1.CreateInspectOperationRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.privacy.dlp.v2beta1.CreateInspectOperationRequest)
  return false;
#undef DO_
}

void CreateInspectOperationRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.privacy.dlp.v2beta1.CreateInspectOperationRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.privacy.dlp.v2beta1.InspectConfig inspect_config = 1;
  if (this->has_inspect_config()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->inspect_config_, output);
  }

  // .google.privacy.dlp.v2beta1.StorageConfig storage_config = 2;
  if (this->has_storage_config()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->storage_config_, output);
  }

  // .google.privacy.dlp.v2beta1.OutputStorageConfig output_config = 3;
  if (this->has_output_config()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->output_config_, output);
  }

  // .google.privacy.dlp.v2beta1.OperationConfig operation_config = 5;
  if (this->has_operation_config()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->operation_config_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:google.privacy.dlp.v2beta1.CreateInspectOperationRequest)
}

::google::protobuf::uint8* CreateInspectOperationRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.privacy.dlp.v2beta1.CreateInspectOperationRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.privacy.dlp.v2beta1.InspectConfig inspect_config = 1;
  if (this->has_inspect_config()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->inspect_config_, deterministic, target);
  }

  // .google.privacy.dlp.v2beta1.StorageConfig storage_config = 2;
  if (this->has_storage_config()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, *this->storage_config_, deterministic, target);
  }

  // .google.privacy.dlp.v2beta1.OutputStorageConfig output_config = 3;
  if (this->has_output_config()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, *this->output_config_, deterministic, target);
  }

  // .google.privacy.dlp.v2beta1.OperationConfig operation_config = 5;
  if (this->has_operation_config()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, *this->operation_config_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.privacy.dlp.v2beta1.CreateInspectOperationRequest)
  return target;
}

size_t CreateInspectOperationRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.privacy.dlp.v2beta1.CreateInspectOperationRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .google.privacy.dlp.v2beta1.InspectConfig inspect_config = 1;
  if (this->has_inspect_config()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->inspect_config_);
  }

  // .google.privacy.dlp.v2beta1.StorageConfig storage_config = 2;
  if (this->has_storage_config()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->storage_config_);
  }

  // .google.privacy.dlp.v2beta1.OutputStorageConfig output_config = 3;
  if (this->has_output_config()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->output_config_);
  }

  // .google.privacy.dlp.v2beta1.OperationConfig operation_config = 5;
  if (this->has_operation_config()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->operation_config_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CreateInspectOperationRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.privacy.dlp.v2beta1.CreateInspectOperationRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CreateInspectOperationRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CreateInspectOperationRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.privacy.dlp.v2beta1.CreateInspectOperationRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.privacy.dlp.v2beta1.CreateInspectOperationRequest)
    MergeFrom(*source);
  }
}

void CreateInspectOperationRequest::MergeFrom(const CreateInspectOperationRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.privacy.dlp.v2beta1.CreateInspectOperationRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_inspect_config()) {
    mutable_inspect_config()->::google::privacy::dlp::v2beta1::InspectConfig::MergeFrom(from.inspect_config());
  }
  if (from.has_storage_config()) {
    mutable_storage_config()->::google::privacy::dlp::v2beta1::StorageConfig::MergeFrom(from.storage_config());
  }
  if (from.has_output_config()) {
    mutable_output_config()->::google::privacy::dlp::v2beta1::OutputStorageConfig::MergeFrom(from.output_config());
  }
  if (from.has_operation_config()) {
    mutable_operation_config()->::google::privacy::dlp::v2beta1::OperationConfig::MergeFrom(from.operation_config());
  }
}

void CreateInspectOperationRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.privacy.dlp.v2beta1.CreateInspectOperationRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateInspectOperationRequest::CopyFrom(const CreateInspectOperationRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.privacy.dlp.v2beta1.CreateInspectOperationRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateInspectOperationRequest::IsInitialized() const {
  return true;
}

void CreateInspectOperationRequest::Swap(CreateInspectOperationRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CreateInspectOperationRequest::InternalSwap(CreateInspectOperationRequest* other) {
  using std::swap;
  swap(inspect_config_, other->inspect_config_);
  swap(storage_config_, other->storage_config_);
  swap(output_config_, other->output_config_);
  swap(operation_config_, other->operation_config_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CreateInspectOperationRequest::GetMetadata() const {
  protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void OutputStorageConfig::InitAsDefaultInstance() {
  ::google::privacy::dlp::v2beta1::_OutputStorageConfig_default_instance_.table_ = const_cast< ::google::privacy::dlp::v2beta1::BigQueryTable*>(
      ::google::privacy::dlp::v2beta1::BigQueryTable::internal_default_instance());
  ::google::privacy::dlp::v2beta1::_OutputStorageConfig_default_instance_.storage_path_ = const_cast< ::google::privacy::dlp::v2beta1::CloudStoragePath*>(
      ::google::privacy::dlp::v2beta1::CloudStoragePath::internal_default_instance());
}
void OutputStorageConfig::set_allocated_table(::google::privacy::dlp::v2beta1::BigQueryTable* table) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_type();
  if (table) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      table = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, table, submessage_arena);
    }
    set_has_table();
    type_.table_ = table;
  }
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2beta1.OutputStorageConfig.table)
}
void OutputStorageConfig::clear_table() {
  if (has_table()) {
    delete type_.table_;
    clear_has_type();
  }
}
void OutputStorageConfig::set_allocated_storage_path(::google::privacy::dlp::v2beta1::CloudStoragePath* storage_path) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_type();
  if (storage_path) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      storage_path = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, storage_path, submessage_arena);
    }
    set_has_storage_path();
    type_.storage_path_ = storage_path;
  }
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2beta1.OutputStorageConfig.storage_path)
}
void OutputStorageConfig::clear_storage_path() {
  if (has_storage_path()) {
    delete type_.storage_path_;
    clear_has_type();
  }
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int OutputStorageConfig::kTableFieldNumber;
const int OutputStorageConfig::kStoragePathFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OutputStorageConfig::OutputStorageConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaultsOutputStorageConfig();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.privacy.dlp.v2beta1.OutputStorageConfig)
}
OutputStorageConfig::OutputStorageConfig(const OutputStorageConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_type();
  switch (from.type_case()) {
    case kTable: {
      mutable_table()->::google::privacy::dlp::v2beta1::BigQueryTable::MergeFrom(from.table());
      break;
    }
    case kStoragePath: {
      mutable_storage_path()->::google::privacy::dlp::v2beta1::CloudStoragePath::MergeFrom(from.storage_path());
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:google.privacy.dlp.v2beta1.OutputStorageConfig)
}

void OutputStorageConfig::SharedCtor() {
  clear_has_type();
  _cached_size_ = 0;
}

OutputStorageConfig::~OutputStorageConfig() {
  // @@protoc_insertion_point(destructor:google.privacy.dlp.v2beta1.OutputStorageConfig)
  SharedDtor();
}

void OutputStorageConfig::SharedDtor() {
  if (has_type()) {
    clear_type();
  }
}

void OutputStorageConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OutputStorageConfig::descriptor() {
  ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const OutputStorageConfig& OutputStorageConfig::default_instance() {
  ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaultsOutputStorageConfig();
  return *internal_default_instance();
}

OutputStorageConfig* OutputStorageConfig::New(::google::protobuf::Arena* arena) const {
  OutputStorageConfig* n = new OutputStorageConfig;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void OutputStorageConfig::clear_type() {
// @@protoc_insertion_point(one_of_clear_start:google.privacy.dlp.v2beta1.OutputStorageConfig)
  switch (type_case()) {
    case kTable: {
      delete type_.table_;
      break;
    }
    case kStoragePath: {
      delete type_.storage_path_;
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = TYPE_NOT_SET;
}


void OutputStorageConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:google.privacy.dlp.v2beta1.OutputStorageConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_type();
  _internal_metadata_.Clear();
}

bool OutputStorageConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.privacy.dlp.v2beta1.OutputStorageConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .google.privacy.dlp.v2beta1.BigQueryTable table = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_table()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.privacy.dlp.v2beta1.CloudStoragePath storage_path = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_storage_path()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.privacy.dlp.v2beta1.OutputStorageConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.privacy.dlp.v2beta1.OutputStorageConfig)
  return false;
#undef DO_
}

void OutputStorageConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.privacy.dlp.v2beta1.OutputStorageConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.privacy.dlp.v2beta1.BigQueryTable table = 1;
  if (has_table()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *type_.table_, output);
  }

  // .google.privacy.dlp.v2beta1.CloudStoragePath storage_path = 2;
  if (has_storage_path()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *type_.storage_path_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:google.privacy.dlp.v2beta1.OutputStorageConfig)
}

::google::protobuf::uint8* OutputStorageConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.privacy.dlp.v2beta1.OutputStorageConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.privacy.dlp.v2beta1.BigQueryTable table = 1;
  if (has_table()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *type_.table_, deterministic, target);
  }

  // .google.privacy.dlp.v2beta1.CloudStoragePath storage_path = 2;
  if (has_storage_path()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, *type_.storage_path_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.privacy.dlp.v2beta1.OutputStorageConfig)
  return target;
}

size_t OutputStorageConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.privacy.dlp.v2beta1.OutputStorageConfig)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  switch (type_case()) {
    // .google.privacy.dlp.v2beta1.BigQueryTable table = 1;
    case kTable: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *type_.table_);
      break;
    }
    // .google.privacy.dlp.v2beta1.CloudStoragePath storage_path = 2;
    case kStoragePath: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *type_.storage_path_);
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OutputStorageConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.privacy.dlp.v2beta1.OutputStorageConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const OutputStorageConfig* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const OutputStorageConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.privacy.dlp.v2beta1.OutputStorageConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.privacy.dlp.v2beta1.OutputStorageConfig)
    MergeFrom(*source);
  }
}

void OutputStorageConfig::MergeFrom(const OutputStorageConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.privacy.dlp.v2beta1.OutputStorageConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.type_case()) {
    case kTable: {
      mutable_table()->::google::privacy::dlp::v2beta1::BigQueryTable::MergeFrom(from.table());
      break;
    }
    case kStoragePath: {
      mutable_storage_path()->::google::privacy::dlp::v2beta1::CloudStoragePath::MergeFrom(from.storage_path());
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
}

void OutputStorageConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.privacy.dlp.v2beta1.OutputStorageConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OutputStorageConfig::CopyFrom(const OutputStorageConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.privacy.dlp.v2beta1.OutputStorageConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OutputStorageConfig::IsInitialized() const {
  return true;
}

void OutputStorageConfig::Swap(OutputStorageConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void OutputStorageConfig::InternalSwap(OutputStorageConfig* other) {
  using std::swap;
  swap(type_, other->type_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata OutputStorageConfig::GetMetadata() const {
  protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void InfoTypeStatistics::InitAsDefaultInstance() {
  ::google::privacy::dlp::v2beta1::_InfoTypeStatistics_default_instance_._instance.get_mutable()->info_type_ = const_cast< ::google::privacy::dlp::v2beta1::InfoType*>(
      ::google::privacy::dlp::v2beta1::InfoType::internal_default_instance());
}
void InfoTypeStatistics::clear_info_type() {
  if (GetArenaNoVirtual() == NULL && info_type_ != NULL) {
    delete info_type_;
  }
  info_type_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int InfoTypeStatistics::kInfoTypeFieldNumber;
const int InfoTypeStatistics::kCountFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

InfoTypeStatistics::InfoTypeStatistics()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaultsInfoTypeStatistics();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.privacy.dlp.v2beta1.InfoTypeStatistics)
}
InfoTypeStatistics::InfoTypeStatistics(const InfoTypeStatistics& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_info_type()) {
    info_type_ = new ::google::privacy::dlp::v2beta1::InfoType(*from.info_type_);
  } else {
    info_type_ = NULL;
  }
  count_ = from.count_;
  // @@protoc_insertion_point(copy_constructor:google.privacy.dlp.v2beta1.InfoTypeStatistics)
}

void InfoTypeStatistics::SharedCtor() {
  ::memset(&info_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&count_) -
      reinterpret_cast<char*>(&info_type_)) + sizeof(count_));
  _cached_size_ = 0;
}

InfoTypeStatistics::~InfoTypeStatistics() {
  // @@protoc_insertion_point(destructor:google.privacy.dlp.v2beta1.InfoTypeStatistics)
  SharedDtor();
}

void InfoTypeStatistics::SharedDtor() {
  if (this != internal_default_instance()) delete info_type_;
}

void InfoTypeStatistics::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InfoTypeStatistics::descriptor() {
  ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const InfoTypeStatistics& InfoTypeStatistics::default_instance() {
  ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaultsInfoTypeStatistics();
  return *internal_default_instance();
}

InfoTypeStatistics* InfoTypeStatistics::New(::google::protobuf::Arena* arena) const {
  InfoTypeStatistics* n = new InfoTypeStatistics;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void InfoTypeStatistics::Clear() {
// @@protoc_insertion_point(message_clear_start:google.privacy.dlp.v2beta1.InfoTypeStatistics)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && info_type_ != NULL) {
    delete info_type_;
  }
  info_type_ = NULL;
  count_ = GOOGLE_LONGLONG(0);
  _internal_metadata_.Clear();
}

bool InfoTypeStatistics::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.privacy.dlp.v2beta1.InfoTypeStatistics)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .google.privacy.dlp.v2beta1.InfoType info_type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_info_type()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 count = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.privacy.dlp.v2beta1.InfoTypeStatistics)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.privacy.dlp.v2beta1.InfoTypeStatistics)
  return false;
#undef DO_
}

void InfoTypeStatistics::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.privacy.dlp.v2beta1.InfoTypeStatistics)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.privacy.dlp.v2beta1.InfoType info_type = 1;
  if (this->has_info_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->info_type_, output);
  }

  // int64 count = 2;
  if (this->count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->count(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:google.privacy.dlp.v2beta1.InfoTypeStatistics)
}

::google::protobuf::uint8* InfoTypeStatistics::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.privacy.dlp.v2beta1.InfoTypeStatistics)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.privacy.dlp.v2beta1.InfoType info_type = 1;
  if (this->has_info_type()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->info_type_, deterministic, target);
  }

  // int64 count = 2;
  if (this->count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->count(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.privacy.dlp.v2beta1.InfoTypeStatistics)
  return target;
}

size_t InfoTypeStatistics::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.privacy.dlp.v2beta1.InfoTypeStatistics)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .google.privacy.dlp.v2beta1.InfoType info_type = 1;
  if (this->has_info_type()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->info_type_);
  }

  // int64 count = 2;
  if (this->count() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->count());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InfoTypeStatistics::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.privacy.dlp.v2beta1.InfoTypeStatistics)
  GOOGLE_DCHECK_NE(&from, this);
  const InfoTypeStatistics* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const InfoTypeStatistics>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.privacy.dlp.v2beta1.InfoTypeStatistics)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.privacy.dlp.v2beta1.InfoTypeStatistics)
    MergeFrom(*source);
  }
}

void InfoTypeStatistics::MergeFrom(const InfoTypeStatistics& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.privacy.dlp.v2beta1.InfoTypeStatistics)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_info_type()) {
    mutable_info_type()->::google::privacy::dlp::v2beta1::InfoType::MergeFrom(from.info_type());
  }
  if (from.count() != 0) {
    set_count(from.count());
  }
}

void InfoTypeStatistics::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.privacy.dlp.v2beta1.InfoTypeStatistics)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InfoTypeStatistics::CopyFrom(const InfoTypeStatistics& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.privacy.dlp.v2beta1.InfoTypeStatistics)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InfoTypeStatistics::IsInitialized() const {
  return true;
}

void InfoTypeStatistics::Swap(InfoTypeStatistics* other) {
  if (other == this) return;
  InternalSwap(other);
}
void InfoTypeStatistics::InternalSwap(InfoTypeStatistics* other) {
  using std::swap;
  swap(info_type_, other->info_type_);
  swap(count_, other->count_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata InfoTypeStatistics::GetMetadata() const {
  protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void InspectOperationMetadata::InitAsDefaultInstance() {
  ::google::privacy::dlp::v2beta1::_InspectOperationMetadata_default_instance_._instance.get_mutable()->create_time_ = const_cast< ::google::protobuf::Timestamp*>(
      ::google::protobuf::Timestamp::internal_default_instance());
  ::google::privacy::dlp::v2beta1::_InspectOperationMetadata_default_instance_._instance.get_mutable()->request_inspect_config_ = const_cast< ::google::privacy::dlp::v2beta1::InspectConfig*>(
      ::google::privacy::dlp::v2beta1::InspectConfig::internal_default_instance());
  ::google::privacy::dlp::v2beta1::_InspectOperationMetadata_default_instance_._instance.get_mutable()->request_storage_config_ = const_cast< ::google::privacy::dlp::v2beta1::StorageConfig*>(
      ::google::privacy::dlp::v2beta1::StorageConfig::internal_default_instance());
  ::google::privacy::dlp::v2beta1::_InspectOperationMetadata_default_instance_._instance.get_mutable()->request_output_config_ = const_cast< ::google::privacy::dlp::v2beta1::OutputStorageConfig*>(
      ::google::privacy::dlp::v2beta1::OutputStorageConfig::internal_default_instance());
}
void InspectOperationMetadata::clear_create_time() {
  if (GetArenaNoVirtual() == NULL && create_time_ != NULL) {
    delete create_time_;
  }
  create_time_ = NULL;
}
void InspectOperationMetadata::clear_request_storage_config() {
  if (GetArenaNoVirtual() == NULL && request_storage_config_ != NULL) {
    delete request_storage_config_;
  }
  request_storage_config_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int InspectOperationMetadata::kProcessedBytesFieldNumber;
const int InspectOperationMetadata::kTotalEstimatedBytesFieldNumber;
const int InspectOperationMetadata::kInfoTypeStatsFieldNumber;
const int InspectOperationMetadata::kCreateTimeFieldNumber;
const int InspectOperationMetadata::kRequestInspectConfigFieldNumber;
const int InspectOperationMetadata::kRequestStorageConfigFieldNumber;
const int InspectOperationMetadata::kRequestOutputConfigFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

InspectOperationMetadata::InspectOperationMetadata()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaultsInspectOperationMetadata();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.privacy.dlp.v2beta1.InspectOperationMetadata)
}
InspectOperationMetadata::InspectOperationMetadata(const InspectOperationMetadata& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      info_type_stats_(from.info_type_stats_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_create_time()) {
    create_time_ = new ::google::protobuf::Timestamp(*from.create_time_);
  } else {
    create_time_ = NULL;
  }
  if (from.has_request_inspect_config()) {
    request_inspect_config_ = new ::google::privacy::dlp::v2beta1::InspectConfig(*from.request_inspect_config_);
  } else {
    request_inspect_config_ = NULL;
  }
  if (from.has_request_storage_config()) {
    request_storage_config_ = new ::google::privacy::dlp::v2beta1::StorageConfig(*from.request_storage_config_);
  } else {
    request_storage_config_ = NULL;
  }
  if (from.has_request_output_config()) {
    request_output_config_ = new ::google::privacy::dlp::v2beta1::OutputStorageConfig(*from.request_output_config_);
  } else {
    request_output_config_ = NULL;
  }
  ::memcpy(&processed_bytes_, &from.processed_bytes_,
    static_cast<size_t>(reinterpret_cast<char*>(&total_estimated_bytes_) -
    reinterpret_cast<char*>(&processed_bytes_)) + sizeof(total_estimated_bytes_));
  // @@protoc_insertion_point(copy_constructor:google.privacy.dlp.v2beta1.InspectOperationMetadata)
}

void InspectOperationMetadata::SharedCtor() {
  ::memset(&create_time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&total_estimated_bytes_) -
      reinterpret_cast<char*>(&create_time_)) + sizeof(total_estimated_bytes_));
  _cached_size_ = 0;
}

InspectOperationMetadata::~InspectOperationMetadata() {
  // @@protoc_insertion_point(destructor:google.privacy.dlp.v2beta1.InspectOperationMetadata)
  SharedDtor();
}

void InspectOperationMetadata::SharedDtor() {
  if (this != internal_default_instance()) delete create_time_;
  if (this != internal_default_instance()) delete request_inspect_config_;
  if (this != internal_default_instance()) delete request_storage_config_;
  if (this != internal_default_instance()) delete request_output_config_;
}

void InspectOperationMetadata::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InspectOperationMetadata::descriptor() {
  ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const InspectOperationMetadata& InspectOperationMetadata::default_instance() {
  ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaultsInspectOperationMetadata();
  return *internal_default_instance();
}

InspectOperationMetadata* InspectOperationMetadata::New(::google::protobuf::Arena* arena) const {
  InspectOperationMetadata* n = new InspectOperationMetadata;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void InspectOperationMetadata::Clear() {
// @@protoc_insertion_point(message_clear_start:google.privacy.dlp.v2beta1.InspectOperationMetadata)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  info_type_stats_.Clear();
  if (GetArenaNoVirtual() == NULL && create_time_ != NULL) {
    delete create_time_;
  }
  create_time_ = NULL;
  if (GetArenaNoVirtual() == NULL && request_inspect_config_ != NULL) {
    delete request_inspect_config_;
  }
  request_inspect_config_ = NULL;
  if (GetArenaNoVirtual() == NULL && request_storage_config_ != NULL) {
    delete request_storage_config_;
  }
  request_storage_config_ = NULL;
  if (GetArenaNoVirtual() == NULL && request_output_config_ != NULL) {
    delete request_output_config_;
  }
  request_output_config_ = NULL;
  ::memset(&processed_bytes_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&total_estimated_bytes_) -
      reinterpret_cast<char*>(&processed_bytes_)) + sizeof(total_estimated_bytes_));
  _internal_metadata_.Clear();
}

bool InspectOperationMetadata::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.privacy.dlp.v2beta1.InspectOperationMetadata)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 processed_bytes = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &processed_bytes_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .google.privacy.dlp.v2beta1.InfoTypeStatistics info_type_stats = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_info_type_stats()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Timestamp create_time = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_create_time()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 total_estimated_bytes = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &total_estimated_bytes_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.privacy.dlp.v2beta1.InspectConfig request_inspect_config = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_request_inspect_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.privacy.dlp.v2beta1.StorageConfig request_storage_config = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_request_storage_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.privacy.dlp.v2beta1.OutputStorageConfig request_output_config = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_request_output_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.privacy.dlp.v2beta1.InspectOperationMetadata)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.privacy.dlp.v2beta1.InspectOperationMetadata)
  return false;
#undef DO_
}

void InspectOperationMetadata::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.privacy.dlp.v2beta1.InspectOperationMetadata)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 processed_bytes = 1;
  if (this->processed_bytes() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->processed_bytes(), output);
  }

  // repeated .google.privacy.dlp.v2beta1.InfoTypeStatistics info_type_stats = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->info_type_stats_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->info_type_stats(static_cast<int>(i)), output);
  }

  // .google.protobuf.Timestamp create_time = 3;
  if (this->has_create_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->create_time_, output);
  }

  // int64 total_estimated_bytes = 4;
  if (this->total_estimated_bytes() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->total_estimated_bytes(), output);
  }

  // .google.privacy.dlp.v2beta1.InspectConfig request_inspect_config = 5;
  if (this->has_request_inspect_config()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->request_inspect_config_, output);
  }

  // .google.privacy.dlp.v2beta1.StorageConfig request_storage_config = 6;
  if (this->has_request_storage_config()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->request_storage_config_, output);
  }

  // .google.privacy.dlp.v2beta1.OutputStorageConfig request_output_config = 7;
  if (this->has_request_output_config()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->request_output_config_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:google.privacy.dlp.v2beta1.InspectOperationMetadata)
}

::google::protobuf::uint8* InspectOperationMetadata::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.privacy.dlp.v2beta1.InspectOperationMetadata)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 processed_bytes = 1;
  if (this->processed_bytes() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->processed_bytes(), target);
  }

  // repeated .google.privacy.dlp.v2beta1.InfoTypeStatistics info_type_stats = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->info_type_stats_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->info_type_stats(static_cast<int>(i)), deterministic, target);
  }

  // .google.protobuf.Timestamp create_time = 3;
  if (this->has_create_time()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, *this->create_time_, deterministic, target);
  }

  // int64 total_estimated_bytes = 4;
  if (this->total_estimated_bytes() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->total_estimated_bytes(), target);
  }

  // .google.privacy.dlp.v2beta1.InspectConfig request_inspect_config = 5;
  if (this->has_request_inspect_config()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, *this->request_inspect_config_, deterministic, target);
  }

  // .google.privacy.dlp.v2beta1.StorageConfig request_storage_config = 6;
  if (this->has_request_storage_config()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, *this->request_storage_config_, deterministic, target);
  }

  // .google.privacy.dlp.v2beta1.OutputStorageConfig request_output_config = 7;
  if (this->has_request_output_config()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, *this->request_output_config_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.privacy.dlp.v2beta1.InspectOperationMetadata)
  return target;
}

size_t InspectOperationMetadata::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.privacy.dlp.v2beta1.InspectOperationMetadata)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .google.privacy.dlp.v2beta1.InfoTypeStatistics info_type_stats = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->info_type_stats_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->info_type_stats(static_cast<int>(i)));
    }
  }

  // .google.protobuf.Timestamp create_time = 3;
  if (this->has_create_time()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->create_time_);
  }

  // .google.privacy.dlp.v2beta1.InspectConfig request_inspect_config = 5;
  if (this->has_request_inspect_config()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->request_inspect_config_);
  }

  // .google.privacy.dlp.v2beta1.StorageConfig request_storage_config = 6;
  if (this->has_request_storage_config()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->request_storage_config_);
  }

  // .google.privacy.dlp.v2beta1.OutputStorageConfig request_output_config = 7;
  if (this->has_request_output_config()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->request_output_config_);
  }

  // int64 processed_bytes = 1;
  if (this->processed_bytes() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->processed_bytes());
  }

  // int64 total_estimated_bytes = 4;
  if (this->total_estimated_bytes() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->total_estimated_bytes());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InspectOperationMetadata::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.privacy.dlp.v2beta1.InspectOperationMetadata)
  GOOGLE_DCHECK_NE(&from, this);
  const InspectOperationMetadata* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const InspectOperationMetadata>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.privacy.dlp.v2beta1.InspectOperationMetadata)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.privacy.dlp.v2beta1.InspectOperationMetadata)
    MergeFrom(*source);
  }
}

void InspectOperationMetadata::MergeFrom(const InspectOperationMetadata& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.privacy.dlp.v2beta1.InspectOperationMetadata)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  info_type_stats_.MergeFrom(from.info_type_stats_);
  if (from.has_create_time()) {
    mutable_create_time()->::google::protobuf::Timestamp::MergeFrom(from.create_time());
  }
  if (from.has_request_inspect_config()) {
    mutable_request_inspect_config()->::google::privacy::dlp::v2beta1::InspectConfig::MergeFrom(from.request_inspect_config());
  }
  if (from.has_request_storage_config()) {
    mutable_request_storage_config()->::google::privacy::dlp::v2beta1::StorageConfig::MergeFrom(from.request_storage_config());
  }
  if (from.has_request_output_config()) {
    mutable_request_output_config()->::google::privacy::dlp::v2beta1::OutputStorageConfig::MergeFrom(from.request_output_config());
  }
  if (from.processed_bytes() != 0) {
    set_processed_bytes(from.processed_bytes());
  }
  if (from.total_estimated_bytes() != 0) {
    set_total_estimated_bytes(from.total_estimated_bytes());
  }
}

void InspectOperationMetadata::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.privacy.dlp.v2beta1.InspectOperationMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InspectOperationMetadata::CopyFrom(const InspectOperationMetadata& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.privacy.dlp.v2beta1.InspectOperationMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InspectOperationMetadata::IsInitialized() const {
  return true;
}

void InspectOperationMetadata::Swap(InspectOperationMetadata* other) {
  if (other == this) return;
  InternalSwap(other);
}
void InspectOperationMetadata::InternalSwap(InspectOperationMetadata* other) {
  using std::swap;
  info_type_stats_.InternalSwap(&other->info_type_stats_);
  swap(create_time_, other->create_time_);
  swap(request_inspect_config_, other->request_inspect_config_);
  swap(request_storage_config_, other->request_storage_config_);
  swap(request_output_config_, other->request_output_config_);
  swap(processed_bytes_, other->processed_bytes_);
  swap(total_estimated_bytes_, other->total_estimated_bytes_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata InspectOperationMetadata::GetMetadata() const {
  protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void InspectOperationResult::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int InspectOperationResult::kNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

InspectOperationResult::InspectOperationResult()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaultsInspectOperationResult();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.privacy.dlp.v2beta1.InspectOperationResult)
}
InspectOperationResult::InspectOperationResult(const InspectOperationResult& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  // @@protoc_insertion_point(copy_constructor:google.privacy.dlp.v2beta1.InspectOperationResult)
}

void InspectOperationResult::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

InspectOperationResult::~InspectOperationResult() {
  // @@protoc_insertion_point(destructor:google.privacy.dlp.v2beta1.InspectOperationResult)
  SharedDtor();
}

void InspectOperationResult::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void InspectOperationResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InspectOperationResult::descriptor() {
  ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const InspectOperationResult& InspectOperationResult::default_instance() {
  ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaultsInspectOperationResult();
  return *internal_default_instance();
}

InspectOperationResult* InspectOperationResult::New(::google::protobuf::Arena* arena) const {
  InspectOperationResult* n = new InspectOperationResult;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void InspectOperationResult::Clear() {
// @@protoc_insertion_point(message_clear_start:google.privacy.dlp.v2beta1.InspectOperationResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool InspectOperationResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.privacy.dlp.v2beta1.InspectOperationResult)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.privacy.dlp.v2beta1.InspectOperationResult.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.privacy.dlp.v2beta1.InspectOperationResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.privacy.dlp.v2beta1.InspectOperationResult)
  return false;
#undef DO_
}

void InspectOperationResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.privacy.dlp.v2beta1.InspectOperationResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.privacy.dlp.v2beta1.InspectOperationResult.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:google.privacy.dlp.v2beta1.InspectOperationResult)
}

::google::protobuf::uint8* InspectOperationResult::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.privacy.dlp.v2beta1.InspectOperationResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.privacy.dlp.v2beta1.InspectOperationResult.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.privacy.dlp.v2beta1.InspectOperationResult)
  return target;
}

size_t InspectOperationResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.privacy.dlp.v2beta1.InspectOperationResult)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InspectOperationResult::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.privacy.dlp.v2beta1.InspectOperationResult)
  GOOGLE_DCHECK_NE(&from, this);
  const InspectOperationResult* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const InspectOperationResult>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.privacy.dlp.v2beta1.InspectOperationResult)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.privacy.dlp.v2beta1.InspectOperationResult)
    MergeFrom(*source);
  }
}

void InspectOperationResult::MergeFrom(const InspectOperationResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.privacy.dlp.v2beta1.InspectOperationResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
}

void InspectOperationResult::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.privacy.dlp.v2beta1.InspectOperationResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InspectOperationResult::CopyFrom(const InspectOperationResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.privacy.dlp.v2beta1.InspectOperationResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InspectOperationResult::IsInitialized() const {
  return true;
}

void InspectOperationResult::Swap(InspectOperationResult* other) {
  if (other == this) return;
  InternalSwap(other);
}
void InspectOperationResult::InternalSwap(InspectOperationResult* other) {
  using std::swap;
  name_.Swap(&other->name_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata InspectOperationResult::GetMetadata() const {
  protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ListInspectFindingsRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ListInspectFindingsRequest::kNameFieldNumber;
const int ListInspectFindingsRequest::kPageSizeFieldNumber;
const int ListInspectFindingsRequest::kPageTokenFieldNumber;
const int ListInspectFindingsRequest::kFilterFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ListInspectFindingsRequest::ListInspectFindingsRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaultsListInspectFindingsRequest();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.privacy.dlp.v2beta1.ListInspectFindingsRequest)
}
ListInspectFindingsRequest::ListInspectFindingsRequest(const ListInspectFindingsRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  page_token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.page_token().size() > 0) {
    page_token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.page_token_);
  }
  filter_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.filter().size() > 0) {
    filter_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.filter_);
  }
  page_size_ = from.page_size_;
  // @@protoc_insertion_point(copy_constructor:google.privacy.dlp.v2beta1.ListInspectFindingsRequest)
}

void ListInspectFindingsRequest::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  page_token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  filter_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  page_size_ = 0;
  _cached_size_ = 0;
}

ListInspectFindingsRequest::~ListInspectFindingsRequest() {
  // @@protoc_insertion_point(destructor:google.privacy.dlp.v2beta1.ListInspectFindingsRequest)
  SharedDtor();
}

void ListInspectFindingsRequest::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  page_token_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  filter_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ListInspectFindingsRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ListInspectFindingsRequest::descriptor() {
  ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ListInspectFindingsRequest& ListInspectFindingsRequest::default_instance() {
  ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaultsListInspectFindingsRequest();
  return *internal_default_instance();
}

ListInspectFindingsRequest* ListInspectFindingsRequest::New(::google::protobuf::Arena* arena) const {
  ListInspectFindingsRequest* n = new ListInspectFindingsRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ListInspectFindingsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.privacy.dlp.v2beta1.ListInspectFindingsRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  page_token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  filter_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  page_size_ = 0;
  _internal_metadata_.Clear();
}

bool ListInspectFindingsRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.privacy.dlp.v2beta1.ListInspectFindingsRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.privacy.dlp.v2beta1.ListInspectFindingsRequest.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 page_size = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &page_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string page_token = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_page_token()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->page_token().data(), static_cast<int>(this->page_token().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.privacy.dlp.v2beta1.ListInspectFindingsRequest.page_token"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string filter = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_filter()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->filter().data(), static_cast<int>(this->filter().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.privacy.dlp.v2beta1.ListInspectFindingsRequest.filter"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.privacy.dlp.v2beta1.ListInspectFindingsRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.privacy.dlp.v2beta1.ListInspectFindingsRequest)
  return false;
#undef DO_
}

void ListInspectFindingsRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.privacy.dlp.v2beta1.ListInspectFindingsRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.privacy.dlp.v2beta1.ListInspectFindingsRequest.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // int32 page_size = 2;
  if (this->page_size() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->page_size(), output);
  }

  // string page_token = 3;
  if (this->page_token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->page_token().data(), static_cast<int>(this->page_token().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.privacy.dlp.v2beta1.ListInspectFindingsRequest.page_token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->page_token(), output);
  }

  // string filter = 4;
  if (this->filter().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->filter().data(), static_cast<int>(this->filter().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.privacy.dlp.v2beta1.ListInspectFindingsRequest.filter");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->filter(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:google.privacy.dlp.v2beta1.ListInspectFindingsRequest)
}

::google::protobuf::uint8* ListInspectFindingsRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.privacy.dlp.v2beta1.ListInspectFindingsRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.privacy.dlp.v2beta1.ListInspectFindingsRequest.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // int32 page_size = 2;
  if (this->page_size() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->page_size(), target);
  }

  // string page_token = 3;
  if (this->page_token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->page_token().data(), static_cast<int>(this->page_token().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.privacy.dlp.v2beta1.ListInspectFindingsRequest.page_token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->page_token(), target);
  }

  // string filter = 4;
  if (this->filter().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->filter().data(), static_cast<int>(this->filter().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.privacy.dlp.v2beta1.ListInspectFindingsRequest.filter");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->filter(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.privacy.dlp.v2beta1.ListInspectFindingsRequest)
  return target;
}

size_t ListInspectFindingsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.privacy.dlp.v2beta1.ListInspectFindingsRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // string page_token = 3;
  if (this->page_token().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->page_token());
  }

  // string filter = 4;
  if (this->filter().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->filter());
  }

  // int32 page_size = 2;
  if (this->page_size() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->page_size());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ListInspectFindingsRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.privacy.dlp.v2beta1.ListInspectFindingsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ListInspectFindingsRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ListInspectFindingsRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.privacy.dlp.v2beta1.ListInspectFindingsRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.privacy.dlp.v2beta1.ListInspectFindingsRequest)
    MergeFrom(*source);
  }
}

void ListInspectFindingsRequest::MergeFrom(const ListInspectFindingsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.privacy.dlp.v2beta1.ListInspectFindingsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.page_token().size() > 0) {

    page_token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.page_token_);
  }
  if (from.filter().size() > 0) {

    filter_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.filter_);
  }
  if (from.page_size() != 0) {
    set_page_size(from.page_size());
  }
}

void ListInspectFindingsRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.privacy.dlp.v2beta1.ListInspectFindingsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListInspectFindingsRequest::CopyFrom(const ListInspectFindingsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.privacy.dlp.v2beta1.ListInspectFindingsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListInspectFindingsRequest::IsInitialized() const {
  return true;
}

void ListInspectFindingsRequest::Swap(ListInspectFindingsRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ListInspectFindingsRequest::InternalSwap(ListInspectFindingsRequest* other) {
  using std::swap;
  name_.Swap(&other->name_);
  page_token_.Swap(&other->page_token_);
  filter_.Swap(&other->filter_);
  swap(page_size_, other->page_size_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ListInspectFindingsRequest::GetMetadata() const {
  protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ListInspectFindingsResponse::InitAsDefaultInstance() {
  ::google::privacy::dlp::v2beta1::_ListInspectFindingsResponse_default_instance_._instance.get_mutable()->result_ = const_cast< ::google::privacy::dlp::v2beta1::InspectResult*>(
      ::google::privacy::dlp::v2beta1::InspectResult::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ListInspectFindingsResponse::kResultFieldNumber;
const int ListInspectFindingsResponse::kNextPageTokenFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ListInspectFindingsResponse::ListInspectFindingsResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaultsListInspectFindingsResponse();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.privacy.dlp.v2beta1.ListInspectFindingsResponse)
}
ListInspectFindingsResponse::ListInspectFindingsResponse(const ListInspectFindingsResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  next_page_token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.next_page_token().size() > 0) {
    next_page_token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.next_page_token_);
  }
  if (from.has_result()) {
    result_ = new ::google::privacy::dlp::v2beta1::InspectResult(*from.result_);
  } else {
    result_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:google.privacy.dlp.v2beta1.ListInspectFindingsResponse)
}

void ListInspectFindingsResponse::SharedCtor() {
  next_page_token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  result_ = NULL;
  _cached_size_ = 0;
}

ListInspectFindingsResponse::~ListInspectFindingsResponse() {
  // @@protoc_insertion_point(destructor:google.privacy.dlp.v2beta1.ListInspectFindingsResponse)
  SharedDtor();
}

void ListInspectFindingsResponse::SharedDtor() {
  next_page_token_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete result_;
}

void ListInspectFindingsResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ListInspectFindingsResponse::descriptor() {
  ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ListInspectFindingsResponse& ListInspectFindingsResponse::default_instance() {
  ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaultsListInspectFindingsResponse();
  return *internal_default_instance();
}

ListInspectFindingsResponse* ListInspectFindingsResponse::New(::google::protobuf::Arena* arena) const {
  ListInspectFindingsResponse* n = new ListInspectFindingsResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ListInspectFindingsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:google.privacy.dlp.v2beta1.ListInspectFindingsResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  next_page_token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && result_ != NULL) {
    delete result_;
  }
  result_ = NULL;
  _internal_metadata_.Clear();
}

bool ListInspectFindingsResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.privacy.dlp.v2beta1.ListInspectFindingsResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .google.privacy.dlp.v2beta1.InspectResult result = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_result()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string next_page_token = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_next_page_token()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->next_page_token().data(), static_cast<int>(this->next_page_token().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.privacy.dlp.v2beta1.ListInspectFindingsResponse.next_page_token"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.privacy.dlp.v2beta1.ListInspectFindingsResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.privacy.dlp.v2beta1.ListInspectFindingsResponse)
  return false;
#undef DO_
}

void ListInspectFindingsResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.privacy.dlp.v2beta1.ListInspectFindingsResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.privacy.dlp.v2beta1.InspectResult result = 1;
  if (this->has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->result_, output);
  }

  // string next_page_token = 2;
  if (this->next_page_token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->next_page_token().data(), static_cast<int>(this->next_page_token().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.privacy.dlp.v2beta1.ListInspectFindingsResponse.next_page_token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->next_page_token(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:google.privacy.dlp.v2beta1.ListInspectFindingsResponse)
}

::google::protobuf::uint8* ListInspectFindingsResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.privacy.dlp.v2beta1.ListInspectFindingsResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.privacy.dlp.v2beta1.InspectResult result = 1;
  if (this->has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->result_, deterministic, target);
  }

  // string next_page_token = 2;
  if (this->next_page_token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->next_page_token().data(), static_cast<int>(this->next_page_token().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.privacy.dlp.v2beta1.ListInspectFindingsResponse.next_page_token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->next_page_token(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.privacy.dlp.v2beta1.ListInspectFindingsResponse)
  return target;
}

size_t ListInspectFindingsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.privacy.dlp.v2beta1.ListInspectFindingsResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string next_page_token = 2;
  if (this->next_page_token().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->next_page_token());
  }

  // .google.privacy.dlp.v2beta1.InspectResult result = 1;
  if (this->has_result()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->result_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ListInspectFindingsResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.privacy.dlp.v2beta1.ListInspectFindingsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ListInspectFindingsResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ListInspectFindingsResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.privacy.dlp.v2beta1.ListInspectFindingsResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.privacy.dlp.v2beta1.ListInspectFindingsResponse)
    MergeFrom(*source);
  }
}

void ListInspectFindingsResponse::MergeFrom(const ListInspectFindingsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.privacy.dlp.v2beta1.ListInspectFindingsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.next_page_token().size() > 0) {

    next_page_token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.next_page_token_);
  }
  if (from.has_result()) {
    mutable_result()->::google::privacy::dlp::v2beta1::InspectResult::MergeFrom(from.result());
  }
}

void ListInspectFindingsResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.privacy.dlp.v2beta1.ListInspectFindingsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListInspectFindingsResponse::CopyFrom(const ListInspectFindingsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.privacy.dlp.v2beta1.ListInspectFindingsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListInspectFindingsResponse::IsInitialized() const {
  return true;
}

void ListInspectFindingsResponse::Swap(ListInspectFindingsResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ListInspectFindingsResponse::InternalSwap(ListInspectFindingsResponse* other) {
  using std::swap;
  next_page_token_.Swap(&other->next_page_token_);
  swap(result_, other->result_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ListInspectFindingsResponse::GetMetadata() const {
  protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void InfoTypeDescription::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int InfoTypeDescription::kNameFieldNumber;
const int InfoTypeDescription::kDisplayNameFieldNumber;
const int InfoTypeDescription::kCategoriesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

InfoTypeDescription::InfoTypeDescription()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaultsInfoTypeDescription();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.privacy.dlp.v2beta1.InfoTypeDescription)
}
InfoTypeDescription::InfoTypeDescription(const InfoTypeDescription& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      categories_(from.categories_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  display_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.display_name().size() > 0) {
    display_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.display_name_);
  }
  // @@protoc_insertion_point(copy_constructor:google.privacy.dlp.v2beta1.InfoTypeDescription)
}

void InfoTypeDescription::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  display_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

InfoTypeDescription::~InfoTypeDescription() {
  // @@protoc_insertion_point(destructor:google.privacy.dlp.v2beta1.InfoTypeDescription)
  SharedDtor();
}

void InfoTypeDescription::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  display_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void InfoTypeDescription::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InfoTypeDescription::descriptor() {
  ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const InfoTypeDescription& InfoTypeDescription::default_instance() {
  ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaultsInfoTypeDescription();
  return *internal_default_instance();
}

InfoTypeDescription* InfoTypeDescription::New(::google::protobuf::Arena* arena) const {
  InfoTypeDescription* n = new InfoTypeDescription;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void InfoTypeDescription::Clear() {
// @@protoc_insertion_point(message_clear_start:google.privacy.dlp.v2beta1.InfoTypeDescription)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  categories_.Clear();
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  display_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool InfoTypeDescription::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.privacy.dlp.v2beta1.InfoTypeDescription)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.privacy.dlp.v2beta1.InfoTypeDescription.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string display_name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_display_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->display_name().data(), static_cast<int>(this->display_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.privacy.dlp.v2beta1.InfoTypeDescription.display_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .google.privacy.dlp.v2beta1.CategoryDescription categories = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_categories()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.privacy.dlp.v2beta1.InfoTypeDescription)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.privacy.dlp.v2beta1.InfoTypeDescription)
  return false;
#undef DO_
}

void InfoTypeDescription::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.privacy.dlp.v2beta1.InfoTypeDescription)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.privacy.dlp.v2beta1.InfoTypeDescription.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // string display_name = 2;
  if (this->display_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->display_name().data(), static_cast<int>(this->display_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.privacy.dlp.v2beta1.InfoTypeDescription.display_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->display_name(), output);
  }

  // repeated .google.privacy.dlp.v2beta1.CategoryDescription categories = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->categories_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->categories(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:google.privacy.dlp.v2beta1.InfoTypeDescription)
}

::google::protobuf::uint8* InfoTypeDescription::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.privacy.dlp.v2beta1.InfoTypeDescription)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.privacy.dlp.v2beta1.InfoTypeDescription.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // string display_name = 2;
  if (this->display_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->display_name().data(), static_cast<int>(this->display_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.privacy.dlp.v2beta1.InfoTypeDescription.display_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->display_name(), target);
  }

  // repeated .google.privacy.dlp.v2beta1.CategoryDescription categories = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->categories_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->categories(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.privacy.dlp.v2beta1.InfoTypeDescription)
  return target;
}

size_t InfoTypeDescription::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.privacy.dlp.v2beta1.InfoTypeDescription)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .google.privacy.dlp.v2beta1.CategoryDescription categories = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->categories_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->categories(static_cast<int>(i)));
    }
  }

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // string display_name = 2;
  if (this->display_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->display_name());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InfoTypeDescription::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.privacy.dlp.v2beta1.InfoTypeDescription)
  GOOGLE_DCHECK_NE(&from, this);
  const InfoTypeDescription* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const InfoTypeDescription>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.privacy.dlp.v2beta1.InfoTypeDescription)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.privacy.dlp.v2beta1.InfoTypeDescription)
    MergeFrom(*source);
  }
}

void InfoTypeDescription::MergeFrom(const InfoTypeDescription& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.privacy.dlp.v2beta1.InfoTypeDescription)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  categories_.MergeFrom(from.categories_);
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.display_name().size() > 0) {

    display_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.display_name_);
  }
}

void InfoTypeDescription::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.privacy.dlp.v2beta1.InfoTypeDescription)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InfoTypeDescription::CopyFrom(const InfoTypeDescription& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.privacy.dlp.v2beta1.InfoTypeDescription)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InfoTypeDescription::IsInitialized() const {
  return true;
}

void InfoTypeDescription::Swap(InfoTypeDescription* other) {
  if (other == this) return;
  InternalSwap(other);
}
void InfoTypeDescription::InternalSwap(InfoTypeDescription* other) {
  using std::swap;
  categories_.InternalSwap(&other->categories_);
  name_.Swap(&other->name_);
  display_name_.Swap(&other->display_name_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata InfoTypeDescription::GetMetadata() const {
  protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ListInfoTypesRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ListInfoTypesRequest::kCategoryFieldNumber;
const int ListInfoTypesRequest::kLanguageCodeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ListInfoTypesRequest::ListInfoTypesRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaultsListInfoTypesRequest();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.privacy.dlp.v2beta1.ListInfoTypesRequest)
}
ListInfoTypesRequest::ListInfoTypesRequest(const ListInfoTypesRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  category_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.category().size() > 0) {
    category_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.category_);
  }
  language_code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.language_code().size() > 0) {
    language_code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.language_code_);
  }
  // @@protoc_insertion_point(copy_constructor:google.privacy.dlp.v2beta1.ListInfoTypesRequest)
}

void ListInfoTypesRequest::SharedCtor() {
  category_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  language_code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

ListInfoTypesRequest::~ListInfoTypesRequest() {
  // @@protoc_insertion_point(destructor:google.privacy.dlp.v2beta1.ListInfoTypesRequest)
  SharedDtor();
}

void ListInfoTypesRequest::SharedDtor() {
  category_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  language_code_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ListInfoTypesRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ListInfoTypesRequest::descriptor() {
  ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ListInfoTypesRequest& ListInfoTypesRequest::default_instance() {
  ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaultsListInfoTypesRequest();
  return *internal_default_instance();
}

ListInfoTypesRequest* ListInfoTypesRequest::New(::google::protobuf::Arena* arena) const {
  ListInfoTypesRequest* n = new ListInfoTypesRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ListInfoTypesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.privacy.dlp.v2beta1.ListInfoTypesRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  category_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  language_code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool ListInfoTypesRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.privacy.dlp.v2beta1.ListInfoTypesRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string category = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_category()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->category().data(), static_cast<int>(this->category().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.privacy.dlp.v2beta1.ListInfoTypesRequest.category"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string language_code = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_language_code()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->language_code().data(), static_cast<int>(this->language_code().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.privacy.dlp.v2beta1.ListInfoTypesRequest.language_code"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.privacy.dlp.v2beta1.ListInfoTypesRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.privacy.dlp.v2beta1.ListInfoTypesRequest)
  return false;
#undef DO_
}

void ListInfoTypesRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.privacy.dlp.v2beta1.ListInfoTypesRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string category = 1;
  if (this->category().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->category().data(), static_cast<int>(this->category().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.privacy.dlp.v2beta1.ListInfoTypesRequest.category");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->category(), output);
  }

  // string language_code = 2;
  if (this->language_code().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->language_code().data(), static_cast<int>(this->language_code().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.privacy.dlp.v2beta1.ListInfoTypesRequest.language_code");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->language_code(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:google.privacy.dlp.v2beta1.ListInfoTypesRequest)
}

::google::protobuf::uint8* ListInfoTypesRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.privacy.dlp.v2beta1.ListInfoTypesRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string category = 1;
  if (this->category().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->category().data(), static_cast<int>(this->category().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.privacy.dlp.v2beta1.ListInfoTypesRequest.category");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->category(), target);
  }

  // string language_code = 2;
  if (this->language_code().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->language_code().data(), static_cast<int>(this->language_code().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.privacy.dlp.v2beta1.ListInfoTypesRequest.language_code");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->language_code(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.privacy.dlp.v2beta1.ListInfoTypesRequest)
  return target;
}

size_t ListInfoTypesRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.privacy.dlp.v2beta1.ListInfoTypesRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string category = 1;
  if (this->category().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->category());
  }

  // string language_code = 2;
  if (this->language_code().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->language_code());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ListInfoTypesRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.privacy.dlp.v2beta1.ListInfoTypesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ListInfoTypesRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ListInfoTypesRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.privacy.dlp.v2beta1.ListInfoTypesRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.privacy.dlp.v2beta1.ListInfoTypesRequest)
    MergeFrom(*source);
  }
}

void ListInfoTypesRequest::MergeFrom(const ListInfoTypesRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.privacy.dlp.v2beta1.ListInfoTypesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.category().size() > 0) {

    category_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.category_);
  }
  if (from.language_code().size() > 0) {

    language_code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.language_code_);
  }
}

void ListInfoTypesRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.privacy.dlp.v2beta1.ListInfoTypesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListInfoTypesRequest::CopyFrom(const ListInfoTypesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.privacy.dlp.v2beta1.ListInfoTypesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListInfoTypesRequest::IsInitialized() const {
  return true;
}

void ListInfoTypesRequest::Swap(ListInfoTypesRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ListInfoTypesRequest::InternalSwap(ListInfoTypesRequest* other) {
  using std::swap;
  category_.Swap(&other->category_);
  language_code_.Swap(&other->language_code_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ListInfoTypesRequest::GetMetadata() const {
  protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ListInfoTypesResponse::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ListInfoTypesResponse::kInfoTypesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ListInfoTypesResponse::ListInfoTypesResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaultsListInfoTypesResponse();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.privacy.dlp.v2beta1.ListInfoTypesResponse)
}
ListInfoTypesResponse::ListInfoTypesResponse(const ListInfoTypesResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      info_types_(from.info_types_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:google.privacy.dlp.v2beta1.ListInfoTypesResponse)
}

void ListInfoTypesResponse::SharedCtor() {
  _cached_size_ = 0;
}

ListInfoTypesResponse::~ListInfoTypesResponse() {
  // @@protoc_insertion_point(destructor:google.privacy.dlp.v2beta1.ListInfoTypesResponse)
  SharedDtor();
}

void ListInfoTypesResponse::SharedDtor() {
}

void ListInfoTypesResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ListInfoTypesResponse::descriptor() {
  ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ListInfoTypesResponse& ListInfoTypesResponse::default_instance() {
  ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaultsListInfoTypesResponse();
  return *internal_default_instance();
}

ListInfoTypesResponse* ListInfoTypesResponse::New(::google::protobuf::Arena* arena) const {
  ListInfoTypesResponse* n = new ListInfoTypesResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ListInfoTypesResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:google.privacy.dlp.v2beta1.ListInfoTypesResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  info_types_.Clear();
  _internal_metadata_.Clear();
}

bool ListInfoTypesResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.privacy.dlp.v2beta1.ListInfoTypesResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .google.privacy.dlp.v2beta1.InfoTypeDescription info_types = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_info_types()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.privacy.dlp.v2beta1.ListInfoTypesResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.privacy.dlp.v2beta1.ListInfoTypesResponse)
  return false;
#undef DO_
}

void ListInfoTypesResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.privacy.dlp.v2beta1.ListInfoTypesResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .google.privacy.dlp.v2beta1.InfoTypeDescription info_types = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->info_types_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->info_types(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:google.privacy.dlp.v2beta1.ListInfoTypesResponse)
}

::google::protobuf::uint8* ListInfoTypesResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.privacy.dlp.v2beta1.ListInfoTypesResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .google.privacy.dlp.v2beta1.InfoTypeDescription info_types = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->info_types_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->info_types(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.privacy.dlp.v2beta1.ListInfoTypesResponse)
  return target;
}

size_t ListInfoTypesResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.privacy.dlp.v2beta1.ListInfoTypesResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .google.privacy.dlp.v2beta1.InfoTypeDescription info_types = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->info_types_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->info_types(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ListInfoTypesResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.privacy.dlp.v2beta1.ListInfoTypesResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ListInfoTypesResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ListInfoTypesResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.privacy.dlp.v2beta1.ListInfoTypesResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.privacy.dlp.v2beta1.ListInfoTypesResponse)
    MergeFrom(*source);
  }
}

void ListInfoTypesResponse::MergeFrom(const ListInfoTypesResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.privacy.dlp.v2beta1.ListInfoTypesResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  info_types_.MergeFrom(from.info_types_);
}

void ListInfoTypesResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.privacy.dlp.v2beta1.ListInfoTypesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListInfoTypesResponse::CopyFrom(const ListInfoTypesResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.privacy.dlp.v2beta1.ListInfoTypesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListInfoTypesResponse::IsInitialized() const {
  return true;
}

void ListInfoTypesResponse::Swap(ListInfoTypesResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ListInfoTypesResponse::InternalSwap(ListInfoTypesResponse* other) {
  using std::swap;
  info_types_.InternalSwap(&other->info_types_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ListInfoTypesResponse::GetMetadata() const {
  protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CategoryDescription::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CategoryDescription::kNameFieldNumber;
const int CategoryDescription::kDisplayNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CategoryDescription::CategoryDescription()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaultsCategoryDescription();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.privacy.dlp.v2beta1.CategoryDescription)
}
CategoryDescription::CategoryDescription(const CategoryDescription& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  display_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.display_name().size() > 0) {
    display_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.display_name_);
  }
  // @@protoc_insertion_point(copy_constructor:google.privacy.dlp.v2beta1.CategoryDescription)
}

void CategoryDescription::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  display_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

CategoryDescription::~CategoryDescription() {
  // @@protoc_insertion_point(destructor:google.privacy.dlp.v2beta1.CategoryDescription)
  SharedDtor();
}

void CategoryDescription::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  display_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CategoryDescription::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CategoryDescription::descriptor() {
  ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CategoryDescription& CategoryDescription::default_instance() {
  ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaultsCategoryDescription();
  return *internal_default_instance();
}

CategoryDescription* CategoryDescription::New(::google::protobuf::Arena* arena) const {
  CategoryDescription* n = new CategoryDescription;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CategoryDescription::Clear() {
// @@protoc_insertion_point(message_clear_start:google.privacy.dlp.v2beta1.CategoryDescription)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  display_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool CategoryDescription::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.privacy.dlp.v2beta1.CategoryDescription)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.privacy.dlp.v2beta1.CategoryDescription.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string display_name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_display_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->display_name().data(), static_cast<int>(this->display_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.privacy.dlp.v2beta1.CategoryDescription.display_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.privacy.dlp.v2beta1.CategoryDescription)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.privacy.dlp.v2beta1.CategoryDescription)
  return false;
#undef DO_
}

void CategoryDescription::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.privacy.dlp.v2beta1.CategoryDescription)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.privacy.dlp.v2beta1.CategoryDescription.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // string display_name = 2;
  if (this->display_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->display_name().data(), static_cast<int>(this->display_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.privacy.dlp.v2beta1.CategoryDescription.display_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->display_name(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:google.privacy.dlp.v2beta1.CategoryDescription)
}

::google::protobuf::uint8* CategoryDescription::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.privacy.dlp.v2beta1.CategoryDescription)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.privacy.dlp.v2beta1.CategoryDescription.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // string display_name = 2;
  if (this->display_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->display_name().data(), static_cast<int>(this->display_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.privacy.dlp.v2beta1.CategoryDescription.display_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->display_name(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.privacy.dlp.v2beta1.CategoryDescription)
  return target;
}

size_t CategoryDescription::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.privacy.dlp.v2beta1.CategoryDescription)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // string display_name = 2;
  if (this->display_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->display_name());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CategoryDescription::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.privacy.dlp.v2beta1.CategoryDescription)
  GOOGLE_DCHECK_NE(&from, this);
  const CategoryDescription* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CategoryDescription>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.privacy.dlp.v2beta1.CategoryDescription)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.privacy.dlp.v2beta1.CategoryDescription)
    MergeFrom(*source);
  }
}

void CategoryDescription::MergeFrom(const CategoryDescription& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.privacy.dlp.v2beta1.CategoryDescription)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.display_name().size() > 0) {

    display_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.display_name_);
  }
}

void CategoryDescription::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.privacy.dlp.v2beta1.CategoryDescription)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CategoryDescription::CopyFrom(const CategoryDescription& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.privacy.dlp.v2beta1.CategoryDescription)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CategoryDescription::IsInitialized() const {
  return true;
}

void CategoryDescription::Swap(CategoryDescription* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CategoryDescription::InternalSwap(CategoryDescription* other) {
  using std::swap;
  name_.Swap(&other->name_);
  display_name_.Swap(&other->display_name_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CategoryDescription::GetMetadata() const {
  protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ListRootCategoriesRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ListRootCategoriesRequest::kLanguageCodeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ListRootCategoriesRequest::ListRootCategoriesRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaultsListRootCategoriesRequest();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.privacy.dlp.v2beta1.ListRootCategoriesRequest)
}
ListRootCategoriesRequest::ListRootCategoriesRequest(const ListRootCategoriesRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  language_code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.language_code().size() > 0) {
    language_code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.language_code_);
  }
  // @@protoc_insertion_point(copy_constructor:google.privacy.dlp.v2beta1.ListRootCategoriesRequest)
}

void ListRootCategoriesRequest::SharedCtor() {
  language_code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

ListRootCategoriesRequest::~ListRootCategoriesRequest() {
  // @@protoc_insertion_point(destructor:google.privacy.dlp.v2beta1.ListRootCategoriesRequest)
  SharedDtor();
}

void ListRootCategoriesRequest::SharedDtor() {
  language_code_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ListRootCategoriesRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ListRootCategoriesRequest::descriptor() {
  ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ListRootCategoriesRequest& ListRootCategoriesRequest::default_instance() {
  ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaultsListRootCategoriesRequest();
  return *internal_default_instance();
}

ListRootCategoriesRequest* ListRootCategoriesRequest::New(::google::protobuf::Arena* arena) const {
  ListRootCategoriesRequest* n = new ListRootCategoriesRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ListRootCategoriesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.privacy.dlp.v2beta1.ListRootCategoriesRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  language_code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool ListRootCategoriesRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.privacy.dlp.v2beta1.ListRootCategoriesRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string language_code = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_language_code()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->language_code().data(), static_cast<int>(this->language_code().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.privacy.dlp.v2beta1.ListRootCategoriesRequest.language_code"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.privacy.dlp.v2beta1.ListRootCategoriesRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.privacy.dlp.v2beta1.ListRootCategoriesRequest)
  return false;
#undef DO_
}

void ListRootCategoriesRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.privacy.dlp.v2beta1.ListRootCategoriesRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string language_code = 1;
  if (this->language_code().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->language_code().data(), static_cast<int>(this->language_code().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.privacy.dlp.v2beta1.ListRootCategoriesRequest.language_code");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->language_code(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:google.privacy.dlp.v2beta1.ListRootCategoriesRequest)
}

::google::protobuf::uint8* ListRootCategoriesRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.privacy.dlp.v2beta1.ListRootCategoriesRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string language_code = 1;
  if (this->language_code().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->language_code().data(), static_cast<int>(this->language_code().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.privacy.dlp.v2beta1.ListRootCategoriesRequest.language_code");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->language_code(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.privacy.dlp.v2beta1.ListRootCategoriesRequest)
  return target;
}

size_t ListRootCategoriesRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.privacy.dlp.v2beta1.ListRootCategoriesRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string language_code = 1;
  if (this->language_code().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->language_code());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ListRootCategoriesRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.privacy.dlp.v2beta1.ListRootCategoriesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ListRootCategoriesRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ListRootCategoriesRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.privacy.dlp.v2beta1.ListRootCategoriesRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.privacy.dlp.v2beta1.ListRootCategoriesRequest)
    MergeFrom(*source);
  }
}

void ListRootCategoriesRequest::MergeFrom(const ListRootCategoriesRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.privacy.dlp.v2beta1.ListRootCategoriesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.language_code().size() > 0) {

    language_code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.language_code_);
  }
}

void ListRootCategoriesRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.privacy.dlp.v2beta1.ListRootCategoriesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListRootCategoriesRequest::CopyFrom(const ListRootCategoriesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.privacy.dlp.v2beta1.ListRootCategoriesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListRootCategoriesRequest::IsInitialized() const {
  return true;
}

void ListRootCategoriesRequest::Swap(ListRootCategoriesRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ListRootCategoriesRequest::InternalSwap(ListRootCategoriesRequest* other) {
  using std::swap;
  language_code_.Swap(&other->language_code_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ListRootCategoriesRequest::GetMetadata() const {
  protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ListRootCategoriesResponse::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ListRootCategoriesResponse::kCategoriesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ListRootCategoriesResponse::ListRootCategoriesResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaultsListRootCategoriesResponse();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.privacy.dlp.v2beta1.ListRootCategoriesResponse)
}
ListRootCategoriesResponse::ListRootCategoriesResponse(const ListRootCategoriesResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      categories_(from.categories_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:google.privacy.dlp.v2beta1.ListRootCategoriesResponse)
}

void ListRootCategoriesResponse::SharedCtor() {
  _cached_size_ = 0;
}

ListRootCategoriesResponse::~ListRootCategoriesResponse() {
  // @@protoc_insertion_point(destructor:google.privacy.dlp.v2beta1.ListRootCategoriesResponse)
  SharedDtor();
}

void ListRootCategoriesResponse::SharedDtor() {
}

void ListRootCategoriesResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ListRootCategoriesResponse::descriptor() {
  ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ListRootCategoriesResponse& ListRootCategoriesResponse::default_instance() {
  ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaultsListRootCategoriesResponse();
  return *internal_default_instance();
}

ListRootCategoriesResponse* ListRootCategoriesResponse::New(::google::protobuf::Arena* arena) const {
  ListRootCategoriesResponse* n = new ListRootCategoriesResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ListRootCategoriesResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:google.privacy.dlp.v2beta1.ListRootCategoriesResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  categories_.Clear();
  _internal_metadata_.Clear();
}

bool ListRootCategoriesResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.privacy.dlp.v2beta1.ListRootCategoriesResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .google.privacy.dlp.v2beta1.CategoryDescription categories = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_categories()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.privacy.dlp.v2beta1.ListRootCategoriesResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.privacy.dlp.v2beta1.ListRootCategoriesResponse)
  return false;
#undef DO_
}

void ListRootCategoriesResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.privacy.dlp.v2beta1.ListRootCategoriesResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .google.privacy.dlp.v2beta1.CategoryDescription categories = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->categories_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->categories(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:google.privacy.dlp.v2beta1.ListRootCategoriesResponse)
}

::google::protobuf::uint8* ListRootCategoriesResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.privacy.dlp.v2beta1.ListRootCategoriesResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .google.privacy.dlp.v2beta1.CategoryDescription categories = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->categories_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->categories(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.privacy.dlp.v2beta1.ListRootCategoriesResponse)
  return target;
}

size_t ListRootCategoriesResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.privacy.dlp.v2beta1.ListRootCategoriesResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .google.privacy.dlp.v2beta1.CategoryDescription categories = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->categories_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->categories(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ListRootCategoriesResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.privacy.dlp.v2beta1.ListRootCategoriesResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ListRootCategoriesResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ListRootCategoriesResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.privacy.dlp.v2beta1.ListRootCategoriesResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.privacy.dlp.v2beta1.ListRootCategoriesResponse)
    MergeFrom(*source);
  }
}

void ListRootCategoriesResponse::MergeFrom(const ListRootCategoriesResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.privacy.dlp.v2beta1.ListRootCategoriesResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  categories_.MergeFrom(from.categories_);
}

void ListRootCategoriesResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.privacy.dlp.v2beta1.ListRootCategoriesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListRootCategoriesResponse::CopyFrom(const ListRootCategoriesResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.privacy.dlp.v2beta1.ListRootCategoriesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListRootCategoriesResponse::IsInitialized() const {
  return true;
}

void ListRootCategoriesResponse::Swap(ListRootCategoriesResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ListRootCategoriesResponse::InternalSwap(ListRootCategoriesResponse* other) {
  using std::swap;
  categories_.InternalSwap(&other->categories_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ListRootCategoriesResponse::GetMetadata() const {
  protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void AnalyzeDataSourceRiskRequest::InitAsDefaultInstance() {
  ::google::privacy::dlp::v2beta1::_AnalyzeDataSourceRiskRequest_default_instance_._instance.get_mutable()->privacy_metric_ = const_cast< ::google::privacy::dlp::v2beta1::PrivacyMetric*>(
      ::google::privacy::dlp::v2beta1::PrivacyMetric::internal_default_instance());
  ::google::privacy::dlp::v2beta1::_AnalyzeDataSourceRiskRequest_default_instance_._instance.get_mutable()->source_table_ = const_cast< ::google::privacy::dlp::v2beta1::BigQueryTable*>(
      ::google::privacy::dlp::v2beta1::BigQueryTable::internal_default_instance());
}
void AnalyzeDataSourceRiskRequest::clear_source_table() {
  if (GetArenaNoVirtual() == NULL && source_table_ != NULL) {
    delete source_table_;
  }
  source_table_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AnalyzeDataSourceRiskRequest::kPrivacyMetricFieldNumber;
const int AnalyzeDataSourceRiskRequest::kSourceTableFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AnalyzeDataSourceRiskRequest::AnalyzeDataSourceRiskRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaultsAnalyzeDataSourceRiskRequest();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.privacy.dlp.v2beta1.AnalyzeDataSourceRiskRequest)
}
AnalyzeDataSourceRiskRequest::AnalyzeDataSourceRiskRequest(const AnalyzeDataSourceRiskRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_privacy_metric()) {
    privacy_metric_ = new ::google::privacy::dlp::v2beta1::PrivacyMetric(*from.privacy_metric_);
  } else {
    privacy_metric_ = NULL;
  }
  if (from.has_source_table()) {
    source_table_ = new ::google::privacy::dlp::v2beta1::BigQueryTable(*from.source_table_);
  } else {
    source_table_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:google.privacy.dlp.v2beta1.AnalyzeDataSourceRiskRequest)
}

void AnalyzeDataSourceRiskRequest::SharedCtor() {
  ::memset(&privacy_metric_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&source_table_) -
      reinterpret_cast<char*>(&privacy_metric_)) + sizeof(source_table_));
  _cached_size_ = 0;
}

AnalyzeDataSourceRiskRequest::~AnalyzeDataSourceRiskRequest() {
  // @@protoc_insertion_point(destructor:google.privacy.dlp.v2beta1.AnalyzeDataSourceRiskRequest)
  SharedDtor();
}

void AnalyzeDataSourceRiskRequest::SharedDtor() {
  if (this != internal_default_instance()) delete privacy_metric_;
  if (this != internal_default_instance()) delete source_table_;
}

void AnalyzeDataSourceRiskRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AnalyzeDataSourceRiskRequest::descriptor() {
  ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AnalyzeDataSourceRiskRequest& AnalyzeDataSourceRiskRequest::default_instance() {
  ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaultsAnalyzeDataSourceRiskRequest();
  return *internal_default_instance();
}

AnalyzeDataSourceRiskRequest* AnalyzeDataSourceRiskRequest::New(::google::protobuf::Arena* arena) const {
  AnalyzeDataSourceRiskRequest* n = new AnalyzeDataSourceRiskRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AnalyzeDataSourceRiskRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.privacy.dlp.v2beta1.AnalyzeDataSourceRiskRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && privacy_metric_ != NULL) {
    delete privacy_metric_;
  }
  privacy_metric_ = NULL;
  if (GetArenaNoVirtual() == NULL && source_table_ != NULL) {
    delete source_table_;
  }
  source_table_ = NULL;
  _internal_metadata_.Clear();
}

bool AnalyzeDataSourceRiskRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.privacy.dlp.v2beta1.AnalyzeDataSourceRiskRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .google.privacy.dlp.v2beta1.PrivacyMetric privacy_metric = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_privacy_metric()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.privacy.dlp.v2beta1.BigQueryTable source_table = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_source_table()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.privacy.dlp.v2beta1.AnalyzeDataSourceRiskRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.privacy.dlp.v2beta1.AnalyzeDataSourceRiskRequest)
  return false;
#undef DO_
}

void AnalyzeDataSourceRiskRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.privacy.dlp.v2beta1.AnalyzeDataSourceRiskRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.privacy.dlp.v2beta1.PrivacyMetric privacy_metric = 1;
  if (this->has_privacy_metric()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->privacy_metric_, output);
  }

  // .google.privacy.dlp.v2beta1.BigQueryTable source_table = 3;
  if (this->has_source_table()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->source_table_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:google.privacy.dlp.v2beta1.AnalyzeDataSourceRiskRequest)
}

::google::protobuf::uint8* AnalyzeDataSourceRiskRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.privacy.dlp.v2beta1.AnalyzeDataSourceRiskRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.privacy.dlp.v2beta1.PrivacyMetric privacy_metric = 1;
  if (this->has_privacy_metric()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->privacy_metric_, deterministic, target);
  }

  // .google.privacy.dlp.v2beta1.BigQueryTable source_table = 3;
  if (this->has_source_table()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, *this->source_table_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.privacy.dlp.v2beta1.AnalyzeDataSourceRiskRequest)
  return target;
}

size_t AnalyzeDataSourceRiskRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.privacy.dlp.v2beta1.AnalyzeDataSourceRiskRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .google.privacy.dlp.v2beta1.PrivacyMetric privacy_metric = 1;
  if (this->has_privacy_metric()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->privacy_metric_);
  }

  // .google.privacy.dlp.v2beta1.BigQueryTable source_table = 3;
  if (this->has_source_table()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->source_table_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AnalyzeDataSourceRiskRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.privacy.dlp.v2beta1.AnalyzeDataSourceRiskRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const AnalyzeDataSourceRiskRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AnalyzeDataSourceRiskRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.privacy.dlp.v2beta1.AnalyzeDataSourceRiskRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.privacy.dlp.v2beta1.AnalyzeDataSourceRiskRequest)
    MergeFrom(*source);
  }
}

void AnalyzeDataSourceRiskRequest::MergeFrom(const AnalyzeDataSourceRiskRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.privacy.dlp.v2beta1.AnalyzeDataSourceRiskRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_privacy_metric()) {
    mutable_privacy_metric()->::google::privacy::dlp::v2beta1::PrivacyMetric::MergeFrom(from.privacy_metric());
  }
  if (from.has_source_table()) {
    mutable_source_table()->::google::privacy::dlp::v2beta1::BigQueryTable::MergeFrom(from.source_table());
  }
}

void AnalyzeDataSourceRiskRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.privacy.dlp.v2beta1.AnalyzeDataSourceRiskRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AnalyzeDataSourceRiskRequest::CopyFrom(const AnalyzeDataSourceRiskRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.privacy.dlp.v2beta1.AnalyzeDataSourceRiskRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AnalyzeDataSourceRiskRequest::IsInitialized() const {
  return true;
}

void AnalyzeDataSourceRiskRequest::Swap(AnalyzeDataSourceRiskRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AnalyzeDataSourceRiskRequest::InternalSwap(AnalyzeDataSourceRiskRequest* other) {
  using std::swap;
  swap(privacy_metric_, other->privacy_metric_);
  swap(source_table_, other->source_table_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AnalyzeDataSourceRiskRequest::GetMetadata() const {
  protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void PrivacyMetric_NumericalStatsConfig::InitAsDefaultInstance() {
  ::google::privacy::dlp::v2beta1::_PrivacyMetric_NumericalStatsConfig_default_instance_._instance.get_mutable()->field_ = const_cast< ::google::privacy::dlp::v2beta1::FieldId*>(
      ::google::privacy::dlp::v2beta1::FieldId::internal_default_instance());
}
void PrivacyMetric_NumericalStatsConfig::clear_field() {
  if (GetArenaNoVirtual() == NULL && field_ != NULL) {
    delete field_;
  }
  field_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PrivacyMetric_NumericalStatsConfig::kFieldFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PrivacyMetric_NumericalStatsConfig::PrivacyMetric_NumericalStatsConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaultsPrivacyMetric_NumericalStatsConfig();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.privacy.dlp.v2beta1.PrivacyMetric.NumericalStatsConfig)
}
PrivacyMetric_NumericalStatsConfig::PrivacyMetric_NumericalStatsConfig(const PrivacyMetric_NumericalStatsConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_field()) {
    field_ = new ::google::privacy::dlp::v2beta1::FieldId(*from.field_);
  } else {
    field_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:google.privacy.dlp.v2beta1.PrivacyMetric.NumericalStatsConfig)
}

void PrivacyMetric_NumericalStatsConfig::SharedCtor() {
  field_ = NULL;
  _cached_size_ = 0;
}

PrivacyMetric_NumericalStatsConfig::~PrivacyMetric_NumericalStatsConfig() {
  // @@protoc_insertion_point(destructor:google.privacy.dlp.v2beta1.PrivacyMetric.NumericalStatsConfig)
  SharedDtor();
}

void PrivacyMetric_NumericalStatsConfig::SharedDtor() {
  if (this != internal_default_instance()) delete field_;
}

void PrivacyMetric_NumericalStatsConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PrivacyMetric_NumericalStatsConfig::descriptor() {
  ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PrivacyMetric_NumericalStatsConfig& PrivacyMetric_NumericalStatsConfig::default_instance() {
  ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaultsPrivacyMetric_NumericalStatsConfig();
  return *internal_default_instance();
}

PrivacyMetric_NumericalStatsConfig* PrivacyMetric_NumericalStatsConfig::New(::google::protobuf::Arena* arena) const {
  PrivacyMetric_NumericalStatsConfig* n = new PrivacyMetric_NumericalStatsConfig;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PrivacyMetric_NumericalStatsConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:google.privacy.dlp.v2beta1.PrivacyMetric.NumericalStatsConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && field_ != NULL) {
    delete field_;
  }
  field_ = NULL;
  _internal_metadata_.Clear();
}

bool PrivacyMetric_NumericalStatsConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.privacy.dlp.v2beta1.PrivacyMetric.NumericalStatsConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .google.privacy.dlp.v2beta1.FieldId field = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_field()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.privacy.dlp.v2beta1.PrivacyMetric.NumericalStatsConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.privacy.dlp.v2beta1.PrivacyMetric.NumericalStatsConfig)
  return false;
#undef DO_
}

void PrivacyMetric_NumericalStatsConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.privacy.dlp.v2beta1.PrivacyMetric.NumericalStatsConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.privacy.dlp.v2beta1.FieldId field = 1;
  if (this->has_field()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->field_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:google.privacy.dlp.v2beta1.PrivacyMetric.NumericalStatsConfig)
}

::google::protobuf::uint8* PrivacyMetric_NumericalStatsConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.privacy.dlp.v2beta1.PrivacyMetric.NumericalStatsConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.privacy.dlp.v2beta1.FieldId field = 1;
  if (this->has_field()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->field_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.privacy.dlp.v2beta1.PrivacyMetric.NumericalStatsConfig)
  return target;
}

size_t PrivacyMetric_NumericalStatsConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.privacy.dlp.v2beta1.PrivacyMetric.NumericalStatsConfig)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .google.privacy.dlp.v2beta1.FieldId field = 1;
  if (this->has_field()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->field_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PrivacyMetric_NumericalStatsConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.privacy.dlp.v2beta1.PrivacyMetric.NumericalStatsConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const PrivacyMetric_NumericalStatsConfig* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PrivacyMetric_NumericalStatsConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.privacy.dlp.v2beta1.PrivacyMetric.NumericalStatsConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.privacy.dlp.v2beta1.PrivacyMetric.NumericalStatsConfig)
    MergeFrom(*source);
  }
}

void PrivacyMetric_NumericalStatsConfig::MergeFrom(const PrivacyMetric_NumericalStatsConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.privacy.dlp.v2beta1.PrivacyMetric.NumericalStatsConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_field()) {
    mutable_field()->::google::privacy::dlp::v2beta1::FieldId::MergeFrom(from.field());
  }
}

void PrivacyMetric_NumericalStatsConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.privacy.dlp.v2beta1.PrivacyMetric.NumericalStatsConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PrivacyMetric_NumericalStatsConfig::CopyFrom(const PrivacyMetric_NumericalStatsConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.privacy.dlp.v2beta1.PrivacyMetric.NumericalStatsConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PrivacyMetric_NumericalStatsConfig::IsInitialized() const {
  return true;
}

void PrivacyMetric_NumericalStatsConfig::Swap(PrivacyMetric_NumericalStatsConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PrivacyMetric_NumericalStatsConfig::InternalSwap(PrivacyMetric_NumericalStatsConfig* other) {
  using std::swap;
  swap(field_, other->field_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PrivacyMetric_NumericalStatsConfig::GetMetadata() const {
  protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void PrivacyMetric_CategoricalStatsConfig::InitAsDefaultInstance() {
  ::google::privacy::dlp::v2beta1::_PrivacyMetric_CategoricalStatsConfig_default_instance_._instance.get_mutable()->field_ = const_cast< ::google::privacy::dlp::v2beta1::FieldId*>(
      ::google::privacy::dlp::v2beta1::FieldId::internal_default_instance());
}
void PrivacyMetric_CategoricalStatsConfig::clear_field() {
  if (GetArenaNoVirtual() == NULL && field_ != NULL) {
    delete field_;
  }
  field_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PrivacyMetric_CategoricalStatsConfig::kFieldFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PrivacyMetric_CategoricalStatsConfig::PrivacyMetric_CategoricalStatsConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaultsPrivacyMetric_CategoricalStatsConfig();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.privacy.dlp.v2beta1.PrivacyMetric.CategoricalStatsConfig)
}
PrivacyMetric_CategoricalStatsConfig::PrivacyMetric_CategoricalStatsConfig(const PrivacyMetric_CategoricalStatsConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_field()) {
    field_ = new ::google::privacy::dlp::v2beta1::FieldId(*from.field_);
  } else {
    field_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:google.privacy.dlp.v2beta1.PrivacyMetric.CategoricalStatsConfig)
}

void PrivacyMetric_CategoricalStatsConfig::SharedCtor() {
  field_ = NULL;
  _cached_size_ = 0;
}

PrivacyMetric_CategoricalStatsConfig::~PrivacyMetric_CategoricalStatsConfig() {
  // @@protoc_insertion_point(destructor:google.privacy.dlp.v2beta1.PrivacyMetric.CategoricalStatsConfig)
  SharedDtor();
}

void PrivacyMetric_CategoricalStatsConfig::SharedDtor() {
  if (this != internal_default_instance()) delete field_;
}

void PrivacyMetric_CategoricalStatsConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PrivacyMetric_CategoricalStatsConfig::descriptor() {
  ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PrivacyMetric_CategoricalStatsConfig& PrivacyMetric_CategoricalStatsConfig::default_instance() {
  ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaultsPrivacyMetric_CategoricalStatsConfig();
  return *internal_default_instance();
}

PrivacyMetric_CategoricalStatsConfig* PrivacyMetric_CategoricalStatsConfig::New(::google::protobuf::Arena* arena) const {
  PrivacyMetric_CategoricalStatsConfig* n = new PrivacyMetric_CategoricalStatsConfig;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PrivacyMetric_CategoricalStatsConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:google.privacy.dlp.v2beta1.PrivacyMetric.CategoricalStatsConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && field_ != NULL) {
    delete field_;
  }
  field_ = NULL;
  _internal_metadata_.Clear();
}

bool PrivacyMetric_CategoricalStatsConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.privacy.dlp.v2beta1.PrivacyMetric.CategoricalStatsConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .google.privacy.dlp.v2beta1.FieldId field = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_field()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.privacy.dlp.v2beta1.PrivacyMetric.CategoricalStatsConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.privacy.dlp.v2beta1.PrivacyMetric.CategoricalStatsConfig)
  return false;
#undef DO_
}

void PrivacyMetric_CategoricalStatsConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.privacy.dlp.v2beta1.PrivacyMetric.CategoricalStatsConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.privacy.dlp.v2beta1.FieldId field = 1;
  if (this->has_field()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->field_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:google.privacy.dlp.v2beta1.PrivacyMetric.CategoricalStatsConfig)
}

::google::protobuf::uint8* PrivacyMetric_CategoricalStatsConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.privacy.dlp.v2beta1.PrivacyMetric.CategoricalStatsConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.privacy.dlp.v2beta1.FieldId field = 1;
  if (this->has_field()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->field_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.privacy.dlp.v2beta1.PrivacyMetric.CategoricalStatsConfig)
  return target;
}

size_t PrivacyMetric_CategoricalStatsConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.privacy.dlp.v2beta1.PrivacyMetric.CategoricalStatsConfig)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .google.privacy.dlp.v2beta1.FieldId field = 1;
  if (this->has_field()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->field_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PrivacyMetric_CategoricalStatsConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.privacy.dlp.v2beta1.PrivacyMetric.CategoricalStatsConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const PrivacyMetric_CategoricalStatsConfig* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PrivacyMetric_CategoricalStatsConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.privacy.dlp.v2beta1.PrivacyMetric.CategoricalStatsConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.privacy.dlp.v2beta1.PrivacyMetric.CategoricalStatsConfig)
    MergeFrom(*source);
  }
}

void PrivacyMetric_CategoricalStatsConfig::MergeFrom(const PrivacyMetric_CategoricalStatsConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.privacy.dlp.v2beta1.PrivacyMetric.CategoricalStatsConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_field()) {
    mutable_field()->::google::privacy::dlp::v2beta1::FieldId::MergeFrom(from.field());
  }
}

void PrivacyMetric_CategoricalStatsConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.privacy.dlp.v2beta1.PrivacyMetric.CategoricalStatsConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PrivacyMetric_CategoricalStatsConfig::CopyFrom(const PrivacyMetric_CategoricalStatsConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.privacy.dlp.v2beta1.PrivacyMetric.CategoricalStatsConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PrivacyMetric_CategoricalStatsConfig::IsInitialized() const {
  return true;
}

void PrivacyMetric_CategoricalStatsConfig::Swap(PrivacyMetric_CategoricalStatsConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PrivacyMetric_CategoricalStatsConfig::InternalSwap(PrivacyMetric_CategoricalStatsConfig* other) {
  using std::swap;
  swap(field_, other->field_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PrivacyMetric_CategoricalStatsConfig::GetMetadata() const {
  protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void PrivacyMetric_KAnonymityConfig::InitAsDefaultInstance() {
  ::google::privacy::dlp::v2beta1::_PrivacyMetric_KAnonymityConfig_default_instance_._instance.get_mutable()->entity_id_ = const_cast< ::google::privacy::dlp::v2beta1::EntityId*>(
      ::google::privacy::dlp::v2beta1::EntityId::internal_default_instance());
}
void PrivacyMetric_KAnonymityConfig::clear_quasi_ids() {
  quasi_ids_.Clear();
}
void PrivacyMetric_KAnonymityConfig::clear_entity_id() {
  if (GetArenaNoVirtual() == NULL && entity_id_ != NULL) {
    delete entity_id_;
  }
  entity_id_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PrivacyMetric_KAnonymityConfig::kQuasiIdsFieldNumber;
const int PrivacyMetric_KAnonymityConfig::kEntityIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PrivacyMetric_KAnonymityConfig::PrivacyMetric_KAnonymityConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaultsPrivacyMetric_KAnonymityConfig();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.privacy.dlp.v2beta1.PrivacyMetric.KAnonymityConfig)
}
PrivacyMetric_KAnonymityConfig::PrivacyMetric_KAnonymityConfig(const PrivacyMetric_KAnonymityConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      quasi_ids_(from.quasi_ids_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_entity_id()) {
    entity_id_ = new ::google::privacy::dlp::v2beta1::EntityId(*from.entity_id_);
  } else {
    entity_id_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:google.privacy.dlp.v2beta1.PrivacyMetric.KAnonymityConfig)
}

void PrivacyMetric_KAnonymityConfig::SharedCtor() {
  entity_id_ = NULL;
  _cached_size_ = 0;
}

PrivacyMetric_KAnonymityConfig::~PrivacyMetric_KAnonymityConfig() {
  // @@protoc_insertion_point(destructor:google.privacy.dlp.v2beta1.PrivacyMetric.KAnonymityConfig)
  SharedDtor();
}

void PrivacyMetric_KAnonymityConfig::SharedDtor() {
  if (this != internal_default_instance()) delete entity_id_;
}

void PrivacyMetric_KAnonymityConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PrivacyMetric_KAnonymityConfig::descriptor() {
  ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PrivacyMetric_KAnonymityConfig& PrivacyMetric_KAnonymityConfig::default_instance() {
  ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaultsPrivacyMetric_KAnonymityConfig();
  return *internal_default_instance();
}

PrivacyMetric_KAnonymityConfig* PrivacyMetric_KAnonymityConfig::New(::google::protobuf::Arena* arena) const {
  PrivacyMetric_KAnonymityConfig* n = new PrivacyMetric_KAnonymityConfig;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PrivacyMetric_KAnonymityConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:google.privacy.dlp.v2beta1.PrivacyMetric.KAnonymityConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  quasi_ids_.Clear();
  if (GetArenaNoVirtual() == NULL && entity_id_ != NULL) {
    delete entity_id_;
  }
  entity_id_ = NULL;
  _internal_metadata_.Clear();
}

bool PrivacyMetric_KAnonymityConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.privacy.dlp.v2beta1.PrivacyMetric.KAnonymityConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .google.privacy.dlp.v2beta1.FieldId quasi_ids = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_quasi_ids()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.privacy.dlp.v2beta1.EntityId entity_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_entity_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.privacy.dlp.v2beta1.PrivacyMetric.KAnonymityConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.privacy.dlp.v2beta1.PrivacyMetric.KAnonymityConfig)
  return false;
#undef DO_
}

void PrivacyMetric_KAnonymityConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.privacy.dlp.v2beta1.PrivacyMetric.KAnonymityConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .google.privacy.dlp.v2beta1.FieldId quasi_ids = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->quasi_ids_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->quasi_ids(static_cast<int>(i)), output);
  }

  // .google.privacy.dlp.v2beta1.EntityId entity_id = 2;
  if (this->has_entity_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->entity_id_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:google.privacy.dlp.v2beta1.PrivacyMetric.KAnonymityConfig)
}

::google::protobuf::uint8* PrivacyMetric_KAnonymityConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.privacy.dlp.v2beta1.PrivacyMetric.KAnonymityConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .google.privacy.dlp.v2beta1.FieldId quasi_ids = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->quasi_ids_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->quasi_ids(static_cast<int>(i)), deterministic, target);
  }

  // .google.privacy.dlp.v2beta1.EntityId entity_id = 2;
  if (this->has_entity_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, *this->entity_id_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.privacy.dlp.v2beta1.PrivacyMetric.KAnonymityConfig)
  return target;
}

size_t PrivacyMetric_KAnonymityConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.privacy.dlp.v2beta1.PrivacyMetric.KAnonymityConfig)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .google.privacy.dlp.v2beta1.FieldId quasi_ids = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->quasi_ids_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->quasi_ids(static_cast<int>(i)));
    }
  }

  // .google.privacy.dlp.v2beta1.EntityId entity_id = 2;
  if (this->has_entity_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->entity_id_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PrivacyMetric_KAnonymityConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.privacy.dlp.v2beta1.PrivacyMetric.KAnonymityConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const PrivacyMetric_KAnonymityConfig* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PrivacyMetric_KAnonymityConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.privacy.dlp.v2beta1.PrivacyMetric.KAnonymityConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.privacy.dlp.v2beta1.PrivacyMetric.KAnonymityConfig)
    MergeFrom(*source);
  }
}

void PrivacyMetric_KAnonymityConfig::MergeFrom(const PrivacyMetric_KAnonymityConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.privacy.dlp.v2beta1.PrivacyMetric.KAnonymityConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  quasi_ids_.MergeFrom(from.quasi_ids_);
  if (from.has_entity_id()) {
    mutable_entity_id()->::google::privacy::dlp::v2beta1::EntityId::MergeFrom(from.entity_id());
  }
}

void PrivacyMetric_KAnonymityConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.privacy.dlp.v2beta1.PrivacyMetric.KAnonymityConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PrivacyMetric_KAnonymityConfig::CopyFrom(const PrivacyMetric_KAnonymityConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.privacy.dlp.v2beta1.PrivacyMetric.KAnonymityConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PrivacyMetric_KAnonymityConfig::IsInitialized() const {
  return true;
}

void PrivacyMetric_KAnonymityConfig::Swap(PrivacyMetric_KAnonymityConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PrivacyMetric_KAnonymityConfig::InternalSwap(PrivacyMetric_KAnonymityConfig* other) {
  using std::swap;
  quasi_ids_.InternalSwap(&other->quasi_ids_);
  swap(entity_id_, other->entity_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PrivacyMetric_KAnonymityConfig::GetMetadata() const {
  protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void PrivacyMetric_LDiversityConfig::InitAsDefaultInstance() {
  ::google::privacy::dlp::v2beta1::_PrivacyMetric_LDiversityConfig_default_instance_._instance.get_mutable()->sensitive_attribute_ = const_cast< ::google::privacy::dlp::v2beta1::FieldId*>(
      ::google::privacy::dlp::v2beta1::FieldId::internal_default_instance());
}
void PrivacyMetric_LDiversityConfig::clear_quasi_ids() {
  quasi_ids_.Clear();
}
void PrivacyMetric_LDiversityConfig::clear_sensitive_attribute() {
  if (GetArenaNoVirtual() == NULL && sensitive_attribute_ != NULL) {
    delete sensitive_attribute_;
  }
  sensitive_attribute_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PrivacyMetric_LDiversityConfig::kQuasiIdsFieldNumber;
const int PrivacyMetric_LDiversityConfig::kSensitiveAttributeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PrivacyMetric_LDiversityConfig::PrivacyMetric_LDiversityConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaultsPrivacyMetric_LDiversityConfig();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.privacy.dlp.v2beta1.PrivacyMetric.LDiversityConfig)
}
PrivacyMetric_LDiversityConfig::PrivacyMetric_LDiversityConfig(const PrivacyMetric_LDiversityConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      quasi_ids_(from.quasi_ids_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_sensitive_attribute()) {
    sensitive_attribute_ = new ::google::privacy::dlp::v2beta1::FieldId(*from.sensitive_attribute_);
  } else {
    sensitive_attribute_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:google.privacy.dlp.v2beta1.PrivacyMetric.LDiversityConfig)
}

void PrivacyMetric_LDiversityConfig::SharedCtor() {
  sensitive_attribute_ = NULL;
  _cached_size_ = 0;
}

PrivacyMetric_LDiversityConfig::~PrivacyMetric_LDiversityConfig() {
  // @@protoc_insertion_point(destructor:google.privacy.dlp.v2beta1.PrivacyMetric.LDiversityConfig)
  SharedDtor();
}

void PrivacyMetric_LDiversityConfig::SharedDtor() {
  if (this != internal_default_instance()) delete sensitive_attribute_;
}

void PrivacyMetric_LDiversityConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PrivacyMetric_LDiversityConfig::descriptor() {
  ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PrivacyMetric_LDiversityConfig& PrivacyMetric_LDiversityConfig::default_instance() {
  ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaultsPrivacyMetric_LDiversityConfig();
  return *internal_default_instance();
}

PrivacyMetric_LDiversityConfig* PrivacyMetric_LDiversityConfig::New(::google::protobuf::Arena* arena) const {
  PrivacyMetric_LDiversityConfig* n = new PrivacyMetric_LDiversityConfig;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PrivacyMetric_LDiversityConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:google.privacy.dlp.v2beta1.PrivacyMetric.LDiversityConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  quasi_ids_.Clear();
  if (GetArenaNoVirtual() == NULL && sensitive_attribute_ != NULL) {
    delete sensitive_attribute_;
  }
  sensitive_attribute_ = NULL;
  _internal_metadata_.Clear();
}

bool PrivacyMetric_LDiversityConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.privacy.dlp.v2beta1.PrivacyMetric.LDiversityConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .google.privacy.dlp.v2beta1.FieldId quasi_ids = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_quasi_ids()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.privacy.dlp.v2beta1.FieldId sensitive_attribute = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_sensitive_attribute()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.privacy.dlp.v2beta1.PrivacyMetric.LDiversityConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.privacy.dlp.v2beta1.PrivacyMetric.LDiversityConfig)
  return false;
#undef DO_
}

void PrivacyMetric_LDiversityConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.privacy.dlp.v2beta1.PrivacyMetric.LDiversityConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .google.privacy.dlp.v2beta1.FieldId quasi_ids = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->quasi_ids_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->quasi_ids(static_cast<int>(i)), output);
  }

  // .google.privacy.dlp.v2beta1.FieldId sensitive_attribute = 2;
  if (this->has_sensitive_attribute()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->sensitive_attribute_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:google.privacy.dlp.v2beta1.PrivacyMetric.LDiversityConfig)
}

::google::protobuf::uint8* PrivacyMetric_LDiversityConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.privacy.dlp.v2beta1.PrivacyMetric.LDiversityConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .google.privacy.dlp.v2beta1.FieldId quasi_ids = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->quasi_ids_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->quasi_ids(static_cast<int>(i)), deterministic, target);
  }

  // .google.privacy.dlp.v2beta1.FieldId sensitive_attribute = 2;
  if (this->has_sensitive_attribute()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, *this->sensitive_attribute_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.privacy.dlp.v2beta1.PrivacyMetric.LDiversityConfig)
  return target;
}

size_t PrivacyMetric_LDiversityConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.privacy.dlp.v2beta1.PrivacyMetric.LDiversityConfig)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .google.privacy.dlp.v2beta1.FieldId quasi_ids = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->quasi_ids_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->quasi_ids(static_cast<int>(i)));
    }
  }

  // .google.privacy.dlp.v2beta1.FieldId sensitive_attribute = 2;
  if (this->has_sensitive_attribute()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->sensitive_attribute_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PrivacyMetric_LDiversityConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.privacy.dlp.v2beta1.PrivacyMetric.LDiversityConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const PrivacyMetric_LDiversityConfig* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PrivacyMetric_LDiversityConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.privacy.dlp.v2beta1.PrivacyMetric.LDiversityConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.privacy.dlp.v2beta1.PrivacyMetric.LDiversityConfig)
    MergeFrom(*source);
  }
}

void PrivacyMetric_LDiversityConfig::MergeFrom(const PrivacyMetric_LDiversityConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.privacy.dlp.v2beta1.PrivacyMetric.LDiversityConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  quasi_ids_.MergeFrom(from.quasi_ids_);
  if (from.has_sensitive_attribute()) {
    mutable_sensitive_attribute()->::google::privacy::dlp::v2beta1::FieldId::MergeFrom(from.sensitive_attribute());
  }
}

void PrivacyMetric_LDiversityConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.privacy.dlp.v2beta1.PrivacyMetric.LDiversityConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PrivacyMetric_LDiversityConfig::CopyFrom(const PrivacyMetric_LDiversityConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.privacy.dlp.v2beta1.PrivacyMetric.LDiversityConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PrivacyMetric_LDiversityConfig::IsInitialized() const {
  return true;
}

void PrivacyMetric_LDiversityConfig::Swap(PrivacyMetric_LDiversityConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PrivacyMetric_LDiversityConfig::InternalSwap(PrivacyMetric_LDiversityConfig* other) {
  using std::swap;
  quasi_ids_.InternalSwap(&other->quasi_ids_);
  swap(sensitive_attribute_, other->sensitive_attribute_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PrivacyMetric_LDiversityConfig::GetMetadata() const {
  protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void PrivacyMetric::InitAsDefaultInstance() {
  ::google::privacy::dlp::v2beta1::_PrivacyMetric_default_instance_.numerical_stats_config_ = const_cast< ::google::privacy::dlp::v2beta1::PrivacyMetric_NumericalStatsConfig*>(
      ::google::privacy::dlp::v2beta1::PrivacyMetric_NumericalStatsConfig::internal_default_instance());
  ::google::privacy::dlp::v2beta1::_PrivacyMetric_default_instance_.categorical_stats_config_ = const_cast< ::google::privacy::dlp::v2beta1::PrivacyMetric_CategoricalStatsConfig*>(
      ::google::privacy::dlp::v2beta1::PrivacyMetric_CategoricalStatsConfig::internal_default_instance());
  ::google::privacy::dlp::v2beta1::_PrivacyMetric_default_instance_.k_anonymity_config_ = const_cast< ::google::privacy::dlp::v2beta1::PrivacyMetric_KAnonymityConfig*>(
      ::google::privacy::dlp::v2beta1::PrivacyMetric_KAnonymityConfig::internal_default_instance());
  ::google::privacy::dlp::v2beta1::_PrivacyMetric_default_instance_.l_diversity_config_ = const_cast< ::google::privacy::dlp::v2beta1::PrivacyMetric_LDiversityConfig*>(
      ::google::privacy::dlp::v2beta1::PrivacyMetric_LDiversityConfig::internal_default_instance());
}
void PrivacyMetric::set_allocated_numerical_stats_config(::google::privacy::dlp::v2beta1::PrivacyMetric_NumericalStatsConfig* numerical_stats_config) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_type();
  if (numerical_stats_config) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      numerical_stats_config = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, numerical_stats_config, submessage_arena);
    }
    set_has_numerical_stats_config();
    type_.numerical_stats_config_ = numerical_stats_config;
  }
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2beta1.PrivacyMetric.numerical_stats_config)
}
void PrivacyMetric::set_allocated_categorical_stats_config(::google::privacy::dlp::v2beta1::PrivacyMetric_CategoricalStatsConfig* categorical_stats_config) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_type();
  if (categorical_stats_config) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      categorical_stats_config = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, categorical_stats_config, submessage_arena);
    }
    set_has_categorical_stats_config();
    type_.categorical_stats_config_ = categorical_stats_config;
  }
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2beta1.PrivacyMetric.categorical_stats_config)
}
void PrivacyMetric::set_allocated_k_anonymity_config(::google::privacy::dlp::v2beta1::PrivacyMetric_KAnonymityConfig* k_anonymity_config) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_type();
  if (k_anonymity_config) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      k_anonymity_config = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, k_anonymity_config, submessage_arena);
    }
    set_has_k_anonymity_config();
    type_.k_anonymity_config_ = k_anonymity_config;
  }
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2beta1.PrivacyMetric.k_anonymity_config)
}
void PrivacyMetric::set_allocated_l_diversity_config(::google::privacy::dlp::v2beta1::PrivacyMetric_LDiversityConfig* l_diversity_config) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_type();
  if (l_diversity_config) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      l_diversity_config = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, l_diversity_config, submessage_arena);
    }
    set_has_l_diversity_config();
    type_.l_diversity_config_ = l_diversity_config;
  }
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2beta1.PrivacyMetric.l_diversity_config)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PrivacyMetric::kNumericalStatsConfigFieldNumber;
const int PrivacyMetric::kCategoricalStatsConfigFieldNumber;
const int PrivacyMetric::kKAnonymityConfigFieldNumber;
const int PrivacyMetric::kLDiversityConfigFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PrivacyMetric::PrivacyMetric()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaultsPrivacyMetric();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.privacy.dlp.v2beta1.PrivacyMetric)
}
PrivacyMetric::PrivacyMetric(const PrivacyMetric& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_type();
  switch (from.type_case()) {
    case kNumericalStatsConfig: {
      mutable_numerical_stats_config()->::google::privacy::dlp::v2beta1::PrivacyMetric_NumericalStatsConfig::MergeFrom(from.numerical_stats_config());
      break;
    }
    case kCategoricalStatsConfig: {
      mutable_categorical_stats_config()->::google::privacy::dlp::v2beta1::PrivacyMetric_CategoricalStatsConfig::MergeFrom(from.categorical_stats_config());
      break;
    }
    case kKAnonymityConfig: {
      mutable_k_anonymity_config()->::google::privacy::dlp::v2beta1::PrivacyMetric_KAnonymityConfig::MergeFrom(from.k_anonymity_config());
      break;
    }
    case kLDiversityConfig: {
      mutable_l_diversity_config()->::google::privacy::dlp::v2beta1::PrivacyMetric_LDiversityConfig::MergeFrom(from.l_diversity_config());
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:google.privacy.dlp.v2beta1.PrivacyMetric)
}

void PrivacyMetric::SharedCtor() {
  clear_has_type();
  _cached_size_ = 0;
}

PrivacyMetric::~PrivacyMetric() {
  // @@protoc_insertion_point(destructor:google.privacy.dlp.v2beta1.PrivacyMetric)
  SharedDtor();
}

void PrivacyMetric::SharedDtor() {
  if (has_type()) {
    clear_type();
  }
}

void PrivacyMetric::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PrivacyMetric::descriptor() {
  ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PrivacyMetric& PrivacyMetric::default_instance() {
  ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaultsPrivacyMetric();
  return *internal_default_instance();
}

PrivacyMetric* PrivacyMetric::New(::google::protobuf::Arena* arena) const {
  PrivacyMetric* n = new PrivacyMetric;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PrivacyMetric::clear_type() {
// @@protoc_insertion_point(one_of_clear_start:google.privacy.dlp.v2beta1.PrivacyMetric)
  switch (type_case()) {
    case kNumericalStatsConfig: {
      delete type_.numerical_stats_config_;
      break;
    }
    case kCategoricalStatsConfig: {
      delete type_.categorical_stats_config_;
      break;
    }
    case kKAnonymityConfig: {
      delete type_.k_anonymity_config_;
      break;
    }
    case kLDiversityConfig: {
      delete type_.l_diversity_config_;
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = TYPE_NOT_SET;
}


void PrivacyMetric::Clear() {
// @@protoc_insertion_point(message_clear_start:google.privacy.dlp.v2beta1.PrivacyMetric)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_type();
  _internal_metadata_.Clear();
}

bool PrivacyMetric::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.privacy.dlp.v2beta1.PrivacyMetric)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .google.privacy.dlp.v2beta1.PrivacyMetric.NumericalStatsConfig numerical_stats_config = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_numerical_stats_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.privacy.dlp.v2beta1.PrivacyMetric.CategoricalStatsConfig categorical_stats_config = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_categorical_stats_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.privacy.dlp.v2beta1.PrivacyMetric.KAnonymityConfig k_anonymity_config = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_k_anonymity_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.privacy.dlp.v2beta1.PrivacyMetric.LDiversityConfig l_diversity_config = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_l_diversity_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.privacy.dlp.v2beta1.PrivacyMetric)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.privacy.dlp.v2beta1.PrivacyMetric)
  return false;
#undef DO_
}

void PrivacyMetric::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.privacy.dlp.v2beta1.PrivacyMetric)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.privacy.dlp.v2beta1.PrivacyMetric.NumericalStatsConfig numerical_stats_config = 1;
  if (has_numerical_stats_config()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *type_.numerical_stats_config_, output);
  }

  // .google.privacy.dlp.v2beta1.PrivacyMetric.CategoricalStatsConfig categorical_stats_config = 2;
  if (has_categorical_stats_config()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *type_.categorical_stats_config_, output);
  }

  // .google.privacy.dlp.v2beta1.PrivacyMetric.KAnonymityConfig k_anonymity_config = 3;
  if (has_k_anonymity_config()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *type_.k_anonymity_config_, output);
  }

  // .google.privacy.dlp.v2beta1.PrivacyMetric.LDiversityConfig l_diversity_config = 4;
  if (has_l_diversity_config()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *type_.l_diversity_config_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:google.privacy.dlp.v2beta1.PrivacyMetric)
}

::google::protobuf::uint8* PrivacyMetric::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.privacy.dlp.v2beta1.PrivacyMetric)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.privacy.dlp.v2beta1.PrivacyMetric.NumericalStatsConfig numerical_stats_config = 1;
  if (has_numerical_stats_config()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *type_.numerical_stats_config_, deterministic, target);
  }

  // .google.privacy.dlp.v2beta1.PrivacyMetric.CategoricalStatsConfig categorical_stats_config = 2;
  if (has_categorical_stats_config()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, *type_.categorical_stats_config_, deterministic, target);
  }

  // .google.privacy.dlp.v2beta1.PrivacyMetric.KAnonymityConfig k_anonymity_config = 3;
  if (has_k_anonymity_config()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, *type_.k_anonymity_config_, deterministic, target);
  }

  // .google.privacy.dlp.v2beta1.PrivacyMetric.LDiversityConfig l_diversity_config = 4;
  if (has_l_diversity_config()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, *type_.l_diversity_config_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.privacy.dlp.v2beta1.PrivacyMetric)
  return target;
}

size_t PrivacyMetric::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.privacy.dlp.v2beta1.PrivacyMetric)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  switch (type_case()) {
    // .google.privacy.dlp.v2beta1.PrivacyMetric.NumericalStatsConfig numerical_stats_config = 1;
    case kNumericalStatsConfig: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *type_.numerical_stats_config_);
      break;
    }
    // .google.privacy.dlp.v2beta1.PrivacyMetric.CategoricalStatsConfig categorical_stats_config = 2;
    case kCategoricalStatsConfig: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *type_.categorical_stats_config_);
      break;
    }
    // .google.privacy.dlp.v2beta1.PrivacyMetric.KAnonymityConfig k_anonymity_config = 3;
    case kKAnonymityConfig: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *type_.k_anonymity_config_);
      break;
    }
    // .google.privacy.dlp.v2beta1.PrivacyMetric.LDiversityConfig l_diversity_config = 4;
    case kLDiversityConfig: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *type_.l_diversity_config_);
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PrivacyMetric::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.privacy.dlp.v2beta1.PrivacyMetric)
  GOOGLE_DCHECK_NE(&from, this);
  const PrivacyMetric* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PrivacyMetric>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.privacy.dlp.v2beta1.PrivacyMetric)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.privacy.dlp.v2beta1.PrivacyMetric)
    MergeFrom(*source);
  }
}

void PrivacyMetric::MergeFrom(const PrivacyMetric& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.privacy.dlp.v2beta1.PrivacyMetric)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.type_case()) {
    case kNumericalStatsConfig: {
      mutable_numerical_stats_config()->::google::privacy::dlp::v2beta1::PrivacyMetric_NumericalStatsConfig::MergeFrom(from.numerical_stats_config());
      break;
    }
    case kCategoricalStatsConfig: {
      mutable_categorical_stats_config()->::google::privacy::dlp::v2beta1::PrivacyMetric_CategoricalStatsConfig::MergeFrom(from.categorical_stats_config());
      break;
    }
    case kKAnonymityConfig: {
      mutable_k_anonymity_config()->::google::privacy::dlp::v2beta1::PrivacyMetric_KAnonymityConfig::MergeFrom(from.k_anonymity_config());
      break;
    }
    case kLDiversityConfig: {
      mutable_l_diversity_config()->::google::privacy::dlp::v2beta1::PrivacyMetric_LDiversityConfig::MergeFrom(from.l_diversity_config());
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
}

void PrivacyMetric::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.privacy.dlp.v2beta1.PrivacyMetric)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PrivacyMetric::CopyFrom(const PrivacyMetric& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.privacy.dlp.v2beta1.PrivacyMetric)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PrivacyMetric::IsInitialized() const {
  return true;
}

void PrivacyMetric::Swap(PrivacyMetric* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PrivacyMetric::InternalSwap(PrivacyMetric* other) {
  using std::swap;
  swap(type_, other->type_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PrivacyMetric::GetMetadata() const {
  protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void RiskAnalysisOperationMetadata::InitAsDefaultInstance() {
  ::google::privacy::dlp::v2beta1::_RiskAnalysisOperationMetadata_default_instance_._instance.get_mutable()->create_time_ = const_cast< ::google::protobuf::Timestamp*>(
      ::google::protobuf::Timestamp::internal_default_instance());
  ::google::privacy::dlp::v2beta1::_RiskAnalysisOperationMetadata_default_instance_._instance.get_mutable()->requested_privacy_metric_ = const_cast< ::google::privacy::dlp::v2beta1::PrivacyMetric*>(
      ::google::privacy::dlp::v2beta1::PrivacyMetric::internal_default_instance());
  ::google::privacy::dlp::v2beta1::_RiskAnalysisOperationMetadata_default_instance_._instance.get_mutable()->requested_source_table_ = const_cast< ::google::privacy::dlp::v2beta1::BigQueryTable*>(
      ::google::privacy::dlp::v2beta1::BigQueryTable::internal_default_instance());
}
void RiskAnalysisOperationMetadata::clear_create_time() {
  if (GetArenaNoVirtual() == NULL && create_time_ != NULL) {
    delete create_time_;
  }
  create_time_ = NULL;
}
void RiskAnalysisOperationMetadata::clear_requested_source_table() {
  if (GetArenaNoVirtual() == NULL && requested_source_table_ != NULL) {
    delete requested_source_table_;
  }
  requested_source_table_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RiskAnalysisOperationMetadata::kCreateTimeFieldNumber;
const int RiskAnalysisOperationMetadata::kRequestedPrivacyMetricFieldNumber;
const int RiskAnalysisOperationMetadata::kRequestedSourceTableFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RiskAnalysisOperationMetadata::RiskAnalysisOperationMetadata()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaultsRiskAnalysisOperationMetadata();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.privacy.dlp.v2beta1.RiskAnalysisOperationMetadata)
}
RiskAnalysisOperationMetadata::RiskAnalysisOperationMetadata(const RiskAnalysisOperationMetadata& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_create_time()) {
    create_time_ = new ::google::protobuf::Timestamp(*from.create_time_);
  } else {
    create_time_ = NULL;
  }
  if (from.has_requested_privacy_metric()) {
    requested_privacy_metric_ = new ::google::privacy::dlp::v2beta1::PrivacyMetric(*from.requested_privacy_metric_);
  } else {
    requested_privacy_metric_ = NULL;
  }
  if (from.has_requested_source_table()) {
    requested_source_table_ = new ::google::privacy::dlp::v2beta1::BigQueryTable(*from.requested_source_table_);
  } else {
    requested_source_table_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:google.privacy.dlp.v2beta1.RiskAnalysisOperationMetadata)
}

void RiskAnalysisOperationMetadata::SharedCtor() {
  ::memset(&create_time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&requested_source_table_) -
      reinterpret_cast<char*>(&create_time_)) + sizeof(requested_source_table_));
  _cached_size_ = 0;
}

RiskAnalysisOperationMetadata::~RiskAnalysisOperationMetadata() {
  // @@protoc_insertion_point(destructor:google.privacy.dlp.v2beta1.RiskAnalysisOperationMetadata)
  SharedDtor();
}

void RiskAnalysisOperationMetadata::SharedDtor() {
  if (this != internal_default_instance()) delete create_time_;
  if (this != internal_default_instance()) delete requested_privacy_metric_;
  if (this != internal_default_instance()) delete requested_source_table_;
}

void RiskAnalysisOperationMetadata::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RiskAnalysisOperationMetadata::descriptor() {
  ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RiskAnalysisOperationMetadata& RiskAnalysisOperationMetadata::default_instance() {
  ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaultsRiskAnalysisOperationMetadata();
  return *internal_default_instance();
}

RiskAnalysisOperationMetadata* RiskAnalysisOperationMetadata::New(::google::protobuf::Arena* arena) const {
  RiskAnalysisOperationMetadata* n = new RiskAnalysisOperationMetadata;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RiskAnalysisOperationMetadata::Clear() {
// @@protoc_insertion_point(message_clear_start:google.privacy.dlp.v2beta1.RiskAnalysisOperationMetadata)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && create_time_ != NULL) {
    delete create_time_;
  }
  create_time_ = NULL;
  if (GetArenaNoVirtual() == NULL && requested_privacy_metric_ != NULL) {
    delete requested_privacy_metric_;
  }
  requested_privacy_metric_ = NULL;
  if (GetArenaNoVirtual() == NULL && requested_source_table_ != NULL) {
    delete requested_source_table_;
  }
  requested_source_table_ = NULL;
  _internal_metadata_.Clear();
}

bool RiskAnalysisOperationMetadata::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.privacy.dlp.v2beta1.RiskAnalysisOperationMetadata)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .google.protobuf.Timestamp create_time = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_create_time()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.privacy.dlp.v2beta1.PrivacyMetric requested_privacy_metric = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_requested_privacy_metric()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.privacy.dlp.v2beta1.BigQueryTable requested_source_table = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_requested_source_table()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.privacy.dlp.v2beta1.RiskAnalysisOperationMetadata)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.privacy.dlp.v2beta1.RiskAnalysisOperationMetadata)
  return false;
#undef DO_
}

void RiskAnalysisOperationMetadata::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.privacy.dlp.v2beta1.RiskAnalysisOperationMetadata)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.Timestamp create_time = 1;
  if (this->has_create_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->create_time_, output);
  }

  // .google.privacy.dlp.v2beta1.PrivacyMetric requested_privacy_metric = 2;
  if (this->has_requested_privacy_metric()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->requested_privacy_metric_, output);
  }

  // .google.privacy.dlp.v2beta1.BigQueryTable requested_source_table = 3;
  if (this->has_requested_source_table()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->requested_source_table_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:google.privacy.dlp.v2beta1.RiskAnalysisOperationMetadata)
}

::google::protobuf::uint8* RiskAnalysisOperationMetadata::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.privacy.dlp.v2beta1.RiskAnalysisOperationMetadata)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.Timestamp create_time = 1;
  if (this->has_create_time()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->create_time_, deterministic, target);
  }

  // .google.privacy.dlp.v2beta1.PrivacyMetric requested_privacy_metric = 2;
  if (this->has_requested_privacy_metric()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, *this->requested_privacy_metric_, deterministic, target);
  }

  // .google.privacy.dlp.v2beta1.BigQueryTable requested_source_table = 3;
  if (this->has_requested_source_table()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, *this->requested_source_table_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.privacy.dlp.v2beta1.RiskAnalysisOperationMetadata)
  return target;
}

size_t RiskAnalysisOperationMetadata::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.privacy.dlp.v2beta1.RiskAnalysisOperationMetadata)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .google.protobuf.Timestamp create_time = 1;
  if (this->has_create_time()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->create_time_);
  }

  // .google.privacy.dlp.v2beta1.PrivacyMetric requested_privacy_metric = 2;
  if (this->has_requested_privacy_metric()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->requested_privacy_metric_);
  }

  // .google.privacy.dlp.v2beta1.BigQueryTable requested_source_table = 3;
  if (this->has_requested_source_table()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->requested_source_table_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RiskAnalysisOperationMetadata::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.privacy.dlp.v2beta1.RiskAnalysisOperationMetadata)
  GOOGLE_DCHECK_NE(&from, this);
  const RiskAnalysisOperationMetadata* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RiskAnalysisOperationMetadata>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.privacy.dlp.v2beta1.RiskAnalysisOperationMetadata)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.privacy.dlp.v2beta1.RiskAnalysisOperationMetadata)
    MergeFrom(*source);
  }
}

void RiskAnalysisOperationMetadata::MergeFrom(const RiskAnalysisOperationMetadata& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.privacy.dlp.v2beta1.RiskAnalysisOperationMetadata)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_create_time()) {
    mutable_create_time()->::google::protobuf::Timestamp::MergeFrom(from.create_time());
  }
  if (from.has_requested_privacy_metric()) {
    mutable_requested_privacy_metric()->::google::privacy::dlp::v2beta1::PrivacyMetric::MergeFrom(from.requested_privacy_metric());
  }
  if (from.has_requested_source_table()) {
    mutable_requested_source_table()->::google::privacy::dlp::v2beta1::BigQueryTable::MergeFrom(from.requested_source_table());
  }
}

void RiskAnalysisOperationMetadata::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.privacy.dlp.v2beta1.RiskAnalysisOperationMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RiskAnalysisOperationMetadata::CopyFrom(const RiskAnalysisOperationMetadata& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.privacy.dlp.v2beta1.RiskAnalysisOperationMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RiskAnalysisOperationMetadata::IsInitialized() const {
  return true;
}

void RiskAnalysisOperationMetadata::Swap(RiskAnalysisOperationMetadata* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RiskAnalysisOperationMetadata::InternalSwap(RiskAnalysisOperationMetadata* other) {
  using std::swap;
  swap(create_time_, other->create_time_);
  swap(requested_privacy_metric_, other->requested_privacy_metric_);
  swap(requested_source_table_, other->requested_source_table_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RiskAnalysisOperationMetadata::GetMetadata() const {
  protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void RiskAnalysisOperationResult_NumericalStatsResult::InitAsDefaultInstance() {
  ::google::privacy::dlp::v2beta1::_RiskAnalysisOperationResult_NumericalStatsResult_default_instance_._instance.get_mutable()->min_value_ = const_cast< ::google::privacy::dlp::v2beta1::Value*>(
      ::google::privacy::dlp::v2beta1::Value::internal_default_instance());
  ::google::privacy::dlp::v2beta1::_RiskAnalysisOperationResult_NumericalStatsResult_default_instance_._instance.get_mutable()->max_value_ = const_cast< ::google::privacy::dlp::v2beta1::Value*>(
      ::google::privacy::dlp::v2beta1::Value::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RiskAnalysisOperationResult_NumericalStatsResult::kMinValueFieldNumber;
const int RiskAnalysisOperationResult_NumericalStatsResult::kMaxValueFieldNumber;
const int RiskAnalysisOperationResult_NumericalStatsResult::kQuantileValuesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RiskAnalysisOperationResult_NumericalStatsResult::RiskAnalysisOperationResult_NumericalStatsResult()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaultsRiskAnalysisOperationResult_NumericalStatsResult();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.privacy.dlp.v2beta1.RiskAnalysisOperationResult.NumericalStatsResult)
}
RiskAnalysisOperationResult_NumericalStatsResult::RiskAnalysisOperationResult_NumericalStatsResult(const RiskAnalysisOperationResult_NumericalStatsResult& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      quantile_values_(from.quantile_values_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_min_value()) {
    min_value_ = new ::google::privacy::dlp::v2beta1::Value(*from.min_value_);
  } else {
    min_value_ = NULL;
  }
  if (from.has_max_value()) {
    max_value_ = new ::google::privacy::dlp::v2beta1::Value(*from.max_value_);
  } else {
    max_value_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:google.privacy.dlp.v2beta1.RiskAnalysisOperationResult.NumericalStatsResult)
}

void RiskAnalysisOperationResult_NumericalStatsResult::SharedCtor() {
  ::memset(&min_value_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&max_value_) -
      reinterpret_cast<char*>(&min_value_)) + sizeof(max_value_));
  _cached_size_ = 0;
}

RiskAnalysisOperationResult_NumericalStatsResult::~RiskAnalysisOperationResult_NumericalStatsResult() {
  // @@protoc_insertion_point(destructor:google.privacy.dlp.v2beta1.RiskAnalysisOperationResult.NumericalStatsResult)
  SharedDtor();
}

void RiskAnalysisOperationResult_NumericalStatsResult::SharedDtor() {
  if (this != internal_default_instance()) delete min_value_;
  if (this != internal_default_instance()) delete max_value_;
}

void RiskAnalysisOperationResult_NumericalStatsResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RiskAnalysisOperationResult_NumericalStatsResult::descriptor() {
  ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RiskAnalysisOperationResult_NumericalStatsResult& RiskAnalysisOperationResult_NumericalStatsResult::default_instance() {
  ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaultsRiskAnalysisOperationResult_NumericalStatsResult();
  return *internal_default_instance();
}

RiskAnalysisOperationResult_NumericalStatsResult* RiskAnalysisOperationResult_NumericalStatsResult::New(::google::protobuf::Arena* arena) const {
  RiskAnalysisOperationResult_NumericalStatsResult* n = new RiskAnalysisOperationResult_NumericalStatsResult;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RiskAnalysisOperationResult_NumericalStatsResult::Clear() {
// @@protoc_insertion_point(message_clear_start:google.privacy.dlp.v2beta1.RiskAnalysisOperationResult.NumericalStatsResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  quantile_values_.Clear();
  if (GetArenaNoVirtual() == NULL && min_value_ != NULL) {
    delete min_value_;
  }
  min_value_ = NULL;
  if (GetArenaNoVirtual() == NULL && max_value_ != NULL) {
    delete max_value_;
  }
  max_value_ = NULL;
  _internal_metadata_.Clear();
}

bool RiskAnalysisOperationResult_NumericalStatsResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.privacy.dlp.v2beta1.RiskAnalysisOperationResult.NumericalStatsResult)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .google.privacy.dlp.v2beta1.Value min_value = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_min_value()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.privacy.dlp.v2beta1.Value max_value = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_max_value()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .google.privacy.dlp.v2beta1.Value quantile_values = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_quantile_values()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.privacy.dlp.v2beta1.RiskAnalysisOperationResult.NumericalStatsResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.privacy.dlp.v2beta1.RiskAnalysisOperationResult.NumericalStatsResult)
  return false;
#undef DO_
}

void RiskAnalysisOperationResult_NumericalStatsResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.privacy.dlp.v2beta1.RiskAnalysisOperationResult.NumericalStatsResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.privacy.dlp.v2beta1.Value min_value = 1;
  if (this->has_min_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->min_value_, output);
  }

  // .google.privacy.dlp.v2beta1.Value max_value = 2;
  if (this->has_max_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->max_value_, output);
  }

  // repeated .google.privacy.dlp.v2beta1.Value quantile_values = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->quantile_values_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->quantile_values(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:google.privacy.dlp.v2beta1.RiskAnalysisOperationResult.NumericalStatsResult)
}

::google::protobuf::uint8* RiskAnalysisOperationResult_NumericalStatsResult::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.privacy.dlp.v2beta1.RiskAnalysisOperationResult.NumericalStatsResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.privacy.dlp.v2beta1.Value min_value = 1;
  if (this->has_min_value()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->min_value_, deterministic, target);
  }

  // .google.privacy.dlp.v2beta1.Value max_value = 2;
  if (this->has_max_value()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, *this->max_value_, deterministic, target);
  }

  // repeated .google.privacy.dlp.v2beta1.Value quantile_values = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->quantile_values_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->quantile_values(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.privacy.dlp.v2beta1.RiskAnalysisOperationResult.NumericalStatsResult)
  return target;
}

size_t RiskAnalysisOperationResult_NumericalStatsResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.privacy.dlp.v2beta1.RiskAnalysisOperationResult.NumericalStatsResult)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .google.privacy.dlp.v2beta1.Value quantile_values = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->quantile_values_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->quantile_values(static_cast<int>(i)));
    }
  }

  // .google.privacy.dlp.v2beta1.Value min_value = 1;
  if (this->has_min_value()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->min_value_);
  }

  // .google.privacy.dlp.v2beta1.Value max_value = 2;
  if (this->has_max_value()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->max_value_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RiskAnalysisOperationResult_NumericalStatsResult::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.privacy.dlp.v2beta1.RiskAnalysisOperationResult.NumericalStatsResult)
  GOOGLE_DCHECK_NE(&from, this);
  const RiskAnalysisOperationResult_NumericalStatsResult* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RiskAnalysisOperationResult_NumericalStatsResult>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.privacy.dlp.v2beta1.RiskAnalysisOperationResult.NumericalStatsResult)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.privacy.dlp.v2beta1.RiskAnalysisOperationResult.NumericalStatsResult)
    MergeFrom(*source);
  }
}

void RiskAnalysisOperationResult_NumericalStatsResult::MergeFrom(const RiskAnalysisOperationResult_NumericalStatsResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.privacy.dlp.v2beta1.RiskAnalysisOperationResult.NumericalStatsResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  quantile_values_.MergeFrom(from.quantile_values_);
  if (from.has_min_value()) {
    mutable_min_value()->::google::privacy::dlp::v2beta1::Value::MergeFrom(from.min_value());
  }
  if (from.has_max_value()) {
    mutable_max_value()->::google::privacy::dlp::v2beta1::Value::MergeFrom(from.max_value());
  }
}

void RiskAnalysisOperationResult_NumericalStatsResult::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.privacy.dlp.v2beta1.RiskAnalysisOperationResult.NumericalStatsResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RiskAnalysisOperationResult_NumericalStatsResult::CopyFrom(const RiskAnalysisOperationResult_NumericalStatsResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.privacy.dlp.v2beta1.RiskAnalysisOperationResult.NumericalStatsResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RiskAnalysisOperationResult_NumericalStatsResult::IsInitialized() const {
  return true;
}

void RiskAnalysisOperationResult_NumericalStatsResult::Swap(RiskAnalysisOperationResult_NumericalStatsResult* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RiskAnalysisOperationResult_NumericalStatsResult::InternalSwap(RiskAnalysisOperationResult_NumericalStatsResult* other) {
  using std::swap;
  quantile_values_.InternalSwap(&other->quantile_values_);
  swap(min_value_, other->min_value_);
  swap(max_value_, other->max_value_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RiskAnalysisOperationResult_NumericalStatsResult::GetMetadata() const {
  protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void RiskAnalysisOperationResult_CategoricalStatsResult_CategoricalStatsHistogramBucket::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RiskAnalysisOperationResult_CategoricalStatsResult_CategoricalStatsHistogramBucket::kValueFrequencyLowerBoundFieldNumber;
const int RiskAnalysisOperationResult_CategoricalStatsResult_CategoricalStatsHistogramBucket::kValueFrequencyUpperBoundFieldNumber;
const int RiskAnalysisOperationResult_CategoricalStatsResult_CategoricalStatsHistogramBucket::kBucketSizeFieldNumber;
const int RiskAnalysisOperationResult_CategoricalStatsResult_CategoricalStatsHistogramBucket::kBucketValuesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RiskAnalysisOperationResult_CategoricalStatsResult_CategoricalStatsHistogramBucket::RiskAnalysisOperationResult_CategoricalStatsResult_CategoricalStatsHistogramBucket()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaultsRiskAnalysisOperationResult_CategoricalStatsResult_CategoricalStatsHistogramBucket();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.privacy.dlp.v2beta1.RiskAnalysisOperationResult.CategoricalStatsResult.CategoricalStatsHistogramBucket)
}
RiskAnalysisOperationResult_CategoricalStatsResult_CategoricalStatsHistogramBucket::RiskAnalysisOperationResult_CategoricalStatsResult_CategoricalStatsHistogramBucket(const RiskAnalysisOperationResult_CategoricalStatsResult_CategoricalStatsHistogramBucket& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      bucket_values_(from.bucket_values_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&value_frequency_lower_bound_, &from.value_frequency_lower_bound_,
    static_cast<size_t>(reinterpret_cast<char*>(&bucket_size_) -
    reinterpret_cast<char*>(&value_frequency_lower_bound_)) + sizeof(bucket_size_));
  // @@protoc_insertion_point(copy_constructor:google.privacy.dlp.v2beta1.RiskAnalysisOperationResult.CategoricalStatsResult.CategoricalStatsHistogramBucket)
}

void RiskAnalysisOperationResult_CategoricalStatsResult_CategoricalStatsHistogramBucket::SharedCtor() {
  ::memset(&value_frequency_lower_bound_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&bucket_size_) -
      reinterpret_cast<char*>(&value_frequency_lower_bound_)) + sizeof(bucket_size_));
  _cached_size_ = 0;
}

RiskAnalysisOperationResult_CategoricalStatsResult_CategoricalStatsHistogramBucket::~RiskAnalysisOperationResult_CategoricalStatsResult_CategoricalStatsHistogramBucket() {
  // @@protoc_insertion_point(destructor:google.privacy.dlp.v2beta1.RiskAnalysisOperationResult.CategoricalStatsResult.CategoricalStatsHistogramBucket)
  SharedDtor();
}

void RiskAnalysisOperationResult_CategoricalStatsResult_CategoricalStatsHistogramBucket::SharedDtor() {
}

void RiskAnalysisOperationResult_CategoricalStatsResult_CategoricalStatsHistogramBucket::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RiskAnalysisOperationResult_CategoricalStatsResult_CategoricalStatsHistogramBucket::descriptor() {
  ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RiskAnalysisOperationResult_CategoricalStatsResult_CategoricalStatsHistogramBucket& RiskAnalysisOperationResult_CategoricalStatsResult_CategoricalStatsHistogramBucket::default_instance() {
  ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaultsRiskAnalysisOperationResult_CategoricalStatsResult_CategoricalStatsHistogramBucket();
  return *internal_default_instance();
}

RiskAnalysisOperationResult_CategoricalStatsResult_CategoricalStatsHistogramBucket* RiskAnalysisOperationResult_CategoricalStatsResult_CategoricalStatsHistogramBucket::New(::google::protobuf::Arena* arena) const {
  RiskAnalysisOperationResult_CategoricalStatsResult_CategoricalStatsHistogramBucket* n = new RiskAnalysisOperationResult_CategoricalStatsResult_CategoricalStatsHistogramBucket;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RiskAnalysisOperationResult_CategoricalStatsResult_CategoricalStatsHistogramBucket::Clear() {
// @@protoc_insertion_point(message_clear_start:google.privacy.dlp.v2beta1.RiskAnalysisOperationResult.CategoricalStatsResult.CategoricalStatsHistogramBucket)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  bucket_values_.Clear();
  ::memset(&value_frequency_lower_bound_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&bucket_size_) -
      reinterpret_cast<char*>(&value_frequency_lower_bound_)) + sizeof(bucket_size_));
  _internal_metadata_.Clear();
}

bool RiskAnalysisOperationResult_CategoricalStatsResult_CategoricalStatsHistogramBucket::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.privacy.dlp.v2beta1.RiskAnalysisOperationResult.CategoricalStatsResult.CategoricalStatsHistogramBucket)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 value_frequency_lower_bound = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &value_frequency_lower_bound_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 value_frequency_upper_bound = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &value_frequency_upper_bound_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 bucket_size = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &bucket_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .google.privacy.dlp.v2beta1.ValueFrequency bucket_values = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_bucket_values()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.privacy.dlp.v2beta1.RiskAnalysisOperationResult.CategoricalStatsResult.CategoricalStatsHistogramBucket)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.privacy.dlp.v2beta1.RiskAnalysisOperationResult.CategoricalStatsResult.CategoricalStatsHistogramBucket)
  return false;
#undef DO_
}

void RiskAnalysisOperationResult_CategoricalStatsResult_CategoricalStatsHistogramBucket::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.privacy.dlp.v2beta1.RiskAnalysisOperationResult.CategoricalStatsResult.CategoricalStatsHistogramBucket)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 value_frequency_lower_bound = 1;
  if (this->value_frequency_lower_bound() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->value_frequency_lower_bound(), output);
  }

  // int64 value_frequency_upper_bound = 2;
  if (this->value_frequency_upper_bound() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->value_frequency_upper_bound(), output);
  }

  // int64 bucket_size = 3;
  if (this->bucket_size() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->bucket_size(), output);
  }

  // repeated .google.privacy.dlp.v2beta1.ValueFrequency bucket_values = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->bucket_values_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->bucket_values(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:google.privacy.dlp.v2beta1.RiskAnalysisOperationResult.CategoricalStatsResult.CategoricalStatsHistogramBucket)
}

::google::protobuf::uint8* RiskAnalysisOperationResult_CategoricalStatsResult_CategoricalStatsHistogramBucket::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.privacy.dlp.v2beta1.RiskAnalysisOperationResult.CategoricalStatsResult.CategoricalStatsHistogramBucket)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 value_frequency_lower_bound = 1;
  if (this->value_frequency_lower_bound() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->value_frequency_lower_bound(), target);
  }

  // int64 value_frequency_upper_bound = 2;
  if (this->value_frequency_upper_bound() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->value_frequency_upper_bound(), target);
  }

  // int64 bucket_size = 3;
  if (this->bucket_size() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->bucket_size(), target);
  }

  // repeated .google.privacy.dlp.v2beta1.ValueFrequency bucket_values = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->bucket_values_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->bucket_values(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.privacy.dlp.v2beta1.RiskAnalysisOperationResult.CategoricalStatsResult.CategoricalStatsHistogramBucket)
  return target;
}

size_t RiskAnalysisOperationResult_CategoricalStatsResult_CategoricalStatsHistogramBucket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.privacy.dlp.v2beta1.RiskAnalysisOperationResult.CategoricalStatsResult.CategoricalStatsHistogramBucket)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .google.privacy.dlp.v2beta1.ValueFrequency bucket_values = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->bucket_values_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->bucket_values(static_cast<int>(i)));
    }
  }

  // int64 value_frequency_lower_bound = 1;
  if (this->value_frequency_lower_bound() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->value_frequency_lower_bound());
  }

  // int64 value_frequency_upper_bound = 2;
  if (this->value_frequency_upper_bound() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->value_frequency_upper_bound());
  }

  // int64 bucket_size = 3;
  if (this->bucket_size() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->bucket_size());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RiskAnalysisOperationResult_CategoricalStatsResult_CategoricalStatsHistogramBucket::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.privacy.dlp.v2beta1.RiskAnalysisOperationResult.CategoricalStatsResult.CategoricalStatsHistogramBucket)
  GOOGLE_DCHECK_NE(&from, this);
  const RiskAnalysisOperationResult_CategoricalStatsResult_CategoricalStatsHistogramBucket* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RiskAnalysisOperationResult_CategoricalStatsResult_CategoricalStatsHistogramBucket>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.privacy.dlp.v2beta1.RiskAnalysisOperationResult.CategoricalStatsResult.CategoricalStatsHistogramBucket)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.privacy.dlp.v2beta1.RiskAnalysisOperationResult.CategoricalStatsResult.CategoricalStatsHistogramBucket)
    MergeFrom(*source);
  }
}

void RiskAnalysisOperationResult_CategoricalStatsResult_CategoricalStatsHistogramBucket::MergeFrom(const RiskAnalysisOperationResult_CategoricalStatsResult_CategoricalStatsHistogramBucket& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.privacy.dlp.v2beta1.RiskAnalysisOperationResult.CategoricalStatsResult.CategoricalStatsHistogramBucket)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  bucket_values_.MergeFrom(from.bucket_values_);
  if (from.value_frequency_lower_bound() != 0) {
    set_value_frequency_lower_bound(from.value_frequency_lower_bound());
  }
  if (from.value_frequency_upper_bound() != 0) {
    set_value_frequency_upper_bound(from.value_frequency_upper_bound());
  }
  if (from.bucket_size() != 0) {
    set_bucket_size(from.bucket_size());
  }
}

void RiskAnalysisOperationResult_CategoricalStatsResult_CategoricalStatsHistogramBucket::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.privacy.dlp.v2beta1.RiskAnalysisOperationResult.CategoricalStatsResult.CategoricalStatsHistogramBucket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RiskAnalysisOperationResult_CategoricalStatsResult_CategoricalStatsHistogramBucket::CopyFrom(const RiskAnalysisOperationResult_CategoricalStatsResult_CategoricalStatsHistogramBucket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.privacy.dlp.v2beta1.RiskAnalysisOperationResult.CategoricalStatsResult.CategoricalStatsHistogramBucket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RiskAnalysisOperationResult_CategoricalStatsResult_CategoricalStatsHistogramBucket::IsInitialized() const {
  return true;
}

void RiskAnalysisOperationResult_CategoricalStatsResult_CategoricalStatsHistogramBucket::Swap(RiskAnalysisOperationResult_CategoricalStatsResult_CategoricalStatsHistogramBucket* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RiskAnalysisOperationResult_CategoricalStatsResult_CategoricalStatsHistogramBucket::InternalSwap(RiskAnalysisOperationResult_CategoricalStatsResult_CategoricalStatsHistogramBucket* other) {
  using std::swap;
  bucket_values_.InternalSwap(&other->bucket_values_);
  swap(value_frequency_lower_bound_, other->value_frequency_lower_bound_);
  swap(value_frequency_upper_bound_, other->value_frequency_upper_bound_);
  swap(bucket_size_, other->bucket_size_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RiskAnalysisOperationResult_CategoricalStatsResult_CategoricalStatsHistogramBucket::GetMetadata() const {
  protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void RiskAnalysisOperationResult_CategoricalStatsResult::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RiskAnalysisOperationResult_CategoricalStatsResult::kValueFrequencyHistogramBucketsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RiskAnalysisOperationResult_CategoricalStatsResult::RiskAnalysisOperationResult_CategoricalStatsResult()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaultsRiskAnalysisOperationResult_CategoricalStatsResult();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.privacy.dlp.v2beta1.RiskAnalysisOperationResult.CategoricalStatsResult)
}
RiskAnalysisOperationResult_CategoricalStatsResult::RiskAnalysisOperationResult_CategoricalStatsResult(const RiskAnalysisOperationResult_CategoricalStatsResult& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      value_frequency_histogram_buckets_(from.value_frequency_histogram_buckets_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:google.privacy.dlp.v2beta1.RiskAnalysisOperationResult.CategoricalStatsResult)
}

void RiskAnalysisOperationResult_CategoricalStatsResult::SharedCtor() {
  _cached_size_ = 0;
}

RiskAnalysisOperationResult_CategoricalStatsResult::~RiskAnalysisOperationResult_CategoricalStatsResult() {
  // @@protoc_insertion_point(destructor:google.privacy.dlp.v2beta1.RiskAnalysisOperationResult.CategoricalStatsResult)
  SharedDtor();
}

void RiskAnalysisOperationResult_CategoricalStatsResult::SharedDtor() {
}

void RiskAnalysisOperationResult_CategoricalStatsResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RiskAnalysisOperationResult_CategoricalStatsResult::descriptor() {
  ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RiskAnalysisOperationResult_CategoricalStatsResult& RiskAnalysisOperationResult_CategoricalStatsResult::default_instance() {
  ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaultsRiskAnalysisOperationResult_CategoricalStatsResult();
  return *internal_default_instance();
}

RiskAnalysisOperationResult_CategoricalStatsResult* RiskAnalysisOperationResult_CategoricalStatsResult::New(::google::protobuf::Arena* arena) const {
  RiskAnalysisOperationResult_CategoricalStatsResult* n = new RiskAnalysisOperationResult_CategoricalStatsResult;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RiskAnalysisOperationResult_CategoricalStatsResult::Clear() {
// @@protoc_insertion_point(message_clear_start:google.privacy.dlp.v2beta1.RiskAnalysisOperationResult.CategoricalStatsResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_frequency_histogram_buckets_.Clear();
  _internal_metadata_.Clear();
}

bool RiskAnalysisOperationResult_CategoricalStatsResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.privacy.dlp.v2beta1.RiskAnalysisOperationResult.CategoricalStatsResult)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .google.privacy.dlp.v2beta1.RiskAnalysisOperationResult.CategoricalStatsResult.CategoricalStatsHistogramBucket value_frequency_histogram_buckets = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_value_frequency_histogram_buckets()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.privacy.dlp.v2beta1.RiskAnalysisOperationResult.CategoricalStatsResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.privacy.dlp.v2beta1.RiskAnalysisOperationResult.CategoricalStatsResult)
  return false;
#undef DO_
}

void RiskAnalysisOperationResult_CategoricalStatsResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.privacy.dlp.v2beta1.RiskAnalysisOperationResult.CategoricalStatsResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .google.privacy.dlp.v2beta1.RiskAnalysisOperationResult.CategoricalStatsResult.CategoricalStatsHistogramBucket value_frequency_histogram_buckets = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->value_frequency_histogram_buckets_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->value_frequency_histogram_buckets(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:google.privacy.dlp.v2beta1.RiskAnalysisOperationResult.CategoricalStatsResult)
}

::google::protobuf::uint8* RiskAnalysisOperationResult_CategoricalStatsResult::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.privacy.dlp.v2beta1.RiskAnalysisOperationResult.CategoricalStatsResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .google.privacy.dlp.v2beta1.RiskAnalysisOperationResult.CategoricalStatsResult.CategoricalStatsHistogramBucket value_frequency_histogram_buckets = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->value_frequency_histogram_buckets_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->value_frequency_histogram_buckets(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.privacy.dlp.v2beta1.RiskAnalysisOperationResult.CategoricalStatsResult)
  return target;
}

size_t RiskAnalysisOperationResult_CategoricalStatsResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.privacy.dlp.v2beta1.RiskAnalysisOperationResult.CategoricalStatsResult)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .google.privacy.dlp.v2beta1.RiskAnalysisOperationResult.CategoricalStatsResult.CategoricalStatsHistogramBucket value_frequency_histogram_buckets = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->value_frequency_histogram_buckets_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->value_frequency_histogram_buckets(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RiskAnalysisOperationResult_CategoricalStatsResult::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.privacy.dlp.v2beta1.RiskAnalysisOperationResult.CategoricalStatsResult)
  GOOGLE_DCHECK_NE(&from, this);
  const RiskAnalysisOperationResult_CategoricalStatsResult* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RiskAnalysisOperationResult_CategoricalStatsResult>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.privacy.dlp.v2beta1.RiskAnalysisOperationResult.CategoricalStatsResult)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.privacy.dlp.v2beta1.RiskAnalysisOperationResult.CategoricalStatsResult)
    MergeFrom(*source);
  }
}

void RiskAnalysisOperationResult_CategoricalStatsResult::MergeFrom(const RiskAnalysisOperationResult_CategoricalStatsResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.privacy.dlp.v2beta1.RiskAnalysisOperationResult.CategoricalStatsResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  value_frequency_histogram_buckets_.MergeFrom(from.value_frequency_histogram_buckets_);
}

void RiskAnalysisOperationResult_CategoricalStatsResult::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.privacy.dlp.v2beta1.RiskAnalysisOperationResult.CategoricalStatsResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RiskAnalysisOperationResult_CategoricalStatsResult::CopyFrom(const RiskAnalysisOperationResult_CategoricalStatsResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.privacy.dlp.v2beta1.RiskAnalysisOperationResult.CategoricalStatsResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RiskAnalysisOperationResult_CategoricalStatsResult::IsInitialized() const {
  return true;
}

void RiskAnalysisOperationResult_CategoricalStatsResult::Swap(RiskAnalysisOperationResult_CategoricalStatsResult* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RiskAnalysisOperationResult_CategoricalStatsResult::InternalSwap(RiskAnalysisOperationResult_CategoricalStatsResult* other) {
  using std::swap;
  value_frequency_histogram_buckets_.InternalSwap(&other->value_frequency_histogram_buckets_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RiskAnalysisOperationResult_CategoricalStatsResult::GetMetadata() const {
  protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void RiskAnalysisOperationResult_KAnonymityResult_KAnonymityEquivalenceClass::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RiskAnalysisOperationResult_KAnonymityResult_KAnonymityEquivalenceClass::kQuasiIdsValuesFieldNumber;
const int RiskAnalysisOperationResult_KAnonymityResult_KAnonymityEquivalenceClass::kEquivalenceClassSizeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RiskAnalysisOperationResult_KAnonymityResult_KAnonymityEquivalenceClass::RiskAnalysisOperationResult_KAnonymityResult_KAnonymityEquivalenceClass()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaultsRiskAnalysisOperationResult_KAnonymityResult_KAnonymityEquivalenceClass();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.privacy.dlp.v2beta1.RiskAnalysisOperationResult.KAnonymityResult.KAnonymityEquivalenceClass)
}
RiskAnalysisOperationResult_KAnonymityResult_KAnonymityEquivalenceClass::RiskAnalysisOperationResult_KAnonymityResult_KAnonymityEquivalenceClass(const RiskAnalysisOperationResult_KAnonymityResult_KAnonymityEquivalenceClass& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      quasi_ids_values_(from.quasi_ids_values_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  equivalence_class_size_ = from.equivalence_class_size_;
  // @@protoc_insertion_point(copy_constructor:google.privacy.dlp.v2beta1.RiskAnalysisOperationResult.KAnonymityResult.KAnonymityEquivalenceClass)
}

void RiskAnalysisOperationResult_KAnonymityResult_KAnonymityEquivalenceClass::SharedCtor() {
  equivalence_class_size_ = GOOGLE_LONGLONG(0);
  _cached_size_ = 0;
}

RiskAnalysisOperationResult_KAnonymityResult_KAnonymityEquivalenceClass::~RiskAnalysisOperationResult_KAnonymityResult_KAnonymityEquivalenceClass() {
  // @@protoc_insertion_point(destructor:google.privacy.dlp.v2beta1.RiskAnalysisOperationResult.KAnonymityResult.KAnonymityEquivalenceClass)
  SharedDtor();
}

void RiskAnalysisOperationResult_KAnonymityResult_KAnonymityEquivalenceClass::SharedDtor() {
}

void RiskAnalysisOperationResult_KAnonymityResult_KAnonymityEquivalenceClass::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RiskAnalysisOperationResult_KAnonymityResult_KAnonymityEquivalenceClass::descriptor() {
  ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RiskAnalysisOperationResult_KAnonymityResult_KAnonymityEquivalenceClass& RiskAnalysisOperationResult_KAnonymityResult_KAnonymityEquivalenceClass::default_instance() {
  ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaultsRiskAnalysisOperationResult_KAnonymityResult_KAnonymityEquivalenceClass();
  return *internal_default_instance();
}

RiskAnalysisOperationResult_KAnonymityResult_KAnonymityEquivalenceClass* RiskAnalysisOperationResult_KAnonymityResult_KAnonymityEquivalenceClass::New(::google::protobuf::Arena* arena) const {
  RiskAnalysisOperationResult_KAnonymityResult_KAnonymityEquivalenceClass* n = new RiskAnalysisOperationResult_KAnonymityResult_KAnonymityEquivalenceClass;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RiskAnalysisOperationResult_KAnonymityResult_KAnonymityEquivalenceClass::Clear() {
// @@protoc_insertion_point(message_clear_start:google.privacy.dlp.v2beta1.RiskAnalysisOperationResult.KAnonymityResult.KAnonymityEquivalenceClass)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  quasi_ids_values_.Clear();
  equivalence_class_size_ = GOOGLE_LONGLONG(0);
  _internal_metadata_.Clear();
}

bool RiskAnalysisOperationResult_KAnonymityResult_KAnonymityEquivalenceClass::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.privacy.dlp.v2beta1.RiskAnalysisOperationResult.KAnonymityResult.KAnonymityEquivalenceClass)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .google.privacy.dlp.v2beta1.Value quasi_ids_values = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_quasi_ids_values()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 equivalence_class_size = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &equivalence_class_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.privacy.dlp.v2beta1.RiskAnalysisOperationResult.KAnonymityResult.KAnonymityEquivalenceClass)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.privacy.dlp.v2beta1.RiskAnalysisOperationResult.KAnonymityResult.KAnonymityEquivalenceClass)
  return false;
#undef DO_
}

void RiskAnalysisOperationResult_KAnonymityResult_KAnonymityEquivalenceClass::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.privacy.dlp.v2beta1.RiskAnalysisOperationResult.KAnonymityResult.KAnonymityEquivalenceClass)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .google.privacy.dlp.v2beta1.Value quasi_ids_values = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->quasi_ids_values_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->quasi_ids_values(static_cast<int>(i)), output);
  }

  // int64 equivalence_class_size = 2;
  if (this->equivalence_class_size() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->equivalence_class_size(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:google.privacy.dlp.v2beta1.RiskAnalysisOperationResult.KAnonymityResult.KAnonymityEquivalenceClass)
}

::google::protobuf::uint8* RiskAnalysisOperationResult_KAnonymityResult_KAnonymityEquivalenceClass::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.privacy.dlp.v2beta1.RiskAnalysisOperationResult.KAnonymityResult.KAnonymityEquivalenceClass)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .google.privacy.dlp.v2beta1.Value quasi_ids_values = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->quasi_ids_values_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->quasi_ids_values(static_cast<int>(i)), deterministic, target);
  }

  // int64 equivalence_class_size = 2;
  if (this->equivalence_class_size() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->equivalence_class_size(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.privacy.dlp.v2beta1.RiskAnalysisOperationResult.KAnonymityResult.KAnonymityEquivalenceClass)
  return target;
}

size_t RiskAnalysisOperationResult_KAnonymityResult_KAnonymityEquivalenceClass::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.privacy.dlp.v2beta1.RiskAnalysisOperationResult.KAnonymityResult.KAnonymityEquivalenceClass)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .google.privacy.dlp.v2beta1.Value quasi_ids_values = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->quasi_ids_values_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->quasi_ids_values(static_cast<int>(i)));
    }
  }

  // int64 equivalence_class_size = 2;
  if (this->equivalence_class_size() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->equivalence_class_size());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RiskAnalysisOperationResult_KAnonymityResult_KAnonymityEquivalenceClass::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.privacy.dlp.v2beta1.RiskAnalysisOperationResult.KAnonymityResult.KAnonymityEquivalenceClass)
  GOOGLE_DCHECK_NE(&from, this);
  const RiskAnalysisOperationResult_KAnonymityResult_KAnonymityEquivalenceClass* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RiskAnalysisOperationResult_KAnonymityResult_KAnonymityEquivalenceClass>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.privacy.dlp.v2beta1.RiskAnalysisOperationResult.KAnonymityResult.KAnonymityEquivalenceClass)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.privacy.dlp.v2beta1.RiskAnalysisOperationResult.KAnonymityResult.KAnonymityEquivalenceClass)
    MergeFrom(*source);
  }
}

void RiskAnalysisOperationResult_KAnonymityResult_KAnonymityEquivalenceClass::MergeFrom(const RiskAnalysisOperationResult_KAnonymityResult_KAnonymityEquivalenceClass& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.privacy.dlp.v2beta1.RiskAnalysisOperationResult.KAnonymityResult.KAnonymityEquivalenceClass)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  quasi_ids_values_.MergeFrom(from.quasi_ids_values_);
  if (from.equivalence_class_size() != 0) {
    set_equivalence_class_size(from.equivalence_class_size());
  }
}

void RiskAnalysisOperationResult_KAnonymityResult_KAnonymityEquivalenceClass::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.privacy.dlp.v2beta1.RiskAnalysisOperationResult.KAnonymityResult.KAnonymityEquivalenceClass)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RiskAnalysisOperationResult_KAnonymityResult_KAnonymityEquivalenceClass::CopyFrom(const RiskAnalysisOperationResult_KAnonymityResult_KAnonymityEquivalenceClass& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.privacy.dlp.v2beta1.RiskAnalysisOperationResult.KAnonymityResult.KAnonymityEquivalenceClass)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RiskAnalysisOperationResult_KAnonymityResult_KAnonymityEquivalenceClass::IsInitialized() const {
  return true;
}

void RiskAnalysisOperationResult_KAnonymityResult_KAnonymityEquivalenceClass::Swap(RiskAnalysisOperationResult_KAnonymityResult_KAnonymityEquivalenceClass* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RiskAnalysisOperationResult_KAnonymityResult_KAnonymityEquivalenceClass::InternalSwap(RiskAnalysisOperationResult_KAnonymityResult_KAnonymityEquivalenceClass* other) {
  using std::swap;
  quasi_ids_values_.InternalSwap(&other->quasi_ids_values_);
  swap(equivalence_class_size_, other->equivalence_class_size_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RiskAnalysisOperationResult_KAnonymityResult_KAnonymityEquivalenceClass::GetMetadata() const {
  protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void RiskAnalysisOperationResult_KAnonymityResult_KAnonymityHistogramBucket::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RiskAnalysisOperationResult_KAnonymityResult_KAnonymityHistogramBucket::kEquivalenceClassSizeLowerBoundFieldNumber;
const int RiskAnalysisOperationResult_KAnonymityResult_KAnonymityHistogramBucket::kEquivalenceClassSizeUpperBoundFieldNumber;
const int RiskAnalysisOperationResult_KAnonymityResult_KAnonymityHistogramBucket::kBucketSizeFieldNumber;
const int RiskAnalysisOperationResult_KAnonymityResult_KAnonymityHistogramBucket::kBucketValuesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RiskAnalysisOperationResult_KAnonymityResult_KAnonymityHistogramBucket::RiskAnalysisOperationResult_KAnonymityResult_KAnonymityHistogramBucket()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaultsRiskAnalysisOperationResult_KAnonymityResult_KAnonymityHistogramBucket();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.privacy.dlp.v2beta1.RiskAnalysisOperationResult.KAnonymityResult.KAnonymityHistogramBucket)
}
RiskAnalysisOperationResult_KAnonymityResult_KAnonymityHistogramBucket::RiskAnalysisOperationResult_KAnonymityResult_KAnonymityHistogramBucket(const RiskAnalysisOperationResult_KAnonymityResult_KAnonymityHistogramBucket& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      bucket_values_(from.bucket_values_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&equivalence_class_size_lower_bound_, &from.equivalence_class_size_lower_bound_,
    static_cast<size_t>(reinterpret_cast<char*>(&bucket_size_) -
    reinterpret_cast<char*>(&equivalence_class_size_lower_bound_)) + sizeof(bucket_size_));
  // @@protoc_insertion_point(copy_constructor:google.privacy.dlp.v2beta1.RiskAnalysisOperationResult.KAnonymityResult.KAnonymityHistogramBucket)
}

void RiskAnalysisOperationResult_KAnonymityResult_KAnonymityHistogramBucket::SharedCtor() {
  ::memset(&equivalence_class_size_lower_bound_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&bucket_size_) -
      reinterpret_cast<char*>(&equivalence_class_size_lower_bound_)) + sizeof(bucket_size_));
  _cached_size_ = 0;
}

RiskAnalysisOperationResult_KAnonymityResult_KAnonymityHistogramBucket::~RiskAnalysisOperationResult_KAnonymityResult_KAnonymityHistogramBucket() {
  // @@protoc_insertion_point(destructor:google.privacy.dlp.v2beta1.RiskAnalysisOperationResult.KAnonymityResult.KAnonymityHistogramBucket)
  SharedDtor();
}

void RiskAnalysisOperationResult_KAnonymityResult_KAnonymityHistogramBucket::SharedDtor() {
}

void RiskAnalysisOperationResult_KAnonymityResult_KAnonymityHistogramBucket::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RiskAnalysisOperationResult_KAnonymityResult_KAnonymityHistogramBucket::descriptor() {
  ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RiskAnalysisOperationResult_KAnonymityResult_KAnonymityHistogramBucket& RiskAnalysisOperationResult_KAnonymityResult_KAnonymityHistogramBucket::default_instance() {
  ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaultsRiskAnalysisOperationResult_KAnonymityResult_KAnonymityHistogramBucket();
  return *internal_default_instance();
}

RiskAnalysisOperationResult_KAnonymityResult_KAnonymityHistogramBucket* RiskAnalysisOperationResult_KAnonymityResult_KAnonymityHistogramBucket::New(::google::protobuf::Arena* arena) const {
  RiskAnalysisOperationResult_KAnonymityResult_KAnonymityHistogramBucket* n = new RiskAnalysisOperationResult_KAnonymityResult_KAnonymityHistogramBucket;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RiskAnalysisOperationResult_KAnonymityResult_KAnonymityHistogramBucket::Clear() {
// @@protoc_insertion_point(message_clear_start:google.privacy.dlp.v2beta1.RiskAnalysisOperationResult.KAnonymityResult.KAnonymityHistogramBucket)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  bucket_values_.Clear();
  ::memset(&equivalence_class_size_lower_bound_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&bucket_size_) -
      reinterpret_cast<char*>(&equivalence_class_size_lower_bound_)) + sizeof(bucket_size_));
  _internal_metadata_.Clear();
}

bool RiskAnalysisOperationResult_KAnonymityResult_KAnonymityHistogramBucket::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.privacy.dlp.v2beta1.RiskAnalysisOperationResult.KAnonymityResult.KAnonymityHistogramBucket)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 equivalence_class_size_lower_bound = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &equivalence_class_size_lower_bound_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 equivalence_class_size_upper_bound = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &equivalence_class_size_upper_bound_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 bucket_size = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &bucket_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .google.privacy.dlp.v2beta1.RiskAnalysisOperationResult.KAnonymityResult.KAnonymityEquivalenceClass bucket_values = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_bucket_values()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.privacy.dlp.v2beta1.RiskAnalysisOperationResult.KAnonymityResult.KAnonymityHistogramBucket)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.privacy.dlp.v2beta1.RiskAnalysisOperationResult.KAnonymityResult.KAnonymityHistogramBucket)
  return false;
#undef DO_
}

void RiskAnalysisOperationResult_KAnonymityResult_KAnonymityHistogramBucket::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.privacy.dlp.v2beta1.RiskAnalysisOperationResult.KAnonymityResult.KAnonymityHistogramBucket)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 equivalence_class_size_lower_bound = 1;
  if (this->equivalence_class_size_lower_bound() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->equivalence_class_size_lower_bound(), output);
  }

  // int64 equivalence_class_size_upper_bound = 2;
  if (this->equivalence_class_size_upper_bound() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->equivalence_class_size_upper_bound(), output);
  }

  // int64 bucket_size = 3;
  if (this->bucket_size() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->bucket_size(), output);
  }

  // repeated .google.privacy.dlp.v2beta1.RiskAnalysisOperationResult.KAnonymityResult.KAnonymityEquivalenceClass bucket_values = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->bucket_values_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->bucket_values(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:google.privacy.dlp.v2beta1.RiskAnalysisOperationResult.KAnonymityResult.KAnonymityHistogramBucket)
}

::google::protobuf::uint8* RiskAnalysisOperationResult_KAnonymityResult_KAnonymityHistogramBucket::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.privacy.dlp.v2beta1.RiskAnalysisOperationResult.KAnonymityResult.KAnonymityHistogramBucket)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 equivalence_class_size_lower_bound = 1;
  if (this->equivalence_class_size_lower_bound() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->equivalence_class_size_lower_bound(), target);
  }

  // int64 equivalence_class_size_upper_bound = 2;
  if (this->equivalence_class_size_upper_bound() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->equivalence_class_size_upper_bound(), target);
  }

  // int64 bucket_size = 3;
  if (this->bucket_size() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->bucket_size(), target);
  }

  // repeated .google.privacy.dlp.v2beta1.RiskAnalysisOperationResult.KAnonymityResult.KAnonymityEquivalenceClass bucket_values = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->bucket_values_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->bucket_values(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.privacy.dlp.v2beta1.RiskAnalysisOperationResult.KAnonymityResult.KAnonymityHistogramBucket)
  return target;
}

size_t RiskAnalysisOperationResult_KAnonymityResult_KAnonymityHistogramBucket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.privacy.dlp.v2beta1.RiskAnalysisOperationResult.KAnonymityResult.KAnonymityHistogramBucket)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .google.privacy.dlp.v2beta1.RiskAnalysisOperationResult.KAnonymityResult.KAnonymityEquivalenceClass bucket_values = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->bucket_values_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->bucket_values(static_cast<int>(i)));
    }
  }

  // int64 equivalence_class_size_lower_bound = 1;
  if (this->equivalence_class_size_lower_bound() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->equivalence_class_size_lower_bound());
  }

  // int64 equivalence_class_size_upper_bound = 2;
  if (this->equivalence_class_size_upper_bound() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->equivalence_class_size_upper_bound());
  }

  // int64 bucket_size = 3;
  if (this->bucket_size() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->bucket_size());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RiskAnalysisOperationResult_KAnonymityResult_KAnonymityHistogramBucket::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.privacy.dlp.v2beta1.RiskAnalysisOperationResult.KAnonymityResult.KAnonymityHistogramBucket)
  GOOGLE_DCHECK_NE(&from, this);
  const RiskAnalysisOperationResult_KAnonymityResult_KAnonymityHistogramBucket* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RiskAnalysisOperationResult_KAnonymityResult_KAnonymityHistogramBucket>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.privacy.dlp.v2beta1.RiskAnalysisOperationResult.KAnonymityResult.KAnonymityHistogramBucket)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.privacy.dlp.v2beta1.RiskAnalysisOperationResult.KAnonymityResult.KAnonymityHistogramBucket)
    MergeFrom(*source);
  }
}

void RiskAnalysisOperationResult_KAnonymityResult_KAnonymityHistogramBucket::MergeFrom(const RiskAnalysisOperationResult_KAnonymityResult_KAnonymityHistogramBucket& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.privacy.dlp.v2beta1.RiskAnalysisOperationResult.KAnonymityResult.KAnonymityHistogramBucket)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  bucket_values_.MergeFrom(from.bucket_values_);
  if (from.equivalence_class_size_lower_bound() != 0) {
    set_equivalence_class_size_lower_bound(from.equivalence_class_size_lower_bound());
  }
  if (from.equivalence_class_size_upper_bound() != 0) {
    set_equivalence_class_size_upper_bound(from.equivalence_class_size_upper_bound());
  }
  if (from.bucket_size() != 0) {
    set_bucket_size(from.bucket_size());
  }
}

void RiskAnalysisOperationResult_KAnonymityResult_KAnonymityHistogramBucket::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.privacy.dlp.v2beta1.RiskAnalysisOperationResult.KAnonymityResult.KAnonymityHistogramBucket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RiskAnalysisOperationResult_KAnonymityResult_KAnonymityHistogramBucket::CopyFrom(const RiskAnalysisOperationResult_KAnonymityResult_KAnonymityHistogramBucket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.privacy.dlp.v2beta1.RiskAnalysisOperationResult.KAnonymityResult.KAnonymityHistogramBucket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RiskAnalysisOperationResult_KAnonymityResult_KAnonymityHistogramBucket::IsInitialized() const {
  return true;
}

void RiskAnalysisOperationResult_KAnonymityResult_KAnonymityHistogramBucket::Swap(RiskAnalysisOperationResult_KAnonymityResult_KAnonymityHistogramBucket* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RiskAnalysisOperationResult_KAnonymityResult_KAnonymityHistogramBucket::InternalSwap(RiskAnalysisOperationResult_KAnonymityResult_KAnonymityHistogramBucket* other) {
  using std::swap;
  bucket_values_.InternalSwap(&other->bucket_values_);
  swap(equivalence_class_size_lower_bound_, other->equivalence_class_size_lower_bound_);
  swap(equivalence_class_size_upper_bound_, other->equivalence_class_size_upper_bound_);
  swap(bucket_size_, other->bucket_size_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RiskAnalysisOperationResult_KAnonymityResult_KAnonymityHistogramBucket::GetMetadata() const {
  protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void RiskAnalysisOperationResult_KAnonymityResult::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RiskAnalysisOperationResult_KAnonymityResult::kEquivalenceClassHistogramBucketsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RiskAnalysisOperationResult_KAnonymityResult::RiskAnalysisOperationResult_KAnonymityResult()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaultsRiskAnalysisOperationResult_KAnonymityResult();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.privacy.dlp.v2beta1.RiskAnalysisOperationResult.KAnonymityResult)
}
RiskAnalysisOperationResult_KAnonymityResult::RiskAnalysisOperationResult_KAnonymityResult(const RiskAnalysisOperationResult_KAnonymityResult& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      equivalence_class_histogram_buckets_(from.equivalence_class_histogram_buckets_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:google.privacy.dlp.v2beta1.RiskAnalysisOperationResult.KAnonymityResult)
}

void RiskAnalysisOperationResult_KAnonymityResult::SharedCtor() {
  _cached_size_ = 0;
}

RiskAnalysisOperationResult_KAnonymityResult::~RiskAnalysisOperationResult_KAnonymityResult() {
  // @@protoc_insertion_point(destructor:google.privacy.dlp.v2beta1.RiskAnalysisOperationResult.KAnonymityResult)
  SharedDtor();
}

void RiskAnalysisOperationResult_KAnonymityResult::SharedDtor() {
}

void RiskAnalysisOperationResult_KAnonymityResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RiskAnalysisOperationResult_KAnonymityResult::descriptor() {
  ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RiskAnalysisOperationResult_KAnonymityResult& RiskAnalysisOperationResult_KAnonymityResult::default_instance() {
  ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaultsRiskAnalysisOperationResult_KAnonymityResult();
  return *internal_default_instance();
}

RiskAnalysisOperationResult_KAnonymityResult* RiskAnalysisOperationResult_KAnonymityResult::New(::google::protobuf::Arena* arena) const {
  RiskAnalysisOperationResult_KAnonymityResult* n = new RiskAnalysisOperationResult_KAnonymityResult;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RiskAnalysisOperationResult_KAnonymityResult::Clear() {
// @@protoc_insertion_point(message_clear_start:google.privacy.dlp.v2beta1.RiskAnalysisOperationResult.KAnonymityResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  equivalence_class_histogram_buckets_.Clear();
  _internal_metadata_.Clear();
}

bool RiskAnalysisOperationResult_KAnonymityResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.privacy.dlp.v2beta1.RiskAnalysisOperationResult.KAnonymityResult)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .google.privacy.dlp.v2beta1.RiskAnalysisOperationResult.KAnonymityResult.KAnonymityHistogramBucket equivalence_class_histogram_buckets = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_equivalence_class_histogram_buckets()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.privacy.dlp.v2beta1.RiskAnalysisOperationResult.KAnonymityResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.privacy.dlp.v2beta1.RiskAnalysisOperationResult.KAnonymityResult)
  return false;
#undef DO_
}

void RiskAnalysisOperationResult_KAnonymityResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.privacy.dlp.v2beta1.RiskAnalysisOperationResult.KAnonymityResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .google.privacy.dlp.v2beta1.RiskAnalysisOperationResult.KAnonymityResult.KAnonymityHistogramBucket equivalence_class_histogram_buckets = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->equivalence_class_histogram_buckets_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->equivalence_class_histogram_buckets(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:google.privacy.dlp.v2beta1.RiskAnalysisOperationResult.KAnonymityResult)
}

::google::protobuf::uint8* RiskAnalysisOperationResult_KAnonymityResult::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.privacy.dlp.v2beta1.RiskAnalysisOperationResult.KAnonymityResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .google.privacy.dlp.v2beta1.RiskAnalysisOperationResult.KAnonymityResult.KAnonymityHistogramBucket equivalence_class_histogram_buckets = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->equivalence_class_histogram_buckets_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->equivalence_class_histogram_buckets(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.privacy.dlp.v2beta1.RiskAnalysisOperationResult.KAnonymityResult)
  return target;
}

size_t RiskAnalysisOperationResult_KAnonymityResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.privacy.dlp.v2beta1.RiskAnalysisOperationResult.KAnonymityResult)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .google.privacy.dlp.v2beta1.RiskAnalysisOperationResult.KAnonymityResult.KAnonymityHistogramBucket equivalence_class_histogram_buckets = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->equivalence_class_histogram_buckets_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->equivalence_class_histogram_buckets(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RiskAnalysisOperationResult_KAnonymityResult::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.privacy.dlp.v2beta1.RiskAnalysisOperationResult.KAnonymityResult)
  GOOGLE_DCHECK_NE(&from, this);
  const RiskAnalysisOperationResult_KAnonymityResult* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RiskAnalysisOperationResult_KAnonymityResult>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.privacy.dlp.v2beta1.RiskAnalysisOperationResult.KAnonymityResult)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.privacy.dlp.v2beta1.RiskAnalysisOperationResult.KAnonymityResult)
    MergeFrom(*source);
  }
}

void RiskAnalysisOperationResult_KAnonymityResult::MergeFrom(const RiskAnalysisOperationResult_KAnonymityResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.privacy.dlp.v2beta1.RiskAnalysisOperationResult.KAnonymityResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  equivalence_class_histogram_buckets_.MergeFrom(from.equivalence_class_histogram_buckets_);
}

void RiskAnalysisOperationResult_KAnonymityResult::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.privacy.dlp.v2beta1.RiskAnalysisOperationResult.KAnonymityResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RiskAnalysisOperationResult_KAnonymityResult::CopyFrom(const RiskAnalysisOperationResult_KAnonymityResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.privacy.dlp.v2beta1.RiskAnalysisOperationResult.KAnonymityResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RiskAnalysisOperationResult_KAnonymityResult::IsInitialized() const {
  return true;
}

void RiskAnalysisOperationResult_KAnonymityResult::Swap(RiskAnalysisOperationResult_KAnonymityResult* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RiskAnalysisOperationResult_KAnonymityResult::InternalSwap(RiskAnalysisOperationResult_KAnonymityResult* other) {
  using std::swap;
  equivalence_class_histogram_buckets_.InternalSwap(&other->equivalence_class_histogram_buckets_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RiskAnalysisOperationResult_KAnonymityResult::GetMetadata() const {
  protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void RiskAnalysisOperationResult_LDiversityResult_LDiversityEquivalenceClass::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RiskAnalysisOperationResult_LDiversityResult_LDiversityEquivalenceClass::kQuasiIdsValuesFieldNumber;
const int RiskAnalysisOperationResult_LDiversityResult_LDiversityEquivalenceClass::kEquivalenceClassSizeFieldNumber;
const int RiskAnalysisOperationResult_LDiversityResult_LDiversityEquivalenceClass::kNumDistinctSensitiveValuesFieldNumber;
const int RiskAnalysisOperationResult_LDiversityResult_LDiversityEquivalenceClass::kTopSensitiveValuesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RiskAnalysisOperationResult_LDiversityResult_LDiversityEquivalenceClass::RiskAnalysisOperationResult_LDiversityResult_LDiversityEquivalenceClass()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaultsRiskAnalysisOperationResult_LDiversityResult_LDiversityEquivalenceClass();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.privacy.dlp.v2beta1.RiskAnalysisOperationResult.LDiversityResult.LDiversityEquivalenceClass)
}
RiskAnalysisOperationResult_LDiversityResult_LDiversityEquivalenceClass::RiskAnalysisOperationResult_LDiversityResult_LDiversityEquivalenceClass(const RiskAnalysisOperationResult_LDiversityResult_LDiversityEquivalenceClass& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      quasi_ids_values_(from.quasi_ids_values_),
      top_sensitive_values_(from.top_sensitive_values_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&equivalence_class_size_, &from.equivalence_class_size_,
    static_cast<size_t>(reinterpret_cast<char*>(&num_distinct_sensitive_values_) -
    reinterpret_cast<char*>(&equivalence_class_size_)) + sizeof(num_distinct_sensitive_values_));
  // @@protoc_insertion_point(copy_constructor:google.privacy.dlp.v2beta1.RiskAnalysisOperationResult.LDiversityResult.LDiversityEquivalenceClass)
}

void RiskAnalysisOperationResult_LDiversityResult_LDiversityEquivalenceClass::SharedCtor() {
  ::memset(&equivalence_class_size_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&num_distinct_sensitive_values_) -
      reinterpret_cast<char*>(&equivalence_class_size_)) + sizeof(num_distinct_sensitive_values_));
  _cached_size_ = 0;
}

RiskAnalysisOperationResult_LDiversityResult_LDiversityEquivalenceClass::~RiskAnalysisOperationResult_LDiversityResult_LDiversityEquivalenceClass() {
  // @@protoc_insertion_point(destructor:google.privacy.dlp.v2beta1.RiskAnalysisOperationResult.LDiversityResult.LDiversityEquivalenceClass)
  SharedDtor();
}

void RiskAnalysisOperationResult_LDiversityResult_LDiversityEquivalenceClass::SharedDtor() {
}

void RiskAnalysisOperationResult_LDiversityResult_LDiversityEquivalenceClass::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RiskAnalysisOperationResult_LDiversityResult_LDiversityEquivalenceClass::descriptor() {
  ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RiskAnalysisOperationResult_LDiversityResult_LDiversityEquivalenceClass& RiskAnalysisOperationResult_LDiversityResult_LDiversityEquivalenceClass::default_instance() {
  ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaultsRiskAnalysisOperationResult_LDiversityResult_LDiversityEquivalenceClass();
  return *internal_default_instance();
}

RiskAnalysisOperationResult_LDiversityResult_LDiversityEquivalenceClass* RiskAnalysisOperationResult_LDiversityResult_LDiversityEquivalenceClass::New(::google::protobuf::Arena* arena) const {
  RiskAnalysisOperationResult_LDiversityResult_LDiversityEquivalenceClass* n = new RiskAnalysisOperationResult_LDiversityResult_LDiversityEquivalenceClass;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RiskAnalysisOperationResult_LDiversityResult_LDiversityEquivalenceClass::Clear() {
// @@protoc_insertion_point(message_clear_start:google.privacy.dlp.v2beta1.RiskAnalysisOperationResult.LDiversityResult.LDiversityEquivalenceClass)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  quasi_ids_values_.Clear();
  top_sensitive_values_.Clear();
  ::memset(&equivalence_class_size_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&num_distinct_sensitive_values_) -
      reinterpret_cast<char*>(&equivalence_class_size_)) + sizeof(num_distinct_sensitive_values_));
  _internal_metadata_.Clear();
}

bool RiskAnalysisOperationResult_LDiversityResult_LDiversityEquivalenceClass::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.privacy.dlp.v2beta1.RiskAnalysisOperationResult.LDiversityResult.LDiversityEquivalenceClass)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .google.privacy.dlp.v2beta1.Value quasi_ids_values = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_quasi_ids_values()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 equivalence_class_size = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &equivalence_class_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 num_distinct_sensitive_values = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &num_distinct_sensitive_values_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .google.privacy.dlp.v2beta1.ValueFrequency top_sensitive_values = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_top_sensitive_values()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.privacy.dlp.v2beta1.RiskAnalysisOperationResult.LDiversityResult.LDiversityEquivalenceClass)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.privacy.dlp.v2beta1.RiskAnalysisOperationResult.LDiversityResult.LDiversityEquivalenceClass)
  return false;
#undef DO_
}

void RiskAnalysisOperationResult_LDiversityResult_LDiversityEquivalenceClass::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.privacy.dlp.v2beta1.RiskAnalysisOperationResult.LDiversityResult.LDiversityEquivalenceClass)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .google.privacy.dlp.v2beta1.Value quasi_ids_values = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->quasi_ids_values_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->quasi_ids_values(static_cast<int>(i)), output);
  }

  // int64 equivalence_class_size = 2;
  if (this->equivalence_class_size() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->equivalence_class_size(), output);
  }

  // int64 num_distinct_sensitive_values = 3;
  if (this->num_distinct_sensitive_values() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->num_distinct_sensitive_values(), output);
  }

  // repeated .google.privacy.dlp.v2beta1.ValueFrequency top_sensitive_values = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->top_sensitive_values_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->top_sensitive_values(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:google.privacy.dlp.v2beta1.RiskAnalysisOperationResult.LDiversityResult.LDiversityEquivalenceClass)
}

::google::protobuf::uint8* RiskAnalysisOperationResult_LDiversityResult_LDiversityEquivalenceClass::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.privacy.dlp.v2beta1.RiskAnalysisOperationResult.LDiversityResult.LDiversityEquivalenceClass)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .google.privacy.dlp.v2beta1.Value quasi_ids_values = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->quasi_ids_values_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->quasi_ids_values(static_cast<int>(i)), deterministic, target);
  }

  // int64 equivalence_class_size = 2;
  if (this->equivalence_class_size() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->equivalence_class_size(), target);
  }

  // int64 num_distinct_sensitive_values = 3;
  if (this->num_distinct_sensitive_values() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->num_distinct_sensitive_values(), target);
  }

  // repeated .google.privacy.dlp.v2beta1.ValueFrequency top_sensitive_values = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->top_sensitive_values_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->top_sensitive_values(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.privacy.dlp.v2beta1.RiskAnalysisOperationResult.LDiversityResult.LDiversityEquivalenceClass)
  return target;
}

size_t RiskAnalysisOperationResult_LDiversityResult_LDiversityEquivalenceClass::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.privacy.dlp.v2beta1.RiskAnalysisOperationResult.LDiversityResult.LDiversityEquivalenceClass)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .google.privacy.dlp.v2beta1.Value quasi_ids_values = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->quasi_ids_values_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->quasi_ids_values(static_cast<int>(i)));
    }
  }

  // repeated .google.privacy.dlp.v2beta1.ValueFrequency top_sensitive_values = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->top_sensitive_values_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->top_sensitive_values(static_cast<int>(i)));
    }
  }

  // int64 equivalence_class_size = 2;
  if (this->equivalence_class_size() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->equivalence_class_size());
  }

  // int64 num_distinct_sensitive_values = 3;
  if (this->num_distinct_sensitive_values() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->num_distinct_sensitive_values());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RiskAnalysisOperationResult_LDiversityResult_LDiversityEquivalenceClass::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.privacy.dlp.v2beta1.RiskAnalysisOperationResult.LDiversityResult.LDiversityEquivalenceClass)
  GOOGLE_DCHECK_NE(&from, this);
  const RiskAnalysisOperationResult_LDiversityResult_LDiversityEquivalenceClass* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RiskAnalysisOperationResult_LDiversityResult_LDiversityEquivalenceClass>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.privacy.dlp.v2beta1.RiskAnalysisOperationResult.LDiversityResult.LDiversityEquivalenceClass)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.privacy.dlp.v2beta1.RiskAnalysisOperationResult.LDiversityResult.LDiversityEquivalenceClass)
    MergeFrom(*source);
  }
}

void RiskAnalysisOperationResult_LDiversityResult_LDiversityEquivalenceClass::MergeFrom(const RiskAnalysisOperationResult_LDiversityResult_LDiversityEquivalenceClass& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.privacy.dlp.v2beta1.RiskAnalysisOperationResult.LDiversityResult.LDiversityEquivalenceClass)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  quasi_ids_values_.MergeFrom(from.quasi_ids_values_);
  top_sensitive_values_.MergeFrom(from.top_sensitive_values_);
  if (from.equivalence_class_size() != 0) {
    set_equivalence_class_size(from.equivalence_class_size());
  }
  if (from.num_distinct_sensitive_values() != 0) {
    set_num_distinct_sensitive_values(from.num_distinct_sensitive_values());
  }
}

void RiskAnalysisOperationResult_LDiversityResult_LDiversityEquivalenceClass::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.privacy.dlp.v2beta1.RiskAnalysisOperationResult.LDiversityResult.LDiversityEquivalenceClass)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RiskAnalysisOperationResult_LDiversityResult_LDiversityEquivalenceClass::CopyFrom(const RiskAnalysisOperationResult_LDiversityResult_LDiversityEquivalenceClass& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.privacy.dlp.v2beta1.RiskAnalysisOperationResult.LDiversityResult.LDiversityEquivalenceClass)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RiskAnalysisOperationResult_LDiversityResult_LDiversityEquivalenceClass::IsInitialized() const {
  return true;
}

void RiskAnalysisOperationResult_LDiversityResult_LDiversityEquivalenceClass::Swap(RiskAnalysisOperationResult_LDiversityResult_LDiversityEquivalenceClass* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RiskAnalysisOperationResult_LDiversityResult_LDiversityEquivalenceClass::InternalSwap(RiskAnalysisOperationResult_LDiversityResult_LDiversityEquivalenceClass* other) {
  using std::swap;
  quasi_ids_values_.InternalSwap(&other->quasi_ids_values_);
  top_sensitive_values_.InternalSwap(&other->top_sensitive_values_);
  swap(equivalence_class_size_, other->equivalence_class_size_);
  swap(num_distinct_sensitive_values_, other->num_distinct_sensitive_values_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RiskAnalysisOperationResult_LDiversityResult_LDiversityEquivalenceClass::GetMetadata() const {
  protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void RiskAnalysisOperationResult_LDiversityResult_LDiversityHistogramBucket::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RiskAnalysisOperationResult_LDiversityResult_LDiversityHistogramBucket::kSensitiveValueFrequencyLowerBoundFieldNumber;
const int RiskAnalysisOperationResult_LDiversityResult_LDiversityHistogramBucket::kSensitiveValueFrequencyUpperBoundFieldNumber;
const int RiskAnalysisOperationResult_LDiversityResult_LDiversityHistogramBucket::kBucketSizeFieldNumber;
const int RiskAnalysisOperationResult_LDiversityResult_LDiversityHistogramBucket::kBucketValuesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RiskAnalysisOperationResult_LDiversityResult_LDiversityHistogramBucket::RiskAnalysisOperationResult_LDiversityResult_LDiversityHistogramBucket()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaultsRiskAnalysisOperationResult_LDiversityResult_LDiversityHistogramBucket();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.privacy.dlp.v2beta1.RiskAnalysisOperationResult.LDiversityResult.LDiversityHistogramBucket)
}
RiskAnalysisOperationResult_LDiversityResult_LDiversityHistogramBucket::RiskAnalysisOperationResult_LDiversityResult_LDiversityHistogramBucket(const RiskAnalysisOperationResult_LDiversityResult_LDiversityHistogramBucket& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      bucket_values_(from.bucket_values_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&sensitive_value_frequency_lower_bound_, &from.sensitive_value_frequency_lower_bound_,
    static_cast<size_t>(reinterpret_cast<char*>(&bucket_size_) -
    reinterpret_cast<char*>(&sensitive_value_frequency_lower_bound_)) + sizeof(bucket_size_));
  // @@protoc_insertion_point(copy_constructor:google.privacy.dlp.v2beta1.RiskAnalysisOperationResult.LDiversityResult.LDiversityHistogramBucket)
}

void RiskAnalysisOperationResult_LDiversityResult_LDiversityHistogramBucket::SharedCtor() {
  ::memset(&sensitive_value_frequency_lower_bound_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&bucket_size_) -
      reinterpret_cast<char*>(&sensitive_value_frequency_lower_bound_)) + sizeof(bucket_size_));
  _cached_size_ = 0;
}

RiskAnalysisOperationResult_LDiversityResult_LDiversityHistogramBucket::~RiskAnalysisOperationResult_LDiversityResult_LDiversityHistogramBucket() {
  // @@protoc_insertion_point(destructor:google.privacy.dlp.v2beta1.RiskAnalysisOperationResult.LDiversityResult.LDiversityHistogramBucket)
  SharedDtor();
}

void RiskAnalysisOperationResult_LDiversityResult_LDiversityHistogramBucket::SharedDtor() {
}

void RiskAnalysisOperationResult_LDiversityResult_LDiversityHistogramBucket::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RiskAnalysisOperationResult_LDiversityResult_LDiversityHistogramBucket::descriptor() {
  ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RiskAnalysisOperationResult_LDiversityResult_LDiversityHistogramBucket& RiskAnalysisOperationResult_LDiversityResult_LDiversityHistogramBucket::default_instance() {
  ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaultsRiskAnalysisOperationResult_LDiversityResult_LDiversityHistogramBucket();
  return *internal_default_instance();
}

RiskAnalysisOperationResult_LDiversityResult_LDiversityHistogramBucket* RiskAnalysisOperationResult_LDiversityResult_LDiversityHistogramBucket::New(::google::protobuf::Arena* arena) const {
  RiskAnalysisOperationResult_LDiversityResult_LDiversityHistogramBucket* n = new RiskAnalysisOperationResult_LDiversityResult_LDiversityHistogramBucket;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RiskAnalysisOperationResult_LDiversityResult_LDiversityHistogramBucket::Clear() {
// @@protoc_insertion_point(message_clear_start:google.privacy.dlp.v2beta1.RiskAnalysisOperationResult.LDiversityResult.LDiversityHistogramBucket)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  bucket_values_.Clear();
  ::memset(&sensitive_value_frequency_lower_bound_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&bucket_size_) -
      reinterpret_cast<char*>(&sensitive_value_frequency_lower_bound_)) + sizeof(bucket_size_));
  _internal_metadata_.Clear();
}

bool RiskAnalysisOperationResult_LDiversityResult_LDiversityHistogramBucket::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.privacy.dlp.v2beta1.RiskAnalysisOperationResult.LDiversityResult.LDiversityHistogramBucket)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 sensitive_value_frequency_lower_bound = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &sensitive_value_frequency_lower_bound_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 sensitive_value_frequency_upper_bound = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &sensitive_value_frequency_upper_bound_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 bucket_size = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &bucket_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .google.privacy.dlp.v2beta1.RiskAnalysisOperationResult.LDiversityResult.LDiversityEquivalenceClass bucket_values = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_bucket_values()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.privacy.dlp.v2beta1.RiskAnalysisOperationResult.LDiversityResult.LDiversityHistogramBucket)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.privacy.dlp.v2beta1.RiskAnalysisOperationResult.LDiversityResult.LDiversityHistogramBucket)
  return false;
#undef DO_
}

void RiskAnalysisOperationResult_LDiversityResult_LDiversityHistogramBucket::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.privacy.dlp.v2beta1.RiskAnalysisOperationResult.LDiversityResult.LDiversityHistogramBucket)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 sensitive_value_frequency_lower_bound = 1;
  if (this->sensitive_value_frequency_lower_bound() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->sensitive_value_frequency_lower_bound(), output);
  }

  // int64 sensitive_value_frequency_upper_bound = 2;
  if (this->sensitive_value_frequency_upper_bound() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->sensitive_value_frequency_upper_bound(), output);
  }

  // int64 bucket_size = 3;
  if (this->bucket_size() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->bucket_size(), output);
  }

  // repeated .google.privacy.dlp.v2beta1.RiskAnalysisOperationResult.LDiversityResult.LDiversityEquivalenceClass bucket_values = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->bucket_values_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->bucket_values(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:google.privacy.dlp.v2beta1.RiskAnalysisOperationResult.LDiversityResult.LDiversityHistogramBucket)
}

::google::protobuf::uint8* RiskAnalysisOperationResult_LDiversityResult_LDiversityHistogramBucket::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.privacy.dlp.v2beta1.RiskAnalysisOperationResult.LDiversityResult.LDiversityHistogramBucket)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 sensitive_value_frequency_lower_bound = 1;
  if (this->sensitive_value_frequency_lower_bound() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->sensitive_value_frequency_lower_bound(), target);
  }

  // int64 sensitive_value_frequency_upper_bound = 2;
  if (this->sensitive_value_frequency_upper_bound() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->sensitive_value_frequency_upper_bound(), target);
  }

  // int64 bucket_size = 3;
  if (this->bucket_size() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->bucket_size(), target);
  }

  // repeated .google.privacy.dlp.v2beta1.RiskAnalysisOperationResult.LDiversityResult.LDiversityEquivalenceClass bucket_values = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->bucket_values_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->bucket_values(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.privacy.dlp.v2beta1.RiskAnalysisOperationResult.LDiversityResult.LDiversityHistogramBucket)
  return target;
}

size_t RiskAnalysisOperationResult_LDiversityResult_LDiversityHistogramBucket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.privacy.dlp.v2beta1.RiskAnalysisOperationResult.LDiversityResult.LDiversityHistogramBucket)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .google.privacy.dlp.v2beta1.RiskAnalysisOperationResult.LDiversityResult.LDiversityEquivalenceClass bucket_values = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->bucket_values_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->bucket_values(static_cast<int>(i)));
    }
  }

  // int64 sensitive_value_frequency_lower_bound = 1;
  if (this->sensitive_value_frequency_lower_bound() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->sensitive_value_frequency_lower_bound());
  }

  // int64 sensitive_value_frequency_upper_bound = 2;
  if (this->sensitive_value_frequency_upper_bound() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->sensitive_value_frequency_upper_bound());
  }

  // int64 bucket_size = 3;
  if (this->bucket_size() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->bucket_size());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RiskAnalysisOperationResult_LDiversityResult_LDiversityHistogramBucket::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.privacy.dlp.v2beta1.RiskAnalysisOperationResult.LDiversityResult.LDiversityHistogramBucket)
  GOOGLE_DCHECK_NE(&from, this);
  const RiskAnalysisOperationResult_LDiversityResult_LDiversityHistogramBucket* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RiskAnalysisOperationResult_LDiversityResult_LDiversityHistogramBucket>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.privacy.dlp.v2beta1.RiskAnalysisOperationResult.LDiversityResult.LDiversityHistogramBucket)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.privacy.dlp.v2beta1.RiskAnalysisOperationResult.LDiversityResult.LDiversityHistogramBucket)
    MergeFrom(*source);
  }
}

void RiskAnalysisOperationResult_LDiversityResult_LDiversityHistogramBucket::MergeFrom(const RiskAnalysisOperationResult_LDiversityResult_LDiversityHistogramBucket& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.privacy.dlp.v2beta1.RiskAnalysisOperationResult.LDiversityResult.LDiversityHistogramBucket)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  bucket_values_.MergeFrom(from.bucket_values_);
  if (from.sensitive_value_frequency_lower_bound() != 0) {
    set_sensitive_value_frequency_lower_bound(from.sensitive_value_frequency_lower_bound());
  }
  if (from.sensitive_value_frequency_upper_bound() != 0) {
    set_sensitive_value_frequency_upper_bound(from.sensitive_value_frequency_upper_bound());
  }
  if (from.bucket_size() != 0) {
    set_bucket_size(from.bucket_size());
  }
}

void RiskAnalysisOperationResult_LDiversityResult_LDiversityHistogramBucket::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.privacy.dlp.v2beta1.RiskAnalysisOperationResult.LDiversityResult.LDiversityHistogramBucket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RiskAnalysisOperationResult_LDiversityResult_LDiversityHistogramBucket::CopyFrom(const RiskAnalysisOperationResult_LDiversityResult_LDiversityHistogramBucket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.privacy.dlp.v2beta1.RiskAnalysisOperationResult.LDiversityResult.LDiversityHistogramBucket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RiskAnalysisOperationResult_LDiversityResult_LDiversityHistogramBucket::IsInitialized() const {
  return true;
}

void RiskAnalysisOperationResult_LDiversityResult_LDiversityHistogramBucket::Swap(RiskAnalysisOperationResult_LDiversityResult_LDiversityHistogramBucket* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RiskAnalysisOperationResult_LDiversityResult_LDiversityHistogramBucket::InternalSwap(RiskAnalysisOperationResult_LDiversityResult_LDiversityHistogramBucket* other) {
  using std::swap;
  bucket_values_.InternalSwap(&other->bucket_values_);
  swap(sensitive_value_frequency_lower_bound_, other->sensitive_value_frequency_lower_bound_);
  swap(sensitive_value_frequency_upper_bound_, other->sensitive_value_frequency_upper_bound_);
  swap(bucket_size_, other->bucket_size_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RiskAnalysisOperationResult_LDiversityResult_LDiversityHistogramBucket::GetMetadata() const {
  protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void RiskAnalysisOperationResult_LDiversityResult::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RiskAnalysisOperationResult_LDiversityResult::kSensitiveValueFrequencyHistogramBucketsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RiskAnalysisOperationResult_LDiversityResult::RiskAnalysisOperationResult_LDiversityResult()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaultsRiskAnalysisOperationResult_LDiversityResult();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.privacy.dlp.v2beta1.RiskAnalysisOperationResult.LDiversityResult)
}
RiskAnalysisOperationResult_LDiversityResult::RiskAnalysisOperationResult_LDiversityResult(const RiskAnalysisOperationResult_LDiversityResult& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      sensitive_value_frequency_histogram_buckets_(from.sensitive_value_frequency_histogram_buckets_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:google.privacy.dlp.v2beta1.RiskAnalysisOperationResult.LDiversityResult)
}

void RiskAnalysisOperationResult_LDiversityResult::SharedCtor() {
  _cached_size_ = 0;
}

RiskAnalysisOperationResult_LDiversityResult::~RiskAnalysisOperationResult_LDiversityResult() {
  // @@protoc_insertion_point(destructor:google.privacy.dlp.v2beta1.RiskAnalysisOperationResult.LDiversityResult)
  SharedDtor();
}

void RiskAnalysisOperationResult_LDiversityResult::SharedDtor() {
}

void RiskAnalysisOperationResult_LDiversityResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RiskAnalysisOperationResult_LDiversityResult::descriptor() {
  ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RiskAnalysisOperationResult_LDiversityResult& RiskAnalysisOperationResult_LDiversityResult::default_instance() {
  ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaultsRiskAnalysisOperationResult_LDiversityResult();
  return *internal_default_instance();
}

RiskAnalysisOperationResult_LDiversityResult* RiskAnalysisOperationResult_LDiversityResult::New(::google::protobuf::Arena* arena) const {
  RiskAnalysisOperationResult_LDiversityResult* n = new RiskAnalysisOperationResult_LDiversityResult;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RiskAnalysisOperationResult_LDiversityResult::Clear() {
// @@protoc_insertion_point(message_clear_start:google.privacy.dlp.v2beta1.RiskAnalysisOperationResult.LDiversityResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sensitive_value_frequency_histogram_buckets_.Clear();
  _internal_metadata_.Clear();
}

bool RiskAnalysisOperationResult_LDiversityResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.privacy.dlp.v2beta1.RiskAnalysisOperationResult.LDiversityResult)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .google.privacy.dlp.v2beta1.RiskAnalysisOperationResult.LDiversityResult.LDiversityHistogramBucket sensitive_value_frequency_histogram_buckets = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_sensitive_value_frequency_histogram_buckets()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.privacy.dlp.v2beta1.RiskAnalysisOperationResult.LDiversityResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.privacy.dlp.v2beta1.RiskAnalysisOperationResult.LDiversityResult)
  return false;
#undef DO_
}

void RiskAnalysisOperationResult_LDiversityResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.privacy.dlp.v2beta1.RiskAnalysisOperationResult.LDiversityResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .google.privacy.dlp.v2beta1.RiskAnalysisOperationResult.LDiversityResult.LDiversityHistogramBucket sensitive_value_frequency_histogram_buckets = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->sensitive_value_frequency_histogram_buckets_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->sensitive_value_frequency_histogram_buckets(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:google.privacy.dlp.v2beta1.RiskAnalysisOperationResult.LDiversityResult)
}

::google::protobuf::uint8* RiskAnalysisOperationResult_LDiversityResult::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.privacy.dlp.v2beta1.RiskAnalysisOperationResult.LDiversityResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .google.privacy.dlp.v2beta1.RiskAnalysisOperationResult.LDiversityResult.LDiversityHistogramBucket sensitive_value_frequency_histogram_buckets = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->sensitive_value_frequency_histogram_buckets_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->sensitive_value_frequency_histogram_buckets(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.privacy.dlp.v2beta1.RiskAnalysisOperationResult.LDiversityResult)
  return target;
}

size_t RiskAnalysisOperationResult_LDiversityResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.privacy.dlp.v2beta1.RiskAnalysisOperationResult.LDiversityResult)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .google.privacy.dlp.v2beta1.RiskAnalysisOperationResult.LDiversityResult.LDiversityHistogramBucket sensitive_value_frequency_histogram_buckets = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->sensitive_value_frequency_histogram_buckets_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->sensitive_value_frequency_histogram_buckets(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RiskAnalysisOperationResult_LDiversityResult::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.privacy.dlp.v2beta1.RiskAnalysisOperationResult.LDiversityResult)
  GOOGLE_DCHECK_NE(&from, this);
  const RiskAnalysisOperationResult_LDiversityResult* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RiskAnalysisOperationResult_LDiversityResult>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.privacy.dlp.v2beta1.RiskAnalysisOperationResult.LDiversityResult)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.privacy.dlp.v2beta1.RiskAnalysisOperationResult.LDiversityResult)
    MergeFrom(*source);
  }
}

void RiskAnalysisOperationResult_LDiversityResult::MergeFrom(const RiskAnalysisOperationResult_LDiversityResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.privacy.dlp.v2beta1.RiskAnalysisOperationResult.LDiversityResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  sensitive_value_frequency_histogram_buckets_.MergeFrom(from.sensitive_value_frequency_histogram_buckets_);
}

void RiskAnalysisOperationResult_LDiversityResult::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.privacy.dlp.v2beta1.RiskAnalysisOperationResult.LDiversityResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RiskAnalysisOperationResult_LDiversityResult::CopyFrom(const RiskAnalysisOperationResult_LDiversityResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.privacy.dlp.v2beta1.RiskAnalysisOperationResult.LDiversityResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RiskAnalysisOperationResult_LDiversityResult::IsInitialized() const {
  return true;
}

void RiskAnalysisOperationResult_LDiversityResult::Swap(RiskAnalysisOperationResult_LDiversityResult* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RiskAnalysisOperationResult_LDiversityResult::InternalSwap(RiskAnalysisOperationResult_LDiversityResult* other) {
  using std::swap;
  sensitive_value_frequency_histogram_buckets_.InternalSwap(&other->sensitive_value_frequency_histogram_buckets_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RiskAnalysisOperationResult_LDiversityResult::GetMetadata() const {
  protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void RiskAnalysisOperationResult::InitAsDefaultInstance() {
  ::google::privacy::dlp::v2beta1::_RiskAnalysisOperationResult_default_instance_.numerical_stats_result_ = const_cast< ::google::privacy::dlp::v2beta1::RiskAnalysisOperationResult_NumericalStatsResult*>(
      ::google::privacy::dlp::v2beta1::RiskAnalysisOperationResult_NumericalStatsResult::internal_default_instance());
  ::google::privacy::dlp::v2beta1::_RiskAnalysisOperationResult_default_instance_.categorical_stats_result_ = const_cast< ::google::privacy::dlp::v2beta1::RiskAnalysisOperationResult_CategoricalStatsResult*>(
      ::google::privacy::dlp::v2beta1::RiskAnalysisOperationResult_CategoricalStatsResult::internal_default_instance());
  ::google::privacy::dlp::v2beta1::_RiskAnalysisOperationResult_default_instance_.k_anonymity_result_ = const_cast< ::google::privacy::dlp::v2beta1::RiskAnalysisOperationResult_KAnonymityResult*>(
      ::google::privacy::dlp::v2beta1::RiskAnalysisOperationResult_KAnonymityResult::internal_default_instance());
  ::google::privacy::dlp::v2beta1::_RiskAnalysisOperationResult_default_instance_.l_diversity_result_ = const_cast< ::google::privacy::dlp::v2beta1::RiskAnalysisOperationResult_LDiversityResult*>(
      ::google::privacy::dlp::v2beta1::RiskAnalysisOperationResult_LDiversityResult::internal_default_instance());
}
void RiskAnalysisOperationResult::set_allocated_numerical_stats_result(::google::privacy::dlp::v2beta1::RiskAnalysisOperationResult_NumericalStatsResult* numerical_stats_result) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_result();
  if (numerical_stats_result) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      numerical_stats_result = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, numerical_stats_result, submessage_arena);
    }
    set_has_numerical_stats_result();
    result_.numerical_stats_result_ = numerical_stats_result;
  }
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2beta1.RiskAnalysisOperationResult.numerical_stats_result)
}
void RiskAnalysisOperationResult::set_allocated_categorical_stats_result(::google::privacy::dlp::v2beta1::RiskAnalysisOperationResult_CategoricalStatsResult* categorical_stats_result) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_result();
  if (categorical_stats_result) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      categorical_stats_result = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, categorical_stats_result, submessage_arena);
    }
    set_has_categorical_stats_result();
    result_.categorical_stats_result_ = categorical_stats_result;
  }
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2beta1.RiskAnalysisOperationResult.categorical_stats_result)
}
void RiskAnalysisOperationResult::set_allocated_k_anonymity_result(::google::privacy::dlp::v2beta1::RiskAnalysisOperationResult_KAnonymityResult* k_anonymity_result) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_result();
  if (k_anonymity_result) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      k_anonymity_result = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, k_anonymity_result, submessage_arena);
    }
    set_has_k_anonymity_result();
    result_.k_anonymity_result_ = k_anonymity_result;
  }
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2beta1.RiskAnalysisOperationResult.k_anonymity_result)
}
void RiskAnalysisOperationResult::set_allocated_l_diversity_result(::google::privacy::dlp::v2beta1::RiskAnalysisOperationResult_LDiversityResult* l_diversity_result) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_result();
  if (l_diversity_result) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      l_diversity_result = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, l_diversity_result, submessage_arena);
    }
    set_has_l_diversity_result();
    result_.l_diversity_result_ = l_diversity_result;
  }
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2beta1.RiskAnalysisOperationResult.l_diversity_result)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RiskAnalysisOperationResult::kNumericalStatsResultFieldNumber;
const int RiskAnalysisOperationResult::kCategoricalStatsResultFieldNumber;
const int RiskAnalysisOperationResult::kKAnonymityResultFieldNumber;
const int RiskAnalysisOperationResult::kLDiversityResultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RiskAnalysisOperationResult::RiskAnalysisOperationResult()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaultsRiskAnalysisOperationResult();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.privacy.dlp.v2beta1.RiskAnalysisOperationResult)
}
RiskAnalysisOperationResult::RiskAnalysisOperationResult(const RiskAnalysisOperationResult& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_result();
  switch (from.result_case()) {
    case kNumericalStatsResult: {
      mutable_numerical_stats_result()->::google::privacy::dlp::v2beta1::RiskAnalysisOperationResult_NumericalStatsResult::MergeFrom(from.numerical_stats_result());
      break;
    }
    case kCategoricalStatsResult: {
      mutable_categorical_stats_result()->::google::privacy::dlp::v2beta1::RiskAnalysisOperationResult_CategoricalStatsResult::MergeFrom(from.categorical_stats_result());
      break;
    }
    case kKAnonymityResult: {
      mutable_k_anonymity_result()->::google::privacy::dlp::v2beta1::RiskAnalysisOperationResult_KAnonymityResult::MergeFrom(from.k_anonymity_result());
      break;
    }
    case kLDiversityResult: {
      mutable_l_diversity_result()->::google::privacy::dlp::v2beta1::RiskAnalysisOperationResult_LDiversityResult::MergeFrom(from.l_diversity_result());
      break;
    }
    case RESULT_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:google.privacy.dlp.v2beta1.RiskAnalysisOperationResult)
}

void RiskAnalysisOperationResult::SharedCtor() {
  clear_has_result();
  _cached_size_ = 0;
}

RiskAnalysisOperationResult::~RiskAnalysisOperationResult() {
  // @@protoc_insertion_point(destructor:google.privacy.dlp.v2beta1.RiskAnalysisOperationResult)
  SharedDtor();
}

void RiskAnalysisOperationResult::SharedDtor() {
  if (has_result()) {
    clear_result();
  }
}

void RiskAnalysisOperationResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RiskAnalysisOperationResult::descriptor() {
  ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RiskAnalysisOperationResult& RiskAnalysisOperationResult::default_instance() {
  ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaultsRiskAnalysisOperationResult();
  return *internal_default_instance();
}

RiskAnalysisOperationResult* RiskAnalysisOperationResult::New(::google::protobuf::Arena* arena) const {
  RiskAnalysisOperationResult* n = new RiskAnalysisOperationResult;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RiskAnalysisOperationResult::clear_result() {
// @@protoc_insertion_point(one_of_clear_start:google.privacy.dlp.v2beta1.RiskAnalysisOperationResult)
  switch (result_case()) {
    case kNumericalStatsResult: {
      delete result_.numerical_stats_result_;
      break;
    }
    case kCategoricalStatsResult: {
      delete result_.categorical_stats_result_;
      break;
    }
    case kKAnonymityResult: {
      delete result_.k_anonymity_result_;
      break;
    }
    case kLDiversityResult: {
      delete result_.l_diversity_result_;
      break;
    }
    case RESULT_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = RESULT_NOT_SET;
}


void RiskAnalysisOperationResult::Clear() {
// @@protoc_insertion_point(message_clear_start:google.privacy.dlp.v2beta1.RiskAnalysisOperationResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_result();
  _internal_metadata_.Clear();
}

bool RiskAnalysisOperationResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.privacy.dlp.v2beta1.RiskAnalysisOperationResult)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .google.privacy.dlp.v2beta1.RiskAnalysisOperationResult.NumericalStatsResult numerical_stats_result = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_numerical_stats_result()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.privacy.dlp.v2beta1.RiskAnalysisOperationResult.CategoricalStatsResult categorical_stats_result = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_categorical_stats_result()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.privacy.dlp.v2beta1.RiskAnalysisOperationResult.KAnonymityResult k_anonymity_result = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_k_anonymity_result()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.privacy.dlp.v2beta1.RiskAnalysisOperationResult.LDiversityResult l_diversity_result = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_l_diversity_result()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.privacy.dlp.v2beta1.RiskAnalysisOperationResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.privacy.dlp.v2beta1.RiskAnalysisOperationResult)
  return false;
#undef DO_
}

void RiskAnalysisOperationResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.privacy.dlp.v2beta1.RiskAnalysisOperationResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.privacy.dlp.v2beta1.RiskAnalysisOperationResult.NumericalStatsResult numerical_stats_result = 3;
  if (has_numerical_stats_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *result_.numerical_stats_result_, output);
  }

  // .google.privacy.dlp.v2beta1.RiskAnalysisOperationResult.CategoricalStatsResult categorical_stats_result = 4;
  if (has_categorical_stats_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *result_.categorical_stats_result_, output);
  }

  // .google.privacy.dlp.v2beta1.RiskAnalysisOperationResult.KAnonymityResult k_anonymity_result = 5;
  if (has_k_anonymity_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *result_.k_anonymity_result_, output);
  }

  // .google.privacy.dlp.v2beta1.RiskAnalysisOperationResult.LDiversityResult l_diversity_result = 6;
  if (has_l_diversity_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *result_.l_diversity_result_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:google.privacy.dlp.v2beta1.RiskAnalysisOperationResult)
}

::google::protobuf::uint8* RiskAnalysisOperationResult::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.privacy.dlp.v2beta1.RiskAnalysisOperationResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.privacy.dlp.v2beta1.RiskAnalysisOperationResult.NumericalStatsResult numerical_stats_result = 3;
  if (has_numerical_stats_result()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, *result_.numerical_stats_result_, deterministic, target);
  }

  // .google.privacy.dlp.v2beta1.RiskAnalysisOperationResult.CategoricalStatsResult categorical_stats_result = 4;
  if (has_categorical_stats_result()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, *result_.categorical_stats_result_, deterministic, target);
  }

  // .google.privacy.dlp.v2beta1.RiskAnalysisOperationResult.KAnonymityResult k_anonymity_result = 5;
  if (has_k_anonymity_result()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, *result_.k_anonymity_result_, deterministic, target);
  }

  // .google.privacy.dlp.v2beta1.RiskAnalysisOperationResult.LDiversityResult l_diversity_result = 6;
  if (has_l_diversity_result()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, *result_.l_diversity_result_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.privacy.dlp.v2beta1.RiskAnalysisOperationResult)
  return target;
}

size_t RiskAnalysisOperationResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.privacy.dlp.v2beta1.RiskAnalysisOperationResult)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  switch (result_case()) {
    // .google.privacy.dlp.v2beta1.RiskAnalysisOperationResult.NumericalStatsResult numerical_stats_result = 3;
    case kNumericalStatsResult: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *result_.numerical_stats_result_);
      break;
    }
    // .google.privacy.dlp.v2beta1.RiskAnalysisOperationResult.CategoricalStatsResult categorical_stats_result = 4;
    case kCategoricalStatsResult: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *result_.categorical_stats_result_);
      break;
    }
    // .google.privacy.dlp.v2beta1.RiskAnalysisOperationResult.KAnonymityResult k_anonymity_result = 5;
    case kKAnonymityResult: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *result_.k_anonymity_result_);
      break;
    }
    // .google.privacy.dlp.v2beta1.RiskAnalysisOperationResult.LDiversityResult l_diversity_result = 6;
    case kLDiversityResult: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *result_.l_diversity_result_);
      break;
    }
    case RESULT_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RiskAnalysisOperationResult::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.privacy.dlp.v2beta1.RiskAnalysisOperationResult)
  GOOGLE_DCHECK_NE(&from, this);
  const RiskAnalysisOperationResult* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RiskAnalysisOperationResult>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.privacy.dlp.v2beta1.RiskAnalysisOperationResult)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.privacy.dlp.v2beta1.RiskAnalysisOperationResult)
    MergeFrom(*source);
  }
}

void RiskAnalysisOperationResult::MergeFrom(const RiskAnalysisOperationResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.privacy.dlp.v2beta1.RiskAnalysisOperationResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.result_case()) {
    case kNumericalStatsResult: {
      mutable_numerical_stats_result()->::google::privacy::dlp::v2beta1::RiskAnalysisOperationResult_NumericalStatsResult::MergeFrom(from.numerical_stats_result());
      break;
    }
    case kCategoricalStatsResult: {
      mutable_categorical_stats_result()->::google::privacy::dlp::v2beta1::RiskAnalysisOperationResult_CategoricalStatsResult::MergeFrom(from.categorical_stats_result());
      break;
    }
    case kKAnonymityResult: {
      mutable_k_anonymity_result()->::google::privacy::dlp::v2beta1::RiskAnalysisOperationResult_KAnonymityResult::MergeFrom(from.k_anonymity_result());
      break;
    }
    case kLDiversityResult: {
      mutable_l_diversity_result()->::google::privacy::dlp::v2beta1::RiskAnalysisOperationResult_LDiversityResult::MergeFrom(from.l_diversity_result());
      break;
    }
    case RESULT_NOT_SET: {
      break;
    }
  }
}

void RiskAnalysisOperationResult::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.privacy.dlp.v2beta1.RiskAnalysisOperationResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RiskAnalysisOperationResult::CopyFrom(const RiskAnalysisOperationResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.privacy.dlp.v2beta1.RiskAnalysisOperationResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RiskAnalysisOperationResult::IsInitialized() const {
  return true;
}

void RiskAnalysisOperationResult::Swap(RiskAnalysisOperationResult* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RiskAnalysisOperationResult::InternalSwap(RiskAnalysisOperationResult* other) {
  using std::swap;
  swap(result_, other->result_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RiskAnalysisOperationResult::GetMetadata() const {
  protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ValueFrequency::InitAsDefaultInstance() {
  ::google::privacy::dlp::v2beta1::_ValueFrequency_default_instance_._instance.get_mutable()->value_ = const_cast< ::google::privacy::dlp::v2beta1::Value*>(
      ::google::privacy::dlp::v2beta1::Value::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ValueFrequency::kValueFieldNumber;
const int ValueFrequency::kCountFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ValueFrequency::ValueFrequency()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaultsValueFrequency();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.privacy.dlp.v2beta1.ValueFrequency)
}
ValueFrequency::ValueFrequency(const ValueFrequency& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_value()) {
    value_ = new ::google::privacy::dlp::v2beta1::Value(*from.value_);
  } else {
    value_ = NULL;
  }
  count_ = from.count_;
  // @@protoc_insertion_point(copy_constructor:google.privacy.dlp.v2beta1.ValueFrequency)
}

void ValueFrequency::SharedCtor() {
  ::memset(&value_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&count_) -
      reinterpret_cast<char*>(&value_)) + sizeof(count_));
  _cached_size_ = 0;
}

ValueFrequency::~ValueFrequency() {
  // @@protoc_insertion_point(destructor:google.privacy.dlp.v2beta1.ValueFrequency)
  SharedDtor();
}

void ValueFrequency::SharedDtor() {
  if (this != internal_default_instance()) delete value_;
}

void ValueFrequency::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ValueFrequency::descriptor() {
  ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ValueFrequency& ValueFrequency::default_instance() {
  ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaultsValueFrequency();
  return *internal_default_instance();
}

ValueFrequency* ValueFrequency::New(::google::protobuf::Arena* arena) const {
  ValueFrequency* n = new ValueFrequency;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ValueFrequency::Clear() {
// @@protoc_insertion_point(message_clear_start:google.privacy.dlp.v2beta1.ValueFrequency)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && value_ != NULL) {
    delete value_;
  }
  value_ = NULL;
  count_ = GOOGLE_LONGLONG(0);
  _internal_metadata_.Clear();
}

bool ValueFrequency::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.privacy.dlp.v2beta1.ValueFrequency)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .google.privacy.dlp.v2beta1.Value value = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_value()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 count = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.privacy.dlp.v2beta1.ValueFrequency)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.privacy.dlp.v2beta1.ValueFrequency)
  return false;
#undef DO_
}

void ValueFrequency::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.privacy.dlp.v2beta1.ValueFrequency)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.privacy.dlp.v2beta1.Value value = 1;
  if (this->has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->value_, output);
  }

  // int64 count = 2;
  if (this->count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->count(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:google.privacy.dlp.v2beta1.ValueFrequency)
}

::google::protobuf::uint8* ValueFrequency::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.privacy.dlp.v2beta1.ValueFrequency)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.privacy.dlp.v2beta1.Value value = 1;
  if (this->has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->value_, deterministic, target);
  }

  // int64 count = 2;
  if (this->count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->count(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.privacy.dlp.v2beta1.ValueFrequency)
  return target;
}

size_t ValueFrequency::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.privacy.dlp.v2beta1.ValueFrequency)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .google.privacy.dlp.v2beta1.Value value = 1;
  if (this->has_value()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->value_);
  }

  // int64 count = 2;
  if (this->count() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->count());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ValueFrequency::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.privacy.dlp.v2beta1.ValueFrequency)
  GOOGLE_DCHECK_NE(&from, this);
  const ValueFrequency* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ValueFrequency>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.privacy.dlp.v2beta1.ValueFrequency)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.privacy.dlp.v2beta1.ValueFrequency)
    MergeFrom(*source);
  }
}

void ValueFrequency::MergeFrom(const ValueFrequency& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.privacy.dlp.v2beta1.ValueFrequency)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_value()) {
    mutable_value()->::google::privacy::dlp::v2beta1::Value::MergeFrom(from.value());
  }
  if (from.count() != 0) {
    set_count(from.count());
  }
}

void ValueFrequency::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.privacy.dlp.v2beta1.ValueFrequency)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ValueFrequency::CopyFrom(const ValueFrequency& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.privacy.dlp.v2beta1.ValueFrequency)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ValueFrequency::IsInitialized() const {
  return true;
}

void ValueFrequency::Swap(ValueFrequency* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ValueFrequency::InternalSwap(ValueFrequency* other) {
  using std::swap;
  swap(value_, other->value_);
  swap(count_, other->count_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ValueFrequency::GetMetadata() const {
  protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Value::InitAsDefaultInstance() {
  ::google::privacy::dlp::v2beta1::_Value_default_instance_.integer_value_ = GOOGLE_LONGLONG(0);
  ::google::privacy::dlp::v2beta1::_Value_default_instance_.float_value_ = 0;
  ::google::privacy::dlp::v2beta1::_Value_default_instance_.string_value_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::google::privacy::dlp::v2beta1::_Value_default_instance_.boolean_value_ = false;
  ::google::privacy::dlp::v2beta1::_Value_default_instance_.timestamp_value_ = const_cast< ::google::protobuf::Timestamp*>(
      ::google::protobuf::Timestamp::internal_default_instance());
  ::google::privacy::dlp::v2beta1::_Value_default_instance_.time_value_ = const_cast< ::google::type::TimeOfDay*>(
      ::google::type::TimeOfDay::internal_default_instance());
  ::google::privacy::dlp::v2beta1::_Value_default_instance_.date_value_ = const_cast< ::google::type::Date*>(
      ::google::type::Date::internal_default_instance());
}
void Value::set_allocated_timestamp_value(::google::protobuf::Timestamp* timestamp_value) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_type();
  if (timestamp_value) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast< ::google::protobuf::MessageLite*>(timestamp_value)->GetArena();
    if (message_arena != submessage_arena) {
      timestamp_value = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, timestamp_value, submessage_arena);
    }
    set_has_timestamp_value();
    type_.timestamp_value_ = timestamp_value;
  }
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2beta1.Value.timestamp_value)
}
void Value::clear_timestamp_value() {
  if (has_timestamp_value()) {
    delete type_.timestamp_value_;
    clear_has_type();
  }
}
void Value::set_allocated_time_value(::google::type::TimeOfDay* time_value) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_type();
  if (time_value) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      time_value = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, time_value, submessage_arena);
    }
    set_has_time_value();
    type_.time_value_ = time_value;
  }
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2beta1.Value.time_value)
}
void Value::clear_time_value() {
  if (has_time_value()) {
    delete type_.time_value_;
    clear_has_type();
  }
}
void Value::set_allocated_date_value(::google::type::Date* date_value) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_type();
  if (date_value) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast< ::google::protobuf::MessageLite*>(date_value)->GetArena();
    if (message_arena != submessage_arena) {
      date_value = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, date_value, submessage_arena);
    }
    set_has_date_value();
    type_.date_value_ = date_value;
  }
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2beta1.Value.date_value)
}
void Value::clear_date_value() {
  if (has_date_value()) {
    delete type_.date_value_;
    clear_has_type();
  }
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Value::kIntegerValueFieldNumber;
const int Value::kFloatValueFieldNumber;
const int Value::kStringValueFieldNumber;
const int Value::kBooleanValueFieldNumber;
const int Value::kTimestampValueFieldNumber;
const int Value::kTimeValueFieldNumber;
const int Value::kDateValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Value::Value()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaultsValue();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.privacy.dlp.v2beta1.Value)
}
Value::Value(const Value& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_type();
  switch (from.type_case()) {
    case kIntegerValue: {
      set_integer_value(from.integer_value());
      break;
    }
    case kFloatValue: {
      set_float_value(from.float_value());
      break;
    }
    case kStringValue: {
      set_string_value(from.string_value());
      break;
    }
    case kBooleanValue: {
      set_boolean_value(from.boolean_value());
      break;
    }
    case kTimestampValue: {
      mutable_timestamp_value()->::google::protobuf::Timestamp::MergeFrom(from.timestamp_value());
      break;
    }
    case kTimeValue: {
      mutable_time_value()->::google::type::TimeOfDay::MergeFrom(from.time_value());
      break;
    }
    case kDateValue: {
      mutable_date_value()->::google::type::Date::MergeFrom(from.date_value());
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:google.privacy.dlp.v2beta1.Value)
}

void Value::SharedCtor() {
  clear_has_type();
  _cached_size_ = 0;
}

Value::~Value() {
  // @@protoc_insertion_point(destructor:google.privacy.dlp.v2beta1.Value)
  SharedDtor();
}

void Value::SharedDtor() {
  if (has_type()) {
    clear_type();
  }
}

void Value::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Value::descriptor() {
  ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Value& Value::default_instance() {
  ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaultsValue();
  return *internal_default_instance();
}

Value* Value::New(::google::protobuf::Arena* arena) const {
  Value* n = new Value;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Value::clear_type() {
// @@protoc_insertion_point(one_of_clear_start:google.privacy.dlp.v2beta1.Value)
  switch (type_case()) {
    case kIntegerValue: {
      // No need to clear
      break;
    }
    case kFloatValue: {
      // No need to clear
      break;
    }
    case kStringValue: {
      type_.string_value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case kBooleanValue: {
      // No need to clear
      break;
    }
    case kTimestampValue: {
      delete type_.timestamp_value_;
      break;
    }
    case kTimeValue: {
      delete type_.time_value_;
      break;
    }
    case kDateValue: {
      delete type_.date_value_;
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = TYPE_NOT_SET;
}


void Value::Clear() {
// @@protoc_insertion_point(message_clear_start:google.privacy.dlp.v2beta1.Value)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_type();
  _internal_metadata_.Clear();
}

bool Value::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.privacy.dlp.v2beta1.Value)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 integer_value = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          clear_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &type_.integer_value_)));
          set_has_integer_value();
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double float_value = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {
          clear_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &type_.float_value_)));
          set_has_float_value();
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string string_value = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_string_value()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->string_value().data(), static_cast<int>(this->string_value().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.privacy.dlp.v2beta1.Value.string_value"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool boolean_value = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          clear_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &type_.boolean_value_)));
          set_has_boolean_value();
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Timestamp timestamp_value = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_timestamp_value()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.type.TimeOfDay time_value = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_time_value()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.type.Date date_value = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_date_value()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.privacy.dlp.v2beta1.Value)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.privacy.dlp.v2beta1.Value)
  return false;
#undef DO_
}

void Value::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.privacy.dlp.v2beta1.Value)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 integer_value = 1;
  if (has_integer_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->integer_value(), output);
  }

  // double float_value = 2;
  if (has_float_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->float_value(), output);
  }

  // string string_value = 3;
  if (has_string_value()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->string_value().data(), static_cast<int>(this->string_value().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.privacy.dlp.v2beta1.Value.string_value");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->string_value(), output);
  }

  // bool boolean_value = 4;
  if (has_boolean_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->boolean_value(), output);
  }

  // .google.protobuf.Timestamp timestamp_value = 5;
  if (has_timestamp_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *type_.timestamp_value_, output);
  }

  // .google.type.TimeOfDay time_value = 6;
  if (has_time_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *type_.time_value_, output);
  }

  // .google.type.Date date_value = 7;
  if (has_date_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *type_.date_value_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:google.privacy.dlp.v2beta1.Value)
}

::google::protobuf::uint8* Value::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.privacy.dlp.v2beta1.Value)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 integer_value = 1;
  if (has_integer_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->integer_value(), target);
  }

  // double float_value = 2;
  if (has_float_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->float_value(), target);
  }

  // string string_value = 3;
  if (has_string_value()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->string_value().data(), static_cast<int>(this->string_value().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.privacy.dlp.v2beta1.Value.string_value");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->string_value(), target);
  }

  // bool boolean_value = 4;
  if (has_boolean_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->boolean_value(), target);
  }

  // .google.protobuf.Timestamp timestamp_value = 5;
  if (has_timestamp_value()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, *type_.timestamp_value_, deterministic, target);
  }

  // .google.type.TimeOfDay time_value = 6;
  if (has_time_value()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, *type_.time_value_, deterministic, target);
  }

  // .google.type.Date date_value = 7;
  if (has_date_value()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, *type_.date_value_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.privacy.dlp.v2beta1.Value)
  return target;
}

size_t Value::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.privacy.dlp.v2beta1.Value)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  switch (type_case()) {
    // int64 integer_value = 1;
    case kIntegerValue: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->integer_value());
      break;
    }
    // double float_value = 2;
    case kFloatValue: {
      total_size += 1 + 8;
      break;
    }
    // string string_value = 3;
    case kStringValue: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->string_value());
      break;
    }
    // bool boolean_value = 4;
    case kBooleanValue: {
      total_size += 1 + 1;
      break;
    }
    // .google.protobuf.Timestamp timestamp_value = 5;
    case kTimestampValue: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *type_.timestamp_value_);
      break;
    }
    // .google.type.TimeOfDay time_value = 6;
    case kTimeValue: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *type_.time_value_);
      break;
    }
    // .google.type.Date date_value = 7;
    case kDateValue: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *type_.date_value_);
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Value::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.privacy.dlp.v2beta1.Value)
  GOOGLE_DCHECK_NE(&from, this);
  const Value* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Value>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.privacy.dlp.v2beta1.Value)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.privacy.dlp.v2beta1.Value)
    MergeFrom(*source);
  }
}

void Value::MergeFrom(const Value& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.privacy.dlp.v2beta1.Value)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.type_case()) {
    case kIntegerValue: {
      set_integer_value(from.integer_value());
      break;
    }
    case kFloatValue: {
      set_float_value(from.float_value());
      break;
    }
    case kStringValue: {
      set_string_value(from.string_value());
      break;
    }
    case kBooleanValue: {
      set_boolean_value(from.boolean_value());
      break;
    }
    case kTimestampValue: {
      mutable_timestamp_value()->::google::protobuf::Timestamp::MergeFrom(from.timestamp_value());
      break;
    }
    case kTimeValue: {
      mutable_time_value()->::google::type::TimeOfDay::MergeFrom(from.time_value());
      break;
    }
    case kDateValue: {
      mutable_date_value()->::google::type::Date::MergeFrom(from.date_value());
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
}

void Value::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.privacy.dlp.v2beta1.Value)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Value::CopyFrom(const Value& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.privacy.dlp.v2beta1.Value)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Value::IsInitialized() const {
  return true;
}

void Value::Swap(Value* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Value::InternalSwap(Value* other) {
  using std::swap;
  swap(type_, other->type_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Value::GetMetadata() const {
  protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void DeidentifyConfig::InitAsDefaultInstance() {
  ::google::privacy::dlp::v2beta1::_DeidentifyConfig_default_instance_.info_type_transformations_ = const_cast< ::google::privacy::dlp::v2beta1::InfoTypeTransformations*>(
      ::google::privacy::dlp::v2beta1::InfoTypeTransformations::internal_default_instance());
  ::google::privacy::dlp::v2beta1::_DeidentifyConfig_default_instance_.record_transformations_ = const_cast< ::google::privacy::dlp::v2beta1::RecordTransformations*>(
      ::google::privacy::dlp::v2beta1::RecordTransformations::internal_default_instance());
}
void DeidentifyConfig::set_allocated_info_type_transformations(::google::privacy::dlp::v2beta1::InfoTypeTransformations* info_type_transformations) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_transformation();
  if (info_type_transformations) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      info_type_transformations = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, info_type_transformations, submessage_arena);
    }
    set_has_info_type_transformations();
    transformation_.info_type_transformations_ = info_type_transformations;
  }
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2beta1.DeidentifyConfig.info_type_transformations)
}
void DeidentifyConfig::set_allocated_record_transformations(::google::privacy::dlp::v2beta1::RecordTransformations* record_transformations) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_transformation();
  if (record_transformations) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      record_transformations = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, record_transformations, submessage_arena);
    }
    set_has_record_transformations();
    transformation_.record_transformations_ = record_transformations;
  }
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2beta1.DeidentifyConfig.record_transformations)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DeidentifyConfig::kInfoTypeTransformationsFieldNumber;
const int DeidentifyConfig::kRecordTransformationsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DeidentifyConfig::DeidentifyConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaultsDeidentifyConfig();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.privacy.dlp.v2beta1.DeidentifyConfig)
}
DeidentifyConfig::DeidentifyConfig(const DeidentifyConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_transformation();
  switch (from.transformation_case()) {
    case kInfoTypeTransformations: {
      mutable_info_type_transformations()->::google::privacy::dlp::v2beta1::InfoTypeTransformations::MergeFrom(from.info_type_transformations());
      break;
    }
    case kRecordTransformations: {
      mutable_record_transformations()->::google::privacy::dlp::v2beta1::RecordTransformations::MergeFrom(from.record_transformations());
      break;
    }
    case TRANSFORMATION_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:google.privacy.dlp.v2beta1.DeidentifyConfig)
}

void DeidentifyConfig::SharedCtor() {
  clear_has_transformation();
  _cached_size_ = 0;
}

DeidentifyConfig::~DeidentifyConfig() {
  // @@protoc_insertion_point(destructor:google.privacy.dlp.v2beta1.DeidentifyConfig)
  SharedDtor();
}

void DeidentifyConfig::SharedDtor() {
  if (has_transformation()) {
    clear_transformation();
  }
}

void DeidentifyConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DeidentifyConfig::descriptor() {
  ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DeidentifyConfig& DeidentifyConfig::default_instance() {
  ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaultsDeidentifyConfig();
  return *internal_default_instance();
}

DeidentifyConfig* DeidentifyConfig::New(::google::protobuf::Arena* arena) const {
  DeidentifyConfig* n = new DeidentifyConfig;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DeidentifyConfig::clear_transformation() {
// @@protoc_insertion_point(one_of_clear_start:google.privacy.dlp.v2beta1.DeidentifyConfig)
  switch (transformation_case()) {
    case kInfoTypeTransformations: {
      delete transformation_.info_type_transformations_;
      break;
    }
    case kRecordTransformations: {
      delete transformation_.record_transformations_;
      break;
    }
    case TRANSFORMATION_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = TRANSFORMATION_NOT_SET;
}


void DeidentifyConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:google.privacy.dlp.v2beta1.DeidentifyConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_transformation();
  _internal_metadata_.Clear();
}

bool DeidentifyConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.privacy.dlp.v2beta1.DeidentifyConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .google.privacy.dlp.v2beta1.InfoTypeTransformations info_type_transformations = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_info_type_transformations()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.privacy.dlp.v2beta1.RecordTransformations record_transformations = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_record_transformations()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.privacy.dlp.v2beta1.DeidentifyConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.privacy.dlp.v2beta1.DeidentifyConfig)
  return false;
#undef DO_
}

void DeidentifyConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.privacy.dlp.v2beta1.DeidentifyConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.privacy.dlp.v2beta1.InfoTypeTransformations info_type_transformations = 1;
  if (has_info_type_transformations()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *transformation_.info_type_transformations_, output);
  }

  // .google.privacy.dlp.v2beta1.RecordTransformations record_transformations = 2;
  if (has_record_transformations()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *transformation_.record_transformations_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:google.privacy.dlp.v2beta1.DeidentifyConfig)
}

::google::protobuf::uint8* DeidentifyConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.privacy.dlp.v2beta1.DeidentifyConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.privacy.dlp.v2beta1.InfoTypeTransformations info_type_transformations = 1;
  if (has_info_type_transformations()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *transformation_.info_type_transformations_, deterministic, target);
  }

  // .google.privacy.dlp.v2beta1.RecordTransformations record_transformations = 2;
  if (has_record_transformations()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, *transformation_.record_transformations_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.privacy.dlp.v2beta1.DeidentifyConfig)
  return target;
}

size_t DeidentifyConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.privacy.dlp.v2beta1.DeidentifyConfig)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  switch (transformation_case()) {
    // .google.privacy.dlp.v2beta1.InfoTypeTransformations info_type_transformations = 1;
    case kInfoTypeTransformations: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *transformation_.info_type_transformations_);
      break;
    }
    // .google.privacy.dlp.v2beta1.RecordTransformations record_transformations = 2;
    case kRecordTransformations: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *transformation_.record_transformations_);
      break;
    }
    case TRANSFORMATION_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeidentifyConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.privacy.dlp.v2beta1.DeidentifyConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const DeidentifyConfig* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DeidentifyConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.privacy.dlp.v2beta1.DeidentifyConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.privacy.dlp.v2beta1.DeidentifyConfig)
    MergeFrom(*source);
  }
}

void DeidentifyConfig::MergeFrom(const DeidentifyConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.privacy.dlp.v2beta1.DeidentifyConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.transformation_case()) {
    case kInfoTypeTransformations: {
      mutable_info_type_transformations()->::google::privacy::dlp::v2beta1::InfoTypeTransformations::MergeFrom(from.info_type_transformations());
      break;
    }
    case kRecordTransformations: {
      mutable_record_transformations()->::google::privacy::dlp::v2beta1::RecordTransformations::MergeFrom(from.record_transformations());
      break;
    }
    case TRANSFORMATION_NOT_SET: {
      break;
    }
  }
}

void DeidentifyConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.privacy.dlp.v2beta1.DeidentifyConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeidentifyConfig::CopyFrom(const DeidentifyConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.privacy.dlp.v2beta1.DeidentifyConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeidentifyConfig::IsInitialized() const {
  return true;
}

void DeidentifyConfig::Swap(DeidentifyConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DeidentifyConfig::InternalSwap(DeidentifyConfig* other) {
  using std::swap;
  swap(transformation_, other->transformation_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DeidentifyConfig::GetMetadata() const {
  protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void PrimitiveTransformation::InitAsDefaultInstance() {
  ::google::privacy::dlp::v2beta1::_PrimitiveTransformation_default_instance_.replace_config_ = const_cast< ::google::privacy::dlp::v2beta1::ReplaceValueConfig*>(
      ::google::privacy::dlp::v2beta1::ReplaceValueConfig::internal_default_instance());
  ::google::privacy::dlp::v2beta1::_PrimitiveTransformation_default_instance_.redact_config_ = const_cast< ::google::privacy::dlp::v2beta1::RedactConfig*>(
      ::google::privacy::dlp::v2beta1::RedactConfig::internal_default_instance());
  ::google::privacy::dlp::v2beta1::_PrimitiveTransformation_default_instance_.character_mask_config_ = const_cast< ::google::privacy::dlp::v2beta1::CharacterMaskConfig*>(
      ::google::privacy::dlp::v2beta1::CharacterMaskConfig::internal_default_instance());
  ::google::privacy::dlp::v2beta1::_PrimitiveTransformation_default_instance_.crypto_replace_ffx_fpe_config_ = const_cast< ::google::privacy::dlp::v2beta1::CryptoReplaceFfxFpeConfig*>(
      ::google::privacy::dlp::v2beta1::CryptoReplaceFfxFpeConfig::internal_default_instance());
  ::google::privacy::dlp::v2beta1::_PrimitiveTransformation_default_instance_.fixed_size_bucketing_config_ = const_cast< ::google::privacy::dlp::v2beta1::FixedSizeBucketingConfig*>(
      ::google::privacy::dlp::v2beta1::FixedSizeBucketingConfig::internal_default_instance());
  ::google::privacy::dlp::v2beta1::_PrimitiveTransformation_default_instance_.bucketing_config_ = const_cast< ::google::privacy::dlp::v2beta1::BucketingConfig*>(
      ::google::privacy::dlp::v2beta1::BucketingConfig::internal_default_instance());
  ::google::privacy::dlp::v2beta1::_PrimitiveTransformation_default_instance_.replace_with_info_type_config_ = const_cast< ::google::privacy::dlp::v2beta1::ReplaceWithInfoTypeConfig*>(
      ::google::privacy::dlp::v2beta1::ReplaceWithInfoTypeConfig::internal_default_instance());
  ::google::privacy::dlp::v2beta1::_PrimitiveTransformation_default_instance_.time_part_config_ = const_cast< ::google::privacy::dlp::v2beta1::TimePartConfig*>(
      ::google::privacy::dlp::v2beta1::TimePartConfig::internal_default_instance());
  ::google::privacy::dlp::v2beta1::_PrimitiveTransformation_default_instance_.crypto_hash_config_ = const_cast< ::google::privacy::dlp::v2beta1::CryptoHashConfig*>(
      ::google::privacy::dlp::v2beta1::CryptoHashConfig::internal_default_instance());
}
void PrimitiveTransformation::set_allocated_replace_config(::google::privacy::dlp::v2beta1::ReplaceValueConfig* replace_config) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_transformation();
  if (replace_config) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      replace_config = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, replace_config, submessage_arena);
    }
    set_has_replace_config();
    transformation_.replace_config_ = replace_config;
  }
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2beta1.PrimitiveTransformation.replace_config)
}
void PrimitiveTransformation::set_allocated_redact_config(::google::privacy::dlp::v2beta1::RedactConfig* redact_config) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_transformation();
  if (redact_config) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      redact_config = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, redact_config, submessage_arena);
    }
    set_has_redact_config();
    transformation_.redact_config_ = redact_config;
  }
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2beta1.PrimitiveTransformation.redact_config)
}
void PrimitiveTransformation::set_allocated_character_mask_config(::google::privacy::dlp::v2beta1::CharacterMaskConfig* character_mask_config) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_transformation();
  if (character_mask_config) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      character_mask_config = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, character_mask_config, submessage_arena);
    }
    set_has_character_mask_config();
    transformation_.character_mask_config_ = character_mask_config;
  }
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2beta1.PrimitiveTransformation.character_mask_config)
}
void PrimitiveTransformation::set_allocated_crypto_replace_ffx_fpe_config(::google::privacy::dlp::v2beta1::CryptoReplaceFfxFpeConfig* crypto_replace_ffx_fpe_config) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_transformation();
  if (crypto_replace_ffx_fpe_config) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      crypto_replace_ffx_fpe_config = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, crypto_replace_ffx_fpe_config, submessage_arena);
    }
    set_has_crypto_replace_ffx_fpe_config();
    transformation_.crypto_replace_ffx_fpe_config_ = crypto_replace_ffx_fpe_config;
  }
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2beta1.PrimitiveTransformation.crypto_replace_ffx_fpe_config)
}
void PrimitiveTransformation::set_allocated_fixed_size_bucketing_config(::google::privacy::dlp::v2beta1::FixedSizeBucketingConfig* fixed_size_bucketing_config) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_transformation();
  if (fixed_size_bucketing_config) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      fixed_size_bucketing_config = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, fixed_size_bucketing_config, submessage_arena);
    }
    set_has_fixed_size_bucketing_config();
    transformation_.fixed_size_bucketing_config_ = fixed_size_bucketing_config;
  }
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2beta1.PrimitiveTransformation.fixed_size_bucketing_config)
}
void PrimitiveTransformation::set_allocated_bucketing_config(::google::privacy::dlp::v2beta1::BucketingConfig* bucketing_config) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_transformation();
  if (bucketing_config) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      bucketing_config = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, bucketing_config, submessage_arena);
    }
    set_has_bucketing_config();
    transformation_.bucketing_config_ = bucketing_config;
  }
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2beta1.PrimitiveTransformation.bucketing_config)
}
void PrimitiveTransformation::set_allocated_replace_with_info_type_config(::google::privacy::dlp::v2beta1::ReplaceWithInfoTypeConfig* replace_with_info_type_config) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_transformation();
  if (replace_with_info_type_config) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      replace_with_info_type_config = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, replace_with_info_type_config, submessage_arena);
    }
    set_has_replace_with_info_type_config();
    transformation_.replace_with_info_type_config_ = replace_with_info_type_config;
  }
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2beta1.PrimitiveTransformation.replace_with_info_type_config)
}
void PrimitiveTransformation::set_allocated_time_part_config(::google::privacy::dlp::v2beta1::TimePartConfig* time_part_config) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_transformation();
  if (time_part_config) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      time_part_config = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, time_part_config, submessage_arena);
    }
    set_has_time_part_config();
    transformation_.time_part_config_ = time_part_config;
  }
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2beta1.PrimitiveTransformation.time_part_config)
}
void PrimitiveTransformation::set_allocated_crypto_hash_config(::google::privacy::dlp::v2beta1::CryptoHashConfig* crypto_hash_config) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_transformation();
  if (crypto_hash_config) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      crypto_hash_config = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, crypto_hash_config, submessage_arena);
    }
    set_has_crypto_hash_config();
    transformation_.crypto_hash_config_ = crypto_hash_config;
  }
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2beta1.PrimitiveTransformation.crypto_hash_config)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PrimitiveTransformation::kReplaceConfigFieldNumber;
const int PrimitiveTransformation::kRedactConfigFieldNumber;
const int PrimitiveTransformation::kCharacterMaskConfigFieldNumber;
const int PrimitiveTransformation::kCryptoReplaceFfxFpeConfigFieldNumber;
const int PrimitiveTransformation::kFixedSizeBucketingConfigFieldNumber;
const int PrimitiveTransformation::kBucketingConfigFieldNumber;
const int PrimitiveTransformation::kReplaceWithInfoTypeConfigFieldNumber;
const int PrimitiveTransformation::kTimePartConfigFieldNumber;
const int PrimitiveTransformation::kCryptoHashConfigFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PrimitiveTransformation::PrimitiveTransformation()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaultsPrimitiveTransformation();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.privacy.dlp.v2beta1.PrimitiveTransformation)
}
PrimitiveTransformation::PrimitiveTransformation(const PrimitiveTransformation& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_transformation();
  switch (from.transformation_case()) {
    case kReplaceConfig: {
      mutable_replace_config()->::google::privacy::dlp::v2beta1::ReplaceValueConfig::MergeFrom(from.replace_config());
      break;
    }
    case kRedactConfig: {
      mutable_redact_config()->::google::privacy::dlp::v2beta1::RedactConfig::MergeFrom(from.redact_config());
      break;
    }
    case kCharacterMaskConfig: {
      mutable_character_mask_config()->::google::privacy::dlp::v2beta1::CharacterMaskConfig::MergeFrom(from.character_mask_config());
      break;
    }
    case kCryptoReplaceFfxFpeConfig: {
      mutable_crypto_replace_ffx_fpe_config()->::google::privacy::dlp::v2beta1::CryptoReplaceFfxFpeConfig::MergeFrom(from.crypto_replace_ffx_fpe_config());
      break;
    }
    case kFixedSizeBucketingConfig: {
      mutable_fixed_size_bucketing_config()->::google::privacy::dlp::v2beta1::FixedSizeBucketingConfig::MergeFrom(from.fixed_size_bucketing_config());
      break;
    }
    case kBucketingConfig: {
      mutable_bucketing_config()->::google::privacy::dlp::v2beta1::BucketingConfig::MergeFrom(from.bucketing_config());
      break;
    }
    case kReplaceWithInfoTypeConfig: {
      mutable_replace_with_info_type_config()->::google::privacy::dlp::v2beta1::ReplaceWithInfoTypeConfig::MergeFrom(from.replace_with_info_type_config());
      break;
    }
    case kTimePartConfig: {
      mutable_time_part_config()->::google::privacy::dlp::v2beta1::TimePartConfig::MergeFrom(from.time_part_config());
      break;
    }
    case kCryptoHashConfig: {
      mutable_crypto_hash_config()->::google::privacy::dlp::v2beta1::CryptoHashConfig::MergeFrom(from.crypto_hash_config());
      break;
    }
    case TRANSFORMATION_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:google.privacy.dlp.v2beta1.PrimitiveTransformation)
}

void PrimitiveTransformation::SharedCtor() {
  clear_has_transformation();
  _cached_size_ = 0;
}

PrimitiveTransformation::~PrimitiveTransformation() {
  // @@protoc_insertion_point(destructor:google.privacy.dlp.v2beta1.PrimitiveTransformation)
  SharedDtor();
}

void PrimitiveTransformation::SharedDtor() {
  if (has_transformation()) {
    clear_transformation();
  }
}

void PrimitiveTransformation::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PrimitiveTransformation::descriptor() {
  ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PrimitiveTransformation& PrimitiveTransformation::default_instance() {
  ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaultsPrimitiveTransformation();
  return *internal_default_instance();
}

PrimitiveTransformation* PrimitiveTransformation::New(::google::protobuf::Arena* arena) const {
  PrimitiveTransformation* n = new PrimitiveTransformation;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PrimitiveTransformation::clear_transformation() {
// @@protoc_insertion_point(one_of_clear_start:google.privacy.dlp.v2beta1.PrimitiveTransformation)
  switch (transformation_case()) {
    case kReplaceConfig: {
      delete transformation_.replace_config_;
      break;
    }
    case kRedactConfig: {
      delete transformation_.redact_config_;
      break;
    }
    case kCharacterMaskConfig: {
      delete transformation_.character_mask_config_;
      break;
    }
    case kCryptoReplaceFfxFpeConfig: {
      delete transformation_.crypto_replace_ffx_fpe_config_;
      break;
    }
    case kFixedSizeBucketingConfig: {
      delete transformation_.fixed_size_bucketing_config_;
      break;
    }
    case kBucketingConfig: {
      delete transformation_.bucketing_config_;
      break;
    }
    case kReplaceWithInfoTypeConfig: {
      delete transformation_.replace_with_info_type_config_;
      break;
    }
    case kTimePartConfig: {
      delete transformation_.time_part_config_;
      break;
    }
    case kCryptoHashConfig: {
      delete transformation_.crypto_hash_config_;
      break;
    }
    case TRANSFORMATION_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = TRANSFORMATION_NOT_SET;
}


void PrimitiveTransformation::Clear() {
// @@protoc_insertion_point(message_clear_start:google.privacy.dlp.v2beta1.PrimitiveTransformation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_transformation();
  _internal_metadata_.Clear();
}

bool PrimitiveTransformation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.privacy.dlp.v2beta1.PrimitiveTransformation)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .google.privacy.dlp.v2beta1.ReplaceValueConfig replace_config = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_replace_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.privacy.dlp.v2beta1.RedactConfig redact_config = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_redact_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.privacy.dlp.v2beta1.CharacterMaskConfig character_mask_config = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_character_mask_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.privacy.dlp.v2beta1.CryptoReplaceFfxFpeConfig crypto_replace_ffx_fpe_config = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_crypto_replace_ffx_fpe_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.privacy.dlp.v2beta1.FixedSizeBucketingConfig fixed_size_bucketing_config = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_fixed_size_bucketing_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.privacy.dlp.v2beta1.BucketingConfig bucketing_config = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_bucketing_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.privacy.dlp.v2beta1.ReplaceWithInfoTypeConfig replace_with_info_type_config = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_replace_with_info_type_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.privacy.dlp.v2beta1.TimePartConfig time_part_config = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_time_part_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.privacy.dlp.v2beta1.CryptoHashConfig crypto_hash_config = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_crypto_hash_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.privacy.dlp.v2beta1.PrimitiveTransformation)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.privacy.dlp.v2beta1.PrimitiveTransformation)
  return false;
#undef DO_
}

void PrimitiveTransformation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.privacy.dlp.v2beta1.PrimitiveTransformation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.privacy.dlp.v2beta1.ReplaceValueConfig replace_config = 1;
  if (has_replace_config()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *transformation_.replace_config_, output);
  }

  // .google.privacy.dlp.v2beta1.RedactConfig redact_config = 2;
  if (has_redact_config()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *transformation_.redact_config_, output);
  }

  // .google.privacy.dlp.v2beta1.CharacterMaskConfig character_mask_config = 3;
  if (has_character_mask_config()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *transformation_.character_mask_config_, output);
  }

  // .google.privacy.dlp.v2beta1.CryptoReplaceFfxFpeConfig crypto_replace_ffx_fpe_config = 4;
  if (has_crypto_replace_ffx_fpe_config()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *transformation_.crypto_replace_ffx_fpe_config_, output);
  }

  // .google.privacy.dlp.v2beta1.FixedSizeBucketingConfig fixed_size_bucketing_config = 5;
  if (has_fixed_size_bucketing_config()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *transformation_.fixed_size_bucketing_config_, output);
  }

  // .google.privacy.dlp.v2beta1.BucketingConfig bucketing_config = 6;
  if (has_bucketing_config()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *transformation_.bucketing_config_, output);
  }

  // .google.privacy.dlp.v2beta1.ReplaceWithInfoTypeConfig replace_with_info_type_config = 7;
  if (has_replace_with_info_type_config()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *transformation_.replace_with_info_type_config_, output);
  }

  // .google.privacy.dlp.v2beta1.TimePartConfig time_part_config = 8;
  if (has_time_part_config()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, *transformation_.time_part_config_, output);
  }

  // .google.privacy.dlp.v2beta1.CryptoHashConfig crypto_hash_config = 9;
  if (has_crypto_hash_config()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, *transformation_.crypto_hash_config_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:google.privacy.dlp.v2beta1.PrimitiveTransformation)
}

::google::protobuf::uint8* PrimitiveTransformation::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.privacy.dlp.v2beta1.PrimitiveTransformation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.privacy.dlp.v2beta1.ReplaceValueConfig replace_config = 1;
  if (has_replace_config()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *transformation_.replace_config_, deterministic, target);
  }

  // .google.privacy.dlp.v2beta1.RedactConfig redact_config = 2;
  if (has_redact_config()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, *transformation_.redact_config_, deterministic, target);
  }

  // .google.privacy.dlp.v2beta1.CharacterMaskConfig character_mask_config = 3;
  if (has_character_mask_config()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, *transformation_.character_mask_config_, deterministic, target);
  }

  // .google.privacy.dlp.v2beta1.CryptoReplaceFfxFpeConfig crypto_replace_ffx_fpe_config = 4;
  if (has_crypto_replace_ffx_fpe_config()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, *transformation_.crypto_replace_ffx_fpe_config_, deterministic, target);
  }

  // .google.privacy.dlp.v2beta1.FixedSizeBucketingConfig fixed_size_bucketing_config = 5;
  if (has_fixed_size_bucketing_config()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, *transformation_.fixed_size_bucketing_config_, deterministic, target);
  }

  // .google.privacy.dlp.v2beta1.BucketingConfig bucketing_config = 6;
  if (has_bucketing_config()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, *transformation_.bucketing_config_, deterministic, target);
  }

  // .google.privacy.dlp.v2beta1.ReplaceWithInfoTypeConfig replace_with_info_type_config = 7;
  if (has_replace_with_info_type_config()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, *transformation_.replace_with_info_type_config_, deterministic, target);
  }

  // .google.privacy.dlp.v2beta1.TimePartConfig time_part_config = 8;
  if (has_time_part_config()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, *transformation_.time_part_config_, deterministic, target);
  }

  // .google.privacy.dlp.v2beta1.CryptoHashConfig crypto_hash_config = 9;
  if (has_crypto_hash_config()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        9, *transformation_.crypto_hash_config_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.privacy.dlp.v2beta1.PrimitiveTransformation)
  return target;
}

size_t PrimitiveTransformation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.privacy.dlp.v2beta1.PrimitiveTransformation)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  switch (transformation_case()) {
    // .google.privacy.dlp.v2beta1.ReplaceValueConfig replace_config = 1;
    case kReplaceConfig: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *transformation_.replace_config_);
      break;
    }
    // .google.privacy.dlp.v2beta1.RedactConfig redact_config = 2;
    case kRedactConfig: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *transformation_.redact_config_);
      break;
    }
    // .google.privacy.dlp.v2beta1.CharacterMaskConfig character_mask_config = 3;
    case kCharacterMaskConfig: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *transformation_.character_mask_config_);
      break;
    }
    // .google.privacy.dlp.v2beta1.CryptoReplaceFfxFpeConfig crypto_replace_ffx_fpe_config = 4;
    case kCryptoReplaceFfxFpeConfig: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *transformation_.crypto_replace_ffx_fpe_config_);
      break;
    }
    // .google.privacy.dlp.v2beta1.FixedSizeBucketingConfig fixed_size_bucketing_config = 5;
    case kFixedSizeBucketingConfig: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *transformation_.fixed_size_bucketing_config_);
      break;
    }
    // .google.privacy.dlp.v2beta1.BucketingConfig bucketing_config = 6;
    case kBucketingConfig: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *transformation_.bucketing_config_);
      break;
    }
    // .google.privacy.dlp.v2beta1.ReplaceWithInfoTypeConfig replace_with_info_type_config = 7;
    case kReplaceWithInfoTypeConfig: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *transformation_.replace_with_info_type_config_);
      break;
    }
    // .google.privacy.dlp.v2beta1.TimePartConfig time_part_config = 8;
    case kTimePartConfig: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *transformation_.time_part_config_);
      break;
    }
    // .google.privacy.dlp.v2beta1.CryptoHashConfig crypto_hash_config = 9;
    case kCryptoHashConfig: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *transformation_.crypto_hash_config_);
      break;
    }
    case TRANSFORMATION_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PrimitiveTransformation::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.privacy.dlp.v2beta1.PrimitiveTransformation)
  GOOGLE_DCHECK_NE(&from, this);
  const PrimitiveTransformation* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PrimitiveTransformation>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.privacy.dlp.v2beta1.PrimitiveTransformation)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.privacy.dlp.v2beta1.PrimitiveTransformation)
    MergeFrom(*source);
  }
}

void PrimitiveTransformation::MergeFrom(const PrimitiveTransformation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.privacy.dlp.v2beta1.PrimitiveTransformation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.transformation_case()) {
    case kReplaceConfig: {
      mutable_replace_config()->::google::privacy::dlp::v2beta1::ReplaceValueConfig::MergeFrom(from.replace_config());
      break;
    }
    case kRedactConfig: {
      mutable_redact_config()->::google::privacy::dlp::v2beta1::RedactConfig::MergeFrom(from.redact_config());
      break;
    }
    case kCharacterMaskConfig: {
      mutable_character_mask_config()->::google::privacy::dlp::v2beta1::CharacterMaskConfig::MergeFrom(from.character_mask_config());
      break;
    }
    case kCryptoReplaceFfxFpeConfig: {
      mutable_crypto_replace_ffx_fpe_config()->::google::privacy::dlp::v2beta1::CryptoReplaceFfxFpeConfig::MergeFrom(from.crypto_replace_ffx_fpe_config());
      break;
    }
    case kFixedSizeBucketingConfig: {
      mutable_fixed_size_bucketing_config()->::google::privacy::dlp::v2beta1::FixedSizeBucketingConfig::MergeFrom(from.fixed_size_bucketing_config());
      break;
    }
    case kBucketingConfig: {
      mutable_bucketing_config()->::google::privacy::dlp::v2beta1::BucketingConfig::MergeFrom(from.bucketing_config());
      break;
    }
    case kReplaceWithInfoTypeConfig: {
      mutable_replace_with_info_type_config()->::google::privacy::dlp::v2beta1::ReplaceWithInfoTypeConfig::MergeFrom(from.replace_with_info_type_config());
      break;
    }
    case kTimePartConfig: {
      mutable_time_part_config()->::google::privacy::dlp::v2beta1::TimePartConfig::MergeFrom(from.time_part_config());
      break;
    }
    case kCryptoHashConfig: {
      mutable_crypto_hash_config()->::google::privacy::dlp::v2beta1::CryptoHashConfig::MergeFrom(from.crypto_hash_config());
      break;
    }
    case TRANSFORMATION_NOT_SET: {
      break;
    }
  }
}

void PrimitiveTransformation::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.privacy.dlp.v2beta1.PrimitiveTransformation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PrimitiveTransformation::CopyFrom(const PrimitiveTransformation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.privacy.dlp.v2beta1.PrimitiveTransformation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PrimitiveTransformation::IsInitialized() const {
  return true;
}

void PrimitiveTransformation::Swap(PrimitiveTransformation* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PrimitiveTransformation::InternalSwap(PrimitiveTransformation* other) {
  using std::swap;
  swap(transformation_, other->transformation_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PrimitiveTransformation::GetMetadata() const {
  protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void TimePartConfig::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TimePartConfig::kPartToExtractFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TimePartConfig::TimePartConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaultsTimePartConfig();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.privacy.dlp.v2beta1.TimePartConfig)
}
TimePartConfig::TimePartConfig(const TimePartConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  part_to_extract_ = from.part_to_extract_;
  // @@protoc_insertion_point(copy_constructor:google.privacy.dlp.v2beta1.TimePartConfig)
}

void TimePartConfig::SharedCtor() {
  part_to_extract_ = 0;
  _cached_size_ = 0;
}

TimePartConfig::~TimePartConfig() {
  // @@protoc_insertion_point(destructor:google.privacy.dlp.v2beta1.TimePartConfig)
  SharedDtor();
}

void TimePartConfig::SharedDtor() {
}

void TimePartConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TimePartConfig::descriptor() {
  ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TimePartConfig& TimePartConfig::default_instance() {
  ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaultsTimePartConfig();
  return *internal_default_instance();
}

TimePartConfig* TimePartConfig::New(::google::protobuf::Arena* arena) const {
  TimePartConfig* n = new TimePartConfig;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TimePartConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:google.privacy.dlp.v2beta1.TimePartConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  part_to_extract_ = 0;
  _internal_metadata_.Clear();
}

bool TimePartConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.privacy.dlp.v2beta1.TimePartConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .google.privacy.dlp.v2beta1.TimePartConfig.TimePart part_to_extract = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_part_to_extract(static_cast< ::google::privacy::dlp::v2beta1::TimePartConfig_TimePart >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.privacy.dlp.v2beta1.TimePartConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.privacy.dlp.v2beta1.TimePartConfig)
  return false;
#undef DO_
}

void TimePartConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.privacy.dlp.v2beta1.TimePartConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.privacy.dlp.v2beta1.TimePartConfig.TimePart part_to_extract = 1;
  if (this->part_to_extract() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->part_to_extract(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:google.privacy.dlp.v2beta1.TimePartConfig)
}

::google::protobuf::uint8* TimePartConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.privacy.dlp.v2beta1.TimePartConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.privacy.dlp.v2beta1.TimePartConfig.TimePart part_to_extract = 1;
  if (this->part_to_extract() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->part_to_extract(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.privacy.dlp.v2beta1.TimePartConfig)
  return target;
}

size_t TimePartConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.privacy.dlp.v2beta1.TimePartConfig)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .google.privacy.dlp.v2beta1.TimePartConfig.TimePart part_to_extract = 1;
  if (this->part_to_extract() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->part_to_extract());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TimePartConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.privacy.dlp.v2beta1.TimePartConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const TimePartConfig* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TimePartConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.privacy.dlp.v2beta1.TimePartConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.privacy.dlp.v2beta1.TimePartConfig)
    MergeFrom(*source);
  }
}

void TimePartConfig::MergeFrom(const TimePartConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.privacy.dlp.v2beta1.TimePartConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.part_to_extract() != 0) {
    set_part_to_extract(from.part_to_extract());
  }
}

void TimePartConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.privacy.dlp.v2beta1.TimePartConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TimePartConfig::CopyFrom(const TimePartConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.privacy.dlp.v2beta1.TimePartConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TimePartConfig::IsInitialized() const {
  return true;
}

void TimePartConfig::Swap(TimePartConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TimePartConfig::InternalSwap(TimePartConfig* other) {
  using std::swap;
  swap(part_to_extract_, other->part_to_extract_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TimePartConfig::GetMetadata() const {
  protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CryptoHashConfig::InitAsDefaultInstance() {
  ::google::privacy::dlp::v2beta1::_CryptoHashConfig_default_instance_._instance.get_mutable()->crypto_key_ = const_cast< ::google::privacy::dlp::v2beta1::CryptoKey*>(
      ::google::privacy::dlp::v2beta1::CryptoKey::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CryptoHashConfig::kCryptoKeyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CryptoHashConfig::CryptoHashConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaultsCryptoHashConfig();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.privacy.dlp.v2beta1.CryptoHashConfig)
}
CryptoHashConfig::CryptoHashConfig(const CryptoHashConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_crypto_key()) {
    crypto_key_ = new ::google::privacy::dlp::v2beta1::CryptoKey(*from.crypto_key_);
  } else {
    crypto_key_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:google.privacy.dlp.v2beta1.CryptoHashConfig)
}

void CryptoHashConfig::SharedCtor() {
  crypto_key_ = NULL;
  _cached_size_ = 0;
}

CryptoHashConfig::~CryptoHashConfig() {
  // @@protoc_insertion_point(destructor:google.privacy.dlp.v2beta1.CryptoHashConfig)
  SharedDtor();
}

void CryptoHashConfig::SharedDtor() {
  if (this != internal_default_instance()) delete crypto_key_;
}

void CryptoHashConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CryptoHashConfig::descriptor() {
  ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CryptoHashConfig& CryptoHashConfig::default_instance() {
  ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaultsCryptoHashConfig();
  return *internal_default_instance();
}

CryptoHashConfig* CryptoHashConfig::New(::google::protobuf::Arena* arena) const {
  CryptoHashConfig* n = new CryptoHashConfig;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CryptoHashConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:google.privacy.dlp.v2beta1.CryptoHashConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && crypto_key_ != NULL) {
    delete crypto_key_;
  }
  crypto_key_ = NULL;
  _internal_metadata_.Clear();
}

bool CryptoHashConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.privacy.dlp.v2beta1.CryptoHashConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .google.privacy.dlp.v2beta1.CryptoKey crypto_key = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_crypto_key()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.privacy.dlp.v2beta1.CryptoHashConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.privacy.dlp.v2beta1.CryptoHashConfig)
  return false;
#undef DO_
}

void CryptoHashConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.privacy.dlp.v2beta1.CryptoHashConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.privacy.dlp.v2beta1.CryptoKey crypto_key = 1;
  if (this->has_crypto_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->crypto_key_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:google.privacy.dlp.v2beta1.CryptoHashConfig)
}

::google::protobuf::uint8* CryptoHashConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.privacy.dlp.v2beta1.CryptoHashConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.privacy.dlp.v2beta1.CryptoKey crypto_key = 1;
  if (this->has_crypto_key()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->crypto_key_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.privacy.dlp.v2beta1.CryptoHashConfig)
  return target;
}

size_t CryptoHashConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.privacy.dlp.v2beta1.CryptoHashConfig)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .google.privacy.dlp.v2beta1.CryptoKey crypto_key = 1;
  if (this->has_crypto_key()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->crypto_key_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CryptoHashConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.privacy.dlp.v2beta1.CryptoHashConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const CryptoHashConfig* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CryptoHashConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.privacy.dlp.v2beta1.CryptoHashConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.privacy.dlp.v2beta1.CryptoHashConfig)
    MergeFrom(*source);
  }
}

void CryptoHashConfig::MergeFrom(const CryptoHashConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.privacy.dlp.v2beta1.CryptoHashConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_crypto_key()) {
    mutable_crypto_key()->::google::privacy::dlp::v2beta1::CryptoKey::MergeFrom(from.crypto_key());
  }
}

void CryptoHashConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.privacy.dlp.v2beta1.CryptoHashConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CryptoHashConfig::CopyFrom(const CryptoHashConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.privacy.dlp.v2beta1.CryptoHashConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CryptoHashConfig::IsInitialized() const {
  return true;
}

void CryptoHashConfig::Swap(CryptoHashConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CryptoHashConfig::InternalSwap(CryptoHashConfig* other) {
  using std::swap;
  swap(crypto_key_, other->crypto_key_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CryptoHashConfig::GetMetadata() const {
  protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ReplaceValueConfig::InitAsDefaultInstance() {
  ::google::privacy::dlp::v2beta1::_ReplaceValueConfig_default_instance_._instance.get_mutable()->new_value_ = const_cast< ::google::privacy::dlp::v2beta1::Value*>(
      ::google::privacy::dlp::v2beta1::Value::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReplaceValueConfig::kNewValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReplaceValueConfig::ReplaceValueConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaultsReplaceValueConfig();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.privacy.dlp.v2beta1.ReplaceValueConfig)
}
ReplaceValueConfig::ReplaceValueConfig(const ReplaceValueConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_new_value()) {
    new_value_ = new ::google::privacy::dlp::v2beta1::Value(*from.new_value_);
  } else {
    new_value_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:google.privacy.dlp.v2beta1.ReplaceValueConfig)
}

void ReplaceValueConfig::SharedCtor() {
  new_value_ = NULL;
  _cached_size_ = 0;
}

ReplaceValueConfig::~ReplaceValueConfig() {
  // @@protoc_insertion_point(destructor:google.privacy.dlp.v2beta1.ReplaceValueConfig)
  SharedDtor();
}

void ReplaceValueConfig::SharedDtor() {
  if (this != internal_default_instance()) delete new_value_;
}

void ReplaceValueConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReplaceValueConfig::descriptor() {
  ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ReplaceValueConfig& ReplaceValueConfig::default_instance() {
  ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaultsReplaceValueConfig();
  return *internal_default_instance();
}

ReplaceValueConfig* ReplaceValueConfig::New(::google::protobuf::Arena* arena) const {
  ReplaceValueConfig* n = new ReplaceValueConfig;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ReplaceValueConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:google.privacy.dlp.v2beta1.ReplaceValueConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && new_value_ != NULL) {
    delete new_value_;
  }
  new_value_ = NULL;
  _internal_metadata_.Clear();
}

bool ReplaceValueConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.privacy.dlp.v2beta1.ReplaceValueConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .google.privacy.dlp.v2beta1.Value new_value = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_new_value()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.privacy.dlp.v2beta1.ReplaceValueConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.privacy.dlp.v2beta1.ReplaceValueConfig)
  return false;
#undef DO_
}

void ReplaceValueConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.privacy.dlp.v2beta1.ReplaceValueConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.privacy.dlp.v2beta1.Value new_value = 1;
  if (this->has_new_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->new_value_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:google.privacy.dlp.v2beta1.ReplaceValueConfig)
}

::google::protobuf::uint8* ReplaceValueConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.privacy.dlp.v2beta1.ReplaceValueConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.privacy.dlp.v2beta1.Value new_value = 1;
  if (this->has_new_value()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->new_value_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.privacy.dlp.v2beta1.ReplaceValueConfig)
  return target;
}

size_t ReplaceValueConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.privacy.dlp.v2beta1.ReplaceValueConfig)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .google.privacy.dlp.v2beta1.Value new_value = 1;
  if (this->has_new_value()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->new_value_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReplaceValueConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.privacy.dlp.v2beta1.ReplaceValueConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const ReplaceValueConfig* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ReplaceValueConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.privacy.dlp.v2beta1.ReplaceValueConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.privacy.dlp.v2beta1.ReplaceValueConfig)
    MergeFrom(*source);
  }
}

void ReplaceValueConfig::MergeFrom(const ReplaceValueConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.privacy.dlp.v2beta1.ReplaceValueConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_new_value()) {
    mutable_new_value()->::google::privacy::dlp::v2beta1::Value::MergeFrom(from.new_value());
  }
}

void ReplaceValueConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.privacy.dlp.v2beta1.ReplaceValueConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReplaceValueConfig::CopyFrom(const ReplaceValueConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.privacy.dlp.v2beta1.ReplaceValueConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReplaceValueConfig::IsInitialized() const {
  return true;
}

void ReplaceValueConfig::Swap(ReplaceValueConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReplaceValueConfig::InternalSwap(ReplaceValueConfig* other) {
  using std::swap;
  swap(new_value_, other->new_value_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ReplaceValueConfig::GetMetadata() const {
  protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ReplaceWithInfoTypeConfig::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReplaceWithInfoTypeConfig::ReplaceWithInfoTypeConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaultsReplaceWithInfoTypeConfig();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.privacy.dlp.v2beta1.ReplaceWithInfoTypeConfig)
}
ReplaceWithInfoTypeConfig::ReplaceWithInfoTypeConfig(const ReplaceWithInfoTypeConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:google.privacy.dlp.v2beta1.ReplaceWithInfoTypeConfig)
}

void ReplaceWithInfoTypeConfig::SharedCtor() {
  _cached_size_ = 0;
}

ReplaceWithInfoTypeConfig::~ReplaceWithInfoTypeConfig() {
  // @@protoc_insertion_point(destructor:google.privacy.dlp.v2beta1.ReplaceWithInfoTypeConfig)
  SharedDtor();
}

void ReplaceWithInfoTypeConfig::SharedDtor() {
}

void ReplaceWithInfoTypeConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReplaceWithInfoTypeConfig::descriptor() {
  ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ReplaceWithInfoTypeConfig& ReplaceWithInfoTypeConfig::default_instance() {
  ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaultsReplaceWithInfoTypeConfig();
  return *internal_default_instance();
}

ReplaceWithInfoTypeConfig* ReplaceWithInfoTypeConfig::New(::google::protobuf::Arena* arena) const {
  ReplaceWithInfoTypeConfig* n = new ReplaceWithInfoTypeConfig;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ReplaceWithInfoTypeConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:google.privacy.dlp.v2beta1.ReplaceWithInfoTypeConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

bool ReplaceWithInfoTypeConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.privacy.dlp.v2beta1.ReplaceWithInfoTypeConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:google.privacy.dlp.v2beta1.ReplaceWithInfoTypeConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.privacy.dlp.v2beta1.ReplaceWithInfoTypeConfig)
  return false;
#undef DO_
}

void ReplaceWithInfoTypeConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.privacy.dlp.v2beta1.ReplaceWithInfoTypeConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:google.privacy.dlp.v2beta1.ReplaceWithInfoTypeConfig)
}

::google::protobuf::uint8* ReplaceWithInfoTypeConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.privacy.dlp.v2beta1.ReplaceWithInfoTypeConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.privacy.dlp.v2beta1.ReplaceWithInfoTypeConfig)
  return target;
}

size_t ReplaceWithInfoTypeConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.privacy.dlp.v2beta1.ReplaceWithInfoTypeConfig)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReplaceWithInfoTypeConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.privacy.dlp.v2beta1.ReplaceWithInfoTypeConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const ReplaceWithInfoTypeConfig* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ReplaceWithInfoTypeConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.privacy.dlp.v2beta1.ReplaceWithInfoTypeConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.privacy.dlp.v2beta1.ReplaceWithInfoTypeConfig)
    MergeFrom(*source);
  }
}

void ReplaceWithInfoTypeConfig::MergeFrom(const ReplaceWithInfoTypeConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.privacy.dlp.v2beta1.ReplaceWithInfoTypeConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void ReplaceWithInfoTypeConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.privacy.dlp.v2beta1.ReplaceWithInfoTypeConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReplaceWithInfoTypeConfig::CopyFrom(const ReplaceWithInfoTypeConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.privacy.dlp.v2beta1.ReplaceWithInfoTypeConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReplaceWithInfoTypeConfig::IsInitialized() const {
  return true;
}

void ReplaceWithInfoTypeConfig::Swap(ReplaceWithInfoTypeConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReplaceWithInfoTypeConfig::InternalSwap(ReplaceWithInfoTypeConfig* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ReplaceWithInfoTypeConfig::GetMetadata() const {
  protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void RedactConfig::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RedactConfig::RedactConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaultsRedactConfig();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.privacy.dlp.v2beta1.RedactConfig)
}
RedactConfig::RedactConfig(const RedactConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:google.privacy.dlp.v2beta1.RedactConfig)
}

void RedactConfig::SharedCtor() {
  _cached_size_ = 0;
}

RedactConfig::~RedactConfig() {
  // @@protoc_insertion_point(destructor:google.privacy.dlp.v2beta1.RedactConfig)
  SharedDtor();
}

void RedactConfig::SharedDtor() {
}

void RedactConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RedactConfig::descriptor() {
  ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RedactConfig& RedactConfig::default_instance() {
  ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaultsRedactConfig();
  return *internal_default_instance();
}

RedactConfig* RedactConfig::New(::google::protobuf::Arena* arena) const {
  RedactConfig* n = new RedactConfig;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RedactConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:google.privacy.dlp.v2beta1.RedactConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

bool RedactConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.privacy.dlp.v2beta1.RedactConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:google.privacy.dlp.v2beta1.RedactConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.privacy.dlp.v2beta1.RedactConfig)
  return false;
#undef DO_
}

void RedactConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.privacy.dlp.v2beta1.RedactConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:google.privacy.dlp.v2beta1.RedactConfig)
}

::google::protobuf::uint8* RedactConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.privacy.dlp.v2beta1.RedactConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.privacy.dlp.v2beta1.RedactConfig)
  return target;
}

size_t RedactConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.privacy.dlp.v2beta1.RedactConfig)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RedactConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.privacy.dlp.v2beta1.RedactConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const RedactConfig* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RedactConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.privacy.dlp.v2beta1.RedactConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.privacy.dlp.v2beta1.RedactConfig)
    MergeFrom(*source);
  }
}

void RedactConfig::MergeFrom(const RedactConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.privacy.dlp.v2beta1.RedactConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void RedactConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.privacy.dlp.v2beta1.RedactConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RedactConfig::CopyFrom(const RedactConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.privacy.dlp.v2beta1.RedactConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RedactConfig::IsInitialized() const {
  return true;
}

void RedactConfig::Swap(RedactConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RedactConfig::InternalSwap(RedactConfig* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RedactConfig::GetMetadata() const {
  protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CharsToIgnore::InitAsDefaultInstance() {
  ::google::privacy::dlp::v2beta1::_CharsToIgnore_default_instance_.characters_to_skip_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::google::privacy::dlp::v2beta1::_CharsToIgnore_default_instance_.common_characters_to_ignore_ = 0;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CharsToIgnore::kCharactersToSkipFieldNumber;
const int CharsToIgnore::kCommonCharactersToIgnoreFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CharsToIgnore::CharsToIgnore()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaultsCharsToIgnore();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.privacy.dlp.v2beta1.CharsToIgnore)
}
CharsToIgnore::CharsToIgnore(const CharsToIgnore& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_characters();
  switch (from.characters_case()) {
    case kCharactersToSkip: {
      set_characters_to_skip(from.characters_to_skip());
      break;
    }
    case kCommonCharactersToIgnore: {
      set_common_characters_to_ignore(from.common_characters_to_ignore());
      break;
    }
    case CHARACTERS_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:google.privacy.dlp.v2beta1.CharsToIgnore)
}

void CharsToIgnore::SharedCtor() {
  clear_has_characters();
  _cached_size_ = 0;
}

CharsToIgnore::~CharsToIgnore() {
  // @@protoc_insertion_point(destructor:google.privacy.dlp.v2beta1.CharsToIgnore)
  SharedDtor();
}

void CharsToIgnore::SharedDtor() {
  if (has_characters()) {
    clear_characters();
  }
}

void CharsToIgnore::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CharsToIgnore::descriptor() {
  ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CharsToIgnore& CharsToIgnore::default_instance() {
  ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaultsCharsToIgnore();
  return *internal_default_instance();
}

CharsToIgnore* CharsToIgnore::New(::google::protobuf::Arena* arena) const {
  CharsToIgnore* n = new CharsToIgnore;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CharsToIgnore::clear_characters() {
// @@protoc_insertion_point(one_of_clear_start:google.privacy.dlp.v2beta1.CharsToIgnore)
  switch (characters_case()) {
    case kCharactersToSkip: {
      characters_.characters_to_skip_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case kCommonCharactersToIgnore: {
      // No need to clear
      break;
    }
    case CHARACTERS_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = CHARACTERS_NOT_SET;
}


void CharsToIgnore::Clear() {
// @@protoc_insertion_point(message_clear_start:google.privacy.dlp.v2beta1.CharsToIgnore)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_characters();
  _internal_metadata_.Clear();
}

bool CharsToIgnore::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.privacy.dlp.v2beta1.CharsToIgnore)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string characters_to_skip = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_characters_to_skip()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->characters_to_skip().data(), static_cast<int>(this->characters_to_skip().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.privacy.dlp.v2beta1.CharsToIgnore.characters_to_skip"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.privacy.dlp.v2beta1.CharsToIgnore.CharacterGroup common_characters_to_ignore = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_common_characters_to_ignore(static_cast< ::google::privacy::dlp::v2beta1::CharsToIgnore_CharacterGroup >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.privacy.dlp.v2beta1.CharsToIgnore)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.privacy.dlp.v2beta1.CharsToIgnore)
  return false;
#undef DO_
}

void CharsToIgnore::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.privacy.dlp.v2beta1.CharsToIgnore)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string characters_to_skip = 1;
  if (has_characters_to_skip()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->characters_to_skip().data(), static_cast<int>(this->characters_to_skip().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.privacy.dlp.v2beta1.CharsToIgnore.characters_to_skip");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->characters_to_skip(), output);
  }

  // .google.privacy.dlp.v2beta1.CharsToIgnore.CharacterGroup common_characters_to_ignore = 2;
  if (has_common_characters_to_ignore()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->common_characters_to_ignore(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:google.privacy.dlp.v2beta1.CharsToIgnore)
}

::google::protobuf::uint8* CharsToIgnore::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.privacy.dlp.v2beta1.CharsToIgnore)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string characters_to_skip = 1;
  if (has_characters_to_skip()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->characters_to_skip().data(), static_cast<int>(this->characters_to_skip().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.privacy.dlp.v2beta1.CharsToIgnore.characters_to_skip");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->characters_to_skip(), target);
  }

  // .google.privacy.dlp.v2beta1.CharsToIgnore.CharacterGroup common_characters_to_ignore = 2;
  if (has_common_characters_to_ignore()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->common_characters_to_ignore(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.privacy.dlp.v2beta1.CharsToIgnore)
  return target;
}

size_t CharsToIgnore::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.privacy.dlp.v2beta1.CharsToIgnore)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  switch (characters_case()) {
    // string characters_to_skip = 1;
    case kCharactersToSkip: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->characters_to_skip());
      break;
    }
    // .google.privacy.dlp.v2beta1.CharsToIgnore.CharacterGroup common_characters_to_ignore = 2;
    case kCommonCharactersToIgnore: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->common_characters_to_ignore());
      break;
    }
    case CHARACTERS_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CharsToIgnore::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.privacy.dlp.v2beta1.CharsToIgnore)
  GOOGLE_DCHECK_NE(&from, this);
  const CharsToIgnore* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CharsToIgnore>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.privacy.dlp.v2beta1.CharsToIgnore)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.privacy.dlp.v2beta1.CharsToIgnore)
    MergeFrom(*source);
  }
}

void CharsToIgnore::MergeFrom(const CharsToIgnore& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.privacy.dlp.v2beta1.CharsToIgnore)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.characters_case()) {
    case kCharactersToSkip: {
      set_characters_to_skip(from.characters_to_skip());
      break;
    }
    case kCommonCharactersToIgnore: {
      set_common_characters_to_ignore(from.common_characters_to_ignore());
      break;
    }
    case CHARACTERS_NOT_SET: {
      break;
    }
  }
}

void CharsToIgnore::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.privacy.dlp.v2beta1.CharsToIgnore)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CharsToIgnore::CopyFrom(const CharsToIgnore& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.privacy.dlp.v2beta1.CharsToIgnore)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CharsToIgnore::IsInitialized() const {
  return true;
}

void CharsToIgnore::Swap(CharsToIgnore* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CharsToIgnore::InternalSwap(CharsToIgnore* other) {
  using std::swap;
  swap(characters_, other->characters_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CharsToIgnore::GetMetadata() const {
  protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CharacterMaskConfig::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CharacterMaskConfig::kMaskingCharacterFieldNumber;
const int CharacterMaskConfig::kNumberToMaskFieldNumber;
const int CharacterMaskConfig::kReverseOrderFieldNumber;
const int CharacterMaskConfig::kCharactersToIgnoreFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CharacterMaskConfig::CharacterMaskConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaultsCharacterMaskConfig();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.privacy.dlp.v2beta1.CharacterMaskConfig)
}
CharacterMaskConfig::CharacterMaskConfig(const CharacterMaskConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      characters_to_ignore_(from.characters_to_ignore_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  masking_character_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.masking_character().size() > 0) {
    masking_character_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.masking_character_);
  }
  ::memcpy(&number_to_mask_, &from.number_to_mask_,
    static_cast<size_t>(reinterpret_cast<char*>(&reverse_order_) -
    reinterpret_cast<char*>(&number_to_mask_)) + sizeof(reverse_order_));
  // @@protoc_insertion_point(copy_constructor:google.privacy.dlp.v2beta1.CharacterMaskConfig)
}

void CharacterMaskConfig::SharedCtor() {
  masking_character_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&number_to_mask_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&reverse_order_) -
      reinterpret_cast<char*>(&number_to_mask_)) + sizeof(reverse_order_));
  _cached_size_ = 0;
}

CharacterMaskConfig::~CharacterMaskConfig() {
  // @@protoc_insertion_point(destructor:google.privacy.dlp.v2beta1.CharacterMaskConfig)
  SharedDtor();
}

void CharacterMaskConfig::SharedDtor() {
  masking_character_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CharacterMaskConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CharacterMaskConfig::descriptor() {
  ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CharacterMaskConfig& CharacterMaskConfig::default_instance() {
  ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaultsCharacterMaskConfig();
  return *internal_default_instance();
}

CharacterMaskConfig* CharacterMaskConfig::New(::google::protobuf::Arena* arena) const {
  CharacterMaskConfig* n = new CharacterMaskConfig;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CharacterMaskConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:google.privacy.dlp.v2beta1.CharacterMaskConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  characters_to_ignore_.Clear();
  masking_character_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&number_to_mask_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&reverse_order_) -
      reinterpret_cast<char*>(&number_to_mask_)) + sizeof(reverse_order_));
  _internal_metadata_.Clear();
}

bool CharacterMaskConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.privacy.dlp.v2beta1.CharacterMaskConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string masking_character = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_masking_character()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->masking_character().data(), static_cast<int>(this->masking_character().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.privacy.dlp.v2beta1.CharacterMaskConfig.masking_character"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 number_to_mask = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &number_to_mask_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool reverse_order = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &reverse_order_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .google.privacy.dlp.v2beta1.CharsToIgnore characters_to_ignore = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_characters_to_ignore()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.privacy.dlp.v2beta1.CharacterMaskConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.privacy.dlp.v2beta1.CharacterMaskConfig)
  return false;
#undef DO_
}

void CharacterMaskConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.privacy.dlp.v2beta1.CharacterMaskConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string masking_character = 1;
  if (this->masking_character().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->masking_character().data(), static_cast<int>(this->masking_character().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.privacy.dlp.v2beta1.CharacterMaskConfig.masking_character");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->masking_character(), output);
  }

  // int32 number_to_mask = 2;
  if (this->number_to_mask() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->number_to_mask(), output);
  }

  // bool reverse_order = 3;
  if (this->reverse_order() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->reverse_order(), output);
  }

  // repeated .google.privacy.dlp.v2beta1.CharsToIgnore characters_to_ignore = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->characters_to_ignore_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->characters_to_ignore(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:google.privacy.dlp.v2beta1.CharacterMaskConfig)
}

::google::protobuf::uint8* CharacterMaskConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.privacy.dlp.v2beta1.CharacterMaskConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string masking_character = 1;
  if (this->masking_character().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->masking_character().data(), static_cast<int>(this->masking_character().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.privacy.dlp.v2beta1.CharacterMaskConfig.masking_character");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->masking_character(), target);
  }

  // int32 number_to_mask = 2;
  if (this->number_to_mask() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->number_to_mask(), target);
  }

  // bool reverse_order = 3;
  if (this->reverse_order() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->reverse_order(), target);
  }

  // repeated .google.privacy.dlp.v2beta1.CharsToIgnore characters_to_ignore = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->characters_to_ignore_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->characters_to_ignore(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.privacy.dlp.v2beta1.CharacterMaskConfig)
  return target;
}

size_t CharacterMaskConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.privacy.dlp.v2beta1.CharacterMaskConfig)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .google.privacy.dlp.v2beta1.CharsToIgnore characters_to_ignore = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->characters_to_ignore_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->characters_to_ignore(static_cast<int>(i)));
    }
  }

  // string masking_character = 1;
  if (this->masking_character().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->masking_character());
  }

  // int32 number_to_mask = 2;
  if (this->number_to_mask() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->number_to_mask());
  }

  // bool reverse_order = 3;
  if (this->reverse_order() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CharacterMaskConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.privacy.dlp.v2beta1.CharacterMaskConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const CharacterMaskConfig* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CharacterMaskConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.privacy.dlp.v2beta1.CharacterMaskConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.privacy.dlp.v2beta1.CharacterMaskConfig)
    MergeFrom(*source);
  }
}

void CharacterMaskConfig::MergeFrom(const CharacterMaskConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.privacy.dlp.v2beta1.CharacterMaskConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  characters_to_ignore_.MergeFrom(from.characters_to_ignore_);
  if (from.masking_character().size() > 0) {

    masking_character_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.masking_character_);
  }
  if (from.number_to_mask() != 0) {
    set_number_to_mask(from.number_to_mask());
  }
  if (from.reverse_order() != 0) {
    set_reverse_order(from.reverse_order());
  }
}

void CharacterMaskConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.privacy.dlp.v2beta1.CharacterMaskConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CharacterMaskConfig::CopyFrom(const CharacterMaskConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.privacy.dlp.v2beta1.CharacterMaskConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CharacterMaskConfig::IsInitialized() const {
  return true;
}

void CharacterMaskConfig::Swap(CharacterMaskConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CharacterMaskConfig::InternalSwap(CharacterMaskConfig* other) {
  using std::swap;
  characters_to_ignore_.InternalSwap(&other->characters_to_ignore_);
  masking_character_.Swap(&other->masking_character_);
  swap(number_to_mask_, other->number_to_mask_);
  swap(reverse_order_, other->reverse_order_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CharacterMaskConfig::GetMetadata() const {
  protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void FixedSizeBucketingConfig::InitAsDefaultInstance() {
  ::google::privacy::dlp::v2beta1::_FixedSizeBucketingConfig_default_instance_._instance.get_mutable()->lower_bound_ = const_cast< ::google::privacy::dlp::v2beta1::Value*>(
      ::google::privacy::dlp::v2beta1::Value::internal_default_instance());
  ::google::privacy::dlp::v2beta1::_FixedSizeBucketingConfig_default_instance_._instance.get_mutable()->upper_bound_ = const_cast< ::google::privacy::dlp::v2beta1::Value*>(
      ::google::privacy::dlp::v2beta1::Value::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FixedSizeBucketingConfig::kLowerBoundFieldNumber;
const int FixedSizeBucketingConfig::kUpperBoundFieldNumber;
const int FixedSizeBucketingConfig::kBucketSizeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FixedSizeBucketingConfig::FixedSizeBucketingConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaultsFixedSizeBucketingConfig();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.privacy.dlp.v2beta1.FixedSizeBucketingConfig)
}
FixedSizeBucketingConfig::FixedSizeBucketingConfig(const FixedSizeBucketingConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_lower_bound()) {
    lower_bound_ = new ::google::privacy::dlp::v2beta1::Value(*from.lower_bound_);
  } else {
    lower_bound_ = NULL;
  }
  if (from.has_upper_bound()) {
    upper_bound_ = new ::google::privacy::dlp::v2beta1::Value(*from.upper_bound_);
  } else {
    upper_bound_ = NULL;
  }
  bucket_size_ = from.bucket_size_;
  // @@protoc_insertion_point(copy_constructor:google.privacy.dlp.v2beta1.FixedSizeBucketingConfig)
}

void FixedSizeBucketingConfig::SharedCtor() {
  ::memset(&lower_bound_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&bucket_size_) -
      reinterpret_cast<char*>(&lower_bound_)) + sizeof(bucket_size_));
  _cached_size_ = 0;
}

FixedSizeBucketingConfig::~FixedSizeBucketingConfig() {
  // @@protoc_insertion_point(destructor:google.privacy.dlp.v2beta1.FixedSizeBucketingConfig)
  SharedDtor();
}

void FixedSizeBucketingConfig::SharedDtor() {
  if (this != internal_default_instance()) delete lower_bound_;
  if (this != internal_default_instance()) delete upper_bound_;
}

void FixedSizeBucketingConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FixedSizeBucketingConfig::descriptor() {
  ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FixedSizeBucketingConfig& FixedSizeBucketingConfig::default_instance() {
  ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaultsFixedSizeBucketingConfig();
  return *internal_default_instance();
}

FixedSizeBucketingConfig* FixedSizeBucketingConfig::New(::google::protobuf::Arena* arena) const {
  FixedSizeBucketingConfig* n = new FixedSizeBucketingConfig;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FixedSizeBucketingConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:google.privacy.dlp.v2beta1.FixedSizeBucketingConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && lower_bound_ != NULL) {
    delete lower_bound_;
  }
  lower_bound_ = NULL;
  if (GetArenaNoVirtual() == NULL && upper_bound_ != NULL) {
    delete upper_bound_;
  }
  upper_bound_ = NULL;
  bucket_size_ = 0;
  _internal_metadata_.Clear();
}

bool FixedSizeBucketingConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.privacy.dlp.v2beta1.FixedSizeBucketingConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .google.privacy.dlp.v2beta1.Value lower_bound = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_lower_bound()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.privacy.dlp.v2beta1.Value upper_bound = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_upper_bound()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double bucket_size = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &bucket_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.privacy.dlp.v2beta1.FixedSizeBucketingConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.privacy.dlp.v2beta1.FixedSizeBucketingConfig)
  return false;
#undef DO_
}

void FixedSizeBucketingConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.privacy.dlp.v2beta1.FixedSizeBucketingConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.privacy.dlp.v2beta1.Value lower_bound = 1;
  if (this->has_lower_bound()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->lower_bound_, output);
  }

  // .google.privacy.dlp.v2beta1.Value upper_bound = 2;
  if (this->has_upper_bound()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->upper_bound_, output);
  }

  // double bucket_size = 3;
  if (this->bucket_size() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->bucket_size(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:google.privacy.dlp.v2beta1.FixedSizeBucketingConfig)
}

::google::protobuf::uint8* FixedSizeBucketingConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.privacy.dlp.v2beta1.FixedSizeBucketingConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.privacy.dlp.v2beta1.Value lower_bound = 1;
  if (this->has_lower_bound()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->lower_bound_, deterministic, target);
  }

  // .google.privacy.dlp.v2beta1.Value upper_bound = 2;
  if (this->has_upper_bound()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, *this->upper_bound_, deterministic, target);
  }

  // double bucket_size = 3;
  if (this->bucket_size() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->bucket_size(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.privacy.dlp.v2beta1.FixedSizeBucketingConfig)
  return target;
}

size_t FixedSizeBucketingConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.privacy.dlp.v2beta1.FixedSizeBucketingConfig)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .google.privacy.dlp.v2beta1.Value lower_bound = 1;
  if (this->has_lower_bound()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->lower_bound_);
  }

  // .google.privacy.dlp.v2beta1.Value upper_bound = 2;
  if (this->has_upper_bound()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->upper_bound_);
  }

  // double bucket_size = 3;
  if (this->bucket_size() != 0) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FixedSizeBucketingConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.privacy.dlp.v2beta1.FixedSizeBucketingConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const FixedSizeBucketingConfig* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FixedSizeBucketingConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.privacy.dlp.v2beta1.FixedSizeBucketingConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.privacy.dlp.v2beta1.FixedSizeBucketingConfig)
    MergeFrom(*source);
  }
}

void FixedSizeBucketingConfig::MergeFrom(const FixedSizeBucketingConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.privacy.dlp.v2beta1.FixedSizeBucketingConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_lower_bound()) {
    mutable_lower_bound()->::google::privacy::dlp::v2beta1::Value::MergeFrom(from.lower_bound());
  }
  if (from.has_upper_bound()) {
    mutable_upper_bound()->::google::privacy::dlp::v2beta1::Value::MergeFrom(from.upper_bound());
  }
  if (from.bucket_size() != 0) {
    set_bucket_size(from.bucket_size());
  }
}

void FixedSizeBucketingConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.privacy.dlp.v2beta1.FixedSizeBucketingConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FixedSizeBucketingConfig::CopyFrom(const FixedSizeBucketingConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.privacy.dlp.v2beta1.FixedSizeBucketingConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FixedSizeBucketingConfig::IsInitialized() const {
  return true;
}

void FixedSizeBucketingConfig::Swap(FixedSizeBucketingConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FixedSizeBucketingConfig::InternalSwap(FixedSizeBucketingConfig* other) {
  using std::swap;
  swap(lower_bound_, other->lower_bound_);
  swap(upper_bound_, other->upper_bound_);
  swap(bucket_size_, other->bucket_size_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FixedSizeBucketingConfig::GetMetadata() const {
  protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void BucketingConfig_Bucket::InitAsDefaultInstance() {
  ::google::privacy::dlp::v2beta1::_BucketingConfig_Bucket_default_instance_._instance.get_mutable()->min_ = const_cast< ::google::privacy::dlp::v2beta1::Value*>(
      ::google::privacy::dlp::v2beta1::Value::internal_default_instance());
  ::google::privacy::dlp::v2beta1::_BucketingConfig_Bucket_default_instance_._instance.get_mutable()->max_ = const_cast< ::google::privacy::dlp::v2beta1::Value*>(
      ::google::privacy::dlp::v2beta1::Value::internal_default_instance());
  ::google::privacy::dlp::v2beta1::_BucketingConfig_Bucket_default_instance_._instance.get_mutable()->replacement_value_ = const_cast< ::google::privacy::dlp::v2beta1::Value*>(
      ::google::privacy::dlp::v2beta1::Value::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BucketingConfig_Bucket::kMinFieldNumber;
const int BucketingConfig_Bucket::kMaxFieldNumber;
const int BucketingConfig_Bucket::kReplacementValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BucketingConfig_Bucket::BucketingConfig_Bucket()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaultsBucketingConfig_Bucket();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.privacy.dlp.v2beta1.BucketingConfig.Bucket)
}
BucketingConfig_Bucket::BucketingConfig_Bucket(const BucketingConfig_Bucket& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_min()) {
    min_ = new ::google::privacy::dlp::v2beta1::Value(*from.min_);
  } else {
    min_ = NULL;
  }
  if (from.has_max()) {
    max_ = new ::google::privacy::dlp::v2beta1::Value(*from.max_);
  } else {
    max_ = NULL;
  }
  if (from.has_replacement_value()) {
    replacement_value_ = new ::google::privacy::dlp::v2beta1::Value(*from.replacement_value_);
  } else {
    replacement_value_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:google.privacy.dlp.v2beta1.BucketingConfig.Bucket)
}

void BucketingConfig_Bucket::SharedCtor() {
  ::memset(&min_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&replacement_value_) -
      reinterpret_cast<char*>(&min_)) + sizeof(replacement_value_));
  _cached_size_ = 0;
}

BucketingConfig_Bucket::~BucketingConfig_Bucket() {
  // @@protoc_insertion_point(destructor:google.privacy.dlp.v2beta1.BucketingConfig.Bucket)
  SharedDtor();
}

void BucketingConfig_Bucket::SharedDtor() {
  if (this != internal_default_instance()) delete min_;
  if (this != internal_default_instance()) delete max_;
  if (this != internal_default_instance()) delete replacement_value_;
}

void BucketingConfig_Bucket::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BucketingConfig_Bucket::descriptor() {
  ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const BucketingConfig_Bucket& BucketingConfig_Bucket::default_instance() {
  ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaultsBucketingConfig_Bucket();
  return *internal_default_instance();
}

BucketingConfig_Bucket* BucketingConfig_Bucket::New(::google::protobuf::Arena* arena) const {
  BucketingConfig_Bucket* n = new BucketingConfig_Bucket;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BucketingConfig_Bucket::Clear() {
// @@protoc_insertion_point(message_clear_start:google.privacy.dlp.v2beta1.BucketingConfig.Bucket)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && min_ != NULL) {
    delete min_;
  }
  min_ = NULL;
  if (GetArenaNoVirtual() == NULL && max_ != NULL) {
    delete max_;
  }
  max_ = NULL;
  if (GetArenaNoVirtual() == NULL && replacement_value_ != NULL) {
    delete replacement_value_;
  }
  replacement_value_ = NULL;
  _internal_metadata_.Clear();
}

bool BucketingConfig_Bucket::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.privacy.dlp.v2beta1.BucketingConfig.Bucket)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .google.privacy.dlp.v2beta1.Value min = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_min()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.privacy.dlp.v2beta1.Value max = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_max()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.privacy.dlp.v2beta1.Value replacement_value = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_replacement_value()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.privacy.dlp.v2beta1.BucketingConfig.Bucket)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.privacy.dlp.v2beta1.BucketingConfig.Bucket)
  return false;
#undef DO_
}

void BucketingConfig_Bucket::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.privacy.dlp.v2beta1.BucketingConfig.Bucket)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.privacy.dlp.v2beta1.Value min = 1;
  if (this->has_min()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->min_, output);
  }

  // .google.privacy.dlp.v2beta1.Value max = 2;
  if (this->has_max()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->max_, output);
  }

  // .google.privacy.dlp.v2beta1.Value replacement_value = 3;
  if (this->has_replacement_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->replacement_value_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:google.privacy.dlp.v2beta1.BucketingConfig.Bucket)
}

::google::protobuf::uint8* BucketingConfig_Bucket::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.privacy.dlp.v2beta1.BucketingConfig.Bucket)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.privacy.dlp.v2beta1.Value min = 1;
  if (this->has_min()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->min_, deterministic, target);
  }

  // .google.privacy.dlp.v2beta1.Value max = 2;
  if (this->has_max()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, *this->max_, deterministic, target);
  }

  // .google.privacy.dlp.v2beta1.Value replacement_value = 3;
  if (this->has_replacement_value()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, *this->replacement_value_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.privacy.dlp.v2beta1.BucketingConfig.Bucket)
  return target;
}

size_t BucketingConfig_Bucket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.privacy.dlp.v2beta1.BucketingConfig.Bucket)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .google.privacy.dlp.v2beta1.Value min = 1;
  if (this->has_min()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->min_);
  }

  // .google.privacy.dlp.v2beta1.Value max = 2;
  if (this->has_max()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->max_);
  }

  // .google.privacy.dlp.v2beta1.Value replacement_value = 3;
  if (this->has_replacement_value()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->replacement_value_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BucketingConfig_Bucket::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.privacy.dlp.v2beta1.BucketingConfig.Bucket)
  GOOGLE_DCHECK_NE(&from, this);
  const BucketingConfig_Bucket* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BucketingConfig_Bucket>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.privacy.dlp.v2beta1.BucketingConfig.Bucket)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.privacy.dlp.v2beta1.BucketingConfig.Bucket)
    MergeFrom(*source);
  }
}

void BucketingConfig_Bucket::MergeFrom(const BucketingConfig_Bucket& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.privacy.dlp.v2beta1.BucketingConfig.Bucket)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_min()) {
    mutable_min()->::google::privacy::dlp::v2beta1::Value::MergeFrom(from.min());
  }
  if (from.has_max()) {
    mutable_max()->::google::privacy::dlp::v2beta1::Value::MergeFrom(from.max());
  }
  if (from.has_replacement_value()) {
    mutable_replacement_value()->::google::privacy::dlp::v2beta1::Value::MergeFrom(from.replacement_value());
  }
}

void BucketingConfig_Bucket::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.privacy.dlp.v2beta1.BucketingConfig.Bucket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BucketingConfig_Bucket::CopyFrom(const BucketingConfig_Bucket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.privacy.dlp.v2beta1.BucketingConfig.Bucket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BucketingConfig_Bucket::IsInitialized() const {
  return true;
}

void BucketingConfig_Bucket::Swap(BucketingConfig_Bucket* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BucketingConfig_Bucket::InternalSwap(BucketingConfig_Bucket* other) {
  using std::swap;
  swap(min_, other->min_);
  swap(max_, other->max_);
  swap(replacement_value_, other->replacement_value_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BucketingConfig_Bucket::GetMetadata() const {
  protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void BucketingConfig::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BucketingConfig::kBucketsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BucketingConfig::BucketingConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaultsBucketingConfig();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.privacy.dlp.v2beta1.BucketingConfig)
}
BucketingConfig::BucketingConfig(const BucketingConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      buckets_(from.buckets_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:google.privacy.dlp.v2beta1.BucketingConfig)
}

void BucketingConfig::SharedCtor() {
  _cached_size_ = 0;
}

BucketingConfig::~BucketingConfig() {
  // @@protoc_insertion_point(destructor:google.privacy.dlp.v2beta1.BucketingConfig)
  SharedDtor();
}

void BucketingConfig::SharedDtor() {
}

void BucketingConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BucketingConfig::descriptor() {
  ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const BucketingConfig& BucketingConfig::default_instance() {
  ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaultsBucketingConfig();
  return *internal_default_instance();
}

BucketingConfig* BucketingConfig::New(::google::protobuf::Arena* arena) const {
  BucketingConfig* n = new BucketingConfig;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BucketingConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:google.privacy.dlp.v2beta1.BucketingConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  buckets_.Clear();
  _internal_metadata_.Clear();
}

bool BucketingConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.privacy.dlp.v2beta1.BucketingConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .google.privacy.dlp.v2beta1.BucketingConfig.Bucket buckets = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_buckets()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.privacy.dlp.v2beta1.BucketingConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.privacy.dlp.v2beta1.BucketingConfig)
  return false;
#undef DO_
}

void BucketingConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.privacy.dlp.v2beta1.BucketingConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .google.privacy.dlp.v2beta1.BucketingConfig.Bucket buckets = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->buckets_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->buckets(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:google.privacy.dlp.v2beta1.BucketingConfig)
}

::google::protobuf::uint8* BucketingConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.privacy.dlp.v2beta1.BucketingConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .google.privacy.dlp.v2beta1.BucketingConfig.Bucket buckets = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->buckets_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->buckets(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.privacy.dlp.v2beta1.BucketingConfig)
  return target;
}

size_t BucketingConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.privacy.dlp.v2beta1.BucketingConfig)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .google.privacy.dlp.v2beta1.BucketingConfig.Bucket buckets = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->buckets_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->buckets(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BucketingConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.privacy.dlp.v2beta1.BucketingConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const BucketingConfig* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BucketingConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.privacy.dlp.v2beta1.BucketingConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.privacy.dlp.v2beta1.BucketingConfig)
    MergeFrom(*source);
  }
}

void BucketingConfig::MergeFrom(const BucketingConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.privacy.dlp.v2beta1.BucketingConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  buckets_.MergeFrom(from.buckets_);
}

void BucketingConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.privacy.dlp.v2beta1.BucketingConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BucketingConfig::CopyFrom(const BucketingConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.privacy.dlp.v2beta1.BucketingConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BucketingConfig::IsInitialized() const {
  return true;
}

void BucketingConfig::Swap(BucketingConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BucketingConfig::InternalSwap(BucketingConfig* other) {
  using std::swap;
  buckets_.InternalSwap(&other->buckets_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BucketingConfig::GetMetadata() const {
  protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CryptoReplaceFfxFpeConfig::InitAsDefaultInstance() {
  ::google::privacy::dlp::v2beta1::_CryptoReplaceFfxFpeConfig_default_instance_._instance.get_mutable()->crypto_key_ = const_cast< ::google::privacy::dlp::v2beta1::CryptoKey*>(
      ::google::privacy::dlp::v2beta1::CryptoKey::internal_default_instance());
  ::google::privacy::dlp::v2beta1::_CryptoReplaceFfxFpeConfig_default_instance_._instance.get_mutable()->context_ = const_cast< ::google::privacy::dlp::v2beta1::FieldId*>(
      ::google::privacy::dlp::v2beta1::FieldId::internal_default_instance());
  ::google::privacy::dlp::v2beta1::_CryptoReplaceFfxFpeConfig_default_instance_.common_alphabet_ = 0;
  ::google::privacy::dlp::v2beta1::_CryptoReplaceFfxFpeConfig_default_instance_.custom_alphabet_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::google::privacy::dlp::v2beta1::_CryptoReplaceFfxFpeConfig_default_instance_.radix_ = 0;
}
void CryptoReplaceFfxFpeConfig::clear_context() {
  if (GetArenaNoVirtual() == NULL && context_ != NULL) {
    delete context_;
  }
  context_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CryptoReplaceFfxFpeConfig::kCryptoKeyFieldNumber;
const int CryptoReplaceFfxFpeConfig::kContextFieldNumber;
const int CryptoReplaceFfxFpeConfig::kCommonAlphabetFieldNumber;
const int CryptoReplaceFfxFpeConfig::kCustomAlphabetFieldNumber;
const int CryptoReplaceFfxFpeConfig::kRadixFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CryptoReplaceFfxFpeConfig::CryptoReplaceFfxFpeConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaultsCryptoReplaceFfxFpeConfig();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.privacy.dlp.v2beta1.CryptoReplaceFfxFpeConfig)
}
CryptoReplaceFfxFpeConfig::CryptoReplaceFfxFpeConfig(const CryptoReplaceFfxFpeConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_crypto_key()) {
    crypto_key_ = new ::google::privacy::dlp::v2beta1::CryptoKey(*from.crypto_key_);
  } else {
    crypto_key_ = NULL;
  }
  if (from.has_context()) {
    context_ = new ::google::privacy::dlp::v2beta1::FieldId(*from.context_);
  } else {
    context_ = NULL;
  }
  clear_has_alphabet();
  switch (from.alphabet_case()) {
    case kCommonAlphabet: {
      set_common_alphabet(from.common_alphabet());
      break;
    }
    case kCustomAlphabet: {
      set_custom_alphabet(from.custom_alphabet());
      break;
    }
    case kRadix: {
      set_radix(from.radix());
      break;
    }
    case ALPHABET_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:google.privacy.dlp.v2beta1.CryptoReplaceFfxFpeConfig)
}

void CryptoReplaceFfxFpeConfig::SharedCtor() {
  ::memset(&crypto_key_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&context_) -
      reinterpret_cast<char*>(&crypto_key_)) + sizeof(context_));
  clear_has_alphabet();
  _cached_size_ = 0;
}

CryptoReplaceFfxFpeConfig::~CryptoReplaceFfxFpeConfig() {
  // @@protoc_insertion_point(destructor:google.privacy.dlp.v2beta1.CryptoReplaceFfxFpeConfig)
  SharedDtor();
}

void CryptoReplaceFfxFpeConfig::SharedDtor() {
  if (this != internal_default_instance()) delete crypto_key_;
  if (this != internal_default_instance()) delete context_;
  if (has_alphabet()) {
    clear_alphabet();
  }
}

void CryptoReplaceFfxFpeConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CryptoReplaceFfxFpeConfig::descriptor() {
  ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CryptoReplaceFfxFpeConfig& CryptoReplaceFfxFpeConfig::default_instance() {
  ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaultsCryptoReplaceFfxFpeConfig();
  return *internal_default_instance();
}

CryptoReplaceFfxFpeConfig* CryptoReplaceFfxFpeConfig::New(::google::protobuf::Arena* arena) const {
  CryptoReplaceFfxFpeConfig* n = new CryptoReplaceFfxFpeConfig;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CryptoReplaceFfxFpeConfig::clear_alphabet() {
// @@protoc_insertion_point(one_of_clear_start:google.privacy.dlp.v2beta1.CryptoReplaceFfxFpeConfig)
  switch (alphabet_case()) {
    case kCommonAlphabet: {
      // No need to clear
      break;
    }
    case kCustomAlphabet: {
      alphabet_.custom_alphabet_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case kRadix: {
      // No need to clear
      break;
    }
    case ALPHABET_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = ALPHABET_NOT_SET;
}


void CryptoReplaceFfxFpeConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:google.privacy.dlp.v2beta1.CryptoReplaceFfxFpeConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && crypto_key_ != NULL) {
    delete crypto_key_;
  }
  crypto_key_ = NULL;
  if (GetArenaNoVirtual() == NULL && context_ != NULL) {
    delete context_;
  }
  context_ = NULL;
  clear_alphabet();
  _internal_metadata_.Clear();
}

bool CryptoReplaceFfxFpeConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.privacy.dlp.v2beta1.CryptoReplaceFfxFpeConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .google.privacy.dlp.v2beta1.CryptoKey crypto_key = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_crypto_key()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.privacy.dlp.v2beta1.FieldId context = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_context()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.privacy.dlp.v2beta1.CryptoReplaceFfxFpeConfig.FfxCommonNativeAlphabet common_alphabet = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_common_alphabet(static_cast< ::google::privacy::dlp::v2beta1::CryptoReplaceFfxFpeConfig_FfxCommonNativeAlphabet >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string custom_alphabet = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_custom_alphabet()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->custom_alphabet().data(), static_cast<int>(this->custom_alphabet().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.privacy.dlp.v2beta1.CryptoReplaceFfxFpeConfig.custom_alphabet"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 radix = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          clear_alphabet();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &alphabet_.radix_)));
          set_has_radix();
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.privacy.dlp.v2beta1.CryptoReplaceFfxFpeConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.privacy.dlp.v2beta1.CryptoReplaceFfxFpeConfig)
  return false;
#undef DO_
}

void CryptoReplaceFfxFpeConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.privacy.dlp.v2beta1.CryptoReplaceFfxFpeConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.privacy.dlp.v2beta1.CryptoKey crypto_key = 1;
  if (this->has_crypto_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->crypto_key_, output);
  }

  // .google.privacy.dlp.v2beta1.FieldId context = 2;
  if (this->has_context()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->context_, output);
  }

  // .google.privacy.dlp.v2beta1.CryptoReplaceFfxFpeConfig.FfxCommonNativeAlphabet common_alphabet = 4;
  if (has_common_alphabet()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->common_alphabet(), output);
  }

  // string custom_alphabet = 5;
  if (has_custom_alphabet()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->custom_alphabet().data(), static_cast<int>(this->custom_alphabet().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.privacy.dlp.v2beta1.CryptoReplaceFfxFpeConfig.custom_alphabet");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->custom_alphabet(), output);
  }

  // int32 radix = 6;
  if (has_radix()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->radix(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:google.privacy.dlp.v2beta1.CryptoReplaceFfxFpeConfig)
}

::google::protobuf::uint8* CryptoReplaceFfxFpeConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.privacy.dlp.v2beta1.CryptoReplaceFfxFpeConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.privacy.dlp.v2beta1.CryptoKey crypto_key = 1;
  if (this->has_crypto_key()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->crypto_key_, deterministic, target);
  }

  // .google.privacy.dlp.v2beta1.FieldId context = 2;
  if (this->has_context()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, *this->context_, deterministic, target);
  }

  // .google.privacy.dlp.v2beta1.CryptoReplaceFfxFpeConfig.FfxCommonNativeAlphabet common_alphabet = 4;
  if (has_common_alphabet()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->common_alphabet(), target);
  }

  // string custom_alphabet = 5;
  if (has_custom_alphabet()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->custom_alphabet().data(), static_cast<int>(this->custom_alphabet().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.privacy.dlp.v2beta1.CryptoReplaceFfxFpeConfig.custom_alphabet");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->custom_alphabet(), target);
  }

  // int32 radix = 6;
  if (has_radix()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->radix(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.privacy.dlp.v2beta1.CryptoReplaceFfxFpeConfig)
  return target;
}

size_t CryptoReplaceFfxFpeConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.privacy.dlp.v2beta1.CryptoReplaceFfxFpeConfig)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .google.privacy.dlp.v2beta1.CryptoKey crypto_key = 1;
  if (this->has_crypto_key()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->crypto_key_);
  }

  // .google.privacy.dlp.v2beta1.FieldId context = 2;
  if (this->has_context()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->context_);
  }

  switch (alphabet_case()) {
    // .google.privacy.dlp.v2beta1.CryptoReplaceFfxFpeConfig.FfxCommonNativeAlphabet common_alphabet = 4;
    case kCommonAlphabet: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->common_alphabet());
      break;
    }
    // string custom_alphabet = 5;
    case kCustomAlphabet: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->custom_alphabet());
      break;
    }
    // int32 radix = 6;
    case kRadix: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->radix());
      break;
    }
    case ALPHABET_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CryptoReplaceFfxFpeConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.privacy.dlp.v2beta1.CryptoReplaceFfxFpeConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const CryptoReplaceFfxFpeConfig* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CryptoReplaceFfxFpeConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.privacy.dlp.v2beta1.CryptoReplaceFfxFpeConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.privacy.dlp.v2beta1.CryptoReplaceFfxFpeConfig)
    MergeFrom(*source);
  }
}

void CryptoReplaceFfxFpeConfig::MergeFrom(const CryptoReplaceFfxFpeConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.privacy.dlp.v2beta1.CryptoReplaceFfxFpeConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_crypto_key()) {
    mutable_crypto_key()->::google::privacy::dlp::v2beta1::CryptoKey::MergeFrom(from.crypto_key());
  }
  if (from.has_context()) {
    mutable_context()->::google::privacy::dlp::v2beta1::FieldId::MergeFrom(from.context());
  }
  switch (from.alphabet_case()) {
    case kCommonAlphabet: {
      set_common_alphabet(from.common_alphabet());
      break;
    }
    case kCustomAlphabet: {
      set_custom_alphabet(from.custom_alphabet());
      break;
    }
    case kRadix: {
      set_radix(from.radix());
      break;
    }
    case ALPHABET_NOT_SET: {
      break;
    }
  }
}

void CryptoReplaceFfxFpeConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.privacy.dlp.v2beta1.CryptoReplaceFfxFpeConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CryptoReplaceFfxFpeConfig::CopyFrom(const CryptoReplaceFfxFpeConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.privacy.dlp.v2beta1.CryptoReplaceFfxFpeConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CryptoReplaceFfxFpeConfig::IsInitialized() const {
  return true;
}

void CryptoReplaceFfxFpeConfig::Swap(CryptoReplaceFfxFpeConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CryptoReplaceFfxFpeConfig::InternalSwap(CryptoReplaceFfxFpeConfig* other) {
  using std::swap;
  swap(crypto_key_, other->crypto_key_);
  swap(context_, other->context_);
  swap(alphabet_, other->alphabet_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CryptoReplaceFfxFpeConfig::GetMetadata() const {
  protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CryptoKey::InitAsDefaultInstance() {
  ::google::privacy::dlp::v2beta1::_CryptoKey_default_instance_.transient_ = const_cast< ::google::privacy::dlp::v2beta1::TransientCryptoKey*>(
      ::google::privacy::dlp::v2beta1::TransientCryptoKey::internal_default_instance());
  ::google::privacy::dlp::v2beta1::_CryptoKey_default_instance_.unwrapped_ = const_cast< ::google::privacy::dlp::v2beta1::UnwrappedCryptoKey*>(
      ::google::privacy::dlp::v2beta1::UnwrappedCryptoKey::internal_default_instance());
  ::google::privacy::dlp::v2beta1::_CryptoKey_default_instance_.kms_wrapped_ = const_cast< ::google::privacy::dlp::v2beta1::KmsWrappedCryptoKey*>(
      ::google::privacy::dlp::v2beta1::KmsWrappedCryptoKey::internal_default_instance());
}
void CryptoKey::set_allocated_transient(::google::privacy::dlp::v2beta1::TransientCryptoKey* transient) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_source();
  if (transient) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      transient = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, transient, submessage_arena);
    }
    set_has_transient();
    source_.transient_ = transient;
  }
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2beta1.CryptoKey.transient)
}
void CryptoKey::set_allocated_unwrapped(::google::privacy::dlp::v2beta1::UnwrappedCryptoKey* unwrapped) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_source();
  if (unwrapped) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      unwrapped = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, unwrapped, submessage_arena);
    }
    set_has_unwrapped();
    source_.unwrapped_ = unwrapped;
  }
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2beta1.CryptoKey.unwrapped)
}
void CryptoKey::set_allocated_kms_wrapped(::google::privacy::dlp::v2beta1::KmsWrappedCryptoKey* kms_wrapped) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_source();
  if (kms_wrapped) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      kms_wrapped = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, kms_wrapped, submessage_arena);
    }
    set_has_kms_wrapped();
    source_.kms_wrapped_ = kms_wrapped;
  }
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2beta1.CryptoKey.kms_wrapped)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CryptoKey::kTransientFieldNumber;
const int CryptoKey::kUnwrappedFieldNumber;
const int CryptoKey::kKmsWrappedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CryptoKey::CryptoKey()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaultsCryptoKey();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.privacy.dlp.v2beta1.CryptoKey)
}
CryptoKey::CryptoKey(const CryptoKey& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_source();
  switch (from.source_case()) {
    case kTransient: {
      mutable_transient()->::google::privacy::dlp::v2beta1::TransientCryptoKey::MergeFrom(from.transient());
      break;
    }
    case kUnwrapped: {
      mutable_unwrapped()->::google::privacy::dlp::v2beta1::UnwrappedCryptoKey::MergeFrom(from.unwrapped());
      break;
    }
    case kKmsWrapped: {
      mutable_kms_wrapped()->::google::privacy::dlp::v2beta1::KmsWrappedCryptoKey::MergeFrom(from.kms_wrapped());
      break;
    }
    case SOURCE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:google.privacy.dlp.v2beta1.CryptoKey)
}

void CryptoKey::SharedCtor() {
  clear_has_source();
  _cached_size_ = 0;
}

CryptoKey::~CryptoKey() {
  // @@protoc_insertion_point(destructor:google.privacy.dlp.v2beta1.CryptoKey)
  SharedDtor();
}

void CryptoKey::SharedDtor() {
  if (has_source()) {
    clear_source();
  }
}

void CryptoKey::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CryptoKey::descriptor() {
  ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CryptoKey& CryptoKey::default_instance() {
  ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaultsCryptoKey();
  return *internal_default_instance();
}

CryptoKey* CryptoKey::New(::google::protobuf::Arena* arena) const {
  CryptoKey* n = new CryptoKey;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CryptoKey::clear_source() {
// @@protoc_insertion_point(one_of_clear_start:google.privacy.dlp.v2beta1.CryptoKey)
  switch (source_case()) {
    case kTransient: {
      delete source_.transient_;
      break;
    }
    case kUnwrapped: {
      delete source_.unwrapped_;
      break;
    }
    case kKmsWrapped: {
      delete source_.kms_wrapped_;
      break;
    }
    case SOURCE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = SOURCE_NOT_SET;
}


void CryptoKey::Clear() {
// @@protoc_insertion_point(message_clear_start:google.privacy.dlp.v2beta1.CryptoKey)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_source();
  _internal_metadata_.Clear();
}

bool CryptoKey::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.privacy.dlp.v2beta1.CryptoKey)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .google.privacy.dlp.v2beta1.TransientCryptoKey transient = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_transient()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.privacy.dlp.v2beta1.UnwrappedCryptoKey unwrapped = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_unwrapped()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.privacy.dlp.v2beta1.KmsWrappedCryptoKey kms_wrapped = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_kms_wrapped()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.privacy.dlp.v2beta1.CryptoKey)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.privacy.dlp.v2beta1.CryptoKey)
  return false;
#undef DO_
}

void CryptoKey::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.privacy.dlp.v2beta1.CryptoKey)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.privacy.dlp.v2beta1.TransientCryptoKey transient = 1;
  if (has_transient()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *source_.transient_, output);
  }

  // .google.privacy.dlp.v2beta1.UnwrappedCryptoKey unwrapped = 2;
  if (has_unwrapped()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *source_.unwrapped_, output);
  }

  // .google.privacy.dlp.v2beta1.KmsWrappedCryptoKey kms_wrapped = 3;
  if (has_kms_wrapped()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *source_.kms_wrapped_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:google.privacy.dlp.v2beta1.CryptoKey)
}

::google::protobuf::uint8* CryptoKey::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.privacy.dlp.v2beta1.CryptoKey)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.privacy.dlp.v2beta1.TransientCryptoKey transient = 1;
  if (has_transient()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *source_.transient_, deterministic, target);
  }

  // .google.privacy.dlp.v2beta1.UnwrappedCryptoKey unwrapped = 2;
  if (has_unwrapped()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, *source_.unwrapped_, deterministic, target);
  }

  // .google.privacy.dlp.v2beta1.KmsWrappedCryptoKey kms_wrapped = 3;
  if (has_kms_wrapped()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, *source_.kms_wrapped_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.privacy.dlp.v2beta1.CryptoKey)
  return target;
}

size_t CryptoKey::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.privacy.dlp.v2beta1.CryptoKey)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  switch (source_case()) {
    // .google.privacy.dlp.v2beta1.TransientCryptoKey transient = 1;
    case kTransient: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *source_.transient_);
      break;
    }
    // .google.privacy.dlp.v2beta1.UnwrappedCryptoKey unwrapped = 2;
    case kUnwrapped: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *source_.unwrapped_);
      break;
    }
    // .google.privacy.dlp.v2beta1.KmsWrappedCryptoKey kms_wrapped = 3;
    case kKmsWrapped: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *source_.kms_wrapped_);
      break;
    }
    case SOURCE_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CryptoKey::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.privacy.dlp.v2beta1.CryptoKey)
  GOOGLE_DCHECK_NE(&from, this);
  const CryptoKey* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CryptoKey>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.privacy.dlp.v2beta1.CryptoKey)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.privacy.dlp.v2beta1.CryptoKey)
    MergeFrom(*source);
  }
}

void CryptoKey::MergeFrom(const CryptoKey& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.privacy.dlp.v2beta1.CryptoKey)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.source_case()) {
    case kTransient: {
      mutable_transient()->::google::privacy::dlp::v2beta1::TransientCryptoKey::MergeFrom(from.transient());
      break;
    }
    case kUnwrapped: {
      mutable_unwrapped()->::google::privacy::dlp::v2beta1::UnwrappedCryptoKey::MergeFrom(from.unwrapped());
      break;
    }
    case kKmsWrapped: {
      mutable_kms_wrapped()->::google::privacy::dlp::v2beta1::KmsWrappedCryptoKey::MergeFrom(from.kms_wrapped());
      break;
    }
    case SOURCE_NOT_SET: {
      break;
    }
  }
}

void CryptoKey::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.privacy.dlp.v2beta1.CryptoKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CryptoKey::CopyFrom(const CryptoKey& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.privacy.dlp.v2beta1.CryptoKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CryptoKey::IsInitialized() const {
  return true;
}

void CryptoKey::Swap(CryptoKey* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CryptoKey::InternalSwap(CryptoKey* other) {
  using std::swap;
  swap(source_, other->source_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CryptoKey::GetMetadata() const {
  protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void TransientCryptoKey::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TransientCryptoKey::kNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TransientCryptoKey::TransientCryptoKey()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaultsTransientCryptoKey();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.privacy.dlp.v2beta1.TransientCryptoKey)
}
TransientCryptoKey::TransientCryptoKey(const TransientCryptoKey& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  // @@protoc_insertion_point(copy_constructor:google.privacy.dlp.v2beta1.TransientCryptoKey)
}

void TransientCryptoKey::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

TransientCryptoKey::~TransientCryptoKey() {
  // @@protoc_insertion_point(destructor:google.privacy.dlp.v2beta1.TransientCryptoKey)
  SharedDtor();
}

void TransientCryptoKey::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void TransientCryptoKey::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TransientCryptoKey::descriptor() {
  ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TransientCryptoKey& TransientCryptoKey::default_instance() {
  ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaultsTransientCryptoKey();
  return *internal_default_instance();
}

TransientCryptoKey* TransientCryptoKey::New(::google::protobuf::Arena* arena) const {
  TransientCryptoKey* n = new TransientCryptoKey;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TransientCryptoKey::Clear() {
// @@protoc_insertion_point(message_clear_start:google.privacy.dlp.v2beta1.TransientCryptoKey)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool TransientCryptoKey::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.privacy.dlp.v2beta1.TransientCryptoKey)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.privacy.dlp.v2beta1.TransientCryptoKey.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.privacy.dlp.v2beta1.TransientCryptoKey)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.privacy.dlp.v2beta1.TransientCryptoKey)
  return false;
#undef DO_
}

void TransientCryptoKey::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.privacy.dlp.v2beta1.TransientCryptoKey)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.privacy.dlp.v2beta1.TransientCryptoKey.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:google.privacy.dlp.v2beta1.TransientCryptoKey)
}

::google::protobuf::uint8* TransientCryptoKey::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.privacy.dlp.v2beta1.TransientCryptoKey)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.privacy.dlp.v2beta1.TransientCryptoKey.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.privacy.dlp.v2beta1.TransientCryptoKey)
  return target;
}

size_t TransientCryptoKey::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.privacy.dlp.v2beta1.TransientCryptoKey)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TransientCryptoKey::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.privacy.dlp.v2beta1.TransientCryptoKey)
  GOOGLE_DCHECK_NE(&from, this);
  const TransientCryptoKey* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TransientCryptoKey>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.privacy.dlp.v2beta1.TransientCryptoKey)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.privacy.dlp.v2beta1.TransientCryptoKey)
    MergeFrom(*source);
  }
}

void TransientCryptoKey::MergeFrom(const TransientCryptoKey& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.privacy.dlp.v2beta1.TransientCryptoKey)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
}

void TransientCryptoKey::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.privacy.dlp.v2beta1.TransientCryptoKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransientCryptoKey::CopyFrom(const TransientCryptoKey& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.privacy.dlp.v2beta1.TransientCryptoKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransientCryptoKey::IsInitialized() const {
  return true;
}

void TransientCryptoKey::Swap(TransientCryptoKey* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TransientCryptoKey::InternalSwap(TransientCryptoKey* other) {
  using std::swap;
  name_.Swap(&other->name_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TransientCryptoKey::GetMetadata() const {
  protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void UnwrappedCryptoKey::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UnwrappedCryptoKey::kKeyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UnwrappedCryptoKey::UnwrappedCryptoKey()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaultsUnwrappedCryptoKey();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.privacy.dlp.v2beta1.UnwrappedCryptoKey)
}
UnwrappedCryptoKey::UnwrappedCryptoKey(const UnwrappedCryptoKey& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.key().size() > 0) {
    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  // @@protoc_insertion_point(copy_constructor:google.privacy.dlp.v2beta1.UnwrappedCryptoKey)
}

void UnwrappedCryptoKey::SharedCtor() {
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

UnwrappedCryptoKey::~UnwrappedCryptoKey() {
  // @@protoc_insertion_point(destructor:google.privacy.dlp.v2beta1.UnwrappedCryptoKey)
  SharedDtor();
}

void UnwrappedCryptoKey::SharedDtor() {
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void UnwrappedCryptoKey::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UnwrappedCryptoKey::descriptor() {
  ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const UnwrappedCryptoKey& UnwrappedCryptoKey::default_instance() {
  ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaultsUnwrappedCryptoKey();
  return *internal_default_instance();
}

UnwrappedCryptoKey* UnwrappedCryptoKey::New(::google::protobuf::Arena* arena) const {
  UnwrappedCryptoKey* n = new UnwrappedCryptoKey;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UnwrappedCryptoKey::Clear() {
// @@protoc_insertion_point(message_clear_start:google.privacy.dlp.v2beta1.UnwrappedCryptoKey)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool UnwrappedCryptoKey::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.privacy.dlp.v2beta1.UnwrappedCryptoKey)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes key = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_key()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.privacy.dlp.v2beta1.UnwrappedCryptoKey)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.privacy.dlp.v2beta1.UnwrappedCryptoKey)
  return false;
#undef DO_
}

void UnwrappedCryptoKey::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.privacy.dlp.v2beta1.UnwrappedCryptoKey)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes key = 1;
  if (this->key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->key(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:google.privacy.dlp.v2beta1.UnwrappedCryptoKey)
}

::google::protobuf::uint8* UnwrappedCryptoKey::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.privacy.dlp.v2beta1.UnwrappedCryptoKey)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes key = 1;
  if (this->key().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->key(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.privacy.dlp.v2beta1.UnwrappedCryptoKey)
  return target;
}

size_t UnwrappedCryptoKey::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.privacy.dlp.v2beta1.UnwrappedCryptoKey)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // bytes key = 1;
  if (this->key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->key());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UnwrappedCryptoKey::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.privacy.dlp.v2beta1.UnwrappedCryptoKey)
  GOOGLE_DCHECK_NE(&from, this);
  const UnwrappedCryptoKey* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UnwrappedCryptoKey>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.privacy.dlp.v2beta1.UnwrappedCryptoKey)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.privacy.dlp.v2beta1.UnwrappedCryptoKey)
    MergeFrom(*source);
  }
}

void UnwrappedCryptoKey::MergeFrom(const UnwrappedCryptoKey& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.privacy.dlp.v2beta1.UnwrappedCryptoKey)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.key().size() > 0) {

    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
}

void UnwrappedCryptoKey::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.privacy.dlp.v2beta1.UnwrappedCryptoKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UnwrappedCryptoKey::CopyFrom(const UnwrappedCryptoKey& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.privacy.dlp.v2beta1.UnwrappedCryptoKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnwrappedCryptoKey::IsInitialized() const {
  return true;
}

void UnwrappedCryptoKey::Swap(UnwrappedCryptoKey* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UnwrappedCryptoKey::InternalSwap(UnwrappedCryptoKey* other) {
  using std::swap;
  key_.Swap(&other->key_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UnwrappedCryptoKey::GetMetadata() const {
  protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void KmsWrappedCryptoKey::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int KmsWrappedCryptoKey::kWrappedKeyFieldNumber;
const int KmsWrappedCryptoKey::kCryptoKeyNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

KmsWrappedCryptoKey::KmsWrappedCryptoKey()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaultsKmsWrappedCryptoKey();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.privacy.dlp.v2beta1.KmsWrappedCryptoKey)
}
KmsWrappedCryptoKey::KmsWrappedCryptoKey(const KmsWrappedCryptoKey& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  wrapped_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.wrapped_key().size() > 0) {
    wrapped_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.wrapped_key_);
  }
  crypto_key_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.crypto_key_name().size() > 0) {
    crypto_key_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.crypto_key_name_);
  }
  // @@protoc_insertion_point(copy_constructor:google.privacy.dlp.v2beta1.KmsWrappedCryptoKey)
}

void KmsWrappedCryptoKey::SharedCtor() {
  wrapped_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  crypto_key_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

KmsWrappedCryptoKey::~KmsWrappedCryptoKey() {
  // @@protoc_insertion_point(destructor:google.privacy.dlp.v2beta1.KmsWrappedCryptoKey)
  SharedDtor();
}

void KmsWrappedCryptoKey::SharedDtor() {
  wrapped_key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  crypto_key_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void KmsWrappedCryptoKey::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* KmsWrappedCryptoKey::descriptor() {
  ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const KmsWrappedCryptoKey& KmsWrappedCryptoKey::default_instance() {
  ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaultsKmsWrappedCryptoKey();
  return *internal_default_instance();
}

KmsWrappedCryptoKey* KmsWrappedCryptoKey::New(::google::protobuf::Arena* arena) const {
  KmsWrappedCryptoKey* n = new KmsWrappedCryptoKey;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void KmsWrappedCryptoKey::Clear() {
// @@protoc_insertion_point(message_clear_start:google.privacy.dlp.v2beta1.KmsWrappedCryptoKey)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  wrapped_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  crypto_key_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool KmsWrappedCryptoKey::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.privacy.dlp.v2beta1.KmsWrappedCryptoKey)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes wrapped_key = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_wrapped_key()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string crypto_key_name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_crypto_key_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->crypto_key_name().data(), static_cast<int>(this->crypto_key_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.privacy.dlp.v2beta1.KmsWrappedCryptoKey.crypto_key_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.privacy.dlp.v2beta1.KmsWrappedCryptoKey)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.privacy.dlp.v2beta1.KmsWrappedCryptoKey)
  return false;
#undef DO_
}

void KmsWrappedCryptoKey::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.privacy.dlp.v2beta1.KmsWrappedCryptoKey)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes wrapped_key = 1;
  if (this->wrapped_key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->wrapped_key(), output);
  }

  // string crypto_key_name = 2;
  if (this->crypto_key_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->crypto_key_name().data(), static_cast<int>(this->crypto_key_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.privacy.dlp.v2beta1.KmsWrappedCryptoKey.crypto_key_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->crypto_key_name(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:google.privacy.dlp.v2beta1.KmsWrappedCryptoKey)
}

::google::protobuf::uint8* KmsWrappedCryptoKey::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.privacy.dlp.v2beta1.KmsWrappedCryptoKey)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes wrapped_key = 1;
  if (this->wrapped_key().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->wrapped_key(), target);
  }

  // string crypto_key_name = 2;
  if (this->crypto_key_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->crypto_key_name().data(), static_cast<int>(this->crypto_key_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.privacy.dlp.v2beta1.KmsWrappedCryptoKey.crypto_key_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->crypto_key_name(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.privacy.dlp.v2beta1.KmsWrappedCryptoKey)
  return target;
}

size_t KmsWrappedCryptoKey::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.privacy.dlp.v2beta1.KmsWrappedCryptoKey)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // bytes wrapped_key = 1;
  if (this->wrapped_key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->wrapped_key());
  }

  // string crypto_key_name = 2;
  if (this->crypto_key_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->crypto_key_name());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void KmsWrappedCryptoKey::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.privacy.dlp.v2beta1.KmsWrappedCryptoKey)
  GOOGLE_DCHECK_NE(&from, this);
  const KmsWrappedCryptoKey* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const KmsWrappedCryptoKey>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.privacy.dlp.v2beta1.KmsWrappedCryptoKey)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.privacy.dlp.v2beta1.KmsWrappedCryptoKey)
    MergeFrom(*source);
  }
}

void KmsWrappedCryptoKey::MergeFrom(const KmsWrappedCryptoKey& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.privacy.dlp.v2beta1.KmsWrappedCryptoKey)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.wrapped_key().size() > 0) {

    wrapped_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.wrapped_key_);
  }
  if (from.crypto_key_name().size() > 0) {

    crypto_key_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.crypto_key_name_);
  }
}

void KmsWrappedCryptoKey::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.privacy.dlp.v2beta1.KmsWrappedCryptoKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KmsWrappedCryptoKey::CopyFrom(const KmsWrappedCryptoKey& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.privacy.dlp.v2beta1.KmsWrappedCryptoKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KmsWrappedCryptoKey::IsInitialized() const {
  return true;
}

void KmsWrappedCryptoKey::Swap(KmsWrappedCryptoKey* other) {
  if (other == this) return;
  InternalSwap(other);
}
void KmsWrappedCryptoKey::InternalSwap(KmsWrappedCryptoKey* other) {
  using std::swap;
  wrapped_key_.Swap(&other->wrapped_key_);
  crypto_key_name_.Swap(&other->crypto_key_name_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata KmsWrappedCryptoKey::GetMetadata() const {
  protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void InfoTypeTransformations_InfoTypeTransformation::InitAsDefaultInstance() {
  ::google::privacy::dlp::v2beta1::_InfoTypeTransformations_InfoTypeTransformation_default_instance_._instance.get_mutable()->primitive_transformation_ = const_cast< ::google::privacy::dlp::v2beta1::PrimitiveTransformation*>(
      ::google::privacy::dlp::v2beta1::PrimitiveTransformation::internal_default_instance());
}
void InfoTypeTransformations_InfoTypeTransformation::clear_info_types() {
  info_types_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int InfoTypeTransformations_InfoTypeTransformation::kInfoTypesFieldNumber;
const int InfoTypeTransformations_InfoTypeTransformation::kPrimitiveTransformationFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

InfoTypeTransformations_InfoTypeTransformation::InfoTypeTransformations_InfoTypeTransformation()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaultsInfoTypeTransformations_InfoTypeTransformation();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.privacy.dlp.v2beta1.InfoTypeTransformations.InfoTypeTransformation)
}
InfoTypeTransformations_InfoTypeTransformation::InfoTypeTransformations_InfoTypeTransformation(const InfoTypeTransformations_InfoTypeTransformation& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      info_types_(from.info_types_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_primitive_transformation()) {
    primitive_transformation_ = new ::google::privacy::dlp::v2beta1::PrimitiveTransformation(*from.primitive_transformation_);
  } else {
    primitive_transformation_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:google.privacy.dlp.v2beta1.InfoTypeTransformations.InfoTypeTransformation)
}

void InfoTypeTransformations_InfoTypeTransformation::SharedCtor() {
  primitive_transformation_ = NULL;
  _cached_size_ = 0;
}

InfoTypeTransformations_InfoTypeTransformation::~InfoTypeTransformations_InfoTypeTransformation() {
  // @@protoc_insertion_point(destructor:google.privacy.dlp.v2beta1.InfoTypeTransformations.InfoTypeTransformation)
  SharedDtor();
}

void InfoTypeTransformations_InfoTypeTransformation::SharedDtor() {
  if (this != internal_default_instance()) delete primitive_transformation_;
}

void InfoTypeTransformations_InfoTypeTransformation::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InfoTypeTransformations_InfoTypeTransformation::descriptor() {
  ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const InfoTypeTransformations_InfoTypeTransformation& InfoTypeTransformations_InfoTypeTransformation::default_instance() {
  ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaultsInfoTypeTransformations_InfoTypeTransformation();
  return *internal_default_instance();
}

InfoTypeTransformations_InfoTypeTransformation* InfoTypeTransformations_InfoTypeTransformation::New(::google::protobuf::Arena* arena) const {
  InfoTypeTransformations_InfoTypeTransformation* n = new InfoTypeTransformations_InfoTypeTransformation;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void InfoTypeTransformations_InfoTypeTransformation::Clear() {
// @@protoc_insertion_point(message_clear_start:google.privacy.dlp.v2beta1.InfoTypeTransformations.InfoTypeTransformation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  info_types_.Clear();
  if (GetArenaNoVirtual() == NULL && primitive_transformation_ != NULL) {
    delete primitive_transformation_;
  }
  primitive_transformation_ = NULL;
  _internal_metadata_.Clear();
}

bool InfoTypeTransformations_InfoTypeTransformation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.privacy.dlp.v2beta1.InfoTypeTransformations.InfoTypeTransformation)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .google.privacy.dlp.v2beta1.InfoType info_types = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_info_types()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.privacy.dlp.v2beta1.PrimitiveTransformation primitive_transformation = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_primitive_transformation()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.privacy.dlp.v2beta1.InfoTypeTransformations.InfoTypeTransformation)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.privacy.dlp.v2beta1.InfoTypeTransformations.InfoTypeTransformation)
  return false;
#undef DO_
}

void InfoTypeTransformations_InfoTypeTransformation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.privacy.dlp.v2beta1.InfoTypeTransformations.InfoTypeTransformation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .google.privacy.dlp.v2beta1.InfoType info_types = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->info_types_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->info_types(static_cast<int>(i)), output);
  }

  // .google.privacy.dlp.v2beta1.PrimitiveTransformation primitive_transformation = 2;
  if (this->has_primitive_transformation()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->primitive_transformation_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:google.privacy.dlp.v2beta1.InfoTypeTransformations.InfoTypeTransformation)
}

::google::protobuf::uint8* InfoTypeTransformations_InfoTypeTransformation::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.privacy.dlp.v2beta1.InfoTypeTransformations.InfoTypeTransformation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .google.privacy.dlp.v2beta1.InfoType info_types = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->info_types_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->info_types(static_cast<int>(i)), deterministic, target);
  }

  // .google.privacy.dlp.v2beta1.PrimitiveTransformation primitive_transformation = 2;
  if (this->has_primitive_transformation()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, *this->primitive_transformation_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.privacy.dlp.v2beta1.InfoTypeTransformations.InfoTypeTransformation)
  return target;
}

size_t InfoTypeTransformations_InfoTypeTransformation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.privacy.dlp.v2beta1.InfoTypeTransformations.InfoTypeTransformation)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .google.privacy.dlp.v2beta1.InfoType info_types = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->info_types_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->info_types(static_cast<int>(i)));
    }
  }

  // .google.privacy.dlp.v2beta1.PrimitiveTransformation primitive_transformation = 2;
  if (this->has_primitive_transformation()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->primitive_transformation_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InfoTypeTransformations_InfoTypeTransformation::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.privacy.dlp.v2beta1.InfoTypeTransformations.InfoTypeTransformation)
  GOOGLE_DCHECK_NE(&from, this);
  const InfoTypeTransformations_InfoTypeTransformation* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const InfoTypeTransformations_InfoTypeTransformation>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.privacy.dlp.v2beta1.InfoTypeTransformations.InfoTypeTransformation)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.privacy.dlp.v2beta1.InfoTypeTransformations.InfoTypeTransformation)
    MergeFrom(*source);
  }
}

void InfoTypeTransformations_InfoTypeTransformation::MergeFrom(const InfoTypeTransformations_InfoTypeTransformation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.privacy.dlp.v2beta1.InfoTypeTransformations.InfoTypeTransformation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  info_types_.MergeFrom(from.info_types_);
  if (from.has_primitive_transformation()) {
    mutable_primitive_transformation()->::google::privacy::dlp::v2beta1::PrimitiveTransformation::MergeFrom(from.primitive_transformation());
  }
}

void InfoTypeTransformations_InfoTypeTransformation::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.privacy.dlp.v2beta1.InfoTypeTransformations.InfoTypeTransformation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InfoTypeTransformations_InfoTypeTransformation::CopyFrom(const InfoTypeTransformations_InfoTypeTransformation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.privacy.dlp.v2beta1.InfoTypeTransformations.InfoTypeTransformation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InfoTypeTransformations_InfoTypeTransformation::IsInitialized() const {
  return true;
}

void InfoTypeTransformations_InfoTypeTransformation::Swap(InfoTypeTransformations_InfoTypeTransformation* other) {
  if (other == this) return;
  InternalSwap(other);
}
void InfoTypeTransformations_InfoTypeTransformation::InternalSwap(InfoTypeTransformations_InfoTypeTransformation* other) {
  using std::swap;
  info_types_.InternalSwap(&other->info_types_);
  swap(primitive_transformation_, other->primitive_transformation_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata InfoTypeTransformations_InfoTypeTransformation::GetMetadata() const {
  protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void InfoTypeTransformations::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int InfoTypeTransformations::kTransformationsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

InfoTypeTransformations::InfoTypeTransformations()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaultsInfoTypeTransformations();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.privacy.dlp.v2beta1.InfoTypeTransformations)
}
InfoTypeTransformations::InfoTypeTransformations(const InfoTypeTransformations& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      transformations_(from.transformations_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:google.privacy.dlp.v2beta1.InfoTypeTransformations)
}

void InfoTypeTransformations::SharedCtor() {
  _cached_size_ = 0;
}

InfoTypeTransformations::~InfoTypeTransformations() {
  // @@protoc_insertion_point(destructor:google.privacy.dlp.v2beta1.InfoTypeTransformations)
  SharedDtor();
}

void InfoTypeTransformations::SharedDtor() {
}

void InfoTypeTransformations::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InfoTypeTransformations::descriptor() {
  ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const InfoTypeTransformations& InfoTypeTransformations::default_instance() {
  ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaultsInfoTypeTransformations();
  return *internal_default_instance();
}

InfoTypeTransformations* InfoTypeTransformations::New(::google::protobuf::Arena* arena) const {
  InfoTypeTransformations* n = new InfoTypeTransformations;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void InfoTypeTransformations::Clear() {
// @@protoc_insertion_point(message_clear_start:google.privacy.dlp.v2beta1.InfoTypeTransformations)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  transformations_.Clear();
  _internal_metadata_.Clear();
}

bool InfoTypeTransformations::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.privacy.dlp.v2beta1.InfoTypeTransformations)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .google.privacy.dlp.v2beta1.InfoTypeTransformations.InfoTypeTransformation transformations = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_transformations()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.privacy.dlp.v2beta1.InfoTypeTransformations)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.privacy.dlp.v2beta1.InfoTypeTransformations)
  return false;
#undef DO_
}

void InfoTypeTransformations::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.privacy.dlp.v2beta1.InfoTypeTransformations)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .google.privacy.dlp.v2beta1.InfoTypeTransformations.InfoTypeTransformation transformations = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->transformations_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->transformations(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:google.privacy.dlp.v2beta1.InfoTypeTransformations)
}

::google::protobuf::uint8* InfoTypeTransformations::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.privacy.dlp.v2beta1.InfoTypeTransformations)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .google.privacy.dlp.v2beta1.InfoTypeTransformations.InfoTypeTransformation transformations = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->transformations_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->transformations(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.privacy.dlp.v2beta1.InfoTypeTransformations)
  return target;
}

size_t InfoTypeTransformations::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.privacy.dlp.v2beta1.InfoTypeTransformations)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .google.privacy.dlp.v2beta1.InfoTypeTransformations.InfoTypeTransformation transformations = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->transformations_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->transformations(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InfoTypeTransformations::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.privacy.dlp.v2beta1.InfoTypeTransformations)
  GOOGLE_DCHECK_NE(&from, this);
  const InfoTypeTransformations* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const InfoTypeTransformations>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.privacy.dlp.v2beta1.InfoTypeTransformations)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.privacy.dlp.v2beta1.InfoTypeTransformations)
    MergeFrom(*source);
  }
}

void InfoTypeTransformations::MergeFrom(const InfoTypeTransformations& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.privacy.dlp.v2beta1.InfoTypeTransformations)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  transformations_.MergeFrom(from.transformations_);
}

void InfoTypeTransformations::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.privacy.dlp.v2beta1.InfoTypeTransformations)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InfoTypeTransformations::CopyFrom(const InfoTypeTransformations& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.privacy.dlp.v2beta1.InfoTypeTransformations)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InfoTypeTransformations::IsInitialized() const {
  return true;
}

void InfoTypeTransformations::Swap(InfoTypeTransformations* other) {
  if (other == this) return;
  InternalSwap(other);
}
void InfoTypeTransformations::InternalSwap(InfoTypeTransformations* other) {
  using std::swap;
  transformations_.InternalSwap(&other->transformations_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata InfoTypeTransformations::GetMetadata() const {
  protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void FieldTransformation::InitAsDefaultInstance() {
  ::google::privacy::dlp::v2beta1::_FieldTransformation_default_instance_._instance.get_mutable()->condition_ = const_cast< ::google::privacy::dlp::v2beta1::RecordCondition*>(
      ::google::privacy::dlp::v2beta1::RecordCondition::internal_default_instance());
  ::google::privacy::dlp::v2beta1::_FieldTransformation_default_instance_.primitive_transformation_ = const_cast< ::google::privacy::dlp::v2beta1::PrimitiveTransformation*>(
      ::google::privacy::dlp::v2beta1::PrimitiveTransformation::internal_default_instance());
  ::google::privacy::dlp::v2beta1::_FieldTransformation_default_instance_.info_type_transformations_ = const_cast< ::google::privacy::dlp::v2beta1::InfoTypeTransformations*>(
      ::google::privacy::dlp::v2beta1::InfoTypeTransformations::internal_default_instance());
}
void FieldTransformation::clear_fields() {
  fields_.Clear();
}
void FieldTransformation::set_allocated_primitive_transformation(::google::privacy::dlp::v2beta1::PrimitiveTransformation* primitive_transformation) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_transformation();
  if (primitive_transformation) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      primitive_transformation = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, primitive_transformation, submessage_arena);
    }
    set_has_primitive_transformation();
    transformation_.primitive_transformation_ = primitive_transformation;
  }
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2beta1.FieldTransformation.primitive_transformation)
}
void FieldTransformation::set_allocated_info_type_transformations(::google::privacy::dlp::v2beta1::InfoTypeTransformations* info_type_transformations) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_transformation();
  if (info_type_transformations) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      info_type_transformations = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, info_type_transformations, submessage_arena);
    }
    set_has_info_type_transformations();
    transformation_.info_type_transformations_ = info_type_transformations;
  }
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2beta1.FieldTransformation.info_type_transformations)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FieldTransformation::kFieldsFieldNumber;
const int FieldTransformation::kConditionFieldNumber;
const int FieldTransformation::kPrimitiveTransformationFieldNumber;
const int FieldTransformation::kInfoTypeTransformationsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FieldTransformation::FieldTransformation()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaultsFieldTransformation();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.privacy.dlp.v2beta1.FieldTransformation)
}
FieldTransformation::FieldTransformation(const FieldTransformation& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      fields_(from.fields_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_condition()) {
    condition_ = new ::google::privacy::dlp::v2beta1::RecordCondition(*from.condition_);
  } else {
    condition_ = NULL;
  }
  clear_has_transformation();
  switch (from.transformation_case()) {
    case kPrimitiveTransformation: {
      mutable_primitive_transformation()->::google::privacy::dlp::v2beta1::PrimitiveTransformation::MergeFrom(from.primitive_transformation());
      break;
    }
    case kInfoTypeTransformations: {
      mutable_info_type_transformations()->::google::privacy::dlp::v2beta1::InfoTypeTransformations::MergeFrom(from.info_type_transformations());
      break;
    }
    case TRANSFORMATION_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:google.privacy.dlp.v2beta1.FieldTransformation)
}

void FieldTransformation::SharedCtor() {
  condition_ = NULL;
  clear_has_transformation();
  _cached_size_ = 0;
}

FieldTransformation::~FieldTransformation() {
  // @@protoc_insertion_point(destructor:google.privacy.dlp.v2beta1.FieldTransformation)
  SharedDtor();
}

void FieldTransformation::SharedDtor() {
  if (this != internal_default_instance()) delete condition_;
  if (has_transformation()) {
    clear_transformation();
  }
}

void FieldTransformation::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FieldTransformation::descriptor() {
  ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FieldTransformation& FieldTransformation::default_instance() {
  ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaultsFieldTransformation();
  return *internal_default_instance();
}

FieldTransformation* FieldTransformation::New(::google::protobuf::Arena* arena) const {
  FieldTransformation* n = new FieldTransformation;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FieldTransformation::clear_transformation() {
// @@protoc_insertion_point(one_of_clear_start:google.privacy.dlp.v2beta1.FieldTransformation)
  switch (transformation_case()) {
    case kPrimitiveTransformation: {
      delete transformation_.primitive_transformation_;
      break;
    }
    case kInfoTypeTransformations: {
      delete transformation_.info_type_transformations_;
      break;
    }
    case TRANSFORMATION_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = TRANSFORMATION_NOT_SET;
}


void FieldTransformation::Clear() {
// @@protoc_insertion_point(message_clear_start:google.privacy.dlp.v2beta1.FieldTransformation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  fields_.Clear();
  if (GetArenaNoVirtual() == NULL && condition_ != NULL) {
    delete condition_;
  }
  condition_ = NULL;
  clear_transformation();
  _internal_metadata_.Clear();
}

bool FieldTransformation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.privacy.dlp.v2beta1.FieldTransformation)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .google.privacy.dlp.v2beta1.FieldId fields = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_fields()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.privacy.dlp.v2beta1.RecordCondition condition = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_condition()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.privacy.dlp.v2beta1.PrimitiveTransformation primitive_transformation = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_primitive_transformation()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.privacy.dlp.v2beta1.InfoTypeTransformations info_type_transformations = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_info_type_transformations()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.privacy.dlp.v2beta1.FieldTransformation)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.privacy.dlp.v2beta1.FieldTransformation)
  return false;
#undef DO_
}

void FieldTransformation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.privacy.dlp.v2beta1.FieldTransformation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .google.privacy.dlp.v2beta1.FieldId fields = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->fields_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->fields(static_cast<int>(i)), output);
  }

  // .google.privacy.dlp.v2beta1.RecordCondition condition = 3;
  if (this->has_condition()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->condition_, output);
  }

  // .google.privacy.dlp.v2beta1.PrimitiveTransformation primitive_transformation = 4;
  if (has_primitive_transformation()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *transformation_.primitive_transformation_, output);
  }

  // .google.privacy.dlp.v2beta1.InfoTypeTransformations info_type_transformations = 5;
  if (has_info_type_transformations()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *transformation_.info_type_transformations_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:google.privacy.dlp.v2beta1.FieldTransformation)
}

::google::protobuf::uint8* FieldTransformation::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.privacy.dlp.v2beta1.FieldTransformation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .google.privacy.dlp.v2beta1.FieldId fields = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->fields_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->fields(static_cast<int>(i)), deterministic, target);
  }

  // .google.privacy.dlp.v2beta1.RecordCondition condition = 3;
  if (this->has_condition()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, *this->condition_, deterministic, target);
  }

  // .google.privacy.dlp.v2beta1.PrimitiveTransformation primitive_transformation = 4;
  if (has_primitive_transformation()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, *transformation_.primitive_transformation_, deterministic, target);
  }

  // .google.privacy.dlp.v2beta1.InfoTypeTransformations info_type_transformations = 5;
  if (has_info_type_transformations()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, *transformation_.info_type_transformations_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.privacy.dlp.v2beta1.FieldTransformation)
  return target;
}

size_t FieldTransformation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.privacy.dlp.v2beta1.FieldTransformation)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .google.privacy.dlp.v2beta1.FieldId fields = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->fields_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->fields(static_cast<int>(i)));
    }
  }

  // .google.privacy.dlp.v2beta1.RecordCondition condition = 3;
  if (this->has_condition()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->condition_);
  }

  switch (transformation_case()) {
    // .google.privacy.dlp.v2beta1.PrimitiveTransformation primitive_transformation = 4;
    case kPrimitiveTransformation: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *transformation_.primitive_transformation_);
      break;
    }
    // .google.privacy.dlp.v2beta1.InfoTypeTransformations info_type_transformations = 5;
    case kInfoTypeTransformations: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *transformation_.info_type_transformations_);
      break;
    }
    case TRANSFORMATION_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FieldTransformation::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.privacy.dlp.v2beta1.FieldTransformation)
  GOOGLE_DCHECK_NE(&from, this);
  const FieldTransformation* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FieldTransformation>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.privacy.dlp.v2beta1.FieldTransformation)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.privacy.dlp.v2beta1.FieldTransformation)
    MergeFrom(*source);
  }
}

void FieldTransformation::MergeFrom(const FieldTransformation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.privacy.dlp.v2beta1.FieldTransformation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  fields_.MergeFrom(from.fields_);
  if (from.has_condition()) {
    mutable_condition()->::google::privacy::dlp::v2beta1::RecordCondition::MergeFrom(from.condition());
  }
  switch (from.transformation_case()) {
    case kPrimitiveTransformation: {
      mutable_primitive_transformation()->::google::privacy::dlp::v2beta1::PrimitiveTransformation::MergeFrom(from.primitive_transformation());
      break;
    }
    case kInfoTypeTransformations: {
      mutable_info_type_transformations()->::google::privacy::dlp::v2beta1::InfoTypeTransformations::MergeFrom(from.info_type_transformations());
      break;
    }
    case TRANSFORMATION_NOT_SET: {
      break;
    }
  }
}

void FieldTransformation::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.privacy.dlp.v2beta1.FieldTransformation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FieldTransformation::CopyFrom(const FieldTransformation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.privacy.dlp.v2beta1.FieldTransformation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FieldTransformation::IsInitialized() const {
  return true;
}

void FieldTransformation::Swap(FieldTransformation* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FieldTransformation::InternalSwap(FieldTransformation* other) {
  using std::swap;
  fields_.InternalSwap(&other->fields_);
  swap(condition_, other->condition_);
  swap(transformation_, other->transformation_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FieldTransformation::GetMetadata() const {
  protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void RecordTransformations::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RecordTransformations::kFieldTransformationsFieldNumber;
const int RecordTransformations::kRecordSuppressionsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RecordTransformations::RecordTransformations()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaultsRecordTransformations();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.privacy.dlp.v2beta1.RecordTransformations)
}
RecordTransformations::RecordTransformations(const RecordTransformations& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      field_transformations_(from.field_transformations_),
      record_suppressions_(from.record_suppressions_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:google.privacy.dlp.v2beta1.RecordTransformations)
}

void RecordTransformations::SharedCtor() {
  _cached_size_ = 0;
}

RecordTransformations::~RecordTransformations() {
  // @@protoc_insertion_point(destructor:google.privacy.dlp.v2beta1.RecordTransformations)
  SharedDtor();
}

void RecordTransformations::SharedDtor() {
}

void RecordTransformations::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RecordTransformations::descriptor() {
  ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RecordTransformations& RecordTransformations::default_instance() {
  ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaultsRecordTransformations();
  return *internal_default_instance();
}

RecordTransformations* RecordTransformations::New(::google::protobuf::Arena* arena) const {
  RecordTransformations* n = new RecordTransformations;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RecordTransformations::Clear() {
// @@protoc_insertion_point(message_clear_start:google.privacy.dlp.v2beta1.RecordTransformations)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  field_transformations_.Clear();
  record_suppressions_.Clear();
  _internal_metadata_.Clear();
}

bool RecordTransformations::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.privacy.dlp.v2beta1.RecordTransformations)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .google.privacy.dlp.v2beta1.FieldTransformation field_transformations = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_field_transformations()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .google.privacy.dlp.v2beta1.RecordSuppression record_suppressions = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_record_suppressions()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.privacy.dlp.v2beta1.RecordTransformations)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.privacy.dlp.v2beta1.RecordTransformations)
  return false;
#undef DO_
}

void RecordTransformations::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.privacy.dlp.v2beta1.RecordTransformations)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .google.privacy.dlp.v2beta1.FieldTransformation field_transformations = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->field_transformations_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->field_transformations(static_cast<int>(i)), output);
  }

  // repeated .google.privacy.dlp.v2beta1.RecordSuppression record_suppressions = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->record_suppressions_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->record_suppressions(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:google.privacy.dlp.v2beta1.RecordTransformations)
}

::google::protobuf::uint8* RecordTransformations::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.privacy.dlp.v2beta1.RecordTransformations)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .google.privacy.dlp.v2beta1.FieldTransformation field_transformations = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->field_transformations_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->field_transformations(static_cast<int>(i)), deterministic, target);
  }

  // repeated .google.privacy.dlp.v2beta1.RecordSuppression record_suppressions = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->record_suppressions_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->record_suppressions(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.privacy.dlp.v2beta1.RecordTransformations)
  return target;
}

size_t RecordTransformations::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.privacy.dlp.v2beta1.RecordTransformations)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .google.privacy.dlp.v2beta1.FieldTransformation field_transformations = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->field_transformations_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->field_transformations(static_cast<int>(i)));
    }
  }

  // repeated .google.privacy.dlp.v2beta1.RecordSuppression record_suppressions = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->record_suppressions_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->record_suppressions(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RecordTransformations::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.privacy.dlp.v2beta1.RecordTransformations)
  GOOGLE_DCHECK_NE(&from, this);
  const RecordTransformations* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RecordTransformations>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.privacy.dlp.v2beta1.RecordTransformations)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.privacy.dlp.v2beta1.RecordTransformations)
    MergeFrom(*source);
  }
}

void RecordTransformations::MergeFrom(const RecordTransformations& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.privacy.dlp.v2beta1.RecordTransformations)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  field_transformations_.MergeFrom(from.field_transformations_);
  record_suppressions_.MergeFrom(from.record_suppressions_);
}

void RecordTransformations::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.privacy.dlp.v2beta1.RecordTransformations)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RecordTransformations::CopyFrom(const RecordTransformations& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.privacy.dlp.v2beta1.RecordTransformations)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RecordTransformations::IsInitialized() const {
  return true;
}

void RecordTransformations::Swap(RecordTransformations* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RecordTransformations::InternalSwap(RecordTransformations* other) {
  using std::swap;
  field_transformations_.InternalSwap(&other->field_transformations_);
  record_suppressions_.InternalSwap(&other->record_suppressions_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RecordTransformations::GetMetadata() const {
  protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void RecordSuppression::InitAsDefaultInstance() {
  ::google::privacy::dlp::v2beta1::_RecordSuppression_default_instance_._instance.get_mutable()->condition_ = const_cast< ::google::privacy::dlp::v2beta1::RecordCondition*>(
      ::google::privacy::dlp::v2beta1::RecordCondition::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RecordSuppression::kConditionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RecordSuppression::RecordSuppression()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaultsRecordSuppression();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.privacy.dlp.v2beta1.RecordSuppression)
}
RecordSuppression::RecordSuppression(const RecordSuppression& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_condition()) {
    condition_ = new ::google::privacy::dlp::v2beta1::RecordCondition(*from.condition_);
  } else {
    condition_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:google.privacy.dlp.v2beta1.RecordSuppression)
}

void RecordSuppression::SharedCtor() {
  condition_ = NULL;
  _cached_size_ = 0;
}

RecordSuppression::~RecordSuppression() {
  // @@protoc_insertion_point(destructor:google.privacy.dlp.v2beta1.RecordSuppression)
  SharedDtor();
}

void RecordSuppression::SharedDtor() {
  if (this != internal_default_instance()) delete condition_;
}

void RecordSuppression::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RecordSuppression::descriptor() {
  ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RecordSuppression& RecordSuppression::default_instance() {
  ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaultsRecordSuppression();
  return *internal_default_instance();
}

RecordSuppression* RecordSuppression::New(::google::protobuf::Arena* arena) const {
  RecordSuppression* n = new RecordSuppression;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RecordSuppression::Clear() {
// @@protoc_insertion_point(message_clear_start:google.privacy.dlp.v2beta1.RecordSuppression)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && condition_ != NULL) {
    delete condition_;
  }
  condition_ = NULL;
  _internal_metadata_.Clear();
}

bool RecordSuppression::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.privacy.dlp.v2beta1.RecordSuppression)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .google.privacy.dlp.v2beta1.RecordCondition condition = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_condition()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.privacy.dlp.v2beta1.RecordSuppression)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.privacy.dlp.v2beta1.RecordSuppression)
  return false;
#undef DO_
}

void RecordSuppression::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.privacy.dlp.v2beta1.RecordSuppression)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.privacy.dlp.v2beta1.RecordCondition condition = 1;
  if (this->has_condition()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->condition_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:google.privacy.dlp.v2beta1.RecordSuppression)
}

::google::protobuf::uint8* RecordSuppression::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.privacy.dlp.v2beta1.RecordSuppression)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.privacy.dlp.v2beta1.RecordCondition condition = 1;
  if (this->has_condition()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->condition_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.privacy.dlp.v2beta1.RecordSuppression)
  return target;
}

size_t RecordSuppression::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.privacy.dlp.v2beta1.RecordSuppression)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .google.privacy.dlp.v2beta1.RecordCondition condition = 1;
  if (this->has_condition()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->condition_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RecordSuppression::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.privacy.dlp.v2beta1.RecordSuppression)
  GOOGLE_DCHECK_NE(&from, this);
  const RecordSuppression* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RecordSuppression>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.privacy.dlp.v2beta1.RecordSuppression)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.privacy.dlp.v2beta1.RecordSuppression)
    MergeFrom(*source);
  }
}

void RecordSuppression::MergeFrom(const RecordSuppression& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.privacy.dlp.v2beta1.RecordSuppression)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_condition()) {
    mutable_condition()->::google::privacy::dlp::v2beta1::RecordCondition::MergeFrom(from.condition());
  }
}

void RecordSuppression::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.privacy.dlp.v2beta1.RecordSuppression)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RecordSuppression::CopyFrom(const RecordSuppression& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.privacy.dlp.v2beta1.RecordSuppression)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RecordSuppression::IsInitialized() const {
  return true;
}

void RecordSuppression::Swap(RecordSuppression* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RecordSuppression::InternalSwap(RecordSuppression* other) {
  using std::swap;
  swap(condition_, other->condition_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RecordSuppression::GetMetadata() const {
  protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void RecordCondition_Condition::InitAsDefaultInstance() {
  ::google::privacy::dlp::v2beta1::_RecordCondition_Condition_default_instance_._instance.get_mutable()->field_ = const_cast< ::google::privacy::dlp::v2beta1::FieldId*>(
      ::google::privacy::dlp::v2beta1::FieldId::internal_default_instance());
  ::google::privacy::dlp::v2beta1::_RecordCondition_Condition_default_instance_._instance.get_mutable()->value_ = const_cast< ::google::privacy::dlp::v2beta1::Value*>(
      ::google::privacy::dlp::v2beta1::Value::internal_default_instance());
}
void RecordCondition_Condition::clear_field() {
  if (GetArenaNoVirtual() == NULL && field_ != NULL) {
    delete field_;
  }
  field_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RecordCondition_Condition::kFieldFieldNumber;
const int RecordCondition_Condition::kOperatorFieldNumber;
const int RecordCondition_Condition::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RecordCondition_Condition::RecordCondition_Condition()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaultsRecordCondition_Condition();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.privacy.dlp.v2beta1.RecordCondition.Condition)
}
RecordCondition_Condition::RecordCondition_Condition(const RecordCondition_Condition& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_field()) {
    field_ = new ::google::privacy::dlp::v2beta1::FieldId(*from.field_);
  } else {
    field_ = NULL;
  }
  if (from.has_value()) {
    value_ = new ::google::privacy::dlp::v2beta1::Value(*from.value_);
  } else {
    value_ = NULL;
  }
  operator__ = from.operator__;
  // @@protoc_insertion_point(copy_constructor:google.privacy.dlp.v2beta1.RecordCondition.Condition)
}

void RecordCondition_Condition::SharedCtor() {
  ::memset(&field_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&operator__) -
      reinterpret_cast<char*>(&field_)) + sizeof(operator__));
  _cached_size_ = 0;
}

RecordCondition_Condition::~RecordCondition_Condition() {
  // @@protoc_insertion_point(destructor:google.privacy.dlp.v2beta1.RecordCondition.Condition)
  SharedDtor();
}

void RecordCondition_Condition::SharedDtor() {
  if (this != internal_default_instance()) delete field_;
  if (this != internal_default_instance()) delete value_;
}

void RecordCondition_Condition::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RecordCondition_Condition::descriptor() {
  ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RecordCondition_Condition& RecordCondition_Condition::default_instance() {
  ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaultsRecordCondition_Condition();
  return *internal_default_instance();
}

RecordCondition_Condition* RecordCondition_Condition::New(::google::protobuf::Arena* arena) const {
  RecordCondition_Condition* n = new RecordCondition_Condition;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RecordCondition_Condition::Clear() {
// @@protoc_insertion_point(message_clear_start:google.privacy.dlp.v2beta1.RecordCondition.Condition)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && field_ != NULL) {
    delete field_;
  }
  field_ = NULL;
  if (GetArenaNoVirtual() == NULL && value_ != NULL) {
    delete value_;
  }
  value_ = NULL;
  operator__ = 0;
  _internal_metadata_.Clear();
}

bool RecordCondition_Condition::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.privacy.dlp.v2beta1.RecordCondition.Condition)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .google.privacy.dlp.v2beta1.FieldId field = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_field()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.privacy.dlp.v2beta1.RelationalOperator operator = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_operator_(static_cast< ::google::privacy::dlp::v2beta1::RelationalOperator >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.privacy.dlp.v2beta1.Value value = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_value()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.privacy.dlp.v2beta1.RecordCondition.Condition)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.privacy.dlp.v2beta1.RecordCondition.Condition)
  return false;
#undef DO_
}

void RecordCondition_Condition::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.privacy.dlp.v2beta1.RecordCondition.Condition)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.privacy.dlp.v2beta1.FieldId field = 1;
  if (this->has_field()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->field_, output);
  }

  // .google.privacy.dlp.v2beta1.RelationalOperator operator = 3;
  if (this->operator_() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->operator_(), output);
  }

  // .google.privacy.dlp.v2beta1.Value value = 4;
  if (this->has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->value_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:google.privacy.dlp.v2beta1.RecordCondition.Condition)
}

::google::protobuf::uint8* RecordCondition_Condition::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.privacy.dlp.v2beta1.RecordCondition.Condition)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.privacy.dlp.v2beta1.FieldId field = 1;
  if (this->has_field()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->field_, deterministic, target);
  }

  // .google.privacy.dlp.v2beta1.RelationalOperator operator = 3;
  if (this->operator_() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->operator_(), target);
  }

  // .google.privacy.dlp.v2beta1.Value value = 4;
  if (this->has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, *this->value_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.privacy.dlp.v2beta1.RecordCondition.Condition)
  return target;
}

size_t RecordCondition_Condition::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.privacy.dlp.v2beta1.RecordCondition.Condition)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .google.privacy.dlp.v2beta1.FieldId field = 1;
  if (this->has_field()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->field_);
  }

  // .google.privacy.dlp.v2beta1.Value value = 4;
  if (this->has_value()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->value_);
  }

  // .google.privacy.dlp.v2beta1.RelationalOperator operator = 3;
  if (this->operator_() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->operator_());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RecordCondition_Condition::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.privacy.dlp.v2beta1.RecordCondition.Condition)
  GOOGLE_DCHECK_NE(&from, this);
  const RecordCondition_Condition* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RecordCondition_Condition>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.privacy.dlp.v2beta1.RecordCondition.Condition)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.privacy.dlp.v2beta1.RecordCondition.Condition)
    MergeFrom(*source);
  }
}

void RecordCondition_Condition::MergeFrom(const RecordCondition_Condition& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.privacy.dlp.v2beta1.RecordCondition.Condition)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_field()) {
    mutable_field()->::google::privacy::dlp::v2beta1::FieldId::MergeFrom(from.field());
  }
  if (from.has_value()) {
    mutable_value()->::google::privacy::dlp::v2beta1::Value::MergeFrom(from.value());
  }
  if (from.operator_() != 0) {
    set_operator_(from.operator_());
  }
}

void RecordCondition_Condition::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.privacy.dlp.v2beta1.RecordCondition.Condition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RecordCondition_Condition::CopyFrom(const RecordCondition_Condition& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.privacy.dlp.v2beta1.RecordCondition.Condition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RecordCondition_Condition::IsInitialized() const {
  return true;
}

void RecordCondition_Condition::Swap(RecordCondition_Condition* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RecordCondition_Condition::InternalSwap(RecordCondition_Condition* other) {
  using std::swap;
  swap(field_, other->field_);
  swap(value_, other->value_);
  swap(operator__, other->operator__);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RecordCondition_Condition::GetMetadata() const {
  protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void RecordCondition_Conditions::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RecordCondition_Conditions::kConditionsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RecordCondition_Conditions::RecordCondition_Conditions()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaultsRecordCondition_Conditions();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.privacy.dlp.v2beta1.RecordCondition.Conditions)
}
RecordCondition_Conditions::RecordCondition_Conditions(const RecordCondition_Conditions& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      conditions_(from.conditions_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:google.privacy.dlp.v2beta1.RecordCondition.Conditions)
}

void RecordCondition_Conditions::SharedCtor() {
  _cached_size_ = 0;
}

RecordCondition_Conditions::~RecordCondition_Conditions() {
  // @@protoc_insertion_point(destructor:google.privacy.dlp.v2beta1.RecordCondition.Conditions)
  SharedDtor();
}

void RecordCondition_Conditions::SharedDtor() {
}

void RecordCondition_Conditions::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RecordCondition_Conditions::descriptor() {
  ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RecordCondition_Conditions& RecordCondition_Conditions::default_instance() {
  ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaultsRecordCondition_Conditions();
  return *internal_default_instance();
}

RecordCondition_Conditions* RecordCondition_Conditions::New(::google::protobuf::Arena* arena) const {
  RecordCondition_Conditions* n = new RecordCondition_Conditions;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RecordCondition_Conditions::Clear() {
// @@protoc_insertion_point(message_clear_start:google.privacy.dlp.v2beta1.RecordCondition.Conditions)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  conditions_.Clear();
  _internal_metadata_.Clear();
}

bool RecordCondition_Conditions::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.privacy.dlp.v2beta1.RecordCondition.Conditions)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .google.privacy.dlp.v2beta1.RecordCondition.Condition conditions = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_conditions()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.privacy.dlp.v2beta1.RecordCondition.Conditions)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.privacy.dlp.v2beta1.RecordCondition.Conditions)
  return false;
#undef DO_
}

void RecordCondition_Conditions::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.privacy.dlp.v2beta1.RecordCondition.Conditions)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .google.privacy.dlp.v2beta1.RecordCondition.Condition conditions = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->conditions_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->conditions(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:google.privacy.dlp.v2beta1.RecordCondition.Conditions)
}

::google::protobuf::uint8* RecordCondition_Conditions::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.privacy.dlp.v2beta1.RecordCondition.Conditions)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .google.privacy.dlp.v2beta1.RecordCondition.Condition conditions = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->conditions_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->conditions(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.privacy.dlp.v2beta1.RecordCondition.Conditions)
  return target;
}

size_t RecordCondition_Conditions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.privacy.dlp.v2beta1.RecordCondition.Conditions)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .google.privacy.dlp.v2beta1.RecordCondition.Condition conditions = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->conditions_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->conditions(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RecordCondition_Conditions::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.privacy.dlp.v2beta1.RecordCondition.Conditions)
  GOOGLE_DCHECK_NE(&from, this);
  const RecordCondition_Conditions* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RecordCondition_Conditions>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.privacy.dlp.v2beta1.RecordCondition.Conditions)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.privacy.dlp.v2beta1.RecordCondition.Conditions)
    MergeFrom(*source);
  }
}

void RecordCondition_Conditions::MergeFrom(const RecordCondition_Conditions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.privacy.dlp.v2beta1.RecordCondition.Conditions)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  conditions_.MergeFrom(from.conditions_);
}

void RecordCondition_Conditions::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.privacy.dlp.v2beta1.RecordCondition.Conditions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RecordCondition_Conditions::CopyFrom(const RecordCondition_Conditions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.privacy.dlp.v2beta1.RecordCondition.Conditions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RecordCondition_Conditions::IsInitialized() const {
  return true;
}

void RecordCondition_Conditions::Swap(RecordCondition_Conditions* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RecordCondition_Conditions::InternalSwap(RecordCondition_Conditions* other) {
  using std::swap;
  conditions_.InternalSwap(&other->conditions_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RecordCondition_Conditions::GetMetadata() const {
  protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void RecordCondition_Expressions::InitAsDefaultInstance() {
  ::google::privacy::dlp::v2beta1::_RecordCondition_Expressions_default_instance_.conditions_ = const_cast< ::google::privacy::dlp::v2beta1::RecordCondition_Conditions*>(
      ::google::privacy::dlp::v2beta1::RecordCondition_Conditions::internal_default_instance());
}
void RecordCondition_Expressions::set_allocated_conditions(::google::privacy::dlp::v2beta1::RecordCondition_Conditions* conditions) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_type();
  if (conditions) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      conditions = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, conditions, submessage_arena);
    }
    set_has_conditions();
    type_.conditions_ = conditions;
  }
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2beta1.RecordCondition.Expressions.conditions)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RecordCondition_Expressions::kLogicalOperatorFieldNumber;
const int RecordCondition_Expressions::kConditionsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RecordCondition_Expressions::RecordCondition_Expressions()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaultsRecordCondition_Expressions();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.privacy.dlp.v2beta1.RecordCondition.Expressions)
}
RecordCondition_Expressions::RecordCondition_Expressions(const RecordCondition_Expressions& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  logical_operator_ = from.logical_operator_;
  clear_has_type();
  switch (from.type_case()) {
    case kConditions: {
      mutable_conditions()->::google::privacy::dlp::v2beta1::RecordCondition_Conditions::MergeFrom(from.conditions());
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:google.privacy.dlp.v2beta1.RecordCondition.Expressions)
}

void RecordCondition_Expressions::SharedCtor() {
  logical_operator_ = 0;
  clear_has_type();
  _cached_size_ = 0;
}

RecordCondition_Expressions::~RecordCondition_Expressions() {
  // @@protoc_insertion_point(destructor:google.privacy.dlp.v2beta1.RecordCondition.Expressions)
  SharedDtor();
}

void RecordCondition_Expressions::SharedDtor() {
  if (has_type()) {
    clear_type();
  }
}

void RecordCondition_Expressions::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RecordCondition_Expressions::descriptor() {
  ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RecordCondition_Expressions& RecordCondition_Expressions::default_instance() {
  ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaultsRecordCondition_Expressions();
  return *internal_default_instance();
}

RecordCondition_Expressions* RecordCondition_Expressions::New(::google::protobuf::Arena* arena) const {
  RecordCondition_Expressions* n = new RecordCondition_Expressions;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RecordCondition_Expressions::clear_type() {
// @@protoc_insertion_point(one_of_clear_start:google.privacy.dlp.v2beta1.RecordCondition.Expressions)
  switch (type_case()) {
    case kConditions: {
      delete type_.conditions_;
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = TYPE_NOT_SET;
}


void RecordCondition_Expressions::Clear() {
// @@protoc_insertion_point(message_clear_start:google.privacy.dlp.v2beta1.RecordCondition.Expressions)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  logical_operator_ = 0;
  clear_type();
  _internal_metadata_.Clear();
}

bool RecordCondition_Expressions::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.privacy.dlp.v2beta1.RecordCondition.Expressions)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .google.privacy.dlp.v2beta1.RecordCondition.Expressions.LogicalOperator logical_operator = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_logical_operator(static_cast< ::google::privacy::dlp::v2beta1::RecordCondition_Expressions_LogicalOperator >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.privacy.dlp.v2beta1.RecordCondition.Conditions conditions = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_conditions()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.privacy.dlp.v2beta1.RecordCondition.Expressions)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.privacy.dlp.v2beta1.RecordCondition.Expressions)
  return false;
#undef DO_
}

void RecordCondition_Expressions::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.privacy.dlp.v2beta1.RecordCondition.Expressions)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.privacy.dlp.v2beta1.RecordCondition.Expressions.LogicalOperator logical_operator = 1;
  if (this->logical_operator() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->logical_operator(), output);
  }

  // .google.privacy.dlp.v2beta1.RecordCondition.Conditions conditions = 3;
  if (has_conditions()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *type_.conditions_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:google.privacy.dlp.v2beta1.RecordCondition.Expressions)
}

::google::protobuf::uint8* RecordCondition_Expressions::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.privacy.dlp.v2beta1.RecordCondition.Expressions)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.privacy.dlp.v2beta1.RecordCondition.Expressions.LogicalOperator logical_operator = 1;
  if (this->logical_operator() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->logical_operator(), target);
  }

  // .google.privacy.dlp.v2beta1.RecordCondition.Conditions conditions = 3;
  if (has_conditions()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, *type_.conditions_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.privacy.dlp.v2beta1.RecordCondition.Expressions)
  return target;
}

size_t RecordCondition_Expressions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.privacy.dlp.v2beta1.RecordCondition.Expressions)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .google.privacy.dlp.v2beta1.RecordCondition.Expressions.LogicalOperator logical_operator = 1;
  if (this->logical_operator() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->logical_operator());
  }

  switch (type_case()) {
    // .google.privacy.dlp.v2beta1.RecordCondition.Conditions conditions = 3;
    case kConditions: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *type_.conditions_);
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RecordCondition_Expressions::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.privacy.dlp.v2beta1.RecordCondition.Expressions)
  GOOGLE_DCHECK_NE(&from, this);
  const RecordCondition_Expressions* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RecordCondition_Expressions>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.privacy.dlp.v2beta1.RecordCondition.Expressions)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.privacy.dlp.v2beta1.RecordCondition.Expressions)
    MergeFrom(*source);
  }
}

void RecordCondition_Expressions::MergeFrom(const RecordCondition_Expressions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.privacy.dlp.v2beta1.RecordCondition.Expressions)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.logical_operator() != 0) {
    set_logical_operator(from.logical_operator());
  }
  switch (from.type_case()) {
    case kConditions: {
      mutable_conditions()->::google::privacy::dlp::v2beta1::RecordCondition_Conditions::MergeFrom(from.conditions());
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
}

void RecordCondition_Expressions::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.privacy.dlp.v2beta1.RecordCondition.Expressions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RecordCondition_Expressions::CopyFrom(const RecordCondition_Expressions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.privacy.dlp.v2beta1.RecordCondition.Expressions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RecordCondition_Expressions::IsInitialized() const {
  return true;
}

void RecordCondition_Expressions::Swap(RecordCondition_Expressions* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RecordCondition_Expressions::InternalSwap(RecordCondition_Expressions* other) {
  using std::swap;
  swap(logical_operator_, other->logical_operator_);
  swap(type_, other->type_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RecordCondition_Expressions::GetMetadata() const {
  protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void RecordCondition::InitAsDefaultInstance() {
  ::google::privacy::dlp::v2beta1::_RecordCondition_default_instance_._instance.get_mutable()->expressions_ = const_cast< ::google::privacy::dlp::v2beta1::RecordCondition_Expressions*>(
      ::google::privacy::dlp::v2beta1::RecordCondition_Expressions::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RecordCondition::kExpressionsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RecordCondition::RecordCondition()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaultsRecordCondition();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.privacy.dlp.v2beta1.RecordCondition)
}
RecordCondition::RecordCondition(const RecordCondition& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_expressions()) {
    expressions_ = new ::google::privacy::dlp::v2beta1::RecordCondition_Expressions(*from.expressions_);
  } else {
    expressions_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:google.privacy.dlp.v2beta1.RecordCondition)
}

void RecordCondition::SharedCtor() {
  expressions_ = NULL;
  _cached_size_ = 0;
}

RecordCondition::~RecordCondition() {
  // @@protoc_insertion_point(destructor:google.privacy.dlp.v2beta1.RecordCondition)
  SharedDtor();
}

void RecordCondition::SharedDtor() {
  if (this != internal_default_instance()) delete expressions_;
}

void RecordCondition::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RecordCondition::descriptor() {
  ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RecordCondition& RecordCondition::default_instance() {
  ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaultsRecordCondition();
  return *internal_default_instance();
}

RecordCondition* RecordCondition::New(::google::protobuf::Arena* arena) const {
  RecordCondition* n = new RecordCondition;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RecordCondition::Clear() {
// @@protoc_insertion_point(message_clear_start:google.privacy.dlp.v2beta1.RecordCondition)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && expressions_ != NULL) {
    delete expressions_;
  }
  expressions_ = NULL;
  _internal_metadata_.Clear();
}

bool RecordCondition::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.privacy.dlp.v2beta1.RecordCondition)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .google.privacy.dlp.v2beta1.RecordCondition.Expressions expressions = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_expressions()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.privacy.dlp.v2beta1.RecordCondition)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.privacy.dlp.v2beta1.RecordCondition)
  return false;
#undef DO_
}

void RecordCondition::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.privacy.dlp.v2beta1.RecordCondition)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.privacy.dlp.v2beta1.RecordCondition.Expressions expressions = 3;
  if (this->has_expressions()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->expressions_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:google.privacy.dlp.v2beta1.RecordCondition)
}

::google::protobuf::uint8* RecordCondition::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.privacy.dlp.v2beta1.RecordCondition)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.privacy.dlp.v2beta1.RecordCondition.Expressions expressions = 3;
  if (this->has_expressions()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, *this->expressions_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.privacy.dlp.v2beta1.RecordCondition)
  return target;
}

size_t RecordCondition::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.privacy.dlp.v2beta1.RecordCondition)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .google.privacy.dlp.v2beta1.RecordCondition.Expressions expressions = 3;
  if (this->has_expressions()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->expressions_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RecordCondition::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.privacy.dlp.v2beta1.RecordCondition)
  GOOGLE_DCHECK_NE(&from, this);
  const RecordCondition* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RecordCondition>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.privacy.dlp.v2beta1.RecordCondition)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.privacy.dlp.v2beta1.RecordCondition)
    MergeFrom(*source);
  }
}

void RecordCondition::MergeFrom(const RecordCondition& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.privacy.dlp.v2beta1.RecordCondition)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_expressions()) {
    mutable_expressions()->::google::privacy::dlp::v2beta1::RecordCondition_Expressions::MergeFrom(from.expressions());
  }
}

void RecordCondition::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.privacy.dlp.v2beta1.RecordCondition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RecordCondition::CopyFrom(const RecordCondition& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.privacy.dlp.v2beta1.RecordCondition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RecordCondition::IsInitialized() const {
  return true;
}

void RecordCondition::Swap(RecordCondition* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RecordCondition::InternalSwap(RecordCondition* other) {
  using std::swap;
  swap(expressions_, other->expressions_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RecordCondition::GetMetadata() const {
  protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void DeidentificationSummary::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DeidentificationSummary::kTransformedBytesFieldNumber;
const int DeidentificationSummary::kTransformationSummariesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DeidentificationSummary::DeidentificationSummary()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaultsDeidentificationSummary();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.privacy.dlp.v2beta1.DeidentificationSummary)
}
DeidentificationSummary::DeidentificationSummary(const DeidentificationSummary& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      transformation_summaries_(from.transformation_summaries_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  transformed_bytes_ = from.transformed_bytes_;
  // @@protoc_insertion_point(copy_constructor:google.privacy.dlp.v2beta1.DeidentificationSummary)
}

void DeidentificationSummary::SharedCtor() {
  transformed_bytes_ = GOOGLE_LONGLONG(0);
  _cached_size_ = 0;
}

DeidentificationSummary::~DeidentificationSummary() {
  // @@protoc_insertion_point(destructor:google.privacy.dlp.v2beta1.DeidentificationSummary)
  SharedDtor();
}

void DeidentificationSummary::SharedDtor() {
}

void DeidentificationSummary::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DeidentificationSummary::descriptor() {
  ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DeidentificationSummary& DeidentificationSummary::default_instance() {
  ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaultsDeidentificationSummary();
  return *internal_default_instance();
}

DeidentificationSummary* DeidentificationSummary::New(::google::protobuf::Arena* arena) const {
  DeidentificationSummary* n = new DeidentificationSummary;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DeidentificationSummary::Clear() {
// @@protoc_insertion_point(message_clear_start:google.privacy.dlp.v2beta1.DeidentificationSummary)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  transformation_summaries_.Clear();
  transformed_bytes_ = GOOGLE_LONGLONG(0);
  _internal_metadata_.Clear();
}

bool DeidentificationSummary::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.privacy.dlp.v2beta1.DeidentificationSummary)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 transformed_bytes = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &transformed_bytes_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .google.privacy.dlp.v2beta1.TransformationSummary transformation_summaries = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_transformation_summaries()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.privacy.dlp.v2beta1.DeidentificationSummary)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.privacy.dlp.v2beta1.DeidentificationSummary)
  return false;
#undef DO_
}

void DeidentificationSummary::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.privacy.dlp.v2beta1.DeidentificationSummary)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 transformed_bytes = 2;
  if (this->transformed_bytes() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->transformed_bytes(), output);
  }

  // repeated .google.privacy.dlp.v2beta1.TransformationSummary transformation_summaries = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->transformation_summaries_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->transformation_summaries(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:google.privacy.dlp.v2beta1.DeidentificationSummary)
}

::google::protobuf::uint8* DeidentificationSummary::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.privacy.dlp.v2beta1.DeidentificationSummary)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 transformed_bytes = 2;
  if (this->transformed_bytes() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->transformed_bytes(), target);
  }

  // repeated .google.privacy.dlp.v2beta1.TransformationSummary transformation_summaries = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->transformation_summaries_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->transformation_summaries(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.privacy.dlp.v2beta1.DeidentificationSummary)
  return target;
}

size_t DeidentificationSummary::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.privacy.dlp.v2beta1.DeidentificationSummary)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .google.privacy.dlp.v2beta1.TransformationSummary transformation_summaries = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->transformation_summaries_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->transformation_summaries(static_cast<int>(i)));
    }
  }

  // int64 transformed_bytes = 2;
  if (this->transformed_bytes() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->transformed_bytes());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeidentificationSummary::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.privacy.dlp.v2beta1.DeidentificationSummary)
  GOOGLE_DCHECK_NE(&from, this);
  const DeidentificationSummary* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DeidentificationSummary>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.privacy.dlp.v2beta1.DeidentificationSummary)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.privacy.dlp.v2beta1.DeidentificationSummary)
    MergeFrom(*source);
  }
}

void DeidentificationSummary::MergeFrom(const DeidentificationSummary& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.privacy.dlp.v2beta1.DeidentificationSummary)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  transformation_summaries_.MergeFrom(from.transformation_summaries_);
  if (from.transformed_bytes() != 0) {
    set_transformed_bytes(from.transformed_bytes());
  }
}

void DeidentificationSummary::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.privacy.dlp.v2beta1.DeidentificationSummary)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeidentificationSummary::CopyFrom(const DeidentificationSummary& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.privacy.dlp.v2beta1.DeidentificationSummary)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeidentificationSummary::IsInitialized() const {
  return true;
}

void DeidentificationSummary::Swap(DeidentificationSummary* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DeidentificationSummary::InternalSwap(DeidentificationSummary* other) {
  using std::swap;
  transformation_summaries_.InternalSwap(&other->transformation_summaries_);
  swap(transformed_bytes_, other->transformed_bytes_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DeidentificationSummary::GetMetadata() const {
  protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void TransformationSummary_SummaryResult::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TransformationSummary_SummaryResult::kCountFieldNumber;
const int TransformationSummary_SummaryResult::kCodeFieldNumber;
const int TransformationSummary_SummaryResult::kDetailsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TransformationSummary_SummaryResult::TransformationSummary_SummaryResult()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaultsTransformationSummary_SummaryResult();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.privacy.dlp.v2beta1.TransformationSummary.SummaryResult)
}
TransformationSummary_SummaryResult::TransformationSummary_SummaryResult(const TransformationSummary_SummaryResult& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  details_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.details().size() > 0) {
    details_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.details_);
  }
  ::memcpy(&count_, &from.count_,
    static_cast<size_t>(reinterpret_cast<char*>(&code_) -
    reinterpret_cast<char*>(&count_)) + sizeof(code_));
  // @@protoc_insertion_point(copy_constructor:google.privacy.dlp.v2beta1.TransformationSummary.SummaryResult)
}

void TransformationSummary_SummaryResult::SharedCtor() {
  details_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&count_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&code_) -
      reinterpret_cast<char*>(&count_)) + sizeof(code_));
  _cached_size_ = 0;
}

TransformationSummary_SummaryResult::~TransformationSummary_SummaryResult() {
  // @@protoc_insertion_point(destructor:google.privacy.dlp.v2beta1.TransformationSummary.SummaryResult)
  SharedDtor();
}

void TransformationSummary_SummaryResult::SharedDtor() {
  details_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void TransformationSummary_SummaryResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TransformationSummary_SummaryResult::descriptor() {
  ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TransformationSummary_SummaryResult& TransformationSummary_SummaryResult::default_instance() {
  ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaultsTransformationSummary_SummaryResult();
  return *internal_default_instance();
}

TransformationSummary_SummaryResult* TransformationSummary_SummaryResult::New(::google::protobuf::Arena* arena) const {
  TransformationSummary_SummaryResult* n = new TransformationSummary_SummaryResult;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TransformationSummary_SummaryResult::Clear() {
// @@protoc_insertion_point(message_clear_start:google.privacy.dlp.v2beta1.TransformationSummary.SummaryResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  details_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&count_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&code_) -
      reinterpret_cast<char*>(&count_)) + sizeof(code_));
  _internal_metadata_.Clear();
}

bool TransformationSummary_SummaryResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.privacy.dlp.v2beta1.TransformationSummary.SummaryResult)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 count = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.privacy.dlp.v2beta1.TransformationSummary.TransformationResultCode code = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_code(static_cast< ::google::privacy::dlp::v2beta1::TransformationSummary_TransformationResultCode >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string details = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_details()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->details().data(), static_cast<int>(this->details().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.privacy.dlp.v2beta1.TransformationSummary.SummaryResult.details"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.privacy.dlp.v2beta1.TransformationSummary.SummaryResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.privacy.dlp.v2beta1.TransformationSummary.SummaryResult)
  return false;
#undef DO_
}

void TransformationSummary_SummaryResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.privacy.dlp.v2beta1.TransformationSummary.SummaryResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 count = 1;
  if (this->count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->count(), output);
  }

  // .google.privacy.dlp.v2beta1.TransformationSummary.TransformationResultCode code = 2;
  if (this->code() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->code(), output);
  }

  // string details = 3;
  if (this->details().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->details().data(), static_cast<int>(this->details().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.privacy.dlp.v2beta1.TransformationSummary.SummaryResult.details");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->details(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:google.privacy.dlp.v2beta1.TransformationSummary.SummaryResult)
}

::google::protobuf::uint8* TransformationSummary_SummaryResult::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.privacy.dlp.v2beta1.TransformationSummary.SummaryResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 count = 1;
  if (this->count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->count(), target);
  }

  // .google.privacy.dlp.v2beta1.TransformationSummary.TransformationResultCode code = 2;
  if (this->code() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->code(), target);
  }

  // string details = 3;
  if (this->details().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->details().data(), static_cast<int>(this->details().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.privacy.dlp.v2beta1.TransformationSummary.SummaryResult.details");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->details(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.privacy.dlp.v2beta1.TransformationSummary.SummaryResult)
  return target;
}

size_t TransformationSummary_SummaryResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.privacy.dlp.v2beta1.TransformationSummary.SummaryResult)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string details = 3;
  if (this->details().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->details());
  }

  // int64 count = 1;
  if (this->count() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->count());
  }

  // .google.privacy.dlp.v2beta1.TransformationSummary.TransformationResultCode code = 2;
  if (this->code() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->code());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TransformationSummary_SummaryResult::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.privacy.dlp.v2beta1.TransformationSummary.SummaryResult)
  GOOGLE_DCHECK_NE(&from, this);
  const TransformationSummary_SummaryResult* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TransformationSummary_SummaryResult>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.privacy.dlp.v2beta1.TransformationSummary.SummaryResult)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.privacy.dlp.v2beta1.TransformationSummary.SummaryResult)
    MergeFrom(*source);
  }
}

void TransformationSummary_SummaryResult::MergeFrom(const TransformationSummary_SummaryResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.privacy.dlp.v2beta1.TransformationSummary.SummaryResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.details().size() > 0) {

    details_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.details_);
  }
  if (from.count() != 0) {
    set_count(from.count());
  }
  if (from.code() != 0) {
    set_code(from.code());
  }
}

void TransformationSummary_SummaryResult::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.privacy.dlp.v2beta1.TransformationSummary.SummaryResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransformationSummary_SummaryResult::CopyFrom(const TransformationSummary_SummaryResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.privacy.dlp.v2beta1.TransformationSummary.SummaryResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransformationSummary_SummaryResult::IsInitialized() const {
  return true;
}

void TransformationSummary_SummaryResult::Swap(TransformationSummary_SummaryResult* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TransformationSummary_SummaryResult::InternalSwap(TransformationSummary_SummaryResult* other) {
  using std::swap;
  details_.Swap(&other->details_);
  swap(count_, other->count_);
  swap(code_, other->code_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TransformationSummary_SummaryResult::GetMetadata() const {
  protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void TransformationSummary::InitAsDefaultInstance() {
  ::google::privacy::dlp::v2beta1::_TransformationSummary_default_instance_._instance.get_mutable()->info_type_ = const_cast< ::google::privacy::dlp::v2beta1::InfoType*>(
      ::google::privacy::dlp::v2beta1::InfoType::internal_default_instance());
  ::google::privacy::dlp::v2beta1::_TransformationSummary_default_instance_._instance.get_mutable()->field_ = const_cast< ::google::privacy::dlp::v2beta1::FieldId*>(
      ::google::privacy::dlp::v2beta1::FieldId::internal_default_instance());
  ::google::privacy::dlp::v2beta1::_TransformationSummary_default_instance_._instance.get_mutable()->transformation_ = const_cast< ::google::privacy::dlp::v2beta1::PrimitiveTransformation*>(
      ::google::privacy::dlp::v2beta1::PrimitiveTransformation::internal_default_instance());
  ::google::privacy::dlp::v2beta1::_TransformationSummary_default_instance_._instance.get_mutable()->record_suppress_ = const_cast< ::google::privacy::dlp::v2beta1::RecordSuppression*>(
      ::google::privacy::dlp::v2beta1::RecordSuppression::internal_default_instance());
}
void TransformationSummary::clear_info_type() {
  if (GetArenaNoVirtual() == NULL && info_type_ != NULL) {
    delete info_type_;
  }
  info_type_ = NULL;
}
void TransformationSummary::clear_field() {
  if (GetArenaNoVirtual() == NULL && field_ != NULL) {
    delete field_;
  }
  field_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TransformationSummary::kInfoTypeFieldNumber;
const int TransformationSummary::kFieldFieldNumber;
const int TransformationSummary::kTransformationFieldNumber;
const int TransformationSummary::kFieldTransformationsFieldNumber;
const int TransformationSummary::kRecordSuppressFieldNumber;
const int TransformationSummary::kResultsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TransformationSummary::TransformationSummary()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaultsTransformationSummary();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.privacy.dlp.v2beta1.TransformationSummary)
}
TransformationSummary::TransformationSummary(const TransformationSummary& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      results_(from.results_),
      field_transformations_(from.field_transformations_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_info_type()) {
    info_type_ = new ::google::privacy::dlp::v2beta1::InfoType(*from.info_type_);
  } else {
    info_type_ = NULL;
  }
  if (from.has_field()) {
    field_ = new ::google::privacy::dlp::v2beta1::FieldId(*from.field_);
  } else {
    field_ = NULL;
  }
  if (from.has_transformation()) {
    transformation_ = new ::google::privacy::dlp::v2beta1::PrimitiveTransformation(*from.transformation_);
  } else {
    transformation_ = NULL;
  }
  if (from.has_record_suppress()) {
    record_suppress_ = new ::google::privacy::dlp::v2beta1::RecordSuppression(*from.record_suppress_);
  } else {
    record_suppress_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:google.privacy.dlp.v2beta1.TransformationSummary)
}

void TransformationSummary::SharedCtor() {
  ::memset(&info_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&record_suppress_) -
      reinterpret_cast<char*>(&info_type_)) + sizeof(record_suppress_));
  _cached_size_ = 0;
}

TransformationSummary::~TransformationSummary() {
  // @@protoc_insertion_point(destructor:google.privacy.dlp.v2beta1.TransformationSummary)
  SharedDtor();
}

void TransformationSummary::SharedDtor() {
  if (this != internal_default_instance()) delete info_type_;
  if (this != internal_default_instance()) delete field_;
  if (this != internal_default_instance()) delete transformation_;
  if (this != internal_default_instance()) delete record_suppress_;
}

void TransformationSummary::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TransformationSummary::descriptor() {
  ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TransformationSummary& TransformationSummary::default_instance() {
  ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaultsTransformationSummary();
  return *internal_default_instance();
}

TransformationSummary* TransformationSummary::New(::google::protobuf::Arena* arena) const {
  TransformationSummary* n = new TransformationSummary;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TransformationSummary::Clear() {
// @@protoc_insertion_point(message_clear_start:google.privacy.dlp.v2beta1.TransformationSummary)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  results_.Clear();
  field_transformations_.Clear();
  if (GetArenaNoVirtual() == NULL && info_type_ != NULL) {
    delete info_type_;
  }
  info_type_ = NULL;
  if (GetArenaNoVirtual() == NULL && field_ != NULL) {
    delete field_;
  }
  field_ = NULL;
  if (GetArenaNoVirtual() == NULL && transformation_ != NULL) {
    delete transformation_;
  }
  transformation_ = NULL;
  if (GetArenaNoVirtual() == NULL && record_suppress_ != NULL) {
    delete record_suppress_;
  }
  record_suppress_ = NULL;
  _internal_metadata_.Clear();
}

bool TransformationSummary::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.privacy.dlp.v2beta1.TransformationSummary)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .google.privacy.dlp.v2beta1.InfoType info_type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_info_type()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.privacy.dlp.v2beta1.FieldId field = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_field()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.privacy.dlp.v2beta1.PrimitiveTransformation transformation = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_transformation()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .google.privacy.dlp.v2beta1.TransformationSummary.SummaryResult results = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_results()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .google.privacy.dlp.v2beta1.FieldTransformation field_transformations = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_field_transformations()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.privacy.dlp.v2beta1.RecordSuppression record_suppress = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_record_suppress()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.privacy.dlp.v2beta1.TransformationSummary)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.privacy.dlp.v2beta1.TransformationSummary)
  return false;
#undef DO_
}

void TransformationSummary::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.privacy.dlp.v2beta1.TransformationSummary)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.privacy.dlp.v2beta1.InfoType info_type = 1;
  if (this->has_info_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->info_type_, output);
  }

  // .google.privacy.dlp.v2beta1.FieldId field = 2;
  if (this->has_field()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->field_, output);
  }

  // .google.privacy.dlp.v2beta1.PrimitiveTransformation transformation = 3;
  if (this->has_transformation()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->transformation_, output);
  }

  // repeated .google.privacy.dlp.v2beta1.TransformationSummary.SummaryResult results = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->results_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->results(static_cast<int>(i)), output);
  }

  // repeated .google.privacy.dlp.v2beta1.FieldTransformation field_transformations = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->field_transformations_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->field_transformations(static_cast<int>(i)), output);
  }

  // .google.privacy.dlp.v2beta1.RecordSuppression record_suppress = 6;
  if (this->has_record_suppress()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->record_suppress_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:google.privacy.dlp.v2beta1.TransformationSummary)
}

::google::protobuf::uint8* TransformationSummary::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.privacy.dlp.v2beta1.TransformationSummary)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.privacy.dlp.v2beta1.InfoType info_type = 1;
  if (this->has_info_type()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->info_type_, deterministic, target);
  }

  // .google.privacy.dlp.v2beta1.FieldId field = 2;
  if (this->has_field()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, *this->field_, deterministic, target);
  }

  // .google.privacy.dlp.v2beta1.PrimitiveTransformation transformation = 3;
  if (this->has_transformation()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, *this->transformation_, deterministic, target);
  }

  // repeated .google.privacy.dlp.v2beta1.TransformationSummary.SummaryResult results = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->results_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->results(static_cast<int>(i)), deterministic, target);
  }

  // repeated .google.privacy.dlp.v2beta1.FieldTransformation field_transformations = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->field_transformations_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->field_transformations(static_cast<int>(i)), deterministic, target);
  }

  // .google.privacy.dlp.v2beta1.RecordSuppression record_suppress = 6;
  if (this->has_record_suppress()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, *this->record_suppress_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.privacy.dlp.v2beta1.TransformationSummary)
  return target;
}

size_t TransformationSummary::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.privacy.dlp.v2beta1.TransformationSummary)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .google.privacy.dlp.v2beta1.TransformationSummary.SummaryResult results = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->results_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->results(static_cast<int>(i)));
    }
  }

  // repeated .google.privacy.dlp.v2beta1.FieldTransformation field_transformations = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->field_transformations_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->field_transformations(static_cast<int>(i)));
    }
  }

  // .google.privacy.dlp.v2beta1.InfoType info_type = 1;
  if (this->has_info_type()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->info_type_);
  }

  // .google.privacy.dlp.v2beta1.FieldId field = 2;
  if (this->has_field()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->field_);
  }

  // .google.privacy.dlp.v2beta1.PrimitiveTransformation transformation = 3;
  if (this->has_transformation()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->transformation_);
  }

  // .google.privacy.dlp.v2beta1.RecordSuppression record_suppress = 6;
  if (this->has_record_suppress()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->record_suppress_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TransformationSummary::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.privacy.dlp.v2beta1.TransformationSummary)
  GOOGLE_DCHECK_NE(&from, this);
  const TransformationSummary* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TransformationSummary>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.privacy.dlp.v2beta1.TransformationSummary)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.privacy.dlp.v2beta1.TransformationSummary)
    MergeFrom(*source);
  }
}

void TransformationSummary::MergeFrom(const TransformationSummary& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.privacy.dlp.v2beta1.TransformationSummary)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  results_.MergeFrom(from.results_);
  field_transformations_.MergeFrom(from.field_transformations_);
  if (from.has_info_type()) {
    mutable_info_type()->::google::privacy::dlp::v2beta1::InfoType::MergeFrom(from.info_type());
  }
  if (from.has_field()) {
    mutable_field()->::google::privacy::dlp::v2beta1::FieldId::MergeFrom(from.field());
  }
  if (from.has_transformation()) {
    mutable_transformation()->::google::privacy::dlp::v2beta1::PrimitiveTransformation::MergeFrom(from.transformation());
  }
  if (from.has_record_suppress()) {
    mutable_record_suppress()->::google::privacy::dlp::v2beta1::RecordSuppression::MergeFrom(from.record_suppress());
  }
}

void TransformationSummary::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.privacy.dlp.v2beta1.TransformationSummary)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransformationSummary::CopyFrom(const TransformationSummary& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.privacy.dlp.v2beta1.TransformationSummary)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransformationSummary::IsInitialized() const {
  return true;
}

void TransformationSummary::Swap(TransformationSummary* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TransformationSummary::InternalSwap(TransformationSummary* other) {
  using std::swap;
  results_.InternalSwap(&other->results_);
  field_transformations_.InternalSwap(&other->field_transformations_);
  swap(info_type_, other->info_type_);
  swap(field_, other->field_);
  swap(transformation_, other->transformation_);
  swap(record_suppress_, other->record_suppress_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TransformationSummary::GetMetadata() const {
  protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace v2beta1
}  // namespace dlp
}  // namespace privacy
}  // namespace google

// @@protoc_insertion_point(global_scope)
