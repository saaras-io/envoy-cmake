// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/cloud/speech/v1/cloud_speech.proto

#include "google/cloud/speech/v1/cloud_speech.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)
namespace google {
namespace cloud {
namespace speech {
namespace v1 {
class RecognizeRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RecognizeRequest>
      _instance;
} _RecognizeRequest_default_instance_;
class LongRunningRecognizeRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LongRunningRecognizeRequest>
      _instance;
} _LongRunningRecognizeRequest_default_instance_;
class StreamingRecognizeRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<StreamingRecognizeRequest>
      _instance;
  const ::google::cloud::speech::v1::StreamingRecognitionConfig* streaming_config_;
  ::google::protobuf::internal::ArenaStringPtr audio_content_;
} _StreamingRecognizeRequest_default_instance_;
class StreamingRecognitionConfigDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<StreamingRecognitionConfig>
      _instance;
} _StreamingRecognitionConfig_default_instance_;
class RecognitionConfigDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RecognitionConfig>
      _instance;
} _RecognitionConfig_default_instance_;
class SpeechContextDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SpeechContext>
      _instance;
} _SpeechContext_default_instance_;
class RecognitionAudioDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RecognitionAudio>
      _instance;
  ::google::protobuf::internal::ArenaStringPtr content_;
  ::google::protobuf::internal::ArenaStringPtr uri_;
} _RecognitionAudio_default_instance_;
class RecognizeResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RecognizeResponse>
      _instance;
} _RecognizeResponse_default_instance_;
class LongRunningRecognizeResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LongRunningRecognizeResponse>
      _instance;
} _LongRunningRecognizeResponse_default_instance_;
class LongRunningRecognizeMetadataDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LongRunningRecognizeMetadata>
      _instance;
} _LongRunningRecognizeMetadata_default_instance_;
class StreamingRecognizeResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<StreamingRecognizeResponse>
      _instance;
} _StreamingRecognizeResponse_default_instance_;
class StreamingRecognitionResultDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<StreamingRecognitionResult>
      _instance;
} _StreamingRecognitionResult_default_instance_;
class SpeechRecognitionResultDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SpeechRecognitionResult>
      _instance;
} _SpeechRecognitionResult_default_instance_;
class SpeechRecognitionAlternativeDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SpeechRecognitionAlternative>
      _instance;
} _SpeechRecognitionAlternative_default_instance_;
class WordInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<WordInfo>
      _instance;
} _WordInfo_default_instance_;
}  // namespace v1
}  // namespace speech
}  // namespace cloud
}  // namespace google
namespace protobuf_google_2fcloud_2fspeech_2fv1_2fcloud_5fspeech_2eproto {
void InitDefaultsRecognizeRequestImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_google_2fcloud_2fspeech_2fv1_2fcloud_5fspeech_2eproto::InitDefaultsRecognitionConfig();
  protobuf_google_2fcloud_2fspeech_2fv1_2fcloud_5fspeech_2eproto::InitDefaultsRecognitionAudio();
  {
    void* ptr = &::google::cloud::speech::v1::_RecognizeRequest_default_instance_;
    new (ptr) ::google::cloud::speech::v1::RecognizeRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::cloud::speech::v1::RecognizeRequest::InitAsDefaultInstance();
}

void InitDefaultsRecognizeRequest() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsRecognizeRequestImpl);
}

void InitDefaultsLongRunningRecognizeRequestImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_google_2fcloud_2fspeech_2fv1_2fcloud_5fspeech_2eproto::InitDefaultsRecognitionConfig();
  protobuf_google_2fcloud_2fspeech_2fv1_2fcloud_5fspeech_2eproto::InitDefaultsRecognitionAudio();
  {
    void* ptr = &::google::cloud::speech::v1::_LongRunningRecognizeRequest_default_instance_;
    new (ptr) ::google::cloud::speech::v1::LongRunningRecognizeRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::cloud::speech::v1::LongRunningRecognizeRequest::InitAsDefaultInstance();
}

void InitDefaultsLongRunningRecognizeRequest() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsLongRunningRecognizeRequestImpl);
}

void InitDefaultsStreamingRecognizeRequestImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_google_2fcloud_2fspeech_2fv1_2fcloud_5fspeech_2eproto::InitDefaultsStreamingRecognitionConfig();
  {
    void* ptr = &::google::cloud::speech::v1::_StreamingRecognizeRequest_default_instance_;
    new (ptr) ::google::cloud::speech::v1::StreamingRecognizeRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::cloud::speech::v1::StreamingRecognizeRequest::InitAsDefaultInstance();
}

void InitDefaultsStreamingRecognizeRequest() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsStreamingRecognizeRequestImpl);
}

void InitDefaultsStreamingRecognitionConfigImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_google_2fcloud_2fspeech_2fv1_2fcloud_5fspeech_2eproto::InitDefaultsRecognitionConfig();
  {
    void* ptr = &::google::cloud::speech::v1::_StreamingRecognitionConfig_default_instance_;
    new (ptr) ::google::cloud::speech::v1::StreamingRecognitionConfig();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::cloud::speech::v1::StreamingRecognitionConfig::InitAsDefaultInstance();
}

void InitDefaultsStreamingRecognitionConfig() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsStreamingRecognitionConfigImpl);
}

void InitDefaultsRecognitionConfigImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_google_2fcloud_2fspeech_2fv1_2fcloud_5fspeech_2eproto::InitDefaultsSpeechContext();
  {
    void* ptr = &::google::cloud::speech::v1::_RecognitionConfig_default_instance_;
    new (ptr) ::google::cloud::speech::v1::RecognitionConfig();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::cloud::speech::v1::RecognitionConfig::InitAsDefaultInstance();
}

void InitDefaultsRecognitionConfig() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsRecognitionConfigImpl);
}

void InitDefaultsSpeechContextImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::google::cloud::speech::v1::_SpeechContext_default_instance_;
    new (ptr) ::google::cloud::speech::v1::SpeechContext();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::cloud::speech::v1::SpeechContext::InitAsDefaultInstance();
}

void InitDefaultsSpeechContext() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsSpeechContextImpl);
}

void InitDefaultsRecognitionAudioImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::google::cloud::speech::v1::_RecognitionAudio_default_instance_;
    new (ptr) ::google::cloud::speech::v1::RecognitionAudio();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::cloud::speech::v1::RecognitionAudio::InitAsDefaultInstance();
}

void InitDefaultsRecognitionAudio() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsRecognitionAudioImpl);
}

void InitDefaultsRecognizeResponseImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_google_2fcloud_2fspeech_2fv1_2fcloud_5fspeech_2eproto::InitDefaultsSpeechRecognitionResult();
  {
    void* ptr = &::google::cloud::speech::v1::_RecognizeResponse_default_instance_;
    new (ptr) ::google::cloud::speech::v1::RecognizeResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::cloud::speech::v1::RecognizeResponse::InitAsDefaultInstance();
}

void InitDefaultsRecognizeResponse() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsRecognizeResponseImpl);
}

void InitDefaultsLongRunningRecognizeResponseImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_google_2fcloud_2fspeech_2fv1_2fcloud_5fspeech_2eproto::InitDefaultsSpeechRecognitionResult();
  {
    void* ptr = &::google::cloud::speech::v1::_LongRunningRecognizeResponse_default_instance_;
    new (ptr) ::google::cloud::speech::v1::LongRunningRecognizeResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::cloud::speech::v1::LongRunningRecognizeResponse::InitAsDefaultInstance();
}

void InitDefaultsLongRunningRecognizeResponse() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsLongRunningRecognizeResponseImpl);
}

void InitDefaultsLongRunningRecognizeMetadataImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_google_2fprotobuf_2ftimestamp_2eproto::InitDefaultsTimestamp();
  {
    void* ptr = &::google::cloud::speech::v1::_LongRunningRecognizeMetadata_default_instance_;
    new (ptr) ::google::cloud::speech::v1::LongRunningRecognizeMetadata();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::cloud::speech::v1::LongRunningRecognizeMetadata::InitAsDefaultInstance();
}

void InitDefaultsLongRunningRecognizeMetadata() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsLongRunningRecognizeMetadataImpl);
}

void InitDefaultsStreamingRecognizeResponseImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_google_2frpc_2fstatus_2eproto::InitDefaultsStatus();
  protobuf_google_2fcloud_2fspeech_2fv1_2fcloud_5fspeech_2eproto::InitDefaultsStreamingRecognitionResult();
  {
    void* ptr = &::google::cloud::speech::v1::_StreamingRecognizeResponse_default_instance_;
    new (ptr) ::google::cloud::speech::v1::StreamingRecognizeResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::cloud::speech::v1::StreamingRecognizeResponse::InitAsDefaultInstance();
}

void InitDefaultsStreamingRecognizeResponse() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsStreamingRecognizeResponseImpl);
}

void InitDefaultsStreamingRecognitionResultImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_google_2fcloud_2fspeech_2fv1_2fcloud_5fspeech_2eproto::InitDefaultsSpeechRecognitionAlternative();
  {
    void* ptr = &::google::cloud::speech::v1::_StreamingRecognitionResult_default_instance_;
    new (ptr) ::google::cloud::speech::v1::StreamingRecognitionResult();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::cloud::speech::v1::StreamingRecognitionResult::InitAsDefaultInstance();
}

void InitDefaultsStreamingRecognitionResult() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsStreamingRecognitionResultImpl);
}

void InitDefaultsSpeechRecognitionResultImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_google_2fcloud_2fspeech_2fv1_2fcloud_5fspeech_2eproto::InitDefaultsSpeechRecognitionAlternative();
  {
    void* ptr = &::google::cloud::speech::v1::_SpeechRecognitionResult_default_instance_;
    new (ptr) ::google::cloud::speech::v1::SpeechRecognitionResult();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::cloud::speech::v1::SpeechRecognitionResult::InitAsDefaultInstance();
}

void InitDefaultsSpeechRecognitionResult() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsSpeechRecognitionResultImpl);
}

void InitDefaultsSpeechRecognitionAlternativeImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_google_2fcloud_2fspeech_2fv1_2fcloud_5fspeech_2eproto::InitDefaultsWordInfo();
  {
    void* ptr = &::google::cloud::speech::v1::_SpeechRecognitionAlternative_default_instance_;
    new (ptr) ::google::cloud::speech::v1::SpeechRecognitionAlternative();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::cloud::speech::v1::SpeechRecognitionAlternative::InitAsDefaultInstance();
}

void InitDefaultsSpeechRecognitionAlternative() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsSpeechRecognitionAlternativeImpl);
}

void InitDefaultsWordInfoImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_google_2fprotobuf_2fduration_2eproto::InitDefaultsDuration();
  {
    void* ptr = &::google::cloud::speech::v1::_WordInfo_default_instance_;
    new (ptr) ::google::cloud::speech::v1::WordInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::cloud::speech::v1::WordInfo::InitAsDefaultInstance();
}

void InitDefaultsWordInfo() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsWordInfoImpl);
}

::google::protobuf::Metadata file_level_metadata[15];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[2];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::cloud::speech::v1::RecognizeRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::cloud::speech::v1::RecognizeRequest, config_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::cloud::speech::v1::RecognizeRequest, audio_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::cloud::speech::v1::LongRunningRecognizeRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::cloud::speech::v1::LongRunningRecognizeRequest, config_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::cloud::speech::v1::LongRunningRecognizeRequest, audio_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::cloud::speech::v1::StreamingRecognizeRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::cloud::speech::v1::StreamingRecognizeRequest, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::google::cloud::speech::v1::StreamingRecognizeRequestDefaultTypeInternal, streaming_config_),
  offsetof(::google::cloud::speech::v1::StreamingRecognizeRequestDefaultTypeInternal, audio_content_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::cloud::speech::v1::StreamingRecognizeRequest, streaming_request_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::cloud::speech::v1::StreamingRecognitionConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::cloud::speech::v1::StreamingRecognitionConfig, config_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::cloud::speech::v1::StreamingRecognitionConfig, single_utterance_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::cloud::speech::v1::StreamingRecognitionConfig, interim_results_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::cloud::speech::v1::RecognitionConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::cloud::speech::v1::RecognitionConfig, encoding_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::cloud::speech::v1::RecognitionConfig, sample_rate_hertz_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::cloud::speech::v1::RecognitionConfig, language_code_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::cloud::speech::v1::RecognitionConfig, max_alternatives_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::cloud::speech::v1::RecognitionConfig, profanity_filter_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::cloud::speech::v1::RecognitionConfig, speech_contexts_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::cloud::speech::v1::RecognitionConfig, enable_word_time_offsets_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::cloud::speech::v1::SpeechContext, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::cloud::speech::v1::SpeechContext, phrases_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::cloud::speech::v1::RecognitionAudio, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::cloud::speech::v1::RecognitionAudio, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::google::cloud::speech::v1::RecognitionAudioDefaultTypeInternal, content_),
  offsetof(::google::cloud::speech::v1::RecognitionAudioDefaultTypeInternal, uri_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::cloud::speech::v1::RecognitionAudio, audio_source_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::cloud::speech::v1::RecognizeResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::cloud::speech::v1::RecognizeResponse, results_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::cloud::speech::v1::LongRunningRecognizeResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::cloud::speech::v1::LongRunningRecognizeResponse, results_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::cloud::speech::v1::LongRunningRecognizeMetadata, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::cloud::speech::v1::LongRunningRecognizeMetadata, progress_percent_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::cloud::speech::v1::LongRunningRecognizeMetadata, start_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::cloud::speech::v1::LongRunningRecognizeMetadata, last_update_time_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::cloud::speech::v1::StreamingRecognizeResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::cloud::speech::v1::StreamingRecognizeResponse, error_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::cloud::speech::v1::StreamingRecognizeResponse, results_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::cloud::speech::v1::StreamingRecognizeResponse, speech_event_type_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::cloud::speech::v1::StreamingRecognitionResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::cloud::speech::v1::StreamingRecognitionResult, alternatives_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::cloud::speech::v1::StreamingRecognitionResult, is_final_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::cloud::speech::v1::StreamingRecognitionResult, stability_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::cloud::speech::v1::SpeechRecognitionResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::cloud::speech::v1::SpeechRecognitionResult, alternatives_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::cloud::speech::v1::SpeechRecognitionAlternative, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::cloud::speech::v1::SpeechRecognitionAlternative, transcript_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::cloud::speech::v1::SpeechRecognitionAlternative, confidence_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::cloud::speech::v1::SpeechRecognitionAlternative, words_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::cloud::speech::v1::WordInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::cloud::speech::v1::WordInfo, start_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::cloud::speech::v1::WordInfo, end_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::cloud::speech::v1::WordInfo, word_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::google::cloud::speech::v1::RecognizeRequest)},
  { 7, -1, sizeof(::google::cloud::speech::v1::LongRunningRecognizeRequest)},
  { 14, -1, sizeof(::google::cloud::speech::v1::StreamingRecognizeRequest)},
  { 22, -1, sizeof(::google::cloud::speech::v1::StreamingRecognitionConfig)},
  { 30, -1, sizeof(::google::cloud::speech::v1::RecognitionConfig)},
  { 42, -1, sizeof(::google::cloud::speech::v1::SpeechContext)},
  { 48, -1, sizeof(::google::cloud::speech::v1::RecognitionAudio)},
  { 56, -1, sizeof(::google::cloud::speech::v1::RecognizeResponse)},
  { 62, -1, sizeof(::google::cloud::speech::v1::LongRunningRecognizeResponse)},
  { 68, -1, sizeof(::google::cloud::speech::v1::LongRunningRecognizeMetadata)},
  { 76, -1, sizeof(::google::cloud::speech::v1::StreamingRecognizeResponse)},
  { 84, -1, sizeof(::google::cloud::speech::v1::StreamingRecognitionResult)},
  { 92, -1, sizeof(::google::cloud::speech::v1::SpeechRecognitionResult)},
  { 98, -1, sizeof(::google::cloud::speech::v1::SpeechRecognitionAlternative)},
  { 106, -1, sizeof(::google::cloud::speech::v1::WordInfo)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::cloud::speech::v1::_RecognizeRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::cloud::speech::v1::_LongRunningRecognizeRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::cloud::speech::v1::_StreamingRecognizeRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::cloud::speech::v1::_StreamingRecognitionConfig_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::cloud::speech::v1::_RecognitionConfig_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::cloud::speech::v1::_SpeechContext_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::cloud::speech::v1::_RecognitionAudio_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::cloud::speech::v1::_RecognizeResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::cloud::speech::v1::_LongRunningRecognizeResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::cloud::speech::v1::_LongRunningRecognizeMetadata_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::cloud::speech::v1::_StreamingRecognizeResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::cloud::speech::v1::_StreamingRecognitionResult_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::cloud::speech::v1::_SpeechRecognitionResult_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::cloud::speech::v1::_SpeechRecognitionAlternative_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::cloud::speech::v1::_WordInfo_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "google/cloud/speech/v1/cloud_speech.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 15);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n)google/cloud/speech/v1/cloud_speech.pr"
      "oto\022\026google.cloud.speech.v1\032\034google/api/"
      "annotations.proto\032#google/longrunning/op"
      "erations.proto\032\031google/protobuf/any.prot"
      "o\032\036google/protobuf/duration.proto\032\037googl"
      "e/protobuf/timestamp.proto\032\027google/rpc/s"
      "tatus.proto\"\206\001\n\020RecognizeRequest\0229\n\006conf"
      "ig\030\001 \001(\0132).google.cloud.speech.v1.Recogn"
      "itionConfig\0227\n\005audio\030\002 \001(\0132(.google.clou"
      "d.speech.v1.RecognitionAudio\"\221\001\n\033LongRun"
      "ningRecognizeRequest\0229\n\006config\030\001 \001(\0132).g"
      "oogle.cloud.speech.v1.RecognitionConfig\022"
      "7\n\005audio\030\002 \001(\0132(.google.cloud.speech.v1."
      "RecognitionAudio\"\231\001\n\031StreamingRecognizeR"
      "equest\022N\n\020streaming_config\030\001 \001(\01322.googl"
      "e.cloud.speech.v1.StreamingRecognitionCo"
      "nfigH\000\022\027\n\raudio_content\030\002 \001(\014H\000B\023\n\021strea"
      "ming_request\"\212\001\n\032StreamingRecognitionCon"
      "fig\0229\n\006config\030\001 \001(\0132).google.cloud.speec"
      "h.v1.RecognitionConfig\022\030\n\020single_utteran"
      "ce\030\002 \001(\010\022\027\n\017interim_results\030\003 \001(\010\"\264\003\n\021Re"
      "cognitionConfig\022I\n\010encoding\030\001 \001(\01627.goog"
      "le.cloud.speech.v1.RecognitionConfig.Aud"
      "ioEncoding\022\031\n\021sample_rate_hertz\030\002 \001(\005\022\025\n"
      "\rlanguage_code\030\003 \001(\t\022\030\n\020max_alternatives"
      "\030\004 \001(\005\022\030\n\020profanity_filter\030\005 \001(\010\022>\n\017spee"
      "ch_contexts\030\006 \003(\0132%.google.cloud.speech."
      "v1.SpeechContext\022 \n\030enable_word_time_off"
      "sets\030\010 \001(\010\"\213\001\n\rAudioEncoding\022\030\n\024ENCODING"
      "_UNSPECIFIED\020\000\022\014\n\010LINEAR16\020\001\022\010\n\004FLAC\020\002\022\t"
      "\n\005MULAW\020\003\022\007\n\003AMR\020\004\022\n\n\006AMR_WB\020\005\022\014\n\010OGG_OP"
      "US\020\006\022\032\n\026SPEEX_WITH_HEADER_BYTE\020\007\" \n\rSpee"
      "chContext\022\017\n\007phrases\030\001 \003(\t\"D\n\020Recognitio"
      "nAudio\022\021\n\007content\030\001 \001(\014H\000\022\r\n\003uri\030\002 \001(\tH\000"
      "B\016\n\014audio_source\"U\n\021RecognizeResponse\022@\n"
      "\007results\030\002 \003(\0132/.google.cloud.speech.v1."
      "SpeechRecognitionResult\"`\n\034LongRunningRe"
      "cognizeResponse\022@\n\007results\030\002 \003(\0132/.googl"
      "e.cloud.speech.v1.SpeechRecognitionResul"
      "t\"\236\001\n\034LongRunningRecognizeMetadata\022\030\n\020pr"
      "ogress_percent\030\001 \001(\005\022.\n\nstart_time\030\002 \001(\013"
      "2\032.google.protobuf.Timestamp\0224\n\020last_upd"
      "ate_time\030\003 \001(\0132\032.google.protobuf.Timesta"
      "mp\"\261\002\n\032StreamingRecognizeResponse\022!\n\005err"
      "or\030\001 \001(\0132\022.google.rpc.Status\022C\n\007results\030"
      "\002 \003(\01322.google.cloud.speech.v1.Streaming"
      "RecognitionResult\022]\n\021speech_event_type\030\004"
      " \001(\0162B.google.cloud.speech.v1.StreamingR"
      "ecognizeResponse.SpeechEventType\"L\n\017Spee"
      "chEventType\022\034\n\030SPEECH_EVENT_UNSPECIFIED\020"
      "\000\022\033\n\027END_OF_SINGLE_UTTERANCE\020\001\"\215\001\n\032Strea"
      "mingRecognitionResult\022J\n\014alternatives\030\001 "
      "\003(\01324.google.cloud.speech.v1.SpeechRecog"
      "nitionAlternative\022\020\n\010is_final\030\002 \001(\010\022\021\n\ts"
      "tability\030\003 \001(\002\"e\n\027SpeechRecognitionResul"
      "t\022J\n\014alternatives\030\001 \003(\01324.google.cloud.s"
      "peech.v1.SpeechRecognitionAlternative\"w\n"
      "\034SpeechRecognitionAlternative\022\022\n\ntranscr"
      "ipt\030\001 \001(\t\022\022\n\nconfidence\030\002 \001(\002\022/\n\005words\030\003"
      " \003(\0132 .google.cloud.speech.v1.WordInfo\"t"
      "\n\010WordInfo\022-\n\nstart_time\030\001 \001(\0132\031.google."
      "protobuf.Duration\022+\n\010end_time\030\002 \001(\0132\031.go"
      "ogle.protobuf.Duration\022\014\n\004word\030\003 \001(\t2\246\003\n"
      "\006Speech\022\201\001\n\tRecognize\022(.google.cloud.spe"
      "ech.v1.RecognizeRequest\032).google.cloud.s"
      "peech.v1.RecognizeResponse\"\037\202\323\344\223\002\031\"\024/v1/"
      "speech:recognize:\001*\022\226\001\n\024LongRunningRecog"
      "nize\0223.google.cloud.speech.v1.LongRunnin"
      "gRecognizeRequest\032\035.google.longrunning.O"
      "peration\"*\202\323\344\223\002$\"\037/v1/speech:longrunning"
      "recognize:\001*\022\177\n\022StreamingRecognize\0221.goo"
      "gle.cloud.speech.v1.StreamingRecognizeRe"
      "quest\0322.google.cloud.speech.v1.Streaming"
      "RecognizeResponse(\0010\001Bl\n\032com.google.clou"
      "d.speech.v1B\013SpeechProtoP\001Z<google.golan"
      "g.org/genproto/googleapis/cloud/speech/v"
      "1;speech\370\001\001b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 3059);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "google/cloud/speech/v1/cloud_speech.proto", &protobuf_RegisterTypes);
  ::protobuf_google_2fapi_2fannotations_2eproto::AddDescriptors();
  ::protobuf_google_2flongrunning_2foperations_2eproto::AddDescriptors();
  ::protobuf_google_2fprotobuf_2fany_2eproto::AddDescriptors();
  ::protobuf_google_2fprotobuf_2fduration_2eproto::AddDescriptors();
  ::protobuf_google_2fprotobuf_2ftimestamp_2eproto::AddDescriptors();
  ::protobuf_google_2frpc_2fstatus_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_google_2fcloud_2fspeech_2fv1_2fcloud_5fspeech_2eproto
namespace google {
namespace cloud {
namespace speech {
namespace v1 {
const ::google::protobuf::EnumDescriptor* RecognitionConfig_AudioEncoding_descriptor() {
  protobuf_google_2fcloud_2fspeech_2fv1_2fcloud_5fspeech_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fcloud_2fspeech_2fv1_2fcloud_5fspeech_2eproto::file_level_enum_descriptors[0];
}
bool RecognitionConfig_AudioEncoding_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const RecognitionConfig_AudioEncoding RecognitionConfig::ENCODING_UNSPECIFIED;
const RecognitionConfig_AudioEncoding RecognitionConfig::LINEAR16;
const RecognitionConfig_AudioEncoding RecognitionConfig::FLAC;
const RecognitionConfig_AudioEncoding RecognitionConfig::MULAW;
const RecognitionConfig_AudioEncoding RecognitionConfig::AMR;
const RecognitionConfig_AudioEncoding RecognitionConfig::AMR_WB;
const RecognitionConfig_AudioEncoding RecognitionConfig::OGG_OPUS;
const RecognitionConfig_AudioEncoding RecognitionConfig::SPEEX_WITH_HEADER_BYTE;
const RecognitionConfig_AudioEncoding RecognitionConfig::AudioEncoding_MIN;
const RecognitionConfig_AudioEncoding RecognitionConfig::AudioEncoding_MAX;
const int RecognitionConfig::AudioEncoding_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* StreamingRecognizeResponse_SpeechEventType_descriptor() {
  protobuf_google_2fcloud_2fspeech_2fv1_2fcloud_5fspeech_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fcloud_2fspeech_2fv1_2fcloud_5fspeech_2eproto::file_level_enum_descriptors[1];
}
bool StreamingRecognizeResponse_SpeechEventType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const StreamingRecognizeResponse_SpeechEventType StreamingRecognizeResponse::SPEECH_EVENT_UNSPECIFIED;
const StreamingRecognizeResponse_SpeechEventType StreamingRecognizeResponse::END_OF_SINGLE_UTTERANCE;
const StreamingRecognizeResponse_SpeechEventType StreamingRecognizeResponse::SpeechEventType_MIN;
const StreamingRecognizeResponse_SpeechEventType StreamingRecognizeResponse::SpeechEventType_MAX;
const int StreamingRecognizeResponse::SpeechEventType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

void RecognizeRequest::InitAsDefaultInstance() {
  ::google::cloud::speech::v1::_RecognizeRequest_default_instance_._instance.get_mutable()->config_ = const_cast< ::google::cloud::speech::v1::RecognitionConfig*>(
      ::google::cloud::speech::v1::RecognitionConfig::internal_default_instance());
  ::google::cloud::speech::v1::_RecognizeRequest_default_instance_._instance.get_mutable()->audio_ = const_cast< ::google::cloud::speech::v1::RecognitionAudio*>(
      ::google::cloud::speech::v1::RecognitionAudio::internal_default_instance());
}
void RecognizeRequest::_slow_mutable_config() {
  config_ = ::google::protobuf::Arena::CreateMessage< ::google::cloud::speech::v1::RecognitionConfig >(
      GetArenaNoVirtual());
}
void RecognizeRequest::unsafe_arena_set_allocated_config(
    ::google::cloud::speech::v1::RecognitionConfig* config) {
  if (GetArenaNoVirtual() == NULL) {
    delete config_;
  }
  config_ = config;
  if (config) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.speech.v1.RecognizeRequest.config)
}
void RecognizeRequest::_slow_mutable_audio() {
  audio_ = ::google::protobuf::Arena::CreateMessage< ::google::cloud::speech::v1::RecognitionAudio >(
      GetArenaNoVirtual());
}
void RecognizeRequest::unsafe_arena_set_allocated_audio(
    ::google::cloud::speech::v1::RecognitionAudio* audio) {
  if (GetArenaNoVirtual() == NULL) {
    delete audio_;
  }
  audio_ = audio;
  if (audio) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.speech.v1.RecognizeRequest.audio)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RecognizeRequest::kConfigFieldNumber;
const int RecognizeRequest::kAudioFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RecognizeRequest::RecognizeRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_google_2fcloud_2fspeech_2fv1_2fcloud_5fspeech_2eproto::InitDefaultsRecognizeRequest();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.cloud.speech.v1.RecognizeRequest)
}
RecognizeRequest::RecognizeRequest(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::protobuf_google_2fcloud_2fspeech_2fv1_2fcloud_5fspeech_2eproto::InitDefaultsRecognizeRequest();
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.cloud.speech.v1.RecognizeRequest)
}
RecognizeRequest::RecognizeRequest(const RecognizeRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_config()) {
    config_ = new ::google::cloud::speech::v1::RecognitionConfig(*from.config_);
  } else {
    config_ = NULL;
  }
  if (from.has_audio()) {
    audio_ = new ::google::cloud::speech::v1::RecognitionAudio(*from.audio_);
  } else {
    audio_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:google.cloud.speech.v1.RecognizeRequest)
}

void RecognizeRequest::SharedCtor() {
  ::memset(&config_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&audio_) -
      reinterpret_cast<char*>(&config_)) + sizeof(audio_));
  _cached_size_ = 0;
}

RecognizeRequest::~RecognizeRequest() {
  // @@protoc_insertion_point(destructor:google.cloud.speech.v1.RecognizeRequest)
  SharedDtor();
}

void RecognizeRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  if (this != internal_default_instance()) delete config_;
  if (this != internal_default_instance()) delete audio_;
}

void RecognizeRequest::ArenaDtor(void* object) {
  RecognizeRequest* _this = reinterpret_cast< RecognizeRequest* >(object);
  (void)_this;
}
void RecognizeRequest::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void RecognizeRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RecognizeRequest::descriptor() {
  ::protobuf_google_2fcloud_2fspeech_2fv1_2fcloud_5fspeech_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fcloud_2fspeech_2fv1_2fcloud_5fspeech_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RecognizeRequest& RecognizeRequest::default_instance() {
  ::protobuf_google_2fcloud_2fspeech_2fv1_2fcloud_5fspeech_2eproto::InitDefaultsRecognizeRequest();
  return *internal_default_instance();
}

RecognizeRequest* RecognizeRequest::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<RecognizeRequest>(arena);
}

void RecognizeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.cloud.speech.v1.RecognizeRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && config_ != NULL) {
    delete config_;
  }
  config_ = NULL;
  if (GetArenaNoVirtual() == NULL && audio_ != NULL) {
    delete audio_;
  }
  audio_ = NULL;
  _internal_metadata_.Clear();
}

bool RecognizeRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.cloud.speech.v1.RecognizeRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .google.cloud.speech.v1.RecognitionConfig config = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.cloud.speech.v1.RecognitionAudio audio = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_audio()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.cloud.speech.v1.RecognizeRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.cloud.speech.v1.RecognizeRequest)
  return false;
#undef DO_
}

void RecognizeRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.cloud.speech.v1.RecognizeRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.cloud.speech.v1.RecognitionConfig config = 1;
  if (this->has_config()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->config_, output);
  }

  // .google.cloud.speech.v1.RecognitionAudio audio = 2;
  if (this->has_audio()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->audio_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:google.cloud.speech.v1.RecognizeRequest)
}

::google::protobuf::uint8* RecognizeRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.cloud.speech.v1.RecognizeRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.cloud.speech.v1.RecognitionConfig config = 1;
  if (this->has_config()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->config_, deterministic, target);
  }

  // .google.cloud.speech.v1.RecognitionAudio audio = 2;
  if (this->has_audio()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, *this->audio_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.cloud.speech.v1.RecognizeRequest)
  return target;
}

size_t RecognizeRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.cloud.speech.v1.RecognizeRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .google.cloud.speech.v1.RecognitionConfig config = 1;
  if (this->has_config()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->config_);
  }

  // .google.cloud.speech.v1.RecognitionAudio audio = 2;
  if (this->has_audio()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->audio_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RecognizeRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.cloud.speech.v1.RecognizeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const RecognizeRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RecognizeRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.cloud.speech.v1.RecognizeRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.cloud.speech.v1.RecognizeRequest)
    MergeFrom(*source);
  }
}

void RecognizeRequest::MergeFrom(const RecognizeRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.cloud.speech.v1.RecognizeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_config()) {
    mutable_config()->::google::cloud::speech::v1::RecognitionConfig::MergeFrom(from.config());
  }
  if (from.has_audio()) {
    mutable_audio()->::google::cloud::speech::v1::RecognitionAudio::MergeFrom(from.audio());
  }
}

void RecognizeRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.cloud.speech.v1.RecognizeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RecognizeRequest::CopyFrom(const RecognizeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.cloud.speech.v1.RecognizeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RecognizeRequest::IsInitialized() const {
  return true;
}

void RecognizeRequest::Swap(RecognizeRequest* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    RecognizeRequest* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void RecognizeRequest::UnsafeArenaSwap(RecognizeRequest* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void RecognizeRequest::InternalSwap(RecognizeRequest* other) {
  using std::swap;
  swap(config_, other->config_);
  swap(audio_, other->audio_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RecognizeRequest::GetMetadata() const {
  protobuf_google_2fcloud_2fspeech_2fv1_2fcloud_5fspeech_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fcloud_2fspeech_2fv1_2fcloud_5fspeech_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void LongRunningRecognizeRequest::InitAsDefaultInstance() {
  ::google::cloud::speech::v1::_LongRunningRecognizeRequest_default_instance_._instance.get_mutable()->config_ = const_cast< ::google::cloud::speech::v1::RecognitionConfig*>(
      ::google::cloud::speech::v1::RecognitionConfig::internal_default_instance());
  ::google::cloud::speech::v1::_LongRunningRecognizeRequest_default_instance_._instance.get_mutable()->audio_ = const_cast< ::google::cloud::speech::v1::RecognitionAudio*>(
      ::google::cloud::speech::v1::RecognitionAudio::internal_default_instance());
}
void LongRunningRecognizeRequest::_slow_mutable_config() {
  config_ = ::google::protobuf::Arena::CreateMessage< ::google::cloud::speech::v1::RecognitionConfig >(
      GetArenaNoVirtual());
}
void LongRunningRecognizeRequest::unsafe_arena_set_allocated_config(
    ::google::cloud::speech::v1::RecognitionConfig* config) {
  if (GetArenaNoVirtual() == NULL) {
    delete config_;
  }
  config_ = config;
  if (config) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.speech.v1.LongRunningRecognizeRequest.config)
}
void LongRunningRecognizeRequest::_slow_mutable_audio() {
  audio_ = ::google::protobuf::Arena::CreateMessage< ::google::cloud::speech::v1::RecognitionAudio >(
      GetArenaNoVirtual());
}
void LongRunningRecognizeRequest::unsafe_arena_set_allocated_audio(
    ::google::cloud::speech::v1::RecognitionAudio* audio) {
  if (GetArenaNoVirtual() == NULL) {
    delete audio_;
  }
  audio_ = audio;
  if (audio) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.speech.v1.LongRunningRecognizeRequest.audio)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LongRunningRecognizeRequest::kConfigFieldNumber;
const int LongRunningRecognizeRequest::kAudioFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LongRunningRecognizeRequest::LongRunningRecognizeRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_google_2fcloud_2fspeech_2fv1_2fcloud_5fspeech_2eproto::InitDefaultsLongRunningRecognizeRequest();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.cloud.speech.v1.LongRunningRecognizeRequest)
}
LongRunningRecognizeRequest::LongRunningRecognizeRequest(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::protobuf_google_2fcloud_2fspeech_2fv1_2fcloud_5fspeech_2eproto::InitDefaultsLongRunningRecognizeRequest();
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.cloud.speech.v1.LongRunningRecognizeRequest)
}
LongRunningRecognizeRequest::LongRunningRecognizeRequest(const LongRunningRecognizeRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_config()) {
    config_ = new ::google::cloud::speech::v1::RecognitionConfig(*from.config_);
  } else {
    config_ = NULL;
  }
  if (from.has_audio()) {
    audio_ = new ::google::cloud::speech::v1::RecognitionAudio(*from.audio_);
  } else {
    audio_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:google.cloud.speech.v1.LongRunningRecognizeRequest)
}

void LongRunningRecognizeRequest::SharedCtor() {
  ::memset(&config_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&audio_) -
      reinterpret_cast<char*>(&config_)) + sizeof(audio_));
  _cached_size_ = 0;
}

LongRunningRecognizeRequest::~LongRunningRecognizeRequest() {
  // @@protoc_insertion_point(destructor:google.cloud.speech.v1.LongRunningRecognizeRequest)
  SharedDtor();
}

void LongRunningRecognizeRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  if (this != internal_default_instance()) delete config_;
  if (this != internal_default_instance()) delete audio_;
}

void LongRunningRecognizeRequest::ArenaDtor(void* object) {
  LongRunningRecognizeRequest* _this = reinterpret_cast< LongRunningRecognizeRequest* >(object);
  (void)_this;
}
void LongRunningRecognizeRequest::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void LongRunningRecognizeRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LongRunningRecognizeRequest::descriptor() {
  ::protobuf_google_2fcloud_2fspeech_2fv1_2fcloud_5fspeech_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fcloud_2fspeech_2fv1_2fcloud_5fspeech_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LongRunningRecognizeRequest& LongRunningRecognizeRequest::default_instance() {
  ::protobuf_google_2fcloud_2fspeech_2fv1_2fcloud_5fspeech_2eproto::InitDefaultsLongRunningRecognizeRequest();
  return *internal_default_instance();
}

LongRunningRecognizeRequest* LongRunningRecognizeRequest::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<LongRunningRecognizeRequest>(arena);
}

void LongRunningRecognizeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.cloud.speech.v1.LongRunningRecognizeRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && config_ != NULL) {
    delete config_;
  }
  config_ = NULL;
  if (GetArenaNoVirtual() == NULL && audio_ != NULL) {
    delete audio_;
  }
  audio_ = NULL;
  _internal_metadata_.Clear();
}

bool LongRunningRecognizeRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.cloud.speech.v1.LongRunningRecognizeRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .google.cloud.speech.v1.RecognitionConfig config = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.cloud.speech.v1.RecognitionAudio audio = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_audio()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.cloud.speech.v1.LongRunningRecognizeRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.cloud.speech.v1.LongRunningRecognizeRequest)
  return false;
#undef DO_
}

void LongRunningRecognizeRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.cloud.speech.v1.LongRunningRecognizeRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.cloud.speech.v1.RecognitionConfig config = 1;
  if (this->has_config()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->config_, output);
  }

  // .google.cloud.speech.v1.RecognitionAudio audio = 2;
  if (this->has_audio()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->audio_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:google.cloud.speech.v1.LongRunningRecognizeRequest)
}

::google::protobuf::uint8* LongRunningRecognizeRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.cloud.speech.v1.LongRunningRecognizeRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.cloud.speech.v1.RecognitionConfig config = 1;
  if (this->has_config()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->config_, deterministic, target);
  }

  // .google.cloud.speech.v1.RecognitionAudio audio = 2;
  if (this->has_audio()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, *this->audio_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.cloud.speech.v1.LongRunningRecognizeRequest)
  return target;
}

size_t LongRunningRecognizeRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.cloud.speech.v1.LongRunningRecognizeRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .google.cloud.speech.v1.RecognitionConfig config = 1;
  if (this->has_config()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->config_);
  }

  // .google.cloud.speech.v1.RecognitionAudio audio = 2;
  if (this->has_audio()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->audio_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LongRunningRecognizeRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.cloud.speech.v1.LongRunningRecognizeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const LongRunningRecognizeRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LongRunningRecognizeRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.cloud.speech.v1.LongRunningRecognizeRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.cloud.speech.v1.LongRunningRecognizeRequest)
    MergeFrom(*source);
  }
}

void LongRunningRecognizeRequest::MergeFrom(const LongRunningRecognizeRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.cloud.speech.v1.LongRunningRecognizeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_config()) {
    mutable_config()->::google::cloud::speech::v1::RecognitionConfig::MergeFrom(from.config());
  }
  if (from.has_audio()) {
    mutable_audio()->::google::cloud::speech::v1::RecognitionAudio::MergeFrom(from.audio());
  }
}

void LongRunningRecognizeRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.cloud.speech.v1.LongRunningRecognizeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LongRunningRecognizeRequest::CopyFrom(const LongRunningRecognizeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.cloud.speech.v1.LongRunningRecognizeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LongRunningRecognizeRequest::IsInitialized() const {
  return true;
}

void LongRunningRecognizeRequest::Swap(LongRunningRecognizeRequest* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    LongRunningRecognizeRequest* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void LongRunningRecognizeRequest::UnsafeArenaSwap(LongRunningRecognizeRequest* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void LongRunningRecognizeRequest::InternalSwap(LongRunningRecognizeRequest* other) {
  using std::swap;
  swap(config_, other->config_);
  swap(audio_, other->audio_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LongRunningRecognizeRequest::GetMetadata() const {
  protobuf_google_2fcloud_2fspeech_2fv1_2fcloud_5fspeech_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fcloud_2fspeech_2fv1_2fcloud_5fspeech_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void StreamingRecognizeRequest::InitAsDefaultInstance() {
  ::google::cloud::speech::v1::_StreamingRecognizeRequest_default_instance_.streaming_config_ = const_cast< ::google::cloud::speech::v1::StreamingRecognitionConfig*>(
      ::google::cloud::speech::v1::StreamingRecognitionConfig::internal_default_instance());
  ::google::cloud::speech::v1::_StreamingRecognizeRequest_default_instance_.audio_content_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void StreamingRecognizeRequest::set_allocated_streaming_config(::google::cloud::speech::v1::StreamingRecognitionConfig* streaming_config) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_streaming_request();
  if (streaming_config) {
    ::google::protobuf::Arena* submessage_arena =
      ::google::protobuf::Arena::GetArena(streaming_config);
    if (message_arena != submessage_arena) {
      streaming_config = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, streaming_config, submessage_arena);
    }
    set_has_streaming_config();
    streaming_request_.streaming_config_ = streaming_config;
  }
  // @@protoc_insertion_point(field_set_allocated:google.cloud.speech.v1.StreamingRecognizeRequest.streaming_config)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StreamingRecognizeRequest::kStreamingConfigFieldNumber;
const int StreamingRecognizeRequest::kAudioContentFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StreamingRecognizeRequest::StreamingRecognizeRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_google_2fcloud_2fspeech_2fv1_2fcloud_5fspeech_2eproto::InitDefaultsStreamingRecognizeRequest();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.cloud.speech.v1.StreamingRecognizeRequest)
}
StreamingRecognizeRequest::StreamingRecognizeRequest(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::protobuf_google_2fcloud_2fspeech_2fv1_2fcloud_5fspeech_2eproto::InitDefaultsStreamingRecognizeRequest();
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.cloud.speech.v1.StreamingRecognizeRequest)
}
StreamingRecognizeRequest::StreamingRecognizeRequest(const StreamingRecognizeRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_streaming_request();
  switch (from.streaming_request_case()) {
    case kStreamingConfig: {
      mutable_streaming_config()->::google::cloud::speech::v1::StreamingRecognitionConfig::MergeFrom(from.streaming_config());
      break;
    }
    case kAudioContent: {
      set_audio_content(from.audio_content());
      break;
    }
    case STREAMING_REQUEST_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:google.cloud.speech.v1.StreamingRecognizeRequest)
}

void StreamingRecognizeRequest::SharedCtor() {
  clear_has_streaming_request();
  _cached_size_ = 0;
}

StreamingRecognizeRequest::~StreamingRecognizeRequest() {
  // @@protoc_insertion_point(destructor:google.cloud.speech.v1.StreamingRecognizeRequest)
  SharedDtor();
}

void StreamingRecognizeRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  if (has_streaming_request()) {
    clear_streaming_request();
  }
}

void StreamingRecognizeRequest::ArenaDtor(void* object) {
  StreamingRecognizeRequest* _this = reinterpret_cast< StreamingRecognizeRequest* >(object);
  (void)_this;
}
void StreamingRecognizeRequest::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void StreamingRecognizeRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StreamingRecognizeRequest::descriptor() {
  ::protobuf_google_2fcloud_2fspeech_2fv1_2fcloud_5fspeech_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fcloud_2fspeech_2fv1_2fcloud_5fspeech_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const StreamingRecognizeRequest& StreamingRecognizeRequest::default_instance() {
  ::protobuf_google_2fcloud_2fspeech_2fv1_2fcloud_5fspeech_2eproto::InitDefaultsStreamingRecognizeRequest();
  return *internal_default_instance();
}

StreamingRecognizeRequest* StreamingRecognizeRequest::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<StreamingRecognizeRequest>(arena);
}

void StreamingRecognizeRequest::clear_streaming_request() {
// @@protoc_insertion_point(one_of_clear_start:google.cloud.speech.v1.StreamingRecognizeRequest)
  switch (streaming_request_case()) {
    case kStreamingConfig: {
      if (GetArenaNoVirtual() == NULL) {
        delete streaming_request_.streaming_config_;
      }
      break;
    }
    case kAudioContent: {
      streaming_request_.audio_content_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
          GetArenaNoVirtual());
      break;
    }
    case STREAMING_REQUEST_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = STREAMING_REQUEST_NOT_SET;
}


void StreamingRecognizeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.cloud.speech.v1.StreamingRecognizeRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_streaming_request();
  _internal_metadata_.Clear();
}

bool StreamingRecognizeRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.cloud.speech.v1.StreamingRecognizeRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .google.cloud.speech.v1.StreamingRecognitionConfig streaming_config = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_streaming_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes audio_content = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_audio_content()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.cloud.speech.v1.StreamingRecognizeRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.cloud.speech.v1.StreamingRecognizeRequest)
  return false;
#undef DO_
}

void StreamingRecognizeRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.cloud.speech.v1.StreamingRecognizeRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.cloud.speech.v1.StreamingRecognitionConfig streaming_config = 1;
  if (has_streaming_config()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *streaming_request_.streaming_config_, output);
  }

  // bytes audio_content = 2;
  if (has_audio_content()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->audio_content(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:google.cloud.speech.v1.StreamingRecognizeRequest)
}

::google::protobuf::uint8* StreamingRecognizeRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.cloud.speech.v1.StreamingRecognizeRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.cloud.speech.v1.StreamingRecognitionConfig streaming_config = 1;
  if (has_streaming_config()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *streaming_request_.streaming_config_, deterministic, target);
  }

  // bytes audio_content = 2;
  if (has_audio_content()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->audio_content(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.cloud.speech.v1.StreamingRecognizeRequest)
  return target;
}

size_t StreamingRecognizeRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.cloud.speech.v1.StreamingRecognizeRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  switch (streaming_request_case()) {
    // .google.cloud.speech.v1.StreamingRecognitionConfig streaming_config = 1;
    case kStreamingConfig: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *streaming_request_.streaming_config_);
      break;
    }
    // bytes audio_content = 2;
    case kAudioContent: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->audio_content());
      break;
    }
    case STREAMING_REQUEST_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StreamingRecognizeRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.cloud.speech.v1.StreamingRecognizeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const StreamingRecognizeRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const StreamingRecognizeRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.cloud.speech.v1.StreamingRecognizeRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.cloud.speech.v1.StreamingRecognizeRequest)
    MergeFrom(*source);
  }
}

void StreamingRecognizeRequest::MergeFrom(const StreamingRecognizeRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.cloud.speech.v1.StreamingRecognizeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.streaming_request_case()) {
    case kStreamingConfig: {
      mutable_streaming_config()->::google::cloud::speech::v1::StreamingRecognitionConfig::MergeFrom(from.streaming_config());
      break;
    }
    case kAudioContent: {
      set_audio_content(from.audio_content());
      break;
    }
    case STREAMING_REQUEST_NOT_SET: {
      break;
    }
  }
}

void StreamingRecognizeRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.cloud.speech.v1.StreamingRecognizeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StreamingRecognizeRequest::CopyFrom(const StreamingRecognizeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.cloud.speech.v1.StreamingRecognizeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StreamingRecognizeRequest::IsInitialized() const {
  return true;
}

void StreamingRecognizeRequest::Swap(StreamingRecognizeRequest* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    StreamingRecognizeRequest* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void StreamingRecognizeRequest::UnsafeArenaSwap(StreamingRecognizeRequest* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void StreamingRecognizeRequest::InternalSwap(StreamingRecognizeRequest* other) {
  using std::swap;
  swap(streaming_request_, other->streaming_request_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata StreamingRecognizeRequest::GetMetadata() const {
  protobuf_google_2fcloud_2fspeech_2fv1_2fcloud_5fspeech_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fcloud_2fspeech_2fv1_2fcloud_5fspeech_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void StreamingRecognitionConfig::InitAsDefaultInstance() {
  ::google::cloud::speech::v1::_StreamingRecognitionConfig_default_instance_._instance.get_mutable()->config_ = const_cast< ::google::cloud::speech::v1::RecognitionConfig*>(
      ::google::cloud::speech::v1::RecognitionConfig::internal_default_instance());
}
void StreamingRecognitionConfig::_slow_mutable_config() {
  config_ = ::google::protobuf::Arena::CreateMessage< ::google::cloud::speech::v1::RecognitionConfig >(
      GetArenaNoVirtual());
}
void StreamingRecognitionConfig::unsafe_arena_set_allocated_config(
    ::google::cloud::speech::v1::RecognitionConfig* config) {
  if (GetArenaNoVirtual() == NULL) {
    delete config_;
  }
  config_ = config;
  if (config) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.speech.v1.StreamingRecognitionConfig.config)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StreamingRecognitionConfig::kConfigFieldNumber;
const int StreamingRecognitionConfig::kSingleUtteranceFieldNumber;
const int StreamingRecognitionConfig::kInterimResultsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StreamingRecognitionConfig::StreamingRecognitionConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_google_2fcloud_2fspeech_2fv1_2fcloud_5fspeech_2eproto::InitDefaultsStreamingRecognitionConfig();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.cloud.speech.v1.StreamingRecognitionConfig)
}
StreamingRecognitionConfig::StreamingRecognitionConfig(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::protobuf_google_2fcloud_2fspeech_2fv1_2fcloud_5fspeech_2eproto::InitDefaultsStreamingRecognitionConfig();
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.cloud.speech.v1.StreamingRecognitionConfig)
}
StreamingRecognitionConfig::StreamingRecognitionConfig(const StreamingRecognitionConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_config()) {
    config_ = new ::google::cloud::speech::v1::RecognitionConfig(*from.config_);
  } else {
    config_ = NULL;
  }
  ::memcpy(&single_utterance_, &from.single_utterance_,
    static_cast<size_t>(reinterpret_cast<char*>(&interim_results_) -
    reinterpret_cast<char*>(&single_utterance_)) + sizeof(interim_results_));
  // @@protoc_insertion_point(copy_constructor:google.cloud.speech.v1.StreamingRecognitionConfig)
}

void StreamingRecognitionConfig::SharedCtor() {
  ::memset(&config_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&interim_results_) -
      reinterpret_cast<char*>(&config_)) + sizeof(interim_results_));
  _cached_size_ = 0;
}

StreamingRecognitionConfig::~StreamingRecognitionConfig() {
  // @@protoc_insertion_point(destructor:google.cloud.speech.v1.StreamingRecognitionConfig)
  SharedDtor();
}

void StreamingRecognitionConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  if (this != internal_default_instance()) delete config_;
}

void StreamingRecognitionConfig::ArenaDtor(void* object) {
  StreamingRecognitionConfig* _this = reinterpret_cast< StreamingRecognitionConfig* >(object);
  (void)_this;
}
void StreamingRecognitionConfig::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void StreamingRecognitionConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StreamingRecognitionConfig::descriptor() {
  ::protobuf_google_2fcloud_2fspeech_2fv1_2fcloud_5fspeech_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fcloud_2fspeech_2fv1_2fcloud_5fspeech_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const StreamingRecognitionConfig& StreamingRecognitionConfig::default_instance() {
  ::protobuf_google_2fcloud_2fspeech_2fv1_2fcloud_5fspeech_2eproto::InitDefaultsStreamingRecognitionConfig();
  return *internal_default_instance();
}

StreamingRecognitionConfig* StreamingRecognitionConfig::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<StreamingRecognitionConfig>(arena);
}

void StreamingRecognitionConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:google.cloud.speech.v1.StreamingRecognitionConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && config_ != NULL) {
    delete config_;
  }
  config_ = NULL;
  ::memset(&single_utterance_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&interim_results_) -
      reinterpret_cast<char*>(&single_utterance_)) + sizeof(interim_results_));
  _internal_metadata_.Clear();
}

bool StreamingRecognitionConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.cloud.speech.v1.StreamingRecognitionConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .google.cloud.speech.v1.RecognitionConfig config = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool single_utterance = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &single_utterance_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool interim_results = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &interim_results_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.cloud.speech.v1.StreamingRecognitionConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.cloud.speech.v1.StreamingRecognitionConfig)
  return false;
#undef DO_
}

void StreamingRecognitionConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.cloud.speech.v1.StreamingRecognitionConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.cloud.speech.v1.RecognitionConfig config = 1;
  if (this->has_config()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->config_, output);
  }

  // bool single_utterance = 2;
  if (this->single_utterance() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->single_utterance(), output);
  }

  // bool interim_results = 3;
  if (this->interim_results() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->interim_results(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:google.cloud.speech.v1.StreamingRecognitionConfig)
}

::google::protobuf::uint8* StreamingRecognitionConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.cloud.speech.v1.StreamingRecognitionConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.cloud.speech.v1.RecognitionConfig config = 1;
  if (this->has_config()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->config_, deterministic, target);
  }

  // bool single_utterance = 2;
  if (this->single_utterance() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->single_utterance(), target);
  }

  // bool interim_results = 3;
  if (this->interim_results() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->interim_results(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.cloud.speech.v1.StreamingRecognitionConfig)
  return target;
}

size_t StreamingRecognitionConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.cloud.speech.v1.StreamingRecognitionConfig)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .google.cloud.speech.v1.RecognitionConfig config = 1;
  if (this->has_config()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->config_);
  }

  // bool single_utterance = 2;
  if (this->single_utterance() != 0) {
    total_size += 1 + 1;
  }

  // bool interim_results = 3;
  if (this->interim_results() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StreamingRecognitionConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.cloud.speech.v1.StreamingRecognitionConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const StreamingRecognitionConfig* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const StreamingRecognitionConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.cloud.speech.v1.StreamingRecognitionConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.cloud.speech.v1.StreamingRecognitionConfig)
    MergeFrom(*source);
  }
}

void StreamingRecognitionConfig::MergeFrom(const StreamingRecognitionConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.cloud.speech.v1.StreamingRecognitionConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_config()) {
    mutable_config()->::google::cloud::speech::v1::RecognitionConfig::MergeFrom(from.config());
  }
  if (from.single_utterance() != 0) {
    set_single_utterance(from.single_utterance());
  }
  if (from.interim_results() != 0) {
    set_interim_results(from.interim_results());
  }
}

void StreamingRecognitionConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.cloud.speech.v1.StreamingRecognitionConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StreamingRecognitionConfig::CopyFrom(const StreamingRecognitionConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.cloud.speech.v1.StreamingRecognitionConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StreamingRecognitionConfig::IsInitialized() const {
  return true;
}

void StreamingRecognitionConfig::Swap(StreamingRecognitionConfig* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    StreamingRecognitionConfig* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void StreamingRecognitionConfig::UnsafeArenaSwap(StreamingRecognitionConfig* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void StreamingRecognitionConfig::InternalSwap(StreamingRecognitionConfig* other) {
  using std::swap;
  swap(config_, other->config_);
  swap(single_utterance_, other->single_utterance_);
  swap(interim_results_, other->interim_results_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata StreamingRecognitionConfig::GetMetadata() const {
  protobuf_google_2fcloud_2fspeech_2fv1_2fcloud_5fspeech_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fcloud_2fspeech_2fv1_2fcloud_5fspeech_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void RecognitionConfig::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RecognitionConfig::kEncodingFieldNumber;
const int RecognitionConfig::kSampleRateHertzFieldNumber;
const int RecognitionConfig::kLanguageCodeFieldNumber;
const int RecognitionConfig::kMaxAlternativesFieldNumber;
const int RecognitionConfig::kProfanityFilterFieldNumber;
const int RecognitionConfig::kSpeechContextsFieldNumber;
const int RecognitionConfig::kEnableWordTimeOffsetsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RecognitionConfig::RecognitionConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_google_2fcloud_2fspeech_2fv1_2fcloud_5fspeech_2eproto::InitDefaultsRecognitionConfig();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.cloud.speech.v1.RecognitionConfig)
}
RecognitionConfig::RecognitionConfig(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  speech_contexts_(arena) {
  ::protobuf_google_2fcloud_2fspeech_2fv1_2fcloud_5fspeech_2eproto::InitDefaultsRecognitionConfig();
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.cloud.speech.v1.RecognitionConfig)
}
RecognitionConfig::RecognitionConfig(const RecognitionConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      speech_contexts_(from.speech_contexts_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  language_code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.language_code().size() > 0) {
    language_code_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.language_code(),
      GetArenaNoVirtual());
  }
  ::memcpy(&encoding_, &from.encoding_,
    static_cast<size_t>(reinterpret_cast<char*>(&enable_word_time_offsets_) -
    reinterpret_cast<char*>(&encoding_)) + sizeof(enable_word_time_offsets_));
  // @@protoc_insertion_point(copy_constructor:google.cloud.speech.v1.RecognitionConfig)
}

void RecognitionConfig::SharedCtor() {
  language_code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&encoding_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&enable_word_time_offsets_) -
      reinterpret_cast<char*>(&encoding_)) + sizeof(enable_word_time_offsets_));
  _cached_size_ = 0;
}

RecognitionConfig::~RecognitionConfig() {
  // @@protoc_insertion_point(destructor:google.cloud.speech.v1.RecognitionConfig)
  SharedDtor();
}

void RecognitionConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  language_code_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void RecognitionConfig::ArenaDtor(void* object) {
  RecognitionConfig* _this = reinterpret_cast< RecognitionConfig* >(object);
  (void)_this;
}
void RecognitionConfig::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void RecognitionConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RecognitionConfig::descriptor() {
  ::protobuf_google_2fcloud_2fspeech_2fv1_2fcloud_5fspeech_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fcloud_2fspeech_2fv1_2fcloud_5fspeech_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RecognitionConfig& RecognitionConfig::default_instance() {
  ::protobuf_google_2fcloud_2fspeech_2fv1_2fcloud_5fspeech_2eproto::InitDefaultsRecognitionConfig();
  return *internal_default_instance();
}

RecognitionConfig* RecognitionConfig::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<RecognitionConfig>(arena);
}

void RecognitionConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:google.cloud.speech.v1.RecognitionConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  speech_contexts_.Clear();
  language_code_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  ::memset(&encoding_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&enable_word_time_offsets_) -
      reinterpret_cast<char*>(&encoding_)) + sizeof(enable_word_time_offsets_));
  _internal_metadata_.Clear();
}

bool RecognitionConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.cloud.speech.v1.RecognitionConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .google.cloud.speech.v1.RecognitionConfig.AudioEncoding encoding = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_encoding(static_cast< ::google::cloud::speech::v1::RecognitionConfig_AudioEncoding >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 sample_rate_hertz = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sample_rate_hertz_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string language_code = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_language_code()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->language_code().data(), static_cast<int>(this->language_code().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.cloud.speech.v1.RecognitionConfig.language_code"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 max_alternatives = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_alternatives_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool profanity_filter = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &profanity_filter_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .google.cloud.speech.v1.SpeechContext speech_contexts = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_speech_contexts()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool enable_word_time_offsets = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enable_word_time_offsets_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.cloud.speech.v1.RecognitionConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.cloud.speech.v1.RecognitionConfig)
  return false;
#undef DO_
}

void RecognitionConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.cloud.speech.v1.RecognitionConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.cloud.speech.v1.RecognitionConfig.AudioEncoding encoding = 1;
  if (this->encoding() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->encoding(), output);
  }

  // int32 sample_rate_hertz = 2;
  if (this->sample_rate_hertz() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->sample_rate_hertz(), output);
  }

  // string language_code = 3;
  if (this->language_code().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->language_code().data(), static_cast<int>(this->language_code().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.cloud.speech.v1.RecognitionConfig.language_code");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->language_code(), output);
  }

  // int32 max_alternatives = 4;
  if (this->max_alternatives() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->max_alternatives(), output);
  }

  // bool profanity_filter = 5;
  if (this->profanity_filter() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->profanity_filter(), output);
  }

  // repeated .google.cloud.speech.v1.SpeechContext speech_contexts = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->speech_contexts_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->speech_contexts(static_cast<int>(i)), output);
  }

  // bool enable_word_time_offsets = 8;
  if (this->enable_word_time_offsets() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->enable_word_time_offsets(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:google.cloud.speech.v1.RecognitionConfig)
}

::google::protobuf::uint8* RecognitionConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.cloud.speech.v1.RecognitionConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.cloud.speech.v1.RecognitionConfig.AudioEncoding encoding = 1;
  if (this->encoding() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->encoding(), target);
  }

  // int32 sample_rate_hertz = 2;
  if (this->sample_rate_hertz() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->sample_rate_hertz(), target);
  }

  // string language_code = 3;
  if (this->language_code().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->language_code().data(), static_cast<int>(this->language_code().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.cloud.speech.v1.RecognitionConfig.language_code");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->language_code(), target);
  }

  // int32 max_alternatives = 4;
  if (this->max_alternatives() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->max_alternatives(), target);
  }

  // bool profanity_filter = 5;
  if (this->profanity_filter() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->profanity_filter(), target);
  }

  // repeated .google.cloud.speech.v1.SpeechContext speech_contexts = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->speech_contexts_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, this->speech_contexts(static_cast<int>(i)), deterministic, target);
  }

  // bool enable_word_time_offsets = 8;
  if (this->enable_word_time_offsets() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->enable_word_time_offsets(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.cloud.speech.v1.RecognitionConfig)
  return target;
}

size_t RecognitionConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.cloud.speech.v1.RecognitionConfig)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .google.cloud.speech.v1.SpeechContext speech_contexts = 6;
  {
    unsigned int count = static_cast<unsigned int>(this->speech_contexts_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->speech_contexts(static_cast<int>(i)));
    }
  }

  // string language_code = 3;
  if (this->language_code().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->language_code());
  }

  // .google.cloud.speech.v1.RecognitionConfig.AudioEncoding encoding = 1;
  if (this->encoding() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->encoding());
  }

  // int32 sample_rate_hertz = 2;
  if (this->sample_rate_hertz() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->sample_rate_hertz());
  }

  // int32 max_alternatives = 4;
  if (this->max_alternatives() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->max_alternatives());
  }

  // bool profanity_filter = 5;
  if (this->profanity_filter() != 0) {
    total_size += 1 + 1;
  }

  // bool enable_word_time_offsets = 8;
  if (this->enable_word_time_offsets() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RecognitionConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.cloud.speech.v1.RecognitionConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const RecognitionConfig* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RecognitionConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.cloud.speech.v1.RecognitionConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.cloud.speech.v1.RecognitionConfig)
    MergeFrom(*source);
  }
}

void RecognitionConfig::MergeFrom(const RecognitionConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.cloud.speech.v1.RecognitionConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  speech_contexts_.MergeFrom(from.speech_contexts_);
  if (from.language_code().size() > 0) {
    set_language_code(from.language_code());
  }
  if (from.encoding() != 0) {
    set_encoding(from.encoding());
  }
  if (from.sample_rate_hertz() != 0) {
    set_sample_rate_hertz(from.sample_rate_hertz());
  }
  if (from.max_alternatives() != 0) {
    set_max_alternatives(from.max_alternatives());
  }
  if (from.profanity_filter() != 0) {
    set_profanity_filter(from.profanity_filter());
  }
  if (from.enable_word_time_offsets() != 0) {
    set_enable_word_time_offsets(from.enable_word_time_offsets());
  }
}

void RecognitionConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.cloud.speech.v1.RecognitionConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RecognitionConfig::CopyFrom(const RecognitionConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.cloud.speech.v1.RecognitionConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RecognitionConfig::IsInitialized() const {
  return true;
}

void RecognitionConfig::Swap(RecognitionConfig* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    RecognitionConfig* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void RecognitionConfig::UnsafeArenaSwap(RecognitionConfig* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void RecognitionConfig::InternalSwap(RecognitionConfig* other) {
  using std::swap;
  speech_contexts_.InternalSwap(&other->speech_contexts_);
  language_code_.Swap(&other->language_code_);
  swap(encoding_, other->encoding_);
  swap(sample_rate_hertz_, other->sample_rate_hertz_);
  swap(max_alternatives_, other->max_alternatives_);
  swap(profanity_filter_, other->profanity_filter_);
  swap(enable_word_time_offsets_, other->enable_word_time_offsets_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RecognitionConfig::GetMetadata() const {
  protobuf_google_2fcloud_2fspeech_2fv1_2fcloud_5fspeech_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fcloud_2fspeech_2fv1_2fcloud_5fspeech_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void SpeechContext::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SpeechContext::kPhrasesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SpeechContext::SpeechContext()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_google_2fcloud_2fspeech_2fv1_2fcloud_5fspeech_2eproto::InitDefaultsSpeechContext();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.cloud.speech.v1.SpeechContext)
}
SpeechContext::SpeechContext(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  phrases_(arena) {
  ::protobuf_google_2fcloud_2fspeech_2fv1_2fcloud_5fspeech_2eproto::InitDefaultsSpeechContext();
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.cloud.speech.v1.SpeechContext)
}
SpeechContext::SpeechContext(const SpeechContext& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      phrases_(from.phrases_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:google.cloud.speech.v1.SpeechContext)
}

void SpeechContext::SharedCtor() {
  _cached_size_ = 0;
}

SpeechContext::~SpeechContext() {
  // @@protoc_insertion_point(destructor:google.cloud.speech.v1.SpeechContext)
  SharedDtor();
}

void SpeechContext::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
}

void SpeechContext::ArenaDtor(void* object) {
  SpeechContext* _this = reinterpret_cast< SpeechContext* >(object);
  (void)_this;
}
void SpeechContext::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void SpeechContext::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SpeechContext::descriptor() {
  ::protobuf_google_2fcloud_2fspeech_2fv1_2fcloud_5fspeech_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fcloud_2fspeech_2fv1_2fcloud_5fspeech_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SpeechContext& SpeechContext::default_instance() {
  ::protobuf_google_2fcloud_2fspeech_2fv1_2fcloud_5fspeech_2eproto::InitDefaultsSpeechContext();
  return *internal_default_instance();
}

SpeechContext* SpeechContext::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<SpeechContext>(arena);
}

void SpeechContext::Clear() {
// @@protoc_insertion_point(message_clear_start:google.cloud.speech.v1.SpeechContext)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  phrases_.Clear();
  _internal_metadata_.Clear();
}

bool SpeechContext::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.cloud.speech.v1.SpeechContext)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string phrases = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_phrases()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->phrases(this->phrases_size() - 1).data(),
            static_cast<int>(this->phrases(this->phrases_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.cloud.speech.v1.SpeechContext.phrases"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.cloud.speech.v1.SpeechContext)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.cloud.speech.v1.SpeechContext)
  return false;
#undef DO_
}

void SpeechContext::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.cloud.speech.v1.SpeechContext)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string phrases = 1;
  for (int i = 0, n = this->phrases_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->phrases(i).data(), static_cast<int>(this->phrases(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.cloud.speech.v1.SpeechContext.phrases");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->phrases(i), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:google.cloud.speech.v1.SpeechContext)
}

::google::protobuf::uint8* SpeechContext::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.cloud.speech.v1.SpeechContext)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string phrases = 1;
  for (int i = 0, n = this->phrases_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->phrases(i).data(), static_cast<int>(this->phrases(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.cloud.speech.v1.SpeechContext.phrases");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->phrases(i), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.cloud.speech.v1.SpeechContext)
  return target;
}

size_t SpeechContext::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.cloud.speech.v1.SpeechContext)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated string phrases = 1;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->phrases_size());
  for (int i = 0, n = this->phrases_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->phrases(i));
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SpeechContext::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.cloud.speech.v1.SpeechContext)
  GOOGLE_DCHECK_NE(&from, this);
  const SpeechContext* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SpeechContext>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.cloud.speech.v1.SpeechContext)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.cloud.speech.v1.SpeechContext)
    MergeFrom(*source);
  }
}

void SpeechContext::MergeFrom(const SpeechContext& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.cloud.speech.v1.SpeechContext)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  phrases_.MergeFrom(from.phrases_);
}

void SpeechContext::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.cloud.speech.v1.SpeechContext)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SpeechContext::CopyFrom(const SpeechContext& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.cloud.speech.v1.SpeechContext)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpeechContext::IsInitialized() const {
  return true;
}

void SpeechContext::Swap(SpeechContext* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    SpeechContext* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void SpeechContext::UnsafeArenaSwap(SpeechContext* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void SpeechContext::InternalSwap(SpeechContext* other) {
  using std::swap;
  phrases_.InternalSwap(&other->phrases_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SpeechContext::GetMetadata() const {
  protobuf_google_2fcloud_2fspeech_2fv1_2fcloud_5fspeech_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fcloud_2fspeech_2fv1_2fcloud_5fspeech_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void RecognitionAudio::InitAsDefaultInstance() {
  ::google::cloud::speech::v1::_RecognitionAudio_default_instance_.content_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::google::cloud::speech::v1::_RecognitionAudio_default_instance_.uri_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RecognitionAudio::kContentFieldNumber;
const int RecognitionAudio::kUriFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RecognitionAudio::RecognitionAudio()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_google_2fcloud_2fspeech_2fv1_2fcloud_5fspeech_2eproto::InitDefaultsRecognitionAudio();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.cloud.speech.v1.RecognitionAudio)
}
RecognitionAudio::RecognitionAudio(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::protobuf_google_2fcloud_2fspeech_2fv1_2fcloud_5fspeech_2eproto::InitDefaultsRecognitionAudio();
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.cloud.speech.v1.RecognitionAudio)
}
RecognitionAudio::RecognitionAudio(const RecognitionAudio& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_audio_source();
  switch (from.audio_source_case()) {
    case kContent: {
      set_content(from.content());
      break;
    }
    case kUri: {
      set_uri(from.uri());
      break;
    }
    case AUDIO_SOURCE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:google.cloud.speech.v1.RecognitionAudio)
}

void RecognitionAudio::SharedCtor() {
  clear_has_audio_source();
  _cached_size_ = 0;
}

RecognitionAudio::~RecognitionAudio() {
  // @@protoc_insertion_point(destructor:google.cloud.speech.v1.RecognitionAudio)
  SharedDtor();
}

void RecognitionAudio::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  if (has_audio_source()) {
    clear_audio_source();
  }
}

void RecognitionAudio::ArenaDtor(void* object) {
  RecognitionAudio* _this = reinterpret_cast< RecognitionAudio* >(object);
  (void)_this;
}
void RecognitionAudio::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void RecognitionAudio::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RecognitionAudio::descriptor() {
  ::protobuf_google_2fcloud_2fspeech_2fv1_2fcloud_5fspeech_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fcloud_2fspeech_2fv1_2fcloud_5fspeech_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RecognitionAudio& RecognitionAudio::default_instance() {
  ::protobuf_google_2fcloud_2fspeech_2fv1_2fcloud_5fspeech_2eproto::InitDefaultsRecognitionAudio();
  return *internal_default_instance();
}

RecognitionAudio* RecognitionAudio::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<RecognitionAudio>(arena);
}

void RecognitionAudio::clear_audio_source() {
// @@protoc_insertion_point(one_of_clear_start:google.cloud.speech.v1.RecognitionAudio)
  switch (audio_source_case()) {
    case kContent: {
      audio_source_.content_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
          GetArenaNoVirtual());
      break;
    }
    case kUri: {
      audio_source_.uri_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
          GetArenaNoVirtual());
      break;
    }
    case AUDIO_SOURCE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = AUDIO_SOURCE_NOT_SET;
}


void RecognitionAudio::Clear() {
// @@protoc_insertion_point(message_clear_start:google.cloud.speech.v1.RecognitionAudio)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_audio_source();
  _internal_metadata_.Clear();
}

bool RecognitionAudio::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.cloud.speech.v1.RecognitionAudio)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes content = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_content()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string uri = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uri()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->uri().data(), static_cast<int>(this->uri().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.cloud.speech.v1.RecognitionAudio.uri"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.cloud.speech.v1.RecognitionAudio)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.cloud.speech.v1.RecognitionAudio)
  return false;
#undef DO_
}

void RecognitionAudio::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.cloud.speech.v1.RecognitionAudio)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes content = 1;
  if (has_content()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->content(), output);
  }

  // string uri = 2;
  if (has_uri()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->uri().data(), static_cast<int>(this->uri().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.cloud.speech.v1.RecognitionAudio.uri");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->uri(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:google.cloud.speech.v1.RecognitionAudio)
}

::google::protobuf::uint8* RecognitionAudio::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.cloud.speech.v1.RecognitionAudio)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes content = 1;
  if (has_content()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->content(), target);
  }

  // string uri = 2;
  if (has_uri()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->uri().data(), static_cast<int>(this->uri().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.cloud.speech.v1.RecognitionAudio.uri");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->uri(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.cloud.speech.v1.RecognitionAudio)
  return target;
}

size_t RecognitionAudio::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.cloud.speech.v1.RecognitionAudio)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  switch (audio_source_case()) {
    // bytes content = 1;
    case kContent: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->content());
      break;
    }
    // string uri = 2;
    case kUri: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->uri());
      break;
    }
    case AUDIO_SOURCE_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RecognitionAudio::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.cloud.speech.v1.RecognitionAudio)
  GOOGLE_DCHECK_NE(&from, this);
  const RecognitionAudio* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RecognitionAudio>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.cloud.speech.v1.RecognitionAudio)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.cloud.speech.v1.RecognitionAudio)
    MergeFrom(*source);
  }
}

void RecognitionAudio::MergeFrom(const RecognitionAudio& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.cloud.speech.v1.RecognitionAudio)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.audio_source_case()) {
    case kContent: {
      set_content(from.content());
      break;
    }
    case kUri: {
      set_uri(from.uri());
      break;
    }
    case AUDIO_SOURCE_NOT_SET: {
      break;
    }
  }
}

void RecognitionAudio::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.cloud.speech.v1.RecognitionAudio)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RecognitionAudio::CopyFrom(const RecognitionAudio& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.cloud.speech.v1.RecognitionAudio)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RecognitionAudio::IsInitialized() const {
  return true;
}

void RecognitionAudio::Swap(RecognitionAudio* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    RecognitionAudio* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void RecognitionAudio::UnsafeArenaSwap(RecognitionAudio* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void RecognitionAudio::InternalSwap(RecognitionAudio* other) {
  using std::swap;
  swap(audio_source_, other->audio_source_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RecognitionAudio::GetMetadata() const {
  protobuf_google_2fcloud_2fspeech_2fv1_2fcloud_5fspeech_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fcloud_2fspeech_2fv1_2fcloud_5fspeech_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void RecognizeResponse::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RecognizeResponse::kResultsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RecognizeResponse::RecognizeResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_google_2fcloud_2fspeech_2fv1_2fcloud_5fspeech_2eproto::InitDefaultsRecognizeResponse();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.cloud.speech.v1.RecognizeResponse)
}
RecognizeResponse::RecognizeResponse(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  results_(arena) {
  ::protobuf_google_2fcloud_2fspeech_2fv1_2fcloud_5fspeech_2eproto::InitDefaultsRecognizeResponse();
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.cloud.speech.v1.RecognizeResponse)
}
RecognizeResponse::RecognizeResponse(const RecognizeResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      results_(from.results_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:google.cloud.speech.v1.RecognizeResponse)
}

void RecognizeResponse::SharedCtor() {
  _cached_size_ = 0;
}

RecognizeResponse::~RecognizeResponse() {
  // @@protoc_insertion_point(destructor:google.cloud.speech.v1.RecognizeResponse)
  SharedDtor();
}

void RecognizeResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
}

void RecognizeResponse::ArenaDtor(void* object) {
  RecognizeResponse* _this = reinterpret_cast< RecognizeResponse* >(object);
  (void)_this;
}
void RecognizeResponse::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void RecognizeResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RecognizeResponse::descriptor() {
  ::protobuf_google_2fcloud_2fspeech_2fv1_2fcloud_5fspeech_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fcloud_2fspeech_2fv1_2fcloud_5fspeech_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RecognizeResponse& RecognizeResponse::default_instance() {
  ::protobuf_google_2fcloud_2fspeech_2fv1_2fcloud_5fspeech_2eproto::InitDefaultsRecognizeResponse();
  return *internal_default_instance();
}

RecognizeResponse* RecognizeResponse::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<RecognizeResponse>(arena);
}

void RecognizeResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:google.cloud.speech.v1.RecognizeResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  results_.Clear();
  _internal_metadata_.Clear();
}

bool RecognizeResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.cloud.speech.v1.RecognizeResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .google.cloud.speech.v1.SpeechRecognitionResult results = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_results()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.cloud.speech.v1.RecognizeResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.cloud.speech.v1.RecognizeResponse)
  return false;
#undef DO_
}

void RecognizeResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.cloud.speech.v1.RecognizeResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .google.cloud.speech.v1.SpeechRecognitionResult results = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->results_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->results(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:google.cloud.speech.v1.RecognizeResponse)
}

::google::protobuf::uint8* RecognizeResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.cloud.speech.v1.RecognizeResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .google.cloud.speech.v1.SpeechRecognitionResult results = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->results_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->results(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.cloud.speech.v1.RecognizeResponse)
  return target;
}

size_t RecognizeResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.cloud.speech.v1.RecognizeResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .google.cloud.speech.v1.SpeechRecognitionResult results = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->results_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->results(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RecognizeResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.cloud.speech.v1.RecognizeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const RecognizeResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RecognizeResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.cloud.speech.v1.RecognizeResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.cloud.speech.v1.RecognizeResponse)
    MergeFrom(*source);
  }
}

void RecognizeResponse::MergeFrom(const RecognizeResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.cloud.speech.v1.RecognizeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  results_.MergeFrom(from.results_);
}

void RecognizeResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.cloud.speech.v1.RecognizeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RecognizeResponse::CopyFrom(const RecognizeResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.cloud.speech.v1.RecognizeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RecognizeResponse::IsInitialized() const {
  return true;
}

void RecognizeResponse::Swap(RecognizeResponse* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    RecognizeResponse* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void RecognizeResponse::UnsafeArenaSwap(RecognizeResponse* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void RecognizeResponse::InternalSwap(RecognizeResponse* other) {
  using std::swap;
  results_.InternalSwap(&other->results_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RecognizeResponse::GetMetadata() const {
  protobuf_google_2fcloud_2fspeech_2fv1_2fcloud_5fspeech_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fcloud_2fspeech_2fv1_2fcloud_5fspeech_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void LongRunningRecognizeResponse::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LongRunningRecognizeResponse::kResultsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LongRunningRecognizeResponse::LongRunningRecognizeResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_google_2fcloud_2fspeech_2fv1_2fcloud_5fspeech_2eproto::InitDefaultsLongRunningRecognizeResponse();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.cloud.speech.v1.LongRunningRecognizeResponse)
}
LongRunningRecognizeResponse::LongRunningRecognizeResponse(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  results_(arena) {
  ::protobuf_google_2fcloud_2fspeech_2fv1_2fcloud_5fspeech_2eproto::InitDefaultsLongRunningRecognizeResponse();
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.cloud.speech.v1.LongRunningRecognizeResponse)
}
LongRunningRecognizeResponse::LongRunningRecognizeResponse(const LongRunningRecognizeResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      results_(from.results_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:google.cloud.speech.v1.LongRunningRecognizeResponse)
}

void LongRunningRecognizeResponse::SharedCtor() {
  _cached_size_ = 0;
}

LongRunningRecognizeResponse::~LongRunningRecognizeResponse() {
  // @@protoc_insertion_point(destructor:google.cloud.speech.v1.LongRunningRecognizeResponse)
  SharedDtor();
}

void LongRunningRecognizeResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
}

void LongRunningRecognizeResponse::ArenaDtor(void* object) {
  LongRunningRecognizeResponse* _this = reinterpret_cast< LongRunningRecognizeResponse* >(object);
  (void)_this;
}
void LongRunningRecognizeResponse::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void LongRunningRecognizeResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LongRunningRecognizeResponse::descriptor() {
  ::protobuf_google_2fcloud_2fspeech_2fv1_2fcloud_5fspeech_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fcloud_2fspeech_2fv1_2fcloud_5fspeech_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LongRunningRecognizeResponse& LongRunningRecognizeResponse::default_instance() {
  ::protobuf_google_2fcloud_2fspeech_2fv1_2fcloud_5fspeech_2eproto::InitDefaultsLongRunningRecognizeResponse();
  return *internal_default_instance();
}

LongRunningRecognizeResponse* LongRunningRecognizeResponse::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<LongRunningRecognizeResponse>(arena);
}

void LongRunningRecognizeResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:google.cloud.speech.v1.LongRunningRecognizeResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  results_.Clear();
  _internal_metadata_.Clear();
}

bool LongRunningRecognizeResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.cloud.speech.v1.LongRunningRecognizeResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .google.cloud.speech.v1.SpeechRecognitionResult results = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_results()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.cloud.speech.v1.LongRunningRecognizeResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.cloud.speech.v1.LongRunningRecognizeResponse)
  return false;
#undef DO_
}

void LongRunningRecognizeResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.cloud.speech.v1.LongRunningRecognizeResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .google.cloud.speech.v1.SpeechRecognitionResult results = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->results_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->results(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:google.cloud.speech.v1.LongRunningRecognizeResponse)
}

::google::protobuf::uint8* LongRunningRecognizeResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.cloud.speech.v1.LongRunningRecognizeResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .google.cloud.speech.v1.SpeechRecognitionResult results = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->results_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->results(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.cloud.speech.v1.LongRunningRecognizeResponse)
  return target;
}

size_t LongRunningRecognizeResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.cloud.speech.v1.LongRunningRecognizeResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .google.cloud.speech.v1.SpeechRecognitionResult results = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->results_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->results(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LongRunningRecognizeResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.cloud.speech.v1.LongRunningRecognizeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const LongRunningRecognizeResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LongRunningRecognizeResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.cloud.speech.v1.LongRunningRecognizeResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.cloud.speech.v1.LongRunningRecognizeResponse)
    MergeFrom(*source);
  }
}

void LongRunningRecognizeResponse::MergeFrom(const LongRunningRecognizeResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.cloud.speech.v1.LongRunningRecognizeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  results_.MergeFrom(from.results_);
}

void LongRunningRecognizeResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.cloud.speech.v1.LongRunningRecognizeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LongRunningRecognizeResponse::CopyFrom(const LongRunningRecognizeResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.cloud.speech.v1.LongRunningRecognizeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LongRunningRecognizeResponse::IsInitialized() const {
  return true;
}

void LongRunningRecognizeResponse::Swap(LongRunningRecognizeResponse* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    LongRunningRecognizeResponse* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void LongRunningRecognizeResponse::UnsafeArenaSwap(LongRunningRecognizeResponse* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void LongRunningRecognizeResponse::InternalSwap(LongRunningRecognizeResponse* other) {
  using std::swap;
  results_.InternalSwap(&other->results_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LongRunningRecognizeResponse::GetMetadata() const {
  protobuf_google_2fcloud_2fspeech_2fv1_2fcloud_5fspeech_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fcloud_2fspeech_2fv1_2fcloud_5fspeech_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void LongRunningRecognizeMetadata::InitAsDefaultInstance() {
  ::google::cloud::speech::v1::_LongRunningRecognizeMetadata_default_instance_._instance.get_mutable()->start_time_ = const_cast< ::google::protobuf::Timestamp*>(
      ::google::protobuf::Timestamp::internal_default_instance());
  ::google::cloud::speech::v1::_LongRunningRecognizeMetadata_default_instance_._instance.get_mutable()->last_update_time_ = const_cast< ::google::protobuf::Timestamp*>(
      ::google::protobuf::Timestamp::internal_default_instance());
}
void LongRunningRecognizeMetadata::_slow_mutable_start_time() {
  start_time_ = ::google::protobuf::Arena::CreateMessage< ::google::protobuf::Timestamp >(
      GetArenaNoVirtual());
}
void LongRunningRecognizeMetadata::unsafe_arena_set_allocated_start_time(
    ::google::protobuf::Timestamp* start_time) {
  if (GetArenaNoVirtual() == NULL) {
    delete start_time_;
  }
  start_time_ = start_time;
  if (start_time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.speech.v1.LongRunningRecognizeMetadata.start_time)
}
void LongRunningRecognizeMetadata::clear_start_time() {
  if (GetArenaNoVirtual() == NULL && start_time_ != NULL) {
    delete start_time_;
  }
  start_time_ = NULL;
}
void LongRunningRecognizeMetadata::_slow_mutable_last_update_time() {
  last_update_time_ = ::google::protobuf::Arena::CreateMessage< ::google::protobuf::Timestamp >(
      GetArenaNoVirtual());
}
void LongRunningRecognizeMetadata::unsafe_arena_set_allocated_last_update_time(
    ::google::protobuf::Timestamp* last_update_time) {
  if (GetArenaNoVirtual() == NULL) {
    delete last_update_time_;
  }
  last_update_time_ = last_update_time;
  if (last_update_time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.speech.v1.LongRunningRecognizeMetadata.last_update_time)
}
void LongRunningRecognizeMetadata::clear_last_update_time() {
  if (GetArenaNoVirtual() == NULL && last_update_time_ != NULL) {
    delete last_update_time_;
  }
  last_update_time_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LongRunningRecognizeMetadata::kProgressPercentFieldNumber;
const int LongRunningRecognizeMetadata::kStartTimeFieldNumber;
const int LongRunningRecognizeMetadata::kLastUpdateTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LongRunningRecognizeMetadata::LongRunningRecognizeMetadata()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_google_2fcloud_2fspeech_2fv1_2fcloud_5fspeech_2eproto::InitDefaultsLongRunningRecognizeMetadata();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.cloud.speech.v1.LongRunningRecognizeMetadata)
}
LongRunningRecognizeMetadata::LongRunningRecognizeMetadata(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::protobuf_google_2fcloud_2fspeech_2fv1_2fcloud_5fspeech_2eproto::InitDefaultsLongRunningRecognizeMetadata();
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.cloud.speech.v1.LongRunningRecognizeMetadata)
}
LongRunningRecognizeMetadata::LongRunningRecognizeMetadata(const LongRunningRecognizeMetadata& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_start_time()) {
    start_time_ = new ::google::protobuf::Timestamp(*from.start_time_);
  } else {
    start_time_ = NULL;
  }
  if (from.has_last_update_time()) {
    last_update_time_ = new ::google::protobuf::Timestamp(*from.last_update_time_);
  } else {
    last_update_time_ = NULL;
  }
  progress_percent_ = from.progress_percent_;
  // @@protoc_insertion_point(copy_constructor:google.cloud.speech.v1.LongRunningRecognizeMetadata)
}

void LongRunningRecognizeMetadata::SharedCtor() {
  ::memset(&start_time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&progress_percent_) -
      reinterpret_cast<char*>(&start_time_)) + sizeof(progress_percent_));
  _cached_size_ = 0;
}

LongRunningRecognizeMetadata::~LongRunningRecognizeMetadata() {
  // @@protoc_insertion_point(destructor:google.cloud.speech.v1.LongRunningRecognizeMetadata)
  SharedDtor();
}

void LongRunningRecognizeMetadata::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  if (this != internal_default_instance()) delete start_time_;
  if (this != internal_default_instance()) delete last_update_time_;
}

void LongRunningRecognizeMetadata::ArenaDtor(void* object) {
  LongRunningRecognizeMetadata* _this = reinterpret_cast< LongRunningRecognizeMetadata* >(object);
  (void)_this;
}
void LongRunningRecognizeMetadata::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void LongRunningRecognizeMetadata::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LongRunningRecognizeMetadata::descriptor() {
  ::protobuf_google_2fcloud_2fspeech_2fv1_2fcloud_5fspeech_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fcloud_2fspeech_2fv1_2fcloud_5fspeech_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LongRunningRecognizeMetadata& LongRunningRecognizeMetadata::default_instance() {
  ::protobuf_google_2fcloud_2fspeech_2fv1_2fcloud_5fspeech_2eproto::InitDefaultsLongRunningRecognizeMetadata();
  return *internal_default_instance();
}

LongRunningRecognizeMetadata* LongRunningRecognizeMetadata::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<LongRunningRecognizeMetadata>(arena);
}

void LongRunningRecognizeMetadata::Clear() {
// @@protoc_insertion_point(message_clear_start:google.cloud.speech.v1.LongRunningRecognizeMetadata)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && start_time_ != NULL) {
    delete start_time_;
  }
  start_time_ = NULL;
  if (GetArenaNoVirtual() == NULL && last_update_time_ != NULL) {
    delete last_update_time_;
  }
  last_update_time_ = NULL;
  progress_percent_ = 0;
  _internal_metadata_.Clear();
}

bool LongRunningRecognizeMetadata::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.cloud.speech.v1.LongRunningRecognizeMetadata)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 progress_percent = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &progress_percent_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Timestamp start_time = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_start_time()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Timestamp last_update_time = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_last_update_time()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.cloud.speech.v1.LongRunningRecognizeMetadata)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.cloud.speech.v1.LongRunningRecognizeMetadata)
  return false;
#undef DO_
}

void LongRunningRecognizeMetadata::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.cloud.speech.v1.LongRunningRecognizeMetadata)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 progress_percent = 1;
  if (this->progress_percent() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->progress_percent(), output);
  }

  // .google.protobuf.Timestamp start_time = 2;
  if (this->has_start_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->start_time_, output);
  }

  // .google.protobuf.Timestamp last_update_time = 3;
  if (this->has_last_update_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->last_update_time_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:google.cloud.speech.v1.LongRunningRecognizeMetadata)
}

::google::protobuf::uint8* LongRunningRecognizeMetadata::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.cloud.speech.v1.LongRunningRecognizeMetadata)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 progress_percent = 1;
  if (this->progress_percent() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->progress_percent(), target);
  }

  // .google.protobuf.Timestamp start_time = 2;
  if (this->has_start_time()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, *this->start_time_, deterministic, target);
  }

  // .google.protobuf.Timestamp last_update_time = 3;
  if (this->has_last_update_time()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, *this->last_update_time_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.cloud.speech.v1.LongRunningRecognizeMetadata)
  return target;
}

size_t LongRunningRecognizeMetadata::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.cloud.speech.v1.LongRunningRecognizeMetadata)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .google.protobuf.Timestamp start_time = 2;
  if (this->has_start_time()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->start_time_);
  }

  // .google.protobuf.Timestamp last_update_time = 3;
  if (this->has_last_update_time()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->last_update_time_);
  }

  // int32 progress_percent = 1;
  if (this->progress_percent() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->progress_percent());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LongRunningRecognizeMetadata::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.cloud.speech.v1.LongRunningRecognizeMetadata)
  GOOGLE_DCHECK_NE(&from, this);
  const LongRunningRecognizeMetadata* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LongRunningRecognizeMetadata>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.cloud.speech.v1.LongRunningRecognizeMetadata)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.cloud.speech.v1.LongRunningRecognizeMetadata)
    MergeFrom(*source);
  }
}

void LongRunningRecognizeMetadata::MergeFrom(const LongRunningRecognizeMetadata& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.cloud.speech.v1.LongRunningRecognizeMetadata)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_start_time()) {
    mutable_start_time()->::google::protobuf::Timestamp::MergeFrom(from.start_time());
  }
  if (from.has_last_update_time()) {
    mutable_last_update_time()->::google::protobuf::Timestamp::MergeFrom(from.last_update_time());
  }
  if (from.progress_percent() != 0) {
    set_progress_percent(from.progress_percent());
  }
}

void LongRunningRecognizeMetadata::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.cloud.speech.v1.LongRunningRecognizeMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LongRunningRecognizeMetadata::CopyFrom(const LongRunningRecognizeMetadata& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.cloud.speech.v1.LongRunningRecognizeMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LongRunningRecognizeMetadata::IsInitialized() const {
  return true;
}

void LongRunningRecognizeMetadata::Swap(LongRunningRecognizeMetadata* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    LongRunningRecognizeMetadata* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void LongRunningRecognizeMetadata::UnsafeArenaSwap(LongRunningRecognizeMetadata* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void LongRunningRecognizeMetadata::InternalSwap(LongRunningRecognizeMetadata* other) {
  using std::swap;
  swap(start_time_, other->start_time_);
  swap(last_update_time_, other->last_update_time_);
  swap(progress_percent_, other->progress_percent_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LongRunningRecognizeMetadata::GetMetadata() const {
  protobuf_google_2fcloud_2fspeech_2fv1_2fcloud_5fspeech_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fcloud_2fspeech_2fv1_2fcloud_5fspeech_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void StreamingRecognizeResponse::InitAsDefaultInstance() {
  ::google::cloud::speech::v1::_StreamingRecognizeResponse_default_instance_._instance.get_mutable()->error_ = const_cast< ::google::rpc::Status*>(
      ::google::rpc::Status::internal_default_instance());
}
void StreamingRecognizeResponse::_slow_mutable_error() {
  error_ = ::google::protobuf::Arena::Create< ::google::rpc::Status >(
      GetArenaNoVirtual());
}
void StreamingRecognizeResponse::unsafe_arena_set_allocated_error(
    ::google::rpc::Status* error) {
  if (GetArenaNoVirtual() == NULL) {
    delete error_;
  }
  error_ = error;
  if (error) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.speech.v1.StreamingRecognizeResponse.error)
}
void StreamingRecognizeResponse::clear_error() {
  if (GetArenaNoVirtual() == NULL && error_ != NULL) {
    delete error_;
  }
  error_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StreamingRecognizeResponse::kErrorFieldNumber;
const int StreamingRecognizeResponse::kResultsFieldNumber;
const int StreamingRecognizeResponse::kSpeechEventTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StreamingRecognizeResponse::StreamingRecognizeResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_google_2fcloud_2fspeech_2fv1_2fcloud_5fspeech_2eproto::InitDefaultsStreamingRecognizeResponse();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.cloud.speech.v1.StreamingRecognizeResponse)
}
StreamingRecognizeResponse::StreamingRecognizeResponse(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  results_(arena) {
  ::protobuf_google_2fcloud_2fspeech_2fv1_2fcloud_5fspeech_2eproto::InitDefaultsStreamingRecognizeResponse();
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.cloud.speech.v1.StreamingRecognizeResponse)
}
StreamingRecognizeResponse::StreamingRecognizeResponse(const StreamingRecognizeResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      results_(from.results_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_error()) {
    error_ = new ::google::rpc::Status(*from.error_);
  } else {
    error_ = NULL;
  }
  speech_event_type_ = from.speech_event_type_;
  // @@protoc_insertion_point(copy_constructor:google.cloud.speech.v1.StreamingRecognizeResponse)
}

void StreamingRecognizeResponse::SharedCtor() {
  ::memset(&error_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&speech_event_type_) -
      reinterpret_cast<char*>(&error_)) + sizeof(speech_event_type_));
  _cached_size_ = 0;
}

StreamingRecognizeResponse::~StreamingRecognizeResponse() {
  // @@protoc_insertion_point(destructor:google.cloud.speech.v1.StreamingRecognizeResponse)
  SharedDtor();
}

void StreamingRecognizeResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  if (this != internal_default_instance()) delete error_;
}

void StreamingRecognizeResponse::ArenaDtor(void* object) {
  StreamingRecognizeResponse* _this = reinterpret_cast< StreamingRecognizeResponse* >(object);
  (void)_this;
}
void StreamingRecognizeResponse::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void StreamingRecognizeResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StreamingRecognizeResponse::descriptor() {
  ::protobuf_google_2fcloud_2fspeech_2fv1_2fcloud_5fspeech_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fcloud_2fspeech_2fv1_2fcloud_5fspeech_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const StreamingRecognizeResponse& StreamingRecognizeResponse::default_instance() {
  ::protobuf_google_2fcloud_2fspeech_2fv1_2fcloud_5fspeech_2eproto::InitDefaultsStreamingRecognizeResponse();
  return *internal_default_instance();
}

StreamingRecognizeResponse* StreamingRecognizeResponse::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<StreamingRecognizeResponse>(arena);
}

void StreamingRecognizeResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:google.cloud.speech.v1.StreamingRecognizeResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  results_.Clear();
  if (GetArenaNoVirtual() == NULL && error_ != NULL) {
    delete error_;
  }
  error_ = NULL;
  speech_event_type_ = 0;
  _internal_metadata_.Clear();
}

bool StreamingRecognizeResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.cloud.speech.v1.StreamingRecognizeResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .google.rpc.Status error = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_error()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .google.cloud.speech.v1.StreamingRecognitionResult results = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_results()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.cloud.speech.v1.StreamingRecognizeResponse.SpeechEventType speech_event_type = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_speech_event_type(static_cast< ::google::cloud::speech::v1::StreamingRecognizeResponse_SpeechEventType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.cloud.speech.v1.StreamingRecognizeResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.cloud.speech.v1.StreamingRecognizeResponse)
  return false;
#undef DO_
}

void StreamingRecognizeResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.cloud.speech.v1.StreamingRecognizeResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.rpc.Status error = 1;
  if (this->has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->error_, output);
  }

  // repeated .google.cloud.speech.v1.StreamingRecognitionResult results = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->results_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->results(static_cast<int>(i)), output);
  }

  // .google.cloud.speech.v1.StreamingRecognizeResponse.SpeechEventType speech_event_type = 4;
  if (this->speech_event_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->speech_event_type(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:google.cloud.speech.v1.StreamingRecognizeResponse)
}

::google::protobuf::uint8* StreamingRecognizeResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.cloud.speech.v1.StreamingRecognizeResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.rpc.Status error = 1;
  if (this->has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->error_, deterministic, target);
  }

  // repeated .google.cloud.speech.v1.StreamingRecognitionResult results = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->results_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->results(static_cast<int>(i)), deterministic, target);
  }

  // .google.cloud.speech.v1.StreamingRecognizeResponse.SpeechEventType speech_event_type = 4;
  if (this->speech_event_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->speech_event_type(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.cloud.speech.v1.StreamingRecognizeResponse)
  return target;
}

size_t StreamingRecognizeResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.cloud.speech.v1.StreamingRecognizeResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .google.cloud.speech.v1.StreamingRecognitionResult results = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->results_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->results(static_cast<int>(i)));
    }
  }

  // .google.rpc.Status error = 1;
  if (this->has_error()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->error_);
  }

  // .google.cloud.speech.v1.StreamingRecognizeResponse.SpeechEventType speech_event_type = 4;
  if (this->speech_event_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->speech_event_type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StreamingRecognizeResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.cloud.speech.v1.StreamingRecognizeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const StreamingRecognizeResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const StreamingRecognizeResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.cloud.speech.v1.StreamingRecognizeResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.cloud.speech.v1.StreamingRecognizeResponse)
    MergeFrom(*source);
  }
}

void StreamingRecognizeResponse::MergeFrom(const StreamingRecognizeResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.cloud.speech.v1.StreamingRecognizeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  results_.MergeFrom(from.results_);
  if (from.has_error()) {
    mutable_error()->::google::rpc::Status::MergeFrom(from.error());
  }
  if (from.speech_event_type() != 0) {
    set_speech_event_type(from.speech_event_type());
  }
}

void StreamingRecognizeResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.cloud.speech.v1.StreamingRecognizeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StreamingRecognizeResponse::CopyFrom(const StreamingRecognizeResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.cloud.speech.v1.StreamingRecognizeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StreamingRecognizeResponse::IsInitialized() const {
  return true;
}

void StreamingRecognizeResponse::Swap(StreamingRecognizeResponse* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    StreamingRecognizeResponse* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void StreamingRecognizeResponse::UnsafeArenaSwap(StreamingRecognizeResponse* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void StreamingRecognizeResponse::InternalSwap(StreamingRecognizeResponse* other) {
  using std::swap;
  results_.InternalSwap(&other->results_);
  swap(error_, other->error_);
  swap(speech_event_type_, other->speech_event_type_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata StreamingRecognizeResponse::GetMetadata() const {
  protobuf_google_2fcloud_2fspeech_2fv1_2fcloud_5fspeech_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fcloud_2fspeech_2fv1_2fcloud_5fspeech_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void StreamingRecognitionResult::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StreamingRecognitionResult::kAlternativesFieldNumber;
const int StreamingRecognitionResult::kIsFinalFieldNumber;
const int StreamingRecognitionResult::kStabilityFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StreamingRecognitionResult::StreamingRecognitionResult()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_google_2fcloud_2fspeech_2fv1_2fcloud_5fspeech_2eproto::InitDefaultsStreamingRecognitionResult();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.cloud.speech.v1.StreamingRecognitionResult)
}
StreamingRecognitionResult::StreamingRecognitionResult(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  alternatives_(arena) {
  ::protobuf_google_2fcloud_2fspeech_2fv1_2fcloud_5fspeech_2eproto::InitDefaultsStreamingRecognitionResult();
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.cloud.speech.v1.StreamingRecognitionResult)
}
StreamingRecognitionResult::StreamingRecognitionResult(const StreamingRecognitionResult& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      alternatives_(from.alternatives_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&is_final_, &from.is_final_,
    static_cast<size_t>(reinterpret_cast<char*>(&stability_) -
    reinterpret_cast<char*>(&is_final_)) + sizeof(stability_));
  // @@protoc_insertion_point(copy_constructor:google.cloud.speech.v1.StreamingRecognitionResult)
}

void StreamingRecognitionResult::SharedCtor() {
  ::memset(&is_final_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&stability_) -
      reinterpret_cast<char*>(&is_final_)) + sizeof(stability_));
  _cached_size_ = 0;
}

StreamingRecognitionResult::~StreamingRecognitionResult() {
  // @@protoc_insertion_point(destructor:google.cloud.speech.v1.StreamingRecognitionResult)
  SharedDtor();
}

void StreamingRecognitionResult::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
}

void StreamingRecognitionResult::ArenaDtor(void* object) {
  StreamingRecognitionResult* _this = reinterpret_cast< StreamingRecognitionResult* >(object);
  (void)_this;
}
void StreamingRecognitionResult::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void StreamingRecognitionResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StreamingRecognitionResult::descriptor() {
  ::protobuf_google_2fcloud_2fspeech_2fv1_2fcloud_5fspeech_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fcloud_2fspeech_2fv1_2fcloud_5fspeech_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const StreamingRecognitionResult& StreamingRecognitionResult::default_instance() {
  ::protobuf_google_2fcloud_2fspeech_2fv1_2fcloud_5fspeech_2eproto::InitDefaultsStreamingRecognitionResult();
  return *internal_default_instance();
}

StreamingRecognitionResult* StreamingRecognitionResult::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<StreamingRecognitionResult>(arena);
}

void StreamingRecognitionResult::Clear() {
// @@protoc_insertion_point(message_clear_start:google.cloud.speech.v1.StreamingRecognitionResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  alternatives_.Clear();
  ::memset(&is_final_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&stability_) -
      reinterpret_cast<char*>(&is_final_)) + sizeof(stability_));
  _internal_metadata_.Clear();
}

bool StreamingRecognitionResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.cloud.speech.v1.StreamingRecognitionResult)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .google.cloud.speech.v1.SpeechRecognitionAlternative alternatives = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_alternatives()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_final = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_final_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float stability = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &stability_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.cloud.speech.v1.StreamingRecognitionResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.cloud.speech.v1.StreamingRecognitionResult)
  return false;
#undef DO_
}

void StreamingRecognitionResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.cloud.speech.v1.StreamingRecognitionResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .google.cloud.speech.v1.SpeechRecognitionAlternative alternatives = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->alternatives_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->alternatives(static_cast<int>(i)), output);
  }

  // bool is_final = 2;
  if (this->is_final() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->is_final(), output);
  }

  // float stability = 3;
  if (this->stability() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->stability(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:google.cloud.speech.v1.StreamingRecognitionResult)
}

::google::protobuf::uint8* StreamingRecognitionResult::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.cloud.speech.v1.StreamingRecognitionResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .google.cloud.speech.v1.SpeechRecognitionAlternative alternatives = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->alternatives_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->alternatives(static_cast<int>(i)), deterministic, target);
  }

  // bool is_final = 2;
  if (this->is_final() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->is_final(), target);
  }

  // float stability = 3;
  if (this->stability() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->stability(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.cloud.speech.v1.StreamingRecognitionResult)
  return target;
}

size_t StreamingRecognitionResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.cloud.speech.v1.StreamingRecognitionResult)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .google.cloud.speech.v1.SpeechRecognitionAlternative alternatives = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->alternatives_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->alternatives(static_cast<int>(i)));
    }
  }

  // bool is_final = 2;
  if (this->is_final() != 0) {
    total_size += 1 + 1;
  }

  // float stability = 3;
  if (this->stability() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StreamingRecognitionResult::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.cloud.speech.v1.StreamingRecognitionResult)
  GOOGLE_DCHECK_NE(&from, this);
  const StreamingRecognitionResult* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const StreamingRecognitionResult>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.cloud.speech.v1.StreamingRecognitionResult)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.cloud.speech.v1.StreamingRecognitionResult)
    MergeFrom(*source);
  }
}

void StreamingRecognitionResult::MergeFrom(const StreamingRecognitionResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.cloud.speech.v1.StreamingRecognitionResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  alternatives_.MergeFrom(from.alternatives_);
  if (from.is_final() != 0) {
    set_is_final(from.is_final());
  }
  if (from.stability() != 0) {
    set_stability(from.stability());
  }
}

void StreamingRecognitionResult::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.cloud.speech.v1.StreamingRecognitionResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StreamingRecognitionResult::CopyFrom(const StreamingRecognitionResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.cloud.speech.v1.StreamingRecognitionResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StreamingRecognitionResult::IsInitialized() const {
  return true;
}

void StreamingRecognitionResult::Swap(StreamingRecognitionResult* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    StreamingRecognitionResult* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void StreamingRecognitionResult::UnsafeArenaSwap(StreamingRecognitionResult* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void StreamingRecognitionResult::InternalSwap(StreamingRecognitionResult* other) {
  using std::swap;
  alternatives_.InternalSwap(&other->alternatives_);
  swap(is_final_, other->is_final_);
  swap(stability_, other->stability_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata StreamingRecognitionResult::GetMetadata() const {
  protobuf_google_2fcloud_2fspeech_2fv1_2fcloud_5fspeech_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fcloud_2fspeech_2fv1_2fcloud_5fspeech_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void SpeechRecognitionResult::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SpeechRecognitionResult::kAlternativesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SpeechRecognitionResult::SpeechRecognitionResult()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_google_2fcloud_2fspeech_2fv1_2fcloud_5fspeech_2eproto::InitDefaultsSpeechRecognitionResult();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.cloud.speech.v1.SpeechRecognitionResult)
}
SpeechRecognitionResult::SpeechRecognitionResult(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  alternatives_(arena) {
  ::protobuf_google_2fcloud_2fspeech_2fv1_2fcloud_5fspeech_2eproto::InitDefaultsSpeechRecognitionResult();
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.cloud.speech.v1.SpeechRecognitionResult)
}
SpeechRecognitionResult::SpeechRecognitionResult(const SpeechRecognitionResult& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      alternatives_(from.alternatives_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:google.cloud.speech.v1.SpeechRecognitionResult)
}

void SpeechRecognitionResult::SharedCtor() {
  _cached_size_ = 0;
}

SpeechRecognitionResult::~SpeechRecognitionResult() {
  // @@protoc_insertion_point(destructor:google.cloud.speech.v1.SpeechRecognitionResult)
  SharedDtor();
}

void SpeechRecognitionResult::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
}

void SpeechRecognitionResult::ArenaDtor(void* object) {
  SpeechRecognitionResult* _this = reinterpret_cast< SpeechRecognitionResult* >(object);
  (void)_this;
}
void SpeechRecognitionResult::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void SpeechRecognitionResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SpeechRecognitionResult::descriptor() {
  ::protobuf_google_2fcloud_2fspeech_2fv1_2fcloud_5fspeech_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fcloud_2fspeech_2fv1_2fcloud_5fspeech_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SpeechRecognitionResult& SpeechRecognitionResult::default_instance() {
  ::protobuf_google_2fcloud_2fspeech_2fv1_2fcloud_5fspeech_2eproto::InitDefaultsSpeechRecognitionResult();
  return *internal_default_instance();
}

SpeechRecognitionResult* SpeechRecognitionResult::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<SpeechRecognitionResult>(arena);
}

void SpeechRecognitionResult::Clear() {
// @@protoc_insertion_point(message_clear_start:google.cloud.speech.v1.SpeechRecognitionResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  alternatives_.Clear();
  _internal_metadata_.Clear();
}

bool SpeechRecognitionResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.cloud.speech.v1.SpeechRecognitionResult)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .google.cloud.speech.v1.SpeechRecognitionAlternative alternatives = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_alternatives()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.cloud.speech.v1.SpeechRecognitionResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.cloud.speech.v1.SpeechRecognitionResult)
  return false;
#undef DO_
}

void SpeechRecognitionResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.cloud.speech.v1.SpeechRecognitionResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .google.cloud.speech.v1.SpeechRecognitionAlternative alternatives = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->alternatives_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->alternatives(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:google.cloud.speech.v1.SpeechRecognitionResult)
}

::google::protobuf::uint8* SpeechRecognitionResult::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.cloud.speech.v1.SpeechRecognitionResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .google.cloud.speech.v1.SpeechRecognitionAlternative alternatives = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->alternatives_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->alternatives(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.cloud.speech.v1.SpeechRecognitionResult)
  return target;
}

size_t SpeechRecognitionResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.cloud.speech.v1.SpeechRecognitionResult)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .google.cloud.speech.v1.SpeechRecognitionAlternative alternatives = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->alternatives_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->alternatives(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SpeechRecognitionResult::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.cloud.speech.v1.SpeechRecognitionResult)
  GOOGLE_DCHECK_NE(&from, this);
  const SpeechRecognitionResult* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SpeechRecognitionResult>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.cloud.speech.v1.SpeechRecognitionResult)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.cloud.speech.v1.SpeechRecognitionResult)
    MergeFrom(*source);
  }
}

void SpeechRecognitionResult::MergeFrom(const SpeechRecognitionResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.cloud.speech.v1.SpeechRecognitionResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  alternatives_.MergeFrom(from.alternatives_);
}

void SpeechRecognitionResult::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.cloud.speech.v1.SpeechRecognitionResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SpeechRecognitionResult::CopyFrom(const SpeechRecognitionResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.cloud.speech.v1.SpeechRecognitionResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpeechRecognitionResult::IsInitialized() const {
  return true;
}

void SpeechRecognitionResult::Swap(SpeechRecognitionResult* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    SpeechRecognitionResult* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void SpeechRecognitionResult::UnsafeArenaSwap(SpeechRecognitionResult* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void SpeechRecognitionResult::InternalSwap(SpeechRecognitionResult* other) {
  using std::swap;
  alternatives_.InternalSwap(&other->alternatives_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SpeechRecognitionResult::GetMetadata() const {
  protobuf_google_2fcloud_2fspeech_2fv1_2fcloud_5fspeech_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fcloud_2fspeech_2fv1_2fcloud_5fspeech_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void SpeechRecognitionAlternative::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SpeechRecognitionAlternative::kTranscriptFieldNumber;
const int SpeechRecognitionAlternative::kConfidenceFieldNumber;
const int SpeechRecognitionAlternative::kWordsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SpeechRecognitionAlternative::SpeechRecognitionAlternative()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_google_2fcloud_2fspeech_2fv1_2fcloud_5fspeech_2eproto::InitDefaultsSpeechRecognitionAlternative();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.cloud.speech.v1.SpeechRecognitionAlternative)
}
SpeechRecognitionAlternative::SpeechRecognitionAlternative(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  words_(arena) {
  ::protobuf_google_2fcloud_2fspeech_2fv1_2fcloud_5fspeech_2eproto::InitDefaultsSpeechRecognitionAlternative();
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.cloud.speech.v1.SpeechRecognitionAlternative)
}
SpeechRecognitionAlternative::SpeechRecognitionAlternative(const SpeechRecognitionAlternative& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      words_(from.words_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  transcript_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.transcript().size() > 0) {
    transcript_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.transcript(),
      GetArenaNoVirtual());
  }
  confidence_ = from.confidence_;
  // @@protoc_insertion_point(copy_constructor:google.cloud.speech.v1.SpeechRecognitionAlternative)
}

void SpeechRecognitionAlternative::SharedCtor() {
  transcript_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  confidence_ = 0;
  _cached_size_ = 0;
}

SpeechRecognitionAlternative::~SpeechRecognitionAlternative() {
  // @@protoc_insertion_point(destructor:google.cloud.speech.v1.SpeechRecognitionAlternative)
  SharedDtor();
}

void SpeechRecognitionAlternative::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  transcript_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SpeechRecognitionAlternative::ArenaDtor(void* object) {
  SpeechRecognitionAlternative* _this = reinterpret_cast< SpeechRecognitionAlternative* >(object);
  (void)_this;
}
void SpeechRecognitionAlternative::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void SpeechRecognitionAlternative::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SpeechRecognitionAlternative::descriptor() {
  ::protobuf_google_2fcloud_2fspeech_2fv1_2fcloud_5fspeech_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fcloud_2fspeech_2fv1_2fcloud_5fspeech_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SpeechRecognitionAlternative& SpeechRecognitionAlternative::default_instance() {
  ::protobuf_google_2fcloud_2fspeech_2fv1_2fcloud_5fspeech_2eproto::InitDefaultsSpeechRecognitionAlternative();
  return *internal_default_instance();
}

SpeechRecognitionAlternative* SpeechRecognitionAlternative::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<SpeechRecognitionAlternative>(arena);
}

void SpeechRecognitionAlternative::Clear() {
// @@protoc_insertion_point(message_clear_start:google.cloud.speech.v1.SpeechRecognitionAlternative)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  words_.Clear();
  transcript_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  confidence_ = 0;
  _internal_metadata_.Clear();
}

bool SpeechRecognitionAlternative::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.cloud.speech.v1.SpeechRecognitionAlternative)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string transcript = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_transcript()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->transcript().data(), static_cast<int>(this->transcript().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.cloud.speech.v1.SpeechRecognitionAlternative.transcript"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float confidence = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &confidence_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .google.cloud.speech.v1.WordInfo words = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_words()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.cloud.speech.v1.SpeechRecognitionAlternative)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.cloud.speech.v1.SpeechRecognitionAlternative)
  return false;
#undef DO_
}

void SpeechRecognitionAlternative::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.cloud.speech.v1.SpeechRecognitionAlternative)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string transcript = 1;
  if (this->transcript().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->transcript().data(), static_cast<int>(this->transcript().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.cloud.speech.v1.SpeechRecognitionAlternative.transcript");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->transcript(), output);
  }

  // float confidence = 2;
  if (this->confidence() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->confidence(), output);
  }

  // repeated .google.cloud.speech.v1.WordInfo words = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->words_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->words(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:google.cloud.speech.v1.SpeechRecognitionAlternative)
}

::google::protobuf::uint8* SpeechRecognitionAlternative::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.cloud.speech.v1.SpeechRecognitionAlternative)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string transcript = 1;
  if (this->transcript().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->transcript().data(), static_cast<int>(this->transcript().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.cloud.speech.v1.SpeechRecognitionAlternative.transcript");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->transcript(), target);
  }

  // float confidence = 2;
  if (this->confidence() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->confidence(), target);
  }

  // repeated .google.cloud.speech.v1.WordInfo words = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->words_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->words(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.cloud.speech.v1.SpeechRecognitionAlternative)
  return target;
}

size_t SpeechRecognitionAlternative::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.cloud.speech.v1.SpeechRecognitionAlternative)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .google.cloud.speech.v1.WordInfo words = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->words_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->words(static_cast<int>(i)));
    }
  }

  // string transcript = 1;
  if (this->transcript().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->transcript());
  }

  // float confidence = 2;
  if (this->confidence() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SpeechRecognitionAlternative::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.cloud.speech.v1.SpeechRecognitionAlternative)
  GOOGLE_DCHECK_NE(&from, this);
  const SpeechRecognitionAlternative* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SpeechRecognitionAlternative>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.cloud.speech.v1.SpeechRecognitionAlternative)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.cloud.speech.v1.SpeechRecognitionAlternative)
    MergeFrom(*source);
  }
}

void SpeechRecognitionAlternative::MergeFrom(const SpeechRecognitionAlternative& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.cloud.speech.v1.SpeechRecognitionAlternative)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  words_.MergeFrom(from.words_);
  if (from.transcript().size() > 0) {
    set_transcript(from.transcript());
  }
  if (from.confidence() != 0) {
    set_confidence(from.confidence());
  }
}

void SpeechRecognitionAlternative::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.cloud.speech.v1.SpeechRecognitionAlternative)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SpeechRecognitionAlternative::CopyFrom(const SpeechRecognitionAlternative& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.cloud.speech.v1.SpeechRecognitionAlternative)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpeechRecognitionAlternative::IsInitialized() const {
  return true;
}

void SpeechRecognitionAlternative::Swap(SpeechRecognitionAlternative* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    SpeechRecognitionAlternative* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void SpeechRecognitionAlternative::UnsafeArenaSwap(SpeechRecognitionAlternative* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void SpeechRecognitionAlternative::InternalSwap(SpeechRecognitionAlternative* other) {
  using std::swap;
  words_.InternalSwap(&other->words_);
  transcript_.Swap(&other->transcript_);
  swap(confidence_, other->confidence_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SpeechRecognitionAlternative::GetMetadata() const {
  protobuf_google_2fcloud_2fspeech_2fv1_2fcloud_5fspeech_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fcloud_2fspeech_2fv1_2fcloud_5fspeech_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void WordInfo::InitAsDefaultInstance() {
  ::google::cloud::speech::v1::_WordInfo_default_instance_._instance.get_mutable()->start_time_ = const_cast< ::google::protobuf::Duration*>(
      ::google::protobuf::Duration::internal_default_instance());
  ::google::cloud::speech::v1::_WordInfo_default_instance_._instance.get_mutable()->end_time_ = const_cast< ::google::protobuf::Duration*>(
      ::google::protobuf::Duration::internal_default_instance());
}
void WordInfo::_slow_mutable_start_time() {
  start_time_ = ::google::protobuf::Arena::CreateMessage< ::google::protobuf::Duration >(
      GetArenaNoVirtual());
}
void WordInfo::unsafe_arena_set_allocated_start_time(
    ::google::protobuf::Duration* start_time) {
  if (GetArenaNoVirtual() == NULL) {
    delete start_time_;
  }
  start_time_ = start_time;
  if (start_time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.speech.v1.WordInfo.start_time)
}
void WordInfo::clear_start_time() {
  if (GetArenaNoVirtual() == NULL && start_time_ != NULL) {
    delete start_time_;
  }
  start_time_ = NULL;
}
void WordInfo::_slow_mutable_end_time() {
  end_time_ = ::google::protobuf::Arena::CreateMessage< ::google::protobuf::Duration >(
      GetArenaNoVirtual());
}
void WordInfo::unsafe_arena_set_allocated_end_time(
    ::google::protobuf::Duration* end_time) {
  if (GetArenaNoVirtual() == NULL) {
    delete end_time_;
  }
  end_time_ = end_time;
  if (end_time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.speech.v1.WordInfo.end_time)
}
void WordInfo::clear_end_time() {
  if (GetArenaNoVirtual() == NULL && end_time_ != NULL) {
    delete end_time_;
  }
  end_time_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int WordInfo::kStartTimeFieldNumber;
const int WordInfo::kEndTimeFieldNumber;
const int WordInfo::kWordFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

WordInfo::WordInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_google_2fcloud_2fspeech_2fv1_2fcloud_5fspeech_2eproto::InitDefaultsWordInfo();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.cloud.speech.v1.WordInfo)
}
WordInfo::WordInfo(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::protobuf_google_2fcloud_2fspeech_2fv1_2fcloud_5fspeech_2eproto::InitDefaultsWordInfo();
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.cloud.speech.v1.WordInfo)
}
WordInfo::WordInfo(const WordInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  word_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.word().size() > 0) {
    word_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.word(),
      GetArenaNoVirtual());
  }
  if (from.has_start_time()) {
    start_time_ = new ::google::protobuf::Duration(*from.start_time_);
  } else {
    start_time_ = NULL;
  }
  if (from.has_end_time()) {
    end_time_ = new ::google::protobuf::Duration(*from.end_time_);
  } else {
    end_time_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:google.cloud.speech.v1.WordInfo)
}

void WordInfo::SharedCtor() {
  word_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&start_time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&end_time_) -
      reinterpret_cast<char*>(&start_time_)) + sizeof(end_time_));
  _cached_size_ = 0;
}

WordInfo::~WordInfo() {
  // @@protoc_insertion_point(destructor:google.cloud.speech.v1.WordInfo)
  SharedDtor();
}

void WordInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  word_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete start_time_;
  if (this != internal_default_instance()) delete end_time_;
}

void WordInfo::ArenaDtor(void* object) {
  WordInfo* _this = reinterpret_cast< WordInfo* >(object);
  (void)_this;
}
void WordInfo::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void WordInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WordInfo::descriptor() {
  ::protobuf_google_2fcloud_2fspeech_2fv1_2fcloud_5fspeech_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fcloud_2fspeech_2fv1_2fcloud_5fspeech_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const WordInfo& WordInfo::default_instance() {
  ::protobuf_google_2fcloud_2fspeech_2fv1_2fcloud_5fspeech_2eproto::InitDefaultsWordInfo();
  return *internal_default_instance();
}

WordInfo* WordInfo::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<WordInfo>(arena);
}

void WordInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:google.cloud.speech.v1.WordInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  word_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  if (GetArenaNoVirtual() == NULL && start_time_ != NULL) {
    delete start_time_;
  }
  start_time_ = NULL;
  if (GetArenaNoVirtual() == NULL && end_time_ != NULL) {
    delete end_time_;
  }
  end_time_ = NULL;
  _internal_metadata_.Clear();
}

bool WordInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.cloud.speech.v1.WordInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .google.protobuf.Duration start_time = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_start_time()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Duration end_time = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_end_time()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string word = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_word()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->word().data(), static_cast<int>(this->word().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.cloud.speech.v1.WordInfo.word"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.cloud.speech.v1.WordInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.cloud.speech.v1.WordInfo)
  return false;
#undef DO_
}

void WordInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.cloud.speech.v1.WordInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.Duration start_time = 1;
  if (this->has_start_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->start_time_, output);
  }

  // .google.protobuf.Duration end_time = 2;
  if (this->has_end_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->end_time_, output);
  }

  // string word = 3;
  if (this->word().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->word().data(), static_cast<int>(this->word().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.cloud.speech.v1.WordInfo.word");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->word(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:google.cloud.speech.v1.WordInfo)
}

::google::protobuf::uint8* WordInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.cloud.speech.v1.WordInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.Duration start_time = 1;
  if (this->has_start_time()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->start_time_, deterministic, target);
  }

  // .google.protobuf.Duration end_time = 2;
  if (this->has_end_time()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, *this->end_time_, deterministic, target);
  }

  // string word = 3;
  if (this->word().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->word().data(), static_cast<int>(this->word().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.cloud.speech.v1.WordInfo.word");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->word(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.cloud.speech.v1.WordInfo)
  return target;
}

size_t WordInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.cloud.speech.v1.WordInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string word = 3;
  if (this->word().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->word());
  }

  // .google.protobuf.Duration start_time = 1;
  if (this->has_start_time()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->start_time_);
  }

  // .google.protobuf.Duration end_time = 2;
  if (this->has_end_time()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->end_time_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WordInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.cloud.speech.v1.WordInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const WordInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const WordInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.cloud.speech.v1.WordInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.cloud.speech.v1.WordInfo)
    MergeFrom(*source);
  }
}

void WordInfo::MergeFrom(const WordInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.cloud.speech.v1.WordInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.word().size() > 0) {
    set_word(from.word());
  }
  if (from.has_start_time()) {
    mutable_start_time()->::google::protobuf::Duration::MergeFrom(from.start_time());
  }
  if (from.has_end_time()) {
    mutable_end_time()->::google::protobuf::Duration::MergeFrom(from.end_time());
  }
}

void WordInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.cloud.speech.v1.WordInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WordInfo::CopyFrom(const WordInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.cloud.speech.v1.WordInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WordInfo::IsInitialized() const {
  return true;
}

void WordInfo::Swap(WordInfo* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    WordInfo* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void WordInfo::UnsafeArenaSwap(WordInfo* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void WordInfo::InternalSwap(WordInfo* other) {
  using std::swap;
  word_.Swap(&other->word_);
  swap(start_time_, other->start_time_);
  swap(end_time_, other->end_time_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata WordInfo::GetMetadata() const {
  protobuf_google_2fcloud_2fspeech_2fv1_2fcloud_5fspeech_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fcloud_2fspeech_2fv1_2fcloud_5fspeech_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace speech
}  // namespace cloud
}  // namespace google

// @@protoc_insertion_point(global_scope)
