// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: google/bigtable/v2/bigtable.proto

#include "google/bigtable/v2/bigtable.pb.h"
#include "google/bigtable/v2/bigtable.grpc.pb.h"

#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace google {
namespace bigtable {
namespace v2 {

static const char* Bigtable_method_names[] = {
  "/google.bigtable.v2.Bigtable/ReadRows",
  "/google.bigtable.v2.Bigtable/SampleRowKeys",
  "/google.bigtable.v2.Bigtable/MutateRow",
  "/google.bigtable.v2.Bigtable/MutateRows",
  "/google.bigtable.v2.Bigtable/CheckAndMutateRow",
  "/google.bigtable.v2.Bigtable/ReadModifyWriteRow",
};

std::unique_ptr< Bigtable::Stub> Bigtable::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< Bigtable::Stub> stub(new Bigtable::Stub(channel));
  return stub;
}

Bigtable::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_ReadRows_(Bigtable_method_names[0], ::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_SampleRowKeys_(Bigtable_method_names[1], ::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_MutateRow_(Bigtable_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_MutateRows_(Bigtable_method_names[3], ::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_CheckAndMutateRow_(Bigtable_method_names[4], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ReadModifyWriteRow_(Bigtable_method_names[5], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::ClientReader< ::google::bigtable::v2::ReadRowsResponse>* Bigtable::Stub::ReadRowsRaw(::grpc::ClientContext* context, const ::google::bigtable::v2::ReadRowsRequest& request) {
  return ::grpc::internal::ClientReaderFactory< ::google::bigtable::v2::ReadRowsResponse>::Create(channel_.get(), rpcmethod_ReadRows_, context, request);
}

::grpc::ClientAsyncReader< ::google::bigtable::v2::ReadRowsResponse>* Bigtable::Stub::AsyncReadRowsRaw(::grpc::ClientContext* context, const ::google::bigtable::v2::ReadRowsRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::google::bigtable::v2::ReadRowsResponse>::Create(channel_.get(), cq, rpcmethod_ReadRows_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::google::bigtable::v2::ReadRowsResponse>* Bigtable::Stub::PrepareAsyncReadRowsRaw(::grpc::ClientContext* context, const ::google::bigtable::v2::ReadRowsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::google::bigtable::v2::ReadRowsResponse>::Create(channel_.get(), cq, rpcmethod_ReadRows_, context, request, false, nullptr);
}

::grpc::ClientReader< ::google::bigtable::v2::SampleRowKeysResponse>* Bigtable::Stub::SampleRowKeysRaw(::grpc::ClientContext* context, const ::google::bigtable::v2::SampleRowKeysRequest& request) {
  return ::grpc::internal::ClientReaderFactory< ::google::bigtable::v2::SampleRowKeysResponse>::Create(channel_.get(), rpcmethod_SampleRowKeys_, context, request);
}

::grpc::ClientAsyncReader< ::google::bigtable::v2::SampleRowKeysResponse>* Bigtable::Stub::AsyncSampleRowKeysRaw(::grpc::ClientContext* context, const ::google::bigtable::v2::SampleRowKeysRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::google::bigtable::v2::SampleRowKeysResponse>::Create(channel_.get(), cq, rpcmethod_SampleRowKeys_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::google::bigtable::v2::SampleRowKeysResponse>* Bigtable::Stub::PrepareAsyncSampleRowKeysRaw(::grpc::ClientContext* context, const ::google::bigtable::v2::SampleRowKeysRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::google::bigtable::v2::SampleRowKeysResponse>::Create(channel_.get(), cq, rpcmethod_SampleRowKeys_, context, request, false, nullptr);
}

::grpc::Status Bigtable::Stub::MutateRow(::grpc::ClientContext* context, const ::google::bigtable::v2::MutateRowRequest& request, ::google::bigtable::v2::MutateRowResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_MutateRow_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::google::bigtable::v2::MutateRowResponse>* Bigtable::Stub::AsyncMutateRowRaw(::grpc::ClientContext* context, const ::google::bigtable::v2::MutateRowRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::bigtable::v2::MutateRowResponse>::Create(channel_.get(), cq, rpcmethod_MutateRow_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::google::bigtable::v2::MutateRowResponse>* Bigtable::Stub::PrepareAsyncMutateRowRaw(::grpc::ClientContext* context, const ::google::bigtable::v2::MutateRowRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::bigtable::v2::MutateRowResponse>::Create(channel_.get(), cq, rpcmethod_MutateRow_, context, request, false);
}

::grpc::ClientReader< ::google::bigtable::v2::MutateRowsResponse>* Bigtable::Stub::MutateRowsRaw(::grpc::ClientContext* context, const ::google::bigtable::v2::MutateRowsRequest& request) {
  return ::grpc::internal::ClientReaderFactory< ::google::bigtable::v2::MutateRowsResponse>::Create(channel_.get(), rpcmethod_MutateRows_, context, request);
}

::grpc::ClientAsyncReader< ::google::bigtable::v2::MutateRowsResponse>* Bigtable::Stub::AsyncMutateRowsRaw(::grpc::ClientContext* context, const ::google::bigtable::v2::MutateRowsRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::google::bigtable::v2::MutateRowsResponse>::Create(channel_.get(), cq, rpcmethod_MutateRows_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::google::bigtable::v2::MutateRowsResponse>* Bigtable::Stub::PrepareAsyncMutateRowsRaw(::grpc::ClientContext* context, const ::google::bigtable::v2::MutateRowsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::google::bigtable::v2::MutateRowsResponse>::Create(channel_.get(), cq, rpcmethod_MutateRows_, context, request, false, nullptr);
}

::grpc::Status Bigtable::Stub::CheckAndMutateRow(::grpc::ClientContext* context, const ::google::bigtable::v2::CheckAndMutateRowRequest& request, ::google::bigtable::v2::CheckAndMutateRowResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_CheckAndMutateRow_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::google::bigtable::v2::CheckAndMutateRowResponse>* Bigtable::Stub::AsyncCheckAndMutateRowRaw(::grpc::ClientContext* context, const ::google::bigtable::v2::CheckAndMutateRowRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::bigtable::v2::CheckAndMutateRowResponse>::Create(channel_.get(), cq, rpcmethod_CheckAndMutateRow_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::google::bigtable::v2::CheckAndMutateRowResponse>* Bigtable::Stub::PrepareAsyncCheckAndMutateRowRaw(::grpc::ClientContext* context, const ::google::bigtable::v2::CheckAndMutateRowRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::bigtable::v2::CheckAndMutateRowResponse>::Create(channel_.get(), cq, rpcmethod_CheckAndMutateRow_, context, request, false);
}

::grpc::Status Bigtable::Stub::ReadModifyWriteRow(::grpc::ClientContext* context, const ::google::bigtable::v2::ReadModifyWriteRowRequest& request, ::google::bigtable::v2::ReadModifyWriteRowResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_ReadModifyWriteRow_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::google::bigtable::v2::ReadModifyWriteRowResponse>* Bigtable::Stub::AsyncReadModifyWriteRowRaw(::grpc::ClientContext* context, const ::google::bigtable::v2::ReadModifyWriteRowRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::bigtable::v2::ReadModifyWriteRowResponse>::Create(channel_.get(), cq, rpcmethod_ReadModifyWriteRow_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::google::bigtable::v2::ReadModifyWriteRowResponse>* Bigtable::Stub::PrepareAsyncReadModifyWriteRowRaw(::grpc::ClientContext* context, const ::google::bigtable::v2::ReadModifyWriteRowRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::bigtable::v2::ReadModifyWriteRowResponse>::Create(channel_.get(), cq, rpcmethod_ReadModifyWriteRow_, context, request, false);
}

Bigtable::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Bigtable_method_names[0],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< Bigtable::Service, ::google::bigtable::v2::ReadRowsRequest, ::google::bigtable::v2::ReadRowsResponse>(
          std::mem_fn(&Bigtable::Service::ReadRows), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Bigtable_method_names[1],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< Bigtable::Service, ::google::bigtable::v2::SampleRowKeysRequest, ::google::bigtable::v2::SampleRowKeysResponse>(
          std::mem_fn(&Bigtable::Service::SampleRowKeys), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Bigtable_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Bigtable::Service, ::google::bigtable::v2::MutateRowRequest, ::google::bigtable::v2::MutateRowResponse>(
          std::mem_fn(&Bigtable::Service::MutateRow), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Bigtable_method_names[3],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< Bigtable::Service, ::google::bigtable::v2::MutateRowsRequest, ::google::bigtable::v2::MutateRowsResponse>(
          std::mem_fn(&Bigtable::Service::MutateRows), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Bigtable_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Bigtable::Service, ::google::bigtable::v2::CheckAndMutateRowRequest, ::google::bigtable::v2::CheckAndMutateRowResponse>(
          std::mem_fn(&Bigtable::Service::CheckAndMutateRow), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Bigtable_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Bigtable::Service, ::google::bigtable::v2::ReadModifyWriteRowRequest, ::google::bigtable::v2::ReadModifyWriteRowResponse>(
          std::mem_fn(&Bigtable::Service::ReadModifyWriteRow), this)));
}

Bigtable::Service::~Service() {
}

::grpc::Status Bigtable::Service::ReadRows(::grpc::ServerContext* context, const ::google::bigtable::v2::ReadRowsRequest* request, ::grpc::ServerWriter< ::google::bigtable::v2::ReadRowsResponse>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Bigtable::Service::SampleRowKeys(::grpc::ServerContext* context, const ::google::bigtable::v2::SampleRowKeysRequest* request, ::grpc::ServerWriter< ::google::bigtable::v2::SampleRowKeysResponse>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Bigtable::Service::MutateRow(::grpc::ServerContext* context, const ::google::bigtable::v2::MutateRowRequest* request, ::google::bigtable::v2::MutateRowResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Bigtable::Service::MutateRows(::grpc::ServerContext* context, const ::google::bigtable::v2::MutateRowsRequest* request, ::grpc::ServerWriter< ::google::bigtable::v2::MutateRowsResponse>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Bigtable::Service::CheckAndMutateRow(::grpc::ServerContext* context, const ::google::bigtable::v2::CheckAndMutateRowRequest* request, ::google::bigtable::v2::CheckAndMutateRowResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Bigtable::Service::ReadModifyWriteRow(::grpc::ServerContext* context, const ::google::bigtable::v2::ReadModifyWriteRowRequest* request, ::google::bigtable::v2::ReadModifyWriteRowResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace google
}  // namespace bigtable
}  // namespace v2

