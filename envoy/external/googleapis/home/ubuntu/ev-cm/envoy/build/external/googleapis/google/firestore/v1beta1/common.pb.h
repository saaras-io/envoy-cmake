// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/firestore/v1beta1/common.proto

#ifndef PROTOBUF_google_2ffirestore_2fv1beta1_2fcommon_2eproto__INCLUDED
#define PROTOBUF_google_2ffirestore_2fv1beta1_2fcommon_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "google/api/annotations.pb.h"
#include <google/protobuf/timestamp.pb.h>
// @@protoc_insertion_point(includes)

namespace protobuf_google_2ffirestore_2fv1beta1_2fcommon_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[5];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsDocumentMaskImpl();
void InitDefaultsDocumentMask();
void InitDefaultsPreconditionImpl();
void InitDefaultsPrecondition();
void InitDefaultsTransactionOptions_ReadWriteImpl();
void InitDefaultsTransactionOptions_ReadWrite();
void InitDefaultsTransactionOptions_ReadOnlyImpl();
void InitDefaultsTransactionOptions_ReadOnly();
void InitDefaultsTransactionOptionsImpl();
void InitDefaultsTransactionOptions();
inline void InitDefaults() {
  InitDefaultsDocumentMask();
  InitDefaultsPrecondition();
  InitDefaultsTransactionOptions_ReadWrite();
  InitDefaultsTransactionOptions_ReadOnly();
  InitDefaultsTransactionOptions();
}
}  // namespace protobuf_google_2ffirestore_2fv1beta1_2fcommon_2eproto
namespace google {
namespace firestore {
namespace v1beta1 {
class DocumentMask;
class DocumentMaskDefaultTypeInternal;
extern DocumentMaskDefaultTypeInternal _DocumentMask_default_instance_;
class Precondition;
class PreconditionDefaultTypeInternal;
extern PreconditionDefaultTypeInternal _Precondition_default_instance_;
class TransactionOptions;
class TransactionOptionsDefaultTypeInternal;
extern TransactionOptionsDefaultTypeInternal _TransactionOptions_default_instance_;
class TransactionOptions_ReadOnly;
class TransactionOptions_ReadOnlyDefaultTypeInternal;
extern TransactionOptions_ReadOnlyDefaultTypeInternal _TransactionOptions_ReadOnly_default_instance_;
class TransactionOptions_ReadWrite;
class TransactionOptions_ReadWriteDefaultTypeInternal;
extern TransactionOptions_ReadWriteDefaultTypeInternal _TransactionOptions_ReadWrite_default_instance_;
}  // namespace v1beta1
}  // namespace firestore
}  // namespace google
namespace google {
namespace firestore {
namespace v1beta1 {

// ===================================================================

class DocumentMask : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.firestore.v1beta1.DocumentMask) */ {
 public:
  DocumentMask();
  virtual ~DocumentMask();

  DocumentMask(const DocumentMask& from);

  inline DocumentMask& operator=(const DocumentMask& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DocumentMask(DocumentMask&& from) noexcept
    : DocumentMask() {
    *this = ::std::move(from);
  }

  inline DocumentMask& operator=(DocumentMask&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DocumentMask& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DocumentMask* internal_default_instance() {
    return reinterpret_cast<const DocumentMask*>(
               &_DocumentMask_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(DocumentMask* other);
  friend void swap(DocumentMask& a, DocumentMask& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DocumentMask* New() const PROTOBUF_FINAL { return New(NULL); }

  DocumentMask* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DocumentMask& from);
  void MergeFrom(const DocumentMask& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DocumentMask* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string field_paths = 1;
  int field_paths_size() const;
  void clear_field_paths();
  static const int kFieldPathsFieldNumber = 1;
  const ::std::string& field_paths(int index) const;
  ::std::string* mutable_field_paths(int index);
  void set_field_paths(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_field_paths(int index, ::std::string&& value);
  #endif
  void set_field_paths(int index, const char* value);
  void set_field_paths(int index, const char* value, size_t size);
  ::std::string* add_field_paths();
  void add_field_paths(const ::std::string& value);
  #if LANG_CXX11
  void add_field_paths(::std::string&& value);
  #endif
  void add_field_paths(const char* value);
  void add_field_paths(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& field_paths() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_field_paths();

  // @@protoc_insertion_point(class_scope:google.firestore.v1beta1.DocumentMask)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> field_paths_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2ffirestore_2fv1beta1_2fcommon_2eproto::TableStruct;
  friend void ::protobuf_google_2ffirestore_2fv1beta1_2fcommon_2eproto::InitDefaultsDocumentMaskImpl();
};
// -------------------------------------------------------------------

class Precondition : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.firestore.v1beta1.Precondition) */ {
 public:
  Precondition();
  virtual ~Precondition();

  Precondition(const Precondition& from);

  inline Precondition& operator=(const Precondition& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Precondition(Precondition&& from) noexcept
    : Precondition() {
    *this = ::std::move(from);
  }

  inline Precondition& operator=(Precondition&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Precondition& default_instance();

  enum ConditionTypeCase {
    kExists = 1,
    kUpdateTime = 2,
    CONDITION_TYPE_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Precondition* internal_default_instance() {
    return reinterpret_cast<const Precondition*>(
               &_Precondition_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(Precondition* other);
  friend void swap(Precondition& a, Precondition& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Precondition* New() const PROTOBUF_FINAL { return New(NULL); }

  Precondition* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Precondition& from);
  void MergeFrom(const Precondition& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Precondition* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bool exists = 1;
  private:
  bool has_exists() const;
  public:
  void clear_exists();
  static const int kExistsFieldNumber = 1;
  bool exists() const;
  void set_exists(bool value);

  // .google.protobuf.Timestamp update_time = 2;
  bool has_update_time() const;
  void clear_update_time();
  static const int kUpdateTimeFieldNumber = 2;
  const ::google::protobuf::Timestamp& update_time() const;
  ::google::protobuf::Timestamp* release_update_time();
  ::google::protobuf::Timestamp* mutable_update_time();
  void set_allocated_update_time(::google::protobuf::Timestamp* update_time);

  ConditionTypeCase condition_type_case() const;
  // @@protoc_insertion_point(class_scope:google.firestore.v1beta1.Precondition)
 private:
  void set_has_exists();
  void set_has_update_time();

  inline bool has_condition_type() const;
  void clear_condition_type();
  inline void clear_has_condition_type();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  union ConditionTypeUnion {
    ConditionTypeUnion() {}
    bool exists_;
    ::google::protobuf::Timestamp* update_time_;
  } condition_type_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::protobuf_google_2ffirestore_2fv1beta1_2fcommon_2eproto::TableStruct;
  friend void ::protobuf_google_2ffirestore_2fv1beta1_2fcommon_2eproto::InitDefaultsPreconditionImpl();
};
// -------------------------------------------------------------------

class TransactionOptions_ReadWrite : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.firestore.v1beta1.TransactionOptions.ReadWrite) */ {
 public:
  TransactionOptions_ReadWrite();
  virtual ~TransactionOptions_ReadWrite();

  TransactionOptions_ReadWrite(const TransactionOptions_ReadWrite& from);

  inline TransactionOptions_ReadWrite& operator=(const TransactionOptions_ReadWrite& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TransactionOptions_ReadWrite(TransactionOptions_ReadWrite&& from) noexcept
    : TransactionOptions_ReadWrite() {
    *this = ::std::move(from);
  }

  inline TransactionOptions_ReadWrite& operator=(TransactionOptions_ReadWrite&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const TransactionOptions_ReadWrite& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TransactionOptions_ReadWrite* internal_default_instance() {
    return reinterpret_cast<const TransactionOptions_ReadWrite*>(
               &_TransactionOptions_ReadWrite_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(TransactionOptions_ReadWrite* other);
  friend void swap(TransactionOptions_ReadWrite& a, TransactionOptions_ReadWrite& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TransactionOptions_ReadWrite* New() const PROTOBUF_FINAL { return New(NULL); }

  TransactionOptions_ReadWrite* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const TransactionOptions_ReadWrite& from);
  void MergeFrom(const TransactionOptions_ReadWrite& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TransactionOptions_ReadWrite* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes retry_transaction = 1;
  void clear_retry_transaction();
  static const int kRetryTransactionFieldNumber = 1;
  const ::std::string& retry_transaction() const;
  void set_retry_transaction(const ::std::string& value);
  #if LANG_CXX11
  void set_retry_transaction(::std::string&& value);
  #endif
  void set_retry_transaction(const char* value);
  void set_retry_transaction(const void* value, size_t size);
  ::std::string* mutable_retry_transaction();
  ::std::string* release_retry_transaction();
  void set_allocated_retry_transaction(::std::string* retry_transaction);

  // @@protoc_insertion_point(class_scope:google.firestore.v1beta1.TransactionOptions.ReadWrite)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr retry_transaction_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2ffirestore_2fv1beta1_2fcommon_2eproto::TableStruct;
  friend void ::protobuf_google_2ffirestore_2fv1beta1_2fcommon_2eproto::InitDefaultsTransactionOptions_ReadWriteImpl();
};
// -------------------------------------------------------------------

class TransactionOptions_ReadOnly : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.firestore.v1beta1.TransactionOptions.ReadOnly) */ {
 public:
  TransactionOptions_ReadOnly();
  virtual ~TransactionOptions_ReadOnly();

  TransactionOptions_ReadOnly(const TransactionOptions_ReadOnly& from);

  inline TransactionOptions_ReadOnly& operator=(const TransactionOptions_ReadOnly& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TransactionOptions_ReadOnly(TransactionOptions_ReadOnly&& from) noexcept
    : TransactionOptions_ReadOnly() {
    *this = ::std::move(from);
  }

  inline TransactionOptions_ReadOnly& operator=(TransactionOptions_ReadOnly&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const TransactionOptions_ReadOnly& default_instance();

  enum ConsistencySelectorCase {
    kReadTime = 2,
    CONSISTENCY_SELECTOR_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TransactionOptions_ReadOnly* internal_default_instance() {
    return reinterpret_cast<const TransactionOptions_ReadOnly*>(
               &_TransactionOptions_ReadOnly_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(TransactionOptions_ReadOnly* other);
  friend void swap(TransactionOptions_ReadOnly& a, TransactionOptions_ReadOnly& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TransactionOptions_ReadOnly* New() const PROTOBUF_FINAL { return New(NULL); }

  TransactionOptions_ReadOnly* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const TransactionOptions_ReadOnly& from);
  void MergeFrom(const TransactionOptions_ReadOnly& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TransactionOptions_ReadOnly* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.protobuf.Timestamp read_time = 2;
  bool has_read_time() const;
  void clear_read_time();
  static const int kReadTimeFieldNumber = 2;
  const ::google::protobuf::Timestamp& read_time() const;
  ::google::protobuf::Timestamp* release_read_time();
  ::google::protobuf::Timestamp* mutable_read_time();
  void set_allocated_read_time(::google::protobuf::Timestamp* read_time);

  ConsistencySelectorCase consistency_selector_case() const;
  // @@protoc_insertion_point(class_scope:google.firestore.v1beta1.TransactionOptions.ReadOnly)
 private:
  void set_has_read_time();

  inline bool has_consistency_selector() const;
  void clear_consistency_selector();
  inline void clear_has_consistency_selector();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  union ConsistencySelectorUnion {
    ConsistencySelectorUnion() {}
    ::google::protobuf::Timestamp* read_time_;
  } consistency_selector_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::protobuf_google_2ffirestore_2fv1beta1_2fcommon_2eproto::TableStruct;
  friend void ::protobuf_google_2ffirestore_2fv1beta1_2fcommon_2eproto::InitDefaultsTransactionOptions_ReadOnlyImpl();
};
// -------------------------------------------------------------------

class TransactionOptions : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.firestore.v1beta1.TransactionOptions) */ {
 public:
  TransactionOptions();
  virtual ~TransactionOptions();

  TransactionOptions(const TransactionOptions& from);

  inline TransactionOptions& operator=(const TransactionOptions& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TransactionOptions(TransactionOptions&& from) noexcept
    : TransactionOptions() {
    *this = ::std::move(from);
  }

  inline TransactionOptions& operator=(TransactionOptions&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const TransactionOptions& default_instance();

  enum ModeCase {
    kReadOnly = 2,
    kReadWrite = 3,
    MODE_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TransactionOptions* internal_default_instance() {
    return reinterpret_cast<const TransactionOptions*>(
               &_TransactionOptions_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(TransactionOptions* other);
  friend void swap(TransactionOptions& a, TransactionOptions& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TransactionOptions* New() const PROTOBUF_FINAL { return New(NULL); }

  TransactionOptions* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const TransactionOptions& from);
  void MergeFrom(const TransactionOptions& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TransactionOptions* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef TransactionOptions_ReadWrite ReadWrite;
  typedef TransactionOptions_ReadOnly ReadOnly;

  // accessors -------------------------------------------------------

  // .google.firestore.v1beta1.TransactionOptions.ReadOnly read_only = 2;
  bool has_read_only() const;
  void clear_read_only();
  static const int kReadOnlyFieldNumber = 2;
  const ::google::firestore::v1beta1::TransactionOptions_ReadOnly& read_only() const;
  ::google::firestore::v1beta1::TransactionOptions_ReadOnly* release_read_only();
  ::google::firestore::v1beta1::TransactionOptions_ReadOnly* mutable_read_only();
  void set_allocated_read_only(::google::firestore::v1beta1::TransactionOptions_ReadOnly* read_only);

  // .google.firestore.v1beta1.TransactionOptions.ReadWrite read_write = 3;
  bool has_read_write() const;
  void clear_read_write();
  static const int kReadWriteFieldNumber = 3;
  const ::google::firestore::v1beta1::TransactionOptions_ReadWrite& read_write() const;
  ::google::firestore::v1beta1::TransactionOptions_ReadWrite* release_read_write();
  ::google::firestore::v1beta1::TransactionOptions_ReadWrite* mutable_read_write();
  void set_allocated_read_write(::google::firestore::v1beta1::TransactionOptions_ReadWrite* read_write);

  ModeCase mode_case() const;
  // @@protoc_insertion_point(class_scope:google.firestore.v1beta1.TransactionOptions)
 private:
  void set_has_read_only();
  void set_has_read_write();

  inline bool has_mode() const;
  void clear_mode();
  inline void clear_has_mode();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  union ModeUnion {
    ModeUnion() {}
    ::google::firestore::v1beta1::TransactionOptions_ReadOnly* read_only_;
    ::google::firestore::v1beta1::TransactionOptions_ReadWrite* read_write_;
  } mode_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::protobuf_google_2ffirestore_2fv1beta1_2fcommon_2eproto::TableStruct;
  friend void ::protobuf_google_2ffirestore_2fv1beta1_2fcommon_2eproto::InitDefaultsTransactionOptionsImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// DocumentMask

// repeated string field_paths = 1;
inline int DocumentMask::field_paths_size() const {
  return field_paths_.size();
}
inline void DocumentMask::clear_field_paths() {
  field_paths_.Clear();
}
inline const ::std::string& DocumentMask::field_paths(int index) const {
  // @@protoc_insertion_point(field_get:google.firestore.v1beta1.DocumentMask.field_paths)
  return field_paths_.Get(index);
}
inline ::std::string* DocumentMask::mutable_field_paths(int index) {
  // @@protoc_insertion_point(field_mutable:google.firestore.v1beta1.DocumentMask.field_paths)
  return field_paths_.Mutable(index);
}
inline void DocumentMask::set_field_paths(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:google.firestore.v1beta1.DocumentMask.field_paths)
  field_paths_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void DocumentMask::set_field_paths(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:google.firestore.v1beta1.DocumentMask.field_paths)
  field_paths_.Mutable(index)->assign(std::move(value));
}
#endif
inline void DocumentMask::set_field_paths(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  field_paths_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:google.firestore.v1beta1.DocumentMask.field_paths)
}
inline void DocumentMask::set_field_paths(int index, const char* value, size_t size) {
  field_paths_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:google.firestore.v1beta1.DocumentMask.field_paths)
}
inline ::std::string* DocumentMask::add_field_paths() {
  // @@protoc_insertion_point(field_add_mutable:google.firestore.v1beta1.DocumentMask.field_paths)
  return field_paths_.Add();
}
inline void DocumentMask::add_field_paths(const ::std::string& value) {
  field_paths_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:google.firestore.v1beta1.DocumentMask.field_paths)
}
#if LANG_CXX11
inline void DocumentMask::add_field_paths(::std::string&& value) {
  field_paths_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:google.firestore.v1beta1.DocumentMask.field_paths)
}
#endif
inline void DocumentMask::add_field_paths(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  field_paths_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:google.firestore.v1beta1.DocumentMask.field_paths)
}
inline void DocumentMask::add_field_paths(const char* value, size_t size) {
  field_paths_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:google.firestore.v1beta1.DocumentMask.field_paths)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
DocumentMask::field_paths() const {
  // @@protoc_insertion_point(field_list:google.firestore.v1beta1.DocumentMask.field_paths)
  return field_paths_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
DocumentMask::mutable_field_paths() {
  // @@protoc_insertion_point(field_mutable_list:google.firestore.v1beta1.DocumentMask.field_paths)
  return &field_paths_;
}

// -------------------------------------------------------------------

// Precondition

// bool exists = 1;
inline bool Precondition::has_exists() const {
  return condition_type_case() == kExists;
}
inline void Precondition::set_has_exists() {
  _oneof_case_[0] = kExists;
}
inline void Precondition::clear_exists() {
  if (has_exists()) {
    condition_type_.exists_ = false;
    clear_has_condition_type();
  }
}
inline bool Precondition::exists() const {
  // @@protoc_insertion_point(field_get:google.firestore.v1beta1.Precondition.exists)
  if (has_exists()) {
    return condition_type_.exists_;
  }
  return false;
}
inline void Precondition::set_exists(bool value) {
  if (!has_exists()) {
    clear_condition_type();
    set_has_exists();
  }
  condition_type_.exists_ = value;
  // @@protoc_insertion_point(field_set:google.firestore.v1beta1.Precondition.exists)
}

// .google.protobuf.Timestamp update_time = 2;
inline bool Precondition::has_update_time() const {
  return condition_type_case() == kUpdateTime;
}
inline void Precondition::set_has_update_time() {
  _oneof_case_[0] = kUpdateTime;
}
inline ::google::protobuf::Timestamp* Precondition::release_update_time() {
  // @@protoc_insertion_point(field_release:google.firestore.v1beta1.Precondition.update_time)
  if (has_update_time()) {
    clear_has_condition_type();
      ::google::protobuf::Timestamp* temp = condition_type_.update_time_;
    condition_type_.update_time_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::protobuf::Timestamp& Precondition::update_time() const {
  // @@protoc_insertion_point(field_get:google.firestore.v1beta1.Precondition.update_time)
  return has_update_time()
      ? *condition_type_.update_time_
      : *reinterpret_cast< ::google::protobuf::Timestamp*>(&::google::protobuf::_Timestamp_default_instance_);
}
inline ::google::protobuf::Timestamp* Precondition::mutable_update_time() {
  if (!has_update_time()) {
    clear_condition_type();
    set_has_update_time();
    condition_type_.update_time_ = new ::google::protobuf::Timestamp;
  }
  // @@protoc_insertion_point(field_mutable:google.firestore.v1beta1.Precondition.update_time)
  return condition_type_.update_time_;
}

inline bool Precondition::has_condition_type() const {
  return condition_type_case() != CONDITION_TYPE_NOT_SET;
}
inline void Precondition::clear_has_condition_type() {
  _oneof_case_[0] = CONDITION_TYPE_NOT_SET;
}
inline Precondition::ConditionTypeCase Precondition::condition_type_case() const {
  return Precondition::ConditionTypeCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// TransactionOptions_ReadWrite

// bytes retry_transaction = 1;
inline void TransactionOptions_ReadWrite::clear_retry_transaction() {
  retry_transaction_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TransactionOptions_ReadWrite::retry_transaction() const {
  // @@protoc_insertion_point(field_get:google.firestore.v1beta1.TransactionOptions.ReadWrite.retry_transaction)
  return retry_transaction_.GetNoArena();
}
inline void TransactionOptions_ReadWrite::set_retry_transaction(const ::std::string& value) {
  
  retry_transaction_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.firestore.v1beta1.TransactionOptions.ReadWrite.retry_transaction)
}
#if LANG_CXX11
inline void TransactionOptions_ReadWrite::set_retry_transaction(::std::string&& value) {
  
  retry_transaction_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.firestore.v1beta1.TransactionOptions.ReadWrite.retry_transaction)
}
#endif
inline void TransactionOptions_ReadWrite::set_retry_transaction(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  retry_transaction_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.firestore.v1beta1.TransactionOptions.ReadWrite.retry_transaction)
}
inline void TransactionOptions_ReadWrite::set_retry_transaction(const void* value, size_t size) {
  
  retry_transaction_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.firestore.v1beta1.TransactionOptions.ReadWrite.retry_transaction)
}
inline ::std::string* TransactionOptions_ReadWrite::mutable_retry_transaction() {
  
  // @@protoc_insertion_point(field_mutable:google.firestore.v1beta1.TransactionOptions.ReadWrite.retry_transaction)
  return retry_transaction_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TransactionOptions_ReadWrite::release_retry_transaction() {
  // @@protoc_insertion_point(field_release:google.firestore.v1beta1.TransactionOptions.ReadWrite.retry_transaction)
  
  return retry_transaction_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TransactionOptions_ReadWrite::set_allocated_retry_transaction(::std::string* retry_transaction) {
  if (retry_transaction != NULL) {
    
  } else {
    
  }
  retry_transaction_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), retry_transaction);
  // @@protoc_insertion_point(field_set_allocated:google.firestore.v1beta1.TransactionOptions.ReadWrite.retry_transaction)
}

// -------------------------------------------------------------------

// TransactionOptions_ReadOnly

// .google.protobuf.Timestamp read_time = 2;
inline bool TransactionOptions_ReadOnly::has_read_time() const {
  return consistency_selector_case() == kReadTime;
}
inline void TransactionOptions_ReadOnly::set_has_read_time() {
  _oneof_case_[0] = kReadTime;
}
inline ::google::protobuf::Timestamp* TransactionOptions_ReadOnly::release_read_time() {
  // @@protoc_insertion_point(field_release:google.firestore.v1beta1.TransactionOptions.ReadOnly.read_time)
  if (has_read_time()) {
    clear_has_consistency_selector();
      ::google::protobuf::Timestamp* temp = consistency_selector_.read_time_;
    consistency_selector_.read_time_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::protobuf::Timestamp& TransactionOptions_ReadOnly::read_time() const {
  // @@protoc_insertion_point(field_get:google.firestore.v1beta1.TransactionOptions.ReadOnly.read_time)
  return has_read_time()
      ? *consistency_selector_.read_time_
      : *reinterpret_cast< ::google::protobuf::Timestamp*>(&::google::protobuf::_Timestamp_default_instance_);
}
inline ::google::protobuf::Timestamp* TransactionOptions_ReadOnly::mutable_read_time() {
  if (!has_read_time()) {
    clear_consistency_selector();
    set_has_read_time();
    consistency_selector_.read_time_ = new ::google::protobuf::Timestamp;
  }
  // @@protoc_insertion_point(field_mutable:google.firestore.v1beta1.TransactionOptions.ReadOnly.read_time)
  return consistency_selector_.read_time_;
}

inline bool TransactionOptions_ReadOnly::has_consistency_selector() const {
  return consistency_selector_case() != CONSISTENCY_SELECTOR_NOT_SET;
}
inline void TransactionOptions_ReadOnly::clear_has_consistency_selector() {
  _oneof_case_[0] = CONSISTENCY_SELECTOR_NOT_SET;
}
inline TransactionOptions_ReadOnly::ConsistencySelectorCase TransactionOptions_ReadOnly::consistency_selector_case() const {
  return TransactionOptions_ReadOnly::ConsistencySelectorCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// TransactionOptions

// .google.firestore.v1beta1.TransactionOptions.ReadOnly read_only = 2;
inline bool TransactionOptions::has_read_only() const {
  return mode_case() == kReadOnly;
}
inline void TransactionOptions::set_has_read_only() {
  _oneof_case_[0] = kReadOnly;
}
inline void TransactionOptions::clear_read_only() {
  if (has_read_only()) {
    delete mode_.read_only_;
    clear_has_mode();
  }
}
inline ::google::firestore::v1beta1::TransactionOptions_ReadOnly* TransactionOptions::release_read_only() {
  // @@protoc_insertion_point(field_release:google.firestore.v1beta1.TransactionOptions.read_only)
  if (has_read_only()) {
    clear_has_mode();
      ::google::firestore::v1beta1::TransactionOptions_ReadOnly* temp = mode_.read_only_;
    mode_.read_only_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::firestore::v1beta1::TransactionOptions_ReadOnly& TransactionOptions::read_only() const {
  // @@protoc_insertion_point(field_get:google.firestore.v1beta1.TransactionOptions.read_only)
  return has_read_only()
      ? *mode_.read_only_
      : *reinterpret_cast< ::google::firestore::v1beta1::TransactionOptions_ReadOnly*>(&::google::firestore::v1beta1::_TransactionOptions_ReadOnly_default_instance_);
}
inline ::google::firestore::v1beta1::TransactionOptions_ReadOnly* TransactionOptions::mutable_read_only() {
  if (!has_read_only()) {
    clear_mode();
    set_has_read_only();
    mode_.read_only_ = new ::google::firestore::v1beta1::TransactionOptions_ReadOnly;
  }
  // @@protoc_insertion_point(field_mutable:google.firestore.v1beta1.TransactionOptions.read_only)
  return mode_.read_only_;
}

// .google.firestore.v1beta1.TransactionOptions.ReadWrite read_write = 3;
inline bool TransactionOptions::has_read_write() const {
  return mode_case() == kReadWrite;
}
inline void TransactionOptions::set_has_read_write() {
  _oneof_case_[0] = kReadWrite;
}
inline void TransactionOptions::clear_read_write() {
  if (has_read_write()) {
    delete mode_.read_write_;
    clear_has_mode();
  }
}
inline ::google::firestore::v1beta1::TransactionOptions_ReadWrite* TransactionOptions::release_read_write() {
  // @@protoc_insertion_point(field_release:google.firestore.v1beta1.TransactionOptions.read_write)
  if (has_read_write()) {
    clear_has_mode();
      ::google::firestore::v1beta1::TransactionOptions_ReadWrite* temp = mode_.read_write_;
    mode_.read_write_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::firestore::v1beta1::TransactionOptions_ReadWrite& TransactionOptions::read_write() const {
  // @@protoc_insertion_point(field_get:google.firestore.v1beta1.TransactionOptions.read_write)
  return has_read_write()
      ? *mode_.read_write_
      : *reinterpret_cast< ::google::firestore::v1beta1::TransactionOptions_ReadWrite*>(&::google::firestore::v1beta1::_TransactionOptions_ReadWrite_default_instance_);
}
inline ::google::firestore::v1beta1::TransactionOptions_ReadWrite* TransactionOptions::mutable_read_write() {
  if (!has_read_write()) {
    clear_mode();
    set_has_read_write();
    mode_.read_write_ = new ::google::firestore::v1beta1::TransactionOptions_ReadWrite;
  }
  // @@protoc_insertion_point(field_mutable:google.firestore.v1beta1.TransactionOptions.read_write)
  return mode_.read_write_;
}

inline bool TransactionOptions::has_mode() const {
  return mode_case() != MODE_NOT_SET;
}
inline void TransactionOptions::clear_has_mode() {
  _oneof_case_[0] = MODE_NOT_SET;
}
inline TransactionOptions::ModeCase TransactionOptions::mode_case() const {
  return TransactionOptions::ModeCase(_oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1beta1
}  // namespace firestore
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_google_2ffirestore_2fv1beta1_2fcommon_2eproto__INCLUDED
