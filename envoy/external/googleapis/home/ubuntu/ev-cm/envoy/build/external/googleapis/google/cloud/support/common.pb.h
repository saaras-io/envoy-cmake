// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/cloud/support/common.proto

#ifndef PROTOBUF_google_2fcloud_2fsupport_2fcommon_2eproto__INCLUDED
#define PROTOBUF_google_2fcloud_2fsupport_2fcommon_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "google/api/annotations.pb.h"
#include <google/protobuf/timestamp.pb.h>
// @@protoc_insertion_point(includes)

namespace protobuf_google_2fcloud_2fsupport_2fcommon_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[10];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsSupportAccountImpl();
void InitDefaultsSupportAccount();
void InitDefaultsCaseImpl();
void InitDefaultsCase();
void InitDefaultsCustomerIssueImpl();
void InitDefaultsCustomerIssue();
void InitDefaultsSupportRoleImpl();
void InitDefaultsSupportRole();
void InitDefaultsCommentImpl();
void InitDefaultsComment();
void InitDefaultsIssueTaxonomy_ComponentImpl();
void InitDefaultsIssueTaxonomy_Component();
void InitDefaultsIssueTaxonomy_Category_ComponentsEntry_DoNotUseImpl();
void InitDefaultsIssueTaxonomy_Category_ComponentsEntry_DoNotUse();
void InitDefaultsIssueTaxonomy_CategoryImpl();
void InitDefaultsIssueTaxonomy_Category();
void InitDefaultsIssueTaxonomy_CategoriesEntry_DoNotUseImpl();
void InitDefaultsIssueTaxonomy_CategoriesEntry_DoNotUse();
void InitDefaultsIssueTaxonomyImpl();
void InitDefaultsIssueTaxonomy();
inline void InitDefaults() {
  InitDefaultsSupportAccount();
  InitDefaultsCase();
  InitDefaultsCustomerIssue();
  InitDefaultsSupportRole();
  InitDefaultsComment();
  InitDefaultsIssueTaxonomy_Component();
  InitDefaultsIssueTaxonomy_Category_ComponentsEntry_DoNotUse();
  InitDefaultsIssueTaxonomy_Category();
  InitDefaultsIssueTaxonomy_CategoriesEntry_DoNotUse();
  InitDefaultsIssueTaxonomy();
}
}  // namespace protobuf_google_2fcloud_2fsupport_2fcommon_2eproto
namespace google {
namespace cloud {
namespace support {
namespace common {
class Case;
class CaseDefaultTypeInternal;
extern CaseDefaultTypeInternal _Case_default_instance_;
class Comment;
class CommentDefaultTypeInternal;
extern CommentDefaultTypeInternal _Comment_default_instance_;
class CustomerIssue;
class CustomerIssueDefaultTypeInternal;
extern CustomerIssueDefaultTypeInternal _CustomerIssue_default_instance_;
class IssueTaxonomy;
class IssueTaxonomyDefaultTypeInternal;
extern IssueTaxonomyDefaultTypeInternal _IssueTaxonomy_default_instance_;
class IssueTaxonomy_CategoriesEntry_DoNotUse;
class IssueTaxonomy_CategoriesEntry_DoNotUseDefaultTypeInternal;
extern IssueTaxonomy_CategoriesEntry_DoNotUseDefaultTypeInternal _IssueTaxonomy_CategoriesEntry_DoNotUse_default_instance_;
class IssueTaxonomy_Category;
class IssueTaxonomy_CategoryDefaultTypeInternal;
extern IssueTaxonomy_CategoryDefaultTypeInternal _IssueTaxonomy_Category_default_instance_;
class IssueTaxonomy_Category_ComponentsEntry_DoNotUse;
class IssueTaxonomy_Category_ComponentsEntry_DoNotUseDefaultTypeInternal;
extern IssueTaxonomy_Category_ComponentsEntry_DoNotUseDefaultTypeInternal _IssueTaxonomy_Category_ComponentsEntry_DoNotUse_default_instance_;
class IssueTaxonomy_Component;
class IssueTaxonomy_ComponentDefaultTypeInternal;
extern IssueTaxonomy_ComponentDefaultTypeInternal _IssueTaxonomy_Component_default_instance_;
class SupportAccount;
class SupportAccountDefaultTypeInternal;
extern SupportAccountDefaultTypeInternal _SupportAccount_default_instance_;
class SupportRole;
class SupportRoleDefaultTypeInternal;
extern SupportRoleDefaultTypeInternal _SupportRole_default_instance_;
}  // namespace common
}  // namespace support
}  // namespace cloud
}  // namespace google
namespace google {
namespace cloud {
namespace support {
namespace common {

enum SupportAccount_State {
  SupportAccount_State_STATE_UNSPECIFIED = 0,
  SupportAccount_State_ACTIVE = 1,
  SupportAccount_State_PENDING = 2,
  SupportAccount_State_PENDING_DELETION = 3,
  SupportAccount_State_SupportAccount_State_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  SupportAccount_State_SupportAccount_State_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool SupportAccount_State_IsValid(int value);
const SupportAccount_State SupportAccount_State_State_MIN = SupportAccount_State_STATE_UNSPECIFIED;
const SupportAccount_State SupportAccount_State_State_MAX = SupportAccount_State_PENDING_DELETION;
const int SupportAccount_State_State_ARRAYSIZE = SupportAccount_State_State_MAX + 1;

const ::google::protobuf::EnumDescriptor* SupportAccount_State_descriptor();
inline const ::std::string& SupportAccount_State_Name(SupportAccount_State value) {
  return ::google::protobuf::internal::NameOfEnum(
    SupportAccount_State_descriptor(), value);
}
inline bool SupportAccount_State_Parse(
    const ::std::string& name, SupportAccount_State* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SupportAccount_State>(
    SupportAccount_State_descriptor(), name, value);
}
enum SupportAccount_PricingModel {
  SupportAccount_PricingModel_PRICING_MODEL_UNKNOWN = 0,
  SupportAccount_PricingModel_PACKAGES = 1,
  SupportAccount_PricingModel_USER_ROLES = 2,
  SupportAccount_PricingModel_SupportAccount_PricingModel_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  SupportAccount_PricingModel_SupportAccount_PricingModel_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool SupportAccount_PricingModel_IsValid(int value);
const SupportAccount_PricingModel SupportAccount_PricingModel_PricingModel_MIN = SupportAccount_PricingModel_PRICING_MODEL_UNKNOWN;
const SupportAccount_PricingModel SupportAccount_PricingModel_PricingModel_MAX = SupportAccount_PricingModel_USER_ROLES;
const int SupportAccount_PricingModel_PricingModel_ARRAYSIZE = SupportAccount_PricingModel_PricingModel_MAX + 1;

const ::google::protobuf::EnumDescriptor* SupportAccount_PricingModel_descriptor();
inline const ::std::string& SupportAccount_PricingModel_Name(SupportAccount_PricingModel value) {
  return ::google::protobuf::internal::NameOfEnum(
    SupportAccount_PricingModel_descriptor(), value);
}
inline bool SupportAccount_PricingModel_Parse(
    const ::std::string& name, SupportAccount_PricingModel* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SupportAccount_PricingModel>(
    SupportAccount_PricingModel_descriptor(), name, value);
}
enum Case_Priority {
  Case_Priority_PRIORITY_UNSPECIFIED = 0,
  Case_Priority_P0 = 1,
  Case_Priority_P1 = 2,
  Case_Priority_P2 = 3,
  Case_Priority_P3 = 4,
  Case_Priority_P4 = 5,
  Case_Priority_Case_Priority_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  Case_Priority_Case_Priority_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool Case_Priority_IsValid(int value);
const Case_Priority Case_Priority_Priority_MIN = Case_Priority_PRIORITY_UNSPECIFIED;
const Case_Priority Case_Priority_Priority_MAX = Case_Priority_P4;
const int Case_Priority_Priority_ARRAYSIZE = Case_Priority_Priority_MAX + 1;

const ::google::protobuf::EnumDescriptor* Case_Priority_descriptor();
inline const ::std::string& Case_Priority_Name(Case_Priority value) {
  return ::google::protobuf::internal::NameOfEnum(
    Case_Priority_descriptor(), value);
}
inline bool Case_Priority_Parse(
    const ::std::string& name, Case_Priority* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Case_Priority>(
    Case_Priority_descriptor(), name, value);
}
enum Case_State {
  Case_State_STATE_UNSPECIFIED = 0,
  Case_State_NEW = 1,
  Case_State_ASSIGNED = 2,
  Case_State_IN_PROGRESS_GOOGLE_SUPPORT = 3,
  Case_State_IN_PROGRESS_GOOGLE_ENG = 4,
  Case_State_IN_PROGRESS_KNOWN_ISSUE = 5,
  Case_State_WAITING_FOR_CUSTOMER_RESPONSE = 6,
  Case_State_SOLUTION_OFFERED = 7,
  Case_State_CLOSED = 8,
  Case_State_Case_State_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  Case_State_Case_State_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool Case_State_IsValid(int value);
const Case_State Case_State_State_MIN = Case_State_STATE_UNSPECIFIED;
const Case_State Case_State_State_MAX = Case_State_CLOSED;
const int Case_State_State_ARRAYSIZE = Case_State_State_MAX + 1;

const ::google::protobuf::EnumDescriptor* Case_State_descriptor();
inline const ::std::string& Case_State_Name(Case_State value) {
  return ::google::protobuf::internal::NameOfEnum(
    Case_State_descriptor(), value);
}
inline bool Case_State_Parse(
    const ::std::string& name, Case_State* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Case_State>(
    Case_State_descriptor(), name, value);
}
enum CustomerIssue_IssueState {
  CustomerIssue_IssueState_ISSUE_STATE_UNSPECIFIED = 0,
  CustomerIssue_IssueState_OPEN = 1,
  CustomerIssue_IssueState_IN_PROGRESS = 2,
  CustomerIssue_IssueState_FIXED = 3,
  CustomerIssue_IssueState_WONT_FIX = 4,
  CustomerIssue_IssueState_VERIFIED = 5,
  CustomerIssue_IssueState_CustomerIssue_IssueState_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  CustomerIssue_IssueState_CustomerIssue_IssueState_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool CustomerIssue_IssueState_IsValid(int value);
const CustomerIssue_IssueState CustomerIssue_IssueState_IssueState_MIN = CustomerIssue_IssueState_ISSUE_STATE_UNSPECIFIED;
const CustomerIssue_IssueState CustomerIssue_IssueState_IssueState_MAX = CustomerIssue_IssueState_VERIFIED;
const int CustomerIssue_IssueState_IssueState_ARRAYSIZE = CustomerIssue_IssueState_IssueState_MAX + 1;

const ::google::protobuf::EnumDescriptor* CustomerIssue_IssueState_descriptor();
inline const ::std::string& CustomerIssue_IssueState_Name(CustomerIssue_IssueState value) {
  return ::google::protobuf::internal::NameOfEnum(
    CustomerIssue_IssueState_descriptor(), value);
}
inline bool CustomerIssue_IssueState_Parse(
    const ::std::string& name, CustomerIssue_IssueState* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CustomerIssue_IssueState>(
    CustomerIssue_IssueState_descriptor(), name, value);
}
enum SupportRole_Role {
  SupportRole_Role_ROLE_UNSPECIFIED = 0,
  SupportRole_Role_BASIC = 1,
  SupportRole_Role_DEVELOPER = 2,
  SupportRole_Role_OPERATION = 3,
  SupportRole_Role_SITE_RELIABILITY = 4,
  SupportRole_Role_SupportRole_Role_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  SupportRole_Role_SupportRole_Role_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool SupportRole_Role_IsValid(int value);
const SupportRole_Role SupportRole_Role_Role_MIN = SupportRole_Role_ROLE_UNSPECIFIED;
const SupportRole_Role SupportRole_Role_Role_MAX = SupportRole_Role_SITE_RELIABILITY;
const int SupportRole_Role_Role_ARRAYSIZE = SupportRole_Role_Role_MAX + 1;

const ::google::protobuf::EnumDescriptor* SupportRole_Role_descriptor();
inline const ::std::string& SupportRole_Role_Name(SupportRole_Role value) {
  return ::google::protobuf::internal::NameOfEnum(
    SupportRole_Role_descriptor(), value);
}
inline bool SupportRole_Role_Parse(
    const ::std::string& name, SupportRole_Role* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SupportRole_Role>(
    SupportRole_Role_descriptor(), name, value);
}
// ===================================================================

class SupportAccount : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.cloud.support.common.SupportAccount) */ {
 public:
  SupportAccount();
  virtual ~SupportAccount();

  SupportAccount(const SupportAccount& from);

  inline SupportAccount& operator=(const SupportAccount& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SupportAccount(SupportAccount&& from) noexcept
    : SupportAccount() {
    *this = ::std::move(from);
  }

  inline SupportAccount& operator=(SupportAccount&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SupportAccount& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SupportAccount* internal_default_instance() {
    return reinterpret_cast<const SupportAccount*>(
               &_SupportAccount_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(SupportAccount* other);
  friend void swap(SupportAccount& a, SupportAccount& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SupportAccount* New() const PROTOBUF_FINAL { return New(NULL); }

  SupportAccount* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SupportAccount& from);
  void MergeFrom(const SupportAccount& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SupportAccount* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef SupportAccount_State State;
  static const State STATE_UNSPECIFIED =
    SupportAccount_State_STATE_UNSPECIFIED;
  static const State ACTIVE =
    SupportAccount_State_ACTIVE;
  static const State PENDING =
    SupportAccount_State_PENDING;
  static const State PENDING_DELETION =
    SupportAccount_State_PENDING_DELETION;
  static inline bool State_IsValid(int value) {
    return SupportAccount_State_IsValid(value);
  }
  static const State State_MIN =
    SupportAccount_State_State_MIN;
  static const State State_MAX =
    SupportAccount_State_State_MAX;
  static const int State_ARRAYSIZE =
    SupportAccount_State_State_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  State_descriptor() {
    return SupportAccount_State_descriptor();
  }
  static inline const ::std::string& State_Name(State value) {
    return SupportAccount_State_Name(value);
  }
  static inline bool State_Parse(const ::std::string& name,
      State* value) {
    return SupportAccount_State_Parse(name, value);
  }

  typedef SupportAccount_PricingModel PricingModel;
  static const PricingModel PRICING_MODEL_UNKNOWN =
    SupportAccount_PricingModel_PRICING_MODEL_UNKNOWN;
  static const PricingModel PACKAGES =
    SupportAccount_PricingModel_PACKAGES;
  static const PricingModel USER_ROLES =
    SupportAccount_PricingModel_USER_ROLES;
  static inline bool PricingModel_IsValid(int value) {
    return SupportAccount_PricingModel_IsValid(value);
  }
  static const PricingModel PricingModel_MIN =
    SupportAccount_PricingModel_PricingModel_MIN;
  static const PricingModel PricingModel_MAX =
    SupportAccount_PricingModel_PricingModel_MAX;
  static const int PricingModel_ARRAYSIZE =
    SupportAccount_PricingModel_PricingModel_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  PricingModel_descriptor() {
    return SupportAccount_PricingModel_descriptor();
  }
  static inline const ::std::string& PricingModel_Name(PricingModel value) {
    return SupportAccount_PricingModel_Name(value);
  }
  static inline bool PricingModel_Parse(const ::std::string& name,
      PricingModel* value) {
    return SupportAccount_PricingModel_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // string account_id = 2;
  void clear_account_id();
  static const int kAccountIdFieldNumber = 2;
  const ::std::string& account_id() const;
  void set_account_id(const ::std::string& value);
  #if LANG_CXX11
  void set_account_id(::std::string&& value);
  #endif
  void set_account_id(const char* value);
  void set_account_id(const char* value, size_t size);
  ::std::string* mutable_account_id();
  ::std::string* release_account_id();
  void set_allocated_account_id(::std::string* account_id);

  // string cloud_resource = 3;
  void clear_cloud_resource();
  static const int kCloudResourceFieldNumber = 3;
  const ::std::string& cloud_resource() const;
  void set_cloud_resource(const ::std::string& value);
  #if LANG_CXX11
  void set_cloud_resource(::std::string&& value);
  #endif
  void set_cloud_resource(const char* value);
  void set_cloud_resource(const char* value, size_t size);
  ::std::string* mutable_cloud_resource();
  ::std::string* release_cloud_resource();
  void set_allocated_cloud_resource(::std::string* cloud_resource);

  // string display_name = 4;
  void clear_display_name();
  static const int kDisplayNameFieldNumber = 4;
  const ::std::string& display_name() const;
  void set_display_name(const ::std::string& value);
  #if LANG_CXX11
  void set_display_name(::std::string&& value);
  #endif
  void set_display_name(const char* value);
  void set_display_name(const char* value, size_t size);
  ::std::string* mutable_display_name();
  ::std::string* release_display_name();
  void set_allocated_display_name(::std::string* display_name);

  // string billing_account_name = 7;
  void clear_billing_account_name();
  static const int kBillingAccountNameFieldNumber = 7;
  const ::std::string& billing_account_name() const;
  void set_billing_account_name(const ::std::string& value);
  #if LANG_CXX11
  void set_billing_account_name(::std::string&& value);
  #endif
  void set_billing_account_name(const char* value);
  void set_billing_account_name(const char* value, size_t size);
  ::std::string* mutable_billing_account_name();
  ::std::string* release_billing_account_name();
  void set_allocated_billing_account_name(::std::string* billing_account_name);

  // string unify_account_id = 8;
  void clear_unify_account_id();
  static const int kUnifyAccountIdFieldNumber = 8;
  const ::std::string& unify_account_id() const;
  void set_unify_account_id(const ::std::string& value);
  #if LANG_CXX11
  void set_unify_account_id(::std::string&& value);
  #endif
  void set_unify_account_id(const char* value);
  void set_unify_account_id(const char* value, size_t size);
  ::std::string* mutable_unify_account_id();
  ::std::string* release_unify_account_id();
  void set_allocated_unify_account_id(::std::string* unify_account_id);

  // .google.protobuf.Timestamp create_time = 6;
  bool has_create_time() const;
  void clear_create_time();
  static const int kCreateTimeFieldNumber = 6;
  const ::google::protobuf::Timestamp& create_time() const;
  ::google::protobuf::Timestamp* release_create_time();
  ::google::protobuf::Timestamp* mutable_create_time();
  void set_allocated_create_time(::google::protobuf::Timestamp* create_time);

  // .google.cloud.support.common.SupportAccount.State state = 5;
  void clear_state();
  static const int kStateFieldNumber = 5;
  ::google::cloud::support::common::SupportAccount_State state() const;
  void set_state(::google::cloud::support::common::SupportAccount_State value);

  // .google.cloud.support.common.SupportAccount.PricingModel pricing_model = 9;
  void clear_pricing_model();
  static const int kPricingModelFieldNumber = 9;
  ::google::cloud::support::common::SupportAccount_PricingModel pricing_model() const;
  void set_pricing_model(::google::cloud::support::common::SupportAccount_PricingModel value);

  // @@protoc_insertion_point(class_scope:google.cloud.support.common.SupportAccount)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr account_id_;
  ::google::protobuf::internal::ArenaStringPtr cloud_resource_;
  ::google::protobuf::internal::ArenaStringPtr display_name_;
  ::google::protobuf::internal::ArenaStringPtr billing_account_name_;
  ::google::protobuf::internal::ArenaStringPtr unify_account_id_;
  ::google::protobuf::Timestamp* create_time_;
  int state_;
  int pricing_model_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fcloud_2fsupport_2fcommon_2eproto::TableStruct;
  friend void ::protobuf_google_2fcloud_2fsupport_2fcommon_2eproto::InitDefaultsSupportAccountImpl();
};
// -------------------------------------------------------------------

class Case : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.cloud.support.common.Case) */ {
 public:
  Case();
  virtual ~Case();

  Case(const Case& from);

  inline Case& operator=(const Case& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Case(Case&& from) noexcept
    : Case() {
    *this = ::std::move(from);
  }

  inline Case& operator=(Case&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Case& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Case* internal_default_instance() {
    return reinterpret_cast<const Case*>(
               &_Case_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(Case* other);
  friend void swap(Case& a, Case& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Case* New() const PROTOBUF_FINAL { return New(NULL); }

  Case* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Case& from);
  void MergeFrom(const Case& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Case* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef Case_Priority Priority;
  static const Priority PRIORITY_UNSPECIFIED =
    Case_Priority_PRIORITY_UNSPECIFIED;
  static const Priority P0 =
    Case_Priority_P0;
  static const Priority P1 =
    Case_Priority_P1;
  static const Priority P2 =
    Case_Priority_P2;
  static const Priority P3 =
    Case_Priority_P3;
  static const Priority P4 =
    Case_Priority_P4;
  static inline bool Priority_IsValid(int value) {
    return Case_Priority_IsValid(value);
  }
  static const Priority Priority_MIN =
    Case_Priority_Priority_MIN;
  static const Priority Priority_MAX =
    Case_Priority_Priority_MAX;
  static const int Priority_ARRAYSIZE =
    Case_Priority_Priority_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Priority_descriptor() {
    return Case_Priority_descriptor();
  }
  static inline const ::std::string& Priority_Name(Priority value) {
    return Case_Priority_Name(value);
  }
  static inline bool Priority_Parse(const ::std::string& name,
      Priority* value) {
    return Case_Priority_Parse(name, value);
  }

  typedef Case_State State;
  static const State STATE_UNSPECIFIED =
    Case_State_STATE_UNSPECIFIED;
  static const State NEW =
    Case_State_NEW;
  static const State ASSIGNED =
    Case_State_ASSIGNED;
  static const State IN_PROGRESS_GOOGLE_SUPPORT =
    Case_State_IN_PROGRESS_GOOGLE_SUPPORT;
  static const State IN_PROGRESS_GOOGLE_ENG =
    Case_State_IN_PROGRESS_GOOGLE_ENG;
  static const State IN_PROGRESS_KNOWN_ISSUE =
    Case_State_IN_PROGRESS_KNOWN_ISSUE;
  static const State WAITING_FOR_CUSTOMER_RESPONSE =
    Case_State_WAITING_FOR_CUSTOMER_RESPONSE;
  static const State SOLUTION_OFFERED =
    Case_State_SOLUTION_OFFERED;
  static const State CLOSED =
    Case_State_CLOSED;
  static inline bool State_IsValid(int value) {
    return Case_State_IsValid(value);
  }
  static const State State_MIN =
    Case_State_State_MIN;
  static const State State_MAX =
    Case_State_State_MAX;
  static const int State_ARRAYSIZE =
    Case_State_State_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  State_descriptor() {
    return Case_State_descriptor();
  }
  static inline const ::std::string& State_Name(State value) {
    return Case_State_Name(value);
  }
  static inline bool State_Parse(const ::std::string& name,
      State* value) {
    return Case_State_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated string cc_addresses = 7;
  int cc_addresses_size() const;
  void clear_cc_addresses();
  static const int kCcAddressesFieldNumber = 7;
  const ::std::string& cc_addresses(int index) const;
  ::std::string* mutable_cc_addresses(int index);
  void set_cc_addresses(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_cc_addresses(int index, ::std::string&& value);
  #endif
  void set_cc_addresses(int index, const char* value);
  void set_cc_addresses(int index, const char* value, size_t size);
  ::std::string* add_cc_addresses();
  void add_cc_addresses(const ::std::string& value);
  #if LANG_CXX11
  void add_cc_addresses(::std::string&& value);
  #endif
  void add_cc_addresses(const char* value);
  void add_cc_addresses(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& cc_addresses() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_cc_addresses();

  // repeated .google.cloud.support.common.CustomerIssue issues = 10;
  int issues_size() const;
  void clear_issues();
  static const int kIssuesFieldNumber = 10;
  const ::google::cloud::support::common::CustomerIssue& issues(int index) const;
  ::google::cloud::support::common::CustomerIssue* mutable_issues(int index);
  ::google::cloud::support::common::CustomerIssue* add_issues();
  ::google::protobuf::RepeatedPtrField< ::google::cloud::support::common::CustomerIssue >*
      mutable_issues();
  const ::google::protobuf::RepeatedPtrField< ::google::cloud::support::common::CustomerIssue >&
      issues() const;

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // string display_name = 2;
  void clear_display_name();
  static const int kDisplayNameFieldNumber = 2;
  const ::std::string& display_name() const;
  void set_display_name(const ::std::string& value);
  #if LANG_CXX11
  void set_display_name(::std::string&& value);
  #endif
  void set_display_name(const char* value);
  void set_display_name(const char* value, size_t size);
  ::std::string* mutable_display_name();
  ::std::string* release_display_name();
  void set_allocated_display_name(::std::string* display_name);

  // string description = 3;
  void clear_description();
  static const int kDescriptionFieldNumber = 3;
  const ::std::string& description() const;
  void set_description(const ::std::string& value);
  #if LANG_CXX11
  void set_description(::std::string&& value);
  #endif
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  ::std::string* mutable_description();
  ::std::string* release_description();
  void set_allocated_description(::std::string* description);

  // string component = 4;
  void clear_component();
  static const int kComponentFieldNumber = 4;
  const ::std::string& component() const;
  void set_component(const ::std::string& value);
  #if LANG_CXX11
  void set_component(::std::string&& value);
  #endif
  void set_component(const char* value);
  void set_component(const char* value, size_t size);
  ::std::string* mutable_component();
  ::std::string* release_component();
  void set_allocated_component(::std::string* component);

  // string subcomponent = 5;
  void clear_subcomponent();
  static const int kSubcomponentFieldNumber = 5;
  const ::std::string& subcomponent() const;
  void set_subcomponent(const ::std::string& value);
  #if LANG_CXX11
  void set_subcomponent(::std::string&& value);
  #endif
  void set_subcomponent(const char* value);
  void set_subcomponent(const char* value, size_t size);
  ::std::string* mutable_subcomponent();
  ::std::string* release_subcomponent();
  void set_allocated_subcomponent(::std::string* subcomponent);

  // string client_timezone = 6;
  void clear_client_timezone();
  static const int kClientTimezoneFieldNumber = 6;
  const ::std::string& client_timezone() const;
  void set_client_timezone(const ::std::string& value);
  #if LANG_CXX11
  void set_client_timezone(::std::string&& value);
  #endif
  void set_client_timezone(const char* value);
  void set_client_timezone(const char* value, size_t size);
  ::std::string* mutable_client_timezone();
  ::std::string* release_client_timezone();
  void set_allocated_client_timezone(::std::string* client_timezone);

  // string project_id = 8;
  void clear_project_id();
  static const int kProjectIdFieldNumber = 8;
  const ::std::string& project_id() const;
  void set_project_id(const ::std::string& value);
  #if LANG_CXX11
  void set_project_id(::std::string&& value);
  #endif
  void set_project_id(const char* value);
  void set_project_id(const char* value, size_t size);
  ::std::string* mutable_project_id();
  ::std::string* release_project_id();
  void set_allocated_project_id(::std::string* project_id);

  // string creator_email = 15;
  void clear_creator_email();
  static const int kCreatorEmailFieldNumber = 15;
  const ::std::string& creator_email() const;
  void set_creator_email(const ::std::string& value);
  #if LANG_CXX11
  void set_creator_email(::std::string&& value);
  #endif
  void set_creator_email(const char* value);
  void set_creator_email(const char* value, size_t size);
  ::std::string* mutable_creator_email();
  ::std::string* release_creator_email();
  void set_allocated_creator_email(::std::string* creator_email);

  // string category = 16;
  void clear_category();
  static const int kCategoryFieldNumber = 16;
  const ::std::string& category() const;
  void set_category(const ::std::string& value);
  #if LANG_CXX11
  void set_category(::std::string&& value);
  #endif
  void set_category(const char* value);
  void set_category(const char* value, size_t size);
  ::std::string* mutable_category();
  ::std::string* release_category();
  void set_allocated_category(::std::string* category);

  // .google.protobuf.Timestamp create_time = 13;
  bool has_create_time() const;
  void clear_create_time();
  static const int kCreateTimeFieldNumber = 13;
  const ::google::protobuf::Timestamp& create_time() const;
  ::google::protobuf::Timestamp* release_create_time();
  ::google::protobuf::Timestamp* mutable_create_time();
  void set_allocated_create_time(::google::protobuf::Timestamp* create_time);

  // .google.protobuf.Timestamp update_time = 14;
  bool has_update_time() const;
  void clear_update_time();
  static const int kUpdateTimeFieldNumber = 14;
  const ::google::protobuf::Timestamp& update_time() const;
  ::google::protobuf::Timestamp* release_update_time();
  ::google::protobuf::Timestamp* mutable_update_time();
  void set_allocated_update_time(::google::protobuf::Timestamp* update_time);

  // .google.cloud.support.common.Case.Priority priority = 11;
  void clear_priority();
  static const int kPriorityFieldNumber = 11;
  ::google::cloud::support::common::Case_Priority priority() const;
  void set_priority(::google::cloud::support::common::Case_Priority value);

  // .google.cloud.support.common.Case.State state = 12;
  void clear_state();
  static const int kStateFieldNumber = 12;
  ::google::cloud::support::common::Case_State state() const;
  void set_state(::google::cloud::support::common::Case_State value);

  // @@protoc_insertion_point(class_scope:google.cloud.support.common.Case)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> cc_addresses_;
  ::google::protobuf::RepeatedPtrField< ::google::cloud::support::common::CustomerIssue > issues_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr display_name_;
  ::google::protobuf::internal::ArenaStringPtr description_;
  ::google::protobuf::internal::ArenaStringPtr component_;
  ::google::protobuf::internal::ArenaStringPtr subcomponent_;
  ::google::protobuf::internal::ArenaStringPtr client_timezone_;
  ::google::protobuf::internal::ArenaStringPtr project_id_;
  ::google::protobuf::internal::ArenaStringPtr creator_email_;
  ::google::protobuf::internal::ArenaStringPtr category_;
  ::google::protobuf::Timestamp* create_time_;
  ::google::protobuf::Timestamp* update_time_;
  int priority_;
  int state_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fcloud_2fsupport_2fcommon_2eproto::TableStruct;
  friend void ::protobuf_google_2fcloud_2fsupport_2fcommon_2eproto::InitDefaultsCaseImpl();
};
// -------------------------------------------------------------------

class CustomerIssue : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.cloud.support.common.CustomerIssue) */ {
 public:
  CustomerIssue();
  virtual ~CustomerIssue();

  CustomerIssue(const CustomerIssue& from);

  inline CustomerIssue& operator=(const CustomerIssue& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CustomerIssue(CustomerIssue&& from) noexcept
    : CustomerIssue() {
    *this = ::std::move(from);
  }

  inline CustomerIssue& operator=(CustomerIssue&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CustomerIssue& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CustomerIssue* internal_default_instance() {
    return reinterpret_cast<const CustomerIssue*>(
               &_CustomerIssue_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(CustomerIssue* other);
  friend void swap(CustomerIssue& a, CustomerIssue& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CustomerIssue* New() const PROTOBUF_FINAL { return New(NULL); }

  CustomerIssue* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CustomerIssue& from);
  void MergeFrom(const CustomerIssue& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CustomerIssue* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef CustomerIssue_IssueState IssueState;
  static const IssueState ISSUE_STATE_UNSPECIFIED =
    CustomerIssue_IssueState_ISSUE_STATE_UNSPECIFIED;
  static const IssueState OPEN =
    CustomerIssue_IssueState_OPEN;
  static const IssueState IN_PROGRESS =
    CustomerIssue_IssueState_IN_PROGRESS;
  static const IssueState FIXED =
    CustomerIssue_IssueState_FIXED;
  static const IssueState WONT_FIX =
    CustomerIssue_IssueState_WONT_FIX;
  static const IssueState VERIFIED =
    CustomerIssue_IssueState_VERIFIED;
  static inline bool IssueState_IsValid(int value) {
    return CustomerIssue_IssueState_IsValid(value);
  }
  static const IssueState IssueState_MIN =
    CustomerIssue_IssueState_IssueState_MIN;
  static const IssueState IssueState_MAX =
    CustomerIssue_IssueState_IssueState_MAX;
  static const int IssueState_ARRAYSIZE =
    CustomerIssue_IssueState_IssueState_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  IssueState_descriptor() {
    return CustomerIssue_IssueState_descriptor();
  }
  static inline const ::std::string& IssueState_Name(IssueState value) {
    return CustomerIssue_IssueState_Name(value);
  }
  static inline bool IssueState_Parse(const ::std::string& name,
      IssueState* value) {
    return CustomerIssue_IssueState_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // string issue_id = 1;
  void clear_issue_id();
  static const int kIssueIdFieldNumber = 1;
  const ::std::string& issue_id() const;
  void set_issue_id(const ::std::string& value);
  #if LANG_CXX11
  void set_issue_id(::std::string&& value);
  #endif
  void set_issue_id(const char* value);
  void set_issue_id(const char* value, size_t size);
  ::std::string* mutable_issue_id();
  ::std::string* release_issue_id();
  void set_allocated_issue_id(::std::string* issue_id);

  // .google.protobuf.Timestamp create_time = 3;
  bool has_create_time() const;
  void clear_create_time();
  static const int kCreateTimeFieldNumber = 3;
  const ::google::protobuf::Timestamp& create_time() const;
  ::google::protobuf::Timestamp* release_create_time();
  ::google::protobuf::Timestamp* mutable_create_time();
  void set_allocated_create_time(::google::protobuf::Timestamp* create_time);

  // .google.protobuf.Timestamp resolve_time = 4;
  bool has_resolve_time() const;
  void clear_resolve_time();
  static const int kResolveTimeFieldNumber = 4;
  const ::google::protobuf::Timestamp& resolve_time() const;
  ::google::protobuf::Timestamp* release_resolve_time();
  ::google::protobuf::Timestamp* mutable_resolve_time();
  void set_allocated_resolve_time(::google::protobuf::Timestamp* resolve_time);

  // .google.protobuf.Timestamp update_time = 5;
  bool has_update_time() const;
  void clear_update_time();
  static const int kUpdateTimeFieldNumber = 5;
  const ::google::protobuf::Timestamp& update_time() const;
  ::google::protobuf::Timestamp* release_update_time();
  ::google::protobuf::Timestamp* mutable_update_time();
  void set_allocated_update_time(::google::protobuf::Timestamp* update_time);

  // .google.cloud.support.common.CustomerIssue.IssueState state = 2;
  void clear_state();
  static const int kStateFieldNumber = 2;
  ::google::cloud::support::common::CustomerIssue_IssueState state() const;
  void set_state(::google::cloud::support::common::CustomerIssue_IssueState value);

  // @@protoc_insertion_point(class_scope:google.cloud.support.common.CustomerIssue)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr issue_id_;
  ::google::protobuf::Timestamp* create_time_;
  ::google::protobuf::Timestamp* resolve_time_;
  ::google::protobuf::Timestamp* update_time_;
  int state_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fcloud_2fsupport_2fcommon_2eproto::TableStruct;
  friend void ::protobuf_google_2fcloud_2fsupport_2fcommon_2eproto::InitDefaultsCustomerIssueImpl();
};
// -------------------------------------------------------------------

class SupportRole : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.cloud.support.common.SupportRole) */ {
 public:
  SupportRole();
  virtual ~SupportRole();

  SupportRole(const SupportRole& from);

  inline SupportRole& operator=(const SupportRole& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SupportRole(SupportRole&& from) noexcept
    : SupportRole() {
    *this = ::std::move(from);
  }

  inline SupportRole& operator=(SupportRole&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SupportRole& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SupportRole* internal_default_instance() {
    return reinterpret_cast<const SupportRole*>(
               &_SupportRole_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(SupportRole* other);
  friend void swap(SupportRole& a, SupportRole& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SupportRole* New() const PROTOBUF_FINAL { return New(NULL); }

  SupportRole* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SupportRole& from);
  void MergeFrom(const SupportRole& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SupportRole* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef SupportRole_Role Role;
  static const Role ROLE_UNSPECIFIED =
    SupportRole_Role_ROLE_UNSPECIFIED;
  static const Role BASIC =
    SupportRole_Role_BASIC;
  static const Role DEVELOPER =
    SupportRole_Role_DEVELOPER;
  static const Role OPERATION =
    SupportRole_Role_OPERATION;
  static const Role SITE_RELIABILITY =
    SupportRole_Role_SITE_RELIABILITY;
  static inline bool Role_IsValid(int value) {
    return SupportRole_Role_IsValid(value);
  }
  static const Role Role_MIN =
    SupportRole_Role_Role_MIN;
  static const Role Role_MAX =
    SupportRole_Role_Role_MAX;
  static const int Role_ARRAYSIZE =
    SupportRole_Role_Role_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Role_descriptor() {
    return SupportRole_Role_descriptor();
  }
  static inline const ::std::string& Role_Name(Role value) {
    return SupportRole_Role_Name(value);
  }
  static inline bool Role_Parse(const ::std::string& name,
      Role* value) {
    return SupportRole_Role_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // string email = 1;
  void clear_email();
  static const int kEmailFieldNumber = 1;
  const ::std::string& email() const;
  void set_email(const ::std::string& value);
  #if LANG_CXX11
  void set_email(::std::string&& value);
  #endif
  void set_email(const char* value);
  void set_email(const char* value, size_t size);
  ::std::string* mutable_email();
  ::std::string* release_email();
  void set_allocated_email(::std::string* email);

  // .google.cloud.support.common.SupportRole.Role role = 2;
  void clear_role();
  static const int kRoleFieldNumber = 2;
  ::google::cloud::support::common::SupportRole_Role role() const;
  void set_role(::google::cloud::support::common::SupportRole_Role value);

  // @@protoc_insertion_point(class_scope:google.cloud.support.common.SupportRole)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr email_;
  int role_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fcloud_2fsupport_2fcommon_2eproto::TableStruct;
  friend void ::protobuf_google_2fcloud_2fsupport_2fcommon_2eproto::InitDefaultsSupportRoleImpl();
};
// -------------------------------------------------------------------

class Comment : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.cloud.support.common.Comment) */ {
 public:
  Comment();
  virtual ~Comment();

  Comment(const Comment& from);

  inline Comment& operator=(const Comment& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Comment(Comment&& from) noexcept
    : Comment() {
    *this = ::std::move(from);
  }

  inline Comment& operator=(Comment&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Comment& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Comment* internal_default_instance() {
    return reinterpret_cast<const Comment*>(
               &_Comment_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(Comment* other);
  friend void swap(Comment& a, Comment& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Comment* New() const PROTOBUF_FINAL { return New(NULL); }

  Comment* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Comment& from);
  void MergeFrom(const Comment& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Comment* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string text = 1;
  void clear_text();
  static const int kTextFieldNumber = 1;
  const ::std::string& text() const;
  void set_text(const ::std::string& value);
  #if LANG_CXX11
  void set_text(::std::string&& value);
  #endif
  void set_text(const char* value);
  void set_text(const char* value, size_t size);
  ::std::string* mutable_text();
  ::std::string* release_text();
  void set_allocated_text(::std::string* text);

  // string author = 3;
  void clear_author();
  static const int kAuthorFieldNumber = 3;
  const ::std::string& author() const;
  void set_author(const ::std::string& value);
  #if LANG_CXX11
  void set_author(::std::string&& value);
  #endif
  void set_author(const char* value);
  void set_author(const char* value, size_t size);
  ::std::string* mutable_author();
  ::std::string* release_author();
  void set_allocated_author(::std::string* author);

  // string name = 4;
  void clear_name();
  static const int kNameFieldNumber = 4;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // .google.protobuf.Timestamp create_time = 2;
  bool has_create_time() const;
  void clear_create_time();
  static const int kCreateTimeFieldNumber = 2;
  const ::google::protobuf::Timestamp& create_time() const;
  ::google::protobuf::Timestamp* release_create_time();
  ::google::protobuf::Timestamp* mutable_create_time();
  void set_allocated_create_time(::google::protobuf::Timestamp* create_time);

  // @@protoc_insertion_point(class_scope:google.cloud.support.common.Comment)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr text_;
  ::google::protobuf::internal::ArenaStringPtr author_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::Timestamp* create_time_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fcloud_2fsupport_2fcommon_2eproto::TableStruct;
  friend void ::protobuf_google_2fcloud_2fsupport_2fcommon_2eproto::InitDefaultsCommentImpl();
};
// -------------------------------------------------------------------

class IssueTaxonomy_Component : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.cloud.support.common.IssueTaxonomy.Component) */ {
 public:
  IssueTaxonomy_Component();
  virtual ~IssueTaxonomy_Component();

  IssueTaxonomy_Component(const IssueTaxonomy_Component& from);

  inline IssueTaxonomy_Component& operator=(const IssueTaxonomy_Component& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  IssueTaxonomy_Component(IssueTaxonomy_Component&& from) noexcept
    : IssueTaxonomy_Component() {
    *this = ::std::move(from);
  }

  inline IssueTaxonomy_Component& operator=(IssueTaxonomy_Component&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const IssueTaxonomy_Component& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const IssueTaxonomy_Component* internal_default_instance() {
    return reinterpret_cast<const IssueTaxonomy_Component*>(
               &_IssueTaxonomy_Component_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    5;

  void Swap(IssueTaxonomy_Component* other);
  friend void swap(IssueTaxonomy_Component& a, IssueTaxonomy_Component& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline IssueTaxonomy_Component* New() const PROTOBUF_FINAL { return New(NULL); }

  IssueTaxonomy_Component* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const IssueTaxonomy_Component& from);
  void MergeFrom(const IssueTaxonomy_Component& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(IssueTaxonomy_Component* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string languages = 2;
  int languages_size() const;
  void clear_languages();
  static const int kLanguagesFieldNumber = 2;
  const ::std::string& languages(int index) const;
  ::std::string* mutable_languages(int index);
  void set_languages(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_languages(int index, ::std::string&& value);
  #endif
  void set_languages(int index, const char* value);
  void set_languages(int index, const char* value, size_t size);
  ::std::string* add_languages();
  void add_languages(const ::std::string& value);
  #if LANG_CXX11
  void add_languages(::std::string&& value);
  #endif
  void add_languages(const char* value);
  void add_languages(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& languages() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_languages();

  // repeated .google.cloud.support.common.IssueTaxonomy.Component subcomponents = 4;
  int subcomponents_size() const;
  void clear_subcomponents();
  static const int kSubcomponentsFieldNumber = 4;
  const ::google::cloud::support::common::IssueTaxonomy_Component& subcomponents(int index) const;
  ::google::cloud::support::common::IssueTaxonomy_Component* mutable_subcomponents(int index);
  ::google::cloud::support::common::IssueTaxonomy_Component* add_subcomponents();
  ::google::protobuf::RepeatedPtrField< ::google::cloud::support::common::IssueTaxonomy_Component >*
      mutable_subcomponents();
  const ::google::protobuf::RepeatedPtrField< ::google::cloud::support::common::IssueTaxonomy_Component >&
      subcomponents() const;

  // string display_name = 1;
  void clear_display_name();
  static const int kDisplayNameFieldNumber = 1;
  const ::std::string& display_name() const;
  void set_display_name(const ::std::string& value);
  #if LANG_CXX11
  void set_display_name(::std::string&& value);
  #endif
  void set_display_name(const char* value);
  void set_display_name(const char* value, size_t size);
  ::std::string* mutable_display_name();
  ::std::string* release_display_name();
  void set_allocated_display_name(::std::string* display_name);

  // string template = 3;
  void clear_template_();
  static const int kTemplateFieldNumber = 3;
  const ::std::string& template_() const;
  void set_template_(const ::std::string& value);
  #if LANG_CXX11
  void set_template_(::std::string&& value);
  #endif
  void set_template_(const char* value);
  void set_template_(const char* value, size_t size);
  ::std::string* mutable_template_();
  ::std::string* release_template_();
  void set_allocated_template_(::std::string* template_);

  // @@protoc_insertion_point(class_scope:google.cloud.support.common.IssueTaxonomy.Component)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> languages_;
  ::google::protobuf::RepeatedPtrField< ::google::cloud::support::common::IssueTaxonomy_Component > subcomponents_;
  ::google::protobuf::internal::ArenaStringPtr display_name_;
  ::google::protobuf::internal::ArenaStringPtr template__;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fcloud_2fsupport_2fcommon_2eproto::TableStruct;
  friend void ::protobuf_google_2fcloud_2fsupport_2fcommon_2eproto::InitDefaultsIssueTaxonomy_ComponentImpl();
};
// -------------------------------------------------------------------

class IssueTaxonomy_Category_ComponentsEntry_DoNotUse : public ::google::protobuf::internal::MapEntry<IssueTaxonomy_Category_ComponentsEntry_DoNotUse, 
    ::std::string, ::google::cloud::support::common::IssueTaxonomy_Component,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
    0 > {
public:
  typedef ::google::protobuf::internal::MapEntry<IssueTaxonomy_Category_ComponentsEntry_DoNotUse, 
    ::std::string, ::google::cloud::support::common::IssueTaxonomy_Component,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
    0 > SuperType;
  IssueTaxonomy_Category_ComponentsEntry_DoNotUse();
  IssueTaxonomy_Category_ComponentsEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const IssueTaxonomy_Category_ComponentsEntry_DoNotUse& other);
  static const IssueTaxonomy_Category_ComponentsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const IssueTaxonomy_Category_ComponentsEntry_DoNotUse*>(&_IssueTaxonomy_Category_ComponentsEntry_DoNotUse_default_instance_); }
  void MergeFrom(const ::google::protobuf::Message& other) PROTOBUF_FINAL;
  ::google::protobuf::Metadata GetMetadata() const;
};

// -------------------------------------------------------------------

class IssueTaxonomy_Category : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.cloud.support.common.IssueTaxonomy.Category) */ {
 public:
  IssueTaxonomy_Category();
  virtual ~IssueTaxonomy_Category();

  IssueTaxonomy_Category(const IssueTaxonomy_Category& from);

  inline IssueTaxonomy_Category& operator=(const IssueTaxonomy_Category& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  IssueTaxonomy_Category(IssueTaxonomy_Category&& from) noexcept
    : IssueTaxonomy_Category() {
    *this = ::std::move(from);
  }

  inline IssueTaxonomy_Category& operator=(IssueTaxonomy_Category&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const IssueTaxonomy_Category& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const IssueTaxonomy_Category* internal_default_instance() {
    return reinterpret_cast<const IssueTaxonomy_Category*>(
               &_IssueTaxonomy_Category_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    7;

  void Swap(IssueTaxonomy_Category* other);
  friend void swap(IssueTaxonomy_Category& a, IssueTaxonomy_Category& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline IssueTaxonomy_Category* New() const PROTOBUF_FINAL { return New(NULL); }

  IssueTaxonomy_Category* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const IssueTaxonomy_Category& from);
  void MergeFrom(const IssueTaxonomy_Category& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(IssueTaxonomy_Category* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // map<string, .google.cloud.support.common.IssueTaxonomy.Component> components = 2;
  int components_size() const;
  void clear_components();
  static const int kComponentsFieldNumber = 2;
  const ::google::protobuf::Map< ::std::string, ::google::cloud::support::common::IssueTaxonomy_Component >&
      components() const;
  ::google::protobuf::Map< ::std::string, ::google::cloud::support::common::IssueTaxonomy_Component >*
      mutable_components();

  // string display_name = 1;
  void clear_display_name();
  static const int kDisplayNameFieldNumber = 1;
  const ::std::string& display_name() const;
  void set_display_name(const ::std::string& value);
  #if LANG_CXX11
  void set_display_name(::std::string&& value);
  #endif
  void set_display_name(const char* value);
  void set_display_name(const char* value, size_t size);
  ::std::string* mutable_display_name();
  ::std::string* release_display_name();
  void set_allocated_display_name(::std::string* display_name);

  // @@protoc_insertion_point(class_scope:google.cloud.support.common.IssueTaxonomy.Category)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::MapField<
      IssueTaxonomy_Category_ComponentsEntry_DoNotUse,
      ::std::string, ::google::cloud::support::common::IssueTaxonomy_Component,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 > components_;
  ::google::protobuf::internal::ArenaStringPtr display_name_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fcloud_2fsupport_2fcommon_2eproto::TableStruct;
  friend void ::protobuf_google_2fcloud_2fsupport_2fcommon_2eproto::InitDefaultsIssueTaxonomy_CategoryImpl();
};
// -------------------------------------------------------------------

class IssueTaxonomy_CategoriesEntry_DoNotUse : public ::google::protobuf::internal::MapEntry<IssueTaxonomy_CategoriesEntry_DoNotUse, 
    ::std::string, ::google::cloud::support::common::IssueTaxonomy_Category,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
    0 > {
public:
  typedef ::google::protobuf::internal::MapEntry<IssueTaxonomy_CategoriesEntry_DoNotUse, 
    ::std::string, ::google::cloud::support::common::IssueTaxonomy_Category,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
    0 > SuperType;
  IssueTaxonomy_CategoriesEntry_DoNotUse();
  IssueTaxonomy_CategoriesEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const IssueTaxonomy_CategoriesEntry_DoNotUse& other);
  static const IssueTaxonomy_CategoriesEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const IssueTaxonomy_CategoriesEntry_DoNotUse*>(&_IssueTaxonomy_CategoriesEntry_DoNotUse_default_instance_); }
  void MergeFrom(const ::google::protobuf::Message& other) PROTOBUF_FINAL;
  ::google::protobuf::Metadata GetMetadata() const;
};

// -------------------------------------------------------------------

class IssueTaxonomy : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.cloud.support.common.IssueTaxonomy) */ {
 public:
  IssueTaxonomy();
  virtual ~IssueTaxonomy();

  IssueTaxonomy(const IssueTaxonomy& from);

  inline IssueTaxonomy& operator=(const IssueTaxonomy& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  IssueTaxonomy(IssueTaxonomy&& from) noexcept
    : IssueTaxonomy() {
    *this = ::std::move(from);
  }

  inline IssueTaxonomy& operator=(IssueTaxonomy&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const IssueTaxonomy& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const IssueTaxonomy* internal_default_instance() {
    return reinterpret_cast<const IssueTaxonomy*>(
               &_IssueTaxonomy_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    9;

  void Swap(IssueTaxonomy* other);
  friend void swap(IssueTaxonomy& a, IssueTaxonomy& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline IssueTaxonomy* New() const PROTOBUF_FINAL { return New(NULL); }

  IssueTaxonomy* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const IssueTaxonomy& from);
  void MergeFrom(const IssueTaxonomy& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(IssueTaxonomy* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef IssueTaxonomy_Component Component;
  typedef IssueTaxonomy_Category Category;

  // accessors -------------------------------------------------------

  // map<string, .google.cloud.support.common.IssueTaxonomy.Category> categories = 1;
  int categories_size() const;
  void clear_categories();
  static const int kCategoriesFieldNumber = 1;
  const ::google::protobuf::Map< ::std::string, ::google::cloud::support::common::IssueTaxonomy_Category >&
      categories() const;
  ::google::protobuf::Map< ::std::string, ::google::cloud::support::common::IssueTaxonomy_Category >*
      mutable_categories();

  // @@protoc_insertion_point(class_scope:google.cloud.support.common.IssueTaxonomy)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::MapField<
      IssueTaxonomy_CategoriesEntry_DoNotUse,
      ::std::string, ::google::cloud::support::common::IssueTaxonomy_Category,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 > categories_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fcloud_2fsupport_2fcommon_2eproto::TableStruct;
  friend void ::protobuf_google_2fcloud_2fsupport_2fcommon_2eproto::InitDefaultsIssueTaxonomyImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SupportAccount

// string name = 1;
inline void SupportAccount::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SupportAccount::name() const {
  // @@protoc_insertion_point(field_get:google.cloud.support.common.SupportAccount.name)
  return name_.GetNoArena();
}
inline void SupportAccount::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.cloud.support.common.SupportAccount.name)
}
#if LANG_CXX11
inline void SupportAccount::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.support.common.SupportAccount.name)
}
#endif
inline void SupportAccount::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.cloud.support.common.SupportAccount.name)
}
inline void SupportAccount::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.cloud.support.common.SupportAccount.name)
}
inline ::std::string* SupportAccount::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.support.common.SupportAccount.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SupportAccount::release_name() {
  // @@protoc_insertion_point(field_release:google.cloud.support.common.SupportAccount.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SupportAccount::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.support.common.SupportAccount.name)
}

// string account_id = 2;
inline void SupportAccount::clear_account_id() {
  account_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SupportAccount::account_id() const {
  // @@protoc_insertion_point(field_get:google.cloud.support.common.SupportAccount.account_id)
  return account_id_.GetNoArena();
}
inline void SupportAccount::set_account_id(const ::std::string& value) {
  
  account_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.cloud.support.common.SupportAccount.account_id)
}
#if LANG_CXX11
inline void SupportAccount::set_account_id(::std::string&& value) {
  
  account_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.support.common.SupportAccount.account_id)
}
#endif
inline void SupportAccount::set_account_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  account_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.cloud.support.common.SupportAccount.account_id)
}
inline void SupportAccount::set_account_id(const char* value, size_t size) {
  
  account_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.cloud.support.common.SupportAccount.account_id)
}
inline ::std::string* SupportAccount::mutable_account_id() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.support.common.SupportAccount.account_id)
  return account_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SupportAccount::release_account_id() {
  // @@protoc_insertion_point(field_release:google.cloud.support.common.SupportAccount.account_id)
  
  return account_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SupportAccount::set_allocated_account_id(::std::string* account_id) {
  if (account_id != NULL) {
    
  } else {
    
  }
  account_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), account_id);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.support.common.SupportAccount.account_id)
}

// string cloud_resource = 3;
inline void SupportAccount::clear_cloud_resource() {
  cloud_resource_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SupportAccount::cloud_resource() const {
  // @@protoc_insertion_point(field_get:google.cloud.support.common.SupportAccount.cloud_resource)
  return cloud_resource_.GetNoArena();
}
inline void SupportAccount::set_cloud_resource(const ::std::string& value) {
  
  cloud_resource_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.cloud.support.common.SupportAccount.cloud_resource)
}
#if LANG_CXX11
inline void SupportAccount::set_cloud_resource(::std::string&& value) {
  
  cloud_resource_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.support.common.SupportAccount.cloud_resource)
}
#endif
inline void SupportAccount::set_cloud_resource(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  cloud_resource_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.cloud.support.common.SupportAccount.cloud_resource)
}
inline void SupportAccount::set_cloud_resource(const char* value, size_t size) {
  
  cloud_resource_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.cloud.support.common.SupportAccount.cloud_resource)
}
inline ::std::string* SupportAccount::mutable_cloud_resource() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.support.common.SupportAccount.cloud_resource)
  return cloud_resource_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SupportAccount::release_cloud_resource() {
  // @@protoc_insertion_point(field_release:google.cloud.support.common.SupportAccount.cloud_resource)
  
  return cloud_resource_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SupportAccount::set_allocated_cloud_resource(::std::string* cloud_resource) {
  if (cloud_resource != NULL) {
    
  } else {
    
  }
  cloud_resource_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cloud_resource);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.support.common.SupportAccount.cloud_resource)
}

// string display_name = 4;
inline void SupportAccount::clear_display_name() {
  display_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SupportAccount::display_name() const {
  // @@protoc_insertion_point(field_get:google.cloud.support.common.SupportAccount.display_name)
  return display_name_.GetNoArena();
}
inline void SupportAccount::set_display_name(const ::std::string& value) {
  
  display_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.cloud.support.common.SupportAccount.display_name)
}
#if LANG_CXX11
inline void SupportAccount::set_display_name(::std::string&& value) {
  
  display_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.support.common.SupportAccount.display_name)
}
#endif
inline void SupportAccount::set_display_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  display_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.cloud.support.common.SupportAccount.display_name)
}
inline void SupportAccount::set_display_name(const char* value, size_t size) {
  
  display_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.cloud.support.common.SupportAccount.display_name)
}
inline ::std::string* SupportAccount::mutable_display_name() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.support.common.SupportAccount.display_name)
  return display_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SupportAccount::release_display_name() {
  // @@protoc_insertion_point(field_release:google.cloud.support.common.SupportAccount.display_name)
  
  return display_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SupportAccount::set_allocated_display_name(::std::string* display_name) {
  if (display_name != NULL) {
    
  } else {
    
  }
  display_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), display_name);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.support.common.SupportAccount.display_name)
}

// .google.cloud.support.common.SupportAccount.State state = 5;
inline void SupportAccount::clear_state() {
  state_ = 0;
}
inline ::google::cloud::support::common::SupportAccount_State SupportAccount::state() const {
  // @@protoc_insertion_point(field_get:google.cloud.support.common.SupportAccount.state)
  return static_cast< ::google::cloud::support::common::SupportAccount_State >(state_);
}
inline void SupportAccount::set_state(::google::cloud::support::common::SupportAccount_State value) {
  
  state_ = value;
  // @@protoc_insertion_point(field_set:google.cloud.support.common.SupportAccount.state)
}

// .google.protobuf.Timestamp create_time = 6;
inline bool SupportAccount::has_create_time() const {
  return this != internal_default_instance() && create_time_ != NULL;
}
inline const ::google::protobuf::Timestamp& SupportAccount::create_time() const {
  const ::google::protobuf::Timestamp* p = create_time_;
  // @@protoc_insertion_point(field_get:google.cloud.support.common.SupportAccount.create_time)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::Timestamp*>(
      &::google::protobuf::_Timestamp_default_instance_);
}
inline ::google::protobuf::Timestamp* SupportAccount::release_create_time() {
  // @@protoc_insertion_point(field_release:google.cloud.support.common.SupportAccount.create_time)
  
  ::google::protobuf::Timestamp* temp = create_time_;
  create_time_ = NULL;
  return temp;
}
inline ::google::protobuf::Timestamp* SupportAccount::mutable_create_time() {
  
  if (create_time_ == NULL) {
    create_time_ = new ::google::protobuf::Timestamp;
  }
  // @@protoc_insertion_point(field_mutable:google.cloud.support.common.SupportAccount.create_time)
  return create_time_;
}
inline void SupportAccount::set_allocated_create_time(::google::protobuf::Timestamp* create_time) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(create_time_);
  }
  if (create_time) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast< ::google::protobuf::MessageLite*>(create_time)->GetArena();
    if (message_arena != submessage_arena) {
      create_time = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, create_time, submessage_arena);
    }
    
  } else {
    
  }
  create_time_ = create_time;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.support.common.SupportAccount.create_time)
}

// string billing_account_name = 7;
inline void SupportAccount::clear_billing_account_name() {
  billing_account_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SupportAccount::billing_account_name() const {
  // @@protoc_insertion_point(field_get:google.cloud.support.common.SupportAccount.billing_account_name)
  return billing_account_name_.GetNoArena();
}
inline void SupportAccount::set_billing_account_name(const ::std::string& value) {
  
  billing_account_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.cloud.support.common.SupportAccount.billing_account_name)
}
#if LANG_CXX11
inline void SupportAccount::set_billing_account_name(::std::string&& value) {
  
  billing_account_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.support.common.SupportAccount.billing_account_name)
}
#endif
inline void SupportAccount::set_billing_account_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  billing_account_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.cloud.support.common.SupportAccount.billing_account_name)
}
inline void SupportAccount::set_billing_account_name(const char* value, size_t size) {
  
  billing_account_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.cloud.support.common.SupportAccount.billing_account_name)
}
inline ::std::string* SupportAccount::mutable_billing_account_name() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.support.common.SupportAccount.billing_account_name)
  return billing_account_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SupportAccount::release_billing_account_name() {
  // @@protoc_insertion_point(field_release:google.cloud.support.common.SupportAccount.billing_account_name)
  
  return billing_account_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SupportAccount::set_allocated_billing_account_name(::std::string* billing_account_name) {
  if (billing_account_name != NULL) {
    
  } else {
    
  }
  billing_account_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), billing_account_name);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.support.common.SupportAccount.billing_account_name)
}

// string unify_account_id = 8;
inline void SupportAccount::clear_unify_account_id() {
  unify_account_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SupportAccount::unify_account_id() const {
  // @@protoc_insertion_point(field_get:google.cloud.support.common.SupportAccount.unify_account_id)
  return unify_account_id_.GetNoArena();
}
inline void SupportAccount::set_unify_account_id(const ::std::string& value) {
  
  unify_account_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.cloud.support.common.SupportAccount.unify_account_id)
}
#if LANG_CXX11
inline void SupportAccount::set_unify_account_id(::std::string&& value) {
  
  unify_account_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.support.common.SupportAccount.unify_account_id)
}
#endif
inline void SupportAccount::set_unify_account_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  unify_account_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.cloud.support.common.SupportAccount.unify_account_id)
}
inline void SupportAccount::set_unify_account_id(const char* value, size_t size) {
  
  unify_account_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.cloud.support.common.SupportAccount.unify_account_id)
}
inline ::std::string* SupportAccount::mutable_unify_account_id() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.support.common.SupportAccount.unify_account_id)
  return unify_account_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SupportAccount::release_unify_account_id() {
  // @@protoc_insertion_point(field_release:google.cloud.support.common.SupportAccount.unify_account_id)
  
  return unify_account_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SupportAccount::set_allocated_unify_account_id(::std::string* unify_account_id) {
  if (unify_account_id != NULL) {
    
  } else {
    
  }
  unify_account_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), unify_account_id);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.support.common.SupportAccount.unify_account_id)
}

// .google.cloud.support.common.SupportAccount.PricingModel pricing_model = 9;
inline void SupportAccount::clear_pricing_model() {
  pricing_model_ = 0;
}
inline ::google::cloud::support::common::SupportAccount_PricingModel SupportAccount::pricing_model() const {
  // @@protoc_insertion_point(field_get:google.cloud.support.common.SupportAccount.pricing_model)
  return static_cast< ::google::cloud::support::common::SupportAccount_PricingModel >(pricing_model_);
}
inline void SupportAccount::set_pricing_model(::google::cloud::support::common::SupportAccount_PricingModel value) {
  
  pricing_model_ = value;
  // @@protoc_insertion_point(field_set:google.cloud.support.common.SupportAccount.pricing_model)
}

// -------------------------------------------------------------------

// Case

// string name = 1;
inline void Case::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Case::name() const {
  // @@protoc_insertion_point(field_get:google.cloud.support.common.Case.name)
  return name_.GetNoArena();
}
inline void Case::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.cloud.support.common.Case.name)
}
#if LANG_CXX11
inline void Case::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.support.common.Case.name)
}
#endif
inline void Case::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.cloud.support.common.Case.name)
}
inline void Case::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.cloud.support.common.Case.name)
}
inline ::std::string* Case::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.support.common.Case.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Case::release_name() {
  // @@protoc_insertion_point(field_release:google.cloud.support.common.Case.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Case::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.support.common.Case.name)
}

// string display_name = 2;
inline void Case::clear_display_name() {
  display_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Case::display_name() const {
  // @@protoc_insertion_point(field_get:google.cloud.support.common.Case.display_name)
  return display_name_.GetNoArena();
}
inline void Case::set_display_name(const ::std::string& value) {
  
  display_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.cloud.support.common.Case.display_name)
}
#if LANG_CXX11
inline void Case::set_display_name(::std::string&& value) {
  
  display_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.support.common.Case.display_name)
}
#endif
inline void Case::set_display_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  display_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.cloud.support.common.Case.display_name)
}
inline void Case::set_display_name(const char* value, size_t size) {
  
  display_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.cloud.support.common.Case.display_name)
}
inline ::std::string* Case::mutable_display_name() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.support.common.Case.display_name)
  return display_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Case::release_display_name() {
  // @@protoc_insertion_point(field_release:google.cloud.support.common.Case.display_name)
  
  return display_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Case::set_allocated_display_name(::std::string* display_name) {
  if (display_name != NULL) {
    
  } else {
    
  }
  display_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), display_name);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.support.common.Case.display_name)
}

// string description = 3;
inline void Case::clear_description() {
  description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Case::description() const {
  // @@protoc_insertion_point(field_get:google.cloud.support.common.Case.description)
  return description_.GetNoArena();
}
inline void Case::set_description(const ::std::string& value) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.cloud.support.common.Case.description)
}
#if LANG_CXX11
inline void Case::set_description(::std::string&& value) {
  
  description_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.support.common.Case.description)
}
#endif
inline void Case::set_description(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.cloud.support.common.Case.description)
}
inline void Case::set_description(const char* value, size_t size) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.cloud.support.common.Case.description)
}
inline ::std::string* Case::mutable_description() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.support.common.Case.description)
  return description_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Case::release_description() {
  // @@protoc_insertion_point(field_release:google.cloud.support.common.Case.description)
  
  return description_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Case::set_allocated_description(::std::string* description) {
  if (description != NULL) {
    
  } else {
    
  }
  description_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.support.common.Case.description)
}

// string component = 4;
inline void Case::clear_component() {
  component_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Case::component() const {
  // @@protoc_insertion_point(field_get:google.cloud.support.common.Case.component)
  return component_.GetNoArena();
}
inline void Case::set_component(const ::std::string& value) {
  
  component_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.cloud.support.common.Case.component)
}
#if LANG_CXX11
inline void Case::set_component(::std::string&& value) {
  
  component_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.support.common.Case.component)
}
#endif
inline void Case::set_component(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  component_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.cloud.support.common.Case.component)
}
inline void Case::set_component(const char* value, size_t size) {
  
  component_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.cloud.support.common.Case.component)
}
inline ::std::string* Case::mutable_component() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.support.common.Case.component)
  return component_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Case::release_component() {
  // @@protoc_insertion_point(field_release:google.cloud.support.common.Case.component)
  
  return component_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Case::set_allocated_component(::std::string* component) {
  if (component != NULL) {
    
  } else {
    
  }
  component_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), component);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.support.common.Case.component)
}

// string subcomponent = 5;
inline void Case::clear_subcomponent() {
  subcomponent_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Case::subcomponent() const {
  // @@protoc_insertion_point(field_get:google.cloud.support.common.Case.subcomponent)
  return subcomponent_.GetNoArena();
}
inline void Case::set_subcomponent(const ::std::string& value) {
  
  subcomponent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.cloud.support.common.Case.subcomponent)
}
#if LANG_CXX11
inline void Case::set_subcomponent(::std::string&& value) {
  
  subcomponent_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.support.common.Case.subcomponent)
}
#endif
inline void Case::set_subcomponent(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  subcomponent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.cloud.support.common.Case.subcomponent)
}
inline void Case::set_subcomponent(const char* value, size_t size) {
  
  subcomponent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.cloud.support.common.Case.subcomponent)
}
inline ::std::string* Case::mutable_subcomponent() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.support.common.Case.subcomponent)
  return subcomponent_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Case::release_subcomponent() {
  // @@protoc_insertion_point(field_release:google.cloud.support.common.Case.subcomponent)
  
  return subcomponent_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Case::set_allocated_subcomponent(::std::string* subcomponent) {
  if (subcomponent != NULL) {
    
  } else {
    
  }
  subcomponent_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), subcomponent);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.support.common.Case.subcomponent)
}

// string client_timezone = 6;
inline void Case::clear_client_timezone() {
  client_timezone_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Case::client_timezone() const {
  // @@protoc_insertion_point(field_get:google.cloud.support.common.Case.client_timezone)
  return client_timezone_.GetNoArena();
}
inline void Case::set_client_timezone(const ::std::string& value) {
  
  client_timezone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.cloud.support.common.Case.client_timezone)
}
#if LANG_CXX11
inline void Case::set_client_timezone(::std::string&& value) {
  
  client_timezone_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.support.common.Case.client_timezone)
}
#endif
inline void Case::set_client_timezone(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  client_timezone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.cloud.support.common.Case.client_timezone)
}
inline void Case::set_client_timezone(const char* value, size_t size) {
  
  client_timezone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.cloud.support.common.Case.client_timezone)
}
inline ::std::string* Case::mutable_client_timezone() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.support.common.Case.client_timezone)
  return client_timezone_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Case::release_client_timezone() {
  // @@protoc_insertion_point(field_release:google.cloud.support.common.Case.client_timezone)
  
  return client_timezone_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Case::set_allocated_client_timezone(::std::string* client_timezone) {
  if (client_timezone != NULL) {
    
  } else {
    
  }
  client_timezone_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), client_timezone);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.support.common.Case.client_timezone)
}

// repeated string cc_addresses = 7;
inline int Case::cc_addresses_size() const {
  return cc_addresses_.size();
}
inline void Case::clear_cc_addresses() {
  cc_addresses_.Clear();
}
inline const ::std::string& Case::cc_addresses(int index) const {
  // @@protoc_insertion_point(field_get:google.cloud.support.common.Case.cc_addresses)
  return cc_addresses_.Get(index);
}
inline ::std::string* Case::mutable_cc_addresses(int index) {
  // @@protoc_insertion_point(field_mutable:google.cloud.support.common.Case.cc_addresses)
  return cc_addresses_.Mutable(index);
}
inline void Case::set_cc_addresses(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:google.cloud.support.common.Case.cc_addresses)
  cc_addresses_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void Case::set_cc_addresses(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:google.cloud.support.common.Case.cc_addresses)
  cc_addresses_.Mutable(index)->assign(std::move(value));
}
#endif
inline void Case::set_cc_addresses(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  cc_addresses_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:google.cloud.support.common.Case.cc_addresses)
}
inline void Case::set_cc_addresses(int index, const char* value, size_t size) {
  cc_addresses_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:google.cloud.support.common.Case.cc_addresses)
}
inline ::std::string* Case::add_cc_addresses() {
  // @@protoc_insertion_point(field_add_mutable:google.cloud.support.common.Case.cc_addresses)
  return cc_addresses_.Add();
}
inline void Case::add_cc_addresses(const ::std::string& value) {
  cc_addresses_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:google.cloud.support.common.Case.cc_addresses)
}
#if LANG_CXX11
inline void Case::add_cc_addresses(::std::string&& value) {
  cc_addresses_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:google.cloud.support.common.Case.cc_addresses)
}
#endif
inline void Case::add_cc_addresses(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  cc_addresses_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:google.cloud.support.common.Case.cc_addresses)
}
inline void Case::add_cc_addresses(const char* value, size_t size) {
  cc_addresses_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:google.cloud.support.common.Case.cc_addresses)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Case::cc_addresses() const {
  // @@protoc_insertion_point(field_list:google.cloud.support.common.Case.cc_addresses)
  return cc_addresses_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Case::mutable_cc_addresses() {
  // @@protoc_insertion_point(field_mutable_list:google.cloud.support.common.Case.cc_addresses)
  return &cc_addresses_;
}

// string project_id = 8;
inline void Case::clear_project_id() {
  project_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Case::project_id() const {
  // @@protoc_insertion_point(field_get:google.cloud.support.common.Case.project_id)
  return project_id_.GetNoArena();
}
inline void Case::set_project_id(const ::std::string& value) {
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.cloud.support.common.Case.project_id)
}
#if LANG_CXX11
inline void Case::set_project_id(::std::string&& value) {
  
  project_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.support.common.Case.project_id)
}
#endif
inline void Case::set_project_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.cloud.support.common.Case.project_id)
}
inline void Case::set_project_id(const char* value, size_t size) {
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.cloud.support.common.Case.project_id)
}
inline ::std::string* Case::mutable_project_id() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.support.common.Case.project_id)
  return project_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Case::release_project_id() {
  // @@protoc_insertion_point(field_release:google.cloud.support.common.Case.project_id)
  
  return project_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Case::set_allocated_project_id(::std::string* project_id) {
  if (project_id != NULL) {
    
  } else {
    
  }
  project_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), project_id);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.support.common.Case.project_id)
}

// repeated .google.cloud.support.common.CustomerIssue issues = 10;
inline int Case::issues_size() const {
  return issues_.size();
}
inline void Case::clear_issues() {
  issues_.Clear();
}
inline const ::google::cloud::support::common::CustomerIssue& Case::issues(int index) const {
  // @@protoc_insertion_point(field_get:google.cloud.support.common.Case.issues)
  return issues_.Get(index);
}
inline ::google::cloud::support::common::CustomerIssue* Case::mutable_issues(int index) {
  // @@protoc_insertion_point(field_mutable:google.cloud.support.common.Case.issues)
  return issues_.Mutable(index);
}
inline ::google::cloud::support::common::CustomerIssue* Case::add_issues() {
  // @@protoc_insertion_point(field_add:google.cloud.support.common.Case.issues)
  return issues_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::google::cloud::support::common::CustomerIssue >*
Case::mutable_issues() {
  // @@protoc_insertion_point(field_mutable_list:google.cloud.support.common.Case.issues)
  return &issues_;
}
inline const ::google::protobuf::RepeatedPtrField< ::google::cloud::support::common::CustomerIssue >&
Case::issues() const {
  // @@protoc_insertion_point(field_list:google.cloud.support.common.Case.issues)
  return issues_;
}

// .google.cloud.support.common.Case.Priority priority = 11;
inline void Case::clear_priority() {
  priority_ = 0;
}
inline ::google::cloud::support::common::Case_Priority Case::priority() const {
  // @@protoc_insertion_point(field_get:google.cloud.support.common.Case.priority)
  return static_cast< ::google::cloud::support::common::Case_Priority >(priority_);
}
inline void Case::set_priority(::google::cloud::support::common::Case_Priority value) {
  
  priority_ = value;
  // @@protoc_insertion_point(field_set:google.cloud.support.common.Case.priority)
}

// .google.cloud.support.common.Case.State state = 12;
inline void Case::clear_state() {
  state_ = 0;
}
inline ::google::cloud::support::common::Case_State Case::state() const {
  // @@protoc_insertion_point(field_get:google.cloud.support.common.Case.state)
  return static_cast< ::google::cloud::support::common::Case_State >(state_);
}
inline void Case::set_state(::google::cloud::support::common::Case_State value) {
  
  state_ = value;
  // @@protoc_insertion_point(field_set:google.cloud.support.common.Case.state)
}

// .google.protobuf.Timestamp create_time = 13;
inline bool Case::has_create_time() const {
  return this != internal_default_instance() && create_time_ != NULL;
}
inline const ::google::protobuf::Timestamp& Case::create_time() const {
  const ::google::protobuf::Timestamp* p = create_time_;
  // @@protoc_insertion_point(field_get:google.cloud.support.common.Case.create_time)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::Timestamp*>(
      &::google::protobuf::_Timestamp_default_instance_);
}
inline ::google::protobuf::Timestamp* Case::release_create_time() {
  // @@protoc_insertion_point(field_release:google.cloud.support.common.Case.create_time)
  
  ::google::protobuf::Timestamp* temp = create_time_;
  create_time_ = NULL;
  return temp;
}
inline ::google::protobuf::Timestamp* Case::mutable_create_time() {
  
  if (create_time_ == NULL) {
    create_time_ = new ::google::protobuf::Timestamp;
  }
  // @@protoc_insertion_point(field_mutable:google.cloud.support.common.Case.create_time)
  return create_time_;
}
inline void Case::set_allocated_create_time(::google::protobuf::Timestamp* create_time) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(create_time_);
  }
  if (create_time) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast< ::google::protobuf::MessageLite*>(create_time)->GetArena();
    if (message_arena != submessage_arena) {
      create_time = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, create_time, submessage_arena);
    }
    
  } else {
    
  }
  create_time_ = create_time;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.support.common.Case.create_time)
}

// .google.protobuf.Timestamp update_time = 14;
inline bool Case::has_update_time() const {
  return this != internal_default_instance() && update_time_ != NULL;
}
inline const ::google::protobuf::Timestamp& Case::update_time() const {
  const ::google::protobuf::Timestamp* p = update_time_;
  // @@protoc_insertion_point(field_get:google.cloud.support.common.Case.update_time)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::Timestamp*>(
      &::google::protobuf::_Timestamp_default_instance_);
}
inline ::google::protobuf::Timestamp* Case::release_update_time() {
  // @@protoc_insertion_point(field_release:google.cloud.support.common.Case.update_time)
  
  ::google::protobuf::Timestamp* temp = update_time_;
  update_time_ = NULL;
  return temp;
}
inline ::google::protobuf::Timestamp* Case::mutable_update_time() {
  
  if (update_time_ == NULL) {
    update_time_ = new ::google::protobuf::Timestamp;
  }
  // @@protoc_insertion_point(field_mutable:google.cloud.support.common.Case.update_time)
  return update_time_;
}
inline void Case::set_allocated_update_time(::google::protobuf::Timestamp* update_time) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(update_time_);
  }
  if (update_time) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast< ::google::protobuf::MessageLite*>(update_time)->GetArena();
    if (message_arena != submessage_arena) {
      update_time = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, update_time, submessage_arena);
    }
    
  } else {
    
  }
  update_time_ = update_time;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.support.common.Case.update_time)
}

// string creator_email = 15;
inline void Case::clear_creator_email() {
  creator_email_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Case::creator_email() const {
  // @@protoc_insertion_point(field_get:google.cloud.support.common.Case.creator_email)
  return creator_email_.GetNoArena();
}
inline void Case::set_creator_email(const ::std::string& value) {
  
  creator_email_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.cloud.support.common.Case.creator_email)
}
#if LANG_CXX11
inline void Case::set_creator_email(::std::string&& value) {
  
  creator_email_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.support.common.Case.creator_email)
}
#endif
inline void Case::set_creator_email(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  creator_email_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.cloud.support.common.Case.creator_email)
}
inline void Case::set_creator_email(const char* value, size_t size) {
  
  creator_email_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.cloud.support.common.Case.creator_email)
}
inline ::std::string* Case::mutable_creator_email() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.support.common.Case.creator_email)
  return creator_email_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Case::release_creator_email() {
  // @@protoc_insertion_point(field_release:google.cloud.support.common.Case.creator_email)
  
  return creator_email_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Case::set_allocated_creator_email(::std::string* creator_email) {
  if (creator_email != NULL) {
    
  } else {
    
  }
  creator_email_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), creator_email);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.support.common.Case.creator_email)
}

// string category = 16;
inline void Case::clear_category() {
  category_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Case::category() const {
  // @@protoc_insertion_point(field_get:google.cloud.support.common.Case.category)
  return category_.GetNoArena();
}
inline void Case::set_category(const ::std::string& value) {
  
  category_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.cloud.support.common.Case.category)
}
#if LANG_CXX11
inline void Case::set_category(::std::string&& value) {
  
  category_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.support.common.Case.category)
}
#endif
inline void Case::set_category(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  category_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.cloud.support.common.Case.category)
}
inline void Case::set_category(const char* value, size_t size) {
  
  category_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.cloud.support.common.Case.category)
}
inline ::std::string* Case::mutable_category() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.support.common.Case.category)
  return category_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Case::release_category() {
  // @@protoc_insertion_point(field_release:google.cloud.support.common.Case.category)
  
  return category_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Case::set_allocated_category(::std::string* category) {
  if (category != NULL) {
    
  } else {
    
  }
  category_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), category);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.support.common.Case.category)
}

// -------------------------------------------------------------------

// CustomerIssue

// string issue_id = 1;
inline void CustomerIssue::clear_issue_id() {
  issue_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CustomerIssue::issue_id() const {
  // @@protoc_insertion_point(field_get:google.cloud.support.common.CustomerIssue.issue_id)
  return issue_id_.GetNoArena();
}
inline void CustomerIssue::set_issue_id(const ::std::string& value) {
  
  issue_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.cloud.support.common.CustomerIssue.issue_id)
}
#if LANG_CXX11
inline void CustomerIssue::set_issue_id(::std::string&& value) {
  
  issue_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.support.common.CustomerIssue.issue_id)
}
#endif
inline void CustomerIssue::set_issue_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  issue_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.cloud.support.common.CustomerIssue.issue_id)
}
inline void CustomerIssue::set_issue_id(const char* value, size_t size) {
  
  issue_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.cloud.support.common.CustomerIssue.issue_id)
}
inline ::std::string* CustomerIssue::mutable_issue_id() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.support.common.CustomerIssue.issue_id)
  return issue_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CustomerIssue::release_issue_id() {
  // @@protoc_insertion_point(field_release:google.cloud.support.common.CustomerIssue.issue_id)
  
  return issue_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CustomerIssue::set_allocated_issue_id(::std::string* issue_id) {
  if (issue_id != NULL) {
    
  } else {
    
  }
  issue_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), issue_id);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.support.common.CustomerIssue.issue_id)
}

// .google.cloud.support.common.CustomerIssue.IssueState state = 2;
inline void CustomerIssue::clear_state() {
  state_ = 0;
}
inline ::google::cloud::support::common::CustomerIssue_IssueState CustomerIssue::state() const {
  // @@protoc_insertion_point(field_get:google.cloud.support.common.CustomerIssue.state)
  return static_cast< ::google::cloud::support::common::CustomerIssue_IssueState >(state_);
}
inline void CustomerIssue::set_state(::google::cloud::support::common::CustomerIssue_IssueState value) {
  
  state_ = value;
  // @@protoc_insertion_point(field_set:google.cloud.support.common.CustomerIssue.state)
}

// .google.protobuf.Timestamp create_time = 3;
inline bool CustomerIssue::has_create_time() const {
  return this != internal_default_instance() && create_time_ != NULL;
}
inline const ::google::protobuf::Timestamp& CustomerIssue::create_time() const {
  const ::google::protobuf::Timestamp* p = create_time_;
  // @@protoc_insertion_point(field_get:google.cloud.support.common.CustomerIssue.create_time)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::Timestamp*>(
      &::google::protobuf::_Timestamp_default_instance_);
}
inline ::google::protobuf::Timestamp* CustomerIssue::release_create_time() {
  // @@protoc_insertion_point(field_release:google.cloud.support.common.CustomerIssue.create_time)
  
  ::google::protobuf::Timestamp* temp = create_time_;
  create_time_ = NULL;
  return temp;
}
inline ::google::protobuf::Timestamp* CustomerIssue::mutable_create_time() {
  
  if (create_time_ == NULL) {
    create_time_ = new ::google::protobuf::Timestamp;
  }
  // @@protoc_insertion_point(field_mutable:google.cloud.support.common.CustomerIssue.create_time)
  return create_time_;
}
inline void CustomerIssue::set_allocated_create_time(::google::protobuf::Timestamp* create_time) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(create_time_);
  }
  if (create_time) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast< ::google::protobuf::MessageLite*>(create_time)->GetArena();
    if (message_arena != submessage_arena) {
      create_time = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, create_time, submessage_arena);
    }
    
  } else {
    
  }
  create_time_ = create_time;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.support.common.CustomerIssue.create_time)
}

// .google.protobuf.Timestamp resolve_time = 4;
inline bool CustomerIssue::has_resolve_time() const {
  return this != internal_default_instance() && resolve_time_ != NULL;
}
inline const ::google::protobuf::Timestamp& CustomerIssue::resolve_time() const {
  const ::google::protobuf::Timestamp* p = resolve_time_;
  // @@protoc_insertion_point(field_get:google.cloud.support.common.CustomerIssue.resolve_time)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::Timestamp*>(
      &::google::protobuf::_Timestamp_default_instance_);
}
inline ::google::protobuf::Timestamp* CustomerIssue::release_resolve_time() {
  // @@protoc_insertion_point(field_release:google.cloud.support.common.CustomerIssue.resolve_time)
  
  ::google::protobuf::Timestamp* temp = resolve_time_;
  resolve_time_ = NULL;
  return temp;
}
inline ::google::protobuf::Timestamp* CustomerIssue::mutable_resolve_time() {
  
  if (resolve_time_ == NULL) {
    resolve_time_ = new ::google::protobuf::Timestamp;
  }
  // @@protoc_insertion_point(field_mutable:google.cloud.support.common.CustomerIssue.resolve_time)
  return resolve_time_;
}
inline void CustomerIssue::set_allocated_resolve_time(::google::protobuf::Timestamp* resolve_time) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(resolve_time_);
  }
  if (resolve_time) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast< ::google::protobuf::MessageLite*>(resolve_time)->GetArena();
    if (message_arena != submessage_arena) {
      resolve_time = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, resolve_time, submessage_arena);
    }
    
  } else {
    
  }
  resolve_time_ = resolve_time;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.support.common.CustomerIssue.resolve_time)
}

// .google.protobuf.Timestamp update_time = 5;
inline bool CustomerIssue::has_update_time() const {
  return this != internal_default_instance() && update_time_ != NULL;
}
inline const ::google::protobuf::Timestamp& CustomerIssue::update_time() const {
  const ::google::protobuf::Timestamp* p = update_time_;
  // @@protoc_insertion_point(field_get:google.cloud.support.common.CustomerIssue.update_time)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::Timestamp*>(
      &::google::protobuf::_Timestamp_default_instance_);
}
inline ::google::protobuf::Timestamp* CustomerIssue::release_update_time() {
  // @@protoc_insertion_point(field_release:google.cloud.support.common.CustomerIssue.update_time)
  
  ::google::protobuf::Timestamp* temp = update_time_;
  update_time_ = NULL;
  return temp;
}
inline ::google::protobuf::Timestamp* CustomerIssue::mutable_update_time() {
  
  if (update_time_ == NULL) {
    update_time_ = new ::google::protobuf::Timestamp;
  }
  // @@protoc_insertion_point(field_mutable:google.cloud.support.common.CustomerIssue.update_time)
  return update_time_;
}
inline void CustomerIssue::set_allocated_update_time(::google::protobuf::Timestamp* update_time) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(update_time_);
  }
  if (update_time) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast< ::google::protobuf::MessageLite*>(update_time)->GetArena();
    if (message_arena != submessage_arena) {
      update_time = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, update_time, submessage_arena);
    }
    
  } else {
    
  }
  update_time_ = update_time;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.support.common.CustomerIssue.update_time)
}

// -------------------------------------------------------------------

// SupportRole

// string email = 1;
inline void SupportRole::clear_email() {
  email_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SupportRole::email() const {
  // @@protoc_insertion_point(field_get:google.cloud.support.common.SupportRole.email)
  return email_.GetNoArena();
}
inline void SupportRole::set_email(const ::std::string& value) {
  
  email_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.cloud.support.common.SupportRole.email)
}
#if LANG_CXX11
inline void SupportRole::set_email(::std::string&& value) {
  
  email_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.support.common.SupportRole.email)
}
#endif
inline void SupportRole::set_email(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  email_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.cloud.support.common.SupportRole.email)
}
inline void SupportRole::set_email(const char* value, size_t size) {
  
  email_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.cloud.support.common.SupportRole.email)
}
inline ::std::string* SupportRole::mutable_email() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.support.common.SupportRole.email)
  return email_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SupportRole::release_email() {
  // @@protoc_insertion_point(field_release:google.cloud.support.common.SupportRole.email)
  
  return email_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SupportRole::set_allocated_email(::std::string* email) {
  if (email != NULL) {
    
  } else {
    
  }
  email_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), email);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.support.common.SupportRole.email)
}

// .google.cloud.support.common.SupportRole.Role role = 2;
inline void SupportRole::clear_role() {
  role_ = 0;
}
inline ::google::cloud::support::common::SupportRole_Role SupportRole::role() const {
  // @@protoc_insertion_point(field_get:google.cloud.support.common.SupportRole.role)
  return static_cast< ::google::cloud::support::common::SupportRole_Role >(role_);
}
inline void SupportRole::set_role(::google::cloud::support::common::SupportRole_Role value) {
  
  role_ = value;
  // @@protoc_insertion_point(field_set:google.cloud.support.common.SupportRole.role)
}

// -------------------------------------------------------------------

// Comment

// string text = 1;
inline void Comment::clear_text() {
  text_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Comment::text() const {
  // @@protoc_insertion_point(field_get:google.cloud.support.common.Comment.text)
  return text_.GetNoArena();
}
inline void Comment::set_text(const ::std::string& value) {
  
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.cloud.support.common.Comment.text)
}
#if LANG_CXX11
inline void Comment::set_text(::std::string&& value) {
  
  text_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.support.common.Comment.text)
}
#endif
inline void Comment::set_text(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.cloud.support.common.Comment.text)
}
inline void Comment::set_text(const char* value, size_t size) {
  
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.cloud.support.common.Comment.text)
}
inline ::std::string* Comment::mutable_text() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.support.common.Comment.text)
  return text_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Comment::release_text() {
  // @@protoc_insertion_point(field_release:google.cloud.support.common.Comment.text)
  
  return text_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Comment::set_allocated_text(::std::string* text) {
  if (text != NULL) {
    
  } else {
    
  }
  text_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), text);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.support.common.Comment.text)
}

// .google.protobuf.Timestamp create_time = 2;
inline bool Comment::has_create_time() const {
  return this != internal_default_instance() && create_time_ != NULL;
}
inline const ::google::protobuf::Timestamp& Comment::create_time() const {
  const ::google::protobuf::Timestamp* p = create_time_;
  // @@protoc_insertion_point(field_get:google.cloud.support.common.Comment.create_time)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::Timestamp*>(
      &::google::protobuf::_Timestamp_default_instance_);
}
inline ::google::protobuf::Timestamp* Comment::release_create_time() {
  // @@protoc_insertion_point(field_release:google.cloud.support.common.Comment.create_time)
  
  ::google::protobuf::Timestamp* temp = create_time_;
  create_time_ = NULL;
  return temp;
}
inline ::google::protobuf::Timestamp* Comment::mutable_create_time() {
  
  if (create_time_ == NULL) {
    create_time_ = new ::google::protobuf::Timestamp;
  }
  // @@protoc_insertion_point(field_mutable:google.cloud.support.common.Comment.create_time)
  return create_time_;
}
inline void Comment::set_allocated_create_time(::google::protobuf::Timestamp* create_time) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(create_time_);
  }
  if (create_time) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast< ::google::protobuf::MessageLite*>(create_time)->GetArena();
    if (message_arena != submessage_arena) {
      create_time = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, create_time, submessage_arena);
    }
    
  } else {
    
  }
  create_time_ = create_time;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.support.common.Comment.create_time)
}

// string author = 3;
inline void Comment::clear_author() {
  author_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Comment::author() const {
  // @@protoc_insertion_point(field_get:google.cloud.support.common.Comment.author)
  return author_.GetNoArena();
}
inline void Comment::set_author(const ::std::string& value) {
  
  author_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.cloud.support.common.Comment.author)
}
#if LANG_CXX11
inline void Comment::set_author(::std::string&& value) {
  
  author_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.support.common.Comment.author)
}
#endif
inline void Comment::set_author(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  author_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.cloud.support.common.Comment.author)
}
inline void Comment::set_author(const char* value, size_t size) {
  
  author_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.cloud.support.common.Comment.author)
}
inline ::std::string* Comment::mutable_author() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.support.common.Comment.author)
  return author_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Comment::release_author() {
  // @@protoc_insertion_point(field_release:google.cloud.support.common.Comment.author)
  
  return author_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Comment::set_allocated_author(::std::string* author) {
  if (author != NULL) {
    
  } else {
    
  }
  author_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), author);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.support.common.Comment.author)
}

// string name = 4;
inline void Comment::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Comment::name() const {
  // @@protoc_insertion_point(field_get:google.cloud.support.common.Comment.name)
  return name_.GetNoArena();
}
inline void Comment::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.cloud.support.common.Comment.name)
}
#if LANG_CXX11
inline void Comment::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.support.common.Comment.name)
}
#endif
inline void Comment::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.cloud.support.common.Comment.name)
}
inline void Comment::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.cloud.support.common.Comment.name)
}
inline ::std::string* Comment::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.support.common.Comment.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Comment::release_name() {
  // @@protoc_insertion_point(field_release:google.cloud.support.common.Comment.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Comment::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.support.common.Comment.name)
}

// -------------------------------------------------------------------

// IssueTaxonomy_Component

// string display_name = 1;
inline void IssueTaxonomy_Component::clear_display_name() {
  display_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& IssueTaxonomy_Component::display_name() const {
  // @@protoc_insertion_point(field_get:google.cloud.support.common.IssueTaxonomy.Component.display_name)
  return display_name_.GetNoArena();
}
inline void IssueTaxonomy_Component::set_display_name(const ::std::string& value) {
  
  display_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.cloud.support.common.IssueTaxonomy.Component.display_name)
}
#if LANG_CXX11
inline void IssueTaxonomy_Component::set_display_name(::std::string&& value) {
  
  display_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.support.common.IssueTaxonomy.Component.display_name)
}
#endif
inline void IssueTaxonomy_Component::set_display_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  display_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.cloud.support.common.IssueTaxonomy.Component.display_name)
}
inline void IssueTaxonomy_Component::set_display_name(const char* value, size_t size) {
  
  display_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.cloud.support.common.IssueTaxonomy.Component.display_name)
}
inline ::std::string* IssueTaxonomy_Component::mutable_display_name() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.support.common.IssueTaxonomy.Component.display_name)
  return display_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* IssueTaxonomy_Component::release_display_name() {
  // @@protoc_insertion_point(field_release:google.cloud.support.common.IssueTaxonomy.Component.display_name)
  
  return display_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IssueTaxonomy_Component::set_allocated_display_name(::std::string* display_name) {
  if (display_name != NULL) {
    
  } else {
    
  }
  display_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), display_name);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.support.common.IssueTaxonomy.Component.display_name)
}

// repeated string languages = 2;
inline int IssueTaxonomy_Component::languages_size() const {
  return languages_.size();
}
inline void IssueTaxonomy_Component::clear_languages() {
  languages_.Clear();
}
inline const ::std::string& IssueTaxonomy_Component::languages(int index) const {
  // @@protoc_insertion_point(field_get:google.cloud.support.common.IssueTaxonomy.Component.languages)
  return languages_.Get(index);
}
inline ::std::string* IssueTaxonomy_Component::mutable_languages(int index) {
  // @@protoc_insertion_point(field_mutable:google.cloud.support.common.IssueTaxonomy.Component.languages)
  return languages_.Mutable(index);
}
inline void IssueTaxonomy_Component::set_languages(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:google.cloud.support.common.IssueTaxonomy.Component.languages)
  languages_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void IssueTaxonomy_Component::set_languages(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:google.cloud.support.common.IssueTaxonomy.Component.languages)
  languages_.Mutable(index)->assign(std::move(value));
}
#endif
inline void IssueTaxonomy_Component::set_languages(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  languages_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:google.cloud.support.common.IssueTaxonomy.Component.languages)
}
inline void IssueTaxonomy_Component::set_languages(int index, const char* value, size_t size) {
  languages_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:google.cloud.support.common.IssueTaxonomy.Component.languages)
}
inline ::std::string* IssueTaxonomy_Component::add_languages() {
  // @@protoc_insertion_point(field_add_mutable:google.cloud.support.common.IssueTaxonomy.Component.languages)
  return languages_.Add();
}
inline void IssueTaxonomy_Component::add_languages(const ::std::string& value) {
  languages_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:google.cloud.support.common.IssueTaxonomy.Component.languages)
}
#if LANG_CXX11
inline void IssueTaxonomy_Component::add_languages(::std::string&& value) {
  languages_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:google.cloud.support.common.IssueTaxonomy.Component.languages)
}
#endif
inline void IssueTaxonomy_Component::add_languages(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  languages_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:google.cloud.support.common.IssueTaxonomy.Component.languages)
}
inline void IssueTaxonomy_Component::add_languages(const char* value, size_t size) {
  languages_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:google.cloud.support.common.IssueTaxonomy.Component.languages)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
IssueTaxonomy_Component::languages() const {
  // @@protoc_insertion_point(field_list:google.cloud.support.common.IssueTaxonomy.Component.languages)
  return languages_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
IssueTaxonomy_Component::mutable_languages() {
  // @@protoc_insertion_point(field_mutable_list:google.cloud.support.common.IssueTaxonomy.Component.languages)
  return &languages_;
}

// string template = 3;
inline void IssueTaxonomy_Component::clear_template_() {
  template__.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& IssueTaxonomy_Component::template_() const {
  // @@protoc_insertion_point(field_get:google.cloud.support.common.IssueTaxonomy.Component.template)
  return template__.GetNoArena();
}
inline void IssueTaxonomy_Component::set_template_(const ::std::string& value) {
  
  template__.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.cloud.support.common.IssueTaxonomy.Component.template)
}
#if LANG_CXX11
inline void IssueTaxonomy_Component::set_template_(::std::string&& value) {
  
  template__.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.support.common.IssueTaxonomy.Component.template)
}
#endif
inline void IssueTaxonomy_Component::set_template_(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  template__.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.cloud.support.common.IssueTaxonomy.Component.template)
}
inline void IssueTaxonomy_Component::set_template_(const char* value, size_t size) {
  
  template__.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.cloud.support.common.IssueTaxonomy.Component.template)
}
inline ::std::string* IssueTaxonomy_Component::mutable_template_() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.support.common.IssueTaxonomy.Component.template)
  return template__.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* IssueTaxonomy_Component::release_template_() {
  // @@protoc_insertion_point(field_release:google.cloud.support.common.IssueTaxonomy.Component.template)
  
  return template__.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IssueTaxonomy_Component::set_allocated_template_(::std::string* template_) {
  if (template_ != NULL) {
    
  } else {
    
  }
  template__.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), template_);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.support.common.IssueTaxonomy.Component.template)
}

// repeated .google.cloud.support.common.IssueTaxonomy.Component subcomponents = 4;
inline int IssueTaxonomy_Component::subcomponents_size() const {
  return subcomponents_.size();
}
inline void IssueTaxonomy_Component::clear_subcomponents() {
  subcomponents_.Clear();
}
inline const ::google::cloud::support::common::IssueTaxonomy_Component& IssueTaxonomy_Component::subcomponents(int index) const {
  // @@protoc_insertion_point(field_get:google.cloud.support.common.IssueTaxonomy.Component.subcomponents)
  return subcomponents_.Get(index);
}
inline ::google::cloud::support::common::IssueTaxonomy_Component* IssueTaxonomy_Component::mutable_subcomponents(int index) {
  // @@protoc_insertion_point(field_mutable:google.cloud.support.common.IssueTaxonomy.Component.subcomponents)
  return subcomponents_.Mutable(index);
}
inline ::google::cloud::support::common::IssueTaxonomy_Component* IssueTaxonomy_Component::add_subcomponents() {
  // @@protoc_insertion_point(field_add:google.cloud.support.common.IssueTaxonomy.Component.subcomponents)
  return subcomponents_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::google::cloud::support::common::IssueTaxonomy_Component >*
IssueTaxonomy_Component::mutable_subcomponents() {
  // @@protoc_insertion_point(field_mutable_list:google.cloud.support.common.IssueTaxonomy.Component.subcomponents)
  return &subcomponents_;
}
inline const ::google::protobuf::RepeatedPtrField< ::google::cloud::support::common::IssueTaxonomy_Component >&
IssueTaxonomy_Component::subcomponents() const {
  // @@protoc_insertion_point(field_list:google.cloud.support.common.IssueTaxonomy.Component.subcomponents)
  return subcomponents_;
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// IssueTaxonomy_Category

// string display_name = 1;
inline void IssueTaxonomy_Category::clear_display_name() {
  display_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& IssueTaxonomy_Category::display_name() const {
  // @@protoc_insertion_point(field_get:google.cloud.support.common.IssueTaxonomy.Category.display_name)
  return display_name_.GetNoArena();
}
inline void IssueTaxonomy_Category::set_display_name(const ::std::string& value) {
  
  display_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.cloud.support.common.IssueTaxonomy.Category.display_name)
}
#if LANG_CXX11
inline void IssueTaxonomy_Category::set_display_name(::std::string&& value) {
  
  display_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.support.common.IssueTaxonomy.Category.display_name)
}
#endif
inline void IssueTaxonomy_Category::set_display_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  display_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.cloud.support.common.IssueTaxonomy.Category.display_name)
}
inline void IssueTaxonomy_Category::set_display_name(const char* value, size_t size) {
  
  display_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.cloud.support.common.IssueTaxonomy.Category.display_name)
}
inline ::std::string* IssueTaxonomy_Category::mutable_display_name() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.support.common.IssueTaxonomy.Category.display_name)
  return display_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* IssueTaxonomy_Category::release_display_name() {
  // @@protoc_insertion_point(field_release:google.cloud.support.common.IssueTaxonomy.Category.display_name)
  
  return display_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IssueTaxonomy_Category::set_allocated_display_name(::std::string* display_name) {
  if (display_name != NULL) {
    
  } else {
    
  }
  display_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), display_name);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.support.common.IssueTaxonomy.Category.display_name)
}

// map<string, .google.cloud.support.common.IssueTaxonomy.Component> components = 2;
inline int IssueTaxonomy_Category::components_size() const {
  return components_.size();
}
inline void IssueTaxonomy_Category::clear_components() {
  components_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::google::cloud::support::common::IssueTaxonomy_Component >&
IssueTaxonomy_Category::components() const {
  // @@protoc_insertion_point(field_map:google.cloud.support.common.IssueTaxonomy.Category.components)
  return components_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::google::cloud::support::common::IssueTaxonomy_Component >*
IssueTaxonomy_Category::mutable_components() {
  // @@protoc_insertion_point(field_mutable_map:google.cloud.support.common.IssueTaxonomy.Category.components)
  return components_.MutableMap();
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// IssueTaxonomy

// map<string, .google.cloud.support.common.IssueTaxonomy.Category> categories = 1;
inline int IssueTaxonomy::categories_size() const {
  return categories_.size();
}
inline void IssueTaxonomy::clear_categories() {
  categories_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::google::cloud::support::common::IssueTaxonomy_Category >&
IssueTaxonomy::categories() const {
  // @@protoc_insertion_point(field_map:google.cloud.support.common.IssueTaxonomy.categories)
  return categories_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::google::cloud::support::common::IssueTaxonomy_Category >*
IssueTaxonomy::mutable_categories() {
  // @@protoc_insertion_point(field_mutable_map:google.cloud.support.common.IssueTaxonomy.categories)
  return categories_.MutableMap();
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace common
}  // namespace support
}  // namespace cloud
}  // namespace google

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::google::cloud::support::common::SupportAccount_State> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::google::cloud::support::common::SupportAccount_State>() {
  return ::google::cloud::support::common::SupportAccount_State_descriptor();
}
template <> struct is_proto_enum< ::google::cloud::support::common::SupportAccount_PricingModel> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::google::cloud::support::common::SupportAccount_PricingModel>() {
  return ::google::cloud::support::common::SupportAccount_PricingModel_descriptor();
}
template <> struct is_proto_enum< ::google::cloud::support::common::Case_Priority> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::google::cloud::support::common::Case_Priority>() {
  return ::google::cloud::support::common::Case_Priority_descriptor();
}
template <> struct is_proto_enum< ::google::cloud::support::common::Case_State> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::google::cloud::support::common::Case_State>() {
  return ::google::cloud::support::common::Case_State_descriptor();
}
template <> struct is_proto_enum< ::google::cloud::support::common::CustomerIssue_IssueState> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::google::cloud::support::common::CustomerIssue_IssueState>() {
  return ::google::cloud::support::common::CustomerIssue_IssueState_descriptor();
}
template <> struct is_proto_enum< ::google::cloud::support::common::SupportRole_Role> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::google::cloud::support::common::SupportRole_Role>() {
  return ::google::cloud::support::common::SupportRole_Role_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_google_2fcloud_2fsupport_2fcommon_2eproto__INCLUDED
