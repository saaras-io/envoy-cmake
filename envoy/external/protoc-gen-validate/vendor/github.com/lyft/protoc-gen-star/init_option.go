package pgs

import (
	"os"

	"io"

	"github.com/spf13/afero"
)

// An InitOption modifies the behavior of a Generator at initialization.
type InitOption func(g *Generator)

// ParamMutator is a method that modifies Parameters p in-place. These are
// typically applied before code generation begins, and configurable via the
// MutateParams InitOption.
type ParamMutator func(p Parameters)

// ProtocInput changes the input io.Reader source. This value is where the
// serialized CodeGeneratorRequest is received from protoc. By default,
// os.Stdin is used.
func ProtocInput(r io.Reader) InitOption { return func(g *Generator) { g.in = r } }

// ProtocOutput changes the output io.Writer destination. This value is where
// the serialized CodeGeneratorResponse is sent to protoc. By default,
// os.Stdout is used.
func ProtocOutput(w io.Writer) InitOption { return func(g *Generator) { g.out = w } }

// IncludeGo permits generation of the standard Go protocol buffer code
// alongside any custom modules. By default, none of the standard protoc-gen-go
// code is generated.
func IncludeGo() InitOption { return func(g *Generator) { g.includeGo = true } }

// DebugMode enables verbose logging for module development and debugging.
func DebugMode() InitOption { return func(g *Generator) { g.debug = true } }

// DebugEnv enables verbose logging only if the passed in environment variable
// is non-empty.
func DebugEnv(f string) InitOption { return func(g *Generator) { g.debug = os.Getenv(f) != "" } }

// RequirePlugin force-enables any plugins with name, regardless of the
// parameters passed in from protoc.
func RequirePlugin(name ...string) InitOption {
	return MutateParams(func(p Parameters) { p.AddPlugin(name...) })
}

// MutateParams applies pm to the parameters passed in from protoc. The
// ParamMutator is applied prior to executing the protoc-gen-go workflow.
func MutateParams(pm ParamMutator) InitOption {
	return func(g *Generator) { g.paramMutators = append(g.paramMutators, pm) }
}

// FileSystem overrides the default file system used to write Artifacts to
// disk. By default, the OS's file system is used. This option currently only
// impacts CustomFile and CustomTemplateFile artifacts generated by modules.
func FileSystem(fs afero.Fs) InitOption { return func(g *Generator) { g.persister.SetFS(fs) } }

// MultiPackage indicates that the Generator should expect files from multiple
// packages simultaneously. Normally, protoc-gen-go disallows running against
// files from more than one package at a time.
func MultiPackage() InitOption {
	return func(g *Generator) { g.workflow = &multiPackageWorkflow{workflow: g.workflow} }
}
