// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/genomics/v1/readalignment.proto

#include "google/genomics/v1/readalignment.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)
namespace google {
namespace genomics {
namespace v1 {
class LinearAlignmentDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LinearAlignment>
      _instance;
} _LinearAlignment_default_instance_;
class Read_InfoEntry_DoNotUseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Read_InfoEntry_DoNotUse>
      _instance;
} _Read_InfoEntry_DoNotUse_default_instance_;
class ReadDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Read>
      _instance;
} _Read_default_instance_;
}  // namespace v1
}  // namespace genomics
}  // namespace google
namespace protobuf_google_2fgenomics_2fv1_2freadalignment_2eproto {
void InitDefaultsLinearAlignmentImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_google_2fgenomics_2fv1_2fposition_2eproto::InitDefaultsPosition();
  protobuf_google_2fgenomics_2fv1_2fcigar_2eproto::InitDefaultsCigarUnit();
  {
    void* ptr = &::google::genomics::v1::_LinearAlignment_default_instance_;
    new (ptr) ::google::genomics::v1::LinearAlignment();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::genomics::v1::LinearAlignment::InitAsDefaultInstance();
}

void InitDefaultsLinearAlignment() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsLinearAlignmentImpl);
}

void InitDefaultsRead_InfoEntry_DoNotUseImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_google_2fprotobuf_2fstruct_2eproto::InitDefaultsListValue();
  {
    void* ptr = &::google::genomics::v1::_Read_InfoEntry_DoNotUse_default_instance_;
    new (ptr) ::google::genomics::v1::Read_InfoEntry_DoNotUse();
  }
  ::google::genomics::v1::Read_InfoEntry_DoNotUse::InitAsDefaultInstance();
}

void InitDefaultsRead_InfoEntry_DoNotUse() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsRead_InfoEntry_DoNotUseImpl);
}

void InitDefaultsReadImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_google_2fgenomics_2fv1_2freadalignment_2eproto::InitDefaultsLinearAlignment();
  protobuf_google_2fgenomics_2fv1_2fposition_2eproto::InitDefaultsPosition();
  protobuf_google_2fgenomics_2fv1_2freadalignment_2eproto::InitDefaultsRead_InfoEntry_DoNotUse();
  {
    void* ptr = &::google::genomics::v1::_Read_default_instance_;
    new (ptr) ::google::genomics::v1::Read();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::genomics::v1::Read::InitAsDefaultInstance();
}

void InitDefaultsRead() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsReadImpl);
}

::google::protobuf::Metadata file_level_metadata[3];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::genomics::v1::LinearAlignment, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::genomics::v1::LinearAlignment, position_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::genomics::v1::LinearAlignment, mapping_quality_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::genomics::v1::LinearAlignment, cigar_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::genomics::v1::Read_InfoEntry_DoNotUse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::genomics::v1::Read_InfoEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::genomics::v1::Read_InfoEntry_DoNotUse, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::genomics::v1::Read_InfoEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::genomics::v1::Read, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::genomics::v1::Read, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::genomics::v1::Read, read_group_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::genomics::v1::Read, read_group_set_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::genomics::v1::Read, fragment_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::genomics::v1::Read, proper_placement_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::genomics::v1::Read, duplicate_fragment_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::genomics::v1::Read, fragment_length_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::genomics::v1::Read, read_number_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::genomics::v1::Read, number_reads_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::genomics::v1::Read, failed_vendor_quality_checks_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::genomics::v1::Read, alignment_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::genomics::v1::Read, secondary_alignment_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::genomics::v1::Read, supplementary_alignment_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::genomics::v1::Read, aligned_sequence_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::genomics::v1::Read, aligned_quality_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::genomics::v1::Read, next_mate_position_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::genomics::v1::Read, info_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::google::genomics::v1::LinearAlignment)},
  { 8, 15, sizeof(::google::genomics::v1::Read_InfoEntry_DoNotUse)},
  { 17, -1, sizeof(::google::genomics::v1::Read)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::genomics::v1::_LinearAlignment_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::genomics::v1::_Read_InfoEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::genomics::v1::_Read_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "google/genomics/v1/readalignment.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 3);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n&google/genomics/v1/readalignment.proto"
      "\022\022google.genomics.v1\032\034google/api/annotat"
      "ions.proto\032\036google/genomics/v1/cigar.pro"
      "to\032!google/genomics/v1/position.proto\032\034g"
      "oogle/protobuf/struct.proto\"\210\001\n\017LinearAl"
      "ignment\022.\n\010position\030\001 \001(\0132\034.google.genom"
      "ics.v1.Position\022\027\n\017mapping_quality\030\002 \001(\005"
      "\022,\n\005cigar\030\003 \003(\0132\035.google.genomics.v1.Cig"
      "arUnit\"\331\004\n\004Read\022\n\n\002id\030\001 \001(\t\022\025\n\rread_grou"
      "p_id\030\002 \001(\t\022\031\n\021read_group_set_id\030\003 \001(\t\022\025\n"
      "\rfragment_name\030\004 \001(\t\022\030\n\020proper_placement"
      "\030\005 \001(\010\022\032\n\022duplicate_fragment\030\006 \001(\010\022\027\n\017fr"
      "agment_length\030\007 \001(\005\022\023\n\013read_number\030\010 \001(\005"
      "\022\024\n\014number_reads\030\t \001(\005\022$\n\034failed_vendor_"
      "quality_checks\030\n \001(\010\0226\n\talignment\030\013 \001(\0132"
      "#.google.genomics.v1.LinearAlignment\022\033\n\023"
      "secondary_alignment\030\014 \001(\010\022\037\n\027supplementa"
      "ry_alignment\030\r \001(\010\022\030\n\020aligned_sequence\030\016"
      " \001(\t\022\027\n\017aligned_quality\030\017 \003(\005\0228\n\022next_ma"
      "te_position\030\020 \001(\0132\034.google.genomics.v1.P"
      "osition\0220\n\004info\030\021 \003(\0132\".google.genomics."
      "v1.Read.InfoEntry\032G\n\tInfoEntry\022\013\n\003key\030\001 "
      "\001(\t\022)\n\005value\030\002 \001(\0132\032.google.protobuf.Lis"
      "tValue:\0028\001Bm\n\026com.google.genomics.v1B\022Re"
      "adAlignmentProtoP\001Z:google.golang.org/ge"
      "nproto/googleapis/genomics/v1;genomics\370\001"
      "\001b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 1049);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "google/genomics/v1/readalignment.proto", &protobuf_RegisterTypes);
  ::protobuf_google_2fapi_2fannotations_2eproto::AddDescriptors();
  ::protobuf_google_2fgenomics_2fv1_2fcigar_2eproto::AddDescriptors();
  ::protobuf_google_2fgenomics_2fv1_2fposition_2eproto::AddDescriptors();
  ::protobuf_google_2fprotobuf_2fstruct_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_google_2fgenomics_2fv1_2freadalignment_2eproto
namespace google {
namespace genomics {
namespace v1 {

// ===================================================================

void LinearAlignment::InitAsDefaultInstance() {
  ::google::genomics::v1::_LinearAlignment_default_instance_._instance.get_mutable()->position_ = const_cast< ::google::genomics::v1::Position*>(
      ::google::genomics::v1::Position::internal_default_instance());
}
void LinearAlignment::_slow_mutable_position() {
  position_ = ::google::protobuf::Arena::CreateMessage< ::google::genomics::v1::Position >(
      GetArenaNoVirtual());
}
void LinearAlignment::unsafe_arena_set_allocated_position(
    ::google::genomics::v1::Position* position) {
  if (GetArenaNoVirtual() == NULL) {
    delete position_;
  }
  position_ = position;
  if (position) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.genomics.v1.LinearAlignment.position)
}
void LinearAlignment::clear_position() {
  if (GetArenaNoVirtual() == NULL && position_ != NULL) {
    delete position_;
  }
  position_ = NULL;
}
void LinearAlignment::clear_cigar() {
  cigar_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LinearAlignment::kPositionFieldNumber;
const int LinearAlignment::kMappingQualityFieldNumber;
const int LinearAlignment::kCigarFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LinearAlignment::LinearAlignment()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_google_2fgenomics_2fv1_2freadalignment_2eproto::InitDefaultsLinearAlignment();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.genomics.v1.LinearAlignment)
}
LinearAlignment::LinearAlignment(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  cigar_(arena) {
  ::protobuf_google_2fgenomics_2fv1_2freadalignment_2eproto::InitDefaultsLinearAlignment();
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.genomics.v1.LinearAlignment)
}
LinearAlignment::LinearAlignment(const LinearAlignment& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      cigar_(from.cigar_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_position()) {
    position_ = new ::google::genomics::v1::Position(*from.position_);
  } else {
    position_ = NULL;
  }
  mapping_quality_ = from.mapping_quality_;
  // @@protoc_insertion_point(copy_constructor:google.genomics.v1.LinearAlignment)
}

void LinearAlignment::SharedCtor() {
  ::memset(&position_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&mapping_quality_) -
      reinterpret_cast<char*>(&position_)) + sizeof(mapping_quality_));
  _cached_size_ = 0;
}

LinearAlignment::~LinearAlignment() {
  // @@protoc_insertion_point(destructor:google.genomics.v1.LinearAlignment)
  SharedDtor();
}

void LinearAlignment::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  if (this != internal_default_instance()) delete position_;
}

void LinearAlignment::ArenaDtor(void* object) {
  LinearAlignment* _this = reinterpret_cast< LinearAlignment* >(object);
  (void)_this;
}
void LinearAlignment::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void LinearAlignment::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LinearAlignment::descriptor() {
  ::protobuf_google_2fgenomics_2fv1_2freadalignment_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fgenomics_2fv1_2freadalignment_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LinearAlignment& LinearAlignment::default_instance() {
  ::protobuf_google_2fgenomics_2fv1_2freadalignment_2eproto::InitDefaultsLinearAlignment();
  return *internal_default_instance();
}

LinearAlignment* LinearAlignment::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<LinearAlignment>(arena);
}

void LinearAlignment::Clear() {
// @@protoc_insertion_point(message_clear_start:google.genomics.v1.LinearAlignment)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cigar_.Clear();
  if (GetArenaNoVirtual() == NULL && position_ != NULL) {
    delete position_;
  }
  position_ = NULL;
  mapping_quality_ = 0;
  _internal_metadata_.Clear();
}

bool LinearAlignment::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.genomics.v1.LinearAlignment)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .google.genomics.v1.Position position = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_position()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 mapping_quality = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mapping_quality_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .google.genomics.v1.CigarUnit cigar = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_cigar()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.genomics.v1.LinearAlignment)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.genomics.v1.LinearAlignment)
  return false;
#undef DO_
}

void LinearAlignment::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.genomics.v1.LinearAlignment)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.genomics.v1.Position position = 1;
  if (this->has_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->position_, output);
  }

  // int32 mapping_quality = 2;
  if (this->mapping_quality() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->mapping_quality(), output);
  }

  // repeated .google.genomics.v1.CigarUnit cigar = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->cigar_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->cigar(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:google.genomics.v1.LinearAlignment)
}

::google::protobuf::uint8* LinearAlignment::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.genomics.v1.LinearAlignment)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.genomics.v1.Position position = 1;
  if (this->has_position()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->position_, deterministic, target);
  }

  // int32 mapping_quality = 2;
  if (this->mapping_quality() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->mapping_quality(), target);
  }

  // repeated .google.genomics.v1.CigarUnit cigar = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->cigar_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->cigar(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.genomics.v1.LinearAlignment)
  return target;
}

size_t LinearAlignment::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.genomics.v1.LinearAlignment)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .google.genomics.v1.CigarUnit cigar = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->cigar_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->cigar(static_cast<int>(i)));
    }
  }

  // .google.genomics.v1.Position position = 1;
  if (this->has_position()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->position_);
  }

  // int32 mapping_quality = 2;
  if (this->mapping_quality() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->mapping_quality());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LinearAlignment::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.genomics.v1.LinearAlignment)
  GOOGLE_DCHECK_NE(&from, this);
  const LinearAlignment* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LinearAlignment>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.genomics.v1.LinearAlignment)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.genomics.v1.LinearAlignment)
    MergeFrom(*source);
  }
}

void LinearAlignment::MergeFrom(const LinearAlignment& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.genomics.v1.LinearAlignment)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cigar_.MergeFrom(from.cigar_);
  if (from.has_position()) {
    mutable_position()->::google::genomics::v1::Position::MergeFrom(from.position());
  }
  if (from.mapping_quality() != 0) {
    set_mapping_quality(from.mapping_quality());
  }
}

void LinearAlignment::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.genomics.v1.LinearAlignment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LinearAlignment::CopyFrom(const LinearAlignment& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.genomics.v1.LinearAlignment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LinearAlignment::IsInitialized() const {
  return true;
}

void LinearAlignment::Swap(LinearAlignment* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    LinearAlignment* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void LinearAlignment::UnsafeArenaSwap(LinearAlignment* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void LinearAlignment::InternalSwap(LinearAlignment* other) {
  using std::swap;
  cigar_.InternalSwap(&other->cigar_);
  swap(position_, other->position_);
  swap(mapping_quality_, other->mapping_quality_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LinearAlignment::GetMetadata() const {
  protobuf_google_2fgenomics_2fv1_2freadalignment_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fgenomics_2fv1_2freadalignment_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

Read_InfoEntry_DoNotUse::Read_InfoEntry_DoNotUse() {}
Read_InfoEntry_DoNotUse::Read_InfoEntry_DoNotUse(::google::protobuf::Arena* arena) : SuperType(arena) {}
void Read_InfoEntry_DoNotUse::MergeFrom(const Read_InfoEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::google::protobuf::Metadata Read_InfoEntry_DoNotUse::GetMetadata() const {
  ::protobuf_google_2fgenomics_2fv1_2freadalignment_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fgenomics_2fv1_2freadalignment_2eproto::file_level_metadata[1];
}
void Read_InfoEntry_DoNotUse::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}


// ===================================================================

void Read::InitAsDefaultInstance() {
  ::google::genomics::v1::_Read_default_instance_._instance.get_mutable()->alignment_ = const_cast< ::google::genomics::v1::LinearAlignment*>(
      ::google::genomics::v1::LinearAlignment::internal_default_instance());
  ::google::genomics::v1::_Read_default_instance_._instance.get_mutable()->next_mate_position_ = const_cast< ::google::genomics::v1::Position*>(
      ::google::genomics::v1::Position::internal_default_instance());
}
void Read::_slow_mutable_alignment() {
  alignment_ = ::google::protobuf::Arena::CreateMessage< ::google::genomics::v1::LinearAlignment >(
      GetArenaNoVirtual());
}
void Read::unsafe_arena_set_allocated_alignment(
    ::google::genomics::v1::LinearAlignment* alignment) {
  if (GetArenaNoVirtual() == NULL) {
    delete alignment_;
  }
  alignment_ = alignment;
  if (alignment) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.genomics.v1.Read.alignment)
}
void Read::_slow_mutable_next_mate_position() {
  next_mate_position_ = ::google::protobuf::Arena::CreateMessage< ::google::genomics::v1::Position >(
      GetArenaNoVirtual());
}
void Read::unsafe_arena_set_allocated_next_mate_position(
    ::google::genomics::v1::Position* next_mate_position) {
  if (GetArenaNoVirtual() == NULL) {
    delete next_mate_position_;
  }
  next_mate_position_ = next_mate_position;
  if (next_mate_position) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.genomics.v1.Read.next_mate_position)
}
void Read::clear_next_mate_position() {
  if (GetArenaNoVirtual() == NULL && next_mate_position_ != NULL) {
    delete next_mate_position_;
  }
  next_mate_position_ = NULL;
}
void Read::clear_info() {
  info_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Read::kIdFieldNumber;
const int Read::kReadGroupIdFieldNumber;
const int Read::kReadGroupSetIdFieldNumber;
const int Read::kFragmentNameFieldNumber;
const int Read::kProperPlacementFieldNumber;
const int Read::kDuplicateFragmentFieldNumber;
const int Read::kFragmentLengthFieldNumber;
const int Read::kReadNumberFieldNumber;
const int Read::kNumberReadsFieldNumber;
const int Read::kFailedVendorQualityChecksFieldNumber;
const int Read::kAlignmentFieldNumber;
const int Read::kSecondaryAlignmentFieldNumber;
const int Read::kSupplementaryAlignmentFieldNumber;
const int Read::kAlignedSequenceFieldNumber;
const int Read::kAlignedQualityFieldNumber;
const int Read::kNextMatePositionFieldNumber;
const int Read::kInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Read::Read()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_google_2fgenomics_2fv1_2freadalignment_2eproto::InitDefaultsRead();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.genomics.v1.Read)
}
Read::Read(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  aligned_quality_(arena),
  info_(arena) {
  ::protobuf_google_2fgenomics_2fv1_2freadalignment_2eproto::InitDefaultsRead();
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.genomics.v1.Read)
}
Read::Read(const Read& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      aligned_quality_(from.aligned_quality_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  info_.MergeFrom(from.info_);
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.id().size() > 0) {
    id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id(),
      GetArenaNoVirtual());
  }
  read_group_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.read_group_id().size() > 0) {
    read_group_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.read_group_id(),
      GetArenaNoVirtual());
  }
  read_group_set_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.read_group_set_id().size() > 0) {
    read_group_set_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.read_group_set_id(),
      GetArenaNoVirtual());
  }
  fragment_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.fragment_name().size() > 0) {
    fragment_name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.fragment_name(),
      GetArenaNoVirtual());
  }
  aligned_sequence_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.aligned_sequence().size() > 0) {
    aligned_sequence_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.aligned_sequence(),
      GetArenaNoVirtual());
  }
  if (from.has_alignment()) {
    alignment_ = new ::google::genomics::v1::LinearAlignment(*from.alignment_);
  } else {
    alignment_ = NULL;
  }
  if (from.has_next_mate_position()) {
    next_mate_position_ = new ::google::genomics::v1::Position(*from.next_mate_position_);
  } else {
    next_mate_position_ = NULL;
  }
  ::memcpy(&fragment_length_, &from.fragment_length_,
    static_cast<size_t>(reinterpret_cast<char*>(&supplementary_alignment_) -
    reinterpret_cast<char*>(&fragment_length_)) + sizeof(supplementary_alignment_));
  // @@protoc_insertion_point(copy_constructor:google.genomics.v1.Read)
}

void Read::SharedCtor() {
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  read_group_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  read_group_set_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fragment_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  aligned_sequence_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&alignment_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&supplementary_alignment_) -
      reinterpret_cast<char*>(&alignment_)) + sizeof(supplementary_alignment_));
  _cached_size_ = 0;
}

Read::~Read() {
  // @@protoc_insertion_point(destructor:google.genomics.v1.Read)
  SharedDtor();
}

void Read::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  read_group_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  read_group_set_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fragment_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  aligned_sequence_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete alignment_;
  if (this != internal_default_instance()) delete next_mate_position_;
}

void Read::ArenaDtor(void* object) {
  Read* _this = reinterpret_cast< Read* >(object);
  (void)_this;
}
void Read::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void Read::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Read::descriptor() {
  ::protobuf_google_2fgenomics_2fv1_2freadalignment_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fgenomics_2fv1_2freadalignment_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Read& Read::default_instance() {
  ::protobuf_google_2fgenomics_2fv1_2freadalignment_2eproto::InitDefaultsRead();
  return *internal_default_instance();
}

Read* Read::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<Read>(arena);
}

void Read::Clear() {
// @@protoc_insertion_point(message_clear_start:google.genomics.v1.Read)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  aligned_quality_.Clear();
  info_.Clear();
  id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  read_group_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  read_group_set_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  fragment_name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  aligned_sequence_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  if (GetArenaNoVirtual() == NULL && alignment_ != NULL) {
    delete alignment_;
  }
  alignment_ = NULL;
  if (GetArenaNoVirtual() == NULL && next_mate_position_ != NULL) {
    delete next_mate_position_;
  }
  next_mate_position_ = NULL;
  ::memset(&fragment_length_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&supplementary_alignment_) -
      reinterpret_cast<char*>(&fragment_length_)) + sizeof(supplementary_alignment_));
  _internal_metadata_.Clear();
}

bool Read::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.genomics.v1.Read)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->id().data(), static_cast<int>(this->id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.genomics.v1.Read.id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string read_group_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_read_group_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->read_group_id().data(), static_cast<int>(this->read_group_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.genomics.v1.Read.read_group_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string read_group_set_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_read_group_set_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->read_group_set_id().data(), static_cast<int>(this->read_group_set_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.genomics.v1.Read.read_group_set_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string fragment_name = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fragment_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->fragment_name().data(), static_cast<int>(this->fragment_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.genomics.v1.Read.fragment_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool proper_placement = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &proper_placement_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool duplicate_fragment = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &duplicate_fragment_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 fragment_length = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fragment_length_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 read_number = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &read_number_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 number_reads = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &number_reads_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool failed_vendor_quality_checks = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &failed_vendor_quality_checks_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.genomics.v1.LinearAlignment alignment = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_alignment()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool secondary_alignment = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &secondary_alignment_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool supplementary_alignment = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &supplementary_alignment_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string aligned_sequence = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(114u /* 114 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_aligned_sequence()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->aligned_sequence().data(), static_cast<int>(this->aligned_sequence().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.genomics.v1.Read.aligned_sequence"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 aligned_quality = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(122u /* 122 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_aligned_quality())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u /* 120 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 122u, input, this->mutable_aligned_quality())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.genomics.v1.Position next_mate_position = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(130u /* 130 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_next_mate_position()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, .google.protobuf.ListValue> info = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(138u /* 138 & 0xFF */)) {
          Read_InfoEntry_DoNotUse::Parser< ::google::protobuf::internal::MapField<
              Read_InfoEntry_DoNotUse,
              ::std::string, ::google::protobuf::ListValue,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
              0 >,
            ::google::protobuf::Map< ::std::string, ::google::protobuf::ListValue > > parser(&info_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.genomics.v1.Read.InfoEntry.key"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.genomics.v1.Read)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.genomics.v1.Read)
  return false;
#undef DO_
}

void Read::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.genomics.v1.Read)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), static_cast<int>(this->id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.Read.id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  // string read_group_id = 2;
  if (this->read_group_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->read_group_id().data(), static_cast<int>(this->read_group_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.Read.read_group_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->read_group_id(), output);
  }

  // string read_group_set_id = 3;
  if (this->read_group_set_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->read_group_set_id().data(), static_cast<int>(this->read_group_set_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.Read.read_group_set_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->read_group_set_id(), output);
  }

  // string fragment_name = 4;
  if (this->fragment_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->fragment_name().data(), static_cast<int>(this->fragment_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.Read.fragment_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->fragment_name(), output);
  }

  // bool proper_placement = 5;
  if (this->proper_placement() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->proper_placement(), output);
  }

  // bool duplicate_fragment = 6;
  if (this->duplicate_fragment() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->duplicate_fragment(), output);
  }

  // int32 fragment_length = 7;
  if (this->fragment_length() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->fragment_length(), output);
  }

  // int32 read_number = 8;
  if (this->read_number() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->read_number(), output);
  }

  // int32 number_reads = 9;
  if (this->number_reads() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->number_reads(), output);
  }

  // bool failed_vendor_quality_checks = 10;
  if (this->failed_vendor_quality_checks() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->failed_vendor_quality_checks(), output);
  }

  // .google.genomics.v1.LinearAlignment alignment = 11;
  if (this->has_alignment()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, *this->alignment_, output);
  }

  // bool secondary_alignment = 12;
  if (this->secondary_alignment() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->secondary_alignment(), output);
  }

  // bool supplementary_alignment = 13;
  if (this->supplementary_alignment() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(13, this->supplementary_alignment(), output);
  }

  // string aligned_sequence = 14;
  if (this->aligned_sequence().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->aligned_sequence().data(), static_cast<int>(this->aligned_sequence().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.Read.aligned_sequence");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      14, this->aligned_sequence(), output);
  }

  // repeated int32 aligned_quality = 15;
  if (this->aligned_quality_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(15, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _aligned_quality_cached_byte_size_));
  }
  for (int i = 0, n = this->aligned_quality_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->aligned_quality(i), output);
  }

  // .google.genomics.v1.Position next_mate_position = 16;
  if (this->has_next_mate_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, *this->next_mate_position_, output);
  }

  // map<string, .google.protobuf.ListValue> info = 17;
  if (!this->info().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::google::protobuf::ListValue >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "google.genomics.v1.Read.InfoEntry.key");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->info().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->info().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::google::protobuf::ListValue >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::google::protobuf::ListValue >::const_iterator
          it = this->info().begin();
          it != this->info().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<Read_InfoEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(info_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            17, *entry, output);
        if (entry->GetArena() != NULL) {
          entry.release();
        }
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::google::protobuf::scoped_ptr<Read_InfoEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::google::protobuf::ListValue >::const_iterator
          it = this->info().begin();
          it != this->info().end(); ++it) {
        entry.reset(info_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            17, *entry, output);
        if (entry->GetArena() != NULL) {
          entry.release();
        }
        Utf8Check::Check(&*it);
      }
    }
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:google.genomics.v1.Read)
}

::google::protobuf::uint8* Read::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.genomics.v1.Read)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), static_cast<int>(this->id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.Read.id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // string read_group_id = 2;
  if (this->read_group_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->read_group_id().data(), static_cast<int>(this->read_group_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.Read.read_group_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->read_group_id(), target);
  }

  // string read_group_set_id = 3;
  if (this->read_group_set_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->read_group_set_id().data(), static_cast<int>(this->read_group_set_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.Read.read_group_set_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->read_group_set_id(), target);
  }

  // string fragment_name = 4;
  if (this->fragment_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->fragment_name().data(), static_cast<int>(this->fragment_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.Read.fragment_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->fragment_name(), target);
  }

  // bool proper_placement = 5;
  if (this->proper_placement() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->proper_placement(), target);
  }

  // bool duplicate_fragment = 6;
  if (this->duplicate_fragment() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->duplicate_fragment(), target);
  }

  // int32 fragment_length = 7;
  if (this->fragment_length() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->fragment_length(), target);
  }

  // int32 read_number = 8;
  if (this->read_number() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->read_number(), target);
  }

  // int32 number_reads = 9;
  if (this->number_reads() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->number_reads(), target);
  }

  // bool failed_vendor_quality_checks = 10;
  if (this->failed_vendor_quality_checks() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->failed_vendor_quality_checks(), target);
  }

  // .google.genomics.v1.LinearAlignment alignment = 11;
  if (this->has_alignment()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        11, *this->alignment_, deterministic, target);
  }

  // bool secondary_alignment = 12;
  if (this->secondary_alignment() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(12, this->secondary_alignment(), target);
  }

  // bool supplementary_alignment = 13;
  if (this->supplementary_alignment() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(13, this->supplementary_alignment(), target);
  }

  // string aligned_sequence = 14;
  if (this->aligned_sequence().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->aligned_sequence().data(), static_cast<int>(this->aligned_sequence().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.genomics.v1.Read.aligned_sequence");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        14, this->aligned_sequence(), target);
  }

  // repeated int32 aligned_quality = 15;
  if (this->aligned_quality_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      15,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _aligned_quality_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->aligned_quality_, target);
  }

  // .google.genomics.v1.Position next_mate_position = 16;
  if (this->has_next_mate_position()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        16, *this->next_mate_position_, deterministic, target);
  }

  // map<string, .google.protobuf.ListValue> info = 17;
  if (!this->info().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::google::protobuf::ListValue >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "google.genomics.v1.Read.InfoEntry.key");
      }
    };

    if (deterministic &&
        this->info().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->info().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::google::protobuf::ListValue >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::google::protobuf::ListValue >::const_iterator
          it = this->info().begin();
          it != this->info().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<Read_InfoEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(info_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       17, *entry, deterministic, target);
;
        if (entry->GetArena() != NULL) {
          entry.release();
        }
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::google::protobuf::scoped_ptr<Read_InfoEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::google::protobuf::ListValue >::const_iterator
          it = this->info().begin();
          it != this->info().end(); ++it) {
        entry.reset(info_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       17, *entry, deterministic, target);
;
        if (entry->GetArena() != NULL) {
          entry.release();
        }
        Utf8Check::Check(&*it);
      }
    }
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.genomics.v1.Read)
  return target;
}

size_t Read::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.genomics.v1.Read)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated int32 aligned_quality = 15;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->aligned_quality_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _aligned_quality_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // map<string, .google.protobuf.ListValue> info = 17;
  total_size += 2 *
      ::google::protobuf::internal::FromIntSize(this->info_size());
  {
    ::google::protobuf::scoped_ptr<Read_InfoEntry_DoNotUse> entry;
    for (::google::protobuf::Map< ::std::string, ::google::protobuf::ListValue >::const_iterator
        it = this->info().begin();
        it != this->info().end(); ++it) {
      if (entry.get() != NULL && entry->GetArena() != NULL) {
        entry.release();
      }
      entry.reset(info_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
    if (entry.get() != NULL && entry->GetArena() != NULL) {
      entry.release();
    }
  }

  // string id = 1;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->id());
  }

  // string read_group_id = 2;
  if (this->read_group_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->read_group_id());
  }

  // string read_group_set_id = 3;
  if (this->read_group_set_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->read_group_set_id());
  }

  // string fragment_name = 4;
  if (this->fragment_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->fragment_name());
  }

  // string aligned_sequence = 14;
  if (this->aligned_sequence().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->aligned_sequence());
  }

  // .google.genomics.v1.LinearAlignment alignment = 11;
  if (this->has_alignment()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->alignment_);
  }

  // .google.genomics.v1.Position next_mate_position = 16;
  if (this->has_next_mate_position()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->next_mate_position_);
  }

  // int32 fragment_length = 7;
  if (this->fragment_length() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->fragment_length());
  }

  // int32 read_number = 8;
  if (this->read_number() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->read_number());
  }

  // bool proper_placement = 5;
  if (this->proper_placement() != 0) {
    total_size += 1 + 1;
  }

  // bool duplicate_fragment = 6;
  if (this->duplicate_fragment() != 0) {
    total_size += 1 + 1;
  }

  // bool failed_vendor_quality_checks = 10;
  if (this->failed_vendor_quality_checks() != 0) {
    total_size += 1 + 1;
  }

  // bool secondary_alignment = 12;
  if (this->secondary_alignment() != 0) {
    total_size += 1 + 1;
  }

  // int32 number_reads = 9;
  if (this->number_reads() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->number_reads());
  }

  // bool supplementary_alignment = 13;
  if (this->supplementary_alignment() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Read::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.genomics.v1.Read)
  GOOGLE_DCHECK_NE(&from, this);
  const Read* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Read>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.genomics.v1.Read)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.genomics.v1.Read)
    MergeFrom(*source);
  }
}

void Read::MergeFrom(const Read& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.genomics.v1.Read)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  aligned_quality_.MergeFrom(from.aligned_quality_);
  info_.MergeFrom(from.info_);
  if (from.id().size() > 0) {
    set_id(from.id());
  }
  if (from.read_group_id().size() > 0) {
    set_read_group_id(from.read_group_id());
  }
  if (from.read_group_set_id().size() > 0) {
    set_read_group_set_id(from.read_group_set_id());
  }
  if (from.fragment_name().size() > 0) {
    set_fragment_name(from.fragment_name());
  }
  if (from.aligned_sequence().size() > 0) {
    set_aligned_sequence(from.aligned_sequence());
  }
  if (from.has_alignment()) {
    mutable_alignment()->::google::genomics::v1::LinearAlignment::MergeFrom(from.alignment());
  }
  if (from.has_next_mate_position()) {
    mutable_next_mate_position()->::google::genomics::v1::Position::MergeFrom(from.next_mate_position());
  }
  if (from.fragment_length() != 0) {
    set_fragment_length(from.fragment_length());
  }
  if (from.read_number() != 0) {
    set_read_number(from.read_number());
  }
  if (from.proper_placement() != 0) {
    set_proper_placement(from.proper_placement());
  }
  if (from.duplicate_fragment() != 0) {
    set_duplicate_fragment(from.duplicate_fragment());
  }
  if (from.failed_vendor_quality_checks() != 0) {
    set_failed_vendor_quality_checks(from.failed_vendor_quality_checks());
  }
  if (from.secondary_alignment() != 0) {
    set_secondary_alignment(from.secondary_alignment());
  }
  if (from.number_reads() != 0) {
    set_number_reads(from.number_reads());
  }
  if (from.supplementary_alignment() != 0) {
    set_supplementary_alignment(from.supplementary_alignment());
  }
}

void Read::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.genomics.v1.Read)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Read::CopyFrom(const Read& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.genomics.v1.Read)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Read::IsInitialized() const {
  return true;
}

void Read::Swap(Read* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    Read* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void Read::UnsafeArenaSwap(Read* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void Read::InternalSwap(Read* other) {
  using std::swap;
  aligned_quality_.InternalSwap(&other->aligned_quality_);
  info_.Swap(&other->info_);
  id_.Swap(&other->id_);
  read_group_id_.Swap(&other->read_group_id_);
  read_group_set_id_.Swap(&other->read_group_set_id_);
  fragment_name_.Swap(&other->fragment_name_);
  aligned_sequence_.Swap(&other->aligned_sequence_);
  swap(alignment_, other->alignment_);
  swap(next_mate_position_, other->next_mate_position_);
  swap(fragment_length_, other->fragment_length_);
  swap(read_number_, other->read_number_);
  swap(proper_placement_, other->proper_placement_);
  swap(duplicate_fragment_, other->duplicate_fragment_);
  swap(failed_vendor_quality_checks_, other->failed_vendor_quality_checks_);
  swap(secondary_alignment_, other->secondary_alignment_);
  swap(number_reads_, other->number_reads_);
  swap(supplementary_alignment_, other->supplementary_alignment_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Read::GetMetadata() const {
  protobuf_google_2fgenomics_2fv1_2freadalignment_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fgenomics_2fv1_2freadalignment_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace genomics
}  // namespace google

// @@protoc_insertion_point(global_scope)
