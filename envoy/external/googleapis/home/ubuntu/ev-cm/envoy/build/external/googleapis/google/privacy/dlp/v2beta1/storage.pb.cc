// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/privacy/dlp/v2beta1/storage.proto

#include "google/privacy/dlp/v2beta1/storage.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)
namespace google {
namespace privacy {
namespace dlp {
namespace v2beta1 {
class InfoTypeDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<InfoType>
      _instance;
} _InfoType_default_instance_;
class FieldIdDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<FieldId>
      _instance;
} _FieldId_default_instance_;
class PartitionIdDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PartitionId>
      _instance;
} _PartitionId_default_instance_;
class KindExpressionDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<KindExpression>
      _instance;
} _KindExpression_default_instance_;
class PropertyReferenceDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PropertyReference>
      _instance;
} _PropertyReference_default_instance_;
class ProjectionDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Projection>
      _instance;
} _Projection_default_instance_;
class DatastoreOptionsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DatastoreOptions>
      _instance;
} _DatastoreOptions_default_instance_;
class CloudStorageOptions_FileSetDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CloudStorageOptions_FileSet>
      _instance;
} _CloudStorageOptions_FileSet_default_instance_;
class CloudStorageOptionsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CloudStorageOptions>
      _instance;
} _CloudStorageOptions_default_instance_;
class CloudStoragePathDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CloudStoragePath>
      _instance;
} _CloudStoragePath_default_instance_;
class BigQueryOptionsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<BigQueryOptions>
      _instance;
} _BigQueryOptions_default_instance_;
class StorageConfigDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<StorageConfig>
      _instance;
  const ::google::privacy::dlp::v2beta1::DatastoreOptions* datastore_options_;
  const ::google::privacy::dlp::v2beta1::CloudStorageOptions* cloud_storage_options_;
  const ::google::privacy::dlp::v2beta1::BigQueryOptions* big_query_options_;
} _StorageConfig_default_instance_;
class CloudStorageKeyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CloudStorageKey>
      _instance;
} _CloudStorageKey_default_instance_;
class DatastoreKeyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DatastoreKey>
      _instance;
} _DatastoreKey_default_instance_;
class Key_PathElementDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Key_PathElement>
      _instance;
  ::google::protobuf::int64 id_;
  ::google::protobuf::internal::ArenaStringPtr name_;
} _Key_PathElement_default_instance_;
class KeyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Key>
      _instance;
} _Key_default_instance_;
class RecordKeyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RecordKey>
      _instance;
  const ::google::privacy::dlp::v2beta1::CloudStorageKey* cloud_storage_key_;
  const ::google::privacy::dlp::v2beta1::DatastoreKey* datastore_key_;
} _RecordKey_default_instance_;
class BigQueryTableDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<BigQueryTable>
      _instance;
} _BigQueryTable_default_instance_;
class EntityIdDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<EntityId>
      _instance;
} _EntityId_default_instance_;
}  // namespace v2beta1
}  // namespace dlp
}  // namespace privacy
}  // namespace google
namespace protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fstorage_2eproto {
void InitDefaultsInfoTypeImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::google::privacy::dlp::v2beta1::_InfoType_default_instance_;
    new (ptr) ::google::privacy::dlp::v2beta1::InfoType();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::privacy::dlp::v2beta1::InfoType::InitAsDefaultInstance();
}

void InitDefaultsInfoType() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsInfoTypeImpl);
}

void InitDefaultsFieldIdImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::google::privacy::dlp::v2beta1::_FieldId_default_instance_;
    new (ptr) ::google::privacy::dlp::v2beta1::FieldId();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::privacy::dlp::v2beta1::FieldId::InitAsDefaultInstance();
}

void InitDefaultsFieldId() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsFieldIdImpl);
}

void InitDefaultsPartitionIdImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::google::privacy::dlp::v2beta1::_PartitionId_default_instance_;
    new (ptr) ::google::privacy::dlp::v2beta1::PartitionId();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::privacy::dlp::v2beta1::PartitionId::InitAsDefaultInstance();
}

void InitDefaultsPartitionId() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsPartitionIdImpl);
}

void InitDefaultsKindExpressionImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::google::privacy::dlp::v2beta1::_KindExpression_default_instance_;
    new (ptr) ::google::privacy::dlp::v2beta1::KindExpression();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::privacy::dlp::v2beta1::KindExpression::InitAsDefaultInstance();
}

void InitDefaultsKindExpression() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsKindExpressionImpl);
}

void InitDefaultsPropertyReferenceImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::google::privacy::dlp::v2beta1::_PropertyReference_default_instance_;
    new (ptr) ::google::privacy::dlp::v2beta1::PropertyReference();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::privacy::dlp::v2beta1::PropertyReference::InitAsDefaultInstance();
}

void InitDefaultsPropertyReference() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsPropertyReferenceImpl);
}

void InitDefaultsProjectionImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fstorage_2eproto::InitDefaultsPropertyReference();
  {
    void* ptr = &::google::privacy::dlp::v2beta1::_Projection_default_instance_;
    new (ptr) ::google::privacy::dlp::v2beta1::Projection();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::privacy::dlp::v2beta1::Projection::InitAsDefaultInstance();
}

void InitDefaultsProjection() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsProjectionImpl);
}

void InitDefaultsDatastoreOptionsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fstorage_2eproto::InitDefaultsPartitionId();
  protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fstorage_2eproto::InitDefaultsKindExpression();
  protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fstorage_2eproto::InitDefaultsProjection();
  {
    void* ptr = &::google::privacy::dlp::v2beta1::_DatastoreOptions_default_instance_;
    new (ptr) ::google::privacy::dlp::v2beta1::DatastoreOptions();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::privacy::dlp::v2beta1::DatastoreOptions::InitAsDefaultInstance();
}

void InitDefaultsDatastoreOptions() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsDatastoreOptionsImpl);
}

void InitDefaultsCloudStorageOptions_FileSetImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::google::privacy::dlp::v2beta1::_CloudStorageOptions_FileSet_default_instance_;
    new (ptr) ::google::privacy::dlp::v2beta1::CloudStorageOptions_FileSet();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::privacy::dlp::v2beta1::CloudStorageOptions_FileSet::InitAsDefaultInstance();
}

void InitDefaultsCloudStorageOptions_FileSet() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsCloudStorageOptions_FileSetImpl);
}

void InitDefaultsCloudStorageOptionsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fstorage_2eproto::InitDefaultsCloudStorageOptions_FileSet();
  {
    void* ptr = &::google::privacy::dlp::v2beta1::_CloudStorageOptions_default_instance_;
    new (ptr) ::google::privacy::dlp::v2beta1::CloudStorageOptions();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::privacy::dlp::v2beta1::CloudStorageOptions::InitAsDefaultInstance();
}

void InitDefaultsCloudStorageOptions() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsCloudStorageOptionsImpl);
}

void InitDefaultsCloudStoragePathImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::google::privacy::dlp::v2beta1::_CloudStoragePath_default_instance_;
    new (ptr) ::google::privacy::dlp::v2beta1::CloudStoragePath();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::privacy::dlp::v2beta1::CloudStoragePath::InitAsDefaultInstance();
}

void InitDefaultsCloudStoragePath() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsCloudStoragePathImpl);
}

void InitDefaultsBigQueryOptionsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fstorage_2eproto::InitDefaultsBigQueryTable();
  protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fstorage_2eproto::InitDefaultsFieldId();
  {
    void* ptr = &::google::privacy::dlp::v2beta1::_BigQueryOptions_default_instance_;
    new (ptr) ::google::privacy::dlp::v2beta1::BigQueryOptions();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::privacy::dlp::v2beta1::BigQueryOptions::InitAsDefaultInstance();
}

void InitDefaultsBigQueryOptions() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsBigQueryOptionsImpl);
}

void InitDefaultsStorageConfigImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fstorage_2eproto::InitDefaultsDatastoreOptions();
  protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fstorage_2eproto::InitDefaultsCloudStorageOptions();
  protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fstorage_2eproto::InitDefaultsBigQueryOptions();
  {
    void* ptr = &::google::privacy::dlp::v2beta1::_StorageConfig_default_instance_;
    new (ptr) ::google::privacy::dlp::v2beta1::StorageConfig();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::privacy::dlp::v2beta1::StorageConfig::InitAsDefaultInstance();
}

void InitDefaultsStorageConfig() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsStorageConfigImpl);
}

void InitDefaultsCloudStorageKeyImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::google::privacy::dlp::v2beta1::_CloudStorageKey_default_instance_;
    new (ptr) ::google::privacy::dlp::v2beta1::CloudStorageKey();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::privacy::dlp::v2beta1::CloudStorageKey::InitAsDefaultInstance();
}

void InitDefaultsCloudStorageKey() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsCloudStorageKeyImpl);
}

void InitDefaultsDatastoreKeyImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fstorage_2eproto::InitDefaultsKey();
  {
    void* ptr = &::google::privacy::dlp::v2beta1::_DatastoreKey_default_instance_;
    new (ptr) ::google::privacy::dlp::v2beta1::DatastoreKey();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::privacy::dlp::v2beta1::DatastoreKey::InitAsDefaultInstance();
}

void InitDefaultsDatastoreKey() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsDatastoreKeyImpl);
}

void InitDefaultsKey_PathElementImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::google::privacy::dlp::v2beta1::_Key_PathElement_default_instance_;
    new (ptr) ::google::privacy::dlp::v2beta1::Key_PathElement();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::privacy::dlp::v2beta1::Key_PathElement::InitAsDefaultInstance();
}

void InitDefaultsKey_PathElement() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsKey_PathElementImpl);
}

void InitDefaultsKeyImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fstorage_2eproto::InitDefaultsPartitionId();
  protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fstorage_2eproto::InitDefaultsKey_PathElement();
  {
    void* ptr = &::google::privacy::dlp::v2beta1::_Key_default_instance_;
    new (ptr) ::google::privacy::dlp::v2beta1::Key();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::privacy::dlp::v2beta1::Key::InitAsDefaultInstance();
}

void InitDefaultsKey() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsKeyImpl);
}

void InitDefaultsRecordKeyImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fstorage_2eproto::InitDefaultsCloudStorageKey();
  protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fstorage_2eproto::InitDefaultsDatastoreKey();
  {
    void* ptr = &::google::privacy::dlp::v2beta1::_RecordKey_default_instance_;
    new (ptr) ::google::privacy::dlp::v2beta1::RecordKey();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::privacy::dlp::v2beta1::RecordKey::InitAsDefaultInstance();
}

void InitDefaultsRecordKey() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsRecordKeyImpl);
}

void InitDefaultsBigQueryTableImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::google::privacy::dlp::v2beta1::_BigQueryTable_default_instance_;
    new (ptr) ::google::privacy::dlp::v2beta1::BigQueryTable();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::privacy::dlp::v2beta1::BigQueryTable::InitAsDefaultInstance();
}

void InitDefaultsBigQueryTable() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsBigQueryTableImpl);
}

void InitDefaultsEntityIdImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fstorage_2eproto::InitDefaultsFieldId();
  {
    void* ptr = &::google::privacy::dlp::v2beta1::_EntityId_default_instance_;
    new (ptr) ::google::privacy::dlp::v2beta1::EntityId();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::privacy::dlp::v2beta1::EntityId::InitAsDefaultInstance();
}

void InitDefaultsEntityId() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsEntityIdImpl);
}

::google::protobuf::Metadata file_level_metadata[19];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::privacy::dlp::v2beta1::InfoType, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::privacy::dlp::v2beta1::InfoType, name_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::privacy::dlp::v2beta1::FieldId, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::privacy::dlp::v2beta1::FieldId, column_name_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::privacy::dlp::v2beta1::PartitionId, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::privacy::dlp::v2beta1::PartitionId, project_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::privacy::dlp::v2beta1::PartitionId, namespace_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::privacy::dlp::v2beta1::KindExpression, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::privacy::dlp::v2beta1::KindExpression, name_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::privacy::dlp::v2beta1::PropertyReference, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::privacy::dlp::v2beta1::PropertyReference, name_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::privacy::dlp::v2beta1::Projection, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::privacy::dlp::v2beta1::Projection, property_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::privacy::dlp::v2beta1::DatastoreOptions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::privacy::dlp::v2beta1::DatastoreOptions, partition_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::privacy::dlp::v2beta1::DatastoreOptions, kind_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::privacy::dlp::v2beta1::DatastoreOptions, projection_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::privacy::dlp::v2beta1::CloudStorageOptions_FileSet, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::privacy::dlp::v2beta1::CloudStorageOptions_FileSet, url_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::privacy::dlp::v2beta1::CloudStorageOptions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::privacy::dlp::v2beta1::CloudStorageOptions, file_set_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::privacy::dlp::v2beta1::CloudStoragePath, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::privacy::dlp::v2beta1::CloudStoragePath, path_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::privacy::dlp::v2beta1::BigQueryOptions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::privacy::dlp::v2beta1::BigQueryOptions, table_reference_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::privacy::dlp::v2beta1::BigQueryOptions, identifying_fields_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::privacy::dlp::v2beta1::StorageConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::privacy::dlp::v2beta1::StorageConfig, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::google::privacy::dlp::v2beta1::StorageConfigDefaultTypeInternal, datastore_options_),
  offsetof(::google::privacy::dlp::v2beta1::StorageConfigDefaultTypeInternal, cloud_storage_options_),
  offsetof(::google::privacy::dlp::v2beta1::StorageConfigDefaultTypeInternal, big_query_options_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::privacy::dlp::v2beta1::StorageConfig, type_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::privacy::dlp::v2beta1::CloudStorageKey, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::privacy::dlp::v2beta1::CloudStorageKey, file_path_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::privacy::dlp::v2beta1::CloudStorageKey, start_offset_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::privacy::dlp::v2beta1::DatastoreKey, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::privacy::dlp::v2beta1::DatastoreKey, entity_key_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::privacy::dlp::v2beta1::Key_PathElement, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::privacy::dlp::v2beta1::Key_PathElement, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::privacy::dlp::v2beta1::Key_PathElement, kind_),
  offsetof(::google::privacy::dlp::v2beta1::Key_PathElementDefaultTypeInternal, id_),
  offsetof(::google::privacy::dlp::v2beta1::Key_PathElementDefaultTypeInternal, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::privacy::dlp::v2beta1::Key_PathElement, id_type_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::privacy::dlp::v2beta1::Key, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::privacy::dlp::v2beta1::Key, partition_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::privacy::dlp::v2beta1::Key, path_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::privacy::dlp::v2beta1::RecordKey, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::privacy::dlp::v2beta1::RecordKey, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::google::privacy::dlp::v2beta1::RecordKeyDefaultTypeInternal, cloud_storage_key_),
  offsetof(::google::privacy::dlp::v2beta1::RecordKeyDefaultTypeInternal, datastore_key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::privacy::dlp::v2beta1::RecordKey, type_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::privacy::dlp::v2beta1::BigQueryTable, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::privacy::dlp::v2beta1::BigQueryTable, project_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::privacy::dlp::v2beta1::BigQueryTable, dataset_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::privacy::dlp::v2beta1::BigQueryTable, table_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::privacy::dlp::v2beta1::EntityId, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::privacy::dlp::v2beta1::EntityId, field_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::google::privacy::dlp::v2beta1::InfoType)},
  { 6, -1, sizeof(::google::privacy::dlp::v2beta1::FieldId)},
  { 12, -1, sizeof(::google::privacy::dlp::v2beta1::PartitionId)},
  { 19, -1, sizeof(::google::privacy::dlp::v2beta1::KindExpression)},
  { 25, -1, sizeof(::google::privacy::dlp::v2beta1::PropertyReference)},
  { 31, -1, sizeof(::google::privacy::dlp::v2beta1::Projection)},
  { 37, -1, sizeof(::google::privacy::dlp::v2beta1::DatastoreOptions)},
  { 45, -1, sizeof(::google::privacy::dlp::v2beta1::CloudStorageOptions_FileSet)},
  { 51, -1, sizeof(::google::privacy::dlp::v2beta1::CloudStorageOptions)},
  { 57, -1, sizeof(::google::privacy::dlp::v2beta1::CloudStoragePath)},
  { 63, -1, sizeof(::google::privacy::dlp::v2beta1::BigQueryOptions)},
  { 70, -1, sizeof(::google::privacy::dlp::v2beta1::StorageConfig)},
  { 79, -1, sizeof(::google::privacy::dlp::v2beta1::CloudStorageKey)},
  { 86, -1, sizeof(::google::privacy::dlp::v2beta1::DatastoreKey)},
  { 92, -1, sizeof(::google::privacy::dlp::v2beta1::Key_PathElement)},
  { 101, -1, sizeof(::google::privacy::dlp::v2beta1::Key)},
  { 108, -1, sizeof(::google::privacy::dlp::v2beta1::RecordKey)},
  { 116, -1, sizeof(::google::privacy::dlp::v2beta1::BigQueryTable)},
  { 124, -1, sizeof(::google::privacy::dlp::v2beta1::EntityId)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::privacy::dlp::v2beta1::_InfoType_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::privacy::dlp::v2beta1::_FieldId_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::privacy::dlp::v2beta1::_PartitionId_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::privacy::dlp::v2beta1::_KindExpression_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::privacy::dlp::v2beta1::_PropertyReference_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::privacy::dlp::v2beta1::_Projection_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::privacy::dlp::v2beta1::_DatastoreOptions_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::privacy::dlp::v2beta1::_CloudStorageOptions_FileSet_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::privacy::dlp::v2beta1::_CloudStorageOptions_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::privacy::dlp::v2beta1::_CloudStoragePath_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::privacy::dlp::v2beta1::_BigQueryOptions_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::privacy::dlp::v2beta1::_StorageConfig_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::privacy::dlp::v2beta1::_CloudStorageKey_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::privacy::dlp::v2beta1::_DatastoreKey_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::privacy::dlp::v2beta1::_Key_PathElement_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::privacy::dlp::v2beta1::_Key_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::privacy::dlp::v2beta1::_RecordKey_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::privacy::dlp::v2beta1::_BigQueryTable_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::privacy::dlp::v2beta1::_EntityId_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "google/privacy/dlp/v2beta1/storage.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 19);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n(google/privacy/dlp/v2beta1/storage.pro"
      "to\022\032google.privacy.dlp.v2beta1\032\034google/a"
      "pi/annotations.proto\032\037google/protobuf/ti"
      "mestamp.proto\"\030\n\010InfoType\022\014\n\004name\030\001 \001(\t\""
      "\036\n\007FieldId\022\023\n\013column_name\030\001 \001(\t\"7\n\013Parti"
      "tionId\022\022\n\nproject_id\030\002 \001(\t\022\024\n\014namespace_"
      "id\030\004 \001(\t\"\036\n\016KindExpression\022\014\n\004name\030\001 \001(\t"
      "\"!\n\021PropertyReference\022\014\n\004name\030\002 \001(\t\"M\n\nP"
      "rojection\022\?\n\010property\030\001 \001(\0132-.google.pri"
      "vacy.dlp.v2beta1.PropertyReference\"\307\001\n\020D"
      "atastoreOptions\022=\n\014partition_id\030\001 \001(\0132\'."
      "google.privacy.dlp.v2beta1.PartitionId\0228"
      "\n\004kind\030\002 \001(\0132*.google.privacy.dlp.v2beta"
      "1.KindExpression\022:\n\nprojection\030\003 \003(\0132&.g"
      "oogle.privacy.dlp.v2beta1.Projection\"x\n\023"
      "CloudStorageOptions\022I\n\010file_set\030\001 \001(\01327."
      "google.privacy.dlp.v2beta1.CloudStorageO"
      "ptions.FileSet\032\026\n\007FileSet\022\013\n\003url\030\001 \001(\t\" "
      "\n\020CloudStoragePath\022\014\n\004path\030\001 \001(\t\"\226\001\n\017Big"
      "QueryOptions\022B\n\017table_reference\030\001 \001(\0132)."
      "google.privacy.dlp.v2beta1.BigQueryTable"
      "\022\?\n\022identifying_fields\030\002 \003(\0132#.google.pr"
      "ivacy.dlp.v2beta1.FieldId\"\376\001\n\rStorageCon"
      "fig\022I\n\021datastore_options\030\002 \001(\0132,.google."
      "privacy.dlp.v2beta1.DatastoreOptionsH\000\022P"
      "\n\025cloud_storage_options\030\003 \001(\0132/.google.p"
      "rivacy.dlp.v2beta1.CloudStorageOptionsH\000"
      "\022H\n\021big_query_options\030\004 \001(\0132+.google.pri"
      "vacy.dlp.v2beta1.BigQueryOptionsH\000B\006\n\004ty"
      "pe\":\n\017CloudStorageKey\022\021\n\tfile_path\030\001 \001(\t"
      "\022\024\n\014start_offset\030\002 \001(\003\"C\n\014DatastoreKey\0223"
      "\n\nentity_key\030\001 \001(\0132\037.google.privacy.dlp."
      "v2beta1.Key\"\305\001\n\003Key\022=\n\014partition_id\030\001 \001("
      "\0132\'.google.privacy.dlp.v2beta1.Partition"
      "Id\0229\n\004path\030\002 \003(\0132+.google.privacy.dlp.v2"
      "beta1.Key.PathElement\032D\n\013PathElement\022\014\n\004"
      "kind\030\001 \001(\t\022\014\n\002id\030\002 \001(\003H\000\022\016\n\004name\030\003 \001(\tH\000"
      "B\t\n\007id_type\"\240\001\n\tRecordKey\022H\n\021cloud_stora"
      "ge_key\030\001 \001(\0132+.google.privacy.dlp.v2beta"
      "1.CloudStorageKeyH\000\022A\n\rdatastore_key\030\002 \001"
      "(\0132(.google.privacy.dlp.v2beta1.Datastor"
      "eKeyH\000B\006\n\004type\"I\n\rBigQueryTable\022\022\n\nproje"
      "ct_id\030\001 \001(\t\022\022\n\ndataset_id\030\002 \001(\t\022\020\n\010table"
      "_id\030\003 \001(\t\">\n\010EntityId\0222\n\005field\030\001 \001(\0132#.g"
      "oogle.privacy.dlp.v2beta1.FieldIdB\210\001\n\036co"
      "m.google.privacy.dlp.v2beta1B\nDlpStorage"
      "P\001Z=google.golang.org/genproto/googleapi"
      "s/privacy/dlp/v2beta1;dlp\252\002\030Google.Cloud"
      ".Dlp.V2Beta1b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 1940);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "google/privacy/dlp/v2beta1/storage.proto", &protobuf_RegisterTypes);
  ::protobuf_google_2fapi_2fannotations_2eproto::AddDescriptors();
  ::protobuf_google_2fprotobuf_2ftimestamp_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fstorage_2eproto
namespace google {
namespace privacy {
namespace dlp {
namespace v2beta1 {

// ===================================================================

void InfoType::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int InfoType::kNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

InfoType::InfoType()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fstorage_2eproto::InitDefaultsInfoType();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.privacy.dlp.v2beta1.InfoType)
}
InfoType::InfoType(const InfoType& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  // @@protoc_insertion_point(copy_constructor:google.privacy.dlp.v2beta1.InfoType)
}

void InfoType::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

InfoType::~InfoType() {
  // @@protoc_insertion_point(destructor:google.privacy.dlp.v2beta1.InfoType)
  SharedDtor();
}

void InfoType::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void InfoType::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InfoType::descriptor() {
  ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fstorage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fstorage_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const InfoType& InfoType::default_instance() {
  ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fstorage_2eproto::InitDefaultsInfoType();
  return *internal_default_instance();
}

InfoType* InfoType::New(::google::protobuf::Arena* arena) const {
  InfoType* n = new InfoType;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void InfoType::Clear() {
// @@protoc_insertion_point(message_clear_start:google.privacy.dlp.v2beta1.InfoType)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool InfoType::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.privacy.dlp.v2beta1.InfoType)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.privacy.dlp.v2beta1.InfoType.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.privacy.dlp.v2beta1.InfoType)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.privacy.dlp.v2beta1.InfoType)
  return false;
#undef DO_
}

void InfoType::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.privacy.dlp.v2beta1.InfoType)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.privacy.dlp.v2beta1.InfoType.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:google.privacy.dlp.v2beta1.InfoType)
}

::google::protobuf::uint8* InfoType::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.privacy.dlp.v2beta1.InfoType)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.privacy.dlp.v2beta1.InfoType.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.privacy.dlp.v2beta1.InfoType)
  return target;
}

size_t InfoType::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.privacy.dlp.v2beta1.InfoType)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InfoType::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.privacy.dlp.v2beta1.InfoType)
  GOOGLE_DCHECK_NE(&from, this);
  const InfoType* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const InfoType>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.privacy.dlp.v2beta1.InfoType)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.privacy.dlp.v2beta1.InfoType)
    MergeFrom(*source);
  }
}

void InfoType::MergeFrom(const InfoType& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.privacy.dlp.v2beta1.InfoType)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
}

void InfoType::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.privacy.dlp.v2beta1.InfoType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InfoType::CopyFrom(const InfoType& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.privacy.dlp.v2beta1.InfoType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InfoType::IsInitialized() const {
  return true;
}

void InfoType::Swap(InfoType* other) {
  if (other == this) return;
  InternalSwap(other);
}
void InfoType::InternalSwap(InfoType* other) {
  using std::swap;
  name_.Swap(&other->name_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata InfoType::GetMetadata() const {
  protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fstorage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fstorage_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void FieldId::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FieldId::kColumnNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FieldId::FieldId()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fstorage_2eproto::InitDefaultsFieldId();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.privacy.dlp.v2beta1.FieldId)
}
FieldId::FieldId(const FieldId& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  column_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.column_name().size() > 0) {
    column_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.column_name_);
  }
  // @@protoc_insertion_point(copy_constructor:google.privacy.dlp.v2beta1.FieldId)
}

void FieldId::SharedCtor() {
  column_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

FieldId::~FieldId() {
  // @@protoc_insertion_point(destructor:google.privacy.dlp.v2beta1.FieldId)
  SharedDtor();
}

void FieldId::SharedDtor() {
  column_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void FieldId::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FieldId::descriptor() {
  ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fstorage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fstorage_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FieldId& FieldId::default_instance() {
  ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fstorage_2eproto::InitDefaultsFieldId();
  return *internal_default_instance();
}

FieldId* FieldId::New(::google::protobuf::Arena* arena) const {
  FieldId* n = new FieldId;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FieldId::Clear() {
// @@protoc_insertion_point(message_clear_start:google.privacy.dlp.v2beta1.FieldId)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  column_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool FieldId::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.privacy.dlp.v2beta1.FieldId)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string column_name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_column_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->column_name().data(), static_cast<int>(this->column_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.privacy.dlp.v2beta1.FieldId.column_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.privacy.dlp.v2beta1.FieldId)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.privacy.dlp.v2beta1.FieldId)
  return false;
#undef DO_
}

void FieldId::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.privacy.dlp.v2beta1.FieldId)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string column_name = 1;
  if (this->column_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->column_name().data(), static_cast<int>(this->column_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.privacy.dlp.v2beta1.FieldId.column_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->column_name(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:google.privacy.dlp.v2beta1.FieldId)
}

::google::protobuf::uint8* FieldId::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.privacy.dlp.v2beta1.FieldId)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string column_name = 1;
  if (this->column_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->column_name().data(), static_cast<int>(this->column_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.privacy.dlp.v2beta1.FieldId.column_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->column_name(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.privacy.dlp.v2beta1.FieldId)
  return target;
}

size_t FieldId::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.privacy.dlp.v2beta1.FieldId)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string column_name = 1;
  if (this->column_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->column_name());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FieldId::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.privacy.dlp.v2beta1.FieldId)
  GOOGLE_DCHECK_NE(&from, this);
  const FieldId* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FieldId>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.privacy.dlp.v2beta1.FieldId)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.privacy.dlp.v2beta1.FieldId)
    MergeFrom(*source);
  }
}

void FieldId::MergeFrom(const FieldId& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.privacy.dlp.v2beta1.FieldId)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.column_name().size() > 0) {

    column_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.column_name_);
  }
}

void FieldId::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.privacy.dlp.v2beta1.FieldId)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FieldId::CopyFrom(const FieldId& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.privacy.dlp.v2beta1.FieldId)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FieldId::IsInitialized() const {
  return true;
}

void FieldId::Swap(FieldId* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FieldId::InternalSwap(FieldId* other) {
  using std::swap;
  column_name_.Swap(&other->column_name_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FieldId::GetMetadata() const {
  protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fstorage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fstorage_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void PartitionId::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PartitionId::kProjectIdFieldNumber;
const int PartitionId::kNamespaceIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PartitionId::PartitionId()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fstorage_2eproto::InitDefaultsPartitionId();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.privacy.dlp.v2beta1.PartitionId)
}
PartitionId::PartitionId(const PartitionId& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  project_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.project_id().size() > 0) {
    project_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.project_id_);
  }
  namespace_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.namespace_id().size() > 0) {
    namespace_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.namespace_id_);
  }
  // @@protoc_insertion_point(copy_constructor:google.privacy.dlp.v2beta1.PartitionId)
}

void PartitionId::SharedCtor() {
  project_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  namespace_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

PartitionId::~PartitionId() {
  // @@protoc_insertion_point(destructor:google.privacy.dlp.v2beta1.PartitionId)
  SharedDtor();
}

void PartitionId::SharedDtor() {
  project_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  namespace_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void PartitionId::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PartitionId::descriptor() {
  ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fstorage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fstorage_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PartitionId& PartitionId::default_instance() {
  ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fstorage_2eproto::InitDefaultsPartitionId();
  return *internal_default_instance();
}

PartitionId* PartitionId::New(::google::protobuf::Arena* arena) const {
  PartitionId* n = new PartitionId;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PartitionId::Clear() {
// @@protoc_insertion_point(message_clear_start:google.privacy.dlp.v2beta1.PartitionId)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  project_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  namespace_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool PartitionId::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.privacy.dlp.v2beta1.PartitionId)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string project_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_project_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->project_id().data(), static_cast<int>(this->project_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.privacy.dlp.v2beta1.PartitionId.project_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string namespace_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_namespace_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->namespace_id().data(), static_cast<int>(this->namespace_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.privacy.dlp.v2beta1.PartitionId.namespace_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.privacy.dlp.v2beta1.PartitionId)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.privacy.dlp.v2beta1.PartitionId)
  return false;
#undef DO_
}

void PartitionId::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.privacy.dlp.v2beta1.PartitionId)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string project_id = 2;
  if (this->project_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->project_id().data(), static_cast<int>(this->project_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.privacy.dlp.v2beta1.PartitionId.project_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->project_id(), output);
  }

  // string namespace_id = 4;
  if (this->namespace_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->namespace_id().data(), static_cast<int>(this->namespace_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.privacy.dlp.v2beta1.PartitionId.namespace_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->namespace_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:google.privacy.dlp.v2beta1.PartitionId)
}

::google::protobuf::uint8* PartitionId::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.privacy.dlp.v2beta1.PartitionId)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string project_id = 2;
  if (this->project_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->project_id().data(), static_cast<int>(this->project_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.privacy.dlp.v2beta1.PartitionId.project_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->project_id(), target);
  }

  // string namespace_id = 4;
  if (this->namespace_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->namespace_id().data(), static_cast<int>(this->namespace_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.privacy.dlp.v2beta1.PartitionId.namespace_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->namespace_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.privacy.dlp.v2beta1.PartitionId)
  return target;
}

size_t PartitionId::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.privacy.dlp.v2beta1.PartitionId)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string project_id = 2;
  if (this->project_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->project_id());
  }

  // string namespace_id = 4;
  if (this->namespace_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->namespace_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PartitionId::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.privacy.dlp.v2beta1.PartitionId)
  GOOGLE_DCHECK_NE(&from, this);
  const PartitionId* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PartitionId>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.privacy.dlp.v2beta1.PartitionId)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.privacy.dlp.v2beta1.PartitionId)
    MergeFrom(*source);
  }
}

void PartitionId::MergeFrom(const PartitionId& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.privacy.dlp.v2beta1.PartitionId)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.project_id().size() > 0) {

    project_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.project_id_);
  }
  if (from.namespace_id().size() > 0) {

    namespace_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.namespace_id_);
  }
}

void PartitionId::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.privacy.dlp.v2beta1.PartitionId)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PartitionId::CopyFrom(const PartitionId& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.privacy.dlp.v2beta1.PartitionId)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PartitionId::IsInitialized() const {
  return true;
}

void PartitionId::Swap(PartitionId* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PartitionId::InternalSwap(PartitionId* other) {
  using std::swap;
  project_id_.Swap(&other->project_id_);
  namespace_id_.Swap(&other->namespace_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PartitionId::GetMetadata() const {
  protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fstorage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fstorage_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void KindExpression::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int KindExpression::kNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

KindExpression::KindExpression()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fstorage_2eproto::InitDefaultsKindExpression();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.privacy.dlp.v2beta1.KindExpression)
}
KindExpression::KindExpression(const KindExpression& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  // @@protoc_insertion_point(copy_constructor:google.privacy.dlp.v2beta1.KindExpression)
}

void KindExpression::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

KindExpression::~KindExpression() {
  // @@protoc_insertion_point(destructor:google.privacy.dlp.v2beta1.KindExpression)
  SharedDtor();
}

void KindExpression::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void KindExpression::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* KindExpression::descriptor() {
  ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fstorage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fstorage_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const KindExpression& KindExpression::default_instance() {
  ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fstorage_2eproto::InitDefaultsKindExpression();
  return *internal_default_instance();
}

KindExpression* KindExpression::New(::google::protobuf::Arena* arena) const {
  KindExpression* n = new KindExpression;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void KindExpression::Clear() {
// @@protoc_insertion_point(message_clear_start:google.privacy.dlp.v2beta1.KindExpression)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool KindExpression::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.privacy.dlp.v2beta1.KindExpression)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.privacy.dlp.v2beta1.KindExpression.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.privacy.dlp.v2beta1.KindExpression)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.privacy.dlp.v2beta1.KindExpression)
  return false;
#undef DO_
}

void KindExpression::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.privacy.dlp.v2beta1.KindExpression)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.privacy.dlp.v2beta1.KindExpression.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:google.privacy.dlp.v2beta1.KindExpression)
}

::google::protobuf::uint8* KindExpression::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.privacy.dlp.v2beta1.KindExpression)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.privacy.dlp.v2beta1.KindExpression.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.privacy.dlp.v2beta1.KindExpression)
  return target;
}

size_t KindExpression::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.privacy.dlp.v2beta1.KindExpression)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void KindExpression::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.privacy.dlp.v2beta1.KindExpression)
  GOOGLE_DCHECK_NE(&from, this);
  const KindExpression* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const KindExpression>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.privacy.dlp.v2beta1.KindExpression)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.privacy.dlp.v2beta1.KindExpression)
    MergeFrom(*source);
  }
}

void KindExpression::MergeFrom(const KindExpression& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.privacy.dlp.v2beta1.KindExpression)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
}

void KindExpression::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.privacy.dlp.v2beta1.KindExpression)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KindExpression::CopyFrom(const KindExpression& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.privacy.dlp.v2beta1.KindExpression)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KindExpression::IsInitialized() const {
  return true;
}

void KindExpression::Swap(KindExpression* other) {
  if (other == this) return;
  InternalSwap(other);
}
void KindExpression::InternalSwap(KindExpression* other) {
  using std::swap;
  name_.Swap(&other->name_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata KindExpression::GetMetadata() const {
  protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fstorage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fstorage_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void PropertyReference::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PropertyReference::kNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PropertyReference::PropertyReference()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fstorage_2eproto::InitDefaultsPropertyReference();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.privacy.dlp.v2beta1.PropertyReference)
}
PropertyReference::PropertyReference(const PropertyReference& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  // @@protoc_insertion_point(copy_constructor:google.privacy.dlp.v2beta1.PropertyReference)
}

void PropertyReference::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

PropertyReference::~PropertyReference() {
  // @@protoc_insertion_point(destructor:google.privacy.dlp.v2beta1.PropertyReference)
  SharedDtor();
}

void PropertyReference::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void PropertyReference::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PropertyReference::descriptor() {
  ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fstorage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fstorage_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PropertyReference& PropertyReference::default_instance() {
  ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fstorage_2eproto::InitDefaultsPropertyReference();
  return *internal_default_instance();
}

PropertyReference* PropertyReference::New(::google::protobuf::Arena* arena) const {
  PropertyReference* n = new PropertyReference;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PropertyReference::Clear() {
// @@protoc_insertion_point(message_clear_start:google.privacy.dlp.v2beta1.PropertyReference)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool PropertyReference::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.privacy.dlp.v2beta1.PropertyReference)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.privacy.dlp.v2beta1.PropertyReference.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.privacy.dlp.v2beta1.PropertyReference)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.privacy.dlp.v2beta1.PropertyReference)
  return false;
#undef DO_
}

void PropertyReference::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.privacy.dlp.v2beta1.PropertyReference)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 2;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.privacy.dlp.v2beta1.PropertyReference.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:google.privacy.dlp.v2beta1.PropertyReference)
}

::google::protobuf::uint8* PropertyReference::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.privacy.dlp.v2beta1.PropertyReference)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 2;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.privacy.dlp.v2beta1.PropertyReference.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.privacy.dlp.v2beta1.PropertyReference)
  return target;
}

size_t PropertyReference::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.privacy.dlp.v2beta1.PropertyReference)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PropertyReference::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.privacy.dlp.v2beta1.PropertyReference)
  GOOGLE_DCHECK_NE(&from, this);
  const PropertyReference* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PropertyReference>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.privacy.dlp.v2beta1.PropertyReference)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.privacy.dlp.v2beta1.PropertyReference)
    MergeFrom(*source);
  }
}

void PropertyReference::MergeFrom(const PropertyReference& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.privacy.dlp.v2beta1.PropertyReference)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
}

void PropertyReference::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.privacy.dlp.v2beta1.PropertyReference)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PropertyReference::CopyFrom(const PropertyReference& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.privacy.dlp.v2beta1.PropertyReference)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PropertyReference::IsInitialized() const {
  return true;
}

void PropertyReference::Swap(PropertyReference* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PropertyReference::InternalSwap(PropertyReference* other) {
  using std::swap;
  name_.Swap(&other->name_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PropertyReference::GetMetadata() const {
  protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fstorage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fstorage_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Projection::InitAsDefaultInstance() {
  ::google::privacy::dlp::v2beta1::_Projection_default_instance_._instance.get_mutable()->property_ = const_cast< ::google::privacy::dlp::v2beta1::PropertyReference*>(
      ::google::privacy::dlp::v2beta1::PropertyReference::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Projection::kPropertyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Projection::Projection()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fstorage_2eproto::InitDefaultsProjection();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.privacy.dlp.v2beta1.Projection)
}
Projection::Projection(const Projection& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_property()) {
    property_ = new ::google::privacy::dlp::v2beta1::PropertyReference(*from.property_);
  } else {
    property_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:google.privacy.dlp.v2beta1.Projection)
}

void Projection::SharedCtor() {
  property_ = NULL;
  _cached_size_ = 0;
}

Projection::~Projection() {
  // @@protoc_insertion_point(destructor:google.privacy.dlp.v2beta1.Projection)
  SharedDtor();
}

void Projection::SharedDtor() {
  if (this != internal_default_instance()) delete property_;
}

void Projection::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Projection::descriptor() {
  ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fstorage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fstorage_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Projection& Projection::default_instance() {
  ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fstorage_2eproto::InitDefaultsProjection();
  return *internal_default_instance();
}

Projection* Projection::New(::google::protobuf::Arena* arena) const {
  Projection* n = new Projection;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Projection::Clear() {
// @@protoc_insertion_point(message_clear_start:google.privacy.dlp.v2beta1.Projection)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && property_ != NULL) {
    delete property_;
  }
  property_ = NULL;
  _internal_metadata_.Clear();
}

bool Projection::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.privacy.dlp.v2beta1.Projection)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .google.privacy.dlp.v2beta1.PropertyReference property = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_property()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.privacy.dlp.v2beta1.Projection)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.privacy.dlp.v2beta1.Projection)
  return false;
#undef DO_
}

void Projection::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.privacy.dlp.v2beta1.Projection)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.privacy.dlp.v2beta1.PropertyReference property = 1;
  if (this->has_property()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->property_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:google.privacy.dlp.v2beta1.Projection)
}

::google::protobuf::uint8* Projection::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.privacy.dlp.v2beta1.Projection)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.privacy.dlp.v2beta1.PropertyReference property = 1;
  if (this->has_property()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->property_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.privacy.dlp.v2beta1.Projection)
  return target;
}

size_t Projection::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.privacy.dlp.v2beta1.Projection)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .google.privacy.dlp.v2beta1.PropertyReference property = 1;
  if (this->has_property()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->property_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Projection::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.privacy.dlp.v2beta1.Projection)
  GOOGLE_DCHECK_NE(&from, this);
  const Projection* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Projection>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.privacy.dlp.v2beta1.Projection)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.privacy.dlp.v2beta1.Projection)
    MergeFrom(*source);
  }
}

void Projection::MergeFrom(const Projection& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.privacy.dlp.v2beta1.Projection)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_property()) {
    mutable_property()->::google::privacy::dlp::v2beta1::PropertyReference::MergeFrom(from.property());
  }
}

void Projection::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.privacy.dlp.v2beta1.Projection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Projection::CopyFrom(const Projection& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.privacy.dlp.v2beta1.Projection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Projection::IsInitialized() const {
  return true;
}

void Projection::Swap(Projection* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Projection::InternalSwap(Projection* other) {
  using std::swap;
  swap(property_, other->property_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Projection::GetMetadata() const {
  protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fstorage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fstorage_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void DatastoreOptions::InitAsDefaultInstance() {
  ::google::privacy::dlp::v2beta1::_DatastoreOptions_default_instance_._instance.get_mutable()->partition_id_ = const_cast< ::google::privacy::dlp::v2beta1::PartitionId*>(
      ::google::privacy::dlp::v2beta1::PartitionId::internal_default_instance());
  ::google::privacy::dlp::v2beta1::_DatastoreOptions_default_instance_._instance.get_mutable()->kind_ = const_cast< ::google::privacy::dlp::v2beta1::KindExpression*>(
      ::google::privacy::dlp::v2beta1::KindExpression::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DatastoreOptions::kPartitionIdFieldNumber;
const int DatastoreOptions::kKindFieldNumber;
const int DatastoreOptions::kProjectionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DatastoreOptions::DatastoreOptions()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fstorage_2eproto::InitDefaultsDatastoreOptions();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.privacy.dlp.v2beta1.DatastoreOptions)
}
DatastoreOptions::DatastoreOptions(const DatastoreOptions& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      projection_(from.projection_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_partition_id()) {
    partition_id_ = new ::google::privacy::dlp::v2beta1::PartitionId(*from.partition_id_);
  } else {
    partition_id_ = NULL;
  }
  if (from.has_kind()) {
    kind_ = new ::google::privacy::dlp::v2beta1::KindExpression(*from.kind_);
  } else {
    kind_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:google.privacy.dlp.v2beta1.DatastoreOptions)
}

void DatastoreOptions::SharedCtor() {
  ::memset(&partition_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&kind_) -
      reinterpret_cast<char*>(&partition_id_)) + sizeof(kind_));
  _cached_size_ = 0;
}

DatastoreOptions::~DatastoreOptions() {
  // @@protoc_insertion_point(destructor:google.privacy.dlp.v2beta1.DatastoreOptions)
  SharedDtor();
}

void DatastoreOptions::SharedDtor() {
  if (this != internal_default_instance()) delete partition_id_;
  if (this != internal_default_instance()) delete kind_;
}

void DatastoreOptions::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DatastoreOptions::descriptor() {
  ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fstorage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fstorage_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DatastoreOptions& DatastoreOptions::default_instance() {
  ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fstorage_2eproto::InitDefaultsDatastoreOptions();
  return *internal_default_instance();
}

DatastoreOptions* DatastoreOptions::New(::google::protobuf::Arena* arena) const {
  DatastoreOptions* n = new DatastoreOptions;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DatastoreOptions::Clear() {
// @@protoc_insertion_point(message_clear_start:google.privacy.dlp.v2beta1.DatastoreOptions)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  projection_.Clear();
  if (GetArenaNoVirtual() == NULL && partition_id_ != NULL) {
    delete partition_id_;
  }
  partition_id_ = NULL;
  if (GetArenaNoVirtual() == NULL && kind_ != NULL) {
    delete kind_;
  }
  kind_ = NULL;
  _internal_metadata_.Clear();
}

bool DatastoreOptions::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.privacy.dlp.v2beta1.DatastoreOptions)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .google.privacy.dlp.v2beta1.PartitionId partition_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_partition_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.privacy.dlp.v2beta1.KindExpression kind = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_kind()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .google.privacy.dlp.v2beta1.Projection projection = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_projection()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.privacy.dlp.v2beta1.DatastoreOptions)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.privacy.dlp.v2beta1.DatastoreOptions)
  return false;
#undef DO_
}

void DatastoreOptions::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.privacy.dlp.v2beta1.DatastoreOptions)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.privacy.dlp.v2beta1.PartitionId partition_id = 1;
  if (this->has_partition_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->partition_id_, output);
  }

  // .google.privacy.dlp.v2beta1.KindExpression kind = 2;
  if (this->has_kind()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->kind_, output);
  }

  // repeated .google.privacy.dlp.v2beta1.Projection projection = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->projection_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->projection(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:google.privacy.dlp.v2beta1.DatastoreOptions)
}

::google::protobuf::uint8* DatastoreOptions::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.privacy.dlp.v2beta1.DatastoreOptions)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.privacy.dlp.v2beta1.PartitionId partition_id = 1;
  if (this->has_partition_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->partition_id_, deterministic, target);
  }

  // .google.privacy.dlp.v2beta1.KindExpression kind = 2;
  if (this->has_kind()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, *this->kind_, deterministic, target);
  }

  // repeated .google.privacy.dlp.v2beta1.Projection projection = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->projection_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->projection(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.privacy.dlp.v2beta1.DatastoreOptions)
  return target;
}

size_t DatastoreOptions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.privacy.dlp.v2beta1.DatastoreOptions)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .google.privacy.dlp.v2beta1.Projection projection = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->projection_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->projection(static_cast<int>(i)));
    }
  }

  // .google.privacy.dlp.v2beta1.PartitionId partition_id = 1;
  if (this->has_partition_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->partition_id_);
  }

  // .google.privacy.dlp.v2beta1.KindExpression kind = 2;
  if (this->has_kind()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->kind_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DatastoreOptions::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.privacy.dlp.v2beta1.DatastoreOptions)
  GOOGLE_DCHECK_NE(&from, this);
  const DatastoreOptions* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DatastoreOptions>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.privacy.dlp.v2beta1.DatastoreOptions)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.privacy.dlp.v2beta1.DatastoreOptions)
    MergeFrom(*source);
  }
}

void DatastoreOptions::MergeFrom(const DatastoreOptions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.privacy.dlp.v2beta1.DatastoreOptions)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  projection_.MergeFrom(from.projection_);
  if (from.has_partition_id()) {
    mutable_partition_id()->::google::privacy::dlp::v2beta1::PartitionId::MergeFrom(from.partition_id());
  }
  if (from.has_kind()) {
    mutable_kind()->::google::privacy::dlp::v2beta1::KindExpression::MergeFrom(from.kind());
  }
}

void DatastoreOptions::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.privacy.dlp.v2beta1.DatastoreOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DatastoreOptions::CopyFrom(const DatastoreOptions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.privacy.dlp.v2beta1.DatastoreOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DatastoreOptions::IsInitialized() const {
  return true;
}

void DatastoreOptions::Swap(DatastoreOptions* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DatastoreOptions::InternalSwap(DatastoreOptions* other) {
  using std::swap;
  projection_.InternalSwap(&other->projection_);
  swap(partition_id_, other->partition_id_);
  swap(kind_, other->kind_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DatastoreOptions::GetMetadata() const {
  protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fstorage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fstorage_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CloudStorageOptions_FileSet::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CloudStorageOptions_FileSet::kUrlFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CloudStorageOptions_FileSet::CloudStorageOptions_FileSet()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fstorage_2eproto::InitDefaultsCloudStorageOptions_FileSet();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.privacy.dlp.v2beta1.CloudStorageOptions.FileSet)
}
CloudStorageOptions_FileSet::CloudStorageOptions_FileSet(const CloudStorageOptions_FileSet& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.url().size() > 0) {
    url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
  }
  // @@protoc_insertion_point(copy_constructor:google.privacy.dlp.v2beta1.CloudStorageOptions.FileSet)
}

void CloudStorageOptions_FileSet::SharedCtor() {
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

CloudStorageOptions_FileSet::~CloudStorageOptions_FileSet() {
  // @@protoc_insertion_point(destructor:google.privacy.dlp.v2beta1.CloudStorageOptions.FileSet)
  SharedDtor();
}

void CloudStorageOptions_FileSet::SharedDtor() {
  url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CloudStorageOptions_FileSet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CloudStorageOptions_FileSet::descriptor() {
  ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fstorage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fstorage_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CloudStorageOptions_FileSet& CloudStorageOptions_FileSet::default_instance() {
  ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fstorage_2eproto::InitDefaultsCloudStorageOptions_FileSet();
  return *internal_default_instance();
}

CloudStorageOptions_FileSet* CloudStorageOptions_FileSet::New(::google::protobuf::Arena* arena) const {
  CloudStorageOptions_FileSet* n = new CloudStorageOptions_FileSet;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CloudStorageOptions_FileSet::Clear() {
// @@protoc_insertion_point(message_clear_start:google.privacy.dlp.v2beta1.CloudStorageOptions.FileSet)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool CloudStorageOptions_FileSet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.privacy.dlp.v2beta1.CloudStorageOptions.FileSet)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string url = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_url()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->url().data(), static_cast<int>(this->url().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.privacy.dlp.v2beta1.CloudStorageOptions.FileSet.url"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.privacy.dlp.v2beta1.CloudStorageOptions.FileSet)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.privacy.dlp.v2beta1.CloudStorageOptions.FileSet)
  return false;
#undef DO_
}

void CloudStorageOptions_FileSet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.privacy.dlp.v2beta1.CloudStorageOptions.FileSet)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string url = 1;
  if (this->url().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->url().data(), static_cast<int>(this->url().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.privacy.dlp.v2beta1.CloudStorageOptions.FileSet.url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->url(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:google.privacy.dlp.v2beta1.CloudStorageOptions.FileSet)
}

::google::protobuf::uint8* CloudStorageOptions_FileSet::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.privacy.dlp.v2beta1.CloudStorageOptions.FileSet)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string url = 1;
  if (this->url().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->url().data(), static_cast<int>(this->url().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.privacy.dlp.v2beta1.CloudStorageOptions.FileSet.url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->url(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.privacy.dlp.v2beta1.CloudStorageOptions.FileSet)
  return target;
}

size_t CloudStorageOptions_FileSet::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.privacy.dlp.v2beta1.CloudStorageOptions.FileSet)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string url = 1;
  if (this->url().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->url());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CloudStorageOptions_FileSet::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.privacy.dlp.v2beta1.CloudStorageOptions.FileSet)
  GOOGLE_DCHECK_NE(&from, this);
  const CloudStorageOptions_FileSet* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CloudStorageOptions_FileSet>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.privacy.dlp.v2beta1.CloudStorageOptions.FileSet)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.privacy.dlp.v2beta1.CloudStorageOptions.FileSet)
    MergeFrom(*source);
  }
}

void CloudStorageOptions_FileSet::MergeFrom(const CloudStorageOptions_FileSet& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.privacy.dlp.v2beta1.CloudStorageOptions.FileSet)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.url().size() > 0) {

    url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
  }
}

void CloudStorageOptions_FileSet::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.privacy.dlp.v2beta1.CloudStorageOptions.FileSet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CloudStorageOptions_FileSet::CopyFrom(const CloudStorageOptions_FileSet& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.privacy.dlp.v2beta1.CloudStorageOptions.FileSet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CloudStorageOptions_FileSet::IsInitialized() const {
  return true;
}

void CloudStorageOptions_FileSet::Swap(CloudStorageOptions_FileSet* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CloudStorageOptions_FileSet::InternalSwap(CloudStorageOptions_FileSet* other) {
  using std::swap;
  url_.Swap(&other->url_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CloudStorageOptions_FileSet::GetMetadata() const {
  protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fstorage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fstorage_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CloudStorageOptions::InitAsDefaultInstance() {
  ::google::privacy::dlp::v2beta1::_CloudStorageOptions_default_instance_._instance.get_mutable()->file_set_ = const_cast< ::google::privacy::dlp::v2beta1::CloudStorageOptions_FileSet*>(
      ::google::privacy::dlp::v2beta1::CloudStorageOptions_FileSet::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CloudStorageOptions::kFileSetFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CloudStorageOptions::CloudStorageOptions()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fstorage_2eproto::InitDefaultsCloudStorageOptions();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.privacy.dlp.v2beta1.CloudStorageOptions)
}
CloudStorageOptions::CloudStorageOptions(const CloudStorageOptions& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_file_set()) {
    file_set_ = new ::google::privacy::dlp::v2beta1::CloudStorageOptions_FileSet(*from.file_set_);
  } else {
    file_set_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:google.privacy.dlp.v2beta1.CloudStorageOptions)
}

void CloudStorageOptions::SharedCtor() {
  file_set_ = NULL;
  _cached_size_ = 0;
}

CloudStorageOptions::~CloudStorageOptions() {
  // @@protoc_insertion_point(destructor:google.privacy.dlp.v2beta1.CloudStorageOptions)
  SharedDtor();
}

void CloudStorageOptions::SharedDtor() {
  if (this != internal_default_instance()) delete file_set_;
}

void CloudStorageOptions::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CloudStorageOptions::descriptor() {
  ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fstorage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fstorage_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CloudStorageOptions& CloudStorageOptions::default_instance() {
  ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fstorage_2eproto::InitDefaultsCloudStorageOptions();
  return *internal_default_instance();
}

CloudStorageOptions* CloudStorageOptions::New(::google::protobuf::Arena* arena) const {
  CloudStorageOptions* n = new CloudStorageOptions;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CloudStorageOptions::Clear() {
// @@protoc_insertion_point(message_clear_start:google.privacy.dlp.v2beta1.CloudStorageOptions)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && file_set_ != NULL) {
    delete file_set_;
  }
  file_set_ = NULL;
  _internal_metadata_.Clear();
}

bool CloudStorageOptions::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.privacy.dlp.v2beta1.CloudStorageOptions)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .google.privacy.dlp.v2beta1.CloudStorageOptions.FileSet file_set = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_file_set()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.privacy.dlp.v2beta1.CloudStorageOptions)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.privacy.dlp.v2beta1.CloudStorageOptions)
  return false;
#undef DO_
}

void CloudStorageOptions::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.privacy.dlp.v2beta1.CloudStorageOptions)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.privacy.dlp.v2beta1.CloudStorageOptions.FileSet file_set = 1;
  if (this->has_file_set()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->file_set_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:google.privacy.dlp.v2beta1.CloudStorageOptions)
}

::google::protobuf::uint8* CloudStorageOptions::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.privacy.dlp.v2beta1.CloudStorageOptions)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.privacy.dlp.v2beta1.CloudStorageOptions.FileSet file_set = 1;
  if (this->has_file_set()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->file_set_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.privacy.dlp.v2beta1.CloudStorageOptions)
  return target;
}

size_t CloudStorageOptions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.privacy.dlp.v2beta1.CloudStorageOptions)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .google.privacy.dlp.v2beta1.CloudStorageOptions.FileSet file_set = 1;
  if (this->has_file_set()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->file_set_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CloudStorageOptions::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.privacy.dlp.v2beta1.CloudStorageOptions)
  GOOGLE_DCHECK_NE(&from, this);
  const CloudStorageOptions* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CloudStorageOptions>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.privacy.dlp.v2beta1.CloudStorageOptions)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.privacy.dlp.v2beta1.CloudStorageOptions)
    MergeFrom(*source);
  }
}

void CloudStorageOptions::MergeFrom(const CloudStorageOptions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.privacy.dlp.v2beta1.CloudStorageOptions)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_file_set()) {
    mutable_file_set()->::google::privacy::dlp::v2beta1::CloudStorageOptions_FileSet::MergeFrom(from.file_set());
  }
}

void CloudStorageOptions::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.privacy.dlp.v2beta1.CloudStorageOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CloudStorageOptions::CopyFrom(const CloudStorageOptions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.privacy.dlp.v2beta1.CloudStorageOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CloudStorageOptions::IsInitialized() const {
  return true;
}

void CloudStorageOptions::Swap(CloudStorageOptions* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CloudStorageOptions::InternalSwap(CloudStorageOptions* other) {
  using std::swap;
  swap(file_set_, other->file_set_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CloudStorageOptions::GetMetadata() const {
  protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fstorage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fstorage_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CloudStoragePath::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CloudStoragePath::kPathFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CloudStoragePath::CloudStoragePath()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fstorage_2eproto::InitDefaultsCloudStoragePath();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.privacy.dlp.v2beta1.CloudStoragePath)
}
CloudStoragePath::CloudStoragePath(const CloudStoragePath& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.path().size() > 0) {
    path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.path_);
  }
  // @@protoc_insertion_point(copy_constructor:google.privacy.dlp.v2beta1.CloudStoragePath)
}

void CloudStoragePath::SharedCtor() {
  path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

CloudStoragePath::~CloudStoragePath() {
  // @@protoc_insertion_point(destructor:google.privacy.dlp.v2beta1.CloudStoragePath)
  SharedDtor();
}

void CloudStoragePath::SharedDtor() {
  path_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CloudStoragePath::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CloudStoragePath::descriptor() {
  ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fstorage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fstorage_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CloudStoragePath& CloudStoragePath::default_instance() {
  ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fstorage_2eproto::InitDefaultsCloudStoragePath();
  return *internal_default_instance();
}

CloudStoragePath* CloudStoragePath::New(::google::protobuf::Arena* arena) const {
  CloudStoragePath* n = new CloudStoragePath;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CloudStoragePath::Clear() {
// @@protoc_insertion_point(message_clear_start:google.privacy.dlp.v2beta1.CloudStoragePath)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool CloudStoragePath::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.privacy.dlp.v2beta1.CloudStoragePath)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string path = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_path()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->path().data(), static_cast<int>(this->path().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.privacy.dlp.v2beta1.CloudStoragePath.path"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.privacy.dlp.v2beta1.CloudStoragePath)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.privacy.dlp.v2beta1.CloudStoragePath)
  return false;
#undef DO_
}

void CloudStoragePath::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.privacy.dlp.v2beta1.CloudStoragePath)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string path = 1;
  if (this->path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->path().data(), static_cast<int>(this->path().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.privacy.dlp.v2beta1.CloudStoragePath.path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->path(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:google.privacy.dlp.v2beta1.CloudStoragePath)
}

::google::protobuf::uint8* CloudStoragePath::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.privacy.dlp.v2beta1.CloudStoragePath)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string path = 1;
  if (this->path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->path().data(), static_cast<int>(this->path().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.privacy.dlp.v2beta1.CloudStoragePath.path");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->path(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.privacy.dlp.v2beta1.CloudStoragePath)
  return target;
}

size_t CloudStoragePath::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.privacy.dlp.v2beta1.CloudStoragePath)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string path = 1;
  if (this->path().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->path());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CloudStoragePath::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.privacy.dlp.v2beta1.CloudStoragePath)
  GOOGLE_DCHECK_NE(&from, this);
  const CloudStoragePath* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CloudStoragePath>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.privacy.dlp.v2beta1.CloudStoragePath)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.privacy.dlp.v2beta1.CloudStoragePath)
    MergeFrom(*source);
  }
}

void CloudStoragePath::MergeFrom(const CloudStoragePath& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.privacy.dlp.v2beta1.CloudStoragePath)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.path().size() > 0) {

    path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.path_);
  }
}

void CloudStoragePath::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.privacy.dlp.v2beta1.CloudStoragePath)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CloudStoragePath::CopyFrom(const CloudStoragePath& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.privacy.dlp.v2beta1.CloudStoragePath)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CloudStoragePath::IsInitialized() const {
  return true;
}

void CloudStoragePath::Swap(CloudStoragePath* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CloudStoragePath::InternalSwap(CloudStoragePath* other) {
  using std::swap;
  path_.Swap(&other->path_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CloudStoragePath::GetMetadata() const {
  protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fstorage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fstorage_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void BigQueryOptions::InitAsDefaultInstance() {
  ::google::privacy::dlp::v2beta1::_BigQueryOptions_default_instance_._instance.get_mutable()->table_reference_ = const_cast< ::google::privacy::dlp::v2beta1::BigQueryTable*>(
      ::google::privacy::dlp::v2beta1::BigQueryTable::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BigQueryOptions::kTableReferenceFieldNumber;
const int BigQueryOptions::kIdentifyingFieldsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BigQueryOptions::BigQueryOptions()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fstorage_2eproto::InitDefaultsBigQueryOptions();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.privacy.dlp.v2beta1.BigQueryOptions)
}
BigQueryOptions::BigQueryOptions(const BigQueryOptions& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      identifying_fields_(from.identifying_fields_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_table_reference()) {
    table_reference_ = new ::google::privacy::dlp::v2beta1::BigQueryTable(*from.table_reference_);
  } else {
    table_reference_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:google.privacy.dlp.v2beta1.BigQueryOptions)
}

void BigQueryOptions::SharedCtor() {
  table_reference_ = NULL;
  _cached_size_ = 0;
}

BigQueryOptions::~BigQueryOptions() {
  // @@protoc_insertion_point(destructor:google.privacy.dlp.v2beta1.BigQueryOptions)
  SharedDtor();
}

void BigQueryOptions::SharedDtor() {
  if (this != internal_default_instance()) delete table_reference_;
}

void BigQueryOptions::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BigQueryOptions::descriptor() {
  ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fstorage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fstorage_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const BigQueryOptions& BigQueryOptions::default_instance() {
  ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fstorage_2eproto::InitDefaultsBigQueryOptions();
  return *internal_default_instance();
}

BigQueryOptions* BigQueryOptions::New(::google::protobuf::Arena* arena) const {
  BigQueryOptions* n = new BigQueryOptions;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BigQueryOptions::Clear() {
// @@protoc_insertion_point(message_clear_start:google.privacy.dlp.v2beta1.BigQueryOptions)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  identifying_fields_.Clear();
  if (GetArenaNoVirtual() == NULL && table_reference_ != NULL) {
    delete table_reference_;
  }
  table_reference_ = NULL;
  _internal_metadata_.Clear();
}

bool BigQueryOptions::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.privacy.dlp.v2beta1.BigQueryOptions)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .google.privacy.dlp.v2beta1.BigQueryTable table_reference = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_table_reference()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .google.privacy.dlp.v2beta1.FieldId identifying_fields = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_identifying_fields()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.privacy.dlp.v2beta1.BigQueryOptions)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.privacy.dlp.v2beta1.BigQueryOptions)
  return false;
#undef DO_
}

void BigQueryOptions::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.privacy.dlp.v2beta1.BigQueryOptions)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.privacy.dlp.v2beta1.BigQueryTable table_reference = 1;
  if (this->has_table_reference()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->table_reference_, output);
  }

  // repeated .google.privacy.dlp.v2beta1.FieldId identifying_fields = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->identifying_fields_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->identifying_fields(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:google.privacy.dlp.v2beta1.BigQueryOptions)
}

::google::protobuf::uint8* BigQueryOptions::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.privacy.dlp.v2beta1.BigQueryOptions)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.privacy.dlp.v2beta1.BigQueryTable table_reference = 1;
  if (this->has_table_reference()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->table_reference_, deterministic, target);
  }

  // repeated .google.privacy.dlp.v2beta1.FieldId identifying_fields = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->identifying_fields_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->identifying_fields(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.privacy.dlp.v2beta1.BigQueryOptions)
  return target;
}

size_t BigQueryOptions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.privacy.dlp.v2beta1.BigQueryOptions)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .google.privacy.dlp.v2beta1.FieldId identifying_fields = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->identifying_fields_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->identifying_fields(static_cast<int>(i)));
    }
  }

  // .google.privacy.dlp.v2beta1.BigQueryTable table_reference = 1;
  if (this->has_table_reference()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->table_reference_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BigQueryOptions::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.privacy.dlp.v2beta1.BigQueryOptions)
  GOOGLE_DCHECK_NE(&from, this);
  const BigQueryOptions* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BigQueryOptions>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.privacy.dlp.v2beta1.BigQueryOptions)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.privacy.dlp.v2beta1.BigQueryOptions)
    MergeFrom(*source);
  }
}

void BigQueryOptions::MergeFrom(const BigQueryOptions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.privacy.dlp.v2beta1.BigQueryOptions)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  identifying_fields_.MergeFrom(from.identifying_fields_);
  if (from.has_table_reference()) {
    mutable_table_reference()->::google::privacy::dlp::v2beta1::BigQueryTable::MergeFrom(from.table_reference());
  }
}

void BigQueryOptions::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.privacy.dlp.v2beta1.BigQueryOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BigQueryOptions::CopyFrom(const BigQueryOptions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.privacy.dlp.v2beta1.BigQueryOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BigQueryOptions::IsInitialized() const {
  return true;
}

void BigQueryOptions::Swap(BigQueryOptions* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BigQueryOptions::InternalSwap(BigQueryOptions* other) {
  using std::swap;
  identifying_fields_.InternalSwap(&other->identifying_fields_);
  swap(table_reference_, other->table_reference_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BigQueryOptions::GetMetadata() const {
  protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fstorage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fstorage_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void StorageConfig::InitAsDefaultInstance() {
  ::google::privacy::dlp::v2beta1::_StorageConfig_default_instance_.datastore_options_ = const_cast< ::google::privacy::dlp::v2beta1::DatastoreOptions*>(
      ::google::privacy::dlp::v2beta1::DatastoreOptions::internal_default_instance());
  ::google::privacy::dlp::v2beta1::_StorageConfig_default_instance_.cloud_storage_options_ = const_cast< ::google::privacy::dlp::v2beta1::CloudStorageOptions*>(
      ::google::privacy::dlp::v2beta1::CloudStorageOptions::internal_default_instance());
  ::google::privacy::dlp::v2beta1::_StorageConfig_default_instance_.big_query_options_ = const_cast< ::google::privacy::dlp::v2beta1::BigQueryOptions*>(
      ::google::privacy::dlp::v2beta1::BigQueryOptions::internal_default_instance());
}
void StorageConfig::set_allocated_datastore_options(::google::privacy::dlp::v2beta1::DatastoreOptions* datastore_options) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_type();
  if (datastore_options) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      datastore_options = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, datastore_options, submessage_arena);
    }
    set_has_datastore_options();
    type_.datastore_options_ = datastore_options;
  }
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2beta1.StorageConfig.datastore_options)
}
void StorageConfig::set_allocated_cloud_storage_options(::google::privacy::dlp::v2beta1::CloudStorageOptions* cloud_storage_options) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_type();
  if (cloud_storage_options) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      cloud_storage_options = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, cloud_storage_options, submessage_arena);
    }
    set_has_cloud_storage_options();
    type_.cloud_storage_options_ = cloud_storage_options;
  }
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2beta1.StorageConfig.cloud_storage_options)
}
void StorageConfig::set_allocated_big_query_options(::google::privacy::dlp::v2beta1::BigQueryOptions* big_query_options) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_type();
  if (big_query_options) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      big_query_options = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, big_query_options, submessage_arena);
    }
    set_has_big_query_options();
    type_.big_query_options_ = big_query_options;
  }
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2beta1.StorageConfig.big_query_options)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StorageConfig::kDatastoreOptionsFieldNumber;
const int StorageConfig::kCloudStorageOptionsFieldNumber;
const int StorageConfig::kBigQueryOptionsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StorageConfig::StorageConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fstorage_2eproto::InitDefaultsStorageConfig();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.privacy.dlp.v2beta1.StorageConfig)
}
StorageConfig::StorageConfig(const StorageConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_type();
  switch (from.type_case()) {
    case kDatastoreOptions: {
      mutable_datastore_options()->::google::privacy::dlp::v2beta1::DatastoreOptions::MergeFrom(from.datastore_options());
      break;
    }
    case kCloudStorageOptions: {
      mutable_cloud_storage_options()->::google::privacy::dlp::v2beta1::CloudStorageOptions::MergeFrom(from.cloud_storage_options());
      break;
    }
    case kBigQueryOptions: {
      mutable_big_query_options()->::google::privacy::dlp::v2beta1::BigQueryOptions::MergeFrom(from.big_query_options());
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:google.privacy.dlp.v2beta1.StorageConfig)
}

void StorageConfig::SharedCtor() {
  clear_has_type();
  _cached_size_ = 0;
}

StorageConfig::~StorageConfig() {
  // @@protoc_insertion_point(destructor:google.privacy.dlp.v2beta1.StorageConfig)
  SharedDtor();
}

void StorageConfig::SharedDtor() {
  if (has_type()) {
    clear_type();
  }
}

void StorageConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StorageConfig::descriptor() {
  ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fstorage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fstorage_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const StorageConfig& StorageConfig::default_instance() {
  ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fstorage_2eproto::InitDefaultsStorageConfig();
  return *internal_default_instance();
}

StorageConfig* StorageConfig::New(::google::protobuf::Arena* arena) const {
  StorageConfig* n = new StorageConfig;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void StorageConfig::clear_type() {
// @@protoc_insertion_point(one_of_clear_start:google.privacy.dlp.v2beta1.StorageConfig)
  switch (type_case()) {
    case kDatastoreOptions: {
      delete type_.datastore_options_;
      break;
    }
    case kCloudStorageOptions: {
      delete type_.cloud_storage_options_;
      break;
    }
    case kBigQueryOptions: {
      delete type_.big_query_options_;
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = TYPE_NOT_SET;
}


void StorageConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:google.privacy.dlp.v2beta1.StorageConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_type();
  _internal_metadata_.Clear();
}

bool StorageConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.privacy.dlp.v2beta1.StorageConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .google.privacy.dlp.v2beta1.DatastoreOptions datastore_options = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_datastore_options()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.privacy.dlp.v2beta1.CloudStorageOptions cloud_storage_options = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_cloud_storage_options()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.privacy.dlp.v2beta1.BigQueryOptions big_query_options = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_big_query_options()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.privacy.dlp.v2beta1.StorageConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.privacy.dlp.v2beta1.StorageConfig)
  return false;
#undef DO_
}

void StorageConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.privacy.dlp.v2beta1.StorageConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.privacy.dlp.v2beta1.DatastoreOptions datastore_options = 2;
  if (has_datastore_options()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *type_.datastore_options_, output);
  }

  // .google.privacy.dlp.v2beta1.CloudStorageOptions cloud_storage_options = 3;
  if (has_cloud_storage_options()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *type_.cloud_storage_options_, output);
  }

  // .google.privacy.dlp.v2beta1.BigQueryOptions big_query_options = 4;
  if (has_big_query_options()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *type_.big_query_options_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:google.privacy.dlp.v2beta1.StorageConfig)
}

::google::protobuf::uint8* StorageConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.privacy.dlp.v2beta1.StorageConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.privacy.dlp.v2beta1.DatastoreOptions datastore_options = 2;
  if (has_datastore_options()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, *type_.datastore_options_, deterministic, target);
  }

  // .google.privacy.dlp.v2beta1.CloudStorageOptions cloud_storage_options = 3;
  if (has_cloud_storage_options()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, *type_.cloud_storage_options_, deterministic, target);
  }

  // .google.privacy.dlp.v2beta1.BigQueryOptions big_query_options = 4;
  if (has_big_query_options()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, *type_.big_query_options_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.privacy.dlp.v2beta1.StorageConfig)
  return target;
}

size_t StorageConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.privacy.dlp.v2beta1.StorageConfig)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  switch (type_case()) {
    // .google.privacy.dlp.v2beta1.DatastoreOptions datastore_options = 2;
    case kDatastoreOptions: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *type_.datastore_options_);
      break;
    }
    // .google.privacy.dlp.v2beta1.CloudStorageOptions cloud_storage_options = 3;
    case kCloudStorageOptions: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *type_.cloud_storage_options_);
      break;
    }
    // .google.privacy.dlp.v2beta1.BigQueryOptions big_query_options = 4;
    case kBigQueryOptions: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *type_.big_query_options_);
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StorageConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.privacy.dlp.v2beta1.StorageConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const StorageConfig* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const StorageConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.privacy.dlp.v2beta1.StorageConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.privacy.dlp.v2beta1.StorageConfig)
    MergeFrom(*source);
  }
}

void StorageConfig::MergeFrom(const StorageConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.privacy.dlp.v2beta1.StorageConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.type_case()) {
    case kDatastoreOptions: {
      mutable_datastore_options()->::google::privacy::dlp::v2beta1::DatastoreOptions::MergeFrom(from.datastore_options());
      break;
    }
    case kCloudStorageOptions: {
      mutable_cloud_storage_options()->::google::privacy::dlp::v2beta1::CloudStorageOptions::MergeFrom(from.cloud_storage_options());
      break;
    }
    case kBigQueryOptions: {
      mutable_big_query_options()->::google::privacy::dlp::v2beta1::BigQueryOptions::MergeFrom(from.big_query_options());
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
}

void StorageConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.privacy.dlp.v2beta1.StorageConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StorageConfig::CopyFrom(const StorageConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.privacy.dlp.v2beta1.StorageConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StorageConfig::IsInitialized() const {
  return true;
}

void StorageConfig::Swap(StorageConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StorageConfig::InternalSwap(StorageConfig* other) {
  using std::swap;
  swap(type_, other->type_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata StorageConfig::GetMetadata() const {
  protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fstorage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fstorage_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CloudStorageKey::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CloudStorageKey::kFilePathFieldNumber;
const int CloudStorageKey::kStartOffsetFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CloudStorageKey::CloudStorageKey()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fstorage_2eproto::InitDefaultsCloudStorageKey();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.privacy.dlp.v2beta1.CloudStorageKey)
}
CloudStorageKey::CloudStorageKey(const CloudStorageKey& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  file_path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.file_path().size() > 0) {
    file_path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.file_path_);
  }
  start_offset_ = from.start_offset_;
  // @@protoc_insertion_point(copy_constructor:google.privacy.dlp.v2beta1.CloudStorageKey)
}

void CloudStorageKey::SharedCtor() {
  file_path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  start_offset_ = GOOGLE_LONGLONG(0);
  _cached_size_ = 0;
}

CloudStorageKey::~CloudStorageKey() {
  // @@protoc_insertion_point(destructor:google.privacy.dlp.v2beta1.CloudStorageKey)
  SharedDtor();
}

void CloudStorageKey::SharedDtor() {
  file_path_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CloudStorageKey::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CloudStorageKey::descriptor() {
  ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fstorage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fstorage_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CloudStorageKey& CloudStorageKey::default_instance() {
  ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fstorage_2eproto::InitDefaultsCloudStorageKey();
  return *internal_default_instance();
}

CloudStorageKey* CloudStorageKey::New(::google::protobuf::Arena* arena) const {
  CloudStorageKey* n = new CloudStorageKey;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CloudStorageKey::Clear() {
// @@protoc_insertion_point(message_clear_start:google.privacy.dlp.v2beta1.CloudStorageKey)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  file_path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  start_offset_ = GOOGLE_LONGLONG(0);
  _internal_metadata_.Clear();
}

bool CloudStorageKey::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.privacy.dlp.v2beta1.CloudStorageKey)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string file_path = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_file_path()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->file_path().data(), static_cast<int>(this->file_path().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.privacy.dlp.v2beta1.CloudStorageKey.file_path"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 start_offset = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &start_offset_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.privacy.dlp.v2beta1.CloudStorageKey)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.privacy.dlp.v2beta1.CloudStorageKey)
  return false;
#undef DO_
}

void CloudStorageKey::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.privacy.dlp.v2beta1.CloudStorageKey)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string file_path = 1;
  if (this->file_path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->file_path().data(), static_cast<int>(this->file_path().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.privacy.dlp.v2beta1.CloudStorageKey.file_path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->file_path(), output);
  }

  // int64 start_offset = 2;
  if (this->start_offset() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->start_offset(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:google.privacy.dlp.v2beta1.CloudStorageKey)
}

::google::protobuf::uint8* CloudStorageKey::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.privacy.dlp.v2beta1.CloudStorageKey)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string file_path = 1;
  if (this->file_path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->file_path().data(), static_cast<int>(this->file_path().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.privacy.dlp.v2beta1.CloudStorageKey.file_path");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->file_path(), target);
  }

  // int64 start_offset = 2;
  if (this->start_offset() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->start_offset(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.privacy.dlp.v2beta1.CloudStorageKey)
  return target;
}

size_t CloudStorageKey::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.privacy.dlp.v2beta1.CloudStorageKey)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string file_path = 1;
  if (this->file_path().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->file_path());
  }

  // int64 start_offset = 2;
  if (this->start_offset() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->start_offset());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CloudStorageKey::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.privacy.dlp.v2beta1.CloudStorageKey)
  GOOGLE_DCHECK_NE(&from, this);
  const CloudStorageKey* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CloudStorageKey>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.privacy.dlp.v2beta1.CloudStorageKey)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.privacy.dlp.v2beta1.CloudStorageKey)
    MergeFrom(*source);
  }
}

void CloudStorageKey::MergeFrom(const CloudStorageKey& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.privacy.dlp.v2beta1.CloudStorageKey)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.file_path().size() > 0) {

    file_path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.file_path_);
  }
  if (from.start_offset() != 0) {
    set_start_offset(from.start_offset());
  }
}

void CloudStorageKey::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.privacy.dlp.v2beta1.CloudStorageKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CloudStorageKey::CopyFrom(const CloudStorageKey& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.privacy.dlp.v2beta1.CloudStorageKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CloudStorageKey::IsInitialized() const {
  return true;
}

void CloudStorageKey::Swap(CloudStorageKey* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CloudStorageKey::InternalSwap(CloudStorageKey* other) {
  using std::swap;
  file_path_.Swap(&other->file_path_);
  swap(start_offset_, other->start_offset_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CloudStorageKey::GetMetadata() const {
  protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fstorage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fstorage_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void DatastoreKey::InitAsDefaultInstance() {
  ::google::privacy::dlp::v2beta1::_DatastoreKey_default_instance_._instance.get_mutable()->entity_key_ = const_cast< ::google::privacy::dlp::v2beta1::Key*>(
      ::google::privacy::dlp::v2beta1::Key::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DatastoreKey::kEntityKeyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DatastoreKey::DatastoreKey()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fstorage_2eproto::InitDefaultsDatastoreKey();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.privacy.dlp.v2beta1.DatastoreKey)
}
DatastoreKey::DatastoreKey(const DatastoreKey& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_entity_key()) {
    entity_key_ = new ::google::privacy::dlp::v2beta1::Key(*from.entity_key_);
  } else {
    entity_key_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:google.privacy.dlp.v2beta1.DatastoreKey)
}

void DatastoreKey::SharedCtor() {
  entity_key_ = NULL;
  _cached_size_ = 0;
}

DatastoreKey::~DatastoreKey() {
  // @@protoc_insertion_point(destructor:google.privacy.dlp.v2beta1.DatastoreKey)
  SharedDtor();
}

void DatastoreKey::SharedDtor() {
  if (this != internal_default_instance()) delete entity_key_;
}

void DatastoreKey::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DatastoreKey::descriptor() {
  ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fstorage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fstorage_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DatastoreKey& DatastoreKey::default_instance() {
  ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fstorage_2eproto::InitDefaultsDatastoreKey();
  return *internal_default_instance();
}

DatastoreKey* DatastoreKey::New(::google::protobuf::Arena* arena) const {
  DatastoreKey* n = new DatastoreKey;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DatastoreKey::Clear() {
// @@protoc_insertion_point(message_clear_start:google.privacy.dlp.v2beta1.DatastoreKey)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && entity_key_ != NULL) {
    delete entity_key_;
  }
  entity_key_ = NULL;
  _internal_metadata_.Clear();
}

bool DatastoreKey::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.privacy.dlp.v2beta1.DatastoreKey)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .google.privacy.dlp.v2beta1.Key entity_key = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_entity_key()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.privacy.dlp.v2beta1.DatastoreKey)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.privacy.dlp.v2beta1.DatastoreKey)
  return false;
#undef DO_
}

void DatastoreKey::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.privacy.dlp.v2beta1.DatastoreKey)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.privacy.dlp.v2beta1.Key entity_key = 1;
  if (this->has_entity_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->entity_key_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:google.privacy.dlp.v2beta1.DatastoreKey)
}

::google::protobuf::uint8* DatastoreKey::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.privacy.dlp.v2beta1.DatastoreKey)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.privacy.dlp.v2beta1.Key entity_key = 1;
  if (this->has_entity_key()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->entity_key_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.privacy.dlp.v2beta1.DatastoreKey)
  return target;
}

size_t DatastoreKey::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.privacy.dlp.v2beta1.DatastoreKey)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .google.privacy.dlp.v2beta1.Key entity_key = 1;
  if (this->has_entity_key()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->entity_key_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DatastoreKey::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.privacy.dlp.v2beta1.DatastoreKey)
  GOOGLE_DCHECK_NE(&from, this);
  const DatastoreKey* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DatastoreKey>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.privacy.dlp.v2beta1.DatastoreKey)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.privacy.dlp.v2beta1.DatastoreKey)
    MergeFrom(*source);
  }
}

void DatastoreKey::MergeFrom(const DatastoreKey& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.privacy.dlp.v2beta1.DatastoreKey)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_entity_key()) {
    mutable_entity_key()->::google::privacy::dlp::v2beta1::Key::MergeFrom(from.entity_key());
  }
}

void DatastoreKey::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.privacy.dlp.v2beta1.DatastoreKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DatastoreKey::CopyFrom(const DatastoreKey& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.privacy.dlp.v2beta1.DatastoreKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DatastoreKey::IsInitialized() const {
  return true;
}

void DatastoreKey::Swap(DatastoreKey* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DatastoreKey::InternalSwap(DatastoreKey* other) {
  using std::swap;
  swap(entity_key_, other->entity_key_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DatastoreKey::GetMetadata() const {
  protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fstorage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fstorage_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Key_PathElement::InitAsDefaultInstance() {
  ::google::privacy::dlp::v2beta1::_Key_PathElement_default_instance_.id_ = GOOGLE_LONGLONG(0);
  ::google::privacy::dlp::v2beta1::_Key_PathElement_default_instance_.name_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Key_PathElement::kKindFieldNumber;
const int Key_PathElement::kIdFieldNumber;
const int Key_PathElement::kNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Key_PathElement::Key_PathElement()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fstorage_2eproto::InitDefaultsKey_PathElement();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.privacy.dlp.v2beta1.Key.PathElement)
}
Key_PathElement::Key_PathElement(const Key_PathElement& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  kind_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.kind().size() > 0) {
    kind_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.kind_);
  }
  clear_has_id_type();
  switch (from.id_type_case()) {
    case kId: {
      set_id(from.id());
      break;
    }
    case kName: {
      set_name(from.name());
      break;
    }
    case ID_TYPE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:google.privacy.dlp.v2beta1.Key.PathElement)
}

void Key_PathElement::SharedCtor() {
  kind_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_id_type();
  _cached_size_ = 0;
}

Key_PathElement::~Key_PathElement() {
  // @@protoc_insertion_point(destructor:google.privacy.dlp.v2beta1.Key.PathElement)
  SharedDtor();
}

void Key_PathElement::SharedDtor() {
  kind_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (has_id_type()) {
    clear_id_type();
  }
}

void Key_PathElement::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Key_PathElement::descriptor() {
  ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fstorage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fstorage_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Key_PathElement& Key_PathElement::default_instance() {
  ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fstorage_2eproto::InitDefaultsKey_PathElement();
  return *internal_default_instance();
}

Key_PathElement* Key_PathElement::New(::google::protobuf::Arena* arena) const {
  Key_PathElement* n = new Key_PathElement;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Key_PathElement::clear_id_type() {
// @@protoc_insertion_point(one_of_clear_start:google.privacy.dlp.v2beta1.Key.PathElement)
  switch (id_type_case()) {
    case kId: {
      // No need to clear
      break;
    }
    case kName: {
      id_type_.name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case ID_TYPE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = ID_TYPE_NOT_SET;
}


void Key_PathElement::Clear() {
// @@protoc_insertion_point(message_clear_start:google.privacy.dlp.v2beta1.Key.PathElement)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  kind_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_id_type();
  _internal_metadata_.Clear();
}

bool Key_PathElement::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.privacy.dlp.v2beta1.Key.PathElement)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string kind = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_kind()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->kind().data(), static_cast<int>(this->kind().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.privacy.dlp.v2beta1.Key.PathElement.kind"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          clear_id_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_type_.id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string name = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.privacy.dlp.v2beta1.Key.PathElement.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.privacy.dlp.v2beta1.Key.PathElement)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.privacy.dlp.v2beta1.Key.PathElement)
  return false;
#undef DO_
}

void Key_PathElement::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.privacy.dlp.v2beta1.Key.PathElement)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string kind = 1;
  if (this->kind().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->kind().data(), static_cast<int>(this->kind().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.privacy.dlp.v2beta1.Key.PathElement.kind");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->kind(), output);
  }

  // int64 id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->id(), output);
  }

  // string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.privacy.dlp.v2beta1.Key.PathElement.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->name(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:google.privacy.dlp.v2beta1.Key.PathElement)
}

::google::protobuf::uint8* Key_PathElement::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.privacy.dlp.v2beta1.Key.PathElement)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string kind = 1;
  if (this->kind().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->kind().data(), static_cast<int>(this->kind().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.privacy.dlp.v2beta1.Key.PathElement.kind");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->kind(), target);
  }

  // int64 id = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->id(), target);
  }

  // string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.privacy.dlp.v2beta1.Key.PathElement.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.privacy.dlp.v2beta1.Key.PathElement)
  return target;
}

size_t Key_PathElement::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.privacy.dlp.v2beta1.Key.PathElement)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string kind = 1;
  if (this->kind().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->kind());
  }

  switch (id_type_case()) {
    // int64 id = 2;
    case kId: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->id());
      break;
    }
    // string name = 3;
    case kName: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
      break;
    }
    case ID_TYPE_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Key_PathElement::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.privacy.dlp.v2beta1.Key.PathElement)
  GOOGLE_DCHECK_NE(&from, this);
  const Key_PathElement* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Key_PathElement>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.privacy.dlp.v2beta1.Key.PathElement)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.privacy.dlp.v2beta1.Key.PathElement)
    MergeFrom(*source);
  }
}

void Key_PathElement::MergeFrom(const Key_PathElement& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.privacy.dlp.v2beta1.Key.PathElement)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.kind().size() > 0) {

    kind_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.kind_);
  }
  switch (from.id_type_case()) {
    case kId: {
      set_id(from.id());
      break;
    }
    case kName: {
      set_name(from.name());
      break;
    }
    case ID_TYPE_NOT_SET: {
      break;
    }
  }
}

void Key_PathElement::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.privacy.dlp.v2beta1.Key.PathElement)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Key_PathElement::CopyFrom(const Key_PathElement& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.privacy.dlp.v2beta1.Key.PathElement)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Key_PathElement::IsInitialized() const {
  return true;
}

void Key_PathElement::Swap(Key_PathElement* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Key_PathElement::InternalSwap(Key_PathElement* other) {
  using std::swap;
  kind_.Swap(&other->kind_);
  swap(id_type_, other->id_type_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Key_PathElement::GetMetadata() const {
  protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fstorage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fstorage_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Key::InitAsDefaultInstance() {
  ::google::privacy::dlp::v2beta1::_Key_default_instance_._instance.get_mutable()->partition_id_ = const_cast< ::google::privacy::dlp::v2beta1::PartitionId*>(
      ::google::privacy::dlp::v2beta1::PartitionId::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Key::kPartitionIdFieldNumber;
const int Key::kPathFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Key::Key()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fstorage_2eproto::InitDefaultsKey();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.privacy.dlp.v2beta1.Key)
}
Key::Key(const Key& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      path_(from.path_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_partition_id()) {
    partition_id_ = new ::google::privacy::dlp::v2beta1::PartitionId(*from.partition_id_);
  } else {
    partition_id_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:google.privacy.dlp.v2beta1.Key)
}

void Key::SharedCtor() {
  partition_id_ = NULL;
  _cached_size_ = 0;
}

Key::~Key() {
  // @@protoc_insertion_point(destructor:google.privacy.dlp.v2beta1.Key)
  SharedDtor();
}

void Key::SharedDtor() {
  if (this != internal_default_instance()) delete partition_id_;
}

void Key::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Key::descriptor() {
  ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fstorage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fstorage_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Key& Key::default_instance() {
  ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fstorage_2eproto::InitDefaultsKey();
  return *internal_default_instance();
}

Key* Key::New(::google::protobuf::Arena* arena) const {
  Key* n = new Key;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Key::Clear() {
// @@protoc_insertion_point(message_clear_start:google.privacy.dlp.v2beta1.Key)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  path_.Clear();
  if (GetArenaNoVirtual() == NULL && partition_id_ != NULL) {
    delete partition_id_;
  }
  partition_id_ = NULL;
  _internal_metadata_.Clear();
}

bool Key::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.privacy.dlp.v2beta1.Key)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .google.privacy.dlp.v2beta1.PartitionId partition_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_partition_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .google.privacy.dlp.v2beta1.Key.PathElement path = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_path()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.privacy.dlp.v2beta1.Key)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.privacy.dlp.v2beta1.Key)
  return false;
#undef DO_
}

void Key::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.privacy.dlp.v2beta1.Key)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.privacy.dlp.v2beta1.PartitionId partition_id = 1;
  if (this->has_partition_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->partition_id_, output);
  }

  // repeated .google.privacy.dlp.v2beta1.Key.PathElement path = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->path_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->path(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:google.privacy.dlp.v2beta1.Key)
}

::google::protobuf::uint8* Key::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.privacy.dlp.v2beta1.Key)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.privacy.dlp.v2beta1.PartitionId partition_id = 1;
  if (this->has_partition_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->partition_id_, deterministic, target);
  }

  // repeated .google.privacy.dlp.v2beta1.Key.PathElement path = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->path_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->path(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.privacy.dlp.v2beta1.Key)
  return target;
}

size_t Key::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.privacy.dlp.v2beta1.Key)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .google.privacy.dlp.v2beta1.Key.PathElement path = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->path_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->path(static_cast<int>(i)));
    }
  }

  // .google.privacy.dlp.v2beta1.PartitionId partition_id = 1;
  if (this->has_partition_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->partition_id_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Key::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.privacy.dlp.v2beta1.Key)
  GOOGLE_DCHECK_NE(&from, this);
  const Key* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Key>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.privacy.dlp.v2beta1.Key)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.privacy.dlp.v2beta1.Key)
    MergeFrom(*source);
  }
}

void Key::MergeFrom(const Key& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.privacy.dlp.v2beta1.Key)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  path_.MergeFrom(from.path_);
  if (from.has_partition_id()) {
    mutable_partition_id()->::google::privacy::dlp::v2beta1::PartitionId::MergeFrom(from.partition_id());
  }
}

void Key::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.privacy.dlp.v2beta1.Key)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Key::CopyFrom(const Key& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.privacy.dlp.v2beta1.Key)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Key::IsInitialized() const {
  return true;
}

void Key::Swap(Key* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Key::InternalSwap(Key* other) {
  using std::swap;
  path_.InternalSwap(&other->path_);
  swap(partition_id_, other->partition_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Key::GetMetadata() const {
  protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fstorage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fstorage_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void RecordKey::InitAsDefaultInstance() {
  ::google::privacy::dlp::v2beta1::_RecordKey_default_instance_.cloud_storage_key_ = const_cast< ::google::privacy::dlp::v2beta1::CloudStorageKey*>(
      ::google::privacy::dlp::v2beta1::CloudStorageKey::internal_default_instance());
  ::google::privacy::dlp::v2beta1::_RecordKey_default_instance_.datastore_key_ = const_cast< ::google::privacy::dlp::v2beta1::DatastoreKey*>(
      ::google::privacy::dlp::v2beta1::DatastoreKey::internal_default_instance());
}
void RecordKey::set_allocated_cloud_storage_key(::google::privacy::dlp::v2beta1::CloudStorageKey* cloud_storage_key) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_type();
  if (cloud_storage_key) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      cloud_storage_key = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, cloud_storage_key, submessage_arena);
    }
    set_has_cloud_storage_key();
    type_.cloud_storage_key_ = cloud_storage_key;
  }
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2beta1.RecordKey.cloud_storage_key)
}
void RecordKey::set_allocated_datastore_key(::google::privacy::dlp::v2beta1::DatastoreKey* datastore_key) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_type();
  if (datastore_key) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      datastore_key = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, datastore_key, submessage_arena);
    }
    set_has_datastore_key();
    type_.datastore_key_ = datastore_key;
  }
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2beta1.RecordKey.datastore_key)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RecordKey::kCloudStorageKeyFieldNumber;
const int RecordKey::kDatastoreKeyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RecordKey::RecordKey()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fstorage_2eproto::InitDefaultsRecordKey();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.privacy.dlp.v2beta1.RecordKey)
}
RecordKey::RecordKey(const RecordKey& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_type();
  switch (from.type_case()) {
    case kCloudStorageKey: {
      mutable_cloud_storage_key()->::google::privacy::dlp::v2beta1::CloudStorageKey::MergeFrom(from.cloud_storage_key());
      break;
    }
    case kDatastoreKey: {
      mutable_datastore_key()->::google::privacy::dlp::v2beta1::DatastoreKey::MergeFrom(from.datastore_key());
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:google.privacy.dlp.v2beta1.RecordKey)
}

void RecordKey::SharedCtor() {
  clear_has_type();
  _cached_size_ = 0;
}

RecordKey::~RecordKey() {
  // @@protoc_insertion_point(destructor:google.privacy.dlp.v2beta1.RecordKey)
  SharedDtor();
}

void RecordKey::SharedDtor() {
  if (has_type()) {
    clear_type();
  }
}

void RecordKey::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RecordKey::descriptor() {
  ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fstorage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fstorage_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RecordKey& RecordKey::default_instance() {
  ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fstorage_2eproto::InitDefaultsRecordKey();
  return *internal_default_instance();
}

RecordKey* RecordKey::New(::google::protobuf::Arena* arena) const {
  RecordKey* n = new RecordKey;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RecordKey::clear_type() {
// @@protoc_insertion_point(one_of_clear_start:google.privacy.dlp.v2beta1.RecordKey)
  switch (type_case()) {
    case kCloudStorageKey: {
      delete type_.cloud_storage_key_;
      break;
    }
    case kDatastoreKey: {
      delete type_.datastore_key_;
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = TYPE_NOT_SET;
}


void RecordKey::Clear() {
// @@protoc_insertion_point(message_clear_start:google.privacy.dlp.v2beta1.RecordKey)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_type();
  _internal_metadata_.Clear();
}

bool RecordKey::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.privacy.dlp.v2beta1.RecordKey)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .google.privacy.dlp.v2beta1.CloudStorageKey cloud_storage_key = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_cloud_storage_key()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.privacy.dlp.v2beta1.DatastoreKey datastore_key = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_datastore_key()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.privacy.dlp.v2beta1.RecordKey)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.privacy.dlp.v2beta1.RecordKey)
  return false;
#undef DO_
}

void RecordKey::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.privacy.dlp.v2beta1.RecordKey)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.privacy.dlp.v2beta1.CloudStorageKey cloud_storage_key = 1;
  if (has_cloud_storage_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *type_.cloud_storage_key_, output);
  }

  // .google.privacy.dlp.v2beta1.DatastoreKey datastore_key = 2;
  if (has_datastore_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *type_.datastore_key_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:google.privacy.dlp.v2beta1.RecordKey)
}

::google::protobuf::uint8* RecordKey::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.privacy.dlp.v2beta1.RecordKey)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.privacy.dlp.v2beta1.CloudStorageKey cloud_storage_key = 1;
  if (has_cloud_storage_key()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *type_.cloud_storage_key_, deterministic, target);
  }

  // .google.privacy.dlp.v2beta1.DatastoreKey datastore_key = 2;
  if (has_datastore_key()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, *type_.datastore_key_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.privacy.dlp.v2beta1.RecordKey)
  return target;
}

size_t RecordKey::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.privacy.dlp.v2beta1.RecordKey)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  switch (type_case()) {
    // .google.privacy.dlp.v2beta1.CloudStorageKey cloud_storage_key = 1;
    case kCloudStorageKey: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *type_.cloud_storage_key_);
      break;
    }
    // .google.privacy.dlp.v2beta1.DatastoreKey datastore_key = 2;
    case kDatastoreKey: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *type_.datastore_key_);
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RecordKey::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.privacy.dlp.v2beta1.RecordKey)
  GOOGLE_DCHECK_NE(&from, this);
  const RecordKey* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RecordKey>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.privacy.dlp.v2beta1.RecordKey)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.privacy.dlp.v2beta1.RecordKey)
    MergeFrom(*source);
  }
}

void RecordKey::MergeFrom(const RecordKey& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.privacy.dlp.v2beta1.RecordKey)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.type_case()) {
    case kCloudStorageKey: {
      mutable_cloud_storage_key()->::google::privacy::dlp::v2beta1::CloudStorageKey::MergeFrom(from.cloud_storage_key());
      break;
    }
    case kDatastoreKey: {
      mutable_datastore_key()->::google::privacy::dlp::v2beta1::DatastoreKey::MergeFrom(from.datastore_key());
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
}

void RecordKey::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.privacy.dlp.v2beta1.RecordKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RecordKey::CopyFrom(const RecordKey& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.privacy.dlp.v2beta1.RecordKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RecordKey::IsInitialized() const {
  return true;
}

void RecordKey::Swap(RecordKey* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RecordKey::InternalSwap(RecordKey* other) {
  using std::swap;
  swap(type_, other->type_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RecordKey::GetMetadata() const {
  protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fstorage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fstorage_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void BigQueryTable::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BigQueryTable::kProjectIdFieldNumber;
const int BigQueryTable::kDatasetIdFieldNumber;
const int BigQueryTable::kTableIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BigQueryTable::BigQueryTable()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fstorage_2eproto::InitDefaultsBigQueryTable();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.privacy.dlp.v2beta1.BigQueryTable)
}
BigQueryTable::BigQueryTable(const BigQueryTable& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  project_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.project_id().size() > 0) {
    project_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.project_id_);
  }
  dataset_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.dataset_id().size() > 0) {
    dataset_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.dataset_id_);
  }
  table_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.table_id().size() > 0) {
    table_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.table_id_);
  }
  // @@protoc_insertion_point(copy_constructor:google.privacy.dlp.v2beta1.BigQueryTable)
}

void BigQueryTable::SharedCtor() {
  project_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dataset_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  table_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

BigQueryTable::~BigQueryTable() {
  // @@protoc_insertion_point(destructor:google.privacy.dlp.v2beta1.BigQueryTable)
  SharedDtor();
}

void BigQueryTable::SharedDtor() {
  project_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dataset_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  table_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void BigQueryTable::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BigQueryTable::descriptor() {
  ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fstorage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fstorage_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const BigQueryTable& BigQueryTable::default_instance() {
  ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fstorage_2eproto::InitDefaultsBigQueryTable();
  return *internal_default_instance();
}

BigQueryTable* BigQueryTable::New(::google::protobuf::Arena* arena) const {
  BigQueryTable* n = new BigQueryTable;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BigQueryTable::Clear() {
// @@protoc_insertion_point(message_clear_start:google.privacy.dlp.v2beta1.BigQueryTable)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  project_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dataset_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  table_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool BigQueryTable::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.privacy.dlp.v2beta1.BigQueryTable)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string project_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_project_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->project_id().data(), static_cast<int>(this->project_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.privacy.dlp.v2beta1.BigQueryTable.project_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string dataset_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dataset_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->dataset_id().data(), static_cast<int>(this->dataset_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.privacy.dlp.v2beta1.BigQueryTable.dataset_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string table_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_table_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->table_id().data(), static_cast<int>(this->table_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.privacy.dlp.v2beta1.BigQueryTable.table_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.privacy.dlp.v2beta1.BigQueryTable)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.privacy.dlp.v2beta1.BigQueryTable)
  return false;
#undef DO_
}

void BigQueryTable::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.privacy.dlp.v2beta1.BigQueryTable)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string project_id = 1;
  if (this->project_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->project_id().data(), static_cast<int>(this->project_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.privacy.dlp.v2beta1.BigQueryTable.project_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->project_id(), output);
  }

  // string dataset_id = 2;
  if (this->dataset_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->dataset_id().data(), static_cast<int>(this->dataset_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.privacy.dlp.v2beta1.BigQueryTable.dataset_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->dataset_id(), output);
  }

  // string table_id = 3;
  if (this->table_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->table_id().data(), static_cast<int>(this->table_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.privacy.dlp.v2beta1.BigQueryTable.table_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->table_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:google.privacy.dlp.v2beta1.BigQueryTable)
}

::google::protobuf::uint8* BigQueryTable::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.privacy.dlp.v2beta1.BigQueryTable)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string project_id = 1;
  if (this->project_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->project_id().data(), static_cast<int>(this->project_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.privacy.dlp.v2beta1.BigQueryTable.project_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->project_id(), target);
  }

  // string dataset_id = 2;
  if (this->dataset_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->dataset_id().data(), static_cast<int>(this->dataset_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.privacy.dlp.v2beta1.BigQueryTable.dataset_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->dataset_id(), target);
  }

  // string table_id = 3;
  if (this->table_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->table_id().data(), static_cast<int>(this->table_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.privacy.dlp.v2beta1.BigQueryTable.table_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->table_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.privacy.dlp.v2beta1.BigQueryTable)
  return target;
}

size_t BigQueryTable::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.privacy.dlp.v2beta1.BigQueryTable)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string project_id = 1;
  if (this->project_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->project_id());
  }

  // string dataset_id = 2;
  if (this->dataset_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->dataset_id());
  }

  // string table_id = 3;
  if (this->table_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->table_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BigQueryTable::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.privacy.dlp.v2beta1.BigQueryTable)
  GOOGLE_DCHECK_NE(&from, this);
  const BigQueryTable* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BigQueryTable>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.privacy.dlp.v2beta1.BigQueryTable)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.privacy.dlp.v2beta1.BigQueryTable)
    MergeFrom(*source);
  }
}

void BigQueryTable::MergeFrom(const BigQueryTable& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.privacy.dlp.v2beta1.BigQueryTable)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.project_id().size() > 0) {

    project_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.project_id_);
  }
  if (from.dataset_id().size() > 0) {

    dataset_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.dataset_id_);
  }
  if (from.table_id().size() > 0) {

    table_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.table_id_);
  }
}

void BigQueryTable::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.privacy.dlp.v2beta1.BigQueryTable)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BigQueryTable::CopyFrom(const BigQueryTable& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.privacy.dlp.v2beta1.BigQueryTable)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BigQueryTable::IsInitialized() const {
  return true;
}

void BigQueryTable::Swap(BigQueryTable* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BigQueryTable::InternalSwap(BigQueryTable* other) {
  using std::swap;
  project_id_.Swap(&other->project_id_);
  dataset_id_.Swap(&other->dataset_id_);
  table_id_.Swap(&other->table_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BigQueryTable::GetMetadata() const {
  protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fstorage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fstorage_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void EntityId::InitAsDefaultInstance() {
  ::google::privacy::dlp::v2beta1::_EntityId_default_instance_._instance.get_mutable()->field_ = const_cast< ::google::privacy::dlp::v2beta1::FieldId*>(
      ::google::privacy::dlp::v2beta1::FieldId::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EntityId::kFieldFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EntityId::EntityId()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fstorage_2eproto::InitDefaultsEntityId();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.privacy.dlp.v2beta1.EntityId)
}
EntityId::EntityId(const EntityId& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_field()) {
    field_ = new ::google::privacy::dlp::v2beta1::FieldId(*from.field_);
  } else {
    field_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:google.privacy.dlp.v2beta1.EntityId)
}

void EntityId::SharedCtor() {
  field_ = NULL;
  _cached_size_ = 0;
}

EntityId::~EntityId() {
  // @@protoc_insertion_point(destructor:google.privacy.dlp.v2beta1.EntityId)
  SharedDtor();
}

void EntityId::SharedDtor() {
  if (this != internal_default_instance()) delete field_;
}

void EntityId::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EntityId::descriptor() {
  ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fstorage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fstorage_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const EntityId& EntityId::default_instance() {
  ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fstorage_2eproto::InitDefaultsEntityId();
  return *internal_default_instance();
}

EntityId* EntityId::New(::google::protobuf::Arena* arena) const {
  EntityId* n = new EntityId;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void EntityId::Clear() {
// @@protoc_insertion_point(message_clear_start:google.privacy.dlp.v2beta1.EntityId)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && field_ != NULL) {
    delete field_;
  }
  field_ = NULL;
  _internal_metadata_.Clear();
}

bool EntityId::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.privacy.dlp.v2beta1.EntityId)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .google.privacy.dlp.v2beta1.FieldId field = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_field()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.privacy.dlp.v2beta1.EntityId)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.privacy.dlp.v2beta1.EntityId)
  return false;
#undef DO_
}

void EntityId::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.privacy.dlp.v2beta1.EntityId)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.privacy.dlp.v2beta1.FieldId field = 1;
  if (this->has_field()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->field_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:google.privacy.dlp.v2beta1.EntityId)
}

::google::protobuf::uint8* EntityId::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.privacy.dlp.v2beta1.EntityId)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.privacy.dlp.v2beta1.FieldId field = 1;
  if (this->has_field()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->field_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.privacy.dlp.v2beta1.EntityId)
  return target;
}

size_t EntityId::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.privacy.dlp.v2beta1.EntityId)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .google.privacy.dlp.v2beta1.FieldId field = 1;
  if (this->has_field()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->field_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EntityId::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.privacy.dlp.v2beta1.EntityId)
  GOOGLE_DCHECK_NE(&from, this);
  const EntityId* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const EntityId>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.privacy.dlp.v2beta1.EntityId)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.privacy.dlp.v2beta1.EntityId)
    MergeFrom(*source);
  }
}

void EntityId::MergeFrom(const EntityId& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.privacy.dlp.v2beta1.EntityId)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_field()) {
    mutable_field()->::google::privacy::dlp::v2beta1::FieldId::MergeFrom(from.field());
  }
}

void EntityId::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.privacy.dlp.v2beta1.EntityId)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EntityId::CopyFrom(const EntityId& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.privacy.dlp.v2beta1.EntityId)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EntityId::IsInitialized() const {
  return true;
}

void EntityId::Swap(EntityId* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EntityId::InternalSwap(EntityId* other) {
  using std::swap;
  swap(field_, other->field_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata EntityId::GetMetadata() const {
  protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fstorage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fstorage_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace v2beta1
}  // namespace dlp
}  // namespace privacy
}  // namespace google

// @@protoc_insertion_point(global_scope)
