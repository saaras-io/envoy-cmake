// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: google/logging/v2/logging_metrics.proto

#include "google/logging/v2/logging_metrics.pb.h"
#include "google/logging/v2/logging_metrics.grpc.pb.h"

#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace google {
namespace logging {
namespace v2 {

static const char* MetricsServiceV2_method_names[] = {
  "/google.logging.v2.MetricsServiceV2/ListLogMetrics",
  "/google.logging.v2.MetricsServiceV2/GetLogMetric",
  "/google.logging.v2.MetricsServiceV2/CreateLogMetric",
  "/google.logging.v2.MetricsServiceV2/UpdateLogMetric",
  "/google.logging.v2.MetricsServiceV2/DeleteLogMetric",
};

std::unique_ptr< MetricsServiceV2::Stub> MetricsServiceV2::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< MetricsServiceV2::Stub> stub(new MetricsServiceV2::Stub(channel));
  return stub;
}

MetricsServiceV2::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_ListLogMetrics_(MetricsServiceV2_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetLogMetric_(MetricsServiceV2_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CreateLogMetric_(MetricsServiceV2_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UpdateLogMetric_(MetricsServiceV2_method_names[3], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DeleteLogMetric_(MetricsServiceV2_method_names[4], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status MetricsServiceV2::Stub::ListLogMetrics(::grpc::ClientContext* context, const ::google::logging::v2::ListLogMetricsRequest& request, ::google::logging::v2::ListLogMetricsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_ListLogMetrics_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::google::logging::v2::ListLogMetricsResponse>* MetricsServiceV2::Stub::AsyncListLogMetricsRaw(::grpc::ClientContext* context, const ::google::logging::v2::ListLogMetricsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::logging::v2::ListLogMetricsResponse>::Create(channel_.get(), cq, rpcmethod_ListLogMetrics_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::google::logging::v2::ListLogMetricsResponse>* MetricsServiceV2::Stub::PrepareAsyncListLogMetricsRaw(::grpc::ClientContext* context, const ::google::logging::v2::ListLogMetricsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::logging::v2::ListLogMetricsResponse>::Create(channel_.get(), cq, rpcmethod_ListLogMetrics_, context, request, false);
}

::grpc::Status MetricsServiceV2::Stub::GetLogMetric(::grpc::ClientContext* context, const ::google::logging::v2::GetLogMetricRequest& request, ::google::logging::v2::LogMetric* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetLogMetric_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::google::logging::v2::LogMetric>* MetricsServiceV2::Stub::AsyncGetLogMetricRaw(::grpc::ClientContext* context, const ::google::logging::v2::GetLogMetricRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::logging::v2::LogMetric>::Create(channel_.get(), cq, rpcmethod_GetLogMetric_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::google::logging::v2::LogMetric>* MetricsServiceV2::Stub::PrepareAsyncGetLogMetricRaw(::grpc::ClientContext* context, const ::google::logging::v2::GetLogMetricRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::logging::v2::LogMetric>::Create(channel_.get(), cq, rpcmethod_GetLogMetric_, context, request, false);
}

::grpc::Status MetricsServiceV2::Stub::CreateLogMetric(::grpc::ClientContext* context, const ::google::logging::v2::CreateLogMetricRequest& request, ::google::logging::v2::LogMetric* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_CreateLogMetric_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::google::logging::v2::LogMetric>* MetricsServiceV2::Stub::AsyncCreateLogMetricRaw(::grpc::ClientContext* context, const ::google::logging::v2::CreateLogMetricRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::logging::v2::LogMetric>::Create(channel_.get(), cq, rpcmethod_CreateLogMetric_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::google::logging::v2::LogMetric>* MetricsServiceV2::Stub::PrepareAsyncCreateLogMetricRaw(::grpc::ClientContext* context, const ::google::logging::v2::CreateLogMetricRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::logging::v2::LogMetric>::Create(channel_.get(), cq, rpcmethod_CreateLogMetric_, context, request, false);
}

::grpc::Status MetricsServiceV2::Stub::UpdateLogMetric(::grpc::ClientContext* context, const ::google::logging::v2::UpdateLogMetricRequest& request, ::google::logging::v2::LogMetric* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_UpdateLogMetric_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::google::logging::v2::LogMetric>* MetricsServiceV2::Stub::AsyncUpdateLogMetricRaw(::grpc::ClientContext* context, const ::google::logging::v2::UpdateLogMetricRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::logging::v2::LogMetric>::Create(channel_.get(), cq, rpcmethod_UpdateLogMetric_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::google::logging::v2::LogMetric>* MetricsServiceV2::Stub::PrepareAsyncUpdateLogMetricRaw(::grpc::ClientContext* context, const ::google::logging::v2::UpdateLogMetricRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::logging::v2::LogMetric>::Create(channel_.get(), cq, rpcmethod_UpdateLogMetric_, context, request, false);
}

::grpc::Status MetricsServiceV2::Stub::DeleteLogMetric(::grpc::ClientContext* context, const ::google::logging::v2::DeleteLogMetricRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_DeleteLogMetric_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* MetricsServiceV2::Stub::AsyncDeleteLogMetricRaw(::grpc::ClientContext* context, const ::google::logging::v2::DeleteLogMetricRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::protobuf::Empty>::Create(channel_.get(), cq, rpcmethod_DeleteLogMetric_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* MetricsServiceV2::Stub::PrepareAsyncDeleteLogMetricRaw(::grpc::ClientContext* context, const ::google::logging::v2::DeleteLogMetricRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::protobuf::Empty>::Create(channel_.get(), cq, rpcmethod_DeleteLogMetric_, context, request, false);
}

MetricsServiceV2::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MetricsServiceV2_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MetricsServiceV2::Service, ::google::logging::v2::ListLogMetricsRequest, ::google::logging::v2::ListLogMetricsResponse>(
          std::mem_fn(&MetricsServiceV2::Service::ListLogMetrics), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MetricsServiceV2_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MetricsServiceV2::Service, ::google::logging::v2::GetLogMetricRequest, ::google::logging::v2::LogMetric>(
          std::mem_fn(&MetricsServiceV2::Service::GetLogMetric), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MetricsServiceV2_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MetricsServiceV2::Service, ::google::logging::v2::CreateLogMetricRequest, ::google::logging::v2::LogMetric>(
          std::mem_fn(&MetricsServiceV2::Service::CreateLogMetric), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MetricsServiceV2_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MetricsServiceV2::Service, ::google::logging::v2::UpdateLogMetricRequest, ::google::logging::v2::LogMetric>(
          std::mem_fn(&MetricsServiceV2::Service::UpdateLogMetric), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MetricsServiceV2_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MetricsServiceV2::Service, ::google::logging::v2::DeleteLogMetricRequest, ::google::protobuf::Empty>(
          std::mem_fn(&MetricsServiceV2::Service::DeleteLogMetric), this)));
}

MetricsServiceV2::Service::~Service() {
}

::grpc::Status MetricsServiceV2::Service::ListLogMetrics(::grpc::ServerContext* context, const ::google::logging::v2::ListLogMetricsRequest* request, ::google::logging::v2::ListLogMetricsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MetricsServiceV2::Service::GetLogMetric(::grpc::ServerContext* context, const ::google::logging::v2::GetLogMetricRequest* request, ::google::logging::v2::LogMetric* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MetricsServiceV2::Service::CreateLogMetric(::grpc::ServerContext* context, const ::google::logging::v2::CreateLogMetricRequest* request, ::google::logging::v2::LogMetric* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MetricsServiceV2::Service::UpdateLogMetric(::grpc::ServerContext* context, const ::google::logging::v2::UpdateLogMetricRequest* request, ::google::logging::v2::LogMetric* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MetricsServiceV2::Service::DeleteLogMetric(::grpc::ServerContext* context, const ::google::logging::v2::DeleteLogMetricRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace google
}  // namespace logging
}  // namespace v2

