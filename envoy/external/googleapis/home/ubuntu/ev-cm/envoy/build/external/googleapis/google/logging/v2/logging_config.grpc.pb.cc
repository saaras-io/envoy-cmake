// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: google/logging/v2/logging_config.proto

#include "google/logging/v2/logging_config.pb.h"
#include "google/logging/v2/logging_config.grpc.pb.h"

#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace google {
namespace logging {
namespace v2 {

static const char* ConfigServiceV2_method_names[] = {
  "/google.logging.v2.ConfigServiceV2/ListSinks",
  "/google.logging.v2.ConfigServiceV2/GetSink",
  "/google.logging.v2.ConfigServiceV2/CreateSink",
  "/google.logging.v2.ConfigServiceV2/UpdateSink",
  "/google.logging.v2.ConfigServiceV2/DeleteSink",
  "/google.logging.v2.ConfigServiceV2/ListExclusions",
  "/google.logging.v2.ConfigServiceV2/GetExclusion",
  "/google.logging.v2.ConfigServiceV2/CreateExclusion",
  "/google.logging.v2.ConfigServiceV2/UpdateExclusion",
  "/google.logging.v2.ConfigServiceV2/DeleteExclusion",
};

std::unique_ptr< ConfigServiceV2::Stub> ConfigServiceV2::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< ConfigServiceV2::Stub> stub(new ConfigServiceV2::Stub(channel));
  return stub;
}

ConfigServiceV2::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_ListSinks_(ConfigServiceV2_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetSink_(ConfigServiceV2_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CreateSink_(ConfigServiceV2_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UpdateSink_(ConfigServiceV2_method_names[3], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DeleteSink_(ConfigServiceV2_method_names[4], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ListExclusions_(ConfigServiceV2_method_names[5], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetExclusion_(ConfigServiceV2_method_names[6], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CreateExclusion_(ConfigServiceV2_method_names[7], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UpdateExclusion_(ConfigServiceV2_method_names[8], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DeleteExclusion_(ConfigServiceV2_method_names[9], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status ConfigServiceV2::Stub::ListSinks(::grpc::ClientContext* context, const ::google::logging::v2::ListSinksRequest& request, ::google::logging::v2::ListSinksResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_ListSinks_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::google::logging::v2::ListSinksResponse>* ConfigServiceV2::Stub::AsyncListSinksRaw(::grpc::ClientContext* context, const ::google::logging::v2::ListSinksRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::logging::v2::ListSinksResponse>::Create(channel_.get(), cq, rpcmethod_ListSinks_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::google::logging::v2::ListSinksResponse>* ConfigServiceV2::Stub::PrepareAsyncListSinksRaw(::grpc::ClientContext* context, const ::google::logging::v2::ListSinksRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::logging::v2::ListSinksResponse>::Create(channel_.get(), cq, rpcmethod_ListSinks_, context, request, false);
}

::grpc::Status ConfigServiceV2::Stub::GetSink(::grpc::ClientContext* context, const ::google::logging::v2::GetSinkRequest& request, ::google::logging::v2::LogSink* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetSink_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::google::logging::v2::LogSink>* ConfigServiceV2::Stub::AsyncGetSinkRaw(::grpc::ClientContext* context, const ::google::logging::v2::GetSinkRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::logging::v2::LogSink>::Create(channel_.get(), cq, rpcmethod_GetSink_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::google::logging::v2::LogSink>* ConfigServiceV2::Stub::PrepareAsyncGetSinkRaw(::grpc::ClientContext* context, const ::google::logging::v2::GetSinkRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::logging::v2::LogSink>::Create(channel_.get(), cq, rpcmethod_GetSink_, context, request, false);
}

::grpc::Status ConfigServiceV2::Stub::CreateSink(::grpc::ClientContext* context, const ::google::logging::v2::CreateSinkRequest& request, ::google::logging::v2::LogSink* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_CreateSink_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::google::logging::v2::LogSink>* ConfigServiceV2::Stub::AsyncCreateSinkRaw(::grpc::ClientContext* context, const ::google::logging::v2::CreateSinkRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::logging::v2::LogSink>::Create(channel_.get(), cq, rpcmethod_CreateSink_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::google::logging::v2::LogSink>* ConfigServiceV2::Stub::PrepareAsyncCreateSinkRaw(::grpc::ClientContext* context, const ::google::logging::v2::CreateSinkRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::logging::v2::LogSink>::Create(channel_.get(), cq, rpcmethod_CreateSink_, context, request, false);
}

::grpc::Status ConfigServiceV2::Stub::UpdateSink(::grpc::ClientContext* context, const ::google::logging::v2::UpdateSinkRequest& request, ::google::logging::v2::LogSink* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_UpdateSink_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::google::logging::v2::LogSink>* ConfigServiceV2::Stub::AsyncUpdateSinkRaw(::grpc::ClientContext* context, const ::google::logging::v2::UpdateSinkRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::logging::v2::LogSink>::Create(channel_.get(), cq, rpcmethod_UpdateSink_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::google::logging::v2::LogSink>* ConfigServiceV2::Stub::PrepareAsyncUpdateSinkRaw(::grpc::ClientContext* context, const ::google::logging::v2::UpdateSinkRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::logging::v2::LogSink>::Create(channel_.get(), cq, rpcmethod_UpdateSink_, context, request, false);
}

::grpc::Status ConfigServiceV2::Stub::DeleteSink(::grpc::ClientContext* context, const ::google::logging::v2::DeleteSinkRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_DeleteSink_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* ConfigServiceV2::Stub::AsyncDeleteSinkRaw(::grpc::ClientContext* context, const ::google::logging::v2::DeleteSinkRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::protobuf::Empty>::Create(channel_.get(), cq, rpcmethod_DeleteSink_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* ConfigServiceV2::Stub::PrepareAsyncDeleteSinkRaw(::grpc::ClientContext* context, const ::google::logging::v2::DeleteSinkRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::protobuf::Empty>::Create(channel_.get(), cq, rpcmethod_DeleteSink_, context, request, false);
}

::grpc::Status ConfigServiceV2::Stub::ListExclusions(::grpc::ClientContext* context, const ::google::logging::v2::ListExclusionsRequest& request, ::google::logging::v2::ListExclusionsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_ListExclusions_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::google::logging::v2::ListExclusionsResponse>* ConfigServiceV2::Stub::AsyncListExclusionsRaw(::grpc::ClientContext* context, const ::google::logging::v2::ListExclusionsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::logging::v2::ListExclusionsResponse>::Create(channel_.get(), cq, rpcmethod_ListExclusions_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::google::logging::v2::ListExclusionsResponse>* ConfigServiceV2::Stub::PrepareAsyncListExclusionsRaw(::grpc::ClientContext* context, const ::google::logging::v2::ListExclusionsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::logging::v2::ListExclusionsResponse>::Create(channel_.get(), cq, rpcmethod_ListExclusions_, context, request, false);
}

::grpc::Status ConfigServiceV2::Stub::GetExclusion(::grpc::ClientContext* context, const ::google::logging::v2::GetExclusionRequest& request, ::google::logging::v2::LogExclusion* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetExclusion_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::google::logging::v2::LogExclusion>* ConfigServiceV2::Stub::AsyncGetExclusionRaw(::grpc::ClientContext* context, const ::google::logging::v2::GetExclusionRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::logging::v2::LogExclusion>::Create(channel_.get(), cq, rpcmethod_GetExclusion_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::google::logging::v2::LogExclusion>* ConfigServiceV2::Stub::PrepareAsyncGetExclusionRaw(::grpc::ClientContext* context, const ::google::logging::v2::GetExclusionRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::logging::v2::LogExclusion>::Create(channel_.get(), cq, rpcmethod_GetExclusion_, context, request, false);
}

::grpc::Status ConfigServiceV2::Stub::CreateExclusion(::grpc::ClientContext* context, const ::google::logging::v2::CreateExclusionRequest& request, ::google::logging::v2::LogExclusion* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_CreateExclusion_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::google::logging::v2::LogExclusion>* ConfigServiceV2::Stub::AsyncCreateExclusionRaw(::grpc::ClientContext* context, const ::google::logging::v2::CreateExclusionRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::logging::v2::LogExclusion>::Create(channel_.get(), cq, rpcmethod_CreateExclusion_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::google::logging::v2::LogExclusion>* ConfigServiceV2::Stub::PrepareAsyncCreateExclusionRaw(::grpc::ClientContext* context, const ::google::logging::v2::CreateExclusionRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::logging::v2::LogExclusion>::Create(channel_.get(), cq, rpcmethod_CreateExclusion_, context, request, false);
}

::grpc::Status ConfigServiceV2::Stub::UpdateExclusion(::grpc::ClientContext* context, const ::google::logging::v2::UpdateExclusionRequest& request, ::google::logging::v2::LogExclusion* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_UpdateExclusion_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::google::logging::v2::LogExclusion>* ConfigServiceV2::Stub::AsyncUpdateExclusionRaw(::grpc::ClientContext* context, const ::google::logging::v2::UpdateExclusionRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::logging::v2::LogExclusion>::Create(channel_.get(), cq, rpcmethod_UpdateExclusion_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::google::logging::v2::LogExclusion>* ConfigServiceV2::Stub::PrepareAsyncUpdateExclusionRaw(::grpc::ClientContext* context, const ::google::logging::v2::UpdateExclusionRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::logging::v2::LogExclusion>::Create(channel_.get(), cq, rpcmethod_UpdateExclusion_, context, request, false);
}

::grpc::Status ConfigServiceV2::Stub::DeleteExclusion(::grpc::ClientContext* context, const ::google::logging::v2::DeleteExclusionRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_DeleteExclusion_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* ConfigServiceV2::Stub::AsyncDeleteExclusionRaw(::grpc::ClientContext* context, const ::google::logging::v2::DeleteExclusionRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::protobuf::Empty>::Create(channel_.get(), cq, rpcmethod_DeleteExclusion_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* ConfigServiceV2::Stub::PrepareAsyncDeleteExclusionRaw(::grpc::ClientContext* context, const ::google::logging::v2::DeleteExclusionRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::protobuf::Empty>::Create(channel_.get(), cq, rpcmethod_DeleteExclusion_, context, request, false);
}

ConfigServiceV2::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ConfigServiceV2_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ConfigServiceV2::Service, ::google::logging::v2::ListSinksRequest, ::google::logging::v2::ListSinksResponse>(
          std::mem_fn(&ConfigServiceV2::Service::ListSinks), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ConfigServiceV2_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ConfigServiceV2::Service, ::google::logging::v2::GetSinkRequest, ::google::logging::v2::LogSink>(
          std::mem_fn(&ConfigServiceV2::Service::GetSink), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ConfigServiceV2_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ConfigServiceV2::Service, ::google::logging::v2::CreateSinkRequest, ::google::logging::v2::LogSink>(
          std::mem_fn(&ConfigServiceV2::Service::CreateSink), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ConfigServiceV2_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ConfigServiceV2::Service, ::google::logging::v2::UpdateSinkRequest, ::google::logging::v2::LogSink>(
          std::mem_fn(&ConfigServiceV2::Service::UpdateSink), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ConfigServiceV2_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ConfigServiceV2::Service, ::google::logging::v2::DeleteSinkRequest, ::google::protobuf::Empty>(
          std::mem_fn(&ConfigServiceV2::Service::DeleteSink), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ConfigServiceV2_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ConfigServiceV2::Service, ::google::logging::v2::ListExclusionsRequest, ::google::logging::v2::ListExclusionsResponse>(
          std::mem_fn(&ConfigServiceV2::Service::ListExclusions), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ConfigServiceV2_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ConfigServiceV2::Service, ::google::logging::v2::GetExclusionRequest, ::google::logging::v2::LogExclusion>(
          std::mem_fn(&ConfigServiceV2::Service::GetExclusion), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ConfigServiceV2_method_names[7],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ConfigServiceV2::Service, ::google::logging::v2::CreateExclusionRequest, ::google::logging::v2::LogExclusion>(
          std::mem_fn(&ConfigServiceV2::Service::CreateExclusion), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ConfigServiceV2_method_names[8],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ConfigServiceV2::Service, ::google::logging::v2::UpdateExclusionRequest, ::google::logging::v2::LogExclusion>(
          std::mem_fn(&ConfigServiceV2::Service::UpdateExclusion), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ConfigServiceV2_method_names[9],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ConfigServiceV2::Service, ::google::logging::v2::DeleteExclusionRequest, ::google::protobuf::Empty>(
          std::mem_fn(&ConfigServiceV2::Service::DeleteExclusion), this)));
}

ConfigServiceV2::Service::~Service() {
}

::grpc::Status ConfigServiceV2::Service::ListSinks(::grpc::ServerContext* context, const ::google::logging::v2::ListSinksRequest* request, ::google::logging::v2::ListSinksResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ConfigServiceV2::Service::GetSink(::grpc::ServerContext* context, const ::google::logging::v2::GetSinkRequest* request, ::google::logging::v2::LogSink* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ConfigServiceV2::Service::CreateSink(::grpc::ServerContext* context, const ::google::logging::v2::CreateSinkRequest* request, ::google::logging::v2::LogSink* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ConfigServiceV2::Service::UpdateSink(::grpc::ServerContext* context, const ::google::logging::v2::UpdateSinkRequest* request, ::google::logging::v2::LogSink* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ConfigServiceV2::Service::DeleteSink(::grpc::ServerContext* context, const ::google::logging::v2::DeleteSinkRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ConfigServiceV2::Service::ListExclusions(::grpc::ServerContext* context, const ::google::logging::v2::ListExclusionsRequest* request, ::google::logging::v2::ListExclusionsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ConfigServiceV2::Service::GetExclusion(::grpc::ServerContext* context, const ::google::logging::v2::GetExclusionRequest* request, ::google::logging::v2::LogExclusion* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ConfigServiceV2::Service::CreateExclusion(::grpc::ServerContext* context, const ::google::logging::v2::CreateExclusionRequest* request, ::google::logging::v2::LogExclusion* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ConfigServiceV2::Service::UpdateExclusion(::grpc::ServerContext* context, const ::google::logging::v2::UpdateExclusionRequest* request, ::google::logging::v2::LogExclusion* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ConfigServiceV2::Service::DeleteExclusion(::grpc::ServerContext* context, const ::google::logging::v2::DeleteExclusionRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace google
}  // namespace logging
}  // namespace v2

