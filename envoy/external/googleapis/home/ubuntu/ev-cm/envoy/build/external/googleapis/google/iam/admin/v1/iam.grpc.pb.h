// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: google/iam/admin/v1/iam.proto
// Original file comments:
// Copyright 2017 Google Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
#ifndef GRPC_google_2fiam_2fadmin_2fv1_2fiam_2eproto__INCLUDED
#define GRPC_google_2fiam_2fadmin_2fv1_2fiam_2eproto__INCLUDED

#include "google/iam/admin/v1/iam.pb.h"

#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace grpc {
class CompletionQueue;
class Channel;
class ServerCompletionQueue;
class ServerContext;
}  // namespace grpc

namespace google {
namespace iam {
namespace admin {
namespace v1 {

// Creates and manages service account objects.
//
// Service account is an account that belongs to your project instead
// of to an individual end user. It is used to authenticate calls
// to a Google API.
//
// To create a service account, specify the `project_id` and `account_id`
// for the account.  The `account_id` is unique within the project, and used
// to generate the service account email address and a stable
// `unique_id`.
//
// All other methods can identify accounts using the format
// `projects/{PROJECT_ID}/serviceAccounts/{SERVICE_ACCOUNT_EMAIL}`.
// Using `-` as a wildcard for the project will infer the project from
// the account. The `account` value can be the `email` address or the
// `unique_id` of the service account.
class IAM final {
 public:
  static constexpr char const* service_full_name() {
    return "google.iam.admin.v1.IAM";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Lists [ServiceAccounts][google.iam.admin.v1.ServiceAccount] for a project.
    virtual ::grpc::Status ListServiceAccounts(::grpc::ClientContext* context, const ::google::iam::admin::v1::ListServiceAccountsRequest& request, ::google::iam::admin::v1::ListServiceAccountsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::iam::admin::v1::ListServiceAccountsResponse>> AsyncListServiceAccounts(::grpc::ClientContext* context, const ::google::iam::admin::v1::ListServiceAccountsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::iam::admin::v1::ListServiceAccountsResponse>>(AsyncListServiceAccountsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::iam::admin::v1::ListServiceAccountsResponse>> PrepareAsyncListServiceAccounts(::grpc::ClientContext* context, const ::google::iam::admin::v1::ListServiceAccountsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::iam::admin::v1::ListServiceAccountsResponse>>(PrepareAsyncListServiceAccountsRaw(context, request, cq));
    }
    // Gets a [ServiceAccount][google.iam.admin.v1.ServiceAccount].
    virtual ::grpc::Status GetServiceAccount(::grpc::ClientContext* context, const ::google::iam::admin::v1::GetServiceAccountRequest& request, ::google::iam::admin::v1::ServiceAccount* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::iam::admin::v1::ServiceAccount>> AsyncGetServiceAccount(::grpc::ClientContext* context, const ::google::iam::admin::v1::GetServiceAccountRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::iam::admin::v1::ServiceAccount>>(AsyncGetServiceAccountRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::iam::admin::v1::ServiceAccount>> PrepareAsyncGetServiceAccount(::grpc::ClientContext* context, const ::google::iam::admin::v1::GetServiceAccountRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::iam::admin::v1::ServiceAccount>>(PrepareAsyncGetServiceAccountRaw(context, request, cq));
    }
    // Creates a [ServiceAccount][google.iam.admin.v1.ServiceAccount]
    // and returns it.
    virtual ::grpc::Status CreateServiceAccount(::grpc::ClientContext* context, const ::google::iam::admin::v1::CreateServiceAccountRequest& request, ::google::iam::admin::v1::ServiceAccount* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::iam::admin::v1::ServiceAccount>> AsyncCreateServiceAccount(::grpc::ClientContext* context, const ::google::iam::admin::v1::CreateServiceAccountRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::iam::admin::v1::ServiceAccount>>(AsyncCreateServiceAccountRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::iam::admin::v1::ServiceAccount>> PrepareAsyncCreateServiceAccount(::grpc::ClientContext* context, const ::google::iam::admin::v1::CreateServiceAccountRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::iam::admin::v1::ServiceAccount>>(PrepareAsyncCreateServiceAccountRaw(context, request, cq));
    }
    // Updates a [ServiceAccount][google.iam.admin.v1.ServiceAccount].
    //
    // Currently, only the following fields are updatable:
    // `display_name` .
    // The `etag` is mandatory.
    virtual ::grpc::Status UpdateServiceAccount(::grpc::ClientContext* context, const ::google::iam::admin::v1::ServiceAccount& request, ::google::iam::admin::v1::ServiceAccount* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::iam::admin::v1::ServiceAccount>> AsyncUpdateServiceAccount(::grpc::ClientContext* context, const ::google::iam::admin::v1::ServiceAccount& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::iam::admin::v1::ServiceAccount>>(AsyncUpdateServiceAccountRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::iam::admin::v1::ServiceAccount>> PrepareAsyncUpdateServiceAccount(::grpc::ClientContext* context, const ::google::iam::admin::v1::ServiceAccount& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::iam::admin::v1::ServiceAccount>>(PrepareAsyncUpdateServiceAccountRaw(context, request, cq));
    }
    // Deletes a [ServiceAccount][google.iam.admin.v1.ServiceAccount].
    virtual ::grpc::Status DeleteServiceAccount(::grpc::ClientContext* context, const ::google::iam::admin::v1::DeleteServiceAccountRequest& request, ::google::protobuf::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> AsyncDeleteServiceAccount(::grpc::ClientContext* context, const ::google::iam::admin::v1::DeleteServiceAccountRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(AsyncDeleteServiceAccountRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> PrepareAsyncDeleteServiceAccount(::grpc::ClientContext* context, const ::google::iam::admin::v1::DeleteServiceAccountRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(PrepareAsyncDeleteServiceAccountRaw(context, request, cq));
    }
    // Lists [ServiceAccountKeys][google.iam.admin.v1.ServiceAccountKey].
    virtual ::grpc::Status ListServiceAccountKeys(::grpc::ClientContext* context, const ::google::iam::admin::v1::ListServiceAccountKeysRequest& request, ::google::iam::admin::v1::ListServiceAccountKeysResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::iam::admin::v1::ListServiceAccountKeysResponse>> AsyncListServiceAccountKeys(::grpc::ClientContext* context, const ::google::iam::admin::v1::ListServiceAccountKeysRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::iam::admin::v1::ListServiceAccountKeysResponse>>(AsyncListServiceAccountKeysRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::iam::admin::v1::ListServiceAccountKeysResponse>> PrepareAsyncListServiceAccountKeys(::grpc::ClientContext* context, const ::google::iam::admin::v1::ListServiceAccountKeysRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::iam::admin::v1::ListServiceAccountKeysResponse>>(PrepareAsyncListServiceAccountKeysRaw(context, request, cq));
    }
    // Gets the [ServiceAccountKey][google.iam.admin.v1.ServiceAccountKey]
    // by key id.
    virtual ::grpc::Status GetServiceAccountKey(::grpc::ClientContext* context, const ::google::iam::admin::v1::GetServiceAccountKeyRequest& request, ::google::iam::admin::v1::ServiceAccountKey* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::iam::admin::v1::ServiceAccountKey>> AsyncGetServiceAccountKey(::grpc::ClientContext* context, const ::google::iam::admin::v1::GetServiceAccountKeyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::iam::admin::v1::ServiceAccountKey>>(AsyncGetServiceAccountKeyRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::iam::admin::v1::ServiceAccountKey>> PrepareAsyncGetServiceAccountKey(::grpc::ClientContext* context, const ::google::iam::admin::v1::GetServiceAccountKeyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::iam::admin::v1::ServiceAccountKey>>(PrepareAsyncGetServiceAccountKeyRaw(context, request, cq));
    }
    // Creates a [ServiceAccountKey][google.iam.admin.v1.ServiceAccountKey]
    // and returns it.
    virtual ::grpc::Status CreateServiceAccountKey(::grpc::ClientContext* context, const ::google::iam::admin::v1::CreateServiceAccountKeyRequest& request, ::google::iam::admin::v1::ServiceAccountKey* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::iam::admin::v1::ServiceAccountKey>> AsyncCreateServiceAccountKey(::grpc::ClientContext* context, const ::google::iam::admin::v1::CreateServiceAccountKeyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::iam::admin::v1::ServiceAccountKey>>(AsyncCreateServiceAccountKeyRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::iam::admin::v1::ServiceAccountKey>> PrepareAsyncCreateServiceAccountKey(::grpc::ClientContext* context, const ::google::iam::admin::v1::CreateServiceAccountKeyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::iam::admin::v1::ServiceAccountKey>>(PrepareAsyncCreateServiceAccountKeyRaw(context, request, cq));
    }
    // Deletes a [ServiceAccountKey][google.iam.admin.v1.ServiceAccountKey].
    virtual ::grpc::Status DeleteServiceAccountKey(::grpc::ClientContext* context, const ::google::iam::admin::v1::DeleteServiceAccountKeyRequest& request, ::google::protobuf::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> AsyncDeleteServiceAccountKey(::grpc::ClientContext* context, const ::google::iam::admin::v1::DeleteServiceAccountKeyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(AsyncDeleteServiceAccountKeyRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> PrepareAsyncDeleteServiceAccountKey(::grpc::ClientContext* context, const ::google::iam::admin::v1::DeleteServiceAccountKeyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(PrepareAsyncDeleteServiceAccountKeyRaw(context, request, cq));
    }
    // Signs a blob using a service account's system-managed private key.
    virtual ::grpc::Status SignBlob(::grpc::ClientContext* context, const ::google::iam::admin::v1::SignBlobRequest& request, ::google::iam::admin::v1::SignBlobResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::iam::admin::v1::SignBlobResponse>> AsyncSignBlob(::grpc::ClientContext* context, const ::google::iam::admin::v1::SignBlobRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::iam::admin::v1::SignBlobResponse>>(AsyncSignBlobRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::iam::admin::v1::SignBlobResponse>> PrepareAsyncSignBlob(::grpc::ClientContext* context, const ::google::iam::admin::v1::SignBlobRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::iam::admin::v1::SignBlobResponse>>(PrepareAsyncSignBlobRaw(context, request, cq));
    }
    // Signs a JWT using a service account's system-managed private key.
    //
    // If no expiry time (`exp`) is provided in the `SignJwtRequest`, IAM sets an
    // an expiry time of one hour by default. If you request an expiry time of
    // more than one hour, the request will fail.
    virtual ::grpc::Status SignJwt(::grpc::ClientContext* context, const ::google::iam::admin::v1::SignJwtRequest& request, ::google::iam::admin::v1::SignJwtResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::iam::admin::v1::SignJwtResponse>> AsyncSignJwt(::grpc::ClientContext* context, const ::google::iam::admin::v1::SignJwtRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::iam::admin::v1::SignJwtResponse>>(AsyncSignJwtRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::iam::admin::v1::SignJwtResponse>> PrepareAsyncSignJwt(::grpc::ClientContext* context, const ::google::iam::admin::v1::SignJwtRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::iam::admin::v1::SignJwtResponse>>(PrepareAsyncSignJwtRaw(context, request, cq));
    }
    // Returns the IAM access control policy for a
    // [ServiceAccount][google.iam.admin.v1.ServiceAccount].
    virtual ::grpc::Status GetIamPolicy(::grpc::ClientContext* context, const ::google::iam::v1::GetIamPolicyRequest& request, ::google::iam::v1::Policy* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::iam::v1::Policy>> AsyncGetIamPolicy(::grpc::ClientContext* context, const ::google::iam::v1::GetIamPolicyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::iam::v1::Policy>>(AsyncGetIamPolicyRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::iam::v1::Policy>> PrepareAsyncGetIamPolicy(::grpc::ClientContext* context, const ::google::iam::v1::GetIamPolicyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::iam::v1::Policy>>(PrepareAsyncGetIamPolicyRaw(context, request, cq));
    }
    // Sets the IAM access control policy for a
    // [ServiceAccount][google.iam.admin.v1.ServiceAccount].
    virtual ::grpc::Status SetIamPolicy(::grpc::ClientContext* context, const ::google::iam::v1::SetIamPolicyRequest& request, ::google::iam::v1::Policy* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::iam::v1::Policy>> AsyncSetIamPolicy(::grpc::ClientContext* context, const ::google::iam::v1::SetIamPolicyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::iam::v1::Policy>>(AsyncSetIamPolicyRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::iam::v1::Policy>> PrepareAsyncSetIamPolicy(::grpc::ClientContext* context, const ::google::iam::v1::SetIamPolicyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::iam::v1::Policy>>(PrepareAsyncSetIamPolicyRaw(context, request, cq));
    }
    // Tests the specified permissions against the IAM access control policy
    // for a [ServiceAccount][google.iam.admin.v1.ServiceAccount].
    virtual ::grpc::Status TestIamPermissions(::grpc::ClientContext* context, const ::google::iam::v1::TestIamPermissionsRequest& request, ::google::iam::v1::TestIamPermissionsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::iam::v1::TestIamPermissionsResponse>> AsyncTestIamPermissions(::grpc::ClientContext* context, const ::google::iam::v1::TestIamPermissionsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::iam::v1::TestIamPermissionsResponse>>(AsyncTestIamPermissionsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::iam::v1::TestIamPermissionsResponse>> PrepareAsyncTestIamPermissions(::grpc::ClientContext* context, const ::google::iam::v1::TestIamPermissionsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::iam::v1::TestIamPermissionsResponse>>(PrepareAsyncTestIamPermissionsRaw(context, request, cq));
    }
    // Queries roles that can be granted on a particular resource.
    // A role is grantable if it can be used as the role in a binding for a policy
    // for that resource.
    virtual ::grpc::Status QueryGrantableRoles(::grpc::ClientContext* context, const ::google::iam::admin::v1::QueryGrantableRolesRequest& request, ::google::iam::admin::v1::QueryGrantableRolesResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::iam::admin::v1::QueryGrantableRolesResponse>> AsyncQueryGrantableRoles(::grpc::ClientContext* context, const ::google::iam::admin::v1::QueryGrantableRolesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::iam::admin::v1::QueryGrantableRolesResponse>>(AsyncQueryGrantableRolesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::iam::admin::v1::QueryGrantableRolesResponse>> PrepareAsyncQueryGrantableRoles(::grpc::ClientContext* context, const ::google::iam::admin::v1::QueryGrantableRolesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::iam::admin::v1::QueryGrantableRolesResponse>>(PrepareAsyncQueryGrantableRolesRaw(context, request, cq));
    }
    // Lists the Roles defined on a resource.
    virtual ::grpc::Status ListRoles(::grpc::ClientContext* context, const ::google::iam::admin::v1::ListRolesRequest& request, ::google::iam::admin::v1::ListRolesResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::iam::admin::v1::ListRolesResponse>> AsyncListRoles(::grpc::ClientContext* context, const ::google::iam::admin::v1::ListRolesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::iam::admin::v1::ListRolesResponse>>(AsyncListRolesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::iam::admin::v1::ListRolesResponse>> PrepareAsyncListRoles(::grpc::ClientContext* context, const ::google::iam::admin::v1::ListRolesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::iam::admin::v1::ListRolesResponse>>(PrepareAsyncListRolesRaw(context, request, cq));
    }
    // Gets a Role definition.
    virtual ::grpc::Status GetRole(::grpc::ClientContext* context, const ::google::iam::admin::v1::GetRoleRequest& request, ::google::iam::admin::v1::Role* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::iam::admin::v1::Role>> AsyncGetRole(::grpc::ClientContext* context, const ::google::iam::admin::v1::GetRoleRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::iam::admin::v1::Role>>(AsyncGetRoleRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::iam::admin::v1::Role>> PrepareAsyncGetRole(::grpc::ClientContext* context, const ::google::iam::admin::v1::GetRoleRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::iam::admin::v1::Role>>(PrepareAsyncGetRoleRaw(context, request, cq));
    }
    // Creates a new Role.
    virtual ::grpc::Status CreateRole(::grpc::ClientContext* context, const ::google::iam::admin::v1::CreateRoleRequest& request, ::google::iam::admin::v1::Role* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::iam::admin::v1::Role>> AsyncCreateRole(::grpc::ClientContext* context, const ::google::iam::admin::v1::CreateRoleRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::iam::admin::v1::Role>>(AsyncCreateRoleRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::iam::admin::v1::Role>> PrepareAsyncCreateRole(::grpc::ClientContext* context, const ::google::iam::admin::v1::CreateRoleRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::iam::admin::v1::Role>>(PrepareAsyncCreateRoleRaw(context, request, cq));
    }
    // Updates a Role definition.
    virtual ::grpc::Status UpdateRole(::grpc::ClientContext* context, const ::google::iam::admin::v1::UpdateRoleRequest& request, ::google::iam::admin::v1::Role* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::iam::admin::v1::Role>> AsyncUpdateRole(::grpc::ClientContext* context, const ::google::iam::admin::v1::UpdateRoleRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::iam::admin::v1::Role>>(AsyncUpdateRoleRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::iam::admin::v1::Role>> PrepareAsyncUpdateRole(::grpc::ClientContext* context, const ::google::iam::admin::v1::UpdateRoleRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::iam::admin::v1::Role>>(PrepareAsyncUpdateRoleRaw(context, request, cq));
    }
    // Soft deletes a role. The role is suspended and cannot be used to create new
    // IAM Policy Bindings.
    // The Role will not be included in `ListRoles()` unless `show_deleted` is set
    // in the `ListRolesRequest`. The Role contains the deleted boolean set.
    // Existing Bindings remains, but are inactive. The Role can be undeleted
    // within 7 days. After 7 days the Role is deleted and all Bindings associated
    // with the role are removed.
    virtual ::grpc::Status DeleteRole(::grpc::ClientContext* context, const ::google::iam::admin::v1::DeleteRoleRequest& request, ::google::iam::admin::v1::Role* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::iam::admin::v1::Role>> AsyncDeleteRole(::grpc::ClientContext* context, const ::google::iam::admin::v1::DeleteRoleRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::iam::admin::v1::Role>>(AsyncDeleteRoleRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::iam::admin::v1::Role>> PrepareAsyncDeleteRole(::grpc::ClientContext* context, const ::google::iam::admin::v1::DeleteRoleRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::iam::admin::v1::Role>>(PrepareAsyncDeleteRoleRaw(context, request, cq));
    }
    // Undelete a Role, bringing it back in its previous state.
    virtual ::grpc::Status UndeleteRole(::grpc::ClientContext* context, const ::google::iam::admin::v1::UndeleteRoleRequest& request, ::google::iam::admin::v1::Role* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::iam::admin::v1::Role>> AsyncUndeleteRole(::grpc::ClientContext* context, const ::google::iam::admin::v1::UndeleteRoleRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::iam::admin::v1::Role>>(AsyncUndeleteRoleRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::iam::admin::v1::Role>> PrepareAsyncUndeleteRole(::grpc::ClientContext* context, const ::google::iam::admin::v1::UndeleteRoleRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::iam::admin::v1::Role>>(PrepareAsyncUndeleteRoleRaw(context, request, cq));
    }
    // Lists the permissions testable on a resource.
    // A permission is testable if it can be tested for an identity on a resource.
    virtual ::grpc::Status QueryTestablePermissions(::grpc::ClientContext* context, const ::google::iam::admin::v1::QueryTestablePermissionsRequest& request, ::google::iam::admin::v1::QueryTestablePermissionsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::iam::admin::v1::QueryTestablePermissionsResponse>> AsyncQueryTestablePermissions(::grpc::ClientContext* context, const ::google::iam::admin::v1::QueryTestablePermissionsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::iam::admin::v1::QueryTestablePermissionsResponse>>(AsyncQueryTestablePermissionsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::iam::admin::v1::QueryTestablePermissionsResponse>> PrepareAsyncQueryTestablePermissions(::grpc::ClientContext* context, const ::google::iam::admin::v1::QueryTestablePermissionsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::iam::admin::v1::QueryTestablePermissionsResponse>>(PrepareAsyncQueryTestablePermissionsRaw(context, request, cq));
    }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::iam::admin::v1::ListServiceAccountsResponse>* AsyncListServiceAccountsRaw(::grpc::ClientContext* context, const ::google::iam::admin::v1::ListServiceAccountsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::iam::admin::v1::ListServiceAccountsResponse>* PrepareAsyncListServiceAccountsRaw(::grpc::ClientContext* context, const ::google::iam::admin::v1::ListServiceAccountsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::iam::admin::v1::ServiceAccount>* AsyncGetServiceAccountRaw(::grpc::ClientContext* context, const ::google::iam::admin::v1::GetServiceAccountRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::iam::admin::v1::ServiceAccount>* PrepareAsyncGetServiceAccountRaw(::grpc::ClientContext* context, const ::google::iam::admin::v1::GetServiceAccountRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::iam::admin::v1::ServiceAccount>* AsyncCreateServiceAccountRaw(::grpc::ClientContext* context, const ::google::iam::admin::v1::CreateServiceAccountRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::iam::admin::v1::ServiceAccount>* PrepareAsyncCreateServiceAccountRaw(::grpc::ClientContext* context, const ::google::iam::admin::v1::CreateServiceAccountRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::iam::admin::v1::ServiceAccount>* AsyncUpdateServiceAccountRaw(::grpc::ClientContext* context, const ::google::iam::admin::v1::ServiceAccount& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::iam::admin::v1::ServiceAccount>* PrepareAsyncUpdateServiceAccountRaw(::grpc::ClientContext* context, const ::google::iam::admin::v1::ServiceAccount& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* AsyncDeleteServiceAccountRaw(::grpc::ClientContext* context, const ::google::iam::admin::v1::DeleteServiceAccountRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* PrepareAsyncDeleteServiceAccountRaw(::grpc::ClientContext* context, const ::google::iam::admin::v1::DeleteServiceAccountRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::iam::admin::v1::ListServiceAccountKeysResponse>* AsyncListServiceAccountKeysRaw(::grpc::ClientContext* context, const ::google::iam::admin::v1::ListServiceAccountKeysRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::iam::admin::v1::ListServiceAccountKeysResponse>* PrepareAsyncListServiceAccountKeysRaw(::grpc::ClientContext* context, const ::google::iam::admin::v1::ListServiceAccountKeysRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::iam::admin::v1::ServiceAccountKey>* AsyncGetServiceAccountKeyRaw(::grpc::ClientContext* context, const ::google::iam::admin::v1::GetServiceAccountKeyRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::iam::admin::v1::ServiceAccountKey>* PrepareAsyncGetServiceAccountKeyRaw(::grpc::ClientContext* context, const ::google::iam::admin::v1::GetServiceAccountKeyRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::iam::admin::v1::ServiceAccountKey>* AsyncCreateServiceAccountKeyRaw(::grpc::ClientContext* context, const ::google::iam::admin::v1::CreateServiceAccountKeyRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::iam::admin::v1::ServiceAccountKey>* PrepareAsyncCreateServiceAccountKeyRaw(::grpc::ClientContext* context, const ::google::iam::admin::v1::CreateServiceAccountKeyRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* AsyncDeleteServiceAccountKeyRaw(::grpc::ClientContext* context, const ::google::iam::admin::v1::DeleteServiceAccountKeyRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* PrepareAsyncDeleteServiceAccountKeyRaw(::grpc::ClientContext* context, const ::google::iam::admin::v1::DeleteServiceAccountKeyRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::iam::admin::v1::SignBlobResponse>* AsyncSignBlobRaw(::grpc::ClientContext* context, const ::google::iam::admin::v1::SignBlobRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::iam::admin::v1::SignBlobResponse>* PrepareAsyncSignBlobRaw(::grpc::ClientContext* context, const ::google::iam::admin::v1::SignBlobRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::iam::admin::v1::SignJwtResponse>* AsyncSignJwtRaw(::grpc::ClientContext* context, const ::google::iam::admin::v1::SignJwtRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::iam::admin::v1::SignJwtResponse>* PrepareAsyncSignJwtRaw(::grpc::ClientContext* context, const ::google::iam::admin::v1::SignJwtRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::iam::v1::Policy>* AsyncGetIamPolicyRaw(::grpc::ClientContext* context, const ::google::iam::v1::GetIamPolicyRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::iam::v1::Policy>* PrepareAsyncGetIamPolicyRaw(::grpc::ClientContext* context, const ::google::iam::v1::GetIamPolicyRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::iam::v1::Policy>* AsyncSetIamPolicyRaw(::grpc::ClientContext* context, const ::google::iam::v1::SetIamPolicyRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::iam::v1::Policy>* PrepareAsyncSetIamPolicyRaw(::grpc::ClientContext* context, const ::google::iam::v1::SetIamPolicyRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::iam::v1::TestIamPermissionsResponse>* AsyncTestIamPermissionsRaw(::grpc::ClientContext* context, const ::google::iam::v1::TestIamPermissionsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::iam::v1::TestIamPermissionsResponse>* PrepareAsyncTestIamPermissionsRaw(::grpc::ClientContext* context, const ::google::iam::v1::TestIamPermissionsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::iam::admin::v1::QueryGrantableRolesResponse>* AsyncQueryGrantableRolesRaw(::grpc::ClientContext* context, const ::google::iam::admin::v1::QueryGrantableRolesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::iam::admin::v1::QueryGrantableRolesResponse>* PrepareAsyncQueryGrantableRolesRaw(::grpc::ClientContext* context, const ::google::iam::admin::v1::QueryGrantableRolesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::iam::admin::v1::ListRolesResponse>* AsyncListRolesRaw(::grpc::ClientContext* context, const ::google::iam::admin::v1::ListRolesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::iam::admin::v1::ListRolesResponse>* PrepareAsyncListRolesRaw(::grpc::ClientContext* context, const ::google::iam::admin::v1::ListRolesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::iam::admin::v1::Role>* AsyncGetRoleRaw(::grpc::ClientContext* context, const ::google::iam::admin::v1::GetRoleRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::iam::admin::v1::Role>* PrepareAsyncGetRoleRaw(::grpc::ClientContext* context, const ::google::iam::admin::v1::GetRoleRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::iam::admin::v1::Role>* AsyncCreateRoleRaw(::grpc::ClientContext* context, const ::google::iam::admin::v1::CreateRoleRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::iam::admin::v1::Role>* PrepareAsyncCreateRoleRaw(::grpc::ClientContext* context, const ::google::iam::admin::v1::CreateRoleRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::iam::admin::v1::Role>* AsyncUpdateRoleRaw(::grpc::ClientContext* context, const ::google::iam::admin::v1::UpdateRoleRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::iam::admin::v1::Role>* PrepareAsyncUpdateRoleRaw(::grpc::ClientContext* context, const ::google::iam::admin::v1::UpdateRoleRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::iam::admin::v1::Role>* AsyncDeleteRoleRaw(::grpc::ClientContext* context, const ::google::iam::admin::v1::DeleteRoleRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::iam::admin::v1::Role>* PrepareAsyncDeleteRoleRaw(::grpc::ClientContext* context, const ::google::iam::admin::v1::DeleteRoleRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::iam::admin::v1::Role>* AsyncUndeleteRoleRaw(::grpc::ClientContext* context, const ::google::iam::admin::v1::UndeleteRoleRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::iam::admin::v1::Role>* PrepareAsyncUndeleteRoleRaw(::grpc::ClientContext* context, const ::google::iam::admin::v1::UndeleteRoleRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::iam::admin::v1::QueryTestablePermissionsResponse>* AsyncQueryTestablePermissionsRaw(::grpc::ClientContext* context, const ::google::iam::admin::v1::QueryTestablePermissionsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::iam::admin::v1::QueryTestablePermissionsResponse>* PrepareAsyncQueryTestablePermissionsRaw(::grpc::ClientContext* context, const ::google::iam::admin::v1::QueryTestablePermissionsRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status ListServiceAccounts(::grpc::ClientContext* context, const ::google::iam::admin::v1::ListServiceAccountsRequest& request, ::google::iam::admin::v1::ListServiceAccountsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::iam::admin::v1::ListServiceAccountsResponse>> AsyncListServiceAccounts(::grpc::ClientContext* context, const ::google::iam::admin::v1::ListServiceAccountsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::iam::admin::v1::ListServiceAccountsResponse>>(AsyncListServiceAccountsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::iam::admin::v1::ListServiceAccountsResponse>> PrepareAsyncListServiceAccounts(::grpc::ClientContext* context, const ::google::iam::admin::v1::ListServiceAccountsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::iam::admin::v1::ListServiceAccountsResponse>>(PrepareAsyncListServiceAccountsRaw(context, request, cq));
    }
    ::grpc::Status GetServiceAccount(::grpc::ClientContext* context, const ::google::iam::admin::v1::GetServiceAccountRequest& request, ::google::iam::admin::v1::ServiceAccount* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::iam::admin::v1::ServiceAccount>> AsyncGetServiceAccount(::grpc::ClientContext* context, const ::google::iam::admin::v1::GetServiceAccountRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::iam::admin::v1::ServiceAccount>>(AsyncGetServiceAccountRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::iam::admin::v1::ServiceAccount>> PrepareAsyncGetServiceAccount(::grpc::ClientContext* context, const ::google::iam::admin::v1::GetServiceAccountRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::iam::admin::v1::ServiceAccount>>(PrepareAsyncGetServiceAccountRaw(context, request, cq));
    }
    ::grpc::Status CreateServiceAccount(::grpc::ClientContext* context, const ::google::iam::admin::v1::CreateServiceAccountRequest& request, ::google::iam::admin::v1::ServiceAccount* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::iam::admin::v1::ServiceAccount>> AsyncCreateServiceAccount(::grpc::ClientContext* context, const ::google::iam::admin::v1::CreateServiceAccountRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::iam::admin::v1::ServiceAccount>>(AsyncCreateServiceAccountRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::iam::admin::v1::ServiceAccount>> PrepareAsyncCreateServiceAccount(::grpc::ClientContext* context, const ::google::iam::admin::v1::CreateServiceAccountRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::iam::admin::v1::ServiceAccount>>(PrepareAsyncCreateServiceAccountRaw(context, request, cq));
    }
    ::grpc::Status UpdateServiceAccount(::grpc::ClientContext* context, const ::google::iam::admin::v1::ServiceAccount& request, ::google::iam::admin::v1::ServiceAccount* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::iam::admin::v1::ServiceAccount>> AsyncUpdateServiceAccount(::grpc::ClientContext* context, const ::google::iam::admin::v1::ServiceAccount& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::iam::admin::v1::ServiceAccount>>(AsyncUpdateServiceAccountRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::iam::admin::v1::ServiceAccount>> PrepareAsyncUpdateServiceAccount(::grpc::ClientContext* context, const ::google::iam::admin::v1::ServiceAccount& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::iam::admin::v1::ServiceAccount>>(PrepareAsyncUpdateServiceAccountRaw(context, request, cq));
    }
    ::grpc::Status DeleteServiceAccount(::grpc::ClientContext* context, const ::google::iam::admin::v1::DeleteServiceAccountRequest& request, ::google::protobuf::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> AsyncDeleteServiceAccount(::grpc::ClientContext* context, const ::google::iam::admin::v1::DeleteServiceAccountRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(AsyncDeleteServiceAccountRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> PrepareAsyncDeleteServiceAccount(::grpc::ClientContext* context, const ::google::iam::admin::v1::DeleteServiceAccountRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(PrepareAsyncDeleteServiceAccountRaw(context, request, cq));
    }
    ::grpc::Status ListServiceAccountKeys(::grpc::ClientContext* context, const ::google::iam::admin::v1::ListServiceAccountKeysRequest& request, ::google::iam::admin::v1::ListServiceAccountKeysResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::iam::admin::v1::ListServiceAccountKeysResponse>> AsyncListServiceAccountKeys(::grpc::ClientContext* context, const ::google::iam::admin::v1::ListServiceAccountKeysRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::iam::admin::v1::ListServiceAccountKeysResponse>>(AsyncListServiceAccountKeysRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::iam::admin::v1::ListServiceAccountKeysResponse>> PrepareAsyncListServiceAccountKeys(::grpc::ClientContext* context, const ::google::iam::admin::v1::ListServiceAccountKeysRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::iam::admin::v1::ListServiceAccountKeysResponse>>(PrepareAsyncListServiceAccountKeysRaw(context, request, cq));
    }
    ::grpc::Status GetServiceAccountKey(::grpc::ClientContext* context, const ::google::iam::admin::v1::GetServiceAccountKeyRequest& request, ::google::iam::admin::v1::ServiceAccountKey* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::iam::admin::v1::ServiceAccountKey>> AsyncGetServiceAccountKey(::grpc::ClientContext* context, const ::google::iam::admin::v1::GetServiceAccountKeyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::iam::admin::v1::ServiceAccountKey>>(AsyncGetServiceAccountKeyRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::iam::admin::v1::ServiceAccountKey>> PrepareAsyncGetServiceAccountKey(::grpc::ClientContext* context, const ::google::iam::admin::v1::GetServiceAccountKeyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::iam::admin::v1::ServiceAccountKey>>(PrepareAsyncGetServiceAccountKeyRaw(context, request, cq));
    }
    ::grpc::Status CreateServiceAccountKey(::grpc::ClientContext* context, const ::google::iam::admin::v1::CreateServiceAccountKeyRequest& request, ::google::iam::admin::v1::ServiceAccountKey* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::iam::admin::v1::ServiceAccountKey>> AsyncCreateServiceAccountKey(::grpc::ClientContext* context, const ::google::iam::admin::v1::CreateServiceAccountKeyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::iam::admin::v1::ServiceAccountKey>>(AsyncCreateServiceAccountKeyRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::iam::admin::v1::ServiceAccountKey>> PrepareAsyncCreateServiceAccountKey(::grpc::ClientContext* context, const ::google::iam::admin::v1::CreateServiceAccountKeyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::iam::admin::v1::ServiceAccountKey>>(PrepareAsyncCreateServiceAccountKeyRaw(context, request, cq));
    }
    ::grpc::Status DeleteServiceAccountKey(::grpc::ClientContext* context, const ::google::iam::admin::v1::DeleteServiceAccountKeyRequest& request, ::google::protobuf::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> AsyncDeleteServiceAccountKey(::grpc::ClientContext* context, const ::google::iam::admin::v1::DeleteServiceAccountKeyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(AsyncDeleteServiceAccountKeyRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> PrepareAsyncDeleteServiceAccountKey(::grpc::ClientContext* context, const ::google::iam::admin::v1::DeleteServiceAccountKeyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(PrepareAsyncDeleteServiceAccountKeyRaw(context, request, cq));
    }
    ::grpc::Status SignBlob(::grpc::ClientContext* context, const ::google::iam::admin::v1::SignBlobRequest& request, ::google::iam::admin::v1::SignBlobResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::iam::admin::v1::SignBlobResponse>> AsyncSignBlob(::grpc::ClientContext* context, const ::google::iam::admin::v1::SignBlobRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::iam::admin::v1::SignBlobResponse>>(AsyncSignBlobRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::iam::admin::v1::SignBlobResponse>> PrepareAsyncSignBlob(::grpc::ClientContext* context, const ::google::iam::admin::v1::SignBlobRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::iam::admin::v1::SignBlobResponse>>(PrepareAsyncSignBlobRaw(context, request, cq));
    }
    ::grpc::Status SignJwt(::grpc::ClientContext* context, const ::google::iam::admin::v1::SignJwtRequest& request, ::google::iam::admin::v1::SignJwtResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::iam::admin::v1::SignJwtResponse>> AsyncSignJwt(::grpc::ClientContext* context, const ::google::iam::admin::v1::SignJwtRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::iam::admin::v1::SignJwtResponse>>(AsyncSignJwtRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::iam::admin::v1::SignJwtResponse>> PrepareAsyncSignJwt(::grpc::ClientContext* context, const ::google::iam::admin::v1::SignJwtRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::iam::admin::v1::SignJwtResponse>>(PrepareAsyncSignJwtRaw(context, request, cq));
    }
    ::grpc::Status GetIamPolicy(::grpc::ClientContext* context, const ::google::iam::v1::GetIamPolicyRequest& request, ::google::iam::v1::Policy* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::iam::v1::Policy>> AsyncGetIamPolicy(::grpc::ClientContext* context, const ::google::iam::v1::GetIamPolicyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::iam::v1::Policy>>(AsyncGetIamPolicyRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::iam::v1::Policy>> PrepareAsyncGetIamPolicy(::grpc::ClientContext* context, const ::google::iam::v1::GetIamPolicyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::iam::v1::Policy>>(PrepareAsyncGetIamPolicyRaw(context, request, cq));
    }
    ::grpc::Status SetIamPolicy(::grpc::ClientContext* context, const ::google::iam::v1::SetIamPolicyRequest& request, ::google::iam::v1::Policy* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::iam::v1::Policy>> AsyncSetIamPolicy(::grpc::ClientContext* context, const ::google::iam::v1::SetIamPolicyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::iam::v1::Policy>>(AsyncSetIamPolicyRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::iam::v1::Policy>> PrepareAsyncSetIamPolicy(::grpc::ClientContext* context, const ::google::iam::v1::SetIamPolicyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::iam::v1::Policy>>(PrepareAsyncSetIamPolicyRaw(context, request, cq));
    }
    ::grpc::Status TestIamPermissions(::grpc::ClientContext* context, const ::google::iam::v1::TestIamPermissionsRequest& request, ::google::iam::v1::TestIamPermissionsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::iam::v1::TestIamPermissionsResponse>> AsyncTestIamPermissions(::grpc::ClientContext* context, const ::google::iam::v1::TestIamPermissionsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::iam::v1::TestIamPermissionsResponse>>(AsyncTestIamPermissionsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::iam::v1::TestIamPermissionsResponse>> PrepareAsyncTestIamPermissions(::grpc::ClientContext* context, const ::google::iam::v1::TestIamPermissionsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::iam::v1::TestIamPermissionsResponse>>(PrepareAsyncTestIamPermissionsRaw(context, request, cq));
    }
    ::grpc::Status QueryGrantableRoles(::grpc::ClientContext* context, const ::google::iam::admin::v1::QueryGrantableRolesRequest& request, ::google::iam::admin::v1::QueryGrantableRolesResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::iam::admin::v1::QueryGrantableRolesResponse>> AsyncQueryGrantableRoles(::grpc::ClientContext* context, const ::google::iam::admin::v1::QueryGrantableRolesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::iam::admin::v1::QueryGrantableRolesResponse>>(AsyncQueryGrantableRolesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::iam::admin::v1::QueryGrantableRolesResponse>> PrepareAsyncQueryGrantableRoles(::grpc::ClientContext* context, const ::google::iam::admin::v1::QueryGrantableRolesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::iam::admin::v1::QueryGrantableRolesResponse>>(PrepareAsyncQueryGrantableRolesRaw(context, request, cq));
    }
    ::grpc::Status ListRoles(::grpc::ClientContext* context, const ::google::iam::admin::v1::ListRolesRequest& request, ::google::iam::admin::v1::ListRolesResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::iam::admin::v1::ListRolesResponse>> AsyncListRoles(::grpc::ClientContext* context, const ::google::iam::admin::v1::ListRolesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::iam::admin::v1::ListRolesResponse>>(AsyncListRolesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::iam::admin::v1::ListRolesResponse>> PrepareAsyncListRoles(::grpc::ClientContext* context, const ::google::iam::admin::v1::ListRolesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::iam::admin::v1::ListRolesResponse>>(PrepareAsyncListRolesRaw(context, request, cq));
    }
    ::grpc::Status GetRole(::grpc::ClientContext* context, const ::google::iam::admin::v1::GetRoleRequest& request, ::google::iam::admin::v1::Role* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::iam::admin::v1::Role>> AsyncGetRole(::grpc::ClientContext* context, const ::google::iam::admin::v1::GetRoleRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::iam::admin::v1::Role>>(AsyncGetRoleRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::iam::admin::v1::Role>> PrepareAsyncGetRole(::grpc::ClientContext* context, const ::google::iam::admin::v1::GetRoleRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::iam::admin::v1::Role>>(PrepareAsyncGetRoleRaw(context, request, cq));
    }
    ::grpc::Status CreateRole(::grpc::ClientContext* context, const ::google::iam::admin::v1::CreateRoleRequest& request, ::google::iam::admin::v1::Role* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::iam::admin::v1::Role>> AsyncCreateRole(::grpc::ClientContext* context, const ::google::iam::admin::v1::CreateRoleRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::iam::admin::v1::Role>>(AsyncCreateRoleRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::iam::admin::v1::Role>> PrepareAsyncCreateRole(::grpc::ClientContext* context, const ::google::iam::admin::v1::CreateRoleRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::iam::admin::v1::Role>>(PrepareAsyncCreateRoleRaw(context, request, cq));
    }
    ::grpc::Status UpdateRole(::grpc::ClientContext* context, const ::google::iam::admin::v1::UpdateRoleRequest& request, ::google::iam::admin::v1::Role* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::iam::admin::v1::Role>> AsyncUpdateRole(::grpc::ClientContext* context, const ::google::iam::admin::v1::UpdateRoleRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::iam::admin::v1::Role>>(AsyncUpdateRoleRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::iam::admin::v1::Role>> PrepareAsyncUpdateRole(::grpc::ClientContext* context, const ::google::iam::admin::v1::UpdateRoleRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::iam::admin::v1::Role>>(PrepareAsyncUpdateRoleRaw(context, request, cq));
    }
    ::grpc::Status DeleteRole(::grpc::ClientContext* context, const ::google::iam::admin::v1::DeleteRoleRequest& request, ::google::iam::admin::v1::Role* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::iam::admin::v1::Role>> AsyncDeleteRole(::grpc::ClientContext* context, const ::google::iam::admin::v1::DeleteRoleRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::iam::admin::v1::Role>>(AsyncDeleteRoleRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::iam::admin::v1::Role>> PrepareAsyncDeleteRole(::grpc::ClientContext* context, const ::google::iam::admin::v1::DeleteRoleRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::iam::admin::v1::Role>>(PrepareAsyncDeleteRoleRaw(context, request, cq));
    }
    ::grpc::Status UndeleteRole(::grpc::ClientContext* context, const ::google::iam::admin::v1::UndeleteRoleRequest& request, ::google::iam::admin::v1::Role* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::iam::admin::v1::Role>> AsyncUndeleteRole(::grpc::ClientContext* context, const ::google::iam::admin::v1::UndeleteRoleRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::iam::admin::v1::Role>>(AsyncUndeleteRoleRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::iam::admin::v1::Role>> PrepareAsyncUndeleteRole(::grpc::ClientContext* context, const ::google::iam::admin::v1::UndeleteRoleRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::iam::admin::v1::Role>>(PrepareAsyncUndeleteRoleRaw(context, request, cq));
    }
    ::grpc::Status QueryTestablePermissions(::grpc::ClientContext* context, const ::google::iam::admin::v1::QueryTestablePermissionsRequest& request, ::google::iam::admin::v1::QueryTestablePermissionsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::iam::admin::v1::QueryTestablePermissionsResponse>> AsyncQueryTestablePermissions(::grpc::ClientContext* context, const ::google::iam::admin::v1::QueryTestablePermissionsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::iam::admin::v1::QueryTestablePermissionsResponse>>(AsyncQueryTestablePermissionsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::iam::admin::v1::QueryTestablePermissionsResponse>> PrepareAsyncQueryTestablePermissions(::grpc::ClientContext* context, const ::google::iam::admin::v1::QueryTestablePermissionsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::iam::admin::v1::QueryTestablePermissionsResponse>>(PrepareAsyncQueryTestablePermissionsRaw(context, request, cq));
    }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    ::grpc::ClientAsyncResponseReader< ::google::iam::admin::v1::ListServiceAccountsResponse>* AsyncListServiceAccountsRaw(::grpc::ClientContext* context, const ::google::iam::admin::v1::ListServiceAccountsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::iam::admin::v1::ListServiceAccountsResponse>* PrepareAsyncListServiceAccountsRaw(::grpc::ClientContext* context, const ::google::iam::admin::v1::ListServiceAccountsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::iam::admin::v1::ServiceAccount>* AsyncGetServiceAccountRaw(::grpc::ClientContext* context, const ::google::iam::admin::v1::GetServiceAccountRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::iam::admin::v1::ServiceAccount>* PrepareAsyncGetServiceAccountRaw(::grpc::ClientContext* context, const ::google::iam::admin::v1::GetServiceAccountRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::iam::admin::v1::ServiceAccount>* AsyncCreateServiceAccountRaw(::grpc::ClientContext* context, const ::google::iam::admin::v1::CreateServiceAccountRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::iam::admin::v1::ServiceAccount>* PrepareAsyncCreateServiceAccountRaw(::grpc::ClientContext* context, const ::google::iam::admin::v1::CreateServiceAccountRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::iam::admin::v1::ServiceAccount>* AsyncUpdateServiceAccountRaw(::grpc::ClientContext* context, const ::google::iam::admin::v1::ServiceAccount& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::iam::admin::v1::ServiceAccount>* PrepareAsyncUpdateServiceAccountRaw(::grpc::ClientContext* context, const ::google::iam::admin::v1::ServiceAccount& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* AsyncDeleteServiceAccountRaw(::grpc::ClientContext* context, const ::google::iam::admin::v1::DeleteServiceAccountRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* PrepareAsyncDeleteServiceAccountRaw(::grpc::ClientContext* context, const ::google::iam::admin::v1::DeleteServiceAccountRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::iam::admin::v1::ListServiceAccountKeysResponse>* AsyncListServiceAccountKeysRaw(::grpc::ClientContext* context, const ::google::iam::admin::v1::ListServiceAccountKeysRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::iam::admin::v1::ListServiceAccountKeysResponse>* PrepareAsyncListServiceAccountKeysRaw(::grpc::ClientContext* context, const ::google::iam::admin::v1::ListServiceAccountKeysRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::iam::admin::v1::ServiceAccountKey>* AsyncGetServiceAccountKeyRaw(::grpc::ClientContext* context, const ::google::iam::admin::v1::GetServiceAccountKeyRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::iam::admin::v1::ServiceAccountKey>* PrepareAsyncGetServiceAccountKeyRaw(::grpc::ClientContext* context, const ::google::iam::admin::v1::GetServiceAccountKeyRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::iam::admin::v1::ServiceAccountKey>* AsyncCreateServiceAccountKeyRaw(::grpc::ClientContext* context, const ::google::iam::admin::v1::CreateServiceAccountKeyRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::iam::admin::v1::ServiceAccountKey>* PrepareAsyncCreateServiceAccountKeyRaw(::grpc::ClientContext* context, const ::google::iam::admin::v1::CreateServiceAccountKeyRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* AsyncDeleteServiceAccountKeyRaw(::grpc::ClientContext* context, const ::google::iam::admin::v1::DeleteServiceAccountKeyRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* PrepareAsyncDeleteServiceAccountKeyRaw(::grpc::ClientContext* context, const ::google::iam::admin::v1::DeleteServiceAccountKeyRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::iam::admin::v1::SignBlobResponse>* AsyncSignBlobRaw(::grpc::ClientContext* context, const ::google::iam::admin::v1::SignBlobRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::iam::admin::v1::SignBlobResponse>* PrepareAsyncSignBlobRaw(::grpc::ClientContext* context, const ::google::iam::admin::v1::SignBlobRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::iam::admin::v1::SignJwtResponse>* AsyncSignJwtRaw(::grpc::ClientContext* context, const ::google::iam::admin::v1::SignJwtRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::iam::admin::v1::SignJwtResponse>* PrepareAsyncSignJwtRaw(::grpc::ClientContext* context, const ::google::iam::admin::v1::SignJwtRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::iam::v1::Policy>* AsyncGetIamPolicyRaw(::grpc::ClientContext* context, const ::google::iam::v1::GetIamPolicyRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::iam::v1::Policy>* PrepareAsyncGetIamPolicyRaw(::grpc::ClientContext* context, const ::google::iam::v1::GetIamPolicyRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::iam::v1::Policy>* AsyncSetIamPolicyRaw(::grpc::ClientContext* context, const ::google::iam::v1::SetIamPolicyRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::iam::v1::Policy>* PrepareAsyncSetIamPolicyRaw(::grpc::ClientContext* context, const ::google::iam::v1::SetIamPolicyRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::iam::v1::TestIamPermissionsResponse>* AsyncTestIamPermissionsRaw(::grpc::ClientContext* context, const ::google::iam::v1::TestIamPermissionsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::iam::v1::TestIamPermissionsResponse>* PrepareAsyncTestIamPermissionsRaw(::grpc::ClientContext* context, const ::google::iam::v1::TestIamPermissionsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::iam::admin::v1::QueryGrantableRolesResponse>* AsyncQueryGrantableRolesRaw(::grpc::ClientContext* context, const ::google::iam::admin::v1::QueryGrantableRolesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::iam::admin::v1::QueryGrantableRolesResponse>* PrepareAsyncQueryGrantableRolesRaw(::grpc::ClientContext* context, const ::google::iam::admin::v1::QueryGrantableRolesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::iam::admin::v1::ListRolesResponse>* AsyncListRolesRaw(::grpc::ClientContext* context, const ::google::iam::admin::v1::ListRolesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::iam::admin::v1::ListRolesResponse>* PrepareAsyncListRolesRaw(::grpc::ClientContext* context, const ::google::iam::admin::v1::ListRolesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::iam::admin::v1::Role>* AsyncGetRoleRaw(::grpc::ClientContext* context, const ::google::iam::admin::v1::GetRoleRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::iam::admin::v1::Role>* PrepareAsyncGetRoleRaw(::grpc::ClientContext* context, const ::google::iam::admin::v1::GetRoleRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::iam::admin::v1::Role>* AsyncCreateRoleRaw(::grpc::ClientContext* context, const ::google::iam::admin::v1::CreateRoleRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::iam::admin::v1::Role>* PrepareAsyncCreateRoleRaw(::grpc::ClientContext* context, const ::google::iam::admin::v1::CreateRoleRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::iam::admin::v1::Role>* AsyncUpdateRoleRaw(::grpc::ClientContext* context, const ::google::iam::admin::v1::UpdateRoleRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::iam::admin::v1::Role>* PrepareAsyncUpdateRoleRaw(::grpc::ClientContext* context, const ::google::iam::admin::v1::UpdateRoleRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::iam::admin::v1::Role>* AsyncDeleteRoleRaw(::grpc::ClientContext* context, const ::google::iam::admin::v1::DeleteRoleRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::iam::admin::v1::Role>* PrepareAsyncDeleteRoleRaw(::grpc::ClientContext* context, const ::google::iam::admin::v1::DeleteRoleRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::iam::admin::v1::Role>* AsyncUndeleteRoleRaw(::grpc::ClientContext* context, const ::google::iam::admin::v1::UndeleteRoleRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::iam::admin::v1::Role>* PrepareAsyncUndeleteRoleRaw(::grpc::ClientContext* context, const ::google::iam::admin::v1::UndeleteRoleRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::iam::admin::v1::QueryTestablePermissionsResponse>* AsyncQueryTestablePermissionsRaw(::grpc::ClientContext* context, const ::google::iam::admin::v1::QueryTestablePermissionsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::iam::admin::v1::QueryTestablePermissionsResponse>* PrepareAsyncQueryTestablePermissionsRaw(::grpc::ClientContext* context, const ::google::iam::admin::v1::QueryTestablePermissionsRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_ListServiceAccounts_;
    const ::grpc::internal::RpcMethod rpcmethod_GetServiceAccount_;
    const ::grpc::internal::RpcMethod rpcmethod_CreateServiceAccount_;
    const ::grpc::internal::RpcMethod rpcmethod_UpdateServiceAccount_;
    const ::grpc::internal::RpcMethod rpcmethod_DeleteServiceAccount_;
    const ::grpc::internal::RpcMethod rpcmethod_ListServiceAccountKeys_;
    const ::grpc::internal::RpcMethod rpcmethod_GetServiceAccountKey_;
    const ::grpc::internal::RpcMethod rpcmethod_CreateServiceAccountKey_;
    const ::grpc::internal::RpcMethod rpcmethod_DeleteServiceAccountKey_;
    const ::grpc::internal::RpcMethod rpcmethod_SignBlob_;
    const ::grpc::internal::RpcMethod rpcmethod_SignJwt_;
    const ::grpc::internal::RpcMethod rpcmethod_GetIamPolicy_;
    const ::grpc::internal::RpcMethod rpcmethod_SetIamPolicy_;
    const ::grpc::internal::RpcMethod rpcmethod_TestIamPermissions_;
    const ::grpc::internal::RpcMethod rpcmethod_QueryGrantableRoles_;
    const ::grpc::internal::RpcMethod rpcmethod_ListRoles_;
    const ::grpc::internal::RpcMethod rpcmethod_GetRole_;
    const ::grpc::internal::RpcMethod rpcmethod_CreateRole_;
    const ::grpc::internal::RpcMethod rpcmethod_UpdateRole_;
    const ::grpc::internal::RpcMethod rpcmethod_DeleteRole_;
    const ::grpc::internal::RpcMethod rpcmethod_UndeleteRole_;
    const ::grpc::internal::RpcMethod rpcmethod_QueryTestablePermissions_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Lists [ServiceAccounts][google.iam.admin.v1.ServiceAccount] for a project.
    virtual ::grpc::Status ListServiceAccounts(::grpc::ServerContext* context, const ::google::iam::admin::v1::ListServiceAccountsRequest* request, ::google::iam::admin::v1::ListServiceAccountsResponse* response);
    // Gets a [ServiceAccount][google.iam.admin.v1.ServiceAccount].
    virtual ::grpc::Status GetServiceAccount(::grpc::ServerContext* context, const ::google::iam::admin::v1::GetServiceAccountRequest* request, ::google::iam::admin::v1::ServiceAccount* response);
    // Creates a [ServiceAccount][google.iam.admin.v1.ServiceAccount]
    // and returns it.
    virtual ::grpc::Status CreateServiceAccount(::grpc::ServerContext* context, const ::google::iam::admin::v1::CreateServiceAccountRequest* request, ::google::iam::admin::v1::ServiceAccount* response);
    // Updates a [ServiceAccount][google.iam.admin.v1.ServiceAccount].
    //
    // Currently, only the following fields are updatable:
    // `display_name` .
    // The `etag` is mandatory.
    virtual ::grpc::Status UpdateServiceAccount(::grpc::ServerContext* context, const ::google::iam::admin::v1::ServiceAccount* request, ::google::iam::admin::v1::ServiceAccount* response);
    // Deletes a [ServiceAccount][google.iam.admin.v1.ServiceAccount].
    virtual ::grpc::Status DeleteServiceAccount(::grpc::ServerContext* context, const ::google::iam::admin::v1::DeleteServiceAccountRequest* request, ::google::protobuf::Empty* response);
    // Lists [ServiceAccountKeys][google.iam.admin.v1.ServiceAccountKey].
    virtual ::grpc::Status ListServiceAccountKeys(::grpc::ServerContext* context, const ::google::iam::admin::v1::ListServiceAccountKeysRequest* request, ::google::iam::admin::v1::ListServiceAccountKeysResponse* response);
    // Gets the [ServiceAccountKey][google.iam.admin.v1.ServiceAccountKey]
    // by key id.
    virtual ::grpc::Status GetServiceAccountKey(::grpc::ServerContext* context, const ::google::iam::admin::v1::GetServiceAccountKeyRequest* request, ::google::iam::admin::v1::ServiceAccountKey* response);
    // Creates a [ServiceAccountKey][google.iam.admin.v1.ServiceAccountKey]
    // and returns it.
    virtual ::grpc::Status CreateServiceAccountKey(::grpc::ServerContext* context, const ::google::iam::admin::v1::CreateServiceAccountKeyRequest* request, ::google::iam::admin::v1::ServiceAccountKey* response);
    // Deletes a [ServiceAccountKey][google.iam.admin.v1.ServiceAccountKey].
    virtual ::grpc::Status DeleteServiceAccountKey(::grpc::ServerContext* context, const ::google::iam::admin::v1::DeleteServiceAccountKeyRequest* request, ::google::protobuf::Empty* response);
    // Signs a blob using a service account's system-managed private key.
    virtual ::grpc::Status SignBlob(::grpc::ServerContext* context, const ::google::iam::admin::v1::SignBlobRequest* request, ::google::iam::admin::v1::SignBlobResponse* response);
    // Signs a JWT using a service account's system-managed private key.
    //
    // If no expiry time (`exp`) is provided in the `SignJwtRequest`, IAM sets an
    // an expiry time of one hour by default. If you request an expiry time of
    // more than one hour, the request will fail.
    virtual ::grpc::Status SignJwt(::grpc::ServerContext* context, const ::google::iam::admin::v1::SignJwtRequest* request, ::google::iam::admin::v1::SignJwtResponse* response);
    // Returns the IAM access control policy for a
    // [ServiceAccount][google.iam.admin.v1.ServiceAccount].
    virtual ::grpc::Status GetIamPolicy(::grpc::ServerContext* context, const ::google::iam::v1::GetIamPolicyRequest* request, ::google::iam::v1::Policy* response);
    // Sets the IAM access control policy for a
    // [ServiceAccount][google.iam.admin.v1.ServiceAccount].
    virtual ::grpc::Status SetIamPolicy(::grpc::ServerContext* context, const ::google::iam::v1::SetIamPolicyRequest* request, ::google::iam::v1::Policy* response);
    // Tests the specified permissions against the IAM access control policy
    // for a [ServiceAccount][google.iam.admin.v1.ServiceAccount].
    virtual ::grpc::Status TestIamPermissions(::grpc::ServerContext* context, const ::google::iam::v1::TestIamPermissionsRequest* request, ::google::iam::v1::TestIamPermissionsResponse* response);
    // Queries roles that can be granted on a particular resource.
    // A role is grantable if it can be used as the role in a binding for a policy
    // for that resource.
    virtual ::grpc::Status QueryGrantableRoles(::grpc::ServerContext* context, const ::google::iam::admin::v1::QueryGrantableRolesRequest* request, ::google::iam::admin::v1::QueryGrantableRolesResponse* response);
    // Lists the Roles defined on a resource.
    virtual ::grpc::Status ListRoles(::grpc::ServerContext* context, const ::google::iam::admin::v1::ListRolesRequest* request, ::google::iam::admin::v1::ListRolesResponse* response);
    // Gets a Role definition.
    virtual ::grpc::Status GetRole(::grpc::ServerContext* context, const ::google::iam::admin::v1::GetRoleRequest* request, ::google::iam::admin::v1::Role* response);
    // Creates a new Role.
    virtual ::grpc::Status CreateRole(::grpc::ServerContext* context, const ::google::iam::admin::v1::CreateRoleRequest* request, ::google::iam::admin::v1::Role* response);
    // Updates a Role definition.
    virtual ::grpc::Status UpdateRole(::grpc::ServerContext* context, const ::google::iam::admin::v1::UpdateRoleRequest* request, ::google::iam::admin::v1::Role* response);
    // Soft deletes a role. The role is suspended and cannot be used to create new
    // IAM Policy Bindings.
    // The Role will not be included in `ListRoles()` unless `show_deleted` is set
    // in the `ListRolesRequest`. The Role contains the deleted boolean set.
    // Existing Bindings remains, but are inactive. The Role can be undeleted
    // within 7 days. After 7 days the Role is deleted and all Bindings associated
    // with the role are removed.
    virtual ::grpc::Status DeleteRole(::grpc::ServerContext* context, const ::google::iam::admin::v1::DeleteRoleRequest* request, ::google::iam::admin::v1::Role* response);
    // Undelete a Role, bringing it back in its previous state.
    virtual ::grpc::Status UndeleteRole(::grpc::ServerContext* context, const ::google::iam::admin::v1::UndeleteRoleRequest* request, ::google::iam::admin::v1::Role* response);
    // Lists the permissions testable on a resource.
    // A permission is testable if it can be tested for an identity on a resource.
    virtual ::grpc::Status QueryTestablePermissions(::grpc::ServerContext* context, const ::google::iam::admin::v1::QueryTestablePermissionsRequest* request, ::google::iam::admin::v1::QueryTestablePermissionsResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_ListServiceAccounts : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_ListServiceAccounts() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_ListServiceAccounts() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListServiceAccounts(::grpc::ServerContext* context, const ::google::iam::admin::v1::ListServiceAccountsRequest* request, ::google::iam::admin::v1::ListServiceAccountsResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListServiceAccounts(::grpc::ServerContext* context, ::google::iam::admin::v1::ListServiceAccountsRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::iam::admin::v1::ListServiceAccountsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetServiceAccount : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_GetServiceAccount() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_GetServiceAccount() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetServiceAccount(::grpc::ServerContext* context, const ::google::iam::admin::v1::GetServiceAccountRequest* request, ::google::iam::admin::v1::ServiceAccount* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetServiceAccount(::grpc::ServerContext* context, ::google::iam::admin::v1::GetServiceAccountRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::iam::admin::v1::ServiceAccount>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_CreateServiceAccount : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_CreateServiceAccount() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_CreateServiceAccount() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateServiceAccount(::grpc::ServerContext* context, const ::google::iam::admin::v1::CreateServiceAccountRequest* request, ::google::iam::admin::v1::ServiceAccount* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateServiceAccount(::grpc::ServerContext* context, ::google::iam::admin::v1::CreateServiceAccountRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::iam::admin::v1::ServiceAccount>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_UpdateServiceAccount : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_UpdateServiceAccount() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_UpdateServiceAccount() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateServiceAccount(::grpc::ServerContext* context, const ::google::iam::admin::v1::ServiceAccount* request, ::google::iam::admin::v1::ServiceAccount* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateServiceAccount(::grpc::ServerContext* context, ::google::iam::admin::v1::ServiceAccount* request, ::grpc::ServerAsyncResponseWriter< ::google::iam::admin::v1::ServiceAccount>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DeleteServiceAccount : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_DeleteServiceAccount() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_DeleteServiceAccount() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteServiceAccount(::grpc::ServerContext* context, const ::google::iam::admin::v1::DeleteServiceAccountRequest* request, ::google::protobuf::Empty* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteServiceAccount(::grpc::ServerContext* context, ::google::iam::admin::v1::DeleteServiceAccountRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::protobuf::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ListServiceAccountKeys : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_ListServiceAccountKeys() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_ListServiceAccountKeys() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListServiceAccountKeys(::grpc::ServerContext* context, const ::google::iam::admin::v1::ListServiceAccountKeysRequest* request, ::google::iam::admin::v1::ListServiceAccountKeysResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListServiceAccountKeys(::grpc::ServerContext* context, ::google::iam::admin::v1::ListServiceAccountKeysRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::iam::admin::v1::ListServiceAccountKeysResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetServiceAccountKey : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_GetServiceAccountKey() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_GetServiceAccountKey() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetServiceAccountKey(::grpc::ServerContext* context, const ::google::iam::admin::v1::GetServiceAccountKeyRequest* request, ::google::iam::admin::v1::ServiceAccountKey* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetServiceAccountKey(::grpc::ServerContext* context, ::google::iam::admin::v1::GetServiceAccountKeyRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::iam::admin::v1::ServiceAccountKey>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_CreateServiceAccountKey : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_CreateServiceAccountKey() {
      ::grpc::Service::MarkMethodAsync(7);
    }
    ~WithAsyncMethod_CreateServiceAccountKey() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateServiceAccountKey(::grpc::ServerContext* context, const ::google::iam::admin::v1::CreateServiceAccountKeyRequest* request, ::google::iam::admin::v1::ServiceAccountKey* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateServiceAccountKey(::grpc::ServerContext* context, ::google::iam::admin::v1::CreateServiceAccountKeyRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::iam::admin::v1::ServiceAccountKey>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DeleteServiceAccountKey : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_DeleteServiceAccountKey() {
      ::grpc::Service::MarkMethodAsync(8);
    }
    ~WithAsyncMethod_DeleteServiceAccountKey() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteServiceAccountKey(::grpc::ServerContext* context, const ::google::iam::admin::v1::DeleteServiceAccountKeyRequest* request, ::google::protobuf::Empty* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteServiceAccountKey(::grpc::ServerContext* context, ::google::iam::admin::v1::DeleteServiceAccountKeyRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::protobuf::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SignBlob : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_SignBlob() {
      ::grpc::Service::MarkMethodAsync(9);
    }
    ~WithAsyncMethod_SignBlob() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SignBlob(::grpc::ServerContext* context, const ::google::iam::admin::v1::SignBlobRequest* request, ::google::iam::admin::v1::SignBlobResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSignBlob(::grpc::ServerContext* context, ::google::iam::admin::v1::SignBlobRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::iam::admin::v1::SignBlobResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(9, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SignJwt : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_SignJwt() {
      ::grpc::Service::MarkMethodAsync(10);
    }
    ~WithAsyncMethod_SignJwt() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SignJwt(::grpc::ServerContext* context, const ::google::iam::admin::v1::SignJwtRequest* request, ::google::iam::admin::v1::SignJwtResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSignJwt(::grpc::ServerContext* context, ::google::iam::admin::v1::SignJwtRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::iam::admin::v1::SignJwtResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(10, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetIamPolicy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_GetIamPolicy() {
      ::grpc::Service::MarkMethodAsync(11);
    }
    ~WithAsyncMethod_GetIamPolicy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetIamPolicy(::grpc::ServerContext* context, const ::google::iam::v1::GetIamPolicyRequest* request, ::google::iam::v1::Policy* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetIamPolicy(::grpc::ServerContext* context, ::google::iam::v1::GetIamPolicyRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::iam::v1::Policy>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(11, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SetIamPolicy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_SetIamPolicy() {
      ::grpc::Service::MarkMethodAsync(12);
    }
    ~WithAsyncMethod_SetIamPolicy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetIamPolicy(::grpc::ServerContext* context, const ::google::iam::v1::SetIamPolicyRequest* request, ::google::iam::v1::Policy* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetIamPolicy(::grpc::ServerContext* context, ::google::iam::v1::SetIamPolicyRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::iam::v1::Policy>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(12, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_TestIamPermissions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_TestIamPermissions() {
      ::grpc::Service::MarkMethodAsync(13);
    }
    ~WithAsyncMethod_TestIamPermissions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TestIamPermissions(::grpc::ServerContext* context, const ::google::iam::v1::TestIamPermissionsRequest* request, ::google::iam::v1::TestIamPermissionsResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestTestIamPermissions(::grpc::ServerContext* context, ::google::iam::v1::TestIamPermissionsRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::iam::v1::TestIamPermissionsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(13, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_QueryGrantableRoles : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_QueryGrantableRoles() {
      ::grpc::Service::MarkMethodAsync(14);
    }
    ~WithAsyncMethod_QueryGrantableRoles() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status QueryGrantableRoles(::grpc::ServerContext* context, const ::google::iam::admin::v1::QueryGrantableRolesRequest* request, ::google::iam::admin::v1::QueryGrantableRolesResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestQueryGrantableRoles(::grpc::ServerContext* context, ::google::iam::admin::v1::QueryGrantableRolesRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::iam::admin::v1::QueryGrantableRolesResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(14, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ListRoles : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_ListRoles() {
      ::grpc::Service::MarkMethodAsync(15);
    }
    ~WithAsyncMethod_ListRoles() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListRoles(::grpc::ServerContext* context, const ::google::iam::admin::v1::ListRolesRequest* request, ::google::iam::admin::v1::ListRolesResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListRoles(::grpc::ServerContext* context, ::google::iam::admin::v1::ListRolesRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::iam::admin::v1::ListRolesResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(15, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetRole : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_GetRole() {
      ::grpc::Service::MarkMethodAsync(16);
    }
    ~WithAsyncMethod_GetRole() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetRole(::grpc::ServerContext* context, const ::google::iam::admin::v1::GetRoleRequest* request, ::google::iam::admin::v1::Role* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetRole(::grpc::ServerContext* context, ::google::iam::admin::v1::GetRoleRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::iam::admin::v1::Role>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(16, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_CreateRole : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_CreateRole() {
      ::grpc::Service::MarkMethodAsync(17);
    }
    ~WithAsyncMethod_CreateRole() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateRole(::grpc::ServerContext* context, const ::google::iam::admin::v1::CreateRoleRequest* request, ::google::iam::admin::v1::Role* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateRole(::grpc::ServerContext* context, ::google::iam::admin::v1::CreateRoleRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::iam::admin::v1::Role>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(17, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_UpdateRole : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_UpdateRole() {
      ::grpc::Service::MarkMethodAsync(18);
    }
    ~WithAsyncMethod_UpdateRole() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateRole(::grpc::ServerContext* context, const ::google::iam::admin::v1::UpdateRoleRequest* request, ::google::iam::admin::v1::Role* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateRole(::grpc::ServerContext* context, ::google::iam::admin::v1::UpdateRoleRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::iam::admin::v1::Role>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(18, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DeleteRole : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_DeleteRole() {
      ::grpc::Service::MarkMethodAsync(19);
    }
    ~WithAsyncMethod_DeleteRole() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteRole(::grpc::ServerContext* context, const ::google::iam::admin::v1::DeleteRoleRequest* request, ::google::iam::admin::v1::Role* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteRole(::grpc::ServerContext* context, ::google::iam::admin::v1::DeleteRoleRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::iam::admin::v1::Role>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(19, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_UndeleteRole : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_UndeleteRole() {
      ::grpc::Service::MarkMethodAsync(20);
    }
    ~WithAsyncMethod_UndeleteRole() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UndeleteRole(::grpc::ServerContext* context, const ::google::iam::admin::v1::UndeleteRoleRequest* request, ::google::iam::admin::v1::Role* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUndeleteRole(::grpc::ServerContext* context, ::google::iam::admin::v1::UndeleteRoleRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::iam::admin::v1::Role>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(20, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_QueryTestablePermissions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_QueryTestablePermissions() {
      ::grpc::Service::MarkMethodAsync(21);
    }
    ~WithAsyncMethod_QueryTestablePermissions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status QueryTestablePermissions(::grpc::ServerContext* context, const ::google::iam::admin::v1::QueryTestablePermissionsRequest* request, ::google::iam::admin::v1::QueryTestablePermissionsResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestQueryTestablePermissions(::grpc::ServerContext* context, ::google::iam::admin::v1::QueryTestablePermissionsRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::iam::admin::v1::QueryTestablePermissionsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(21, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_ListServiceAccounts<WithAsyncMethod_GetServiceAccount<WithAsyncMethod_CreateServiceAccount<WithAsyncMethod_UpdateServiceAccount<WithAsyncMethod_DeleteServiceAccount<WithAsyncMethod_ListServiceAccountKeys<WithAsyncMethod_GetServiceAccountKey<WithAsyncMethod_CreateServiceAccountKey<WithAsyncMethod_DeleteServiceAccountKey<WithAsyncMethod_SignBlob<WithAsyncMethod_SignJwt<WithAsyncMethod_GetIamPolicy<WithAsyncMethod_SetIamPolicy<WithAsyncMethod_TestIamPermissions<WithAsyncMethod_QueryGrantableRoles<WithAsyncMethod_ListRoles<WithAsyncMethod_GetRole<WithAsyncMethod_CreateRole<WithAsyncMethod_UpdateRole<WithAsyncMethod_DeleteRole<WithAsyncMethod_UndeleteRole<WithAsyncMethod_QueryTestablePermissions<Service > > > > > > > > > > > > > > > > > > > > > > AsyncService;
  template <class BaseClass>
  class WithGenericMethod_ListServiceAccounts : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_ListServiceAccounts() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_ListServiceAccounts() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListServiceAccounts(::grpc::ServerContext* context, const ::google::iam::admin::v1::ListServiceAccountsRequest* request, ::google::iam::admin::v1::ListServiceAccountsResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetServiceAccount : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_GetServiceAccount() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_GetServiceAccount() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetServiceAccount(::grpc::ServerContext* context, const ::google::iam::admin::v1::GetServiceAccountRequest* request, ::google::iam::admin::v1::ServiceAccount* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_CreateServiceAccount : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_CreateServiceAccount() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_CreateServiceAccount() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateServiceAccount(::grpc::ServerContext* context, const ::google::iam::admin::v1::CreateServiceAccountRequest* request, ::google::iam::admin::v1::ServiceAccount* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_UpdateServiceAccount : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_UpdateServiceAccount() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_UpdateServiceAccount() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateServiceAccount(::grpc::ServerContext* context, const ::google::iam::admin::v1::ServiceAccount* request, ::google::iam::admin::v1::ServiceAccount* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DeleteServiceAccount : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_DeleteServiceAccount() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_DeleteServiceAccount() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteServiceAccount(::grpc::ServerContext* context, const ::google::iam::admin::v1::DeleteServiceAccountRequest* request, ::google::protobuf::Empty* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ListServiceAccountKeys : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_ListServiceAccountKeys() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_ListServiceAccountKeys() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListServiceAccountKeys(::grpc::ServerContext* context, const ::google::iam::admin::v1::ListServiceAccountKeysRequest* request, ::google::iam::admin::v1::ListServiceAccountKeysResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetServiceAccountKey : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_GetServiceAccountKey() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_GetServiceAccountKey() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetServiceAccountKey(::grpc::ServerContext* context, const ::google::iam::admin::v1::GetServiceAccountKeyRequest* request, ::google::iam::admin::v1::ServiceAccountKey* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_CreateServiceAccountKey : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_CreateServiceAccountKey() {
      ::grpc::Service::MarkMethodGeneric(7);
    }
    ~WithGenericMethod_CreateServiceAccountKey() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateServiceAccountKey(::grpc::ServerContext* context, const ::google::iam::admin::v1::CreateServiceAccountKeyRequest* request, ::google::iam::admin::v1::ServiceAccountKey* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DeleteServiceAccountKey : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_DeleteServiceAccountKey() {
      ::grpc::Service::MarkMethodGeneric(8);
    }
    ~WithGenericMethod_DeleteServiceAccountKey() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteServiceAccountKey(::grpc::ServerContext* context, const ::google::iam::admin::v1::DeleteServiceAccountKeyRequest* request, ::google::protobuf::Empty* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SignBlob : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_SignBlob() {
      ::grpc::Service::MarkMethodGeneric(9);
    }
    ~WithGenericMethod_SignBlob() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SignBlob(::grpc::ServerContext* context, const ::google::iam::admin::v1::SignBlobRequest* request, ::google::iam::admin::v1::SignBlobResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SignJwt : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_SignJwt() {
      ::grpc::Service::MarkMethodGeneric(10);
    }
    ~WithGenericMethod_SignJwt() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SignJwt(::grpc::ServerContext* context, const ::google::iam::admin::v1::SignJwtRequest* request, ::google::iam::admin::v1::SignJwtResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetIamPolicy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_GetIamPolicy() {
      ::grpc::Service::MarkMethodGeneric(11);
    }
    ~WithGenericMethod_GetIamPolicy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetIamPolicy(::grpc::ServerContext* context, const ::google::iam::v1::GetIamPolicyRequest* request, ::google::iam::v1::Policy* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SetIamPolicy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_SetIamPolicy() {
      ::grpc::Service::MarkMethodGeneric(12);
    }
    ~WithGenericMethod_SetIamPolicy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetIamPolicy(::grpc::ServerContext* context, const ::google::iam::v1::SetIamPolicyRequest* request, ::google::iam::v1::Policy* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_TestIamPermissions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_TestIamPermissions() {
      ::grpc::Service::MarkMethodGeneric(13);
    }
    ~WithGenericMethod_TestIamPermissions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TestIamPermissions(::grpc::ServerContext* context, const ::google::iam::v1::TestIamPermissionsRequest* request, ::google::iam::v1::TestIamPermissionsResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_QueryGrantableRoles : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_QueryGrantableRoles() {
      ::grpc::Service::MarkMethodGeneric(14);
    }
    ~WithGenericMethod_QueryGrantableRoles() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status QueryGrantableRoles(::grpc::ServerContext* context, const ::google::iam::admin::v1::QueryGrantableRolesRequest* request, ::google::iam::admin::v1::QueryGrantableRolesResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ListRoles : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_ListRoles() {
      ::grpc::Service::MarkMethodGeneric(15);
    }
    ~WithGenericMethod_ListRoles() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListRoles(::grpc::ServerContext* context, const ::google::iam::admin::v1::ListRolesRequest* request, ::google::iam::admin::v1::ListRolesResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetRole : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_GetRole() {
      ::grpc::Service::MarkMethodGeneric(16);
    }
    ~WithGenericMethod_GetRole() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetRole(::grpc::ServerContext* context, const ::google::iam::admin::v1::GetRoleRequest* request, ::google::iam::admin::v1::Role* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_CreateRole : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_CreateRole() {
      ::grpc::Service::MarkMethodGeneric(17);
    }
    ~WithGenericMethod_CreateRole() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateRole(::grpc::ServerContext* context, const ::google::iam::admin::v1::CreateRoleRequest* request, ::google::iam::admin::v1::Role* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_UpdateRole : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_UpdateRole() {
      ::grpc::Service::MarkMethodGeneric(18);
    }
    ~WithGenericMethod_UpdateRole() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateRole(::grpc::ServerContext* context, const ::google::iam::admin::v1::UpdateRoleRequest* request, ::google::iam::admin::v1::Role* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DeleteRole : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_DeleteRole() {
      ::grpc::Service::MarkMethodGeneric(19);
    }
    ~WithGenericMethod_DeleteRole() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteRole(::grpc::ServerContext* context, const ::google::iam::admin::v1::DeleteRoleRequest* request, ::google::iam::admin::v1::Role* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_UndeleteRole : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_UndeleteRole() {
      ::grpc::Service::MarkMethodGeneric(20);
    }
    ~WithGenericMethod_UndeleteRole() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UndeleteRole(::grpc::ServerContext* context, const ::google::iam::admin::v1::UndeleteRoleRequest* request, ::google::iam::admin::v1::Role* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_QueryTestablePermissions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_QueryTestablePermissions() {
      ::grpc::Service::MarkMethodGeneric(21);
    }
    ~WithGenericMethod_QueryTestablePermissions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status QueryTestablePermissions(::grpc::ServerContext* context, const ::google::iam::admin::v1::QueryTestablePermissionsRequest* request, ::google::iam::admin::v1::QueryTestablePermissionsResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ListServiceAccounts : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_ListServiceAccounts() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler< ::google::iam::admin::v1::ListServiceAccountsRequest, ::google::iam::admin::v1::ListServiceAccountsResponse>(std::bind(&WithStreamedUnaryMethod_ListServiceAccounts<BaseClass>::StreamedListServiceAccounts, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_ListServiceAccounts() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ListServiceAccounts(::grpc::ServerContext* context, const ::google::iam::admin::v1::ListServiceAccountsRequest* request, ::google::iam::admin::v1::ListServiceAccountsResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedListServiceAccounts(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::iam::admin::v1::ListServiceAccountsRequest,::google::iam::admin::v1::ListServiceAccountsResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetServiceAccount : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_GetServiceAccount() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler< ::google::iam::admin::v1::GetServiceAccountRequest, ::google::iam::admin::v1::ServiceAccount>(std::bind(&WithStreamedUnaryMethod_GetServiceAccount<BaseClass>::StreamedGetServiceAccount, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetServiceAccount() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetServiceAccount(::grpc::ServerContext* context, const ::google::iam::admin::v1::GetServiceAccountRequest* request, ::google::iam::admin::v1::ServiceAccount* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetServiceAccount(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::iam::admin::v1::GetServiceAccountRequest,::google::iam::admin::v1::ServiceAccount>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CreateServiceAccount : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_CreateServiceAccount() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler< ::google::iam::admin::v1::CreateServiceAccountRequest, ::google::iam::admin::v1::ServiceAccount>(std::bind(&WithStreamedUnaryMethod_CreateServiceAccount<BaseClass>::StreamedCreateServiceAccount, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_CreateServiceAccount() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CreateServiceAccount(::grpc::ServerContext* context, const ::google::iam::admin::v1::CreateServiceAccountRequest* request, ::google::iam::admin::v1::ServiceAccount* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCreateServiceAccount(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::iam::admin::v1::CreateServiceAccountRequest,::google::iam::admin::v1::ServiceAccount>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_UpdateServiceAccount : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_UpdateServiceAccount() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler< ::google::iam::admin::v1::ServiceAccount, ::google::iam::admin::v1::ServiceAccount>(std::bind(&WithStreamedUnaryMethod_UpdateServiceAccount<BaseClass>::StreamedUpdateServiceAccount, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_UpdateServiceAccount() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status UpdateServiceAccount(::grpc::ServerContext* context, const ::google::iam::admin::v1::ServiceAccount* request, ::google::iam::admin::v1::ServiceAccount* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedUpdateServiceAccount(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::iam::admin::v1::ServiceAccount,::google::iam::admin::v1::ServiceAccount>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DeleteServiceAccount : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_DeleteServiceAccount() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler< ::google::iam::admin::v1::DeleteServiceAccountRequest, ::google::protobuf::Empty>(std::bind(&WithStreamedUnaryMethod_DeleteServiceAccount<BaseClass>::StreamedDeleteServiceAccount, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_DeleteServiceAccount() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DeleteServiceAccount(::grpc::ServerContext* context, const ::google::iam::admin::v1::DeleteServiceAccountRequest* request, ::google::protobuf::Empty* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDeleteServiceAccount(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::iam::admin::v1::DeleteServiceAccountRequest,::google::protobuf::Empty>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ListServiceAccountKeys : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_ListServiceAccountKeys() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler< ::google::iam::admin::v1::ListServiceAccountKeysRequest, ::google::iam::admin::v1::ListServiceAccountKeysResponse>(std::bind(&WithStreamedUnaryMethod_ListServiceAccountKeys<BaseClass>::StreamedListServiceAccountKeys, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_ListServiceAccountKeys() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ListServiceAccountKeys(::grpc::ServerContext* context, const ::google::iam::admin::v1::ListServiceAccountKeysRequest* request, ::google::iam::admin::v1::ListServiceAccountKeysResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedListServiceAccountKeys(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::iam::admin::v1::ListServiceAccountKeysRequest,::google::iam::admin::v1::ListServiceAccountKeysResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetServiceAccountKey : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_GetServiceAccountKey() {
      ::grpc::Service::MarkMethodStreamed(6,
        new ::grpc::internal::StreamedUnaryHandler< ::google::iam::admin::v1::GetServiceAccountKeyRequest, ::google::iam::admin::v1::ServiceAccountKey>(std::bind(&WithStreamedUnaryMethod_GetServiceAccountKey<BaseClass>::StreamedGetServiceAccountKey, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetServiceAccountKey() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetServiceAccountKey(::grpc::ServerContext* context, const ::google::iam::admin::v1::GetServiceAccountKeyRequest* request, ::google::iam::admin::v1::ServiceAccountKey* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetServiceAccountKey(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::iam::admin::v1::GetServiceAccountKeyRequest,::google::iam::admin::v1::ServiceAccountKey>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CreateServiceAccountKey : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_CreateServiceAccountKey() {
      ::grpc::Service::MarkMethodStreamed(7,
        new ::grpc::internal::StreamedUnaryHandler< ::google::iam::admin::v1::CreateServiceAccountKeyRequest, ::google::iam::admin::v1::ServiceAccountKey>(std::bind(&WithStreamedUnaryMethod_CreateServiceAccountKey<BaseClass>::StreamedCreateServiceAccountKey, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_CreateServiceAccountKey() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CreateServiceAccountKey(::grpc::ServerContext* context, const ::google::iam::admin::v1::CreateServiceAccountKeyRequest* request, ::google::iam::admin::v1::ServiceAccountKey* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCreateServiceAccountKey(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::iam::admin::v1::CreateServiceAccountKeyRequest,::google::iam::admin::v1::ServiceAccountKey>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DeleteServiceAccountKey : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_DeleteServiceAccountKey() {
      ::grpc::Service::MarkMethodStreamed(8,
        new ::grpc::internal::StreamedUnaryHandler< ::google::iam::admin::v1::DeleteServiceAccountKeyRequest, ::google::protobuf::Empty>(std::bind(&WithStreamedUnaryMethod_DeleteServiceAccountKey<BaseClass>::StreamedDeleteServiceAccountKey, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_DeleteServiceAccountKey() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DeleteServiceAccountKey(::grpc::ServerContext* context, const ::google::iam::admin::v1::DeleteServiceAccountKeyRequest* request, ::google::protobuf::Empty* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDeleteServiceAccountKey(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::iam::admin::v1::DeleteServiceAccountKeyRequest,::google::protobuf::Empty>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SignBlob : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_SignBlob() {
      ::grpc::Service::MarkMethodStreamed(9,
        new ::grpc::internal::StreamedUnaryHandler< ::google::iam::admin::v1::SignBlobRequest, ::google::iam::admin::v1::SignBlobResponse>(std::bind(&WithStreamedUnaryMethod_SignBlob<BaseClass>::StreamedSignBlob, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_SignBlob() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SignBlob(::grpc::ServerContext* context, const ::google::iam::admin::v1::SignBlobRequest* request, ::google::iam::admin::v1::SignBlobResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSignBlob(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::iam::admin::v1::SignBlobRequest,::google::iam::admin::v1::SignBlobResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SignJwt : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_SignJwt() {
      ::grpc::Service::MarkMethodStreamed(10,
        new ::grpc::internal::StreamedUnaryHandler< ::google::iam::admin::v1::SignJwtRequest, ::google::iam::admin::v1::SignJwtResponse>(std::bind(&WithStreamedUnaryMethod_SignJwt<BaseClass>::StreamedSignJwt, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_SignJwt() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SignJwt(::grpc::ServerContext* context, const ::google::iam::admin::v1::SignJwtRequest* request, ::google::iam::admin::v1::SignJwtResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSignJwt(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::iam::admin::v1::SignJwtRequest,::google::iam::admin::v1::SignJwtResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetIamPolicy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_GetIamPolicy() {
      ::grpc::Service::MarkMethodStreamed(11,
        new ::grpc::internal::StreamedUnaryHandler< ::google::iam::v1::GetIamPolicyRequest, ::google::iam::v1::Policy>(std::bind(&WithStreamedUnaryMethod_GetIamPolicy<BaseClass>::StreamedGetIamPolicy, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetIamPolicy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetIamPolicy(::grpc::ServerContext* context, const ::google::iam::v1::GetIamPolicyRequest* request, ::google::iam::v1::Policy* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetIamPolicy(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::iam::v1::GetIamPolicyRequest,::google::iam::v1::Policy>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SetIamPolicy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_SetIamPolicy() {
      ::grpc::Service::MarkMethodStreamed(12,
        new ::grpc::internal::StreamedUnaryHandler< ::google::iam::v1::SetIamPolicyRequest, ::google::iam::v1::Policy>(std::bind(&WithStreamedUnaryMethod_SetIamPolicy<BaseClass>::StreamedSetIamPolicy, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_SetIamPolicy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SetIamPolicy(::grpc::ServerContext* context, const ::google::iam::v1::SetIamPolicyRequest* request, ::google::iam::v1::Policy* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSetIamPolicy(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::iam::v1::SetIamPolicyRequest,::google::iam::v1::Policy>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_TestIamPermissions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_TestIamPermissions() {
      ::grpc::Service::MarkMethodStreamed(13,
        new ::grpc::internal::StreamedUnaryHandler< ::google::iam::v1::TestIamPermissionsRequest, ::google::iam::v1::TestIamPermissionsResponse>(std::bind(&WithStreamedUnaryMethod_TestIamPermissions<BaseClass>::StreamedTestIamPermissions, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_TestIamPermissions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status TestIamPermissions(::grpc::ServerContext* context, const ::google::iam::v1::TestIamPermissionsRequest* request, ::google::iam::v1::TestIamPermissionsResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedTestIamPermissions(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::iam::v1::TestIamPermissionsRequest,::google::iam::v1::TestIamPermissionsResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_QueryGrantableRoles : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_QueryGrantableRoles() {
      ::grpc::Service::MarkMethodStreamed(14,
        new ::grpc::internal::StreamedUnaryHandler< ::google::iam::admin::v1::QueryGrantableRolesRequest, ::google::iam::admin::v1::QueryGrantableRolesResponse>(std::bind(&WithStreamedUnaryMethod_QueryGrantableRoles<BaseClass>::StreamedQueryGrantableRoles, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_QueryGrantableRoles() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status QueryGrantableRoles(::grpc::ServerContext* context, const ::google::iam::admin::v1::QueryGrantableRolesRequest* request, ::google::iam::admin::v1::QueryGrantableRolesResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedQueryGrantableRoles(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::iam::admin::v1::QueryGrantableRolesRequest,::google::iam::admin::v1::QueryGrantableRolesResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ListRoles : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_ListRoles() {
      ::grpc::Service::MarkMethodStreamed(15,
        new ::grpc::internal::StreamedUnaryHandler< ::google::iam::admin::v1::ListRolesRequest, ::google::iam::admin::v1::ListRolesResponse>(std::bind(&WithStreamedUnaryMethod_ListRoles<BaseClass>::StreamedListRoles, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_ListRoles() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ListRoles(::grpc::ServerContext* context, const ::google::iam::admin::v1::ListRolesRequest* request, ::google::iam::admin::v1::ListRolesResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedListRoles(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::iam::admin::v1::ListRolesRequest,::google::iam::admin::v1::ListRolesResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetRole : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_GetRole() {
      ::grpc::Service::MarkMethodStreamed(16,
        new ::grpc::internal::StreamedUnaryHandler< ::google::iam::admin::v1::GetRoleRequest, ::google::iam::admin::v1::Role>(std::bind(&WithStreamedUnaryMethod_GetRole<BaseClass>::StreamedGetRole, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetRole() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetRole(::grpc::ServerContext* context, const ::google::iam::admin::v1::GetRoleRequest* request, ::google::iam::admin::v1::Role* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetRole(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::iam::admin::v1::GetRoleRequest,::google::iam::admin::v1::Role>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CreateRole : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_CreateRole() {
      ::grpc::Service::MarkMethodStreamed(17,
        new ::grpc::internal::StreamedUnaryHandler< ::google::iam::admin::v1::CreateRoleRequest, ::google::iam::admin::v1::Role>(std::bind(&WithStreamedUnaryMethod_CreateRole<BaseClass>::StreamedCreateRole, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_CreateRole() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CreateRole(::grpc::ServerContext* context, const ::google::iam::admin::v1::CreateRoleRequest* request, ::google::iam::admin::v1::Role* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCreateRole(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::iam::admin::v1::CreateRoleRequest,::google::iam::admin::v1::Role>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_UpdateRole : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_UpdateRole() {
      ::grpc::Service::MarkMethodStreamed(18,
        new ::grpc::internal::StreamedUnaryHandler< ::google::iam::admin::v1::UpdateRoleRequest, ::google::iam::admin::v1::Role>(std::bind(&WithStreamedUnaryMethod_UpdateRole<BaseClass>::StreamedUpdateRole, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_UpdateRole() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status UpdateRole(::grpc::ServerContext* context, const ::google::iam::admin::v1::UpdateRoleRequest* request, ::google::iam::admin::v1::Role* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedUpdateRole(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::iam::admin::v1::UpdateRoleRequest,::google::iam::admin::v1::Role>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DeleteRole : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_DeleteRole() {
      ::grpc::Service::MarkMethodStreamed(19,
        new ::grpc::internal::StreamedUnaryHandler< ::google::iam::admin::v1::DeleteRoleRequest, ::google::iam::admin::v1::Role>(std::bind(&WithStreamedUnaryMethod_DeleteRole<BaseClass>::StreamedDeleteRole, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_DeleteRole() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DeleteRole(::grpc::ServerContext* context, const ::google::iam::admin::v1::DeleteRoleRequest* request, ::google::iam::admin::v1::Role* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDeleteRole(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::iam::admin::v1::DeleteRoleRequest,::google::iam::admin::v1::Role>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_UndeleteRole : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_UndeleteRole() {
      ::grpc::Service::MarkMethodStreamed(20,
        new ::grpc::internal::StreamedUnaryHandler< ::google::iam::admin::v1::UndeleteRoleRequest, ::google::iam::admin::v1::Role>(std::bind(&WithStreamedUnaryMethod_UndeleteRole<BaseClass>::StreamedUndeleteRole, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_UndeleteRole() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status UndeleteRole(::grpc::ServerContext* context, const ::google::iam::admin::v1::UndeleteRoleRequest* request, ::google::iam::admin::v1::Role* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedUndeleteRole(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::iam::admin::v1::UndeleteRoleRequest,::google::iam::admin::v1::Role>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_QueryTestablePermissions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_QueryTestablePermissions() {
      ::grpc::Service::MarkMethodStreamed(21,
        new ::grpc::internal::StreamedUnaryHandler< ::google::iam::admin::v1::QueryTestablePermissionsRequest, ::google::iam::admin::v1::QueryTestablePermissionsResponse>(std::bind(&WithStreamedUnaryMethod_QueryTestablePermissions<BaseClass>::StreamedQueryTestablePermissions, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_QueryTestablePermissions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status QueryTestablePermissions(::grpc::ServerContext* context, const ::google::iam::admin::v1::QueryTestablePermissionsRequest* request, ::google::iam::admin::v1::QueryTestablePermissionsResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedQueryTestablePermissions(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::iam::admin::v1::QueryTestablePermissionsRequest,::google::iam::admin::v1::QueryTestablePermissionsResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_ListServiceAccounts<WithStreamedUnaryMethod_GetServiceAccount<WithStreamedUnaryMethod_CreateServiceAccount<WithStreamedUnaryMethod_UpdateServiceAccount<WithStreamedUnaryMethod_DeleteServiceAccount<WithStreamedUnaryMethod_ListServiceAccountKeys<WithStreamedUnaryMethod_GetServiceAccountKey<WithStreamedUnaryMethod_CreateServiceAccountKey<WithStreamedUnaryMethod_DeleteServiceAccountKey<WithStreamedUnaryMethod_SignBlob<WithStreamedUnaryMethod_SignJwt<WithStreamedUnaryMethod_GetIamPolicy<WithStreamedUnaryMethod_SetIamPolicy<WithStreamedUnaryMethod_TestIamPermissions<WithStreamedUnaryMethod_QueryGrantableRoles<WithStreamedUnaryMethod_ListRoles<WithStreamedUnaryMethod_GetRole<WithStreamedUnaryMethod_CreateRole<WithStreamedUnaryMethod_UpdateRole<WithStreamedUnaryMethod_DeleteRole<WithStreamedUnaryMethod_UndeleteRole<WithStreamedUnaryMethod_QueryTestablePermissions<Service > > > > > > > > > > > > > > > > > > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_ListServiceAccounts<WithStreamedUnaryMethod_GetServiceAccount<WithStreamedUnaryMethod_CreateServiceAccount<WithStreamedUnaryMethod_UpdateServiceAccount<WithStreamedUnaryMethod_DeleteServiceAccount<WithStreamedUnaryMethod_ListServiceAccountKeys<WithStreamedUnaryMethod_GetServiceAccountKey<WithStreamedUnaryMethod_CreateServiceAccountKey<WithStreamedUnaryMethod_DeleteServiceAccountKey<WithStreamedUnaryMethod_SignBlob<WithStreamedUnaryMethod_SignJwt<WithStreamedUnaryMethod_GetIamPolicy<WithStreamedUnaryMethod_SetIamPolicy<WithStreamedUnaryMethod_TestIamPermissions<WithStreamedUnaryMethod_QueryGrantableRoles<WithStreamedUnaryMethod_ListRoles<WithStreamedUnaryMethod_GetRole<WithStreamedUnaryMethod_CreateRole<WithStreamedUnaryMethod_UpdateRole<WithStreamedUnaryMethod_DeleteRole<WithStreamedUnaryMethod_UndeleteRole<WithStreamedUnaryMethod_QueryTestablePermissions<Service > > > > > > > > > > > > > > > > > > > > > > StreamedService;
};

}  // namespace v1
}  // namespace admin
}  // namespace iam
}  // namespace google


#endif  // GRPC_google_2fiam_2fadmin_2fv1_2fiam_2eproto__INCLUDED
