// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/iam/v1/iam_policy.proto

#include "google/iam/v1/iam_policy.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)
namespace google {
namespace iam {
namespace v1 {
class SetIamPolicyRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SetIamPolicyRequest>
      _instance;
} _SetIamPolicyRequest_default_instance_;
class GetIamPolicyRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GetIamPolicyRequest>
      _instance;
} _GetIamPolicyRequest_default_instance_;
class TestIamPermissionsRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TestIamPermissionsRequest>
      _instance;
} _TestIamPermissionsRequest_default_instance_;
class TestIamPermissionsResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TestIamPermissionsResponse>
      _instance;
} _TestIamPermissionsResponse_default_instance_;
}  // namespace v1
}  // namespace iam
}  // namespace google
namespace protobuf_google_2fiam_2fv1_2fiam_5fpolicy_2eproto {
void InitDefaultsSetIamPolicyRequestImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_google_2fiam_2fv1_2fpolicy_2eproto::InitDefaultsPolicy();
  {
    void* ptr = &::google::iam::v1::_SetIamPolicyRequest_default_instance_;
    new (ptr) ::google::iam::v1::SetIamPolicyRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::iam::v1::SetIamPolicyRequest::InitAsDefaultInstance();
}

void InitDefaultsSetIamPolicyRequest() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsSetIamPolicyRequestImpl);
}

void InitDefaultsGetIamPolicyRequestImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::google::iam::v1::_GetIamPolicyRequest_default_instance_;
    new (ptr) ::google::iam::v1::GetIamPolicyRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::iam::v1::GetIamPolicyRequest::InitAsDefaultInstance();
}

void InitDefaultsGetIamPolicyRequest() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsGetIamPolicyRequestImpl);
}

void InitDefaultsTestIamPermissionsRequestImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::google::iam::v1::_TestIamPermissionsRequest_default_instance_;
    new (ptr) ::google::iam::v1::TestIamPermissionsRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::iam::v1::TestIamPermissionsRequest::InitAsDefaultInstance();
}

void InitDefaultsTestIamPermissionsRequest() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsTestIamPermissionsRequestImpl);
}

void InitDefaultsTestIamPermissionsResponseImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::google::iam::v1::_TestIamPermissionsResponse_default_instance_;
    new (ptr) ::google::iam::v1::TestIamPermissionsResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::iam::v1::TestIamPermissionsResponse::InitAsDefaultInstance();
}

void InitDefaultsTestIamPermissionsResponse() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsTestIamPermissionsResponseImpl);
}

::google::protobuf::Metadata file_level_metadata[4];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::iam::v1::SetIamPolicyRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::iam::v1::SetIamPolicyRequest, resource_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::iam::v1::SetIamPolicyRequest, policy_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::iam::v1::GetIamPolicyRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::iam::v1::GetIamPolicyRequest, resource_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::iam::v1::TestIamPermissionsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::iam::v1::TestIamPermissionsRequest, resource_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::iam::v1::TestIamPermissionsRequest, permissions_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::iam::v1::TestIamPermissionsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::iam::v1::TestIamPermissionsResponse, permissions_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::google::iam::v1::SetIamPolicyRequest)},
  { 7, -1, sizeof(::google::iam::v1::GetIamPolicyRequest)},
  { 13, -1, sizeof(::google::iam::v1::TestIamPermissionsRequest)},
  { 20, -1, sizeof(::google::iam::v1::TestIamPermissionsResponse)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::iam::v1::_SetIamPolicyRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::iam::v1::_GetIamPolicyRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::iam::v1::_TestIamPermissionsRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::iam::v1::_TestIamPermissionsResponse_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "google/iam/v1/iam_policy.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 4);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\036google/iam/v1/iam_policy.proto\022\rgoogle"
      ".iam.v1\032\034google/api/annotations.proto\032\032g"
      "oogle/iam/v1/policy.proto\"N\n\023SetIamPolic"
      "yRequest\022\020\n\010resource\030\001 \001(\t\022%\n\006policy\030\002 \001"
      "(\0132\025.google.iam.v1.Policy\"\'\n\023GetIamPolic"
      "yRequest\022\020\n\010resource\030\001 \001(\t\"B\n\031TestIamPer"
      "missionsRequest\022\020\n\010resource\030\001 \001(\t\022\023\n\013per"
      "missions\030\002 \003(\t\"1\n\032TestIamPermissionsResp"
      "onse\022\023\n\013permissions\030\001 \003(\t2\224\003\n\tIAMPolicy\022"
      "t\n\014SetIamPolicy\022\".google.iam.v1.SetIamPo"
      "licyRequest\032\025.google.iam.v1.Policy\")\202\323\344\223"
      "\002#\"\036/v1/{resource=**}:setIamPolicy:\001*\022t\n"
      "\014GetIamPolicy\022\".google.iam.v1.GetIamPoli"
      "cyRequest\032\025.google.iam.v1.Policy\")\202\323\344\223\002#"
      "\"\036/v1/{resource=**}:getIamPolicy:\001*\022\232\001\n\022"
      "TestIamPermissions\022(.google.iam.v1.TestI"
      "amPermissionsRequest\032).google.iam.v1.Tes"
      "tIamPermissionsResponse\"/\202\323\344\223\002)\"$/v1/{re"
      "source=**}:testIamPermissions:\001*Bp\n\021com."
      "google.iam.v1B\016IamPolicyProtoP\001Z0google."
      "golang.org/genproto/googleapis/iam/v1;ia"
      "m\370\001\001\252\002\023Google.Cloud.Iam.V1b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 874);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "google/iam/v1/iam_policy.proto", &protobuf_RegisterTypes);
  ::protobuf_google_2fapi_2fannotations_2eproto::AddDescriptors();
  ::protobuf_google_2fiam_2fv1_2fpolicy_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_google_2fiam_2fv1_2fiam_5fpolicy_2eproto
namespace google {
namespace iam {
namespace v1 {

// ===================================================================

void SetIamPolicyRequest::InitAsDefaultInstance() {
  ::google::iam::v1::_SetIamPolicyRequest_default_instance_._instance.get_mutable()->policy_ = const_cast< ::google::iam::v1::Policy*>(
      ::google::iam::v1::Policy::internal_default_instance());
}
void SetIamPolicyRequest::_slow_mutable_policy() {
  policy_ = ::google::protobuf::Arena::CreateMessage< ::google::iam::v1::Policy >(
      GetArenaNoVirtual());
}
void SetIamPolicyRequest::unsafe_arena_set_allocated_policy(
    ::google::iam::v1::Policy* policy) {
  if (GetArenaNoVirtual() == NULL) {
    delete policy_;
  }
  policy_ = policy;
  if (policy) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.iam.v1.SetIamPolicyRequest.policy)
}
void SetIamPolicyRequest::clear_policy() {
  if (GetArenaNoVirtual() == NULL && policy_ != NULL) {
    delete policy_;
  }
  policy_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SetIamPolicyRequest::kResourceFieldNumber;
const int SetIamPolicyRequest::kPolicyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SetIamPolicyRequest::SetIamPolicyRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_google_2fiam_2fv1_2fiam_5fpolicy_2eproto::InitDefaultsSetIamPolicyRequest();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.iam.v1.SetIamPolicyRequest)
}
SetIamPolicyRequest::SetIamPolicyRequest(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::protobuf_google_2fiam_2fv1_2fiam_5fpolicy_2eproto::InitDefaultsSetIamPolicyRequest();
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.iam.v1.SetIamPolicyRequest)
}
SetIamPolicyRequest::SetIamPolicyRequest(const SetIamPolicyRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  resource_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.resource().size() > 0) {
    resource_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.resource(),
      GetArenaNoVirtual());
  }
  if (from.has_policy()) {
    policy_ = new ::google::iam::v1::Policy(*from.policy_);
  } else {
    policy_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:google.iam.v1.SetIamPolicyRequest)
}

void SetIamPolicyRequest::SharedCtor() {
  resource_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  policy_ = NULL;
  _cached_size_ = 0;
}

SetIamPolicyRequest::~SetIamPolicyRequest() {
  // @@protoc_insertion_point(destructor:google.iam.v1.SetIamPolicyRequest)
  SharedDtor();
}

void SetIamPolicyRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  resource_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete policy_;
}

void SetIamPolicyRequest::ArenaDtor(void* object) {
  SetIamPolicyRequest* _this = reinterpret_cast< SetIamPolicyRequest* >(object);
  (void)_this;
}
void SetIamPolicyRequest::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void SetIamPolicyRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SetIamPolicyRequest::descriptor() {
  ::protobuf_google_2fiam_2fv1_2fiam_5fpolicy_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fiam_2fv1_2fiam_5fpolicy_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SetIamPolicyRequest& SetIamPolicyRequest::default_instance() {
  ::protobuf_google_2fiam_2fv1_2fiam_5fpolicy_2eproto::InitDefaultsSetIamPolicyRequest();
  return *internal_default_instance();
}

SetIamPolicyRequest* SetIamPolicyRequest::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<SetIamPolicyRequest>(arena);
}

void SetIamPolicyRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.iam.v1.SetIamPolicyRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  resource_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  if (GetArenaNoVirtual() == NULL && policy_ != NULL) {
    delete policy_;
  }
  policy_ = NULL;
  _internal_metadata_.Clear();
}

bool SetIamPolicyRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.iam.v1.SetIamPolicyRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string resource = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_resource()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->resource().data(), static_cast<int>(this->resource().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.iam.v1.SetIamPolicyRequest.resource"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.iam.v1.Policy policy = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_policy()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.iam.v1.SetIamPolicyRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.iam.v1.SetIamPolicyRequest)
  return false;
#undef DO_
}

void SetIamPolicyRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.iam.v1.SetIamPolicyRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string resource = 1;
  if (this->resource().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->resource().data(), static_cast<int>(this->resource().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.iam.v1.SetIamPolicyRequest.resource");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->resource(), output);
  }

  // .google.iam.v1.Policy policy = 2;
  if (this->has_policy()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->policy_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:google.iam.v1.SetIamPolicyRequest)
}

::google::protobuf::uint8* SetIamPolicyRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.iam.v1.SetIamPolicyRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string resource = 1;
  if (this->resource().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->resource().data(), static_cast<int>(this->resource().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.iam.v1.SetIamPolicyRequest.resource");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->resource(), target);
  }

  // .google.iam.v1.Policy policy = 2;
  if (this->has_policy()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, *this->policy_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.iam.v1.SetIamPolicyRequest)
  return target;
}

size_t SetIamPolicyRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.iam.v1.SetIamPolicyRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string resource = 1;
  if (this->resource().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->resource());
  }

  // .google.iam.v1.Policy policy = 2;
  if (this->has_policy()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->policy_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SetIamPolicyRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.iam.v1.SetIamPolicyRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SetIamPolicyRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SetIamPolicyRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.iam.v1.SetIamPolicyRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.iam.v1.SetIamPolicyRequest)
    MergeFrom(*source);
  }
}

void SetIamPolicyRequest::MergeFrom(const SetIamPolicyRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.iam.v1.SetIamPolicyRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.resource().size() > 0) {
    set_resource(from.resource());
  }
  if (from.has_policy()) {
    mutable_policy()->::google::iam::v1::Policy::MergeFrom(from.policy());
  }
}

void SetIamPolicyRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.iam.v1.SetIamPolicyRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetIamPolicyRequest::CopyFrom(const SetIamPolicyRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.iam.v1.SetIamPolicyRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetIamPolicyRequest::IsInitialized() const {
  return true;
}

void SetIamPolicyRequest::Swap(SetIamPolicyRequest* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    SetIamPolicyRequest* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void SetIamPolicyRequest::UnsafeArenaSwap(SetIamPolicyRequest* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void SetIamPolicyRequest::InternalSwap(SetIamPolicyRequest* other) {
  using std::swap;
  resource_.Swap(&other->resource_);
  swap(policy_, other->policy_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SetIamPolicyRequest::GetMetadata() const {
  protobuf_google_2fiam_2fv1_2fiam_5fpolicy_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fiam_2fv1_2fiam_5fpolicy_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void GetIamPolicyRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetIamPolicyRequest::kResourceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetIamPolicyRequest::GetIamPolicyRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_google_2fiam_2fv1_2fiam_5fpolicy_2eproto::InitDefaultsGetIamPolicyRequest();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.iam.v1.GetIamPolicyRequest)
}
GetIamPolicyRequest::GetIamPolicyRequest(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::protobuf_google_2fiam_2fv1_2fiam_5fpolicy_2eproto::InitDefaultsGetIamPolicyRequest();
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.iam.v1.GetIamPolicyRequest)
}
GetIamPolicyRequest::GetIamPolicyRequest(const GetIamPolicyRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  resource_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.resource().size() > 0) {
    resource_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.resource(),
      GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(copy_constructor:google.iam.v1.GetIamPolicyRequest)
}

void GetIamPolicyRequest::SharedCtor() {
  resource_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

GetIamPolicyRequest::~GetIamPolicyRequest() {
  // @@protoc_insertion_point(destructor:google.iam.v1.GetIamPolicyRequest)
  SharedDtor();
}

void GetIamPolicyRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  resource_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void GetIamPolicyRequest::ArenaDtor(void* object) {
  GetIamPolicyRequest* _this = reinterpret_cast< GetIamPolicyRequest* >(object);
  (void)_this;
}
void GetIamPolicyRequest::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void GetIamPolicyRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetIamPolicyRequest::descriptor() {
  ::protobuf_google_2fiam_2fv1_2fiam_5fpolicy_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fiam_2fv1_2fiam_5fpolicy_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GetIamPolicyRequest& GetIamPolicyRequest::default_instance() {
  ::protobuf_google_2fiam_2fv1_2fiam_5fpolicy_2eproto::InitDefaultsGetIamPolicyRequest();
  return *internal_default_instance();
}

GetIamPolicyRequest* GetIamPolicyRequest::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<GetIamPolicyRequest>(arena);
}

void GetIamPolicyRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.iam.v1.GetIamPolicyRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  resource_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  _internal_metadata_.Clear();
}

bool GetIamPolicyRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.iam.v1.GetIamPolicyRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string resource = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_resource()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->resource().data(), static_cast<int>(this->resource().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.iam.v1.GetIamPolicyRequest.resource"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.iam.v1.GetIamPolicyRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.iam.v1.GetIamPolicyRequest)
  return false;
#undef DO_
}

void GetIamPolicyRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.iam.v1.GetIamPolicyRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string resource = 1;
  if (this->resource().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->resource().data(), static_cast<int>(this->resource().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.iam.v1.GetIamPolicyRequest.resource");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->resource(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:google.iam.v1.GetIamPolicyRequest)
}

::google::protobuf::uint8* GetIamPolicyRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.iam.v1.GetIamPolicyRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string resource = 1;
  if (this->resource().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->resource().data(), static_cast<int>(this->resource().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.iam.v1.GetIamPolicyRequest.resource");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->resource(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.iam.v1.GetIamPolicyRequest)
  return target;
}

size_t GetIamPolicyRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.iam.v1.GetIamPolicyRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string resource = 1;
  if (this->resource().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->resource());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetIamPolicyRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.iam.v1.GetIamPolicyRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetIamPolicyRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetIamPolicyRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.iam.v1.GetIamPolicyRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.iam.v1.GetIamPolicyRequest)
    MergeFrom(*source);
  }
}

void GetIamPolicyRequest::MergeFrom(const GetIamPolicyRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.iam.v1.GetIamPolicyRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.resource().size() > 0) {
    set_resource(from.resource());
  }
}

void GetIamPolicyRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.iam.v1.GetIamPolicyRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetIamPolicyRequest::CopyFrom(const GetIamPolicyRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.iam.v1.GetIamPolicyRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetIamPolicyRequest::IsInitialized() const {
  return true;
}

void GetIamPolicyRequest::Swap(GetIamPolicyRequest* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    GetIamPolicyRequest* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void GetIamPolicyRequest::UnsafeArenaSwap(GetIamPolicyRequest* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void GetIamPolicyRequest::InternalSwap(GetIamPolicyRequest* other) {
  using std::swap;
  resource_.Swap(&other->resource_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetIamPolicyRequest::GetMetadata() const {
  protobuf_google_2fiam_2fv1_2fiam_5fpolicy_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fiam_2fv1_2fiam_5fpolicy_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void TestIamPermissionsRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TestIamPermissionsRequest::kResourceFieldNumber;
const int TestIamPermissionsRequest::kPermissionsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TestIamPermissionsRequest::TestIamPermissionsRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_google_2fiam_2fv1_2fiam_5fpolicy_2eproto::InitDefaultsTestIamPermissionsRequest();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.iam.v1.TestIamPermissionsRequest)
}
TestIamPermissionsRequest::TestIamPermissionsRequest(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  permissions_(arena) {
  ::protobuf_google_2fiam_2fv1_2fiam_5fpolicy_2eproto::InitDefaultsTestIamPermissionsRequest();
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.iam.v1.TestIamPermissionsRequest)
}
TestIamPermissionsRequest::TestIamPermissionsRequest(const TestIamPermissionsRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      permissions_(from.permissions_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  resource_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.resource().size() > 0) {
    resource_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.resource(),
      GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(copy_constructor:google.iam.v1.TestIamPermissionsRequest)
}

void TestIamPermissionsRequest::SharedCtor() {
  resource_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

TestIamPermissionsRequest::~TestIamPermissionsRequest() {
  // @@protoc_insertion_point(destructor:google.iam.v1.TestIamPermissionsRequest)
  SharedDtor();
}

void TestIamPermissionsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  resource_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void TestIamPermissionsRequest::ArenaDtor(void* object) {
  TestIamPermissionsRequest* _this = reinterpret_cast< TestIamPermissionsRequest* >(object);
  (void)_this;
}
void TestIamPermissionsRequest::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void TestIamPermissionsRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TestIamPermissionsRequest::descriptor() {
  ::protobuf_google_2fiam_2fv1_2fiam_5fpolicy_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fiam_2fv1_2fiam_5fpolicy_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TestIamPermissionsRequest& TestIamPermissionsRequest::default_instance() {
  ::protobuf_google_2fiam_2fv1_2fiam_5fpolicy_2eproto::InitDefaultsTestIamPermissionsRequest();
  return *internal_default_instance();
}

TestIamPermissionsRequest* TestIamPermissionsRequest::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<TestIamPermissionsRequest>(arena);
}

void TestIamPermissionsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.iam.v1.TestIamPermissionsRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  permissions_.Clear();
  resource_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  _internal_metadata_.Clear();
}

bool TestIamPermissionsRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.iam.v1.TestIamPermissionsRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string resource = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_resource()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->resource().data(), static_cast<int>(this->resource().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.iam.v1.TestIamPermissionsRequest.resource"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string permissions = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_permissions()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->permissions(this->permissions_size() - 1).data(),
            static_cast<int>(this->permissions(this->permissions_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.iam.v1.TestIamPermissionsRequest.permissions"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.iam.v1.TestIamPermissionsRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.iam.v1.TestIamPermissionsRequest)
  return false;
#undef DO_
}

void TestIamPermissionsRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.iam.v1.TestIamPermissionsRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string resource = 1;
  if (this->resource().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->resource().data(), static_cast<int>(this->resource().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.iam.v1.TestIamPermissionsRequest.resource");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->resource(), output);
  }

  // repeated string permissions = 2;
  for (int i = 0, n = this->permissions_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->permissions(i).data(), static_cast<int>(this->permissions(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.iam.v1.TestIamPermissionsRequest.permissions");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->permissions(i), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:google.iam.v1.TestIamPermissionsRequest)
}

::google::protobuf::uint8* TestIamPermissionsRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.iam.v1.TestIamPermissionsRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string resource = 1;
  if (this->resource().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->resource().data(), static_cast<int>(this->resource().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.iam.v1.TestIamPermissionsRequest.resource");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->resource(), target);
  }

  // repeated string permissions = 2;
  for (int i = 0, n = this->permissions_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->permissions(i).data(), static_cast<int>(this->permissions(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.iam.v1.TestIamPermissionsRequest.permissions");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->permissions(i), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.iam.v1.TestIamPermissionsRequest)
  return target;
}

size_t TestIamPermissionsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.iam.v1.TestIamPermissionsRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated string permissions = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->permissions_size());
  for (int i = 0, n = this->permissions_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->permissions(i));
  }

  // string resource = 1;
  if (this->resource().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->resource());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TestIamPermissionsRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.iam.v1.TestIamPermissionsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const TestIamPermissionsRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TestIamPermissionsRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.iam.v1.TestIamPermissionsRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.iam.v1.TestIamPermissionsRequest)
    MergeFrom(*source);
  }
}

void TestIamPermissionsRequest::MergeFrom(const TestIamPermissionsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.iam.v1.TestIamPermissionsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  permissions_.MergeFrom(from.permissions_);
  if (from.resource().size() > 0) {
    set_resource(from.resource());
  }
}

void TestIamPermissionsRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.iam.v1.TestIamPermissionsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TestIamPermissionsRequest::CopyFrom(const TestIamPermissionsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.iam.v1.TestIamPermissionsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestIamPermissionsRequest::IsInitialized() const {
  return true;
}

void TestIamPermissionsRequest::Swap(TestIamPermissionsRequest* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    TestIamPermissionsRequest* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void TestIamPermissionsRequest::UnsafeArenaSwap(TestIamPermissionsRequest* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void TestIamPermissionsRequest::InternalSwap(TestIamPermissionsRequest* other) {
  using std::swap;
  permissions_.InternalSwap(&other->permissions_);
  resource_.Swap(&other->resource_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TestIamPermissionsRequest::GetMetadata() const {
  protobuf_google_2fiam_2fv1_2fiam_5fpolicy_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fiam_2fv1_2fiam_5fpolicy_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void TestIamPermissionsResponse::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TestIamPermissionsResponse::kPermissionsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TestIamPermissionsResponse::TestIamPermissionsResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_google_2fiam_2fv1_2fiam_5fpolicy_2eproto::InitDefaultsTestIamPermissionsResponse();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.iam.v1.TestIamPermissionsResponse)
}
TestIamPermissionsResponse::TestIamPermissionsResponse(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  permissions_(arena) {
  ::protobuf_google_2fiam_2fv1_2fiam_5fpolicy_2eproto::InitDefaultsTestIamPermissionsResponse();
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.iam.v1.TestIamPermissionsResponse)
}
TestIamPermissionsResponse::TestIamPermissionsResponse(const TestIamPermissionsResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      permissions_(from.permissions_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:google.iam.v1.TestIamPermissionsResponse)
}

void TestIamPermissionsResponse::SharedCtor() {
  _cached_size_ = 0;
}

TestIamPermissionsResponse::~TestIamPermissionsResponse() {
  // @@protoc_insertion_point(destructor:google.iam.v1.TestIamPermissionsResponse)
  SharedDtor();
}

void TestIamPermissionsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
}

void TestIamPermissionsResponse::ArenaDtor(void* object) {
  TestIamPermissionsResponse* _this = reinterpret_cast< TestIamPermissionsResponse* >(object);
  (void)_this;
}
void TestIamPermissionsResponse::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void TestIamPermissionsResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TestIamPermissionsResponse::descriptor() {
  ::protobuf_google_2fiam_2fv1_2fiam_5fpolicy_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fiam_2fv1_2fiam_5fpolicy_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TestIamPermissionsResponse& TestIamPermissionsResponse::default_instance() {
  ::protobuf_google_2fiam_2fv1_2fiam_5fpolicy_2eproto::InitDefaultsTestIamPermissionsResponse();
  return *internal_default_instance();
}

TestIamPermissionsResponse* TestIamPermissionsResponse::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<TestIamPermissionsResponse>(arena);
}

void TestIamPermissionsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:google.iam.v1.TestIamPermissionsResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  permissions_.Clear();
  _internal_metadata_.Clear();
}

bool TestIamPermissionsResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.iam.v1.TestIamPermissionsResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string permissions = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_permissions()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->permissions(this->permissions_size() - 1).data(),
            static_cast<int>(this->permissions(this->permissions_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.iam.v1.TestIamPermissionsResponse.permissions"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.iam.v1.TestIamPermissionsResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.iam.v1.TestIamPermissionsResponse)
  return false;
#undef DO_
}

void TestIamPermissionsResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.iam.v1.TestIamPermissionsResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string permissions = 1;
  for (int i = 0, n = this->permissions_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->permissions(i).data(), static_cast<int>(this->permissions(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.iam.v1.TestIamPermissionsResponse.permissions");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->permissions(i), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:google.iam.v1.TestIamPermissionsResponse)
}

::google::protobuf::uint8* TestIamPermissionsResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.iam.v1.TestIamPermissionsResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string permissions = 1;
  for (int i = 0, n = this->permissions_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->permissions(i).data(), static_cast<int>(this->permissions(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.iam.v1.TestIamPermissionsResponse.permissions");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->permissions(i), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.iam.v1.TestIamPermissionsResponse)
  return target;
}

size_t TestIamPermissionsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.iam.v1.TestIamPermissionsResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated string permissions = 1;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->permissions_size());
  for (int i = 0, n = this->permissions_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->permissions(i));
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TestIamPermissionsResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.iam.v1.TestIamPermissionsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const TestIamPermissionsResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TestIamPermissionsResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.iam.v1.TestIamPermissionsResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.iam.v1.TestIamPermissionsResponse)
    MergeFrom(*source);
  }
}

void TestIamPermissionsResponse::MergeFrom(const TestIamPermissionsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.iam.v1.TestIamPermissionsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  permissions_.MergeFrom(from.permissions_);
}

void TestIamPermissionsResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.iam.v1.TestIamPermissionsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TestIamPermissionsResponse::CopyFrom(const TestIamPermissionsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.iam.v1.TestIamPermissionsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestIamPermissionsResponse::IsInitialized() const {
  return true;
}

void TestIamPermissionsResponse::Swap(TestIamPermissionsResponse* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    TestIamPermissionsResponse* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void TestIamPermissionsResponse::UnsafeArenaSwap(TestIamPermissionsResponse* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void TestIamPermissionsResponse::InternalSwap(TestIamPermissionsResponse* other) {
  using std::swap;
  permissions_.InternalSwap(&other->permissions_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TestIamPermissionsResponse::GetMetadata() const {
  protobuf_google_2fiam_2fv1_2fiam_5fpolicy_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fiam_2fv1_2fiam_5fpolicy_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace iam
}  // namespace google

// @@protoc_insertion_point(global_scope)
